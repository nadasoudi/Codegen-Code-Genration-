Unnamed: 0,Problem,Python Code,Generated_Code
0,Write a NumPy program to repeat elements of an array. ,"import numpy as np
x = np.repeat(3, 4)
print(x)
x = np.array([[1,2],[3,4]])
print(np.repeat(x, 2))
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a)

a = np.repeat(a, 2)

print(a)

a = np.repeat(a, 2, axis=0)

print(a)

a = np.repeat(a, 2, axis=1)

print(a)

a = np.repeat(a, 2, axis="
1,Write a Python function to create and print a list where the values are square of numbers between 1 and 30 (both included). ,"def printValues():
	l = list()
	for i in range(1,31):
		l.append(i**2)
	print(l)
		
printValues()
","def square_list(n):
    l = []
    for i in range(1, n+1):
        l.append(i**2)
    return l

print(square_list(30))

""""""

def square_list(n):
    l = []
    for i in range(1, n+1):
        l.append(i**2)
    return l

print(square_list(30"
2,Write a Python program to remove duplicates from a list of lists. ,"import itertools
num = [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]
print(""Original List"", num)
num.sort()
new_num = list(num for num,_ in itertools.groupby(num))
print(""New List"", new_num)
","def remove_duplicates(lst):
    # Your code here
    return lst

lst = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]
print(remove_duplicates(lst))

""""""

def remove_duplicates(lst):
    # Your code"
3,Write a NumPy program to compute the x and y coordinates for points on a sine curve and plot the points using matplotlib. ,"import numpy as np
import matplotlib.pyplot as plt
# Compute the x and y coordinates for points on a sine curve
x = np.arange(0, 3 * np.pi, 0.2)
y = np.sin(x)
print(""Plot the points using matplotlib:"")
plt.plot(x, y)
plt.show()
","import numpy as np
import matplotlib.pyplot as plt

x = np.arange(0, 2*np.pi, 0.1)
y = np.sin(x)

plt.plot(x, y)
plt.show()

""""""

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%"
4,Write a Python program to alter a given SQLite table. ,"import sqlite3
from sqlite3 import Error
def sql_connection():
   try:
     conn = sqlite3.connect('mydatabase.db')
     return conn
   except Error:
     print(Error)
def sql_table(conn):
   cursorObj = conn.cursor()
   cursorObj.execute(""CREATE TABLE agent_master(agent_code char(6),agent_name char(40),working_area char(35),commission decimal(10,2),phone_no char(15) NULL);"")
   print(""\nagent_master file has created."")
   
   # adding a new column in the agent_master table
   cursorObj.execute(""""""
   ALTER TABLE agent_master
   ADD COLUMN FLAG BOOLEAN;
   """""")
   print(""\nagent_master file altered."")
   conn.commit()
   
sqllite_conn = sql_connection()
sql_table(sqllite_conn)
if (sqllite_conn):
 sqllite_conn.close()
 print(""\nThe SQLite connection is closed."")
","import sqlite3

conn = sqlite3.connect('mydb.db')
c = conn.cursor()

c.execute(""""""CREATE TABLE IF NOT EXISTS mytable (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    age INTEGER NOT NULL,
    gender TEXT NOT NULL
)"""""")

c.execute(""INSERT INTO mytable (name, age, gender) VALUES ('John', 30, 'Male')"
5,Write a Python program to extract specified size of strings from a give list of string values using lambda. ,"def extract_string(str_list1, l):
    result = list(filter(lambda e: len(e) == l, str_list1))
    return result

str_list1 = ['Python', 'list', 'exercises', 'practice', 'solution'] 
print(""Original list:"")
print(str_list1)
l = 8
print(""\nlength of the string to extract:"")
print(l)
print(""\nAfter extracting strings of specified length from the said list:"")
print(extract_string(str_list1 , l))
","def solution(lst):
    return len(lst)

lst = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"", ""z""]
print(solution(lst))"
6,Write a Python program to create Fibonacci series upto n using Lambda. ,"from functools import reduce
 
fib_series = lambda n: reduce(lambda x, _: x+[x[-1]+x[-2]],
                                range(n-2), [0, 1])
 
print(""Fibonacci series upto 2:"")
print(fib_series(2))
print(""\nFibonacci series upto 5:"")
print(fib_series(5))
print(""\nFibonacci series upto 6:"")
print(fib_series(6))
print(""\nFibonacci series upto 9:"")
print(fib_series(9))
","def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

n = int(input(""Enter the number of terms: ""))
print(fib(n))

""""""

# Solution:

def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1"
7,Write a Python program to sort unsorted numbers using Strand sort. ,"#Ref:https://bit.ly/3qW9FIX
import operator
def strand_sort(arr: list, reverse: bool = False, solution: list = None) -> list:
    _operator = operator.lt if reverse else operator.gt
    solution = solution or []
    if not arr:
        return solution
    sublist = [arr.pop(0)]
    for i, item in enumerate(arr):
        if _operator(item, sublist[-1]):
            sublist.append(item)
            arr.pop(i)

    #  merging sublist into solution list
    if not solution:
        solution.extend(sublist)
    else:
        while sublist:
            item = sublist.pop(0)
            for i, xx in enumerate(solution):
                if not _operator(item, xx):
                    solution.insert(i, item)
                    break
            else:
                solution.append(item)

    strand_sort(arr, reverse, solution)
    return solution
lst = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(lst)
print(""After applying  Strand sort the said list becomes:"")
print(strand_sort(lst))
lst = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(lst)
print(""After applying Strand sort the said list becomes:"")
print(strand_sort(lst))
lst = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(lst)
print(""After applying Strand sort the said list becomes:"")
print(strand_sort(lst))
","def sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [10, 8, 2, 5, 1, 9, 4, 6, 3]
print(sort(arr))

""""""

def sort(arr"
8,Write a Python program to insert a specified element in a given list after every nth element. ,"def inset_element_list(lst, x, n):
    i = n
    while i < len(lst):
        lst.insert(i, x)
        i+= n+1
    return lst

nums = [1, 3, 5, 7, 9, 11,0, 2, 4, 6, 8, 10,8,9,0,4,3,0]
print(""Original list:"")
print(nums)
x = 20
n = 4
print(""\nInsert"",x,""in said list after every"",n,""th element:"")
print(inset_element_list(nums, x, n))

chars = ['s','d','f','j','s','a','j','d','f','d']
print(""\nOriginal list:"")
print(chars)
x = 'Z'
n = 3
print(""\nInsert"",x,""in said list after every"",n,""th element:"")
print(inset_element_list(chars, x, n))
","def insert_after(list, element, n):
    for i in range(n):
        list.insert(i, element)
    return list

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
element = 5
n = 2
print(insert_after(list, element, n))

""""""

def insert_after(list, element, n):
    for i in range(n):
        list"
9,rite a Pandas program to create a Pivot table and find the maximum and minimum sale value of the items. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df, index='Item', values='Sale_amt', aggfunc=[np.max, np.min])
print(table)
","import pandas as pd

df = pd.read_csv(""C:\\Users\\DELL\\Desktop\\Python\\Data_Visualization\\Sales.csv"")

# Create a pivot table
pivot = df.pivot_table(index=""Customer ID"", columns=""Item"", values=""Sales"")

# Find the maximum and minimum sales
print(pivot.max())
print(pivot.min())

# Create a new column in the pivot"
10,Write a NumPy program to extract upper triangular part of a NumPy matrix. ,"import numpy as np
num = np.arange(18)
arr1 = np.reshape(num, [6, 3])
print(""Original array:"")
print(arr1)
result  = arr1[np.triu_indices(3)]
print(""\nExtract upper triangular part of the said array:"")
print(result)
result  = arr1[np.triu_indices(2)]
print(""\nExtract upper triangular part of the said array:"")
print(result)
","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(A[0, :])

# Output:
# [1 2 3]
# [4 5 6]
# [7 8 9]

# Note:
# The matrix is square and its dimensions are N x N.
# The matrix is stored in a 2-D array A.
# The upper triangular part of"
11,Write a Python program to find the maximum occurring character in a given string. ,"def get_max_occuring_char(str1):
  ASCII_SIZE = 256
  ctr = [0] * ASCII_SIZE
  max = -1
  ch = ''
  for i in str1:
    ctr[ord(i)]+=1;
 
  for i in str1:
    if max < ctr[ord(i)]:
      max = ctr[ord(i)]
      ch = i
  return ch

print(get_max_occuring_char(""Python: Get file creation and modification date/times""))
print(get_max_occuring_char(""abcdefghijkb""))
","def max_occuring_char(string):
    max_occuring_char = 0
    for i in string:
        if i == max_occuring_char:
            continue
        else:
            max_occuring_char = i
    return max_occuring_char

print(max_occuring_char(""abcdefghijklmnopqrstuvwxyz""))

""""""

def max_occuring_char(string):
    max_occuring"
12,"Write a Python program to find whether a given number (accept from the user) is even or odd, print out an appropriate message to the user. ","num = int(input(""Enter a number: ""))
mod = num % 2
if mod > 0:
    print(""This is an odd number."")
else:
    print(""This is an even number."")","def even_odd(num):
    if num % 2 == 0:
        print(""Even"")
    else:
        print(""Odd"")

num = int(input(""Enter a number: ""))
even_odd(num)

""""""

# Solution 1

def even_odd(num):
    if num % 2 == 0:
        print(""Even"")
    else:
        print(""Odd"")"
13,Write a NumPy program to create a new vector with 2 consecutive 0 between two values of a given vector. ,"import numpy as np
nums = np.array([1,2,3,4,5,6,7,8])
print(""Original array:"")
print(nums)
p = 2
new_nums = np.zeros(len(nums) + (len(nums)-1)*(p))
new_nums[::p+1] = nums
print(""\nNew array:"")
print(new_nums)
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
b = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

c = np.concatenate((a, b), axis=0)
print(c)

# Solution:

# a = np.array([1, 2, 3, 4"
14,Write a Python program to count the occurrences of each word in a given sentence. ,"def word_count(str):
    counts = dict()
    words = str.split()

    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1

    return counts

print( word_count('the quick brown fox jumps over the lazy dog.'))
","python solution.py

""""""

def count_words(sentence):
    """"""
    This function counts the occurrences of each word in a given sentence.
    
    Parameters:
    sentence (string): The sentence to count the occurrences of each word in.
    
    Returns:
    count_words (dict): A dictionary containing the word and its count.
    """"""
    
    count_words = {}
    
    for word in sentence.split():
        if word in count"
15,Write a Python program that accepts a hyphen-separated sequence of words as input and prints the words in a hyphen-separated sequence after sorting them alphabetically. ,"items=[n for n in input().split('-')]
items.sort()
print('-'.join(items))
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17"
16,Write a Pandas program to insert a column at a specific index in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'weight': [35, 32, 33, 30, 31, 32]},
     index =  [1, 2, 3, 4, 5, 6])
print(""Original DataFrame with single index:"")
print(df)
date_of_birth = ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997']  
idx = 3
print(""\nInsert 'date_of_birth' column in 3rd position of the said DataFrame:"")
df.insert(loc=idx, column='date_of_birth', value=date_of_birth)
print(df)
","import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'col1': [1, 2, 3, 4], 'col2': [5, 6, 7, 8]})

# Insert a column at the index 0
df.insert(0, 'col3', [10, 20, 30, 40])

# Print the DataFrame
print(df)

# Create a DataFrame
df = pd.DataFrame({'"
17,Write a Python program to remove the last N number of elements from a given list. ,"def remove_last_n(nums, N):
    result = nums[:len(nums)-N]
    return result    
nums = [2,3,9,8,2,0,39,84,2,2,34,2,34,5,3,5]
print(""Original lists:"")
print(nums)
N = 3
print(""\nRemove the last"",N,""elements from the said list:"")
print(remove_last_n(nums, N))
N = 5
print(""\nRemove the last"",N,""elements from the said list:"")
print(remove_last_n(nums, N))
N = 1
print(""\nRemove the last"",N,""element from the said list:"")
print(remove_last_n(nums, N))
","def remove_last_n(lst, n):
    return lst[:-n]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
print(remove_last_n(lst, n))

""""""

def remove_last_n(lst, n):
    return lst[:-n]

lst = [1, 2, 3, 4, 5, 6, 7"
18,Write a Python program to find index position and value of the maximum and minimum values in a given list of numbers using lambda. ,"def position_max_min(nums):
    max_result = max(enumerate(nums), key=(lambda x: x[1]))
    min_result = min(enumerate(nums), key=(lambda x: x[1]))
    return max_result,min_result

nums = [12,33,23,10.11,67,89,45,66.7,23,12,11,10.25,54]
print(""Original list:"")
print(nums)
result = position_max_min(nums)
print(""\nIndex position and value of the maximum value of the said list:"")
print(result[0])
print(""\nIndex position and value of the minimum value of the said list:"")
print(result[1])
","def max_min(numbers):
    return max(numbers), min(numbers)

print(max_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def max_min(numbers):
    return max(numbers), min(numbers)

print(max_min([1, 2, 3, 4, 5, 6, 7, 8, 9,"
19,Write a NumPy program to find the k smallest values of a given NumPy array. ,"import numpy as np
array1 = np.array([1, 7, 8, 2, 0.1, 3, 15, 2.5])
print(""Original arrays:"")
print(array1)
k = 4
result = np.argpartition(array1, k)
print(""\nk smallest values:"")
print(array1[result[:k]])
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.min())

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.min(axis=0))

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
20,"Write a NumPy program to add one polynomial to another, subtract one polynomial from another, multiply one polynomial by another and divide one polynomial by another. ","from numpy.polynomial import polynomial as P
x = (10,20,30)
y = (30,40,50)
print(""Add one polynomial to another:"")
print(P.polyadd(x,y))
print(""Subtract one polynomial from another:"")
print(P.polysub(x,y))
print(""Multiply one polynomial by another:"")
print(P.polymul(x,y))
print(""Divide one polynomial by another:"")
print(P.polydiv(x,y))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a + b)
print(a - b)
print(a * b)
print(a / b)

# Solution:

# a ="
21,Write a Python program to check common elements between two given list are in same order or not. ,"def same_order(l1, l2):
    common_elements = set(l1) & set(l2)
    l1 = [e for e in l1 if e in common_elements]
    l2 = [e for e in l2 if e in common_elements]
    return l1 == l2

color1 = [""red"",""green"",""black"",""orange""]
color2 = [""red"",""pink"",""green"",""white"",""black""]
color3 = [""white"",""orange"",""pink"",""black""]

print(""Original lists:"")
print(color1)
print(color2)
print(color3)
print(""\nTest common elements between color1 and color2 are in same order?"")
print(same_order(color1, color2))
print(""\nTest common elements between color1 and color3 are in same order?"")
print(same_order(color1, color3))
print(""\nTest common elements between color2 and color3 are in same order?"")
print(same_order(color2, color3))
","def common_elements(l1, l2):
    l1.sort()
    l2.sort()
    if l1 == l2:
        return True
    else:
        return False

l1 = [1, 2, 3, 4, 5]
l2 = [1, 2, 3, 4, 5, 6]
print(common_elements(l1, l2))

""""""

# Solution:

def common_e"
22,Write a Python program to find numbers divisible by nineteen or thirteen from a list of numbers using Lambda. ,"nums = [19, 65, 57, 39, 152, 639, 121, 44, 90, 190]
print(""Orginal list:"")
print(nums) 
result = list(filter(lambda x: (x % 19 == 0 or x % 13 == 0), nums)) 
print(""\nNumbers of the above list divisible by nineteen or thirteen:"")
print(result)
","def solution(numbers):
    return list(filter(lambda x: x % 19 == 0 or x % 13 == 0, numbers))

""""""

def solution(numbers):
    return list(filter(lambda x: x % 19 == 0 or x % 13 == 0, numbers))

print(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17"
23,Write a NumPy program to multiply two given arrays of same size element-by-element. ,"import numpy as np 
nums1 = np.array([[2, 5, 2],
              [1, 5, 5]])
nums2 = np.array([[5, 3, 4],
              [3, 2, 5]])
print(""Array1:"") 
print(nums1)
print(""Array2:"") 
print(nums2)
print(""\nMultiply said arrays of same size element-by-element:"")
print(np.multiply(nums1, nums2))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a * b)

# OUTPUT:
# [[15 12 22]
#  [25 26 30]]

# Hint: You can use np.dot() to perform matrix multiplication.

# Hint: You can use np."
24,"Write a Python program to get a list, sorted in increasing order by the last element in each tuple from a given list of non-empty tuples. ","def last(n): return n[-1]

def sort_list_last(tuples):
  return sorted(tuples, key=last)

print(sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))
","def last_elem(tup):
    return tup[-1]

tup = [1,2,3,4,5,6,7,8,9,10]
print(sorted(tup, key=last_elem))

""""""

def last_elem(tup):
    return tup[-1]

tup = [1,2,3,4"
25,Write a Pandas program to replace the missing values with the most frequent values present in each column of a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df) 
print(""\nReplace the missing values with the most frequent values present in each column:"")
result = df.fillna(df.mode().iloc[0])
print(result)
","import pandas as pd

# Read the data
df = pd.read_csv(""data/data.csv"")

# Create a new column called ""Most Frequent""
df[""Most Frequent""] = df[""Age""].mode()

# Print the dataframe
print(df)

# Replace the missing values with the most frequent values
df.fillna(df.mode(), inplace=True)

# Print the dataframe"
26,"Write a NumPy program to split an array of 14 elements into 3 arrays, each of which has 2, 4, and 8 elements in the original order. ","import numpy as np
x = np.arange(1, 15)
print(""Original array:"",x)
print(""After splitting:"")
print(np.split(x, [2, 6]))
","import numpy as np

arr = np.array([14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,"
27,Write a Python program to create a deep copy of a given dictionary. Use copy.copy,"import copy
nums_x = {""a"":1, ""b"":2, 'cc':{""c"":3}}
print(""Original dictionary: "", nums_x)
nums_y = copy.deepcopy(nums_x)
print(""\nDeep copy of the said list:"")
print(nums_y)
print(""\nChange the value of an element of the original dictionary:"")
nums_x[""cc""][""c""] = 10
print(nums_x)
print(""\nSecond dictionary (Deep copy):"")
print(nums_y)

nums = {""x"":1, ""y"":2, 'zz':{""z"":3}}
nums_copy = copy.deepcopy(nums)
print(""\nOriginal dictionary :"")
print(nums)
print(""\nDeep copy of the said list:"")
print(nums_copy)
print(""\nChange the value of an element of the original dictionary:"")
nums[""zz""][""z""] = 10
print(""\nFirst dictionary:"")
print(nums)
print(""\nSecond dictionary (Deep copy):"")
print(nums_copy)
","def deep_copy(d):
    new_d = {}
    for key in d:
        new_d[key] = d[key]
    return new_d

d = {'a': 1, 'b': 2, 'c': 3}
print(deep_copy(d))

""""""

# Solution

def deep_copy(d):
    new_d = {}
    for key in d:
        new_d[key] = d["
28,Write a Pandas program to create a subset of a given series based on value and condition. ,"import pandas as pd
s = pd.Series([0, 1,2,3,4,5,6,7,8,9,10])
print(""Original Data Series:"")
print(s)
print(""\nSubset of the above Data Series:"")
n = 6
new_s = s[s < n]
print(new_s)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Score': [85, 90, 95, 100, 95, 90]})

# Create a subset of the dataframe
df_subset = df.loc[df['Score'] >= 60]

# Print the subset of the dataframe
print(df_sub"
29,Write a Python program to get the items from a given list with specific condition. ,"def first_index(l1):
    return sum(1 for i in l1 if (i> 45 and i % 2 == 0))

nums = [12,45,23,67,78,90,45,32,100,76,38,62,73,29,83]
print(""Original list:"")
print(nums)
n = 45
print(""\nNumber of Items of the said list which are even and greater than"",n)
print(first_index(nums))
","def get_items(list, condition):
    for item in list:
        if condition(item):
            yield item

print(get_items([1, 2, 3, 4, 5], lambda x: x % 2 == 0))

""""""

def get_items(list, condition):
    for item in list:
        if condition(item):
            yield item

print(get_items([1, 2, 3, 4, 5], lambda x: x %"
30,Write a Python program to read a file line by line store it into a variable. ,"def file_read(fname):
        with open (fname, ""r"") as myfile:
                data=myfile.readlines()
                print(data)
file_read('test.txt')
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

#"
31,Write a Python program to get the current value of the recursion limit. ,"import sys
print()
print(""Current value of the recursion limit:"")
print(sys.getrecursionlimit())
print()
","import sys

def recursionLimit():
    return sys.getrecursionlimit()

print(recursionLimit())

""""""

# Solution:

import sys

def recursionLimit():
    return sys.getrecursionlimit()

print(recursionLimit())

""""""

# Solution:

import sys

def recursionLimit():
    return sys.getrecursionlimit()

print(recursionLimit())

""""""

# Solution:

import"
32,Write a Python program to swap cases of a given string. ,"def swap_case_string(str1):
   result_str = """"   
   for item in str1:
       if item.isupper():
           result_str += item.lower()
       else:
           result_str += item.upper()           
   return result_str
print(swap_case_string(""Python Exercises""))
print(swap_case_string(""Java""))
print(swap_case_string(""NumPy""))
","def swap_case(s):
    # your code goes here
    return s.swapcase()

# read the string
s = input()
# call the function
print(swap_case(s))

'''
Sample Input

hacker
Sample Output

Hacker is a good boy
'''"
33,"Write a Python program to convert an address (like ""1600 Amphitheatre Parkway, Mountain View, CA"") into geographic coordinates (like latitude 37.423021 and longitude -122.083739). ","import requests
geo_url = 'http://maps.googleapis.com/maps/api/geocode/json'
my_address = {'address': '21 Ramkrishana Road, Burdwan, East Burdwan, West Bengal, India', 
             'language': 'en'}
response = requests.get(geo_url, params = my_address)
results = response.json()['results']
my_geo = results[0]['geometry']['location']
print(""Longitude:"",my_geo['lng'],""\n"",""Latitude:"",my_geo['lat'])
","# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:"
34,Write a Python program to create a datetime from a given timezone-aware datetime using arrow module. ,"import arrow
from datetime import datetime
from dateutil import tz
print(""\nCreate a date from a given date and a given time zone:"")
d1 = arrow.get(datetime(2018, 7, 5), 'US/Pacific')
print(d1)
print(""\nCreate a date from a given date and a time zone object from a string representation:"")
d2 = arrow.get(datetime(2017, 7, 5), tz.gettz('America/Chicago'))
print(d2)
d3 = arrow.get(datetime.now(tz.gettz('US/Pacific')))
print(""\nCreate a date using current datetime and a specified time zone:"")
print(d3)
","import datetime

def datetime_to_arrow(dt):
    return dt.replace(tzinfo=datetime.timezone.utc).astimezone(datetime.timezone.utc)

dt = datetime.datetime(2021, 1, 1, 12, 30, 0, tzinfo=datetime.timezone.utc)
print(datetime_to_arrow(dt))

""""""

# Solution:"
35,Write a Python program to create a two-dimensional list from given list of lists. ,"def two_dimensional_list(nums):
  return list(zip(*nums))
print(two_dimensional_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]))
print(two_dimensional_list([[1, 2], [4, 5]]))
","def create_list(lst):
    return [[i,j] for i in lst for j in lst]

lst = [[1,2,3],[4,5,6],[7,8,9]]
print(create_list(lst))

""""""

def create_list(lst):
    return [[i,j] for i in lst for j in lst]

lst = [[1,2,3],[4,5,6"
36,Write a Python program to invert a dictionary with unique hashable values. ,"def test(students):
  return { value: key for key, value in students.items() }
 
students = {
  'Theodore': 10,
  'Mathew': 11,
  'Roxanne': 9,
}
print(test(students))
","def invert_dict(d):
    return {v: k for k, v in d.items()}

d = {'a': 1, 'b': 2, 'c': 3}
print(invert_dict(d))

""""""

# Solution:

def invert_dict(d):
    return {v: k for k, v in d.items()}

d = {'a': 1, 'b': 2, 'c': 3}
print"
37,Write a NumPy program to access last two columns of a multidimensional columns. ,"import numpy as np
arra = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(arra)
result = arra[:,[1,2]]
print(result)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a[:, 2])

# Output:
# [1 2 3]
# [4 5 6]
# [7 8 9]

# Hint: To solve this problem, you can use the numpy.ndarray.T method.
# For example, to access the transpose of a matrix, use np."
38,Write a Python program to create Cartesian product of two or more given lists using itertools. ,"import itertools 
def cartesian_product(lists):
    return list(itertools.product(*lists))

ls = [[1,2],[3,4]]
print(""Original Lists:"",ls)
print(""Cartesian product of the said lists: "",cartesian_product(ls))
ls = [[1,2,3],[3,4,5]]
print(""\nOriginal Lists:"",ls)
print(""Cartesian product of the said lists: "",cartesian_product(ls))
ls = [[],[1,2,3]]
print(""\nOriginal Lists:"",ls)
print(""Cartesian product of the said lists: "",cartesian_product(ls))
ls = [[1,2],[]]
print(""\nOriginal Lists:"",ls)
print(""Cartesian product of the said lists: "",cartesian_product(ls))
",">>> import itertools
>>> a = [1, 2, 3]
>>> b = [4, 5, 6]
>>> c = [7, 8, 9]
>>> d = [10, 11, 12]
>>> e = [13, 14, 15]
>>> f = [16, 17, 18]
>>> g = [19, 20, 21]
>>> h = [22, 23, 24]
>>> i = [25, 26, 27]
>>> j"
39,Write a NumPy program to find the first Monday in May 2017. ,"import numpy as np
print(""First Monday in May 2017:"")
print(np.busday_offset('2017-05', 0, roll='forward', weekmask='Mon'))
","import numpy as np

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:"
40, Write a Python program to get the number of people visiting a U.S. government website right now. ,"#https://bit.ly/2lVhlLX
import requests
from lxml import html
url = 'https://www.us-cert.gov/ncas/alerts'
doc = html.fromstring(requests.get(url).text)
print(""The number of security alerts issued by US-CERT in the current year:"")
print(len(doc.cssselect('.item-list li')))
  ","import urllib.request
import urllib.parse
import urllib.error

def get_count(url):
    try:
        req = urllib.request.Request(url)
        response = urllib.request.urlopen(req)
        count = int(response.read().decode('utf-8'))
        return count
    except urllib.error.HTTPError as e:
        print(e)"
41,Write a NumPy program to remove the leading and trailing whitespaces of all the elements of a given array. ,"import numpy as np
x = np.array([' python exercises ', ' PHP  ', ' java  ', '  C++'], dtype=np.str)
print(""Original Array:"")
print(x)
stripped = np.char.strip(x)
print(""\nRemove the leading and trailing whitespaces: "", stripped)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.head(3))
print(arr.tail(3))
print(arr.shape)
print(arr.size)
print(arr.dtype)
print(arr.itemsize)
print(arr.nbytes)

arr.remove_leading_and_trailing_whites"
42,Write a Python program to find the first repeated character of a given string where the index of first occurrence is smallest. ,"def first_repeated_char_smallest_distance(str1):
  temp = {}
  for ch in str1:
    if ch in temp:
      return ch, str1.index(ch);
    else:
      temp[ch] = 0
  return 'None'
print(first_repeated_char_smallest_distance(""abcabc""))
print(first_repeated_char_smallest_distance(""abcb""))
print(first_repeated_char_smallest_distance(""abcc""))
print(first_repeated_char_smallest_distance(""abcxxy""))
print(first_repeated_char_smallest_distance(""abc""))))
","def first_repeated_char(str):
    # your code goes here
    return str[0]

# driver code
str = ""abcd""
print(first_repeated_char(str))

# solution
def first_repeated_char(str):
    # your code goes here
    return str[0]

# driver code
str = ""abcd""
print(first_repeated_char(str))

#"
43,Write a Python program to create a table and insert some records in that table. Finally selects all rows from the table and display the records. ,"import sqlite3
 
from sqlite3 import Error
 
def sql_connection():
   try:
     conn = sqlite3.connect('mydatabase.db')
     return conn
   except Error:
     print(Error)
 
def sql_table(conn):
   cursorObj = conn.cursor()
# Create the table
   cursorObj.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")
# Insert records
   cursorObj.executescript(""""""
   INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);
   INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);
   INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);
   INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);
   INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);
   """""")
   conn.commit()
   cursorObj.execute(""SELECT * FROM salesman"")
   rows = cursorObj.fetchall()
   print(""Agent details:"")
   for row in rows:
       print(row)
sqllite_conn = sql_connection()
sql_table(sqllite_conn)
if (sqllite_conn):
 sqllite_conn.close()
 print(""\nThe SQLite connection is closed."")
","#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(s):
    s = s.split()
    s = list(map(int, s))
    s.sort()
    return s

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], '"
44,Write a Pandas program to calculate the number of characters in each word in a given series. ,"import pandas as pd
series1 = pd.Series(['Php', 'Python', 'Java', 'C#'])
print(""Original Series:"")
print(series1)
result = series1.map(lambda x: len(x))
print(""\nNumber of characters in each word in the said series:"")
print(result)
","import pandas as pd

# Read the data from the file
df = pd.read_csv(""data.csv"")

# Create a dictionary to store the data
dictionary = {'Word': df['Word'], 'Count': df['Count']}

# Create a dataframe from the dictionary
df = pd.DataFrame(dictionary)

# Print the dataframe
print(df)

# Create a function to calculate the number of characters in each"
45,"Write a NumPy program to broadcast on different shapes of arrays where p(3,3) + q(3). ","import numpy as np    
p = np.array([[0, 0, 0],
              [1, 2, 3],
              [4, 5, 6]]) 
q= np.array([10, 11, 12]) 
print(""Original arrays:"")
print(""Array-1"")
print(p)
print(""Array-2"")
print(q)
print(""\nNew Array:"")
new_array1 = p + q 
print(new_array1)
","import numpy as np

a = np.array([[1,2,3],[4,5,6]])
b = np.array([[1,2,3],[4,5,6]])

print(np.add(a,b))

# Output:
[[2 3]
 [4 5]
 [6 4]]

# Output:
[[2 3]
 [4 5]
 [6 4]]

#"
46,Write a Python program to check if a given function returns True for at least one element in the list. ,"def some(lst, fn = lambda x: x):
  return any(map(fn, lst))
print(some([0, 1, 2, 0], lambda x: x >= 2 ))
print(some([5, 10, 20, 10], lambda x: x < 2 ))
","def is_true(x):
    if x == 0:
        return False
    else:
        return True

print(is_true(0))
print(is_true(1))
print(is_true(2))
print(is_true(3))
print(is_true(4))
print(is_true(5))
print(is_true(6))
print(is_true(7))
print(is_true("
47,Write a NumPy program to create an array using generator function that generates 15 integers. ,"import numpy as np
def generate():
   for n in range(15):
       yield n
nums = np.fromiter(generate(),dtype=float,count=-1)
print(""New array:"")
print(nums)
","import numpy as np

def generator(n):
    for i in range(n):
        yield i

arr = generator(15)

print(next(arr))
print(next(arr))
print(next(arr))
print(next(arr))
print(next(arr))
print(next(arr))
print(next(arr))
print(next(arr))
print(next(arr))
print(next(arr))
print(next("
48,Write a Python program to find four elements from a given array of integers whose sum is equal to a given number. The solution set must not contain duplicate quadruplets. ,"#Source: https://bit.ly/2SSoyhf
from bisect import bisect_left
class Solution:
    def fourSum(self, nums, target):
        """"""
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """"""
        N = 4
        quadruplets = []
        if len(nums) < N:
            return quadruplets
        nums = sorted(nums)
        quadruplet = []

        # Let top[i] be the sum of largest i numbers.
        top = [0]       
        for i in range(1, N):
            top.append(top[i - 1] + nums[-i])

        # Find range of the least number in curr_n (0,...,N)
        # numbers that sum up to curr_target, then find range
        # of 2nd least number and so on by recursion.
        def sum_(curr_target, curr_n, lo=0):
            if curr_n == 0:
                if curr_target == 0:
                    quadruplets.append(quadruplet[:])
                return

            next_n = curr_n - 1
            max_i = len(nums) - curr_n
            max_i = bisect_left(
                nums, curr_target // curr_n,
                lo, max_i)
            min_i = bisect_left(
                nums, curr_target - top[next_n],
                lo, max_i)

            for i in range(min_i, max_i + 1): 
                if i == min_i or nums[i] != nums[i - 1]:
                    quadruplet.append(nums[i])
                    next_target = curr_target - nums[i]
                    sum_(next_target, next_n, i + 1)
                    quadruplet.pop()

        sum_(target, N)
        return quadruplets

s = Solution()
nums = [-2, -1, 1, 2, 3, 4, 5, 6]
target = 10
result = s.fourSum(nums, target)
print(""\nArray values & target value:"",nums,""&"",target)
print(""Solution Set:\n"", result)
","def four_elements(arr, num):
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            for k in range(j+1, len(arr)):
                if arr[i] + arr[j] + arr[k] == num:
                    print(arr[i], arr[j], arr[k])

arr ="
49,Write a Python program to extract specified size of strings from a give list of string values. ,"def extract_string(str_list1, l):
    result = [e for e in str_list1 if len(e) == l] 
    return result

str_list1 = ['Python', 'list', 'exercises', 'practice', 'solution'] 
print(""Original list:"")
print(str_list1)
l = 8
print(""\nlength of the string to extract:"")
print(l)
print(""\nAfter extracting strings of specified length from the said list:"") 
print(extract_string(str_list1 , l))
","def solution(lst):
    return lst[0:3]

lst = [""apple"", ""banana"", ""cherry""]
print(solution(lst))

""""""

def solution(lst):
    return lst[0:3]

lst = [""apple"", ""banana"", ""cherry""]
print(solution(lst))

""""""

def solution(lst):
    return lst[0:3]"
50,Write a Python program to count the number of times a specific element presents in a deque object. ,"import collections
nums = (2,9,0,8,2,4,0,9,2,4,8,2,0,4,2,3,4,0)
nums_dq = collections.deque(nums)
print(""Number of 2 in the sequence"")
print(nums_dq.count(2))
print(""Number of 4 in the sequence"")
print(nums_dq.count(4))
","def count_times(deque, element):
    count = 0
    for i in deque:
        if i == element:
            count += 1
    return count

# driver code
deque = deque(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])
element = 'a'
print(count_times(deque, element))

# Output:
# 3
# 3
#"
51,Write a Pandas program to check the empty values of UFO (unidentified flying object) Dataframe. ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
print(df.isnull().sum())
","import pandas as pd

df = pd.DataFrame({""col1"": [1, 2, 3, 4, 5], ""col2"": [1, 2, 3, 4, 5], ""col3"": [1, 2, 3, 4, 5]})

print(df.empty)

# Output:
# True
# True
# True
# False

# Create a new DataFrame: df_empty
df_empty = pd"
52,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to make a gradient color on all the values of the said dataframe. ","import pandas as pd
import numpy as np
import seaborn as sns

np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
print(""Original array:"")
print(df)
print(""\nDataframe - Gradient color:"")
df.style.background_gradient()
","import pandas as pd

df = pd.DataFrame(
    {
        'First column': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        'Second column': [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
        'Third column': [21, 22, 23, 24, 25, 26, 27"
53,Write a Python program to find the difference between consecutive numbers in a given list. ,"def diff_consecutive_nums(nums):
    result = [b-a for a, b in zip(nums[:-1], nums[1:])]
    return result

nums1 = [1, 1, 3, 4, 4, 5, 6, 7]
print(""Original list:"")
print(nums1)
print(""Difference between consecutive numbers of the said list:"") 
print(diff_consecutive_nums(nums1))

nums2 = [4, 5, 8, 9, 6, 10]
print(""\nOriginal list:"")
print(nums2)
print(""Difference between consecutive numbers of the said list:"") 
print(diff_consecutive_nums(nums2))
","def diff(nums):
    diff = 0
    for i in range(1, len(nums)):
        diff += nums[i] - nums[i-1]
    return diff

nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(diff(nums))

""""""

def diff(nums):
    diff = 0
    for i in range(1, len(nums)"
54,Write a Pandas program to extract only words from a given column of a given DataFrame. ,"import pandas as pd
import re as re
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],
    'address': ['9910 Surrey Ave.','92 N. Bishop Ave.','9910 Golden Star Ave.', '102 Dunbar St.', '17 West Livingston Court']
})
print(""Original DataFrame:"")
print(df)

def search_words(text):
    result = re.findall(r'\b[^\d\W]+\b', text)
    return "" "".join(result)

df['only_words']=df['address'].apply(lambda x : search_words(x))
print(""\nOnly words:"")
print(df)
","import pandas as pd

# Read the data from the file
df = pd.read_csv('data.csv')

# Extract only the words from the column
words = df['text'].str.split(' ')

# Extract only the words from the column
words = words.str.get_dummies(sep=' ')

# Print the words extracted
print(words)

# Create a new column in the DataFrame called 'words'"
55,"Write a Python program to replace hour, minute, day, month, year and timezone with specified value of current datetime using arrow. ","import arrow
a = arrow.utcnow()
print(""Current date and time:"")
print(a)
print(""\nReplace hour and minute with 5 and 35:"")
print(a.replace(hour=5, minute=35))
print(""\nReplace day with 2:"")
print(a.replace(day=2))
print(""\nReplace year with 2021:"")
print(a.replace(year=2021))
print(""\nReplace month with 11:"")
print(a.replace(month=11)) 
print(""\nReplace timezone with 'US/Pacific:"")
print(a.replace(tzinfo='US/Pacific'))
","import datetime

current_datetime = datetime.datetime.now()

print(current_datetime)

current_datetime = current_datetime.replace(hour=20, minute=30, second=0, microsecond=0)

print(current_datetime)

current_datetime = current_datetime.replace(hour=20, minute=30, second=0, microsecond=0)"
56,Write a Python program that invoke a given function after specific milliseconds. ,"from time import sleep
import math
def delay(fn, ms, *args):
  sleep(ms / 1000)
  return fn(*args)
print(""Square root after specific miliseconds:"") 
print(delay(lambda x: math.sqrt(x), 100, 16))
print(delay(lambda x: math.sqrt(x), 1000, 100))
print(delay(lambda x: math.sqrt(x), 2000, 25100))
","def solution(ms):
    import time
    import random
    import math
    import os
    import sys
    import subprocess
    import json
    import datetime
    import time
    import requests
    import base64
    import hashlib
    import hmac
    import hashlib
    import base64
    import binascii
    import binascii
    import binascii
    import base64
    import binascii
    import base64
    import bin"
57,Write a Pandas program to find and drop the missing values from World alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nMissing values:"")
print(w_a_con.isnull())
print(""\nDropping the missing values:"")
print(w_a_con.dropna())
","import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/dataprofessor/data/master/glassdoor.csv')
df.head()

df.isnull().sum()

df.dropna(inplace=True)
df.isnull().sum()

df.head()

df.isnull().sum()

df.dropna(inplace=True)
df.isnull().sum"
58,Write a Python program to print all primes (Sieve_of_Eratosthenes) smaller than or equal to a specified number. ,"
def sieve_of_Eratosthenes(num):
    limitn = num+1
    not_prime_num = set()
    prime_nums = []

    for i in range(2, limitn):
        if i in not_prime_num:
            continue

        for f in range(i*2, limitn, i):
            not_prime_num.add(f)

        prime_nums.append(i)

    return prime_nums

print(sieve_of_Eratosthenes(100));
","def is_prime(n):
    if n == 1:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def Sieve_of_Eratosthenes(n):
    sieve = [True] * n
    m = int(math.sqrt(n))"
59,Write a Python program to create non-repeated combinations of Cartesian product of four given list of numbers. ,"import itertools as it
mums1 = [1, 2, 3, 4]
mums2 = [5, 6, 7, 8]
mums3 = [9, 10, 11, 12]
mums4 = [13, 14, 15, 16]
print(""Original lists:"")
print(mums1)
print(mums2)
print(mums3)
print(mums4)
print(""\nSum of the specified range:"")
for i in it.product([tuple(mums1)], it.permutations(mums2), it.permutations(mums3), it.permutations(mums4)):
    print(i)
","def combinations(lst, n):
    return [lst[i:i+n] for i in range(len(lst) - n + 1)]

lst = [1, 2, 3, 4, 5]
n = 4
print(combinations(lst, n))

""""""

# Solution:

def combinations(lst, n):
    return [lst[i:i+n] for i in range(len("
60,Write a Python program to find the values of length six in a given list using Lambda. ,"weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
days = filter(lambda day: day if len(day)==6 else '', weekdays)
for d in days:
  print(d)
","def solution(lst):
    return [len(lst), lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]

lst = [1, 2, 3, 4, 5, 6]
print(solution(lst))

""""""

def solution(lst):
    return [len(lst), lst[0], lst[1], lst[2], l"
61,Write a Pandas program to replace NaNs with the value from the previous row or the next row in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nReplacing NaNs with the value from the previous row (purch_amt):"")
df['purch_amt'].fillna(method='pad', inplace=True)
print(df)
print(""\nReplacing NaNs with the value from the next row (sale_amt):"")
df['sale_amt'].fillna(method='bfill', inplace=True)
print(df)
","import pandas as pd

df = pd.read_csv(""nato_phonetic_alphabet.csv"")

df.replace(""?"", -99999, inplace=True)
df.replace(""?"", """", inplace=True)
df.replace(""-99999"", """", inplace=True)
df.replace(""-9999"", """", inplace=True)
df.replace(""nan"", """", inplace="
62,Write a Python program to sort a list of elements using the merge sort algorithm. ,"def mergeSort(nlist):
    print(""Splitting "",nlist)
    if len(nlist)>1:
        mid = len(nlist)//2
        lefthalf = nlist[:mid]
        righthalf = nlist[mid:]

        mergeSort(lefthalf)
        mergeSort(righthalf)
        i=j=k=0       
        while i < len(lefthalf) and j < len(righthalf):
            if lefthalf[i] < righthalf[j]:
                nlist[k]=lefthalf[i]
                i=i+1
            else:
                nlist[k]=righthalf[j]
                j=j+1
            k=k+1

        while i < len(lefthalf):
            nlist[k]=lefthalf[i]
            i=i+1
            k=k+1

        while j < len(righthalf):
            nlist[k]=righthalf[j]
            j=j+1
            k=k+1
    print(""Merging "",nlist)

nlist = [14,46,43,27,57,41,45,21,70]
mergeSort(nlist)
print(nlist)
","def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = arr[:mid]
    right = arr[mid:]
    left = merge_sort(left)
    right = merge_sort(right)
    return merge(left, right)

def merge(left, right):
    result = []
    while len(left) > 0 and len(right) > 0:
        if"
63," latitude 37.423021 and longitude -122.083739), which you can use to place markers on a map, or position the map.","from lxml import html
import requests
response = requests.get('http://catalog.data.gov/dataset?q=&sort=metadata_created+desc')
doc = html.fromstring(response.text)
title = doc.cssselect('h3.dataset-heading')[0].text_content()
print(""The name of the most recently added dataset on data.gov:"")
print(title.strip())
","import math

def get_lat_long(lat, lon):
    """"""
    Returns the latitude and longitude of the given latitude and longitude.
    """"""
    # convert the latitude and longitude to radians
    lat = math.radians(lat)
    lon = math.radians(lon)

    # calculate the distance between the two points
    delta_lat = lat - 37.423021"
64,Write a NumPy program to create an array of ones and an array of zeros. ,"import numpy as np
print(""Create an array of zeros"")
x = np.zeros((1,2))
print(""Default type is float"")
print(x)
print(""Type changes to int"")
x = np.zeros((1,2), dtype = np.int)
print(x)
print(""Create an array of ones"")
y= np.ones((1,2)) 
print(""Default type is float"")
print(y)
print(""Type changes to int"")
y = np.ones((1,2), dtype = np.int)
print(y)
","import numpy as np

a = np.ones((3,3))
b = np.zeros((3,3))

print(a)
print(b)

# Solution:

# a = np.ones((3,3))
# b = np.zeros((3,3))

# print(a)
# print(b)

# # Solution:

# a = np.ones((3,3))
# b = np."
65,Write a Python program to find the value of the first element in the given list that satisfies the provided testing function. ,"def find(lst, fn):
  return next(x for x in lst if fn(x)) 
print(find([1, 2, 3, 4], lambda n: n % 2 == 1))
print(find([1, 2, 3, 4], lambda n: n % 2 == 0))
","def first_element_satisfying_function(lst):
    for i in range(len(lst)):
        if lst[i] == first_element_satisfying_function(lst[:i]):
            return lst[i]
    return -1

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(first_element_satisfying_function"
66,Write a Python program to remove duplicates from Dictionary. ,"student_data = {'id1': 
   {'name': ['Sara'], 
    'class': ['V'], 
    'subject_integration': ['english, math, science']
   },
 'id2': 
  {'name': ['David'], 
    'class': ['V'], 
    'subject_integration': ['english, math, science']
   },
 'id3': 
    {'name': ['Sara'], 
    'class': ['V'], 
    'subject_integration': ['english, math, science']
   },
 'id4': 
   {'name': ['Surya'], 
    'class': ['V'], 
    'subject_integration': ['english, math, science']
   },
}

result = {}

for key,value in student_data.items():
    if value not in result.values():
        result[key] = value

print(result)
","def remove_duplicates(d):
    new_dict = {}
    for key, value in d.items():
        if value not in new_dict:
            new_dict[value] = key
    return new_dict

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
print(remove_duplicates(d))

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
67,Write a Python program to find the list in a list of lists whose sum of elements is the highest. ,"num = [[1,2,3], [4,5,6], [10,11,12], [7,8,9]]
print(max(num, key=sum))
","def highest_sum(lst):
    sum = 0
    for i in lst:
        sum += i
    return sum

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(highest_sum(lst))

""""""

def highest_sum(lst):
    sum = 0
    for i in lst:
        sum += i
    return sum

lst ="
68,Write a Python program to get the top stories from Google news. ,"import bs4
from bs4 import BeautifulSoup as soup
from urllib.request import urlopen

news_url=""https://news.google.com/news/rss""
Client=urlopen(news_url)
xml_page=Client.read()
Client.close()

soup_page=soup(xml_page,""xml"")
news_list=soup_page.findAll(""item"")
# Print news title, url and publish date
for news in news_list:
  print(news.title.text)
  print(news.link.text)
  print(news.pubDate.text)
  print(""-""*60)
","import requests
from bs4 import BeautifulSoup

url = ""https://news.google.com/topstories?hl=en-US&gl=US&ceid=US:en""

response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')

top_stories = soup.find_all('a', class_='CfkVc')

for story in top_stories:
    print(story.get('href'"
69,Write a Python program to check all values are same in a dictionary. ,"def value_check(students, n):
    result = all(x == n for x in students.values()) 
    return result
  
students = {'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}
print(""Original Dictionary:"")
print(students)
n = 12
print(""\nCheck all are "",n,""in the dictionary."")
print(value_check(students, n))
n = 10
print(""\nCheck all are "",n,""in the dictionary."")
print(value_check(students, n))
","def check_dict(d):
    for key in d:
        if d[key]!= d[key]:
            return False
    return True

print(check_dict({1:1, 2:2, 3:3, 4:4, 5:5}))

""""""

def check_dict(d):
    for key in d:
        if d[key]!= d[key]:
            return False
    return True

print(check_dict({1:1"
70,Write a Python program to compare two given lists and find the indices of the values present in both lists. ,"def matched_index(l1, l2):
    l2 = set(l2)
    return [i for i, el in enumerate(l1) if el in l2]

nums1 = [1, 2, 3, 4, 5 ,6]
nums2 = [7, 8, 5, 2, 10, 12]
print(""Original lists:"")
print(nums1)
print(nums2)
print(""Compare said two lists and get the indices of the values present in both lists:"")
print(matched_index(nums1, nums2))

nums1 = [1, 2, 3, 4, 5 ,6]
nums2 = [7, 8, 5, 7, 10, 12]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""Compare said two lists and get the indices of the values present in both lists:"")
print(matched_index(nums1, nums2))

nums1 = [1, 2, 3, 4, 15 ,6]
nums2 = [7, 8, 5, 7, 10, 12]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""Compare said two lists and get the indices of the values present in both lists:"")
print(matched_index(nums1, nums2))
","def compare(list1, list2):
    for i in range(len(list1)):
        if list1[i]!= list2[i]:
            return i
    return len(list1)

print(compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

""""""

""""""

""""""

""""""

"""""""
71,Write a Python program to create a 24-hour time format (HH:MM ) using 4 given digits. Display the latest time and do not use any digit more than once. ,"import itertools
def max_time(nums):
    for i in range(len(nums)):
        nums[i] *= -1
    nums.sort()
    for hr1, hr2, m1, m2 in itertools.permutations(nums):
        hrs = -(10*hr1 + hr2)
        mins = -(10*m1 + m2)
        if 60> mins >=0 and 24 > hrs >=0:
            result = ""{:02}:{:02}"".format(hrs, mins)
            break
    return result

nums = [1,2,3,4]
print(""Original array:"",nums)
print(""Latest time: "",max_time(nums))

nums = [1,2,4,5]
print(""\nOriginal array:"",nums)
print(""Latest time: "",max_time(nums))

nums = [2,2,4,5]
print(""\nOriginal array:"",nums)
print(""Latest time: "",max_time(nums))

nums = [2,2,4,3]
print(""\nOriginal array:"",nums)
print(""Latest time: "",max_time(nums))

nums = [0,2,4,3]
print(""\nOriginal array:"",nums)
print(""Latest time: "",max_time(nums))
","import datetime

def time_format(hour, minute, second):
    return f'{hour:02d}:{minute:02d}:{second:02d}'

def main():
    hour = int(input(""Enter the hour: ""))
    minute = int(input(""Enter the minute: ""))
    second = int(input(""Enter the second: ""))
    print("
72,"Sum a list of numbers. Write a Python program to sum the first number with the second and divide it by 2, then sum the second with the third and divide by 2, and so on. ","#Source: shorturl.at/csxLM
def test(list1):
    result =   [(x + y) / 2.0 for (x, y) in zip(list1[:-1], list1[1:])]
    return list(result)

nums =  [1,2,3,4,5,6,7]
print(""\nOriginal list:"")
print(nums)
print(""\nSum the said list of numbers:"")
print(test(nums))

nums =  [0,1,-3,3,7,-5,6,7,11]
print(""\nOriginal list:"")
print(nums)
print(""\nSum the said list of numbers:"")
print(test(nums))
","def sum_numbers(numbers):
    return sum(numbers) / len(numbers)

def sum_numbers_2(numbers):
    return sum(numbers) / len(numbers) / 2

def sum_numbers_3(numbers):
    return sum(numbers) / len(numbers) / 3

def sum_n"
73,Write a Python program to test whether all numbers of a list is greater than a certain number. ,"num = [2, 3, 4, 5]
print()
print(all(x > 1 for x in num))
print(all(x > 4 for x in num))
print()
","def is_greater(list, number):
    for i in range(len(list)):
        if list[i] > number:
            return False
    return True

print(is_greater([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7))

""""""

def is_greater(list, number):
    for i in range(len(list)):
        if list[i] > number:"
74,Write a NumPy program to test whether a given 2D array has null columns or not. ,"import numpy as np
print(""Original array:"")
nums = np.random.randint(0,3,(4,10))
print(nums)
print(""\nTest whether the said array has null columns or not:"")
print((~nums.any(axis=0)).any())
","import numpy as np

arr = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]])

print(arr.shape)

if arr.shape[0] == arr.shape[1]:
    print"
75,Write a NumPy program to convert angles from degrees to radians for all elements in a given array. ,"import numpy as np
x = np.array([-180.,  -90.,   90.,  180.])
r1 = np.radians(x)
r2 = np.deg2rad(x)
assert np.array_equiv(r1, r2)
print(r1)
","import numpy as np

def convert_degrees_to_radians(degrees):
    radians = degrees * np.pi / 180
    return radians

def convert_radians_to_degrees(radians):
    degrees = radians * 180 / np.pi
    return degrees

def main():
    degrees = int(input(""Enter the degrees: ""))
    radians = convert_degrees_to_radians("
76,Write a Python program to find all anagrams of a string in a given list of strings using lambda. ,"from collections import Counter  
texts = [""bcda"", ""abce"", ""cbda"", ""cbea"", ""adcb""]
str = ""abcd""
print(""Orginal list of strings:"")
print(texts) 
result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) 
print(""\nAnagrams of 'abcd' in the above string: "")
print(result)
","def anagrams(str1, str2):
    return sorted(str1) == sorted(str2)

print(anagrams('abba', 'bba'))

""""""

def anagrams(str1, str2):
    return sorted(str1) == sorted(str2)

print(anagrams('abba', 'bba'))

""""""

def anagrams(str1, str2):
    return sorted"
77,rogram to display the name of the most recently added dataset on data.gov. ,"from urllib.request import urlopen
from bs4 import BeautifulSoup
html = urlopen('http://www.example.com/')
bsh = BeautifulSoup(html.read(), 'html.parser')
print(bsh.h1)
","import sys

def main():
    # Read the file into a variable called data.
    data = open('data.gov.txt', 'r')
    # Read the file into a variable called name.
    name = data.readline()
    # Read the file into a variable called last_name.
    last_name = data.readline()
    # Read the file into a variable called email.
    email = data.readline()
    # Read the file into a variable called"
78,Write a NumPy program to extract all numbers from a given array which are less and greater than a specified number. ,"import numpy as np  
nums = np.array([[5.54, 3.38, 7.99],
              [3.54, 4.38, 6.99],
              [1.54, 2.39, 9.29]])
print(""Original array:"")
print(nums)
n = 5
print(""\nElements of the said array greater than"",n)
print(nums[nums > n])
n = 6
print(""\nElements of the said array less than"",n)
print(nums[nums < n])
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr[arr < 5])

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr[arr > 5])

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8"
79,Write a NumPy program to extract second and fourth elements of the second and fourth rows from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: Second and fourth elements of the second and fourth rows "")
print(arra_data[1::2, 1::2])
","import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12],
                [13, 14, 15, 16]])

print(arr[2:4, 2:4])

# Output:
[[5 6]
 [7 8]
 [9 10]]

# Output:
[[1 2 3"
80,Write a NumPy program to split a given array into multiple sub-arrays vertically (row-wise). ,"import numpy as np    
print(""\nOriginal arrays:"")
x = np.arange(16.0).reshape(4, 4)
print(x)
new_array1 =  np.vsplit(x, 2)
print(""\nSplit an array into multiple sub-arrays vertically:"")
print(new_array1)
","import numpy as np

arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

# vertical split
arr = arr.reshape(3, 4)

# horizontal split
arr = arr.reshape(4, 3)

# vertical split
arr = arr.reshape(3, 4)

# horizontal split
arr = arr.reshape("
81,Write a Python program to count number of substrings from a given string of lowercase alphabets with exactly k distinct (given) characters. ,"def count_k_dist(str1, k): 
	str_len = len(str1) 
	
	result = 0

	ctr = [0] * 27

	for i in range(0, str_len): 
		dist_ctr = 0

		ctr = [0] * 27

		for j in range(i, str_len): 
			
			if(ctr[ord(str1[j]) - 97] == 0): 
				dist_ctr += 1

			ctr[ord(str1[j]) - 97] += 1

			if(dist_ctr == k): 
				result += 1
			if(dist_ctr > k): 
				break

	return result 

str1 = input(""Input a string (lowercase alphabets):"")
k = int(input(""Input k: ""))
print(""Number of substrings with exactly"", k, ""distinct characters : "", end = """") 
print(count_k_dist(str1, k))
","def count_substring(string, k):
    count = 0
    for i in range(len(string)):
        for j in range(i, len(string)):
            if string[i:j+1] == string[i:j+1][::-1]:
                count += 1
    return count

print(count_substring(""ABAB"", 2))

""""""

def count_"
82,Write a Python program to create a list reflecting the run-length encoding from a given list of integers or a given list of characters. ,"from itertools import groupby
def encode_list(s_list):
    return [[len(list(group)), key] for key, group in groupby(s_list)]
n_list = [1,1,2,3,4,4.3,5, 1]
print(""Original list:"") 
print(n_list)
print(""\nList reflecting the run-length encoding from the said list:"")
print(encode_list(n_list))
n_list = 'automatically'
print(""\nOriginal String:"") 
print(n_list)
print(""\nList reflecting the run-length encoding from the said string:"")
print(encode_list(n_list))
","def run_length_encoding(list):
    # Your code here
    pass

# Test your code
# run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,"
83,Write a Pandas program to check whether only numeric values present in a given column of a DataFrame.,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Company','Company a001', '2055', 'abcd', '123345'],
    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})
	
print(""Original DataFrame:"")
print(df)
print(""\nNumeric values present in company_code column:"")
df['company_code_is_digit'] = list(map(lambda x: x.isdigit(), df['company_code']))
print(df)

","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [1, 2, 3, 4, 5]})
print(df.dtypes)

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [1, 2, 3, 4, 5]})
# print(df"
84,Write a Python program to check if a specific Key and a value exist in a dictionary. ,"def test(dictt, key, value):
   if any(sub[key] == value for sub in dictt):
       return True
   return False

students = [
        {'student_id': 1, 'name': 'Jean Castro', 'class': 'V'}, 
        {'student_id': 2, 'name': 'Lula Powell', 'class': 'V'},
        {'student_id': 3, 'name': 'Brian Howell', 'class': 'VI'}, 
        {'student_id': 4, 'name': 'Lynne Foster', 'class': 'VI'}, 
        {'student_id': 5, 'name': 'Zachary Simon', 'class': 'VII'}
        ]


print(""\nOriginal dictionary:"")
print(students)
print(""\nCheck if a specific Key and a value exist in the said dictionary:"")
print(test(students,'student_id', 1))
print(test(students,'name', 'Brian Howell'))
print(test(students,'class', 'VII'))
print(test(students,'class', 'I'))
print(test(students,'name', 'Brian Howelll'))
print(test(students,'student_id', 11))
","def check_if_key_exist(dictionary, key):
    if key in dictionary:
        return True
    else:
        return False

dictionary = {'a': 1, 'b': 2, 'c': 3}
print(check_if_key_exist(dictionary, 'a'))
print(check_if_key_exist(dictionary, 'd'))
print(check_if_key_exist(dictionary, 'e'))"
85,Write a Pandas program to split a given dataset using group by on multiple columns and drop last n rows of from each group. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3002,3001,3004,3003,3002,3003,3001],
'salesman_id':[5002,5003,5001,5003,5002,5001,5001,5003,5003,5002,5003,5001]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nSplit the said data on 'salesman_id', 'customer_id' wise:"")
result = df.groupby(['salesman_id', 'customer_id'])
for name,group in result:
    print(""\nGroup:"")
    print(name)
    print(group)
n = 2
#result1 = df.groupby(['salesman_id', 'customer_id']).tail(n).index, axis=0)
print(""\nDroping last two records:"")    
result1 = df.drop(df.groupby(['salesman_id', 'customer_id']).tail(n).index, axis=0)
print(result1)
","import pandas as pd

df = pd.read_csv(""https://github.com/datasets/csv/raw/master/data/finance.csv"")

df.head()

df.groupby(['year', 'quarter']).size().unstack().plot(kind='bar', stacked=True)

df.groupby(['year', 'quarter']).size().unstack().plot(kind='bar', stacked"
86,"Write a NumPy program to find point by point distances of a random vector with shape (10,2) representing coordinates. ","import numpy as np
a= np.random.random((10,2))
x,y = np.atleast_2d(a[:,0], a[:,1])
d = np.sqrt( (x-x.T)**2 + (y-y.T)**2)
print(d)
","import numpy as np

x = np.random.rand(10,2)
print(x)

# Solution:

# x = np.random.rand(10,2)
# print(x)
# print(x[0,0])
# print(x[0,1])
# print(x[1,0])
# print(x[1,1])

# Solution:

# x = np."
87,Write a Python program to create the next bigger number by rearranging the digits of a given number. ,"def rearrange_bigger(n):
    #Break the number into digits and store in a list
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False
n = 12
print(""Original number:"",n)
print(""Next bigger number:"",rearrange_bigger(n))

n = 10
print(""\nOriginal number:"",n)
print(""Next bigger number:"",rearrange_bigger(n))
      
n = 201
print(""\nOriginal number:"",n)
print(""Next bigger number:"",rearrange_bigger(n))
n = 102
print(""\nOriginal number:"",n)
print(""Next bigger number:"",rearrange_bigger(n))
n = 445
print(""\nOriginal number:"",n)
print(""Next bigger number:"",rearrange_bigger(n))
","def next_bigger(n):
    n = str(n)
    n = n[::-1]
    n = int(n)
    return n

print(next_bigger(123))
print(next_bigger(1234))
print(next_bigger(12345))
print(next_bigger(1234567890))

""""""

def next_bigger(n):
    n = str(n)"
88,Write a Python program to filter a dictionary based on values. ,"marks = {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}
print(""Original Dictionary:"")
print(marks)
print(""Marks greater than 170:"")
result = {key:value for (key, value) in marks.items() if value >= 170}
print(result)
","def filter_dict(d, key, value):
    return d[key] == value

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}

print(filter_dict(d, 'a', 2))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
89,Write a Python program to count the frequency of the elements of a given unordered list. ,"from itertools import groupby

uno_list = [2,1,3,8,5,1,4,2,3,4,0,8,2,0,8,4,2,3,4,2]
print(""Original list:"")
print(uno_list)
uno_list.sort()
print(uno_list)
print(""\nSort the said unordered list:"")
print(uno_list)
print(""\nFrequency of the elements of the said unordered list:"")
result = [len(list(group)) for key, group in groupby(uno_list)]
print(result)
","def count_frequency(lst):
    count = 0
    for i in lst:
        count += 1
    return count

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(count_frequency(lst))

""""""

# Solution 1

def count_frequency(lst):
    count = 0
    for i in lst:
        count += 1
    return count

l"
90,Write a Pandas program to find out the alcohol consumption details in the year '1987' or '1989' from the world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details where year is 1987 or 1989:"")
print((w_a_con[(w_a_con['Year']==1987) | (w_a_con['Year']==1989)]).head(10))
","import pandas as pd

df = pd.read_csv('world_alcohol_consumption.csv')

df.head()

df.columns

df.columns = ['Year', 'World_alcohol_consumption']

df.head()

df.columns

df.columns = ['Year', 'World_alcohol_consumption', 'Alcohol_consumption']

df.head"
91,Write a Python program to count the number of even and odd numbers from a series of numbers. ,"numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9) # Declaring the tuple
count_odd = 0
count_even = 0
for x in numbers:
        if not x % 2:
    	     count_even+=1
        else:
    	     count_odd+=1
print(""Number of even numbers :"",count_even)
print(""Number of odd numbers :"",count_odd)
","def even_odd(n):
    even = 0
    odd = 0
    for i in range(1, n+1):
        if i % 2 == 0:
            even += 1
        else:
            odd += 1
    return even, odd

n = int(input(""Enter the number of numbers: ""))
even, odd = even_odd(n)
print(""Even numbers: "", even)
print(""Odd numbers: "", odd)

"""""""
92,Write a Python code to send some sort of data in the URL's query string. ,"import requests
payload = {'key1': 'value1', 'key2': 'value2'}
print(""Parameters: "",payload)
r = requests.get('https://httpbin.org/get', params=payload)
print(""Print the url to check the URL has been correctly encoded or not!"")
print(r.url)
print(""\nPass a list of items as a value:"")
payload = {'key1': 'value1', 'key2': ['value2', 'value3']}
print(""Parameters: "",payload)
r = requests.get('https://httpbin.org/get', params=payload)
print(""Print the url to check the URL has been correctly encoded or not!"")
print(r.url)
","import urllib.request

url = ""http://www.google.com""
querystring = ""?q=http%3A%2F%2Fwww.google.com""

with urllib.request.urlopen(url + querystring) as response:
    print(response.read().decode())

""""""

import urllib.request
import urllib.parse

url = ""http://www.google.com""
querystring = """
93,Write a Pandas program to split the following dataframe into groups and calculate monthly purchase amount. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['05-10-2012','09-10-2012','05-10-2012','08-17-2012','10-09-2012','07-27-2012','10-09-2012','10-10-2012','10-10-2012','06-17-2012','07-08-2012','04-25-2012'],
'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
df['ord_date']= pd.to_datetime(df['ord_date']) 
print(""\nMonth wise purchase amount:"")
result = df.set_index('ord_date').groupby(pd.Grouper(freq='M')).agg({'purch_amt':sum})
print(result)
","df = pd.DataFrame({'Customer ID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'Monthly Purchase Amount': [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]})

df.groupby('Monthly Purchase Amount').sum()

df.groupby('Monthly Purchase Amount').sum().plot(kind='bar')

df.groupby('Monthly Purchase Amount"
94,Write a Pandas program to add leading zeros to the character column in a pandas series and makes the length of the field to 8 digit. ,"import pandas as pd
nums = {'amount': ['10', '250', '3000', '40000', '500000']}
print(""Original dataframe:"")
df = pd.DataFrame(nums)
print(df)
print(""\nAdd leading zeros:"")
df['amount'] = list(map(lambda x: x.zfill(10), df['amount']))
print(df)
","import pandas as pd

series = pd.Series(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'])

series"
95,Write a NumPy program to compute the reciprocal for all elements in a given array. ,"import numpy as np
x = np.array([1., 2., .2, .3])
print(""Original array: "")
print(x)
r1 = np.reciprocal(x)
r2 = 1/x
assert np.array_equal(r1, r2)
print(""Reciprocal for all elements of the said array:"")
print(r1)
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
print(np.reciprocal(a))

""""""

# Solution

# Python code to solve the following problem:

# import numpy as np

# a = np.array([1, 2, 3, 4, 5])
# print(np.reciprocal(a))

# Python code to solve the following problem:

# import numpy as np"
96,Write a NumPy program to calculate the QR decomposition of a given matrix. ,"import numpy as np
m = np.array([[1,2],[3,4]])
print(""Original matrix:"")
print(m)
result =  np.linalg.qr(m)
print(""Decomposition of the said matrix:"")
print(result)
","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

Q, R = np.linalg.qr(A)

print(Q)
print(R)

# Output:
[[ 1.  2.  3.]
 [ 4.  5.  6.]
 [ 7.  8.  9.]]

[[ 1.  2.  3.]"
97,Write a NumPy program to extract first and second elements of the first and second rows from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: First and second elements of the first and second rows "")
print(arra_data[0:2, 0:2])
","import numpy as np

a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(a[0, 0])
print(a[1, 1])
print(a[2, 2])
print(a[3, 3])

# Output:
# 5
# 6
# 7
# 8

# Input:"
98,Write a Python program to compute sum of digits of a given string. ,"def sum_digits_string(str1):
    sum_digit = 0
    for x in str1:
        if x.isdigit() == True:
            z = int(x)
            sum_digit = sum_digit + z

    return sum_digit
     
print(sum_digits_string(""123abcd45""))
print(sum_digits_string(""abcd1234""))
","def sum_digits(s):
    return sum([int(i) for i in s if i.isdigit()])

print(sum_digits(""123456789""))

""""""

def sum_digits(s):
    return sum([int(i) for i in s if i.isdigit()])

print(sum_digits(""123456789""))"
99,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to make a gradient color mapping on a specified column. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
print(""Original array:"")
print(df)
print(""\nDataframe - Gradient color:"")
df.style.background_gradient(subset=['C'])
","import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randn(10, 4), columns=['a', 'b', 'c', 'd'])

# Create a new column named 'color' with a random value from the 'a' column.
df['color'] = np.random.randint(0, 4, size=len(df))

# Create"
100,Write a Python program to find the nth Hamming number. User itertools module. ,"import itertools
from heapq import merge

def nth_hamming_number(n):
    def num_recur():
        last = 1
        yield last
        x, y, z = itertools.tee(num_recur(), 3)
        for n in merge((2 * i for i in x), (3 * i for i in y), (5 * i for i in z)):
            if n != last:
                yield n
                last = n
    result =  itertools.islice(num_recur(), n)
    return list(result)[-1]

print(nth_hamming_number(8))
print(nth_hamming_number(14))
print(nth_hamming_number(17))
","def hamming(n):
    for i in range(n):
        print(i)

n = int(input(""Enter the number of elements in the array: ""))

hamming(n)

""""""

# Solution

def hamming(n):
    for i in range(n):
        print(i)

n = int(input(""Enter the number of elements in the array: ""))

for i in range(n):
    print"
101,Write a Python program to find the last occurrence of a specified item in a given list. ,"def last_occurrence(l1, ch):
    return ''.join(l1).rindex(ch)

chars = ['s','d','f','s','d','f','s','f','k','o','p','i','w','e','k','c']
print(""Original list:"")
print(chars)
ch = 'f'
print(""Last occurrence of"",ch,""in the said list:"")
print(last_occurrence(chars, ch))
ch = 'c'
print(""Last occurrence of"",ch,""in the said list:"")
print(last_occurrence(chars, ch))
ch = 'k'
print(""Last occurrence of"",ch,""in the said list:"")
print(last_occurrence(chars, ch))
ch = 'w'
print(""Last occurrence of"",ch,""in the said list:"")
print(last_occurrence(chars, ch)) 
","def last_occurrence(lst, item):
    for i in range(len(lst)):
        if lst[i] == item:
            return i
    return -1

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
item = 5
print(last_occurrence(lst, item))

""""""

def last_occurrence(lst, item):
    for i in range"
102,Write a Python program to convert Python dictionary object (sort by key) to JSON data. Print the object members with indent level 4. ,"import json
j_str = {'4': 5, '6': 7, '1': 3, '2': 4}
print(""Original String:"")
print(j_str)
print(""\nJSON data:"")
print(json.dumps(j_str, sort_keys=True, indent=4))
","import json

d = {'a': 1, 'b': 2, 'c': 3}

print(json.dumps(d, indent=4))

# Output:

# {'a': 1, 'b': 2, 'c': 3}

# {'a': 1, 'b': 2, 'c': 3}

# {'a': 1, 'b': 2, 'c': 3}"
103,Write a Python program to create the combinations of 3 digit combo. ,"numbers = []
for num in range(1000):
  num=str(num).zfill(3)
print(num)
numbers.append(num)
","def combinations(n, k):
    if n == 0:
        return []
    if n == 1:
        return [[1]]
    if n == 2:
        return [[1, 1]]
    if n == 3:
        return [[1, 1, 1]]
    if n == 4:
        return [[1, 1, 1, 1]]
    if n == 5:
        return [[1, 1, 1, 1, 1]]
    if n == 6:
        return [["
104,Write a Python program to create an iterator to get specified number of permutations of elements. ,"import itertools as it
def permutations_data(iter, length):
    return it.permutations(iter, length)
#List
result = permutations_data(['A','B','C','D'], 3)
print(""\nIterator to get specified number of permutations of elements:"")
for i in result:
    print(i)

#String
result = permutations_data(""Python"", 2)
print(""\nIterator to get specified number of permutations of elements:"")
for i in result:
    print(i)
","def permutations(nums):
    if len(nums) == 1:
        return 1
    else:
        return sum(permutations(nums[1:]))

print(permutations([1, 2, 3]))

""""""

# Solution 1

def permutations(nums):
    if len(nums) == 1:
        return 1
    else:
        return sum(permutations(nums[1:]))

print(perm"
105,Write a Python function to get a string made of its first three characters of a specified string. If the length of the string is less than 3 then return the original string. ,"def first_three(str):
	return str[:3] if len(str) > 3 else str

print(first_three('ipy'))
print(first_three('python'))
print(first_three('py'))
","def first_three(str):
    return str[:3]

print(first_three(""abcdef""))

""""""

def first_three(str):
    return str[:3]

print(first_three(""abcdef""))"
106,Write a Python program to get hourly datetime between two hours. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nString representing the date, controlled by an explicit format string:"")
print(arrow.utcnow().strftime('%d-%m-%Y %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%m-%d %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%d-%m %H:%M:%S'))
","hour1 = datetime.datetime.strptime('10:00', '%H:%M')
hour2 = datetime.datetime.strptime('10:30', '%H:%M')

print(hour1.strftime('%H:%M'))
print(hour2.strftime('%H:%M'))

# Solution:

# hour1 = datetime.datetime.strptime('10:00', '%H:%M')"
107,Write a Python program to display formatted text (width=50) as output. ,"import textwrap
sample_text = '''
  Python is a widely used high-level, general-purpose, interpreted,
  dynamic programming language. Its design philosophy emphasizes
  code readability, and its syntax allows programmers to express
  concepts in fewer lines of code than possible in languages such
  as C++ or Java.
  '''
print()
print(textwrap.fill(sample_text, width=50))
print()
","def format_text(width=50):
    """"""
    Function to format text as output.
    """"""
    # Create a variable to store the text
    text = ""This is a test string""
    # Create a variable to store the width
    width = 50
    # Create a variable to store the text
    text = ""This is a test string""
    # Create a variable to store the width
    width = 50
    # Create a variable to store the text
    text = """
108,Write a Python function to find the maximum and minimum numbers from a sequence of numbers. ,"def max_min(data):
  l = data[0]
  s = data[0]
  for num in data:
    if num> l:
      l = num
    elif num< s:
        s = num
  return l, s

print(max_min([0, 10, 15, 40, -5, 42, 17, 28, 75]))
","def max_min(numbers):
    if len(numbers) == 0:
        return None
    if len(numbers) == 1:
        return numbers[0], numbers[0]
    if len(numbers) == 2:
        return numbers[0], numbers[1]
    if len(numbers) == 3:
        return numbers[0], numbers[1], numbers[2]
    if len(numbers) == 4:
        return numbers[0"
109,Write a Pandas program to create a sequence of durations increasing by an hour. ,"import pandas as pd
date_range = pd.timedelta_range(0, periods=49, freq='H')
print(""Hourly range of perods 49:"")
print(date_range)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({""Duration"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,"
110,Write a NumPy program to sort the specified number of elements from beginning of a given array. ,"import numpy as np
nums =  np.random.rand(10)
print(""Original array:"")
print(nums)
print(""\nSorted first 5 elements:"")
print(nums[np.argpartition(nums,range(5))])
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr.sort()

print(arr)

arr.sort(reverse=True)

print(arr)

arr.sort()

print(arr)

arr.sort(key=lambda x: x % 2)

print(arr)

arr.sort(key=lambda x: x % 2"
111,"Write a Python program to extract year, month, date and time using Lambda. ","import datetime
now = datetime.datetime.now()
print(now)
year = lambda x: x.year
month = lambda x: x.month
day = lambda x: x.day
t = lambda x: x.time()
print(year(now))
print(month(now))
print(day(now))
print(t(now))
","def extract_year(date):
    return date.split('-')[0]

def extract_month(date):
    return date.split('-')[1]

def extract_date(date):
    return date.split('-')[2]

def extract_time(date):
    return date.split('-')[3]

def solution(date):
    date = date.split('-')
    return extract_year(date[0]),"
112,"Write a Python program to find all the common characters in lexicographical order from two given lower case strings. If there are no common letters print ""No common characters"". ","from collections import Counter 
def common_chars(str1,str2): 	
	d1 = Counter(str1) 
	d2 = Counter(str2) 
	common_dict = d1 & d2 
	if len(common_dict) == 0: 
		return ""No common characters.""

	# list of common elements 
	common_chars = list(common_dict.elements()) 
	common_chars = sorted(common_chars) 

	return ''.join(common_chars) 

str1 = 'Python'
str2 = 'PHP'
print(""Two strings: ""+str1+' : '+str2)
print(common_chars(str1, str2))
str1 = 'Java'
str2 = 'PHP'
print(""Two strings: ""+str1+' : '+str2)
print(common_chars(str1, str2))
","def common_char(a, b):
    common_char = []
    for i in range(len(a)):
        if a[i] in b:
            common_char.append(a[i])
    return common_char

a = ""abcd""
b = ""abcd""
print(common_char(a, b))

""""""

# Solution:

def"
113,Write a Python program to remove a newline in Python. ,"str1='Python Exercises\n'
print(str1)
print(str1.rstrip())
","import sys

if __name__ == '__main__':
    if len(sys.argv) > 1:
        print('Argument passed:', sys.argv[1])
    else:
        print('No argument passed.')"
114,"Write a Pandas program to extract the column labels, shape and data types of the dataset (titanic.csv). ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
print(""List of columns:"")
print(df.columns)
print(""\nShape of the Dataset:"")
print(df.shape)
print(""\nData types of the Dataset:"")
print(df.dtypes)
","import pandas as pd

# Read the data into a pandas DataFrame: df
df = pd.read_csv('titanic.csv')

# Print the head of the DataFrame
print(df.head())

# Print the column labels of the DataFrame
print(df.columns)

# Print the shape of the DataFrame
print(df.shape)

# Print the data types of the DataFrame
print"
115,Write a Pandas program to replace arbitrary values with other values in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['A','B', 'C', 'D', 'A'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})

print(""Original DataFrame:"")
print(df)

print(""\nReplace A with c:"")
df = df.replace(""A"", ""C"")
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

df['col3'] = df['col1'] * 2

print(df)

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30"
116,"Write a NumPy program to calculate mean across dimension, in a 2D numpy array. ","import numpy as np
x = np.array([[10, 30], [20, 60]])
print(""Original array:"")
print(x)
print(""Mean of each column:"")
print(x.mean(axis=0))
print(""Mean of each row:"")
print(x.mean(axis=1))
","import numpy as np

x = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
print(x.mean(axis=0))

# Output:
# [2.5 3.5 4.5 5.5]

# Hint: To calculate mean across the rows, use np.mean(x, axis=0).

# Hint: To calculate mean across the columns, use np."
117,"Write a Pandas program to create a Pivot table and find survival rate by gender, age of the different categories of various classes. Add the fare as a dimension of columns and partition fare column into 2 categories based on the values present in fare columns. ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
fare = pd.qcut(df['fare'], 2)
age = pd.cut(df['age'], [0, 10, 30, 60, 80])
result = df.pivot_table('survived', index=['sex', age], columns=[fare, 'pclass'])
print(result)
","# Import pandas
import pandas as pd

# Read the data
df = pd.read_csv('https://raw.githubusercontent.com/datasets/covid-19-data/master/data%2Fvaccinations%2Fus-states.csv')

# Create a pivot table
df_p"
118,Write a Python program to retrieve the value of the nested key indicated by the given selector list from a dictionary or list. ,"from functools import reduce 
from operator import getitem
def get(d, selectors):
  return reduce(getitem, selectors, d) 
users = {
  'freddy': {
    'name': {
      'first': 'Fateh',
      'last': 'Harwood' 
    },
    'postIds': [1, 2, 3]
  }
}
print(get(users, ['freddy', 'name', 'last']))
print(get(users, ['freddy', 'postIds', 1]))
","def get_value(d, selector):
    for key in d:
        if selector in d[key]:
            return d[key][selector]

print(get_value({'a': {'b': {'c': 'd'}}, 'c': 'd'}, 'b'))

""""""

def get_value(d, selector):
    for key in d:
        if selector in d[key]:
            return"
119,Write a Python program to sort unsorted numbers using Recursive Bubble Sort. ,"#Ref.https://bit.ly/3oneU2l
def bubble_sort(list_data: list, length: int = 0) -> list:
    length = length or len(list_data)
    swapped = False
    for i in range(length - 1):
        if list_data[i] > list_data[i + 1]:
            list_data[i], list_data[i + 1] = list_data[i + 1], list_data[i]
            swapped = True

    return list_data if not swapped else bubble_sort(list_data, length - 1)
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Insertion Sort the said list becomes:"")
bubble_sort(nums, len(nums))
print(nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Bubble Sort the said list becomes:"")
bubble_sort(nums, len(nums))
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Bubble Sort the said list becomes:"")
bubble_sort(nums, len(nums))
print(nums)
nums = ['z','a','y','b','x','c']
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Bubble Sort the said list becomes:"")
bubble_sort(nums, len(nums))
print(nums)
","def bubbleSort(arr):
    for i in range(len(arr)):
        for j in range(len(arr)-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

arr = [6, 4, 8, 2, 5, 1, 9, 7, 3]
print(bubbleSort(arr))

""""""

# Time Complex"
120,Write a Python program to count the values associated with key in a dictionary. ,"student = [{'id': 1, 'success': True, 'name': 'Lary'},
 {'id': 2, 'success': False, 'name': 'Rabi'},
 {'id': 3, 'success': True, 'name': 'Alex'}]
print(sum(d['id'] for d in student))
print(sum(d['success'] for d in student))
","def count_key(d, key):
    count = 0
    for i in d:
        if i == key:
            count += 1
    return count

d = {'a': 1, 'b': 2, 'c': 3}
print(count_key(d, 'a'))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
121,"Write a NumPy program to multiply an array of dimension (2,2,3) by an array with dimensions (2,2). ","import numpy as np
nums1 = np.ones((2,2,3))
nums2 = 3*np.ones((2,2))
print(""Original array:"")
print(nums1)
new_array = nums1 * nums2[:,:,None]
print(""\nNew array:"")
print(new_array)
","import numpy as np

a = np.array([[1,2,3],[4,5,6]])
b = np.array([[7,8,9],[10,11,12]])

c = a*b
print(c)

Solution:

[[[1 2 3]
 [4 5 6]]
 [[7 8 9]
 [10 11 12]]]

[[[1 4 5]"
122,Write a NumPy program to swap rows and columns of a given array in reverse order. ,"import numpy as np
nums = np.array([[[1, 2, 3, 4],
               [0, 1, 3, 4],
               [90, 91, 93, 94],
               [5, 0, 3, 2]]])
print(""Original array:"")
print(nums)
print(""\nSwap rows and columns of the said array in reverse order:"")
new_nums = print(nums[::-1, ::-1])
print(new_nums)
","import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr_swapped = np.swapaxes(arr, 0, 1)

print(arr_swapped)

# Output:
[[1 4]
 [2 5]
 [3 6]
 [7 8]
 [4 9]]

# Task

# You are given an array of size N"
123,"Write a NumPy program to create an 1-D array of 20 elements. Now create a new array of shape (5, 4) from the said array, then restores the reshaped array into a 1-D array. ","import numpy as np
array_nums = np.arange(0, 40, 2)
print(""Original array:"")
print(array_nums)
print(""\nNew array of shape(5, 4):"")
new_array = array_nums.reshape(5, 4)
print(new_array) 
print(""\nRestore the reshaped array into a 1-D array:"")
print(new_array.flatten())
","import numpy as np

arr = np.arange(20)
print(arr)

arr = arr.reshape(5, 4)
print(arr)

arr = arr.reshape(5, 4)
print(arr)

arr = arr.reshape(5, 4)
print(arr)

arr = arr."
124,Write a Python program to sort a list of elements using Tree sort. ,"# License https://bit.ly/2InTS3W
# Tree_sort algorithm
# Build a BST and in order traverse.
class node():
    # BST data structure
    def __init__(self, val):
        self.val = val
        self.left = None 
        self.right = None 
    
    def insert(self,val):
        if self.val:
            if val < self.val:
                if self.left is None:
                    self.left = node(val)
                else:
                    self.left.insert(val)
            elif val > self.val:
                if self.right is None:
                    self.right = node(val)
                else:
                    self.right.insert(val)
        else:
            self.val = val

def inorder(root, res):
    # Recursive travesal 
    if root:
        inorder(root.left,res)
        res.append(root.val)
        inorder(root.right,res)

def treesort(arr):
    # Build BST
    if len(arr) == 0:
        return arr
    root = node(arr[0])
    for i in range(1,len(arr)):
        root.insert(arr[i])
    # Traverse BST in order. 
    res = []
    inorder(root,res)
    return res

print(treesort([7,1,5,2,19,14,17]))
","def sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [10, 4, 8, 2, 5, 1, 9, 7, 6]
print(sort(arr))

""""""

def sort(arr"
125,"Write a NumPy program to create an element-wise comparison (equal, equal within a tolerance) of two given arrays. ","import numpy as np
x = np.array([72, 79, 85, 90, 150, -135, 120, -10, 60, 100])
y = np.array([72, 79, 85, 90, 150, -135, 120, -10, 60, 100.000001])
print(""Original numbers:"")
print(x)
print(y)
print(""Comparison - equal:"")
print(np.equal(x, y))
print(""Comparison - equal within a tolerance:"")
print(np.allclose(x, y))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([1, 2, 3, 4, 5])

print(a == b)

# Output:
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True"
126,Write a Pandas program to split a given dataframe into groups with multiple aggregations. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s001'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])
print(""Original DataFrame:"")
print(df)
print(""\nGroup by with multiple aggregations:"")
result = df.groupby(['school_code','class']).agg({'height': ['max', 'mean'],
                                 'weight': ['sum','min','count']})
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

# Create a groupby object
groupby_object"
127,Write a NumPy program to find a matrix or vector norm. ,"import numpy as np
v = np.arange(7)
result = np.linalg.norm(v)
print(""Vector norm:"")
print(result)
m = np.matrix('1, 2; 3, 4') 
result1 = np.linalg.norm(m)
print(""Matrix norm:"")
print(result1)
","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(np.linalg.norm(A))

# Output:
# array([[ 5.       ,  7.       ,  9.        ],
#        [10.       , 11.       , 12.        ],
#        [13.       , 14.       , 15.        ]])

# Python code to solve the following"
128,Write a Python program to delete the first item from a singly linked list. ,"class Node:
    # Singly linked node
    def __init__(self, data=None):
        self.data = data
        self.next = None
class singly_linked_list:
    def __init__(self):
        # Createe an empty list
        self.tail = None
        self.head = None
        self.count = 0

    def append_item(self, data):
        #Append items on the list
        node = Node(data)
        if self.head:
            self.head.next = node
            self.head = node
        else:
            self.tail = node
            self.head = node
        self.count += 1
    
    def delete_item(self, data):
        # Delete an item from the list
        current = self.tail
        prev = self.tail
        while current:
            if current.data == data:
                if current == self.tail:
                    self.tail = current.next
                else:
                    prev.next = current.next
                self.count -= 1
                return
            prev = current
            current = current.next
    def iterate_item(self):
        # Iterate the list.
        current_item = self.tail
        while current_item:
            val = current_item.data
            current_item = current_item.next
            yield val

items = singly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')

print(""Original list:"")
for val in items.iterate_item():
    print(val)

print(""\nAfter removing the first item from the list:"")
items.delete_item('PHP')
for val in items.iterate_item():
    print(val)
","# Node class
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# Linked List class
class LinkedList:
    def __init__(self):
        self.head = None
    
    # Function to insert a new node at the beginning
    def push(self, new_data):
        new_node = Node(new_data)
        new_node.next = self.head"
129,Write a Python program to find the difference between two list including duplicate elements. Use collections module. ,"from collections import Counter
l1 = [1,1,2,3,3,4,4,5,6,7]
l2 = [1,1,2,4,5,6]
print(""Original lists:"")
c1 = Counter(l1)
c2 = Counter(l2)
diff = c1-c2
print(list(diff.elements()))
","# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

# Solution 11:

# Solution 12:

# Solution 13:

# Solution 14:

# Solution 15:

# Solution 16:

# Solution 17:

# Solution 18:"
130,Write a Python function that takes a positive integer and returns the sum of the cube of all the positive integers smaller than the specified number. ,"def sum_of_cubes(n):
 n -= 1
 total = 0
 while n > 0:
   total += n * n * n
   n -= 1
 return total
print(""Sum of cubes smaller than the specified number: "",sum_of_cubes(3))
","def sum_of_cube(n):
    sum = 0
    for i in range(1, n + 1):
        sum += i ** 3
    return sum

print(sum_of_cube(5))

""""""

def sum_of_cube(n):
    sum = 0
    for i in range(1, n + 1):
        sum += i ** 3
    return sum

print(sum_of"
131,Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a Pandas dataframe and find a list of specified customers by name. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')    
df.query('Mine_Name == [""Shoal Creek Mine"", ""Piney Woods Preparation Plant""]').head()
","import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')

df['Name'] = df['Name'].str.lower()

df['Name'] = df['Name'].str.replace(' ', '-')

df['Name'] = df['Name'].str.replace(' ', '-')

df['Name'] = df['Name'"
132,"Write a Python program to create a new Arrow object, cloned from the current one. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
cloned = a.clone()
print(""\nCloned datetime:"")
print(cloned)
",">>> import arrow
>>> arrow.Arrow(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50"
133,Write a NumPy program to create a 3-D array with ones on a diagonal and zeros elsewhere. ,"import numpy as np
x = np.eye(3)
print(x)
","import numpy as np

# Create a 3-D array with ones on the diagonal and zeros elsewhere
np.random.seed(123)
x = np.random.randint(0, 10, size=(3, 3))

# Create a 3-D array with ones on the diagonal and zeros elsewhere
np.random.seed(123)
y = np.random.randint(0, 10, size=(3, 3))

# Create a 3"
134,Write a NumPy program to extract first element of the second row and fourth element of fourth row from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: First element of the second row and fourth element of fourth row  "")
print(arra_data[[1,3], [0,3]])
","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

print(a[0][2])
print(a[1][3])

# solution

# a = np.array([[1, 2, 3, 4],
#               [5, 6, 7, 8],"
135,Write a Python program to get date and time properties from datetime function using arrow module. ,"import arrow
a = arrow.utcnow()
print(""Current date:"")
print(a.date())
print(""\nCurrent time:"")
print(a.time())
","import arrow

print(arrow.now())
print(arrow.utcnow())
print(arrow.utcnow().isoformat())
print(arrow.utcnow().strftime(""%Y-%m-%d %H:%M:%S""))
print(arrow.utcnow().strftime(""%Y-%m-%d %H:%M:%S.%f""))
print(arrow.utcnow().strftime(""%Y-%m"
136,Write a Python program to get the size of a file. ,"import os
file_size = os.path.getsize(""abc.txt"")
print(""\nThe size of abc.txt is :"",file_size,""Bytes"")
print()
","def get_file_size(filename):
    with open(filename, 'rb') as f:
        return f.size

print(get_file_size('file.txt'))

""""""

# Solution

def get_file_size(filename):
    with open(filename, 'rb') as f:
        return f.size

print(get_file_size('file.txt'))

""""""

# Solution

def get_file_size(filename):"
137,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to display bar charts in dataframe on specified columns. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
print(""\nBar charts in dataframe:"")
df.style.bar(subset=['B', 'C'], color='#d65f5f')
","import pandas as pd

df = pd.DataFrame(
    {
        ""First column"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ""Second column"": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
        ""Third column"": [21, 22, 23, 24, 25, 26, 27, 28, 29"
138,Write a Pandas program to create a graphical analysis of UFO (unidentified flying object) sighted by month. ,"import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
df[""ufo_yr""] = df.Date_time.dt.month
months_data = df.ufo_yr.value_counts()
months_index = months_data.index  # x ticks
months_values = months_data.get_values()
plt.figure(figsize=(15,8))
plt.xticks(rotation = 60)
plt.title('UFO sighted by Month')
plt.xlabel(""Months"")
plt.ylabel(""Number of sighting"")
months_plot = sns.barplot(x=months_index[:60],y=months_values[:60], palette = ""Oranges"")
","import pandas as pd
import matplotlib.pyplot as plt

# Read the data from the csv file
df = pd.read_csv('/Users/krishna/Downloads/UFO_sighting_data.csv')

# Create a new dataframe with only the columns that are required
df_new = df[['month', 'UFO_id', 'UFO_name', 'UFO_type', 'UFO"
139,Write a Python program to sort unsorted numbers using Recursive Quick Sort. ,"def quick_sort(nums: list) -> list:
    if len(nums) <= 1:
        return nums
    else:
        return (
            quick_sort([el for el in nums[1:] if el <= nums[0]])
            + [nums[0]]
            + quick_sort([el for el in nums[1:] if el > nums[0]])
        )
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Quick Sort the said list becomes:"")
print(quick_sort(nums))
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Quick Sort the said list becomes:"")
print(quick_sort(nums))
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Quick Sort the said list becomes:"")
print(quick_sort(nums))
","def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        less = [i for i in arr[1:] if i <= pivot]
        greater = [i for i in arr[1:] if i > pivot]
        return quick_sort(less) + [pivot] + quick_sort(greater)

arr = [6, 5, 4, 8, 2, 1, 7,"
140,"Write a Python program to convert timezone from local to utc, utc to local or specified zones. ","import arrow
utc = arrow.utcnow()
print(""utc:"")
print(utc)
print(""\nutc to local:"")
print(utc.to('local'))
print(""\nlocal to utc:"")
print(utc.to('local').to('utc'))
print(""\nutc to specific location:"")
print(utc.to('US/Pacific'))
","def timezone_convert(tz_str, utc_str, local_str):
    if tz_str == ""UTC"":
        utc_str = utc_str.replace(""+00:00"", """")
        utc_str = utc_str.replace(""-00:00"", """")
        utc_str = utc_str.replace(""+00:00"", """")
        utc_str = utc_str"
141,Write a Python program to find the difference between two list including duplicate elements. ,"def list_difference(l1,l2):
    result = list(l1)
    for el in l2:
        result.remove(el)
    return result
l1 = [1,1,2,3,3,4,4,5,6,7]
l2 = [1,1,2,4,5,6]

print(""Original lists:"")
print(l1)
print(l2)
print(""\nDifference between two said list including duplicate elements):"")
print(list_difference(l1,l2))
","def diff(list1, list2):
    diff = []
    for i in range(len(list1)):
        if list1[i]!= list2[i]:
            diff.append(list1[i])
    return diff

print(diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def diff("
142,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to display the dataframe in Heatmap style. ","import pandas as pd
import numpy as np
import seaborn as sns

np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
print(""Original array:"")
print(df)
print(""\nDataframe - Heatmap style:"")

cm = sns.light_palette(""red"", as_cmap=True)
 
df.style.background_gradient(cmap='viridis') 
","import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randn(10, 4), columns=['a', 'b', 'c', 'd'])

print(df)

# Create a heatmap
import matplotlib.pyplot as plt
import seaborn as sns

sns.heatmap(df.corr(), annot=True)"
143,Write a Python program to remove a tag from a given tree of html document and destroy it and its contents. ,"from bs4 import BeautifulSoup
html_content = '<a href=""https://w3resource.com/"">Python exercises<i>w3resource</i></a>'
soup = BeautifulSoup(html_content, ""lxml"")
print(""Original Markup:"")
a_tag = soup.a
print(a_tag)
new_tag = soup.a.decompose()
print(""After decomposing:"")
print(new_tag)
","import re

# create a regex pattern
pattern = r'<[^>]+>'

# create a regex object
regex = re.compile(pattern)

# create a regex object
regex2 = re.compile(pattern, re.DOTALL)

# create a regex object
regex3 = re.compile(pattern, re.MULTILINE)

# create a regex object
regex4 = re.comp"
144,Write a Python program to convert a given number (integer) to a list of digits. ,"def digitize(n):
  return list(map(int, str(n)))
print(digitize(123))
print(digitize(1347823)) 
","def digits(n):
    return [int(i) for i in str(n)]

n = int(input(""Enter a number: ""))
print(digits(n))

""""""

# Solution 1

def digits(n):
    return [int(i) for i in str(n)]

n = int(input(""Enter a number: ""))
print(digits(n))

# Solution 2

def digits(n):
    return"
145,rite a Python program that accepts a sequence of lines (blank line to terminate) as input and prints the lines as output (all characters in lower case). ,"lines = []
while True:
    l = input()
    if l:
        lines.append(l.upper())
    else:
        break;

for l in lines:
    print(l)
	","# Solution:

# Input:
#
#
# Output:
#
#
# Explanation:
#
#
# The input sequence is:
#
#
#
#
# Output:
#
#
#
# Explanation:
#
#
# The input sequence is:
#
#
#
#
#
# Output:
#
#
#
# Explanation:"
146,Write a Python program to remove a tag or string from a given tree of html document and replace it with the given tag or string. ,"from bs4 import BeautifulSoup
html_markup= '<a href=""https://w3resource.com/"">Python exercises<i>w3resource</i></a>'
soup = BeautifulSoup(html_markup, ""lxml"")
print(""Original markup:"")
a_tag = soup.a
print(a_tag)
new_tag = soup.new_tag(""b"")
new_tag.string = ""PHP""
b_tag = a_tag.i.replace_with(new_tag)
print(""New Markup:"")
print(a_tag)
","import re

html = '''
<html>
<head>
<title>The Dormouse's story</title>
</head>
<body>
<p class=""title""><b>The Dormouse's story</b></p>
<p class=""story"">Once upon a time there were three little sisters; and their names were
<a href=""http://example.com/elsie"" class=""sister"" id=""link"
147,Write a Pandas program to extract the unique sentences from a given column of a given DataFrame. ,"import pandas as pd
import re as re
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],
    'address': ['9910 Surrey Avenue\n9910 Surrey Avenue','92 N. Bishop Avenue','9910 Golden Star Avenue', '102 Dunbar St.\n102 Dunbar St.', '17 West Livingston Court']
})

print(""Original DataFrame:"")
print(df)

def find_unique_sentence(str1):
    result = re.findall(r'(?sm)(^[^\r\n]+$)(?!.*^\1$)', str1)
    return result

df['unique_sentence']=df['address'].apply(lambda st : find_unique_sentence(st))
print(""\nExtract unique sentences :"")
print(df)
","import pandas as pd
import numpy as np

df = pd.read_csv('/Users/srinivasan/Desktop/Python/data/data.csv')

df['sentence'] = df['text'].apply(lambda x: x.split('.'))

df['sentence'] = df['sentence'].apply(lambda x:''.join(x))

df['sentence'] = df['sentence'].apply(lambda"
148,Write a Pandas program to filter all records where the average consumption of beverages per person from .5 to 2.50 in world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nFilter all records where the average consumption of beverages per person from .5 to 2.50.:"")
print(w_a_con[(w_a_con['Display Value'] < 2.5) & (w_a_con['Display Value']>.5)].head())
","import pandas as pd

df = pd.read_csv('dataset.csv')

df = df[df['average_consumption'] > 2.50]

df.to_csv('dataset_filtered.csv', index=False)

# Solution:

# df = pd.read_csv('dataset_filtered.csv')
# df = df[df['average"
149,Write a Pandas program to extract elements in the given positional indices along an axis of a dataframe. ,"import pandas as pd 
import numpy as np
sales_arrays = [['sale1', 'sale1', 'sale3', 'sale3', 'sale2', 'sale2', 'sale4', 'sale4'],
          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]
sales_tuples = list(zip(*sales_arrays))
sales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])
print(""\nConstruct a Dataframe using the said MultiIndex levels:"")
df = pd.DataFrame(np.random.randn(8, 5), index=sales_index)
print(df)
print(""\nSelect 1st, 2nd and 3rd row of the said DataFrame:"")
positions = [1, 2, 5]
print(df.take([1, 2, 5]))

print(""\nTake elements at indices 1 and 2 along the axis 1 (column selection):"")
print(df.take([1, 2], axis=1))

print(""\nTake elements at indices 4 and 3 using negative integers along the axis 1 (column selection):"")
print(df.take([-1, -2], axis=1))
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

# Create a new column
df['col3'] = df['col1'] * 2

# Create a new column
df['col4'] = df['col2'] * 3

# Create a new column
df['col"
150,Write a Python program to find a pair with highest product from a given array of integers. ,"def max_Product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        print(""No pairs exists"") 
        return      
    # Initialize max product pair 
    x = arr[0]; y = arr[1] 

    # Traverse through every possible pair     
    for i in range(0, arr_len): 

        for j in range(i + 1, arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 

    return x,y    

nums = [1, 2, 3, 4, 7, 0, 8, 4] 
print(""Original array:"", nums)
print(""Maximum product pair is:"", max_Product(nums))

nums = [0, -1, -2, -4, 5, 0, -6] 
print(""\nOriginal array:"", nums)
print(""Maximum product pair is:"", max_Product(nums))
","def highest_product(arr):
    max_product = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            product = arr[i] * arr[j]
            if product > max_product:
                max_product = product
    return max_product

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(highest_product("
151,Write a Python program to move all zero digits to end of a given list of numbers. ,"def test(lst):
    result = sorted(lst, key=lambda x: not x) 
    return result
nums = [3,4,0,0,0,6,2,0,6,7,6,0,0,0,9,10,7,4,4,5,3,0,0,2,9,7,1]
print(""\nOriginal list:"")
print(nums)
print(""\nMove all zero digits to end of the said list of numbers:"")
print(test(nums)) 
","def move_zeros(nums):
    for i in range(len(nums)):
        if nums[i] == 0:
            nums[i] = '0'
    return nums

nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print(move_zeros(nums))

""""""

# Solution:

def move_zeros(nums):
    for i"
152,Write a NumPy program to compute cross-correlation of two given arrays. ,"import numpy as np
x = np.array([0, 1, 3])
y = np.array([2, 4, 5])
print(""\nOriginal array1:"")
print(x)
print(""\nOriginal array1:"")
print(y)
print(""\nCross-correlation of the said arrays:\n"",np.cov(x, y))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(np.cross(a, b))

# Output:
[[-0.66666667 -0.33333333 -0.66666667]
 [ 0.33333333 -0.66666667  0.33333333]]

""""""

import"
153,Write a Python program to get the actual module object for a given object. ,"from inspect import getmodule
from math import sqrt
print(getmodule(sqrt))
","import sys

def get_module(obj):
    if isinstance(obj, str):
        return sys.modules[obj]
    elif isinstance(obj, int):
        return sys.modules[str(obj)]
    else:
        raise TypeError(""Object is not a string or an int"")

def get_module_name(obj):
    if isinstance(obj, str):
        return obj
    elif isinstance(obj, int):
        return str("
154,Write a Python program to extract the nth element from a given list of tuples using lambda. ,"def extract_nth_element(test_list, n):
    result = list(map (lambda x:(x[n]), test_list))
    return result
students = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] 
print (""Original list:"")
print(students)
n = 0
print(""\nExtract nth element ( n ="",n,"") from the said list of tuples:"")
print(extract_nth_element(students, n))
n = 2
print(""\nExtract nth element ( n ="",n,"") from the said list of tuples:"")
print(extract_nth_element(students, n))
","def solution(n, head):
    return head[n]

""""""

# Solution 1

def solution(n, head):
    return head[n]

# Solution 2

def solution(n, head):
    return head[n]

# Solution 3

def solution(n, head):
    return head[n]

# Solution 4

def solution(n, head):
    return head[n]

# Solution 5"
155,Write a NumPy program to add an extra column to a NumPy array. ,"import numpy as np
x = np.array([[10,20,30], [40,50,60]])
y = np.array([[100], [200]])
print(np.append(x, y, axis=1))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
a = np.append(a, [[7, 8, 9]], axis=1)
print(a)

# Solution:

# a = np.array([[1, 2, 3], [4, 5, 6]])
# a = np.append(a, [[7, 8, 9]], axis=1)
# print(a)"
156,Write a Python program to calculate the product of a given list of numbers using lambda. ,"import functools 
def remove_duplicates(nums):
    result = functools.reduce(lambda x, y: x * y, nums, 1)
    return result
nums1 = [1,2,3,4,5,6,7,8,9,10]
nums2 = [2.2,4.12,6.6,8.1,8.3]
print(""list1:"", nums1)
print(""Product of the said list numbers:"")
print(remove_duplicates(nums1))
print(""\nlist2:"", nums2)
print(""Product of the said list numbers:"")
print(remove_duplicates(nums2))
","def product(numbers):
    return reduce(lambda x, y: x * y, numbers)

print(product([1, 2, 3, 4, 5]))

""""""

# Solution 1

def product(numbers):
    return reduce(lambda x, y: x * y, numbers)

print(product([1, 2, 3, 4, 5]))

# Solution 2

def product(numbers):
    return reduce(lambda x, y"
157,Write a Python program to parse a string representing a time according to a format. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\ntime.struct_time, in the current timezone:"")
print(arrow.utcnow().timetuple())
","import re

def parse_time(time_string):
    """"""Parse a string representing a time according to a format.

    Args:
        time_string (str): A string representing a time according to a format.

    Returns:
        (int, int): A tuple containing the hours, minutes and seconds of the time.
    """"""
    # TODO: Replace this with your code
    # Parse the time string
    # Return the hours, minutes and seconds
    #"
158,Write a NumPy program to create a random 10x4 array and extract the first five rows of the array and store them into a variable. ,"import numpy as np
x = np.random.rand(10, 4)
print(""Original array: "")
print(x)
y= x[:5, :]
print(""First 5 rows of the above array:"")
print(y)
","import numpy as np

a = np.random.randint(0,10,size=(10,4))
print(a)

# a = np.random.randint(0,10,size=(10,4))
# print(a)

# a = np.random.randint(0,10,size=(10,4))
# print(a)

# a = np.random.randint"
159,Write a Pandas program to find average consumption of wine per person greater than 2 in world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nAverage consumption of wine per person greater than 2:"")
print(w_a_con[(w_a_con['Beverage Types'] == 'Wine') & (w_a_con['Display Value'] > .2)].count())
","import pandas as pd

df = pd.read_csv('world_alcohol_consumption.csv')

df['avg_cons'] = df['world_alcohol_consumption']/df['world_alcohol_consumption'].max()

print(df.avg_cons.max())

# Output:
# avg_cons
# 0.0
# 0.0
# 0.0
# 0.0
# 0."
160,Write a Pandas program to convert Series of lists to one Series. ,"import pandas as pd
s = pd.Series([
    ['Red', 'Green', 'White'],
    ['Red', 'Black'],
    ['Yellow']])
print(""Original Series of list"")
print(s)
s = s.apply(pd.Series).stack().reset_index(drop=True)
print(""One Series"")
print(s)
","s = pd.Series(['a', 'b', 'c', 'd'])
print(s)

s = pd.Series(['a', 'b', 'c', 'd'], index=['a', 'b', 'c', 'd'])
print(s)

s = pd.Series(['a', 'b', 'c', 'd'], index=['a', 'b', 'c', 'd'])
print(s)

s ="
161,Write a Python program to sort a list of elements using Time sort. ,"# License https://bit.ly/2InTS3W
def binary_search(lst, item, start, end):
    if start == end:
        if lst[start] > item:
            return start
        else:
            return start + 1
    if start > end:
        return start

    mid = (start + end) // 2
    if lst[mid] < item:
        return binary_search(lst, item, mid + 1, end)
    elif lst[mid] > item:
        return binary_search(lst, item, start, mid - 1)
    else:
        return mid
def insertion_sort(lst):
    length = len(lst)

    for index in range(1, length):
        value = lst[index]
        pos = binary_search(lst, value, 0, index - 1)
        lst = lst[:pos] + [value] + lst[pos:index] + lst[index+1:]
    return lst


def merge(left, right):
    if not left:
        return right

    if not right:
        return left

    if left[0] < right[0]:
        return [left[0]] + merge(left[1:], right)

    return [right[0]] + merge(left, right[1:])

def time_sort(lst):
    runs, sorted_runs = [], []
    length = len(lst)
    new_run = [lst[0]]
    sorted_array = []

    for i in range(1, length):
        if i == length - 1:
            new_run.append(lst[i])
            runs.append(new_run)
            break

        if lst[i] < lst[i - 1]:
            if not new_run:
                runs.append([lst[i - 1]])
                new_run.append(lst[i])
            else:
                runs.append(new_run)
                new_run = []
        else:
            new_run.append(lst[i])

    for run in runs:
        sorted_runs.append(insertion_sort(run))

    for run in sorted_runs:
        sorted_array = merge(sorted_array, run)

    return sorted_array

user_input = input(""Input numbers separated by a comma:\n"").strip()
nums = [int(item) for item in user_input.split(',')]
print(time_sort(nums))
","def time_sort(lst):
    lst.sort()
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(time_sort(lst))

""""""
Time complexity: O(n log n)
Space Complexity: O(n)
"""""""
162,"Write a Python program to convert timezone from local to utc, utc to local or specified zones. ","import arrow
utc = arrow.utcnow()
print(""utc:"")
print(utc)
print(""\nutc to local:"")
print(utc.to('local'))
print(""\nlocal to utc:"")
print(utc.to('local').to('utc'))
print(""\nutc to specific location:"")
print(utc.to('US/Pacific'))
","def timezone_convert(tz_str, utc_str, local_str):
    if tz_str == ""UTC"":
        utc_str = utc_str.replace(""+00:00"", """")
        utc_str = utc_str.replace(""-00:00"", """")
        utc_str = utc_str.replace(""+00:00"", """")
        utc_str = utc_str"
163,Write a NumPy program to subtract the mean of each row of a given matrix. ,"import numpy as np
print(""Original matrix:\n"")
X = np.random.rand(5, 10)
print(X)
print(""\nSubtract the mean of each row of the said matrix:\n"")
Y = X - X.mean(axis=1, keepdims=True)
print(Y)
","import numpy as np

matrix = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

print(""Original matrix:"")
print(matrix)

print(""\nSubtracted mean:"")
print(matrix - np.mean(matrix, axis=0))

# Output:
# [[1. 0. 0.]
#  [5. 6. 7.]"
164,Write a NumPy program to test whether two arrays are element-wise equal within a tolerance. ,"import numpy as np
print(""Test if two arrays are element-wise equal within a tolerance:"")
print(np.allclose([1e10,1e-7], [1.00001e10,1e-8]))
print(np.allclose([1e10,1e-8], [1.00001e10,1e-9]))
print(np.allclose([1e10,1e-8], [1.0001e10,1e-9]))
print(np.allclose([1.0, np.nan], [1.0, np.nan]))
print(np.allclose([1.0, np.nan], [1.0, np.nan], equal_nan=True))
","import numpy as np

a = np.array([1, 2, 3, 4])
b = np.array([1, 2, 3, 4])

print(a == b)

# Output:
# True
# True
# True
# False

# Hint: You can use np.array() to convert a list to an array.
# You can also use np.array() to convert a list to a numpy array.
# You can also use"
165,Write a Pandas program to create a Pivot table and count the manager wise sale and mean value of sale amount. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
print(pd.pivot_table(df,index=[""Manager""],values=[""Sale_amt""],aggfunc=[np.mean,len]))
","import pandas as pd

df = pd.read_csv(""C:\\Users\\DELL\\Desktop\\Python\\Sales_Sales.csv"")

df.groupby(['Sales','Manager']).size().unstack().plot(kind='bar',stacked=True)

# Create a pivot table to display the sales of each manager and the mean sale amount of each manager.

df.groupby(['Sales','Manager']).size().un"
166,Write a Python program to select all the Sundays of a specified year. ,"from datetime import date, timedelta

def all_sundays(year):
# January 1st of the given year
       dt = date(year, 1, 1)
# First Sunday of the given year       
       dt += timedelta(days = 6 - dt.weekday())  
       while dt.year == year:
          yield dt
          dt += timedelta(days = 7)
          
for s in all_sundays(2020):
   print(s)
   ","python sol_python.py

""""""

# import the necessary packages
from datetime import date
import calendar
import calendar as c
import datetime

# define a function to select all the Sundays of a specified year
def select_sundays(year):
    # create a list of the calendar days of the specified year
    calendar_days = c.Calendar().itermonthdays(year, 1)
    # create a list of the calendar days of the specified year
    calendar_days"
167,Write a Pandas program to print a concise summary of the dataset (titanic.csv). ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.info()
print(result)
","# Import pandas
import pandas as pd

# Read the data
titanic = pd.read_csv('titanic.csv')

# Print the dataframe
print(titanic)

# Print the first five rows of the dataframe
print(titanic.head())

# Print the shape of the dataframe
print(titanic.shape)

# Print the column names of the dataframe
print(titanic."
168,Write a Python program to create an object for writing and iterate over the rows to print the values. ,"import csv
import sys
with open('temp.csv', 'wt') as f:
    writer = csv.writer(f)
    writer.writerow(('id1', 'id2', 'date'))
    for i in range(3):
        row = (
            i + 1,
            chr(ord('a') + i),
            '01/{:02d}/2019'.format(i + 1),)
        writer.writerow(row)
print(open('temp.csv', 'rt').read())
","def print_values(rows):
    for row in rows:
        for value in row:
            print(value, end="" "")
        print()

rows = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print_values(rows)

""""""

# Solution

def print_values(rows):
    for row in rows:
        for value in row:
            print(value, end="" """
169,Write a Python program to remove duplicate dictionary from a given list. ,"def remove_duplicate_dictionary(list_color):
    result = [dict(e) for e in {tuple(d.items()) for d in list_color}]
    return result

list_color = [{'Green': '#008000'}, {'Black': '#000000'}, {'Blue': '#0000FF'}, {'Green': '#008000'}]
print (""Original list with duplicate dictionary:"")
print(list_color)
print(""\nAfter removing duplicate dictionary of the said list:"")
print(remove_duplicate_dictionary(list_color))
","def remove_duplicate(list):
    new_list = []
    for i in list:
        if i not in new_list:
            new_list.append(i)
    return new_list

print(remove_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28"
170,Write a Pandas program to create a Pivot table and compute survival totals of all classes along each group. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table('survived', index='sex', columns='class', margins=True)
print(result)
","import pandas as pd
import numpy as np

# Create a Pandas dataframe
df = pd.DataFrame(np.random.randn(20, 3), columns=['a', 'b', 'c'])

# Create a Pivot table
pivot = df.pivot_table(index='a', columns='b', values='c', aggfunc='sum')

# Compute the survival totals
print(pivot.loc["
171,Write a Python program to remove first specified number of elements from a given list satisfying a condition. ,"def condition_match(x):
    return ((x % 2) == 0)
def remove_items_con(data, N):
    ctr = 1
    result = []
    for x in data:
        if ctr > N or not condition_match(x):
            result.append(x)
        else:
            ctr = ctr + 1
    return result
nums = [3,10,4,7,5,7,8,3,3,4,5,9,3,4,9,8,5]
N = 4
print(""Original list:"")
print(nums)
print(""\nRemove first 4 even numbers from the said list:"")
print(remove_items_con(nums, N))
","def remove_first(lst, n):
    return lst[:n]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
print(remove_first(lst, n))

""""""

def remove_first(lst, n):
    return lst[:n]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9"
172,Write a Python program to convert a list of multiple integers into a single integer. ,"L = [11, 33, 50]
print(""Original List: "",L)
x = int("""".join(map(str, L)))
print(""Single Integer: "",x)
","def solution(lst):
    return sum(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(lst))

""""""

def solution(lst):
    return sum(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(lst))

""""""

def solution("
173,Write a Python program to find the value of the last element in the given list that satisfies the provided testing function. ,"def find_last(lst, fn):
  return next(x for x in lst[::-1] if fn(x))

print(find_last([1, 2, 3, 4], lambda n: n % 2 == 1))
print(find_last([1, 2, 3, 4], lambda n: n % 2 == 0))
","def last_element(lst):
    return lst[-1]

def last_element_solution(lst):
    return lst[-1]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(last_element(lst))
print(last_element_solution(lst))

""""""

# Solution

def last_element(lst"
174,Write a Python program to change the position of every n-th value with the (n+1)th in a list. ,"from itertools import zip_longest, chain, tee
def replace2copy(lst):
    lst1, lst2 = tee(iter(lst), 2)
    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))
n = [0,1,2,3,4,5]
print(replace2copy(n))
","def solution(n, arr):
    for i in range(n):
        arr[i] = arr[i] + 1
    return arr

print(solution(5, [1, 2, 3, 4, 5]))

""""""

def solution(n, arr):
    for i in range(n):
        arr[i] = arr[i] + 1
    return arr

print(solution(5,"
175,Write a Python program to multiply all the numbers in a given list using lambda. ,"from functools import reduce 
def mutiple_list(nums):
    result =  reduce(lambda x, y: x*y, nums)
    return result
nums = [4, 3, 2, 2, -1, 18]
print (""Original list: "")
print(nums)
print(""Mmultiply all the numbers of the said list:"",mutiple_list(nums))
nums = [2, 4, 8, 8, 3, 2, 9]
print (""\nOriginal list: "")
print(nums)
print(""Mmultiply all the numbers of the said list:"",mutiple_list(nums))
","def multiply(numbers):
    return reduce(lambda x, y: x * y, numbers)

print(multiply([1, 2, 3, 4, 5]))

""""""

# Solution 1

def multiply(numbers):
    return reduce(lambda x, y: x * y, numbers)

print(multiply([1, 2, 3, 4, 5]))

# Solution 2

def multiply(numbers):
    return reduce(lambda"
176,Write a Python program to remove unwanted characters from a given string. ,"def remove_chars(str1, unwanted_chars):
    for i in unwanted_chars:
        str1 = str1.replace(i, '')
    return str1



str1 = ""Pyth*^on Exercis^es""
str2 = ""A%^!B#*CD""

unwanted_chars = [""#"", ""*"", ""!"", ""^"", ""%""]
print (""Original String : "" + str1)
print(""After removing unwanted characters:"")
print(remove_chars(str1, unwanted_chars))
print (""\nOriginal String : "" + str2)
print(""After removing unwanted characters:"")
print(remove_chars(str2, unwanted_chars))
","s = ""This is a string with spaces""

print(s.replace("" "", """"))

# Output:
# This is a string with spaces
# This is a string with spaces
# This is a string with spaces
# This is a string with spaces
# This is a string with spaces
# This is a string with spaces
# This is a string with spaces
# This is a string with spaces
# This is a string with spaces
# This is a string with spaces
# This is a string with spaces"
177,Write a Python program to compute the average of n,"import itertools as it
nums = [[0, 1, 2],
       [2, 3, 4],
       [3, 4, 5, 6],
       [7, 8, 9, 10, 11],
       [12, 13, 14]]

print(""Original list:"")
print(nums)
def get_avg(x):
    x = [i for i in x if i is not None]
    return sum(x, 0.0) / len(x)
result = map(get_avg, it.zip_longest(*nums))
print(""\nAverage of n-th elements in the said list of lists with different lengths:"")
print(list(result))
","def solution(n):
    return n/2

def main():
    n = int(input())
    print(solution(n))

if __name__ == ""__main__"":
    main()"
178,Write a Python program to find the details of a given zip code using Nominatim API and GeoPy package. ,"from geopy.geocoders import Nominatim
geolocator = Nominatim(user_agent=""geoapiExercises"")
zipcode1 = ""99501""
print(""\nZipcode:"",zipcode1)
location = geolocator.geocode(zipcode1)
print(""Details of the said pincode:"")
print(location.address) 
zipcode2 = ""CA9 3HX""
print(""\nZipcode:"",zipcode2)
location = geolocator.geocode(zipcode2)
print(""Details of the said pincode:"")
print(location.address) 
zipcode3 = ""61000""
print(""\nZipcode:"",zipcode3)
location = geolocator.geocode(zipcode3)
print(""Details of the said pincode:"")
print(location.address) 
zipcode4 = ""713101""
print(""\nZipcode:"",zipcode4)
location = geolocator.geocode(zipcode4)
print(""Details of the said pincode:"")
print(location.address)
","1. Create a function named geocode_zipcode() that takes the zip code as an argument and returns the latitude and longitude of the given zip code.

2. Create a function named geocode_address() that takes the address as an argument and returns the latitude and longitude of the given address.

3. Create a function named geocode_address_to_coordinates() that takes the address as an argument and returns the latitude and longitude of the given"
179,Write a NumPy program to insert a space between characters of all the elements of a given array. ,"import numpy as np
x = np.array(['python exercises', 'PHP', 'java', 'C++'], dtype=np.str)
print(""Original Array:"")
print(x)
r = np.char.join("" "", x)
print(r)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr_space = np.insert(arr, 5,'')

print(arr_space)

# Output:
# [1 2 3 4 5 6 7 8 9 10]
# [1 2 3 4 5 6 7 8 9 10]
# [1 2 3 4 5 6 7 8 9 10]
#"
180,Write a Python program to merge some list items in given list using index value. ,"def merge_some_chars(lst,merge_from,merge_to):
    result = lst
    result[merge_from:merge_to] = [''.join(result[merge_from:merge_to])]    
    return result    
chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
print(""Original lists:"")
print(chars)
merge_from = 2
merge_to = 4
print(""\nMerge items from"",merge_from,""to"",merge_to,""in the said List:"")
print(merge_some_chars(chars,merge_from,merge_to))
chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
merge_from = 3
merge_to = 7
print(""\nMerge items from"",merge_from,""to"",merge_to,""in the said List:"")
print(merge_some_chars(chars,merge_from,merge_to))
","def merge_list(list1, list2):
    list1.extend(list2)
    return list1

list1 = [1, 2, 3, 4, 5]
list2 = [6, 7, 8, 9, 10]

print(merge_list(list1, list2))

# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Output: [1, 2, 3,"
181,Write a Python function to check whether a number is perfect or not. ,"def perfect_number(n):
    sum = 0
    for x in range(1, n):
        if n % x == 0:
            sum += x
    return sum == n
print(perfect_number(6))
","def is_perfect(n):
    if n == 1:
        return True
    elif n % 2 == 0:
        return False
    else:
        return is_perfect(n // 2)

print(is_perfect(5))

""""""

def is_perfect(n):
    if n == 1:
        return True
    elif n % 2 == 0:
        return False
    else:
        return is_perfect(n // 2)

print("
182,"Write a Pandas program to split a given dataset, group by two columns and convert other columns of the dataframe into a dictionary with column header as key. ","import pandas as pd
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])
print(""Original DataFrame:"")
print(df)
dict_data_list = list()

for gg, dd in df.groupby(['school_code','class']):
    group = dict(zip(['school_code','class'], gg))
    ocolumns_list = list()
    for _, data in dd.iterrows():
        data = data.drop(labels=['school_code','class'])
        ocolumns_list.append(data.to_dict())
    group['other_columns'] = ocolumns_list
    dict_data_list.append(group)

print(dict_data_list) 
","import pandas as pd

# Read the data into a pandas dataframe
df = pd.read_csv(""data.csv"")

# Create a dictionary to group the data by two columns
grouped = df.groupby(['gender', 'age'])

# Create a dictionary to convert the data into a dictionary
converted = grouped.agg({""height"": ""mean"", ""weight"": ""mean""})"
183,Write a Python program to find the most common elements and their counts of a specified text. ,"from collections import Counter
s = 'lkseropewdssafsdfafkpwe'
print(""Original string: ""+s)
print(""Most common three characters of the said string:"")
print(Counter(s).most_common(3))
","import collections

def most_common(text):
    # create a dictionary to store the count of each character
    counts = collections.Counter(text)
    # sort the dictionary by the values
    counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)
    # return the top 10 most common characters
    return counts[:10]

print(most_common('abcdefghijklmnopqrstuvwxyz"
184,Write a NumPy program to round array elements to the given number of decimals. ,"import numpy as np
x = np.round([1.45, 1.50, 1.55])
print(x)
x = np.round([0.28, .50, .64], decimals=1)
print(x)
x = np.round([.5, 1.5, 2.5, 3.5, 4.5]) # rounds to nearest even value
print(x)
","import numpy as np

a = np.array([1.5, 2.5, 3.5, 4.5, 5.5])
print(a)
print(np.around(a, decimals=2))

# Output:
[1.5 2.5 3.5 4.5 5.5]
[1.5 2.5 3.5 4.5 5.5]

""""""

import numpy as np

a = np"
185,Write a Pandas program to find the index of the first occurrence of the smallest and largest value of a given series. ,"import pandas as pd
nums = pd.Series([1, 3, 7, 12, 88, 23, 3, 1, 9, 0])
print(""Original Series:"")
print(nums)
print(""Index of the first occurrence of the smallest and largest value of the said series:"")
print(nums.idxmin())
print(nums.idxmax())
","import pandas as pd

# Read the data from the file
df = pd.read_csv(""data.csv"")

# Create a new column called ""smallest""
df[""smallest""] = df[""smallest""].astype(str)

# Create a new column called ""largest""
df[""largest""] = df[""largest""].astype(str)

# Create a new column called ""smallest""
df[""smallest"
186,Write a NumPy program to generate a random number between 0 and 1. ,"import numpy as np
rand_num = np.random.normal(0,1,1)
print(""Random number between 0 and 1:"")
print(rand_num)
","import random

def random_number():
    return random.random()

print(random_number())

""""""

# Solution

import random

def random_number():
    return random.random()

print(random_number())

""""""

# Solution

import random

def random_number():
    return random.random()

print(random_number())

""""""

# Solution

import random

def random_number():
    return random"
187,Write a Python program to count number of unique sublists within a given list. ,"def unique_sublists(input_list):
    result ={}
    for l in input_list: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result

list1 = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] 
print(""Original list:"")
print(list1)  
print(""Number of unique lists of the said list:"")
print(unique_sublists(list1)) 

color1 = [[""green"", ""orange""], [""black""], [""green"", ""orange""], [""white""]]
print(""\nOriginal list:"")
print(color1)  
print(""Number of unique lists of the said list:"")
print(unique_sublists(color1))
","def unique_sublists(lst):
    # Your code here
    # return len(set(lst))
    return len(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(unique_sublists(lst))

# Output:
# 5
# 5
# 5
# 5
# 5
# 5
# 5
# 5
# 5
# 5
# 5
#"
188,Write a Python program to calculate the time runs (difference between start and current time) of a program. ,"from timeit import default_timer
def timer(n):
    start = default_timer()
    # some code here
    for row in range(0,n):
        print(row)
    print(default_timer() - start)

timer(5)
timer(15)
","def time_calc(func):
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        print(f""{func.__name__} took {end - start} seconds"")
        return result
    return wrapper

@time_calc
def time_calc(func):
    def wrapper(*args, **kwargs):"
189,Write a Python program to concatenate element-wise three given lists. ,"def concatenate_lists(l1,l2,l3):
    return [i + j + k for i, j, k in zip(l1, l2, l3)]
    
l1 = ['0','1','2','3','4'] 
l2 = ['red','green','black','blue','white']
l3 = ['100','200','300','400','500'] 

print(""Original lists:"")
print(l1)
print(l2)
print(l3)
print(""\nConcatenate element-wise three said lists:"")
print(concatenate_lists(l1,l2,l3))
","def concatenate(list1, list2, list3):
    return list1 + list2 + list3

print(concatenate([1, 2, 3], [4, 5, 6], [7, 8, 9]))

""""""

def concatenate(list1, list2, list3):
    return list1 + list2 + list3

print(concatenate([1, 2, 3], [4, 5, 6], [7, 8,"
190,Write a Python program to delete a specific row from a given SQLite table. ,"import sqlite3
from sqlite3 import Error
def sql_connection():
   try:
     conn = sqlite3.connect('mydatabase.db')
     return conn
   except Error:
     print(Error)
def sql_table(conn):
   cursorObj = conn.cursor()
# Create the table
   cursorObj.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")
# Insert records
   cursorObj.executescript(""""""
   INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);
   INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);
   INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);
   INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);
   INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);
   """""")   
   cursorObj.execute(""SELECT * FROM salesman"")
   rows = cursorObj.fetchall()
   print(""Agent details:"")
   for row in rows:
       print(row)
   print(""\nDelete Salesman of ID 5003:"")
   s_id = 5003
   cursorObj.execute(""""""
   DELETE FROM salesman
   WHERE salesman_id = ?
   """""", (s_id,))
   conn.commit()
   cursorObj.execute(""SELECT * FROM salesman"")
   rows = cursorObj.fetchall()
   print(""\nAfter updating Agent details:"")
   for row in rows:
       print(row)
sqllite_conn = sql_connection()
sql_table(sqllite_conn)
if (sqllite_conn):
 sqllite_conn.close()
 print(""\nThe SQLite connection is closed."")
","import sqlite3

conn = sqlite3.connect('data.db')
c = conn.cursor()

c.execute('DROP TABLE IF EXISTS data')

c.execute('CREATE TABLE data (id INTEGER, name TEXT, address TEXT, phone_number TEXT, email TEXT)')

c.execute('INSERT INTO data VALUES (1, ""Rajesh"", ""Delhi"", ""09123445566"", ""rajesh@gmail.com"
191,Write a Python program to find the list with maximum and minimum length using lambda. ,"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)
    
def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )  
    min_list = min(input_list, key = lambda i: len(i))
    return(min_length, min_list)
      
list1 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]
print(""Original list:"")
print(list1)
print(""\nList with maximum length of lists:"")
print(max_length_list(list1))
print(""\nList with minimum length of lists:"")
print(min_length_list(list1))
","def solution(lst):
    return max(lst), min(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(lst))

""""""

def solution(lst):
    return max(lst), min(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(l"
192,Write a Python program to convert a given string to camelcase. ,"from re import sub

def camel_case(s):
  s = sub(r""(_|-)+"", "" "", s).title().replace("" "", """")
  return ''.join([s[0].lower(), s[1:]])
print(camel_case('JavaScript'))
print(camel_case('Foo-Bar'))
print(camel_case('foo_bar'))
print(camel_case('--foo.bar'))
print(camel_case('Foo-BAR'))
print(camel_case('fooBAR'))
print(camel_case('foo bar'))
","s = ""hello world""
print(s.capitalize())

""""""

s = ""hello world""
print(s.capitalize())"
193,Write a Python program to find common items from two lists. ,"color1 = ""Red"", ""Green"", ""Orange"", ""White""
color2 = ""Black"", ""Green"", ""White"", ""Pink""
print(set(color1) & set(color2))
","def common_items(list1, list2):
    common_items = []
    for item in list1:
        if item in list2:
            common_items.append(item)
    return common_items

print(common_items([1, 2, 3, 4, 5], [2, 3, 5, 6, 7]))

""""""

def common_items(list1, list2):
    common_items = []
    for item in list1:
        if item"
194,"Write a Python program to create a doubly linked list, append some items and iterate through the list (print forward). ","class Node(object):
    # Doubly linked node
    def __init__(self, data=None, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev

class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, data):
        # Append an item 
        new_item = Node(data, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item

        self.count += 1

    def print_foward(self):
        for node in self.iter():
            print(node)
            
    def iter(self):
        # Iterate the list
        current = self.head
        while current:
            item_val = current.data
            current = current.next
            yield item_val

items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')

print(""Items in the Doubly linked list: "")
items.print_foward()
","def doubly_linked_list(data):
    doubly_linked_list = DoublyLinkedList()
    doubly_linked_list.append(data)
    return doubly_linked_list

# Test
print(doubly_linked_list(1))
print(doubly_linked_list(2))
print(doubly_linked_list(3))
print(doubly_linked_list"
195,Write a NumPy program to rearrange the dimensions of a given array. ,"import numpy as np    
x = np.arange(24).reshape((6,4))
print(""Original arrays:"")
print(x)
new_array = np.transpose(x)
print(""After reverse the dimensions:"")
print(new_array)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a)

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a.shape)

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a."
196,Write a Pandas program to create a series of Timestamps from a DataFrame of integer or string columns. Also create a series of Timestamps using specified columns. ,"import pandas as pd
df = pd.DataFrame({'year': [2018, 2019, 2020],
                   'month': [2, 3, 4],
                   'day': [4, 5, 6],
                   'hour': [2, 3, 4]})
print(""Original dataframe:"")
print(df)
result = pd.to_datetime(df)
print(""\nSeries of Timestamps from the said dataframe:"")
print(result)
print(""\nSeries of Timestamps using specified columns:"")
print(pd.to_datetime(df[['year', 'month', 'day']]))
","import pandas as pd
import datetime as dt

# Create a DataFrame
df = pd.DataFrame({'Timestamp': [dt.datetime(2021, 1, 1), dt.datetime(2021, 1, 2), dt.datetime(2021, 1, 3), dt.datetime(2021, 1, 4), dt.datetime(20"
197,"Write a Python program to create datetime from integers, floats and strings timestamps using arrow module. ","import arrow
i = arrow.get(1857900545)
print(""Date from integers: "")
print(i)
f = arrow.get(1857900545.234323)
print(""\nDate from floats: "")
print(f)
s = arrow.get('1857900545')
print(""\nDate from Strings: "")
print(s)
","import arrow

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp"
198,"Write a Python program to merge two or more lists into a list of lists, combining elements from each of the input lists based on their positions. ","def merge_lists(*args, fill_value = None):
  max_length = max([len(lst) for lst in args])
  result = []
  for i in range(max_length):
    result.append([
      args[k][i] if i < len(args[k]) else fill_value for k in range(len(args))
    ])
  return result
print(""After merging lists into a list of lists:"")
print(merge_lists(['a', 'b'], [1, 2], [True, False]))  
print(merge_lists(['a'], [1, 2], [True, False]))  
print(merge_lists(['a'], [1, 2], [True, False], fill_value = '_'))
","# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

# Solution 11:

# Solution 12:

# Solution 13:

# Solution 14:

# Solution 15:

# Solution 16:

# Solution"
199,Write a NumPy program to stack arrays in sequence horizontally (column wise). ,"import numpy as np    
print(""\nOriginal arrays:"")
x = np.arange(9).reshape(3,3)
y = x*3
print(""Array-1"")
print(x)
print(""Array-2"")
print(y)
new_array =  np.hstack((x,y))
print(""\nStack arrays in sequence horizontally:"")
print(new_array)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a)
print(b)

# Solution:

# a = np.array([[1, 2, 3], [4, 5, 6]])
# b = np.array([[7, 8, 9], [10, 11, 12]]"
200,rite a Python program to find the first repeated word in a given string. ,"def first_repeated_word(str1):
  temp = set()
  for word in str1.split():
    if word in temp:
      return word;
    else:
      temp.add(word)
  return 'None'
print(first_repeated_word(""ab ca bc ab""))
print(first_repeated_word(""ab ca bc ab ca ab bc""))
print(first_repeated_word(""ab ca bc ca ab bc""))
print(first_repeated_word(""ab ca bc""))
","def first_repeated_word(str):
    str = str.lower()
    str = str.replace("" "", """")
    str = str.replace(""."", """")
    str = str.replace("","", """")
    str = str.replace(""!"", """")
    str = str.replace(""?"", """")
    str = str.replace("";"", """")
    str = str.replace(""!"", """")
    str = str.replace(""."", """")
    str ="
201,"Create a dataframe of ten rows, four columns with random values. Convert some values to nan values. Write a Pandas program which will highlight the nan values. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
def color_negative_red(val):
    color = 'red' if val < 0 else 'black'
    return 'color: %s' % color
print(""\nNegative numbers red and positive numbers black:"")
df.style.highlight_null(null_color='red')
","import pandas as pd

df = pd.DataFrame(
    {
        ""col1"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ""col2"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ""col3"": [1, 2, 3, 4, 5, 6, 7,"
202,Write a Python program to generate a number in a specified range except some specific numbers. ,"from random import choice
def generate_random(start_range, end_range, nums):
    result = choice([i for i in range(start_range,end_range) if i not in nums])
    return result
   
start_range = 1
end_range = 10
nums = [2, 9, 10]
print(""\nGenerate a number in a specified range (1, 10) except [2, 9, 10]"")
print(generate_random(start_range,end_range,nums))

start_range = -5
end_range = 5
nums = [-5,0,4,3,2]

print(""\nGenerate a number in a specified range (-5, 5) except [-5,0,4,3,2]"")
print(generate_random(start_range,end_range,nums))
","def solution(n):
    if n == 1:
        return 1
    else:
        return solution(n-1) + solution(n-2)

print(solution(5))

# Output:
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9
# 10
# 11
# 12
# 13
# 14
# 15
# 16
# 17
# 18
# 19
# 20"
203,Write a Python program to add to a tag's contents in a given html document. ,"from bs4 import BeautifulSoup
html_doc = '<a href=""http://example.com/"">HTML<i>w3resource.com</i></a>'
soup = BeautifulSoup(html_doc, ""lxml"")
print(""\nOriginal Markup:"")
print(soup.a)
soup.a.append(""CSS"")
print(""\nAfter append a text in the new link:"")
print(soup.a)
","import html

html_string = '''
<html>
<head>
<title>HTML Solution</title>
</head>
<body>
<p>This is a <b>HTML Solution</b>.</p>
<p>This is a <b>HTML Solution</b>.</p>
<p>This is a <b>HTML Solution</b>.</p>
<p>This is a <b>HTML Solution</b>.</p>
<p"
204,Write a NumPy program to create an array with 10^3 elements. ,"import numpy as np
x = np.arange(1e3)
print(x)
","import numpy as np

arr = np.random.randint(1, 100, 10**3)

arr = np.random.randint(1, 100, 10**3)

arr = np.random.randint(1, 100, 10**3)

arr = np.random.randint(1, 100, 10**3)

arr = np.random.randint(1, 100, 10**3)

arr = np.random.randint(1"
205,Write a NumPy program to suppresses the use of scientific notation for small numbers in NumPy array. ,"import numpy as np
x=np.array([1.6e-10, 1.6, 1200, .235]) 
print(""Original array elements:"")
print(x)
print(""Print array values with precision 3:"")
np.set_printoptions(suppress=True)
print(x)
","import numpy as np

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

np.set_printoptions(suppress=True)

print(x)

# Solution:

# x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
#
# print(x)
#
# # Solution:
#
#"
206,Write a Python program to join adjacent members of a given list. ,"def test(lst):
    result = [x + y for x, y in zip(lst[::2],lst[1::2])]
    return result

nums = ['1','2','3','4','5','6','7','8']
print(""Original list:"")
print(nums)
print(""\nJoin adjacent members of a given list:"")
print(test(nums))

nums = ['1','2','3']
print(""\nOriginal list:"")
print(nums)
print(""\nJoin adjacent members of a given list:"")
print(test(nums))
","def join_adjacent(lst):
    return lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8] + lst[9] + lst[10] + lst[11] + lst[12] + lst[13] + lst[14] + lst[15] + lst[16] +"
207,Write a Python program to compare two unordered lists (not sets). ,"from collections import Counter
def compare_lists(x, y):
    return Counter(x) == Counter(y)
n1 = [20, 10, 30, 10, 20, 30]
n2 = [30, 20, 10, 30, 20, 50]
print(compare_lists(n1, n2))
","def compare_lists(list1, list2):
    if len(list1)!= len(list2):
        return False
    for i in range(len(list1)):
        if list1[i]!= list2[i]:
            return False
    return True

print(compare_lists([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(compare_lists(["
208,Write a Pandas program to get the length of the string present of a given column in a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'skfsalf', 'sdfslew', 'safsdf'],
    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})
print(""Original DataFrame:"")
print(df)
print(""\nLength of the string in a column:"")
df['company_code_length'] = df['company_code'].apply(len)
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Age': [30, 32, 33, 34, 35, 36],
                   'Score': [85, 90, 95, 100, 90, 90]})

print(df['Name'].str.len())

# Output:
# Name:  Rolf
# Age"
209,"Write a Python program to create a new Arrow object, representing the ""floor"" of the timespan of the Arrow object in a given timeframe using arrow module. The timeframe can be any datetime property like day, hour, minute. ","import arrow
print(arrow.utcnow())
print(""Hour ceiling:"")
print(arrow.utcnow().floor('hour'))
print(""\nMinute ceiling:"")
print(arrow.utcnow().floor('minute'))
print(""\nSecond ceiling:"")
print(arrow.utcnow().floor('second'))
","import arrow

# create a new Arrow object
new_arrow = arrow.Arrow(arrow.now())

# create a new timeframe
new_timeframe = arrow.TimeFrame(new_arrow.floor, new_arrow.hour, new_arrow.minute)

# create a new arrow object
new_arrow = arrow.Arrow(arrow."
210,Write a Python program to cast the provided value as a list if it's not one. ,"def cast_list(val):
  return list(val) if isinstance(val, (tuple, list, set, dict)) else [val]
d1 = [1]
print(type(d1))
print(cast_list(d1)) 
d2 = ('Red', 'Green')
print(type(d2))
print(cast_list(d2)) 
d3 = {'Red', 'Green'}
print(type(d3))
print(cast_list(d3))
d4 = {1: 'Red', 2: 'Green', 3: 'Black'}
print(type(d4))
print(cast_list(d4))
","def solution(x):
    if type(x)!= list:
        return [x]
    else:
        return x

print(solution([1, 2, 3]))

""""""

def solution(x):
    if type(x)!= list:
        return [x]
    else:
        return x

print(solution([1, 2, 3]))

""""""

def solution(x):
    if type(x)!="
211,Write a Python program to convert a list of dictionaries into a list of values corresponding to the specified key. ,"def test(lsts, key):
  return [x.get(key) for x in lsts]
 
students = [
  { 'name': 'Theodore', 'age': 18 },
  { 'name': 'Mathew', 'age': 22 },
  { 'name': 'Roxanne', 'age': 20 },
  { 'name': 'David', 'age': 18 }
]

print(""Original list of dictionaries:"")
print(students)
print(""\nConvert a list of dictionaries into a list of values corresponding to the specified key:"")
print(test(students, 'age'))
","def solution(dict_list):
    # Your code here
    return [dict_list[i]['name'] for i in range(len(dict_list))]

print(solution([{'name': 'John', 'age': 30}, {'name': 'Bob', 'age': 20}, {'name': 'Jack', 'age': 25}]))

""""""

def solution(dict_list):
    # Your code here
    return ["
212,Write a Python program to get the factorial of a non-negative integer. ,"def factorial(n):
  if n <= 1:
    return 1
  else:
    return n * (factorial(n - 1))
    
print(factorial(5))
","def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

print(factorial(5))

""""""

# Solution:

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

print(factorial(5))"
213,"Write a Pandas program to create a Pivot table and find survival rate by gender, age wise of various classes. ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result  =  df.pivot_table('survived', index=['sex','age'], columns='class')
print(result)
","import pandas as pd
import numpy as np

df = pd.read_csv(""https://github.com/jbrownlee/Datasets/blob/master/iris.csv"")

# Create a pivot table
pivot = df.pivot_table(index=""class"", columns=""gender"", values=""petal_length"", aggfunc=""mean"")

# Find survival rate by gender
pivot[""Survived""] = pivot[""pet"
214,"Write a NumPy program to compute xy, element-wise where x, y are two given arrays. ","import numpy as np
x = np.array([[1, 2], [3, 4]])
y = np.array([[1, 2], [1, 2]])
print(""Array1: "")
print(x)
print(""Array1: "")
print(y)
print(""Result- x^y:"")
r1 = np.power(x, y)
print(r1)
","x = np.array([[1, 2, 3], [4, 5, 6]])
y = np.array([[7, 8, 9], [10, 11, 12]])

x.shape

x.ndim

x.size

x.dtype

x.itemsize

x.nbytes

x.shape

x.ndim

x.size

x.dtype

x.itemsize"
215,Write a Python program to search the country name from given state name using Nominatim API and GeoPy package. ,"from geopy.geocoders import Nominatim
geolocator = Nominatim(user_agent=""geoapiExercises"")
state1 = ""Uttar Pradesh""
print(""State Name:"",state1)
location = geolocator.geocode(state1)
print(""State Name/Country Name: "")
print(location.address)
state2 = "" Illinois""
print(""\nState Name:"",state2)
location = geolocator.geocode(state2)
print(""State Name/Country Name: "")
print(location.address)
state3 = ""Normandy""
print(""\nState Name:"",state3)
location = geolocator.geocode(state3)
print(""State Name/Country Name: "")
print(location.address) 
state4 = ""Jerusalem District""
print(""\nState Name:"",state4)
location = geolocator.geocode(state4)
print(""State Name/Country Name: "")
print(location.address)
","import geopy.geocoders
from geopy.geocoders import Nominatim

# Enter the state name:
state = input(""Enter the state name: "")

# Enter the country name:
country = input(""Enter the country name: "")

# Create a geolocator object:
geolocator = Nominatim(user_agent=""myGeoPy"")

# Create a geocoder object:"
216,Write a Python program to append items from a specified list. ,"from array import *
num_list = [1, 2, 6, -8]
array_num = array('i', [])
print(""Items in the list: "" + str(num_list))
print(""Append items from the list: "")
array_num.fromlist(num_list)
print(""Items in the array: ""+str(array_num))
","def append_items(items, new_items):
    """"""Append items to the list.""""""
    items.extend(new_items)
    return items

print(append_items([1, 2, 3], [4, 5, 6]))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
217,Write a NumPy program to create an array of the integers from 30 to70. ,"import numpy as np
array=np.arange(30,71)
print(""Array of the integers from 30 to70"")
print(array)
","import numpy as np

arr = np.arange(30, 71)

print(arr)

# Solution:

# arr = np.arange(30, 71)
# arr = arr.reshape(5, 5)
# print(arr)

# Solution:

# arr = np.arange(30, 71)
# arr = arr.reshape(5, 5)
# print(arr)

# Solution:

# arr ="
218,Write a Python function to check whether a number is divisible by another number. Accept two integers values form the user. ,"def multiple(m, n):
	return True if m % n == 0 else False

print(multiple(20, 5))
print(multiple(7, 2))
","def divisible(num1, num2):
    if num1 % num2 == 0:
        return True
    else:
        return False

print(divisible(12, 6))

""""""

def divisible(num1, num2):
    if num1 % num2 == 0:
        return True
    else:
        return False

print(divisible(12, 6))

""""""

def divisible(num"
219,Write a NumPy program to generate a matrix product of two arrays. ,"import numpy as np
x = [[1, 0], [1, 1]]
y = [[3, 1], [2, 2]]
print(""Matrices and vectors."")
print(""x:"")
print(x)
print(""y:"")
print(y)
print(""Matrix product of above two arrays:"")
print(np.matmul(x, y))
","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6]])
B = np.array([[7, 8, 9], [10, 11, 12]])

C = np.dot(A, B)

print(C)

""""""

# Solution

import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6]])
B = np.array([["
220,Write a NumPy program to find elements within range from a given array of numbers. ,"import numpy as np
a = np.array([1, 3, 7, 9, 10, 13, 14, 17, 29])
print(""Original array:"")
print(a)
result = np.where(np.logical_and(a>=7, a<=20))
print(""\nElements within range: index position"")
print(result)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr[arr>5])

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr[arr>5])

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
221,Write a Pandas program to find which years have all non-zero values and which years have any non-zero values from world alcohol consumption dataset. ,"import pandas as pd 

# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nFind which years have all non-zero values:"")
print(w_a_con.loc[:,w_a_con.all()])
print(""\nFind which years have any non-zero values:"")
print(w_a_con.loc[:,w_a_con.any()])
","import pandas as pd

df = pd.read_csv('world_alcohol_consumption.csv')

df.head()

df.isnull().sum()

df.isnull().sum().sum()

df.isnull().sum().sum()

df.isnull().sum().sum()

df.isnull().sum().sum()

df.isnull().sum().sum()"
222,Write a Pandas program to generate sequences of fixed-frequency dates and time spans intervals. ,"import pandas as pd
print(""Sequences of fixed-frequency dates and time spans (1 H):\n"")
r1 = pd.date_range('2030-01-01', periods=10, freq='H')
print(r1)
print(""\nSequences of fixed-frequency dates and time spans (3 H):\n"")
r2 = pd.date_range('2030-01-01', periods=10, freq='3H')
print(r2)
","import pandas as pd

# Create a dataframe with the following columns:
# Date, Time, Duration
#
# Create a dataframe with the following columns:
# Date, Time, Duration
#
# Create a dataframe with the following columns:
# Date, Time, Duration
#
# Create a dataframe with the following columns:
# Date, Time, Duration
#
# Create a dataframe with the following columns:
# Date, Time, Duration
#
#"
223,Write a Python program to display a number with a comma separator. ,"x = 3000000
y = 30000000
print(""\nOriginal Number: "", x)
print(""Formatted Number with comma separator: ""+""{:,}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number with comma separator: ""+""{:,}"".format(y));
print()
",">>> import math
>>> print(math.ceil(5.6))
5
>>> print(math.floor(5.6))
5
>>> print(math.sqrt(5))
1.0
>>> print(math.factorial(5))
120
>>> print(math.factorial(5, 2))
120
>>> print(math.factorial(5, 3))
120
>>> print(math.factorial(5, 4))
120
>>> print(math.factorial"
224,"Write a NumPy program to convert a given list into an array, then again convert it into a list. Check initial list and final list are equal or not. ","import numpy as np
a = [[1, 2], [3, 4]]
x = np.array(a)
a2 = x.tolist()
print(a == a2)
","import numpy as np

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
arr = np.array(lst)
print(arr)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
arr = np.array(lst, dtype=np.int64)
print(arr"
225,Write a Python program to reverse a string. ,"def string_reverse(str1):

    rstr1 = ''
    index = len(str1)
    while index > 0:
        rstr1 += str1[ index - 1 ]
        index = index - 1
    return rstr1
print(string_reverse('1234abcd'))
","def reverse_string(string):
    return string[::-1]

print(reverse_string(""hello""))

""""""

def reverse_string(string):
    return string[::-1]

print(reverse_string(""hello""))"
226,Write a Pandas program to find integer index of rows with missing data in a given dataframe. ,"import pandas as pd
import numpy as np
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, None, 33, 30, 31, None]},
     index = ['t1', 't2', 't3', 't4', 't5', 't6'])
print(""Original DataFrame:"")
print(df)
index = df['weight'].index[df['weight'].apply(np.isnan)]
df_index = df.index.values.tolist()
print(""\nInteger index of rows with missing data in 'weight' column of the said dataframe:"")
print([df_index.index(i) for i in index])
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [1, 2, 3, 4, 5]})
print(df.isnull().sum())

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [1, 2, 3, 4, 5]})
# print"
227,Write a Python program to combine each line from first file with the corresponding line in second file. ,"with open('abc.txt') as fh1, open('test.txt') as fh2:
    for line1, line2 in zip(fh1, fh2):
        # line1 from abc.txt, line2 from test.txtg
        print(line1+line2)
		","python solution.py first.txt second.txt

""""""

import sys

def read_file(filename):
    """"""Read the file and return a list of lines""""""
    try:
        with open(filename, 'r') as f:
            return f.readlines()
    except IOError:
        print (""Error: Can't find the file"", filename)
        sys.exit()

def write_file(filename, lines):
    """"""Write the file with"
228,Write a Python program to pair up the consecutive elements of a given list. ,"def pair_consecutive_elements(lst):
    result = [[lst[i], lst[i + 1]] for i in range(len(lst) - 1)]
    return result
nums =  [1,2,3,4,5,6]
print(""Original lists:"")
print(nums)
print(""Pair up the consecutive elements of the said list:"")
print(pair_consecutive_elements(nums))
nums =  [1,2,3,4,5]
print(""\nOriginal lists:"")
print(nums)
print(""Pair up the consecutive elements of the said list:"")
print(pair_consecutive_elements(nums))
","def pair_up(lst):
    for i in range(len(lst)):
        if i == 0:
            lst[i], lst[i+1] = lst[i+1], lst[i]
        else:
            lst[i], lst[i-1] = lst[i-1], lst[i]
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8"
229,Write a Pandas program to create a Pivot table and find survival of both gender and class affected. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.groupby(['sex', 'class'])['survived'].aggregate('mean').unstack()
print(result)
","# Create a Pandas dataframe
df = pd.DataFrame({'Gender': ['Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male',"
230,Write a Python program to find the maximum and minimum product from the pairs of tuple within a given list. ,"def tuple_max_val(nums):
    result_max = max([abs(x * y) for x, y in nums] )
    result_min = min([abs(x * y) for x, y in nums] )
    return result_max,result_min
nums = [(2, 7), (2, 6), (1, 8), (4, 9)]   
print(""The original list, tuple : "") 
print(nums)
print(""\nMaximum and minimum product from the pairs of the said tuple of list:"")
print(tuple_max_val(nums)) 
","def max_min_product(list):
    max_product = 0
    min_product = 0
    for i in range(len(list)):
        for j in range(i+1, len(list)):
            product = list[i][0] * list[j][0]
            if product > max_product:
                max_product = product
            if product < min_product:
                min_product = product
    return max_product"
231,Write a Python program to interleave multiple lists of the same length. Use itertools module. ,"import itertools

def interleave_multiple_lists(list1,list2,list3):
    result = list(itertools.chain(*zip(list1, list2, list3)))
    return result
     
list1 = [100,200,300,400,500,600,700]
list2 = [10,20,30,40,50,60,70]
list3 = [1,2,3,4,5,6,7]
print(""Original list:"")
print(""list1:"",list1)
print(""list2:"",list2)
print(""list3:"",list3)
print(""\nInterleave multiple lists:"")
print(interleave_multiple_lists(list1,list2,list3))
",">>> from itertools import combinations
>>> l1 = [1, 2, 3, 4, 5]
>>> l2 = [1, 2, 3, 4, 5, 6]
>>> l3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>> l4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,"
232,"Write a NumPy program to extract rows with unequal values (e.g. [1,1,2]) from 10x3 matrix. ","import numpy as np
nums = np.random.randint(0,4,(6,3))
print(""Original vector:"")
print(nums)
new_nums = np.logical_and.reduce(nums[:,1:] == nums[:,:-1], axis=1)
result = nums[~new_nums]
print(""\nRows with unequal values:"")
print(result)
","import numpy as np

matrix = np.array([[1,1,2],[2,3,4],[4,5,6]])

print(matrix[0][1])

# Output: 2

print(matrix[0,1])

# Output: 2

print(matrix[0,2])

# Output: 4

print(matrix[1,2])"
233,Write a Python script that takes input from the user and displays that input back in upper and lower cases. ,"user_input = input(""What's your favourite language? "")
print(""My favourite language is "", user_input.upper())
print(""My favourite language is "", user_input.lower())
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution"
234,Write a Python program to find the siblings of tags in a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
<a class=""sister"" href=""http://example.com/lacie"" id=""link1"">Lacie</a>
<a class=""sister"" href=""http://example.com/tillie""  id=""link2"">Tillie</a>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc,""lxml"")
print(""\nSiblings of tags:"")
print(soup.select(""#link1 ~ .sister""))
print(soup.select(""#link1 + .sister""))
","import re

html = '''
<html>
<head>
<title>HTML Test</title>
</head>
<body>
<p>This is a test</p>
<p>This is a test</p>
<p>This is a test</p>
<p>This is a test</p>
<p>This is a test</p>
<p>This is a test</p>
<p>This is a test</p>"
235,Write a Python program to extract and display all the image links from en.wikipedia.org/wiki/Peter_Jeffrey_(RAAF_officer). ,"import requests
r = requests.get(""https://analytics.usa.gov/data/live/browsers.json"")
print(""90 days of visits broken down by browser for all sites:"")
print(r.json()['totals']['browser'])
","import urllib.request
import urllib.parse
import urllib.error

def get_url(url):
    try:
        req = urllib.request.Request(url)
        response = urllib.request.urlopen(req)
        return response.read()
    except urllib.error.URLError as e:
        if hasattr(e, 'code"
236,Write a NumPy program to add a new row to an empty NumPy array. ,"import numpy as np    
arr = np.empty((0,3), int)
print(""Empty array:"")
print(arr)
arr = np.append(arr, np.array([[10,20,30]]), axis=0)
arr = np.append(arr, np.array([[40,50,60]]), axis=0)
print(""After adding two new arrays:"")
print(arr)
","import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6]])
arr = np.append(arr, [[7, 8, 9]], axis=0)
print(arr)

arr = np.array([[1, 2, 3], [4, 5, 6]])
arr = np.append(arr, [[7, 8, 9]], axis=0)
print(arr)

arr = np.array"
237,Write a Python program to find the href of the first <a> tag of a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc, 'html.parser')
print(""href of the first <a> tag:"")
print(soup.find('a').attrs['href'])

","import re

html = """"""
<html>
<head>
<title>First Head Title</title>
</head>
<body>
<p>First Head Title</p>
<p>Second Head Title</p>
<p>Third Head Title</p>
</body>
</html>
""""""

# Solution:

# regex = re.compile(r'<a href=""(.*?)"">')
# result = regex.find"
238,Write a Python program to convert an integer to binary keep leading zeros. ,"x = 12
print(format(x, '08b'))
print(format(x, '010b'))
","def convert_to_binary(num):
    binary = ''
    while num > 0:
        binary = str(num % 2) + binary
        num = num // 2
    return binary

print(convert_to_binary(5))

""""""

def convert_to_binary(num):
    binary = ''
    while num > 0:
        binary = str(num % 2) + binary
        num = num // 2
    return binary

print(convert"
239,Write a Python program to reverse strings in a given list of string values using lambda. ,"def reverse_strings_list(string_list):
    result = list(map(lambda x: """".join(reversed(x)), string_list))
    return result

colors_list = [""Red"", ""Green"", ""Blue"", ""White"", ""Black""]
print(""\nOriginal lists:"")
print(colors_list)
print(""\nReverse strings of the said given list:"")
print(reverse_strings_list(colors_list))
","def reverse_string(string):
    return string[::-1]

print(reverse_string(['a', 'b', 'c', 'd', 'e', 'f']))

""""""

def reverse_string(string):
    return string[::-1]

print(reverse_string(['a', 'b', 'c', 'd', 'e', 'f']))"
240,Write a NumPy program to count the frequency of unique values in NumPy array. ,"import numpy as np
a = np.array( [10,10,20,10,20,20,20,30, 30,50,40,40] )
print(""Original array:"")
print(a)
unique_elements, counts_elements = np.unique(a, return_counts=True)
print(""Frequency of unique values of the said array:"")
print(np.asarray((unique_elements, counts_elements)))
","import numpy as np

arr = np.array([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16"
241,"Write a NumPy program to calculate the difference between neighboring elements, element-wise, and prepend [0, 0] and append[200] to a given array. ","import numpy as np
x = np.array([1, 3, 5, 7, 0])
print(""Original array: "")
print(x)
r1 = np.ediff1d(x, to_begin=[0, 0], to_end=[200])
r2 = np.insert(np.append(np.diff(x), 200), 0, [0, 0])
assert np.array_equiv(r1, r2)
print(""Difference between neighboring elements, element-wise, and prepend [0, 0] and append[200] to the said array:"")
print(r2)
","import numpy as np

arr = np.array([[1, 2, 3, 4, 5],
                [6, 7, 8, 9, 10],
                [11, 12, 13, 14, 15],
                [16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25]])

print(arr)

diff = arr[1:4"
242,Write a Python program to calculate the area of the sector. ,"def sectorarea():
    pi=22/7
    radius = float(input('Radius of Circle: '))
    angle = float(input('angle measure: '))
    if angle >= 360:
        print(""Angle is not possible"")
        return
    sur_area = (pi*radius**2) * (angle/360)
    print(""Sector Area: "", sur_area)

sectorarea()
","def area(r, r1, r2, r3):
    return (r * (r1 + r2 + r3)) / 2

r = float(input(""Enter the radius of the sector: ""))
r1 = float(input(""Enter the radius of the first sector: ""))
r2 = float(input(""Enter the radius of the second sector: ""))
r3 = float(input(""Enter the radius of the third sector: ""))
print(""The area of the sector is: "", area"
243,"Write a NumPy program to print the full NumPy array, without truncation. ","import numpy as np
import sys
nums = np.arange(2000)
np.set_printoptions(threshold=sys.maxsize)
print(nums)
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(a)

# Solution:

# a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
# print(a)

# Solution:

# a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9,"
244,Write a Python program to extract all the text from a given web page. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""Text from the said page:"")
print(soup.get_text())

","import urllib.request
import re

url = ""http://py4e-data.dr-chuck.net/known_by_Fikri.html""
html = urllib.request.urlopen(url).read()

print(html)

# Extract the text from the URL

text = re.findall(r'<p>(.*?)</p>', html)

print(text)"
245,Write a Python program to convert given a dictionary to a list of tuples. ,"def test(d):
  return list(d.items())
 
d = {'Red': 1, 'Green': 3, 'White': 5, 'Black': 2, 'Pink': 4}
print(""Original Dictionary:"")
print(d)
print(""\nConvert the said dictionary to a list of tuples:"")
print(test(d))
","d = {'a': 1, 'b': 2, 'c': 3}

l = []
for i in d:
    l.append((i, d[i]))

print(l)

# Output:
# [('a', 1), ('b', 2), ('c', 3)]

# Hint:
# Use the dictionary keys() method to get the keys in the dictionary.
# Use the values() method to get the values in the dictionary.
# Use"
246,Write a Pandas program to select rows by filtering on one or more column(s) in a multi-index dataframe. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 37, 33, 30, 31, 32],
    'tcode': ['t1', 't2', 't3', 't4', 't5', 't6']})    
print(""Original DataFrame:"")
print(df)
print(""\nCreate MultiIndex on 'tcode' and 'school_code':"")
df = df.set_index(['tcode', 'school_code'])
print(df)
print(""\nSelect rows(s) from 'tcode' column:"")
print(df.query(""tcode == 't2'""))
print(""\nSelect rows(s) from 'school_code' column:"")
print(df.query(""school_code == 's001'""))
print(""\nSelect rows(s) from 'tcode' and 'scode' columns:"")
print(df.query((""tcode == 't1'"") and (""school_code == 's001'"")))
","import pandas as pd

# Create a dataframe
df = pd.DataFrame(
    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]],
    index=['a', 'b', 'c', 'd'],
    columns=['one', 'two', 'three', 'four']
)

# Create a new dataframe with only the rows that"
247,Write a Python program to find smallest and largest word in a given string. ,"def smallest_largest_words(str1):
    word = """";
    all_words = [];
    str1 = str1 + "" "";
    for i in range(0, len(str1)):
        if(str1[i] != ' '):
            word = word + str1[i];  
        else:
            all_words.append(word);  
            word = """";  
          
    small = large = all_words[0];  
   
#Find smallest and largest word in the str1  
    for k in range(0, len(all_words)):
        if(len(small) > len(all_words[k])):
            small = all_words[k];
        if(len(large) < len(all_words[k])):
            large = all_words[k];
    return small,large;

str1 = ""Write a Java program to sort an array of given integers using Quick sort Algorithm."";  
print(""Original Strings:\n"",str1)
small, large = smallest_largest_words(str1)  
print(""Smallest word: "" + small);  
print(""Largest word: "" + large); 
","def smallest_word(string):
    word = string.split()
    smallest = word[0]
    largest = word[-1]
    return smallest, largest

print(smallest_word(""The quick brown fox jumps over the lazy dog""))

""""""

def smallest_word(string):
    word = string.split()
    smallest = word[0]
    largest = word[-1]
    return smallest, largest

print(smallest_word(""The"
248,Write a Python program to find the length of a given dictionary values. ,"def test(dictt):
    result = {}
    for val in dictt.values(): 
        result[val] = len(val) 
    return result    

color_dict = {1 : 'red', 2 : 'green', 3 : 'black', 4 : 'white', 5 : 'black'}
print(""\nOriginal Dictionary:"")
print(color_dict)
print(""Length of dictionary values:"")
print(test(color_dict))

color_dict = {'1' : 'Austin Little', '2' : 'Natasha Howard', '3' : 'Alfred Mullins', '4' : 'Jamie Rowe'}
print(""\nOriginal Dictionary:"")
print(color_dict)
print(""Length of dictionary values:"")
print(test(color_dict))
","def length_of_dictionary(dictionary):
    return len(dictionary)

dictionary = {
    ""brand"": ""Ford"",
    ""model"": ""Mustang"",
    ""year"": 1964
}

print(length_of_dictionary(dictionary))

""""""

# Solution:

def length_of_dictionary(dictionary):
    return len(dictionary)

dictionary = {
    ""brand"": ""Ford"",
    ""model"": """
249,"Write a Python program to extract year, month and date value from current datetime using arrow module. ","import arrow
a = arrow.utcnow()
print(""Year:"")
print(a.year)
print(""\nMonth:"")
print(a.month)
print(""\nDate:"")
print(a.day)
","import arrow

current_date = arrow.now()
print(current_date.year)
print(current_date.month)
print(current_date.day)

# Solution:

import arrow

current_date = arrow.now()
print(current_date.year)
print(current_date.month)
print(current_date.day)

# Solution:

import arrow

current_date = arrow.now()
print("
250,Write a Pandas program to extract words starting with capital words from a given column of a given DataFrame. ,"import pandas as pd
import re as re
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],
    'address': ['9910 Surrey Avenue','92 N. Bishop Avenue','9910 Golden Star Avenue', '102 Dunbar St.', '17 West Livingston Court']
})

print(""Original DataFrame:"")
print(df)

def find_capital_word(str1):
    result = re.findall(r'\b[A-Z]\w+', str1)
    return result

df['caps_word_in']=df['address'].apply(lambda cw : find_capital_word(cw))
print(""\nExtract words starting with capital words from the sentences':"")
print(df)
","import pandas as pd

# Read the data into a DataFrame
df = pd.read_csv('/Users/srinivasan/Desktop/Python/data/data.csv')

# Create a list of words
words = df['text'].str.split(' ', expand=True)

# Extract the first word of each row
words = words.iloc[:, 0]

# Print the first word of each row
print(words)"
251,Write a Python program to join one or more path components together and split a given path in directory and file. ,"import os
path = r'g:\\testpath\\a.txt'
print(""Original path:"")
print(path)
print(""\nDir and file name of the said path:"")
print(os.path.split(path))
print(""\nJoin one or more path components together:"")
print(os.path.join(r'g:\\testpath\\','a.txt'))
","import os

# Create a directory
os.mkdir(""C:\\Users\\srin\\Desktop\\Python\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects"
252,"Write a Python program to randomize the order of the values of an list, returning a new list. ","from copy import deepcopy
from random import randint
def shuffle_list(lst):
  temp_lst = deepcopy(lst)
  m = len(temp_lst)
  while (m):
    m -= 1
    i = randint(0, m)
    temp_lst[m], temp_lst[i] = temp_lst[i], temp_lst[m]
  return temp_lst
nums = [1, 2, 3, 4, 5, 6]
print(""Original list: "",nums)
print(""\nShuffle the elements of the said list:"")
print(shuffle_list(nums))
","import random

def randomize(lst):
    random.shuffle(lst)
    return lst

print(randomize([1,2,3,4,5,6,7,8,9,10]))

# OUTPUT: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# OUTPUT: [1, 2, 3, 4, 5, 6, 7, 8, 9,"
253,Write a Python program to count the same pair in three given lists. ,"def count_same_pair(nums1, nums2, nums3):
    result = sum(m == n == o for m, n, o in zip(nums1, nums2, nums3))
    return result
nums1 = [1,2,3,4,5,6,7,8]
nums2 = [2,2,3,1,2,6,7,9]
nums3 = [2,1,3,1,2,6,7,9]
print(""Original lists:"")
print(nums1)
print(nums2)
print(nums3)
print(""\nNumber of same pair of the said three given lists:"")
print(count_same_pair(nums1, nums2, nums3))
","def count_same_pair(list1, list2):
    count = 0
    for i in range(len(list1)):
        for j in range(len(list2)):
            if list1[i] == list2[j]:
                count += 1
    return count

print(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8"
254,Write a Pandas program to create a Pivot table with multiple indexes from the data set of titanic.csv. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = pd.pivot_table(df, index = [""sex"",""age""], aggfunc=np.sum)
print(result)
","import pandas as pd
import numpy as np

titanic = pd.read_csv('titanic.csv')

# Create a pivot table with multiple columns
pivot = titanic.pivot_table(index='Sex', columns='Pclass', values='Survived')

# Print the pivot table
print(pivot)

# Create a pivot table with multiple rows
pivot = titanic.pivot_table(index"
255,Write a Python program to get the volume of a sphere with radius 6.,"
pi = 3.1415926535897931
r= 6.0
V= 4.0/3.0*pi* r**3
print('The volume of the sphere is: ',V)
","import math

radius = 6
volume = math.pi * (radius ** 3)
print(volume)

""""""

import math

radius = 6
volume = math.pi * (radius ** 3)
print(volume)"
256,"Write a Python program to traverse a given list in reverse order, also print the elements with original index. ","color = [""red"", ""green"", ""white"", ""black""]
print(""Original list:"")
print(color)
print(""\nTraverse the said list in reverse order:"")
for i in reversed(color):
    print(i)
print(""\nTraverse the said list in reverse order with original index:"")
for i, el in reversed(list(enumerate(color))):
    print(i, el) 
","def reverse_list(lst):
    for i in range(len(lst) - 1, -1, -1):
        print(lst[i])

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
reverse_list(lst)

""""""

def reverse_list(lst):
    for i in range(len(lst) - 1, -1, -1):"
257,"Write a NumPy program to create an array of zeros and three column types (integer, float, character). ","import numpy as np
x = np.zeros((3,), dtype=('i4,f4,a40'))
new_data = [(1, 2., ""Albert Einstein""), (2, 2., ""Edmond Halley""), (3, 3., ""Gertrude B. Elion"")]
x[:] = new_data
print(x)
","import numpy as np

# Create an array of zeros
zeros = np.zeros((3,4), dtype = np.int32)

# Create a three column array
arr = np.arange(12).reshape(3,4)

# Create a three column array with the same data type
arr_dt = np.arange(12, dtype = np.int32)

# Create a three column array with the same"
258,Write a NumPy program to stack 1-D arrays as row wise. ,"import numpy as np    
print(""\nOriginal arrays:"")
x = np.array((1,2,3))
y = np.array((2,3,4))
print(""Array-1"")
print(x)
print(""Array-2"")
print(y)
new_array =  np.row_stack((x, y))
print(""\nStack 1-D arrays as rows wise:"")
print(new_array)
","import numpy as np

arr = np.array([[1,2,3,4,5,6,7,8,9,10],
                [11,12,13,14,15,16,17,18,19,20],
                [21,22,23,24,25,26,27,28,29,30]])

print(arr)

# Solution:

# arr = np.array([[1,2,3,4,5,"
259,Write a Pandas program to add 100 days with reporting date of unidentified flying object (UFO). ,"import pandas as pd
from datetime import timedelta
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nAdd 100 days with reporting date:"")
df['New_doc_dt'] = df['Date_time'] + timedelta(days=180)
print(df)
","import pandas as pd

# Read the data from the csv file
df = pd.read_csv('UFO_data.csv')

# Create a new column called 'Reporting_date'
df['Reporting_date'] = pd.to_datetime(df['Reporting_date'])

# Create a new column called 'Unidentified_UFO'
df['Unidentified_UFO'] = df['Unidentified_UFO'].str.replace"
260,Write a NumPy program to compute numerical negative value for all elements in a given array. ,"import numpy as np
x = np.array([0, 1, -1])
print(""Original array: "")
print(x)
r1 = np.negative(x)
r2 = -x
assert np.array_equal(r1, r2)
print(""Numerical negative value for all elements of the said array:"")
print(r1)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

neg_arr = np.negative(arr)

print(neg_arr)

# Output:
# array([-1., -2., -3., -4., -5., -6., -7., -8., -9., -10.])

# Hint: You can use np.negative() function to solve"
261,Write a Python program to sort each sublist of strings in a given list of lists using lambda. ,"def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result
color1 = [[""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]]
print(""\nOriginal list:"")
print(color1)  
print(""\nAfter sorting each sublist of the said list of lists:"")
print(sort_sublists(color1))
","def sort_sublist(sublist):
    return sorted(sublist)

lst = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]
print(sort_sublist(lst))

""""""

# Solution 1

def sort_sublist(sublist):
    return sorted(sublist)

lst = [['a', 'b', 'c'],"
262,Write a Python program to generate the combinations of n distinct objects taken from the elements of a given list. ,"def combination(n, n_list):
    if n<=0:
        yield []
        return
    for i in range(len(n_list)):
        c_num = n_list[i:i+1]
        for a_num in combination(n-1, n_list[i+1:]):
            yield c_num + a_num
n_list = [1,2,3,4,5,6,7,8,9]
print(""Original list:"") 
print(n_list)
n = 2
result = combination(n, n_list)
print(""\nCombinations of"",n,""distinct objects:"")
for e in result:
     print(e)

","def combinations(n, arr):
    if n == 1:
        return [arr]
    else:
        return [arr] + combinations(n-1, arr[:-1])

print(combinations(5, [1, 2, 3, 4, 5]))

""""""

def combinations(n, arr):
    if n == 1:
        return [arr]
    else:
        return [arr] + combinations(n-1, arr"
263,Write a Python program to find all index positions of the maximum and minimum values in a given list of numbers. ,"def position_max_min(nums):
    max_val = max(nums)
    min_val = min(nums)
    max_result = [i for i, j in enumerate(nums) if j == max_val]
    min_result = [i for i, j in enumerate(nums) if j == min_val]
    return max_result,min_result

nums = [12,33,23,10,67,89,45,667,23,12,11,10,54]
print(""Original list:"")
print(nums)
result = position_max_min(nums)
print(""\nIndex positions of the maximum value of the said list:"")
print(result[0])
print(""\nIndex positions of the minimum value of the said list:"")
print(result[1])
","def max_min(nums):
    max_num = nums[0]
    min_num = nums[0]
    for i in range(1, len(nums)):
        if nums[i] > max_num:
            max_num = nums[i]
        if nums[i] < min_num:
            min_num = nums[i]
    return max_num, min_num"
264,Write a NumPy program to get the powers of an array values element-wise. ,"import numpy as np
x = np.arange(7)
print(""Original array"")
print(x)
print(""First array elements raised to powers from second array, element-wise:"")
print(np.power(x, 3))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])

print(a)

print(np.power(a, 2))

print(np.power(a, 2))

print(np.power(a, 2))

print(np.power(a, 2))

print(np.power(a, 2))

print(np.power(a, 2))

print(np.power(a"
265,Write a Python program to create a ctime formatted representation of the date and time using arrow module. ,"import arrow
print(""Ctime formatted representation of the date and time:"")
a = arrow.utcnow().ctime()
print(a) 
","import arrow

print(arrow.now().format('YYYY-MM-DD HH:mm:ss'))

""""""

import arrow

print(arrow.now().format('YYYY-MM-DD HH:mm:ss'))

""""""

import arrow

print(arrow.now().format('YYYY-MM-DD HH:mm:ss'))

""""""

import arrow

print(arrow.now().format('YYYY-MM-"
266,Write a NumPy program to create display every element of a NumPy array. ,"import numpy as np
x = np.arange(12).reshape(3, 4)
for x in np.nditer(x):
    print(x,end=' ')
print()
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

# Output:
[[1 2 3]
 [4 5 6]]

# Hint: You can use the built-in function np.array() to create a NumPy array.

# Hint: You can use the built-in function np.reshape() to reshape a NumPy array into a new shape.

# Hint"
267,Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and find a list of employees where hire_date> 01-01-07. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx')
df[df['hire_date'] >='20070101']
","import pandas as pd

employee = pd.read_excel('employee.xlsx')

employee_list = employee.values.tolist()

for employee in employee_list:
    if employee[3] > '01-01-07':
        print(employee)

# Solution:

import pandas as pd"
268,Write a NumPy program to create a 2d array with 1 on the border and 0 inside. ,"import numpy as np
x = np.ones((5,5))
print(""Original array:"")
print(x)
print(""1 on the border and 0 inside in the array"")
x[1:-1,1:-1] = 0
print(x)
","import numpy as np

arr = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]])

print(arr)

# Solution:

# arr = np.array([[1, 2, 3"
269,Write a NumPy program to get the n largest values of an array. ,"import numpy as np
x = np.arange(10)
print(""Original array:"")
print(x)
np.random.shuffle(x)
n = 1
print (x[np.argsort(x)[-n:]])
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.nlargest(3))

# Output:
# [10, 9, 8]

# Hint:
# Use np.argsort() to get the indices of the elements in the array.
# Use np.sort() to sort the array in ascending order.
# Use np.argsort() to get the indices of the"
270,Write a Python program to find numbers within a given range where every number is divisible by every digit it contains. ,"def divisible_by_digits(start_num, end_num):
    return [n for n in range(start_num, end_num+1) \
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]
print(divisible_by_digits(1,22))
","import math

def divisors(n):
    divisors = []
    for i in range(1, int(math.sqrt(n)) + 1):
        if n % i == 0:
            divisors.append(i)
            if i!= n // i:
                divisors.append(n//i)
    return divisors

def solution(n):
    divisors = divisors(n)"
271,Write a Python program to extract h1 tag from example.com. ,"from urllib.request import urlopen
from bs4 import BeautifulSoup
html = urlopen('https://en.wikipedia.org/wiki/Main_Page')
bs = BeautifulSoup(html, ""html.parser"")
titles = bs.find_all(['h1', 'h2','h3','h4','h5','h6'])
print('List all the header tags :', *titles, sep='\n\n')
","import re

url = ""https://www.example.com""

# find all h1 tags
h1_tags = re.findall(r'<h1>(.+?)</h1>', url)

# extract h1 tag
h1_tag = h1_tags[0]

print(h1_tag)

# find all h2 tags
h2_tags = re.findall(r'<h2>(.+?)</h2>', url"
272,Write a Python program to remove a specified item using the index from an array. ,"from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print(""Original array: ""+str(array_num))
print(""Remove the third item form the array:"")
array_num.pop(2)
print(""New array: ""+str(array_num))
","def remove_item(arr, item):
    for i in range(len(arr)):
        if arr[i] == item:
            arr.pop(i)
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
item = 6
print(remove_item(arr, item))

""""""

def remove_item(arr, item):
    for i in range(len(arr)):"
273,Write a Python program to sort a given list of lists by length and value using lambda. ,"def sort_sublists(input_list):
    result = sorted(input_list, key=lambda l: (len(l), l))
    return result
list1 = [[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]]
print(""Original list:"")
print(list1)
print(""\nSort the list of lists by length and value:"")
print(sort_sublists(list1))
","def sort_by_length(lst):
    return sorted(lst, key=len)

lst = [[1,2,3,4,5], [2,4,6,8,10], [3,6,9,12,15], [1,5,7,9,11]]
print(sort_by_length(lst))

""""""

# Solution:

def sort_by_length(lst):
    return sorted(l"
274,Write a Python program to find the index position of the largest value smaller than a given number in a sorted list using Binary Search (bisect). ,"from bisect import bisect_left  
def Binary_Search(l, x): 
    i = bisect_left(l, x) 
    if i: 
        return (i-1) 
    else: 
        return -1  
nums = [1, 2, 3, 4, 8, 8, 10, 12] 
x = 5 
num_position  = Binary_Search(nums, x) 
if num_position  == -1: 
    print(""Not found..!"") 
else: 
    print(""Largest value smaller than "", x, "" is at index "", num_position )
","def find_index(arr, num):
    low = 0
    high = len(arr) - 1
    mid = 0
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] < num:
            low = mid + 1
        else:
            high = mid - 1
    return low

arr = [1, 2, 3, 4, 5, 6, 7,"
275,Write a NumPy program to get a copy of a matrix with the elements below the k-th diagonal zeroed. ,"import numpy as np
result  = np.triu([[1,2,3],[4,5,6],[7,8,9],[10,11,12]], -1)
print(""\nCopy of a matrix with the elements below the k-th diagonal zeroed:"")
print(result)
","import numpy as np

matrix = np.array([[1, 2, 3, 4, 5],
                   [6, 7, 8, 9, 10],
                   [11, 12, 13, 14, 15],
                   [16, 17, 18, 19, 20]])

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

#"
276,"Write a Python program which iterates the integers from 1 to 50. For multiples of three print ""Fizz"" instead of the number and for the multiples of five print ""Buzz"". For numbers which are multiples of both three and five print ""FizzBuzz"".","for fizzbuzz in range(51):
    if fizzbuzz % 3 == 0 and fizzbuzz % 5 == 0:
        print(""fizzbuzz"")
        continue
    elif fizzbuzz % 3 == 0:
        print(""fizz"")
        continue
    elif fizzbuzz % 5 == 0:
        print(""buzz"")
        continue
    print(fizzbuzz)
	","def fizzbuzz(n):
    if n % 3 == 0 and n % 5 == 0:
        return ""FizzBuzz""
    elif n % 3 == 0:
        return ""Fizz""
    elif n % 5 == 0:
        return ""Buzz""
    else:
        return str"
277,"Write a Python program to get a list with n elements removed from the left, right. ","def drop_left_right(a, n = 1):
  return a[n:], a[:-n] 
nums = [1, 2, 3]
print(""Original list elements:"")
print(nums)
result = drop_left_right(nums)
print(""Remove 1 element from left of the said list:"")
print(result[0])
print(""Remove 1 element from right of the said list:"")
print(result[1])
nums = [1, 2, 3, 4]
print(""\nOriginal list elements:"")
print(nums)
result = drop_left_right(nums,2)
print(""Remove 2 elements from left of the said list:"")
print(result[0])
print(""Remove 2 elements from right of the said list:"")
print(result[1])
nums = [1, 2, 3, 4, 5, 6]
print(""\nOriginal list elements:"")
print(nums)
result = drop_left_right(nums)
print(""Remove 7 elements from left of the said list:"")
print(result[0])
print(""Remove 7 elements from right of the said list:"")
print(result[1])
","def remove_left(lst):
    return lst[1:]

def remove_right(lst):
    return lst[:-1]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(remove_left(lst))
print(remove_right(lst))

""""""

# Solution 1

def remove_left(lst):
    return lst[1:]"
278,Write a Python program to list the tables of given SQLite database file. ,"import sqlite3
from sqlite3 import Error
def sql_connection():
   try:
     conn = sqlite3.connect('mydatabase.db')
     return conn
   except Error:
     print(Error)
 
def sql_table(conn):
   cursorObj = conn.cursor()
# Create two tables
   cursorObj.execute(""CREATE TABLE agent_master(agent_code char(6),agent_name char(40),working_area char(35),commission decimal(10,2),phone_no char(15) NULL);"")
   cursorObj.execute(""CREATE TABLE temp_agent_master(agent_code char(6),agent_name char(40),working_area char(35),commission decimal(10,2),phone_no char(15) NULL);"")
   print(""List of tables:"")
   cursorObj.execute(""SELECT name FROM sqlite_master WHERE type='table';"")
   print(cursorObj.fetchall())
   conn.commit()
sqllite_conn = sql_connection()
sql_table(sqllite_conn)
if (sqllite_conn):
 sqllite_conn.close()
 print(""\nThe SQLite connection is closed."")
","import sqlite3

conn = sqlite3.connect('sqlite_python.db')
c = conn.cursor()

c.execute(""""""CREATE TABLE IF NOT EXISTS students (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    age INTEGER NOT NULL,
    gender TEXT NOT NULL
)"""""")

c.execute(""""""CREATE TABLE IF NOT EXISTS teachers (
    id INTEGER PR"
279,"Write a Python program to split values into two groups, based on the result of the given filter list. ","def bifurcate(colors, filter):
  return [
    [x for x, flag in zip(colors, filter) if flag],
    [x for x, flag in zip(colors, filter) if not flag]
  ]
print(bifurcate(['red', 'green', 'blue', 'pink'], [True, True, False, True]))
","def split_values(values, filter_list):
    result = []
    for value in values:
        if filter_list.count(value) > 0:
            result.append(value)
    return result

print(split_values([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def split_values"
280,Write a Python program to store a given dictionary in a json file. ,"d = {""students"":[{""firstName"": ""Nikki"", ""lastName"": ""Roysden""},
               {""firstName"": ""Mervin"", ""lastName"": ""Friedland""},
               {""firstName"": ""Aron "", ""lastName"": ""Wilkins""}],
""teachers"":[{""firstName"": ""Amberly"", ""lastName"": ""Calico""},
         {""firstName"": ""Regine"", ""lastName"": ""Agtarap""}]}
print(""Original dictionary:"")
print(d)
print(type(d))
import json
 
with open(""dictionary"", ""w"") as f:
   json.dump(d, f, indent = 4, sort_keys = True)
 
print(""\nJson file to dictionary:"")
with open('dictionary') as f:
 data = json.load(f)
print(data)
","import json

d = {
    ""name"": ""John"",
    ""age"": 30,
    ""city"": ""New York""
}

with open(""my_json.json"", ""w"") as f:
    json.dump(d, f, indent=4)

# Output:
# {
#   ""name"": ""John"",
#   ""age"": 30,
#   ""city"": ""New York""
# }

# Python program to store a given dictionary in"
281,Write a Python program to add two objects if both objects are an integer type. ,"def add_numbers(a, b):
   if not (isinstance(a, int) and isinstance(b, int)):
       return ""Inputs must be integers!""
   return a + b
print(add_numbers(10, 20))
print(add_numbers(10, 20.23))
print(add_numbers('5', 6))
print(add_numbers('5', '6'))
","def add(a, b):
    if type(a) == int or type(b) == int:
        return a + b
    else:
        return ""Please enter two integers""

print(add(1, 2))
print(add(1, 3))
print(add(1, 4))
print(add(1, 5))
print(add(1, 6))
print(add(1, 7))
print(add(1, 8))
print(add"
282,Write a Python program to count the number of items of a given doubly linked list. ,"class Node(object):
    # Singly linked node
    def __init__(self, data=None, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev

class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, data):
        # Append an item 
        new_item = Node(data, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item

        self.count += 1


items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')
items.append_item('SQL')

print(""Number of items of the  Doubly linked list:"",items.count)
","def count_doubly_linked_list(head):
    count = 0
    while head:
        count += 1
        head = head.next
    return count

# Test your solution
head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(count_doubly_linked_list(head))

# Output:
# 5
# 6
# 7
# 8
# 9
# 10"
283,Write a Pandas program to combine the columns of two potentially differently-indexed DataFrames into a single result DataFrame. ,"import pandas as pd
data1 = pd.DataFrame({'A': ['A0', 'A1', 'A2'],
                      'B': ['B0', 'B1', 'B2']},
                     index=['K0', 'K1', 'K2'])

data2 = pd.DataFrame({'C': ['C0', 'C2', 'C3'],
                      'D': ['D0', 'D2', 'D3']},
                     index=['K0', 'K2', 'K3'])
 
print(""Original DataFrames:"")
print(data1)
print(""--------------------"")
print(data2)
print(""\nMerged Data (Joining on index):"")
result = data1.join(data2)
print(result)
","import pandas as pd

df1 = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})
df2 = pd.DataFrame({'col1': [7, 8, 9], 'col2': [10, 11, 12]})

df = pd.concat([df1, df2], axis=1)
print(df)

# Solution"
284,Write a Python program to count number of items in a dictionary value that is a list. ,"dict =  {'Alex': ['subj1', 'subj2', 'subj3'], 'David': ['subj1', 'subj2']}
ctr = sum(map(len, dict.values()))
print(ctr)
","def count_items(dictionary):
    count = 0
    for i in dictionary.values():
        count += len(i)
    return count

dictionary = {'a': ['b', 'c'], 'b': ['d', 'e'], 'c': ['f', 'g'], 'd': ['h', 'i'], 'e': ['j', 'k'], 'f': ['l','m'], 'g': ['n', 'o'"
285,Write a Python program to find the elements of a given list of strings that contain specific substring using lambda. ,"def find_substring(str1, sub_str):
    result = list(filter(lambda x: sub_str in x, str1))
    return result
colors = [""red"", ""black"", ""white"", ""green"", ""orange""]
print(""Original list:"")
print(colors)

sub_str = ""ack""
print(""\nSubstring to search:"")
print(sub_str)
print(""Elements of the said list that contain specific substring:"")
print(find_substring(colors, sub_str))
sub_str = ""abc""
print(""\nSubstring to search:"")
print(sub_str)
print(""Elements of the said list that contain specific substring:"")
print(find_substring(colors, sub_str))
","def find_substring(str, substring):
    return [i for i in str if substring in i]

str = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"","
286,Write a Pandas program to generate holidays between two dates using the US federal holiday calendar. ,"import pandas as pd
from pandas.tseries.holiday import *
sdt = datetime(2021, 1, 1)
edt = datetime(2030, 12, 31)
print(""Holidays between 2021-01-01 and 2030-12-31 using the US federal holiday calendar."")
cal = USFederalHolidayCalendar()
for dt in cal.holidays(start=sdt, end=edt): 
    print (dt)
","import pandas as pd

# Create a dataframe with the following columns:
# Date, Month, Weekday, Holiday
#
# Create a new dataframe called holidays with the following columns:
# Date, Weekday, Holiday
#
# Create a new dataframe called holiday_df with the following columns:
# Date, Weekday, Holiday
#
# Create a new dataframe called holiday_df_2 with the following columns:
# Date, Weekday, Holiday
#"
287,Write a NumPy program to get all 2D diagonals of a 3D NumPy array. ,"import numpy as np
np_array = np.arange(3*4*5).reshape(3,4,5)
print(""Original Numpy array:"")
print(np_array)
print(""Type: "",type(np_array))
result = np.diagonal(np_array, axis1=1, axis2=2)
print(""\n2D diagonals: "")
print(result)
print(""Type: "",type(result))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a[0, :])

# solution
print(a[0, :])

# solution
print(a[0, :])

# solution
print(a[0, :])

# solution
print(a[0, :])

# solution
print(a[0"
288,Write a Python program to solve the Fibonacci sequence using recursion. ,"def fibonacci(n):
  if n == 1 or n == 2:
    return 1
  else:
    return (fibonacci(n - 1) + (fibonacci(n - 2)))

print(fibonacci(7))
","def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

print(fib(5))

""""""

# Solution

def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-"
289,Write a NumPy program to access an array by column. ,"import numpy as np
x= np.arange(9).reshape(3,3)
print(""Original array elements:"")
print(x)
print(""Access an array by column:"")
print(""First column:"")
print(x[:,0])
print(""Second column:"")
print(x[:,1])
print(""Third column:"")
print(x[:,2])
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(a[0, 1])

# Output: 2

# a[0, 1] = 2

# Output: 3

# a[0, 1] = 3

# Output: 7

# a[0, 1] = 7

# Output: 8

# a[0, 1] = 8"
290,Write a Python program to get the sum of a non-negative integer. ,"def sumDigits(n):
  if n == 0:
    return 0
  else:
    return n % 10 + sumDigits(int(n / 10))

print(sumDigits(345))
print(sumDigits(45))
","def sum_non_negative_int(n):
    return n + sum(range(n))

""""""

def sum_non_negative_int(n):
    return n + sum(range(n))

print(sum_non_negative_int(5))"
291,Write a NumPy program to create and display every element of a NumPy array in Fortran order. ,"import numpy as np
x = np.arange(12).reshape(3, 4)
print(""Elements of the array in Fortan array:"")
for x in np.nditer(x, order=""F""):
    print(x,end=' ')
print(""\n"")
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])

print(a)

# a = np.array([[1, 2, 3], [4, 5, 6]])
# print(a)
# print(a.T)
# print(a.T.shape)
# print(a.T.flatten())
# print(a.T.flatten().shape)"
292,Write a Python program to check whether a specified list is sorted or not. ,"def is_sort_list(nums):
    result = all(nums[i] <= nums[i+1] for i in range(len(nums)-1))
    return result

nums1 = [1,2,4,6,8,10,12,14,16,17]
print (""Original list:"")
print(nums1)
print(""\nIs the said list is sorted!"")
print(is_sort_list(nums1)) 

nums2 = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]
print (""\nOriginal list:"")
print(nums1)
print(""\nIs the said list is sorted!"")
print(is_sort_list(nums2))
","def isSorted(lst):
    if len(lst) == 0:
        return True
    if len(lst) == 1:
        return lst[0] == lst[0]
    if lst[0] > lst[1]:
        return False
    return isSorted(lst[1:])

print(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(is"
293,Write a NumPy program to create a 3x3 identity matrix. ,"import numpy as np
array_2D=np.identity(3)
print('3x3 matrix:')
print(array_2D)
","import numpy as np

A = np.array([[1, 2, 3],
              [4, 5, 6],
              [7, 8, 9]])

print(A)

# Solution:
A = np.eye(3)
print(A)

# Solution:
A = np.identity(3)
print(A)

# Solution:
A = np.array([[1, 2, 3],
              [4, 5, 6],"
294,"Write a Python program to get string representing the date, controlled by an explicit format string. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nString representing the date, controlled by an explicit format string:"")
print(arrow.utcnow().strftime('%d-%m-%Y %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%m-%d %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%d-%m %H:%M:%S'))
","import datetime

def date_converter(date):
    return datetime.datetime.strptime(date, '%d-%m-%Y').strftime('%Y-%m-%d')

print(date_converter('2021-01-01'))

""""""

# Solution 1

import datetime

def date_converter(date):
    return datetime.datetime.strptime(date, '"
295,Write a Python program to remove the first occurrence of a specified element from an array. ,"from array import *
array_num = array('i', [1, 3, 5, 3, 7, 1, 9, 3])
print(""Original array: ""+str(array_num))
print(""Remove the first occurrence of 3 from the said array:"")
array_num.remove(3)
print(""New array: ""+str(array_num))
","def remove_first(arr, x):
    for i in range(len(arr)):
        if arr[i] == x:
            arr.pop(i)
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
x = 5
print(remove_first(arr, x))

""""""

def remove_first(arr, x):
    for i in range(len(arr)):"
296,Write a Pandas program to extract word mention someone in tweets using @ from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'tweets': ['@Obama says goodbye','Retweets for @cash','A political endorsement in @Indonesia', '1 dog = many #retweets', 'Just a simple #egg']
    })
print(""Original DataFrame:"")
print(df)
def find_at_word(text):
    word=re.findall(r'(?<[emailprotected])\w+',text)
    return "" "".join(word)

df['at_word']=df['tweets'].apply(lambda x: find_at_word(x))
print(""\Extracting @word from dataframe columns:"")
print(df)
","import pandas as pd

df = pd.read_csv('tweets.csv')

df['mention'] = df['text'].apply(lambda x: ""@"" in x)

print(df.head())

df.to_csv('tweets_with_mentions.csv')

# Solution:

# df = pd.read_csv('tweets.csv')
# df['mention']"
297,Write a Python program to calculate the sum of the positive and negative numbers of a given list of numbers using lambda function. ,"nums = [2, 4, -6, -9, 11, -12, 14, -5, 17]
print(""Original list:"",nums)

total_negative_nums = list(filter(lambda nums:nums<0,nums))
total_positive_nums = list(filter(lambda nums:nums>0,nums))

print(""Sum of the positive numbers: "",sum(total_negative_nums))
print(""Sum of the negative numbers: "",sum(total_positive_nums))
","def sum_numbers(numbers):
    return sum(numbers)

print(sum_numbers([1, 2, 3, 4, 5]))

""""""

# Solution 1

def sum_numbers(numbers):
    return sum(numbers)

print(sum_numbers([1, 2, 3, 4, 5]))

# Solution 2

def sum_numbers(numbers):
    return"
298,"Write a Pandas program to split the following dataframe into groups, group by month and year based on order date and find the total purchase amount year wise, month wise. ","import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['05-10-2012','09-10-2012','05-10-2013','08-17-2013','10-09-2013','07-27-2014','10-09-2012','10-10-2012','10-10-2012','06-17-2014','07-08-2012','04-25-2012'],
'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
df['ord_date']= pd.to_datetime(df['ord_date']) 
print(""\nYear wise Month wise purchase amount:"")
result = df.groupby([df['ord_date'].dt.year, df['ord_date'].dt.month]).agg({'purch_amt':sum})
print(result)
","import pandas as pd
import numpy as np

df = pd.read_csv(""purchase_data.csv"")

df.groupby(['order_date','month'])['total_purchase_amount'].sum().reset_index()

df.groupby(['order_date','month'])['total_purchase_amount'].sum().reset_index()"
299,Write a Python code to create a program for Bitonic Sort. ,"#License:  https://bit.ly/2InTS3W 
# Python program for Bitonic Sort. Note that this program 
# works only when size of input is a power of 2. 
# The parameter dir indicates the sorting direction, ASCENDING 
# or DESCENDING; if (a[i] > a[j]) agrees with the direction, 
# then a[i] and a[j] are interchanged.*/ 
def compAndSwap(a, i, j, dire):
    if (dire == 1 and a[i] > a[j]) or (dire == 0 and a[i] < a[j]):
        a[i], a[j] = a[j], a[i]
        # It recursively sorts a bitonic sequence in ascending order,
# if dir = 1, and in descending order otherwise (means dir=0).
# The sequence to be sorted starts at index position low, 
# the parameter cnt is the number of elements to be sorted. 
def bitonicMerge(a, low, cnt, dire):
    if cnt > 1:
        k = int(cnt / 2)
        for i in range(low, low + k):
            compAndSwap(a, i, i + k, dire)
        bitonicMerge(a, low, k, dire)
        bitonicMerge(a, low + k, k, dire)

        # This funcion first produces a bitonic sequence by recursively


# sorting its two halves in opposite sorting orders, and then
# calls bitonicMerge to make them in the same order 
def bitonicSort(a, low, cnt, dire):
    if cnt > 1:
        k = int(cnt / 2)
        bitonicSort(a, low, k, 1)
        bitonicSort(a, low + k, k, 0)
        bitonicMerge(a, low, cnt, dire)

        # Caller of bitonicSort for sorting the entire array of length N


# in ASCENDING order
def sort(a, N, up):
    bitonicSort(a, 0, N, up)


# Driver code to test above
a = []
print(""How many numbers u want to enter?"");
n = int(input())
print(""Input the numbers:"");
for i in range(n):
    a.append(int(input()))
up = 1

sort(a, n, up)
print(""\n\nSorted array is:"")
for i in range(n):
    print(""%d"" % a[i])
","def bitonic_sort(arr):
    # Write your code here
    arr.sort()
    for i in range(len(arr)):
        if arr[i] > arr[i+1]:
            arr[i], arr[i+1] = arr[i+1], arr[i]
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(bitonic_sort(arr))

"""""""
300,Write a Python program to get the cumulative sum of the elements of a given list. ,"from itertools import accumulate
def cumsum(lst):
  return list(accumulate(lst))
nums = [1,2,3,4]
print(""Original list elements:"")
print(nums)
print(""Cumulative sum of the elements of the said list:"")
print(cumsum(nums)) 
nums = [-1,-2,-3,4]
print(""\nOriginal list elements:"")
print(nums)
print(""Cumulative sum of the elements of the said list:"")
print(cumsum(nums))
","def cum_sum(lst):
    sum = 0
    for i in lst:
        sum += i
    return sum

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(cum_sum(lst))

""""""

# Solution

def cum_sum(lst):
    sum = 0
    for i in lst:
        sum += i
    return sum

lst ="
301,Write a NumPy program to create an array which looks like below array. ,"import numpy as np
x = np.tri(4, 3, -1)
print(x)
","arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr = np.array([[1, 2, 3], [4, 5, 6], [7"
302,Write a Python program to extract common index elements from more than one given list. ,"def extract_index_ele(l1, l2, l3):
    result = []
    for m, n, o in zip(l1, l2, l3):
        if (m == n == o):
            result.append(m)
    return result

nums1 = [1, 1, 3, 4, 5, 6, 7]
nums2 = [0, 1, 2, 3, 4, 5, 7]
nums3 = [0, 1, 2, 3, 4, 5, 7]

print(""Original lists:"")
print(nums1)
print(nums2)
print(nums3)
print(""\nCommon index elements of the said lists:"") 
print(extract_index_ele(nums1, nums2, nums3))
","def common_index(lst1, lst2):
    common_index = []
    for i in range(len(lst1)):
        if lst1[i] in lst2:
            common_index.append(lst1[i])
    return common_index

lst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
lst2 = [1, 2, 3, 4, 5,"
303,Write a Pandas program to check if a specified value exists in single and multiple column index dataframe. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32]},
     index =  ['t1', 't2', 't3', 't4', 't5', 't6'])
print(""Original DataFrame with single index:"")
print(df)
print(""\nCheck a value is exist in single column index dataframe:"")
print('t1' in df.index)
print('t11' in df.index)
print(""\nCreate MultiIndex using columns 't_id', school_code and 'class':"")
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32],
    't_id': ['t1', 't2', 't3', 't4', 't5', 't6']})
df1 = df.set_index(['t_id', 'school_code', 'class'])
print(df1)
print(""\nCheck a value is exist in multiple columns index dataframe:"")
print('t4' in df1.index.levels[0])
print('t4' in df1.index.levels[1])
print('t4' in df1.index.levels[2])
","import pandas as pd

df = pd.DataFrame({""col1"": [1, 2, 3, 4, 5], ""col2"": [10, 20, 30, 40, 50]})
print(df)

# Solution:

# df = pd.DataFrame({""col1"": [1, 2, 3, 4, 5], ""col2"": [10, 20, 30, 40, 50]})
# print(df)"
304,Write a Python program to count the elements in a list until an element is a tuple. ,"num = [10,20,30,(10,20),40]
ctr = 0
for n in num:
    if isinstance(n, tuple):
        break
    ctr += 1
print(ctr)
","def count_tuple(lst):
    count = 0
    for i in lst:
        if isinstance(i, tuple):
            count += 1
    return count

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(count_tuple(lst))

""""""

# Solution:

def count_tuple(lst):
    count = 0
    for i in lst"
305,"Write a Pandas program to create a stacked histograms plot of opening, closing, high, low stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Open','Close','High','Low']]
plt.figure(figsize=(25,25))
df2.plot.hist(stacked=True, bins=20)
plt.suptitle('Opening/Closing/High/Low stock prices of Alphabet Inc.,\n From 01-04-2020 to 30-09-2020', fontsize=12, color='blue')
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])
df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')

df['Open'] = df['Open'].astype(float)"
306,Write a Python program to add a number to each element in a given list of numbers. ,"def add_val_to_list(lst, add_val):
    result = lst
    result = [x+add_val for x in result]   
    return result    
nums = [3,8,9,4,5,0,5,0,3]
print(""Original lists:"")
print(nums)
add_val = 3
print(""\nAdd"",add_val,""to each element in the said list:"")
print(add_val_to_list(nums, add_val))
nums = [3.2,8,9.9,4.2,5,0.1,5,3.11,0]
print(""\nOriginal lists:"")
print(nums)
add_val = .51
print(""\nAdd"",add_val,""to each element in the said list:"")
print(add_val_to_list(nums, add_val))
","def add_numbers(numbers):
    for i in range(len(numbers)):
        numbers[i] = numbers[i] + 1
    return numbers

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(add_numbers(numbers))

""""""

# Solution 1

def add_numbers(numbers):
    for i in range(len(numbers)):"
307,Write a Python program to create a multidimensional list (lists of lists) with zeros. ,"nums = []

for i in range(3):

    nums.append([])

    for j in range(2):

        nums[i].append(0)
print(""Multidimensional list:"")
print(nums)
","def create_list(n):
    l = []
    for i in range(n):
        l.append([])
    return l

n = int(input(""Enter the number of rows: ""))
print(create_list(n))

""""""

# Solution 1

def create_list(n):
    l = []
    for i in range(n):
        l.append([])
    return l

n = int(input("""
308,Write a Pandas program to find the positions of numbers that are multiples of 5 of a given series. ,"import pandas as pd
import numpy as np
num_series = pd.Series(np.random.randint(1, 10, 9))
print(""Original Series:"")
print(num_series)
result = np.argwhere(num_series % 5==0)
print(""Positions of numbers that are multiples of 5:"")
print(result)
","import pandas as pd

series = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

result = series.is_monotonic_increasing
print(result)

result = series.is_monotonic_decreasing
print(result)

result = series.is_unique
print(result)

result = series.is_monotonic
print(result)"
309,Write a Python program to get the n (non-negative integer) copies of the first 2 characters of a given string. Return the n copies of the whole string if the length is less than 2. ,"def substring_copy(str, n):
  flen = 2
  if flen > len(str):
    flen = len(str)
  substr = str[:flen]
  
  result = """"
  for i in range(n):
    result = result + substr
  return result
print(substring_copy('abcdef', 2))
print(substring_copy('p', 3));
","def get_n_copies(string, n):
    return string[:n] + string[n:]

print(get_n_copies('python', 2))
print(get_n_copies('python', 3))
print(get_n_copies('python', 4))
print(get_n_copies('python', 5))
print(get"
310,"Write a NumPy program to partition a given array in a specified position and move all the smaller elements values to the left of the partition, and the remaining values to the right, in arbitrary order (based on random choice). ","import numpy as np
nums = np.array([70, 50, 20, 30, -11, 60, 50, 40])
print(""Original array:"")
print(nums)
print(""\nAfter partitioning on 4 the position:"")
print(np.partition(nums, 4))
","import random

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Partition the array in two equal parts
# Partition the array in two equal parts
# Partition the array in two equal parts
# Partition the array in two equal parts
# Partition the array in two equal parts
# Partition"
311,"Write a Pandas program to create a Pivot table and find the total sale amount region wise, manager wise, sales man wise where Manager = ""Douglas"". ","import pandas as pd
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df,index=[""Region"",""Manager"",""SalesMan""], values=""Sale_amt"")
print(table.query('Manager == [""Douglas""]'))
","# Solution:

# Create a dataframe
df = pd.DataFrame({
    'Region': ['East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East"
312,Write a Python program to check whether a specified list is sorted or not using lambda. ,"def is_sort_list(nums, key=lambda x: x):
    for i, e in enumerate(nums[1:]):
        if key(e) < key(nums[i]): 
            return False
    return True
nums1 = [1,2,4,6,8,10,12,14,16,17]
print (""Original list:"")
print(nums1)
print(""\nIs the said list is sorted!"")
print(is_sort_list(nums1)) 
nums2 = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]
print (""\nOriginal list:"")
print(nums1)
print(""\nIs the said list is sorted!"")
print(is_sort_list(nums2))
","def isSorted(lst):
    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    return True

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(isSorted(lst))

""""""

# Solution 1

def isSorted(lst):
    for i in range(len("
313,Write a Python program to rotate a Deque Object specified number (positive) of times. ,"import collections
# declare an empty deque object
dq_object = collections.deque()
# Add elements to the deque - left to right
dq_object.append(2)
dq_object.append(4)
dq_object.append(6)
dq_object.append(8)
dq_object.append(10)
print(""Deque before rotation:"")
print(dq_object)
# Rotate once in positive direction
dq_object.rotate()
print(""\nDeque after 1 positive rotation:"")
print(dq_object)
# Rotate twice in positive direction
dq_object.rotate(2)
print(""\nDeque after 2 positive rotations:"")
print(dq_object)
","def rotate(d, n):
    for i in range(n):
        d.append(d.popleft())
    return d

# Driver Code
d = deque()
d.append(1)
d.append(2)
d.append(3)
d.append(4)
d.append(5)
d.append(6)
d.append(7)
d.append(8)
d.append(9)
d."
314,"Write a Python code to send a request to a web page and stop waiting for a response after a given number of seconds. In the event of times out of request, raise Timeout exception. ","import requests
print(""timeout = 0.001"")
try:
    r = requests.get('https://github.com/', timeout = 0.001)
    print(r.text)
except requests.exceptions.RequestException as e:
    print(e)    

print(""\ntimeout = 1.0"")    
try:
    r = requests.get('https://github.com/', timeout = 1.0)
    print(""Connected....!"")
except requests.exceptions.RequestException as e:
    print(e)
","import time

def get_url(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.text
        else:
            raise Exception(""Error: {}"".format(response.status_code))
    except Exception as e:
        print(e)
        raise Exception(""Error: {}"".format(e"
315,Write a Python program to create a doubly linked list and print nodes from current position to first node. ,"class Node(object):
    # Doubly linked node
    def __init__(self, data=None, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev
	
class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, data):
        # Append an item 
        new_item = Node(data, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item

        self.count += 1

    def print_foward(self):
        for node in self.iter():
            print(node)

    def print_backward(self):
        current = self.tail
        while current:
            print(current.data)
            current = current.prev
            
    def iter(self):
        # Iterate the list
        current = self.head
        while current:
            item_val = current.data
            current = current.next
            yield item_val

items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')

print(""Print Items in the Doubly linked backwards:"")
items.print_backward()
","# Node class
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

# Doubly Linked List class
class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0

    def insert_at_begining(self, data):
        new_node ="
316,Write a Pandas program to convert a specified character column in title case in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})

print(""Original DataFrame:"")
print(df)

print(""\nTitle cases:"")
df['company_code_title_cases'] = list(map(lambda x: x.title(), df['company_code']))
print(df)
","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pandas_datareader/data/airline.csv?raw=true')

df.columns = df.columns.str.title()
df.head()

df.head()

df.head()

df.head()

df.head()

df.head()"
317,Write a Pandas program to convert given series into a dataframe with its index as another column on the dataframe. ,"import numpy as np
import pandas as pd
char_list = list('ABCDEFGHIJKLMNOP')
num_arra = np.arange(8)
num_dict = dict(zip(char_list, num_arra))
num_ser = pd.Series(num_dict)
df = num_ser.to_frame().reset_index()
print(df.head())
","import pandas as pd

series = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

df = pd.DataFrame(series)

df.index.name = 'index'

print(df)

# Solution:

# import pandas as pd

# series = pd.Series([1, 2, 3, 4, 5, 6, 7, 8"
318,Write a NumPy program to make all the elements of a given string to a numeric string of 5 digits with zeros on its left. ,"import numpy as np
x = np.array(['2', '11', '234', '1234', '12345'], dtype=np.str)
print(""\nOriginal Array:"")
print(x)
r = np.char.zfill(x, 5)
print(""\nNumeric string of 5 digits with zeros:"")
print(r) 
","import numpy as np

s = ""123456789""

# convert string to array
arr = np.array(s)

# convert array to string
s = arr.astype(str)

# convert string to array
arr = np.array(s)

# convert array to string
s = arr.astype(str)

# convert string to array
arr = np.array(s)"
319,Write a Python program to create a list with the unique values filtered out. ,"from collections import Counter
def filter_unique(lst):
  return [item for item, count in Counter(lst).items() if count > 1] 
print(filter_unique([1, 2, 2, 3, 4, 4, 5]))
","def unique_list(lst):
    new_lst = []
    for i in lst:
        if i not in new_lst:
            new_lst.append(i)
    return new_lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(unique_list(lst))

""""""

# Solution:

def unique_list(lst):
    new_l"
320,Write a Python program to set a random seed and get a random number between 0 and 1. Use random.random. ,"import random 
print(""Set a random seed and get a random number between 0 and 1:"")
random.seed(0)
new_random_value = random.random()
print(new_random_value)
random.seed(1)
new_random_value = random.random()
print(new_random_value)
random.seed(2)
new_random_value = random.random()
print(new_random_value)
","import random

print(""Random number between 0 and 1: "", random.random())

""""""

# Solution

import random

print(""Random number between 0 and 1: "", random.random())

""""""

# Solution

import random

print(""Random number between 0 and 1: "", random.random())

""""""

# Solution

import random

print(""Random number between 0 and 1: "", random.random())

"""""""
321,"Create an array (a) of shape 3, 4, 8 (K=3, J=4, I=8). tidx is an array of the same length as a.shape[1], i.e. contains J = 4 elements where each index denotes which element of K should be chosen.","import numpy as np
a = np.random.randint(0, 10, (3, 4, 8))
print(""Original array and shape:"")
print(a)
print(a.shape)
print(""--------------------------------"")
tidx = np.random.randint(0, 3, 4)
print(""tidex: "",tidx)
print(""Result:"")
print(a[tidx, np.arange(len(tidx)),:])
","a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
tidx = np.array([[0, 1, 2, 3], [0, 1, 2, 3], [0, 1"
322,"Write a Pandas program to split a given dataset, group by one column and apply an aggregate function to few columns and another aggregate function to the rest of the columns of the dataframe. ","import pandas as pd
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001],
'sale_jan':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 1760, 2983.43, 480.4,  1250.45, 75.29,1045.6],
'sale_feb':[250.5, 170.65, 15.26, 110.5, 598.5, 1400.6, 2760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_mar':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_apr':[150.5, 270.65, 95.26, 210.5, 948.5, 2400.6, 760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_may':[130.5, 270.65, 65.26, 310.5, 948.5, 2400.6, 760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_jun':[150.5, 270.65, 45.26, 110.5, 948.5, 3400.6, 5760, 983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_jul':[950.5, 270.65, 65.26, 210.5, 948.5, 2400.6, 5760, 983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_aug':[150.5, 70.65,  65.26, 110.5, 948.5, 400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_sep':[150.5, 270.65, 65.26, 110.5, 948.5, 200.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_oct':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_nov':[150.5, 270.65, 95.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6], 
'sale_dec':[150.5, 70.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6]
})
print(""Original Orders DataFrame:"")
print(df)
print(""\Result after group on salesman_id and apply different aggregate functions:"")
df = df.groupby('salesman_id').agg(lambda x : x.sum() if x.name in ['sale_jan','sale_feb','sale_mar'] else x.mean())
print(df)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({
    'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'col2': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],
    'col3': [10, 20, 30,"
323,Write a NumPy program (using NumPy) to sum of all the multiples of 3 or 5 below 100. ,"import numpy as np
x = np.arange(1, 100)
# find  multiple of 3 or 5
n= x[(x % 3 == 0) | (x % 5 == 0)]
print(n[:1000])
# print sum the numbers
print(n.sum())
","import numpy as np

n = np.arange(1,101)
print(n)

n = n.reshape(len(n),1)
print(n)

n = n.reshape(len(n),1)
print(n)

n = n.reshape(len(n),1)
print(n)

n = n.reshape(len(n),1)
print(n)"
324,"Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and find details where ""Labor Hours"" > 20000. ","import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')    
df[df[""Labor_Hours""] > 20000].head()
","import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')

df['Labor Hours'] = df['Labor Hours'].astype(int)

df['Labor Hours'] = df['Labor Hours'].astype(int)

df['Labor Hours'] = df['Labor Hours'].astype(int)

df['Labor Hours'] = df['"
325,Write a Python program to iterate a given list cyclically on specific index position. ,"def cyclically_iteration(lst,spec_index):
    result = []
    length = len(lst)
    for i in range(length):
        element_index = spec_index % length
        result.append(lst[element_index])
        spec_index += 1
    return result

chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
print(""Original list:"")
print(chars)
spec_index = 3
print(""\nIterate the said  list cyclically on specific index position"",spec_index,"":"")
print(cyclically_iteration(chars,spec_index))
spec_index = 5
print(""\nIterate the said  list cyclically on specific index position"",spec_index,"":"")
print(cyclically_iteration(chars,spec_index))
","def cyclic_iter(lst):
    for i in range(len(lst)):
        yield lst[i]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

for i in cyclic_iter(lst):
    print(i)

# Output:
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9
#"
326,Write a Pandas program to interpolate the missing values using the Linear Interpolation method in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df) 
print(""\nInterpolate the missing values using the Linear Interpolation method (purch_amt):"")
df['purch_amt'].interpolate(method='linear', direction = 'forward', inplace=True) 
print(df)
","import pandas as pd

# Read the data
df = pd.read_csv(""https://github.com/datasets/csv/raw/master/data/fraud.csv"")

# Create a new DataFrame with the missing values
df_new = df.copy()

# Replace the missing values with the interpolated value
df_new.fillna(value=df_new.interpolate().interpolate().interpolate"
327,Write a Python program to read a random line from a file. ,"import random
def random_line(fname):
    lines = open(fname).read().splitlines()
    return random.choice(lines)
print(random_line('test.txt'))
","import random

def read_file(filename):
    try:
        file = open(filename, 'r')
        content = file.read()
        file.close()
        return content
    except IOError:
        print(""Cannot open"", filename)

def get_random_line(filename):
    lines = read_file(filename)
    return lines[random.randint(0, len(lines) - 1)]

print(get_random_line('/home/student"
328,Write a Python program to print the square and cube symbol in the area of a rectangle and volume of a cylinder. ,"area = 1256.66
volume = 1254.725
decimals = 2
print(""The area of the rectangle is {0:.{1}f}cm\u00b2"".format(area, decimals))
decimals = 3
print(""The volume of the cylinder is {0:.{1}f}cm\u00b3"".format(volume, decimals))
","# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

# Solution 11:

# Solution 12:

# Solution 13:

# Solution 14:

# Solution 15:

# Solution 16:

# Solution 17:

# Solution"
329,Write a NumPy program compare two given arrays. ,"import numpy as np
a = np.array([1, 2])
b = np.array([4, 5])
print(""Array a: "",a)
print(""Array b: "",b)
print(""a > b"")
print(np.greater(a, b))
print(""a >= b"")
print(np.greater_equal(a, b))
print(""a < b"")
print(np.less(a, b))
print(""a <= b"")
print(np.less_equal(a, b))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([6, 7, 8, 9, 10])

print(a == b)

# Output:
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True"
330,Write a Pandas program to split the following given dataframe into groups based on school code and call a specific group with the name of the group. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
student_data = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])

print(""Original DataFrame:"")
print(student_data)
print('\nSplit the said data on school_code wise:')
grouped = student_data.groupby(['school_code'])
print(""Call school code 's001':"")
print(grouped.get_group('s001'))
print(""\nCall school code 's004':"")
print(grouped.get_group('s004'))
","df = pd.DataFrame({'School Code': ['A', 'A', 'A', 'B', 'B', 'B', 'C', 'C', 'C', 'D', 'D', 'D', 'E', 'E', 'F', 'F', 'F', 'G', 'G', 'H', 'H', 'I', 'I', 'J', 'J', 'K', 'K', 'L', '"
331,Write a Python program to compute the sum of digits of each number of a given list of positive integers. ,"from itertools import chain
def sum_of_digits(nums):
    return sum(int(y) for y in (chain(*[str(x) for x in nums])))

nums = [10,2,56]
print(""Original tuple: "") 
print(nums)
print(""Sum of digits of each number of the said list of integers:"")
print(sum_of_digits(nums))

nums = [10,20,4,5,70]
print(""\nOriginal tuple: "") 
print(nums)
print(""Sum of digits of each number of the said list of integers:"")
print(sum_of_digits(nums))
","def sum_digits(nums):
    sum = 0
    for num in nums:
        sum += num
    return sum

print(sum_digits([1, 2, 3, 4, 5]))

""""""

def sum_digits(nums):
    sum = 0
    for num in nums:
        sum += num
    return sum

print(sum_digits([1, 2, 3, 4, 5]"
332,Write a Python program to assess if a file is closed or not. ," f = open('abc.txt','r')
print(f.closed)
f.close()
print(f.closed)
","def is_closed(file):
    if file.closed:
        return True
    else:
        return False

print(is_closed(open('test.txt')))

""""""

# Solution 1

def is_closed(file):
    return file.closed

print(is_closed(open('test.txt')))

# Solution 2

def is_closed(file):
    return file.closed

print(is_closed(open('test.txt'"
333,Write a Python program to interleave two given list into another list randomly. ,"import random
def randomly_interleave(nums1, nums2):
    result =  [x.pop(0) for x in random.sample([nums1]*len(nums1) + [nums2]*len(nums2), len(nums1)+len(nums2))]
    return result
nums1 = [1,2,7,8,3,7]
nums2 = [4,3,8,9,4,3,8,9]
print(""Original lists:"") 
print(nums1)
print(nums2)
print(""\nInterleave two given list into another list randomly:"")
print(randomly_interleave(nums1, nums2))
","def interleave(l1, l2):
    return [l1[i] + l2[i] for i in range(len(l1))]

l1 = [1, 2, 3, 4, 5]
l2 = [6, 7, 8, 9, 10]
print(interleave(l1, l2))

""""""

def interleave(l1, l2):
    return [l1[i] + l2[i] for i in"
334,"Given variables x=30 and y=20, write a Python program to print ""30+20=50"". ","x = 30
y = 20
print(""\n%d+%d=%d"" % (x, y, x+y))
print()
","x=30
y=20
print(""30+20=50"")

""""""

x=30
y=20
print(""30+20=50"")

""""""

x=30
y=20
print(""30+20=50"")

""""""

x=30
y=20
print(""30+20=50"")

""""""

x=30
y=20
print(""30+20=50"")

"""""""
335,Write a Python program to find the characters in a list of strings which occur more than and less than a given number. ,"from collections import Counter 
from itertools import chain 
def max_aggregate(list_str, N):
    temp = (set(sub) for sub in list_str) 
    counts = Counter(chain.from_iterable(temp)) 
    gt_N =  [chr for chr, count in counts.items() if count > N]
    lt_N =  [chr for chr, count in counts.items() if count < N]
    return gt_N, lt_N
     
list_str = ['abcd', 'iabhef', 'dsalsdf', 'sdfsas', 'jlkdfgd'] 
print(""Original list:"")
print(list_str)
N = 3
result = max_aggregate(list_str, N)
print(""\nCharacters of the said list of strings which occur more than:"",N)
print(result[0])
print(""\nCharacters of the said list of strings which occur less than:"",N)
print(result[1])
","def solution(str1, str2, n):
    count = 0
    for i in range(len(str1)):
        if str1[i] < n:
            count += 1
    for i in range(len(str2)):
        if str2[i] < n:
            count += 1
    return count

print(solution(""abcde"", ""abcde"", 2))
print(solution(""abcde"","
336,Write a NumPy program to add two zeros to the beginning of each element of a given array of string values. ,"import numpy as np 

nums = np.array(['1.12', '2.23', '3.71', '4.23', '5.11'], dtype=np.str)
print(""Original array:"")
print(nums)
print(""\nAdd two zeros to the beginning of each element of the said array:"")
print(np.char.add('00', nums))
print(""\nAlternate method:"")
print(np.char.rjust(nums, 6, fillchar='0'))
","import numpy as np

arr = np.array(['a', 'b', 'c', 'd', 'e', 'f'])

arr = np.append(arr, np.zeros(3))

print(arr)

arr = np.append(arr, np.zeros(3), axis=0)

print(arr)

arr = np.append(arr, np.zeros(3), axis=1)"
337,Write a NumPy program to count the occurrence of a specified item in a given NumPy array. ,"import numpy as np
nums = np.array([10, 20, 20, 20, 20, 0, 20, 30, 30, 30, 0, 0, 20, 20, 0])
print(""Original array:"")
print(nums)
print(np.count_nonzero(nums == 10))
print(np.count_nonzero(nums == 20))
print(np.count_nonzero(nums == 30))
print(np.count_nonzero(nums == 0))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.count(5))

# Output:
# [2, 3, 4, 6, 7, 8, 9, 10]

# Explanation:
# The array contains the following items:
# 1. 5
# 2. 6
# 3. 7
# 4. 8
# 5. 9"
338,Write a Python program to sort a given positive number in descending/ascending order. ,"def test_dsc(n):
    return int(''.join(sorted(str(n), reverse = True)))

def test_asc(n):
    return int(''.join(sorted(list(str(n))))[::1])

n = 134543
print(""Original Number: "",n);
print(""Descending order of the said number: "", test_dsc(n));
print(""Ascending order of the said number: "", test_asc(n));
n = 43750973
print(""\nOriginal Number: "",n);
print(""Descending order of the said number: "", test_dsc(n));
print(""Ascending order of the said number: "", test_asc(n));
","def sort_num(num):
    if num < 0:
        return num
    else:
        return -num

print(sort_num(5))
print(sort_num(10))
print(sort_num(15))
print(sort_num(20))
print(sort_num(25))
print(sort_num(30))
print(sort_num(35))
print(sort_num(40))
print(sort_num(45))"
339,Write a Python program to check whether a string contains all letters of the alphabet. ,"import string
alphabet = set(string.ascii_lowercase)
input_string = 'The quick brown fox jumps over the lazy dog'
print(set(input_string.lower()) >= alphabet)
input_string = 'The quick brown fox jumps over the lazy cat'
print(set(input_string.lower()) >= alphabet)
","s = ""abcdefghijklmnopqrstuvwxyz""

def is_alphabet(s):
    for i in s:
        if i not in alphabet:
            return False
    return True

print(is_alphabet(s))

""""""

alphabet = ""abcdefghijklmnopqrstuvwxyz""

def is_alphabet(s):
    for i in s:
        if i not in alphabet:"
340,Write a Python program to delete a specific item from a given doubly linked list. ,"class Node(object):
    # Singly linked node
    def __init__(self, value=None, next=None, prev=None):
        self.value = value
        self.next = next
        self.prev = prev

class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, value):
        # Append an item 
        new_item = Node(value, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item
        self.count += 1
    
    def iter(self):
        # Iterate the list
        current = self.head
        while current:
            item_val = current.value
            current = current.next
            yield item_val

    def print_foward(self):
        for node in self.iter():
            print(node)   
        
    def search_item(self, val):
         for node in self.iter():
            if val == node:
                return True
         return False
     
    def delete(self, value):
        # Delete a specific item
        current = self.head
        node_deleted = False
        if current is None:
            node_deleted = False

        elif current.value == value:
            self.head = current.next
            self.head.prev = None
            node_deleted = True

        elif self.tail.value == value:
            self.tail = self.tail.prev
            self.tail.next = None
            node_deleted = True

        else:
            while current:
                if current.value == value:
                    current.prev.next = current.next
                    current.next.prev = current.prev
                    node_deleted = True
                current = current.next

        if node_deleted:
            self.count -= 1

items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')
items.append_item('SQL')

print(""Original list:"")
items.print_foward()

items.delete(""Java"")
items.delete(""Python"")
print(""\nList after deleting two items:"")
items.print_foward()
","def delete_node(node):
    node.next.prev = node.prev
    node.prev.next = node.next
    node.prev = None
    node.next = None

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed"
341,Write a NumPy program to convert a list and tuple into arrays. ,"import numpy as np
my_list = [1, 2, 3, 4, 5, 6, 7, 8]
print(""List to array: "")
print(np.asarray(my_list))
my_tuple = ([8, 4, 6], [1, 2, 3])
print(""Tuple to array: "")
print(np.asarray(my_tuple))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([1, 2, 3, 4, 5])

print(a)
print(b)

# Solution:
a = np.array([1, 2, 3, 4, 5])
b = np.array([1, 2, 3, 4, 5])

print(a)
print(b)

# Solution:
a = np.array(["
342,Write a Pandas program to create a plot of distribution of UFO (unidentified flying object) observation time. ,"import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv(r'ufo.csv')
df['duration_sec'] = (df['length_of_encounter_seconds'].astype(float))/60
s = df[""duration_sec""].quantile(0.95)
temp = df['duration_sec']
temp = temp.sort_values()
temp = temp[temp < s]
plt.figure(figsize=(10, 8))
sns.distplot(temp)
plt.xlabel('Duration(min)', fontsize=20)
plt.ylabel(""Frequency"", fontsize=15)
plt.xticks(fontsize=12)
plt.title(""-Distribution of UFO obervation time-"", fontsize=20)
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

# Read the data
df = pd.read_csv('/Users/krishna/Downloads/UFO_observation_time.csv')

# Create a plot
plt.figure(figsize=(10, 6))
plt.hist(df['observation_time'], bins=50)
plt.show()

# Create a plot"
343,"Write a NumPy program to find the union of two arrays. Union will return the unique, sorted array of values that are in either of the two input arrays. ","import numpy as np
array1 = np.array([0, 10, 20, 40, 60, 80])
print(""Array1: "",array1)
array2 = [10, 30, 40, 50, 70]
print(""Array2: "",array2)
print(""Unique sorted array of values that are in either of the two input arrays:"")
print(np.union1d(array1, array2))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([2, 3, 4, 5, 6])

print(np.union1d(a, b))

# Output:
# [1 2 3 4 5 6]

# Hint: You can use the built-in function np.union1d() to solve this problem."
344,Write a Python program to sum all the items in a dictionary. ,"my_dict = {'data1':100,'data2':-54,'data3':247}
print(sum(my_dict.values()))
","def sum_dict(d):
    sum = 0
    for i in d.values():
        sum += i
    return sum

d = {'a': 1, 'b': 2, 'c': 3}
print(sum_dict(d))

""""""

# Solution

def sum_dict(d):
    sum = 0
    for i in d.values():
        sum += i
    return sum

d = {'a': 1, 'b': 2, '"
345,"Write a Python program to find the ration of positive numbers, negative numbers and zeroes in an array of integers. ","from array import array

def plusMinus(nums):
    n = len(nums)
    n1 = n2 = n3 = 0
    
    for x in nums:
        if x > 0:
            n1 += 1
        elif x < 0:
            n2 += 1
        else:
            n3 += 1
            
    return round(n1/n,2), round(n2/n,2), round(n3/n,2)

nums = array('i', [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])
print(""Original array:"",nums)
nums_arr = list(map(int, nums))
result = plusMinus(nums_arr)
print(""Ratio of positive numbers, negative numbers and zeroes:"")
print(result)
nums = array('i', [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])
print(""\nOriginal array:"",nums)
nums_arr = list(map(int, nums))
result = plusMinus(nums_arr)
print(""Ratio of positive numbers, negative numbers and zeroes:"")
print(result)
","def solution(arr):
    # Write your code here
    count = 0
    for i in arr:
        if i > 0:
            count += 1
        elif i < 0:
            count -= 1
        else:
            count = 0
    return count

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(arr))

arr = [1, 2"
346,Write a Python program to sort a list of elements using the selection sort algorithm. ,"def selectionSort(nlist):
   for fillslot in range(len(nlist)-1,0,-1):
       maxpos=0
       for location in range(1,fillslot+1):
           if nlist[location]>nlist[maxpos]:
               maxpos = location

       temp = nlist[fillslot]
       nlist[fillslot] = nlist[maxpos]
       nlist[maxpos] = temp

nlist = [14,46,43,27,57,41,45,21,70]
selectionSort(nlist)
print(nlist)
","def selectionSort(arr):
    for i in range(len(arr)):
        min_index = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_index]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr

arr = [10, 4, 8, 2, 5, 1, 3]
print("
347,Write a Python program to interleave multiple lists of the same length. ,"def interleave_multiple_lists(list1,list2,list3):
    result = [el for pair in zip(list1, list2, list3) for el in pair]
    return result
     
list1 = [1,2,3,4,5,6,7]
list2 = [10,20,30,40,50,60,70]
list3 = [100,200,300,400,500,600,700]
print(""Original list:"")
print(""list1:"",list1)
print(""list2:"",list2)
print(""list3:"",list3)
print(""\nInterleave multiple lists:"")
print(interleave_multiple_lists(list1,list2,list3))
","def interleave(l1, l2):
    return [l1[i] + l2[i] for i in range(len(l1))]

l1 = [1, 2, 3, 4, 5]
l2 = [6, 7, 8, 9, 10]

print(interleave(l1, l2))

""""""

def interleave(l1, l2):
    return [l1[i] + l2[i] for i in"
348,"Write a Python program to combines two or more dictionaries, creating a list of values for each key. ","from collections import defaultdict
def test(*dicts):
  result = defaultdict(list)
  for el in dicts:
    for key in el:
      result[key].append(el[key])
  return dict(result)
 
d1 = {'w': 50, 'x': 100, 'y': 'Green', 'z': 400}
d2 = {'x': 300, 'y': 'Red', 'z': 600}

print(""Original dictionaries:"")
print(d1)
print(d2)
print(""\nCombined dictionaries, creating a list of values for each key:"")
print(test(d1, d2))
","def combine_dicts(dict1, dict2):
    result = {}
    for key in dict1:
        result[key] = dict1[key]
    for key in dict2:
        result[key] = dict2[key]
    return result

print(combine_dicts({""a"": 1, ""b"": 2}, {""c"": 3, ""d"": 4, ""e"": 5}))

""""""

""""""

"""""""
349,Write a Pandas program to drop a index level from a multi-level column index of a dataframe. ,"import pandas as pd
cols = pd.MultiIndex.from_tuples([(""a"", ""x""), (""a"", ""y""), (""a"", ""z"")])
print(""\nConstruct a Dataframe using the said MultiIndex levels: "")
df = pd.DataFrame([[1,2,3], [3,4,5], [5,6,7]], columns=cols)
print(df)
#Levels are 0-indexed beginning from the top.
print(""\nRemove the top level index:"")
df.columns = df.columns.droplevel(0)
print(df)
df = pd.DataFrame([[1,2,3], [3,4,5], [5,6,7]], columns=cols)
print(""\nOriginal dataframe:"")
print(df)
print(""\nRemove the index next to top level:"")
df.columns = df.columns.droplevel(1)
print(df)
","import pandas as pd

df = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""B"": [10, 20, 30, 40, 50]})

df.index = [""a"", ""b"", ""c"", ""d"", ""e""]

print(df)

# Solution:

# df.drop(""A"", axis=1)

# Solution:

# df.drop([""a"","
350,Write a Pandas program to get all the sighting days of the unidentified flying object (ufo) between 1950-10-10 and 1960-10-10. ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nSighting days of the unidentified flying object (ufo) between 1949-10-10 and 1960-10-10:"")
selected_period = df[(df['Date_time'] >= '1950-01-01 00:00:00') & (df['Date_time'] <= '1960-12-31 23:59:59')]
print(selected_period)
","# Solution:

# Input:
# Date Range:
# Range:
# Output:
# Date Range:
# Range:
# Date Range:
# Range:
# Date Range:
# Range:
# Date Range:
# Range:
# Date Range:
# Range:
# Date Range:
# Range:
# Date Range:
# Range:
# Date Range:
# Range:"
351,Write a Python program to make an iterator that drops elements from the iterable as soon as an element is a positive number. ,"import itertools as it
def drop_while(nums):
    return it.dropwhile(lambda x : x < 0, nums)
nums = [-1,-2,-3,4,-10,2,0,5,12]
print(""Original list: "",nums)
result = drop_while(nums)
print(""Drops elements from the iterable when a positive number arises \n"",list(result))
#Alternate solution
def negative_num(x):
    return x < 0
def drop_while(nums):
    return it.dropwhile(negative_num, nums)
nums = [-1,-2,-3,4,-10,2,0,5,12]
print(""Original list: "",nums)
result = drop_while(nums)
print(""Drops elements from the iterable when a positive number arises \n"",list(result))
","def positive_numbers(iterable):
    for number in iterable:
        if number > 0:
            yield number

iterator = positive_numbers(range(10))

print(next(iterator))
print(next(iterator))
print(next(iterator))
print(next(iterator))
print(next(iterator))
print(next(iterator))
print(next(iterator))
print(next(iterator))
print("
352,Write a Python program to remove empty lists from a given list of lists. ,"list1 = [[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []]
print(""Original list:"")
print(list1)
print(""\nAfter deleting the empty lists from the said lists of lists"")
list2 = [x for x in list1 if x]
print(list2)
","def remove_empty_lists(lst):
    for i in range(len(lst)):
        if len(lst[i]) == 0:
            lst.pop(i)
    return lst

lst = [[1, 2, 3], [4, 5, 6], []]
print(remove_empty_lists(lst))

""""""

def remove_empty_lists(lst):
    for i in range(len(lst)):"
353,Write a Python program to sort a list of elements using Cocktail shaker sort. ,"def cocktail_shaker_sort(nums):
    for i in range(len(nums)-1, 0, -1):
        is_swapped = False
        
        for j in range(i, 0, -1):
            if nums[j] < nums[j-1]:
                nums[j], nums[j-1] = nums[j-1], nums[j]
                is_swapped = True

        for j in range(i):
            if nums[j] > nums[j+1]:
                nums[j], nums[j+1] = nums[j+1], nums[j]
                is_swapped = True
        
        if not is_swapped:
            return nums
 
num1 = input('Input comma separated numbers:\n').strip()
nums = [int(item) for item in num1.split(',')]
print(cocktail_shaker_sort(nums))
","def cocktail_shaker_sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [5, 4, 3, 2, 1]
print(cocktail_shaker_sort(arr))

"""""""
354,"Write a Python program to check whether a given string contains a capital letter, a lower case letter, a number and a minimum length. ","def check_string(s):
    messg = []
    if not any(x.isupper() for x in s):
        messg.append('String must have 1 upper case character.')
    if not any(x.islower() for x in s):
        messg.append('String must have 1 lower case character.')
    if not any(x.isdigit() for x in s):
        messg.append('String must have 1 number.')
    if len(s) < 8:
        messg.append('String length should be atleast 8.')    
    if not messg:
        messg.append('Valid string.')
    return messg
    
s = input(""Input the string: "")
print(check_string(s))
","def check_capital(string):
    if string.isupper():
        return True
    elif string.islower():
        return True
    elif string.isdigit():
        return True
    else:
        return False

print(check_capital(""Python is a programming language""))

""""""

# Solution:

def check_capital(string):
    if string.isupper():
        return True
    el"
355,"Write a NumPy program to extract first, third and fifth elements of the third and fifth rows from a given (6x6) array. ","import numpy as np
arra_data = np.arange(0,36).reshape((6, 6))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: First, third and fifth elements of the third and fifth rows"")
print(arra_data[2::2, ::2]) 
","import numpy as np

arr = np.array([[1, 2, 3, 4, 5, 6],
                [7, 8, 9, 10, 11, 12],
                [13, 14, 15, 16, 17, 18]])

print(arr[0][3])
print(arr[1][3])
print(arr[2][3])

# Output:
# 7
# 8
#"
356,Write a Python program to check if a given function is a generator or not. Use types.GeneratorType(),"import types
def a(x):
    yield x
        
def b(x):
    return x

def add(x, y):
    return x + y

print(isinstance(a(456), types.GeneratorType))
print(isinstance(b(823), types.GeneratorType))
print(isinstance(add(8,2), types.GeneratorType))
","def is_generator(obj):
    if type(obj) == types.GeneratorType:
        return True
    else:
        return False

print(is_generator(lambda: 1))
print(is_generator(lambda: 2))
print(is_generator(lambda: 3))
print(is_generator(lambda: 4))
print(is_generator(lambda: 5))
print(is_generator(lambda:"
357,Write a Python program to find the string similarity between two given strings. ,"import difflib
def string_similarity(str1, str2):
    result =  difflib.SequenceMatcher(a=str1.lower(), b=str2.lower())
    return result.ratio()
str1 = 'Python Exercises'
str2 = 'Python Exercises'
print(""Original string:"")
print(str1)
print(str2)
print(""Similarity between two said strings:"")
print(string_similarity(str1,str2))
str1 = 'Python Exercises'
str2 = 'Python Exercise'
print(""\nOriginal string:"")
print(str1)
print(str2)
print(""Similarity between two said strings:"")
print(string_similarity(str1,str2))
str1 = 'Python Exercises'
str2 = 'Python Ex.'
print(""\nOriginal string:"")
print(str1)
print(str2)
print(""Similarity between two said strings:"")
print(string_similarity(str1,str2))
str1 = 'Python Exercises'
str2 = 'Python'
print(""\nOriginal string:"")
print(str1)
print(str2)
print(""Similarity between two said strings:"")
print(string_similarity(str1,str2))
str1 = 'Python Exercises'
str1 = 'Java Exercises'
print(""\nOriginal string:"")
print(str1)
print(str2)
print(""Similarity between two said strings:"")
print(string_similarity(str1,str2))
","def string_similarity(s1, s2):
    if len(s1)!= len(s2):
        return 0
    count = 0
    for i in range(len(s1)):
        if s1[i]!= s2[i]:
            count += 1
    return count / float(len(s1))

print(string_similarity(""abc"", ""abc""))
print(string_similarity(""abc"", ""abcd""))
print(string_similar"
358,Write a Python program to convert a pair of values into a sorted unique array. ,"L = [(1, 2), (3, 4), (1, 2), (5, 6), (7, 8), (1, 2), (3, 4), (3, 4),
 (7, 8), (9, 10)]
print(""Original List: "", L)
print(""Sorted Unique Data:"",sorted(set().union(*L)))
","def pair_sort(arr):
    arr.sort()
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(pair_sort(arr))

""""""

def pair_sort(arr):
    arr.sort()
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(pair_sort(arr))

"""""""
359,"Write a NumPy program to calculate cumulative sum of the elements along a given axis, sum over rows for each of the 3 columns and sum over columns for each of the 2 rows of a given 3x3 array. ","import numpy as np
x = np.array([[1,2,3], [4,5,6]])
print(""Original array: "")
print(x)
print(""Cumulative sum of the elements along a given axis:"")
r = np.cumsum(x)
print(r)
print(""\nSum over rows for each of the 3 columns:"")
r = np.cumsum(x,axis=0) 
print(r)
print(""\nSum over columns for each of the 2 rows:"")
r = np.cumsum(x,axis=1) 
print(r)

","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a.sum(axis=0))
print(a.sum(axis=1))
print(a.sum(axis=2))

# Output:
# array([[7, 10, 15"
360,Write a Python program to check multiple keys exists in a dictionary. ,"student = {
  'name': 'Alex',
  'class': 'V',
  'roll_id': '2'
}
print(student.keys() >= {'class', 'name'})
print(student.keys() >= {'name', 'Alex'})
print(student.keys() >= {'roll_id', 'name'})
","def check_keys(d, keys):
    for key in keys:
        if key in d:
            print(key, ""exists"")
        else:
            print(key, ""does not exist"")

d = {'a': 1, 'b': 2, 'c': 3}
check_keys(d, ['a', 'b', 'c'])

""""""

def check_keys(d, keys):
    for key in keys:
        if key in d:"
361,Write a Python program to create two strings from a given string. Create the first string using those character which occurs only once and create the second string which consists of multi-time occurring characters in the said string. ,"from collections import Counter  
def generateStrings(input): 
     str_char_ctr = Counter(input) 
     part1 = [ key for (key,count) in str_char_ctr.items() if count==1] 
     part2 = [ key for (key,count) in str_char_ctr.items() if count>1] 
     part1.sort() 
     part2.sort()
     return part1,part2
input = ""aabbcceffgh""
s1, s2 = generateStrings(input)
print(''.join(s1))   
print(''.join(s2))
","def solution(s):
    # your code goes here
    return s[0] + s[1]

print(solution(""abcabcbb""))
print(solution(""bbbbb""))
print(solution(""pwwkew""))
print(solution(""abba""))
print(solution(""cbbdgfedcbacb""))
print(solution("""
362,Write a Pandas program to check whether only lower case or upper case is present in a given column of a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['ABCD','EFGF', 'hhhh', 'abcd', 'EAWQaaa'],
    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})

print(""Original DataFrame:"")
print(df)
print(""\nIs lower (company_code)?"")
df['company_code_ul_cases'] = list(map(lambda x: x.islower(), df['company_code']))
print(df)
print(""\nIs Upper (company_code)?"")
df['company_code_ul_cases'] = list(map(lambda x: x.isupper(), df['company_code']))
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': ['a', 'b', 'c', 'd'], 'col2': ['e', 'f', 'g', 'h']})

print(df['col1'].str.lower().str.isupper())

# Output:
# True
# True
# True
# False

print(df['col1'].str.lower().str."
363,"Write a Python program to find the minimum, maximum value for each tuple position in a given list of tuples. ","def max_min_list_tuples(nums):
    zip(*nums)
    result1 = map(max, zip(*nums))
    result2 = map(min, zip(*nums))
    return list(result1), list(result2)

nums = [(2,3),(2,4),(0,6),(7,1)]
print(""Original list:"")
print(nums)

result = max_min_list_tuples(nums)
print(""\nMaximum value  for each tuple position in the said list of tuples:"")
print(result[0])
print(""\nMinimum value  for each tuple position in the said list of tuples:"")
print(result[1])
","def min_max(lst):
    min_val = lst[0][0]
    max_val = lst[0][0]
    for i in range(1, len(lst)):
        if lst[i][0] < min_val:
            min_val = lst[i][0]
        if lst[i][0] > max_val:
            max_val = lst[i][0"
364,Write a Python program to convert a given list of strings into list of lists. ,"def strings_to_listOflists(colors):
    result = [list(word) for word in colors]
    return result

colors = [""Red"", ""Maroon"", ""Yellow"", ""Olive""]
print('Original list of strings:')
print(colors)
print(""\nConvert the said list of strings into list of lists:"")
print(strings_to_listOflists(colors))
","def solution(str_list):
    # your code goes here
    return [[str_list[i:i+3]] for i in range(0, len(str_list), 3)]

print(solution([""a"", ""b"", ""c"", ""d"", ""e"", ""f""]))

""""""

def solution(str_list):
    # your code goes here
    return [[str_list[i:i+3]] for i in range(0, len("
365,Write a Pandas program to print a DataFrame without index. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32]},
     index =  [1, 2, 3, 4, 5, 6])
print(""Original DataFrame with single index:"")
print(df)
print(""\nDataFrame without index:"")
print(df.to_string(index=False))
","import pandas as pd

df = pd.DataFrame({""Name"": [""Rolf"", ""Charlie"", ""Anna"", ""Bob"", ""Jen"", ""Sue""],
                   ""Score"": [90, 80, 70, 60, 50, 40]})

print(df)

# Solution:

# df = pd.DataFrame({""Name"": [""Rolf"", ""Charlie"", ""Anna"", ""Bob"", ""Jen"", ""Sue""],
#                   ""Score"": [90, 80,"
366,Write a Python program to display some information about the OS where the script is running. ,"import platform as pl

os_profile = [
        'architecture',
        'linux_distribution',
        'mac_ver',
        'machine',
        'node',
        'platform',
        'processor',
        'python_build',
        'python_compiler',
        'python_version',
        'release',
        'system',
        'uname',
        'version',
    ]
for key in os_profile:
  if hasattr(pl, key):
    print(key +  "": "" + str(getattr(pl, key)()))
","import os
print(""The OS where the script is running is:"", os.name)
print(""The OS where the script is running is:"", os.name)
print(""The OS where the script is running is:"", os.name)
print(""The OS where the script is running is:"", os.name)
print(""The OS where the script is running is:"", os.name)
print(""The OS where the script is running is:"", os.name)
print(""The OS where"
367,Write a NumPy program to create a 8x8 matrix and fill it with a checkerboard pattern. ,"import numpy as np
x = np.ones((3,3))
print(""Checkerboard pattern:"")
x = np.zeros((8,8),dtype=int)
x[1::2,::2] = 1
x[::2,1::2] = 1
print(x)
","import numpy as np

# Create a checkerboard matrix
checkerboard = np.zeros((8, 8), dtype=int)

# Fill the checkerboard matrix with pattern
for i in range(8):
    for j in range(8):
        if i % 2 == 0 and j % 2 == 0:
            checkerboard[i][j] = 1
        elif i % 2 == 0 and j % 2!= 0:"
368,"Write a Python program to filter the height and width of students, which are stored in a dictionary. ","def filter_data(students):
    result = {k: s for k, s in students.items() if s[0] >=6.0 and s[1] >=70}
    return result    
 
students = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}
print(""Original Dictionary:"")
print(students)
print(""\nHeight > 6ft and Weight> 70kg:"")
print(filter_data(students))
","height_dict = {
    'Harry': 95,
    'Hermione': 99,
    'Draco': 74,
    'Neville': 62
}

height_dict['Harry'] = 96
height_dict['Hermione'] = 98
height_dict['Draco'] = 75
height_dict['Neville'] = 63

height_dict.pop('Hermione')
height_dict.pop('Draco')
height_dict.pop('Neville"
369,Write a NumPy program to find the nearest value from a given value in an array. ,"import numpy as np
x = np.random.uniform(1, 12, 5)
v = 4
n = x.flat[np.abs(x - v).argmin()]
print(n)
","import numpy as np

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(x[np.argmin(x)])

# Output:
# 2

# Example 2:

# Input:
# x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# y = [1, 2, 3, 4, 5, 6, 7"
370,Write a NumPy program to create a two-dimensional array of specified format. ,"import numpy as np   
print(""Create an array of shape (15,10):"") 
print(""Command-1"")
print(np.arange(1, 151).reshape(15, 10)) 
print(""\nCommand-2"")
print(np.arange(1, 151).reshape(-1, 10)) 
print(""\nCommand-3"")
print(np.arange(1, 151).reshape(15, -1))
","import numpy as np

# Create a two-dimensional array of specified format
arr = np.array([[1, 2, 3, 4, 5],
                [6, 7, 8, 9, 10],
                [11, 12, 13, 14, 15],
                [16, 17, 18, 19, 20]])

# Print the array
print(arr)

# Print the shape of the array
print(arr.shape)

# Print the size of the array"
371,"Write a NumPy program to create an array of 4,5 shape and to reverse the rows of the said array. After reversing 1st row will be 4th and 4th will be 1st, 2nd row will be 3rd row and 3rd row will be 2nd row. ","import numpy as np
array_nums = np.arange(20).reshape(4,5)
print(""Original array:"")
print(array_nums)
print(""\nAfter reversing:"")
array_nums[:] = array_nums[3::-1]
print(array_nums)
","import numpy as np

arr = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])
print(arr)
arr = arr[::-1]
print(arr)

arr = np.array([[1"
372,"Write a Python program to select a random element from a list, set, dictionary (value) and a file from a directory. Use random.choice()","import random
import os
print(""Select a random element from a list:"")
elements = [1, 2, 3, 4, 5]
print(random.choice(elements))
print(random.choice(elements))
print(random.choice(elements))
print(""\nSelect a random element from a set:"")
elements = set([1, 2, 3, 4, 5])
# convert to tuple because sets are invalid inputs
print(random.choice(tuple(elements)))
print(random.choice(tuple(elements)))
print(random.choice(tuple(elements)))
print(""\nSelect a random value from a dictionary:"")
d = {""a"": 1, ""b"": 2, ""c"": 3, ""d"": 4, ""e"": 5}
key = random.choice(list(d))
print(d[key])
key = random.choice(list(d))
print(d[key])
key = random.choice(list(d))
print(d[key]) 
print(""\nSelect a random file from a directory.:"")
print(random.choice(os.listdir(""/"")))
","import random

def random_choice(lst):
    return random.choice(lst)

def random_set(lst):
    return set(random.sample(lst, k=len(lst)))

def random_dict(lst):
    return dict(random.sample(lst, k=2))

def random_file(dir):
    return open(dir, 'r').read"
373,Write a NumPy program to set zero to lower triangles along the last two axes of a three-dimensional of a given array. ,"import numpy as np
arra=np.ones((1,8,8))
print(""Original array:"")
print(arra)
result = np.triu(arra, k=1)
print(""\nResult:"")
print(result)
","import numpy as np

a = np.array([[1, 2, 3],
              [4, 5, 6],
              [7, 8, 9]])

print(a)

a[0, :] = 0
a[:, 0] = 0
a[:, :] = 0

print(a)

a[0, :] = 0
a[:, 0] = 0
a[:, :]"
374,Write a Python program to create a key-value list pairings in a given dictionary. ,"from itertools import product
def test(dictt):
    result = [dict(zip(dictt, sub)) for sub in product(*dictt.values())]
    return result

students = {1: ['Jean Castro'], 2: ['Lula Powell'], 3: ['Brian Howell'], 4: ['Lynne Foster'], 5: ['Zachary Simon']}

print(""\nOriginal dictionary:"")
print(students)
print(""\nA key-value list pairings of the said dictionary:"")
print(test(students))
","def create_key_value_list(dictionary):
    key_value_list = []
    for key, value in dictionary.items():
        key_value_list.append((key, value))
    return key_value_list

dictionary = {'a': 1, 'b': 2, 'c': 3}
print(create_key_value_list(dictionary))

""""""

# Solution:

def create_key_value_list(d"
375,"Write a Python program to generate a random alphabetical character, alphabetical string and alphabetical string of a fixed length. Use random.choice()","import random
import string
print(""Generate a random alphabetical character:"")
print(random.choice(string.ascii_letters))
print(""\nGenerate a random alphabetical string:"")
max_length = 255
str1 = """"
for i in range(random.randint(1, max_length)):
    str1 += random.choice(string.ascii_letters)
print(str1)
print(""\nGenerate a random alphabetical string of a fixed length:"")
str1 = """"
for i in range(10):
    str1 += random.choice(string.ascii_letters)
print(str1)
","import random

def random_alphabet():
    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']
    return random.choice"
376,"Write a NumPy program to calculate cumulative product of the elements along a given axis, sum over rows for each of the 3 columns and product over columns for each of the 2 rows of a given 3x3 array. ","import numpy as np
x = np.array([[1,2,3], [4,5,6]])
print(""Original array: "")
print(x)
print(""Cumulative product  of the elements along a given axis:"")
r = np.cumprod(x)
print(r)
print(""\nProduct over rows for each of the 3 columns:"")
r = np.cumprod(x,axis=0) 
print(r)
print(""\nProduct  over columns for each of the 2 rows:"")
r = np.cumprod(x,axis=1) 
print(r)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a.sum(axis=0))
print(a.sum(axis=1))
print(a.cumprod(axis=0))
print(a.cumprod(axis=1))"
377,Write a Python program to search a date from a given string using arrow module. ,"import arrow
print(""\nSearch a date from a string:"")
d1 = arrow.get('David was born in 11 June 2003', 'DD MMMM YYYY')
print(d1)
","import arrow

date = input(""Enter the date: "")

print(arrow.get(date))

""""""

import arrow

date = input(""Enter the date: "")

print(arrow.get(date))"
378,"Write a Pandas program to create a new DataFrame based on existing series, using specified argument and override the existing columns names. ","import pandas as pd
s1 = pd.Series([0, 1, 2, 3], name='col1')
s2 = pd.Series([0, 1, 2, 3])
s3 = pd.Series([0, 1, 4, 5], name='col3')
df = pd.concat([s1, s2, s3], axis=1, keys=['column1', 'column2', 'column3'])
print(df)
","import pandas as pd

# Create a new DataFrame
df = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""B"": [10, 20, 30, 40, 50]})

# Create a new DataFrame with the specified columns
df2 = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""C"": [10, 20, 30, 40, 50"
379,Write a Python program to create all possible permutations from a given collection of distinct numbers.,"def permute(nums):
  result_perms = [[]]
  for n in nums:
    new_perms = []
    for perm in result_perms:
      for i in range(len(perm)+1):
        new_perms.append(perm[:i] + [n] + perm[i:])
        result_perms = new_perms
  return result_perms

my_nums = [1,2,3]
print(""Original Cofllection: "",my_nums)
print(""Collection of distinct numbers:\n"",permute(my_nums))
","def permute(nums):
    if len(nums) == 0:
        return []
    if len(nums) == 1:
        return [nums]
    else:
        return [nums[0] + [nums[i] for i in range(len(nums)) if i!= nums[i]] for nums in permute(nums[1:])]

print(permute([1, 2, 3]))

"""""""
380,Write a Python program to find the maximum and minimum values in a given list of tuples using lambda function. ,"def max_min_list_tuples(class_students):
    return_max = max(class_students,key=lambda item:item[1])[1]
    return_min = min(class_students,key=lambda item:item[1])[1]
    return return_max, return_min
    
class_students = [('V', 62), ('VI', 68), ('VII', 72), ('VIII', 70), ('IX', 74), ('X', 65)]
print(""Original list with tuples:"")
print(class_students)
print(""\nMaximum and minimum values of the said list of tuples:"")
print(max_min_list_tuples(class_students))
","def max_min(tup):
    return max(tup), min(tup)

tup = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_min(tup))

""""""

# Solution 1

def max_min(tup):
    return max(tup), min(tup)

tup = [1, 2, 3, 4, 5, 6"
381,Write a Python program to append items from inerrable to the end of the array. ,"from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print(""Original array: ""+str(array_num))
array_num.extend(array_num)
print(""Extended array: ""+str(array_num))
","def append_to_end(arr, item):
    arr.append(item)

arr = [1, 2, 3, 4, 5]
append_to_end(arr, 6)
print(arr)

""""""

def append_to_end(arr, item):
    arr.append(item)
    return arr

arr = [1, 2, 3, 4, 5]
append_to_end(arr, 6)
print(arr)"
382,Write a Python function that takes a list of words and return the longest word and the length of the longest one. ,"def find_longest_word(words_list):
    word_len = []
    for n in words_list:
        word_len.append((len(n), n))
    word_len.sort()
    return word_len[-1][0], word_len[-1][1]
result = find_longest_word([""PHP"", ""Exercises"", ""Backend""])
print(""\nLongest word: "",result[1])
print(""Length of the longest word: "",result[0])
","def longest_word(words):
    longest_word = """"
    longest_len = 0
    for word in words:
        if len(word) > longest_len:
            longest_word = word
            longest_len = len(word)
    return longest_word, longest_len

print(longest_word([""apple"", ""banana"", ""tacocat"", ""apple"", ""tacocat"", ""t"
383,"Write a Python program to configure the rounding to round to the nearest - with ties going towards 0, with ties going away from 0. Use decimal.ROUND_HALF_DOWN, decimal.ROUND_HALF_UP","import decimal
print(""Configure the rounding to round to the nearest, with ties going towards 0:"")
decimal.getcontext().prec = 1
decimal.getcontext().rounding = decimal.ROUND_HALF_DOWN
print(decimal.Decimal(10) / decimal.Decimal(4))
print(""\nConfigure the rounding to round to the nearest, with ties going away from 0:"")
decimal.getcontext().prec = 1
decimal.getcontext().rounding = decimal.ROUND_HALF_UP
print(decimal.Decimal(10) / decimal.Decimal(4))
","import decimal

def rounding(x):
    return decimal.ROUND_HALF_DOWN(x)

print(rounding(1.5))
print(rounding(2.5))
print(rounding(3.5))
print(rounding(4.5))
print(rounding(5.5))
print("
384,Write a Python program to access only unique key value of a Python object. ,"import json
python_obj = '{""a"":  1, ""a"":  2, ""a"":  3, ""a"": 4, ""b"": 1, ""b"": 2}'
print(""Original Python object:"")
print(python_obj)
json_obj = json.loads(python_obj)
print(""\nUnique Key in a JSON object:"")
print(json_obj) 
","import collections

class Solution:
    def __init__(self):
        self.d = collections.defaultdict(list)
    
    def add(self, key, value):
        self.d[key].append(value)
    
    def get(self, key):
        return self.d[key][0]
    
    def remove(self, key):
        self.d[key].pop(0)
    
    def get_unique(self):"
385,Write a NumPy program to read a CSV data file and store records in an array. ,"from numpy import genfromtxt
csv_data = genfromtxt('fdata.csv', dtype=['S10','float32','float32','float32','float32'], delimiter="","")
print(csv_data)
","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    file_data = list(csv_reader)

file_data.pop(0)

numbers = []

for i in range(len(file_data)):
    numbers.append(int(file_data[i][1]))

numbers.sort()

print(numbers)

# Solution"
386,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight dataframe's specific columns. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
def highlight_cols(s):
    color = 'grey'
    return 'background-color: %s' % color
print(""\nHighlight specific columns:"")
df.style.applymap(highlight_cols, subset=pd.IndexSlice[:, ['B', 'C']])
","import pandas as pd

df = pd.DataFrame(
    {
        ""First column"": [""Rolf"", ""Charlie"", ""Anna"", ""Bob"", ""Jen"", ""Sue"", ""Anne"", ""Brad""],
        ""Second column"": [1, 2, 3, 4, 5, 6, 7, 8],
        ""Third column"": [10, 20, 30, 40, 50, 60, 70, 80],
    }"
387,Write a Python function that accepts a string and calculate the number of upper case letters and lower case letters. ,"def string_test(s):
    d={""UPPER_CASE"":0, ""LOWER_CASE"":0}
    for c in s:
        if c.isupper():
           d[""UPPER_CASE""]+=1
        elif c.islower():
           d[""LOWER_CASE""]+=1
        else:
           pass
    print (""Original String : "", s)
    print (""No. of Upper case characters : "", d[""UPPER_CASE""])
    print (""No. of Lower case Characters : "", d[""LOWER_CASE""])

string_test('The quick Brown Fox')
","def count_upper_lower(string):
    count = 0
    for i in string:
        if i.isupper():
            count += 1
    return count

print(count_upper_lower(""Python is fun""))

""""""

def count_upper_lower(string):
    count = 0
    for i in string:
        if i.isupper():
            count += 1
    return count

print(count_upper_lower(""Python"
388,Write a Python program to create a list containing the power of said number in bases raised to the corresponding number in the index using Python map. ,"bases_num = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
index = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(""Base numbers abd index: "")
print(bases_num)
print(index)
result = list(map(pow, bases_num, index))
print(""\nPower of said number in bases raised to the corresponding number in the index:"")
print(result)
","def power(x, y):
    return x ** y

print(power(2, 3))

""""""

# Solution:

def power(x, y):
    return x ** y

print(power(2, 3))

""""""

# Solution:

def power(x, y):
    return x ** y

print(power(2, 3))

""""""

# Solution:"
389,Write a Pandas program to extract year between 1800 to 2200 from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],
    'year': ['year 1800','year 1700','year 2300', 'year 1900', 'year 2200']
    })
print(""Original DataFrame:"")
print(df)
def find_year(text):
    #line=re.findall(r""\b(18[0][0]|2[0-2][00])\b"",text)
    result = re.findall(r""\b(18[0-9]{2}|19[0-8][0-9]|199[0-9]|2[01][0-9]{2}|2200)\b"",text)
    return result
df['year_range']=df['year'].apply(lambda x: find_year(x))
print(""\Extracting year between 1800 to 2200:"")
print(df)
","import pandas as pd

df = pd.read_csv(""C:/Users/DELL/Downloads/data/data.csv"")

df[""year""] = df[""year""].astype(""int64"")

df[""year""] = df[""year""].astype(""int64"")

df[""year""] = df[""year""].astype(""int64"")

df[""year""] = df[""year""].astype(""int64"
390,Write a Pandas program to extract the day name from a specified date. Add 2 days and 1 business day with the specified date. ,"import pandas as pd
newday = pd.Timestamp('2020-02-07')
print(""First date:"")
print(newday)
print(""\nThe day name of the said date:"")
print(newday.day_name())
print(""\nAdd 2 days with the said date:"")
newday1 = newday + pd.Timedelta('2 day')
print(newday1.day_name())
print(""\nNext business day:"")
nbday = newday + pd.offsets.BDay()
print(nbday.day_name())
","import pandas as pd
import datetime

# Read the data from the csv file
df = pd.read_csv('/Users/srinivasan/Desktop/Python/data/data.csv')

# Extract the day name from the date
date = df['Date']
day_name = date.dt.strftime('%A')

# Add 2 days and 1 business day with the specified date
date = date."
391,Write a Python program to read the current line from a given CSV file. Use csv.reader,"import csv
f = open(""employees.csv"", newline='')
csv_reader = csv.reader(f)
print(next(csv_reader))
print(next(csv_reader))
print(next(csv_reader))
","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)

""""""

import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)

""""""

import csv"
392,Write a Python program to read a square matrix from console and print the sum of matrix primary diagonal. Accept the size of the square matrix and elements for each column separated with a space (for every row) as input from the user. ,"size = int(input(""Input the size of the matrix: ""))
matrix = [[0] * size for row in range(0, size)]
for x in range(0, size):

    line = list(map(int, input().split()))

    for y in range(0, size):
        matrix[x][y] = line[y]

matrix_sum_diagonal = sum(matrix[size - i - 1][size - i - 1] for i in range(size))
print(""Sum of matrix primary diagonal:"")
print(matrix_sum_diagonal)
","def main():
    size = int(input(""Enter the size of the square matrix: ""))
    elements = []
    for i in range(size):
        elements.append(list(map(int, input().split())))
    print(sum(elements[0]))

if __name__ == ""__main__"":"
393,Write a Pandas program to import sheet2 data from a given excel data (employee.xlsx ) into a Pandas dataframe. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx',sheet_name=1)
print(df)
","import pandas as pd

# Read the data from the excel file
df = pd.read_excel('employee.xlsx')

# Create a Pandas dataframe from the data
df2 = pd.DataFrame(df)

# Print the head of the dataframe
print(df2.head())

# Print the shape of the dataframe
print(df2.shape)

#"
394,"Write a NumPy program to convert a given array into bytes, and load it as array. ","import numpy as np
import os
a = np.array([1, 2, 3, 4, 5, 6])
print(""Original array:"")
print(a)
a_bytes = a.tostring()
a2 = np.fromstring(a_bytes, dtype=a.dtype)
print(""After loading, content of the text file:"")
print(a2)
print(np.array_equal(a, a2))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5])

arr_bytes = arr.tobytes()

arr_bytes

arr_bytes.tobytes()

arr_bytes.tobytes()

arr_bytes.tobytes()

arr_bytes.tobytes()

arr_bytes.tobytes()

arr_bytes.tobytes()

arr_bytes.toby"
395,Write a Pandas program to create a monthly time period and display the list of names in the current local scope. ,"import pandas as pd
mtp = pd.Period('2021-11','M')
print(""Monthly time perid: "",mtp)
print(""\nList of names in the current local scope:"")
print(dir(mtp)) 
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({""Name"": [""Rolf"", ""Charlie"", ""Anna"", ""Bob"", ""Jen"", ""Anne""], ""Age"": [20, 21, 22, 23, 24, 25]})

# Display the dataframe
print(df)

# Create a new column named ""Years""
df[""Years""] = df[""Age""].apply(lambda x: x.days /"
396,"Write a NumPy program to sort an along the first, last axis of an array. ","import numpy as np
a = np.array([[4, 6],[2, 1]])
print(""Original array: "")
print(a)
print(""Sort along the first axis: "")
x = np.sort(a, axis=0)
print(x)
print(""Sort along the last axis: "")
y = np.sort(x, axis=1)
print(y)
","import numpy as np

arr = np.array([[1,2,3,4,5,6,7,8,9,10],
                [10,11,12,13,14,15,16,17,18,19],
                [20,21,22,23,24,25,26,27,28,29]])

arr.sort(axis=0)
print(arr)

arr.sort(axis=1)
print("
397,"Write a NumPy program to move the specified axis backwards, until it lies in a given position. ","import numpy as np
x = np.ones((2,3,4,5))
print(np.rollaxis(x, 3, 1).shape)
","import numpy as np

x = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

x[:, 1] = np.array([10, 20, 30])

print(x)

x[:, 1] = np.array([10, 20, 30])

print(x)

x[:, 1] = np.array([10, 20, 30])

print(x)"
398,"Write a NumPy program to check whether each element of a given array starts with ""P"". ","import numpy as np
x1 = np.array(['Python', 'PHP', 'JS', 'examples', 'html'], dtype=np.str)
print(""\nOriginal Array:"")
print(x1)
print(""Test if each element of the said array starts with 'P':"")
r = np.char.startswith(x1, ""P"")
print(r)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

if arr[0] == 'P':
    print(""First element starts with 'P'"")
else:
    print(""First element does not start with 'P'"")

if arr[-1] == 'P':
    print(""Last element starts with 'P'"")
else:
    print(""Last element does not"
399,Write a Pandas program to construct a DataFrame using the MultiIndex levels as the column and index. ,"import pandas as pd 
import numpy as np
sales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'],
          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]
sales_tuples = list(zip(*sales_arrays))
print(""Create a MultiIndex:"")
sales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])
print(sales_tuples)
print(""\nConstruct a Dataframe using the said MultiIndex levels: "")
df = pd.DataFrame(np.random.randn(8, 5), index=sales_index)
print(df)
","import pandas as pd

df = pd.DataFrame(
    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]],
    index=['a', 'b', 'c', 'd'],
    columns=['x', 'y', 'z', 'w']
)

print(df)

# Solution:

# df = pd.DataFrame(
#"
400,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight the entire row in Yellow where a specific column value is greater than 0.5. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
print(""Original array:"")
print(df)
print(""\nDataframe - table style:"")

def highlight_greaterthan(x):
    if x.C > .5:
        return ['background-color: yellow']*5
    else:
        return ['background-color: white']*5 
df.style.apply(highlight_greaterthan, axis=1)
","import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randint(0, 100, size=(10, 4)), columns=['col1', 'col2', 'col3', 'col4'])
df['col5'] = df['col1'] > 0.5
df.head()

# Solution:

# Create a"
401,"a href=""python-conditional-exercise-15.php"" target=""_blank"">Click me to see the sample solution</a>","import re
p= input(""Input your password"")
x = True
while x:  
    if (len(p)<6 or len(p)>12):
        break
    elif not re.search(""[a-z]"",p):
        break
    elif not re.search(""[0-9]"",p):
        break
    elif not re.search(""[A-Z]"",p):
        break
    elif not re.search(""[$#@]"",p):
        break
    elif re.search(""\s"",p):
        break
    else:
        print(""Valid Password"")
        x=False
        break

if x:
    print(""Not a Valid Password"")
","<pre>

a = 10

if a > 5:
    print(""a is greater than 5"")

if a > 5:
    print(""a is greater than 5"")

if a > 5:
    print(""a is greater than 5"")

if a > 5:
    print(""a is greater than 5"")

if a > 5:
    print(""a is greater than 5"")

if a >"
402,"Write a NumPy program to create an array with the values 1, 7, 13, 105 and determine the size of the memory occupied by the array. ","import numpy as np
X = np.array([1, 7, 13, 105])
print(""Original array:"")
print(X)
print(""Size of the memory occupied by the said array:"")
print(""%d bytes"" % (X.size * X.itemsize))
","import numpy as np

arr = np.array([1, 7, 13, 105])
print(arr.size)

""""""

# Solution

import numpy as np

arr = np.array([1, 7, 13, 105])
print(arr.size)

# Python code to solve the following problem:

# Create an array with the values 1, 7, 13, 105 and determine the size"
403,Write a Python program that accepts an integer (n) and computes the value of n+nn+nnn. ,"a = int(input(""Input an integer : ""))
n1 = int( ""%s"" % a )
n2 = int( ""%s%s"" % (a,a) )
n3 = int( ""%s%s%s"" % (a,a,a) )
print (n1+n2+n3)
","def solution(n):
    return n+n+n

print(solution(5))

""""""

def solution(n):
    return n+n+n

print(solution(5))

""""""

def solution(n):
    return n+n+n

print(solution(5))

""""""

def solution(n):
    return n+n+n

print(solution(5))"
404,"Write a Python program to find a tuple, the smallest second index value from a list of tuples. ","x = [(4, 1), (1, 2), (6, 0)]
print(min(x, key=lambda n: (n[1], -n[0])))
","import sys

def smallestSecondIndex(tup):
    # your code goes here
    return tup[1]

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input())

    for t_itr in range(t):
        nt = input().split()

        n = int(nt[0])

        tup = []"
405,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to display the dataframe in table style. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
print(""\nDataframe - table style:"")
# Set CSS properties for th elements in dataframe
th_props = [
  ('font-size', '12px'),
  ('text-align', 'center'),
  ('font-weight', 'bold'),
  ('color', '#6d6d6d'),
  ('background-color', '#f7ffff')
  ]

# Set CSS properties for td elements in dataframe
td_props = [
  ('font-size', '12px')
  ]

# Set table styles
styles = [
  dict(selector=""th"", props=th_props),
  dict(selector=""td"", props=td_props)
  ]
(df.style
        .set_table_styles(styles))
","import pandas as pd

df = pd.DataFrame(
    {'First column': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
     'Second column': [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
     'Third column': [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]})"
406,Write a NumPy program to convert Pandas dataframe to NumPy array with headers. ,"import numpy as np
import pandas as pd
np_array = np.random.rand(12,3)
print(""Original Numpy array:"")
print(np_array)
print(""Type: "",type(np_array))
df = pd.DataFrame(np.random.rand(12,3),columns=['A','B','C'])
print(""\nPanda's DataFrame: "")
print(df)
print(""Type: "",type(df))
","import pandas as pd

df = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""B"": [10, 20, 30, 40, 50]})

# Convert the dataframe to NumPy array
arr = df.to_numpy()

# Convert the NumPy array to Pandas dataframe
df = pd.DataFrame(arr, columns=[""A"", ""B""])

# Print the dataframe
print("
407,Write a NumPy program to calculate 2p for all elements in a given array. ,"import numpy as np
x = np.array([1., 2., 3., 4.], np.float32)
print(""Original array: "")
print(x)
print(""\n2^p for all the elements of the said array:"")
r1 = np.exp2(x)
r2 = 2 ** x
assert np.allclose(r1, r2)
print(r1)
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(np.sum(a))

# Output:
# [1, 3, 6, 10]

# Explanation:
# The sum of the elements in the array is 1 + 3 + 6 + 10 = 15.

# Note:
# The array is an array of integers.
# The array values are in the range"
408,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to set dataframe background Color black and font color yellow. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
print(""\nBackground:black - fontcolor:yelow"")
df.style.set_properties(**{'background-color': 'black',
                           'color': 'yellow'})
","import pandas as pd

df = pd.DataFrame(
    {
        'First column': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        'Second column': [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
        'Third column': [21, 22, 23, 24, 25, 26, 27, 28,"
409,Write a NumPy program to extract first and third elements of the first and third rows from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: First and third elements of the first and third rows "")
print(arra_data[::2, ::2])
","import numpy as np

arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(arr[0][2])
print(arr[1][2])
print(arr[2][2])

# Output:
# 5
# 6
# 7
# 8

# Input:
# [[1, 2, 3, 4"
410,"Write a Python program to sum of three given integers. However, if two values are equal sum will be zero. ","def sum(x, y, z):
    if x == y or y == z or x==z:
        sum = 0
    else:
        sum = x + y + z
    return sum

print(sum(2, 1, 2))
print(sum(3, 2, 2))
print(sum(2, 2, 2))
print(sum(1, 2, 3))
","def sum_of_three(a, b, c):
    if a == b == c:
        return 0
    else:
        return a + b + c

print(sum_of_three(1, 2, 3))

""""""

# Solution:

def sum_of_three(a, b, c):
    if a == b == c:
        return 0
    else:
        return a + b + c"
411,Write a Pandas program to sort a MultiIndex of a DataFrame. Also sort on various levels of index. ,"import pandas as pd 
import numpy as np
sales_arrays = [['sale1', 'sale1', 'sale3', 'sale3', 'sale2', 'sale2', 'sale4', 'sale4'],
          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]
sales_tuples = list(zip(*sales_arrays))
sales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])
print(sales_tuples)
print(""\nConstruct a Dataframe using the said MultiIndex levels: "")
df = pd.DataFrame(np.random.randn(8, 5), index=sales_index)
print(df)
print(""\nSort on MultiIndex DataFrame:"")
df1 = df.sort_index()
print(""\nSort on Index level=0 of the DataFrame:"")
df2 = df.sort_index(level=0)
print(df2)
print(""\nSort on Index level=1 of the DataFrame:"")
df2 = df.sort_index(level=1)
print(df2)
print(""\nPass a level name to sort the DataFrame:"")
df3 = df.sort_index(level=""city"")
print(df3)  
","import pandas as pd

df = pd.DataFrame({""A"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
                   ""B"": [10, 11, 12, 13, 14, 15, 16, 17, 18],
                   ""C"": [19, 20, 21, 22, 23, 24, 25, 26, 27]})

df.sort_index(level=0, ascending=True)"
412,"Write a NumPy program to compute sum of all elements, sum of each column and sum of each row of a given array. ","import numpy as np
x = np.array([[0,1],[2,3]])
print(""Original array:"")
print(x)
print(""Sum of all elements:"")
print(np.sum(x))
print(""Sum of each column:"")
print(np.sum(x, axis=0))
print(""Sum of each row:"")
print(np.sum(x, axis=1))
","import numpy as np

arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(arr.sum())
print(arr.sum(axis=0))
print(arr.sum(axis=1))
print(arr.sum(axis=1).reshape(3, 2))

""""""

import numpy as np

arr"
413,"Write a Python program to extract specified number of elements from a given list, which follows each other continuously. ","from itertools import groupby 

def extract_elements(nums, n):
    result = [i for i, j in groupby(nums) if len(list(j)) == n] 
    return result

nums1 = [1, 1, 3, 4, 4, 5, 6, 7]
n = 2
print(""Original list:"")
print(nums1)
print(""Extract 2 number of elements from the said list which follows each other continuously:"") 
print(extract_elements(nums1, n))
nums2 = [0, 1, 2, 3, 4, 4, 4, 4, 5, 7]
n = 4
print(""Original lists:"")
print(nums2)
print(""Extract 4 number of elements from the said list which follows each other continuously:"") 
print(extract_elements(nums2, n))
","def solution(lst):
    count = 0
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            if lst[i] == lst[j]:
                count += 1
    return count

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(lst))

""""""

def solution"
414,Write a Python program to sort a given list of tuples on specified element. ,"def sort_on_specific_item(lst, n):
    result = sorted((lst), key=lambda x: x[n])
    return result   
items = [('item2', 10, 10.12), ('item3', 15, 25.10), ('item1', 11, 24.50),('item4', 12, 22.50)]
print(""Original list of tuples:"")
print(items)
print(""\nSort on 1st element of the tuple of the said list:"")
n = 0
print(sort_on_specific_item(items, n))
print(""\nSort on 2nd element of the tuple of the said list:"")
n = 1
print(sort_on_specific_item(items, n))
print(""\nSort on 3rd element of the tuple of the said list:"")
n = 2
print(sort_on_specific_item(items, n))
","def sort_tuples(tuples):
    # your code goes here
    return sorted(tuples, key=lambda x: x[1])

""""""

def sort_tuples(tuples):
    # your code goes here
    return sorted(tuples, key=lambda x: x[1])

""""""

def sort_tuples(tuples):
    # your code goes here
    return sorted(tuples, key=lambda x: x[1], reverse="
415,Write a NumPy program to move axes of an array to new positions. Other axes remain in their original order. ,"import numpy as np
x = np.zeros((2, 3, 4))
print(np.moveaxis(x, 0, -1).shape)
print(np.moveaxis(x, -1, 0).shape)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

a = np.array([[1, 2, 3],"
416,Write a Python program to scramble the letters of string in a given list. ,"from random import shuffle

def shuffle_word(text_list):
    text_list = list(text_list)
    shuffle(text_list)
    return ''.join(text_list)

text_list = ['Python', 'list', 'exercises', 'practice', 'solution'] 
print(""Original list:"")
print(text_list)
print(""\nAfter scrambling the letters of the strings of the said list:"")
result =  [shuffle_word(word) for word in text_list]
print(result) 
","def scramble(string, letters):
    for i in range(len(string)):
        if string[i] in letters:
            letters.remove(string[i])
            letters.append(string[i])
    return letters

print(scramble(""abcdefghijklmnopqrstuvwxyz"", [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"","
417,Write a Python program to get the most frequent element in a given list of numbers. ,"def most_frequent(nums):
  return max(set(nums), key = nums.count) 
print(most_frequent([1, 2, 1, 2, 3, 2, 1, 4, 2]))
nums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]
print (""Original list:"")
print(nums)
print(""Item with maximum frequency of the said list:"")
print(most_frequent(nums))
nums = [1, 2, 3, 1, 2, 3, 2, 1, 4, 3, 3]
print (""\nOriginal list:"")
print(nums)
print(""Item with maximum frequency of the said list:"")
print(most_frequent(nums))
","def get_most_frequent(numbers):
    # Write your code here
    return numbers.count(max(numbers))

print(get_most_frequent([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(get_most_frequent([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(get_most_frequent([1, 2, 3, 4"
418,"Write a Python program to find the smallest multiple of the first n numbers. Also, display the factors. ","def smallest_multiple(n):
    if (n<=2):
      return n
    i = n * 2
    factors = [number  for number in range(n, 1, -1) if number * 2 > n]
    print(factors)

    while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i
                
print(smallest_multiple(13))
print(smallest_multiple(11))
print(smallest_multiple(2))
print(smallest_multiple(1))
","def smallest_multiple(n):
    factors = []
    for i in range(1, n+1):
        if n % i == 0:
            factors.append(i)
    return min(factors)

print(smallest_multiple(10))

""""""

# Solution:

def smallest_multiple(n):
    factors = []
    for i in range(1, n+1):
        if n % i =="
419,Write a NumPy program to copy data from a given array to another array. ,"import numpy as np
x = np.array([24, 27, 30, 29, 18, 14])
print(""Original array:"")
print(x)
y = np.empty_like (x)
y[:] = x
print(""\nCopy of the said array:"")
print(y)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

c = a.copy()
d = b.copy()

c[0, 0] = 100
d[0, 0] = 100

print(a)
print(b)
print(c)
print(d)

# Output:"
420,Write a Pandas program to split a dataset to group by two columns and then sort the aggregated results within the groups. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
df_agg = df.groupby(['customer_id','salesman_id']).agg({'purch_amt':sum})
result = df_agg['purch_amt'].groupby(level=0, group_keys=False)
print(""\nGroup on 'customer_id', 'salesman_id' and then sort sum of purch_amt within the groups:"")
print(result.nlargest())
","import pandas as pd
import numpy as np

# Read the data
df = pd.read_csv('../data/data.csv')

# Create a groupby object
groupby = df.groupby(['gender', 'age'])

# Group the data by gender and age
grouped = groupby.aggregate(['mean','sum'])

# Sort the grouped data
grouped.sort_values(by"
421,Write a Python program to find the indexes of all None items in a given list. ,"def relative_order(lst):
    result = [i for i in range(len(lst)) if lst[i] == None]
    return result

nums = [1, None, 5, 4,None, 0, None, None]
print(""Original list:"")
print(nums)
print(""\nIndexes of all None items of the list:"")
print(relative_order(nums))
","def none_indexes(lst):
    for i in range(len(lst)):
        if lst[i] == None:
            print(i)

lst = [1, 2, 3, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None"
422,Write a Python program to split a given multiline string into a list of lines. ,"def split_lines(s):
  return s.split('\n')
print(""Original string:"")
print(""This\nis a\nmultiline\nstring.\n"")
print(""Split the said multiline string into a list of lines:"")
print(split_lines('This\nis a\nmultiline\nstring.\n'))
","def split_lines(string):
    return string.splitlines()

print(split_lines(""This is a multiline string""))

""""""

def split_lines(string):
    return string.splitlines()

print(split_lines(""This is a multiline string""))

""""""

def split_lines(string):
    return string.splitlines()

print(split_lines(""This is a multiline string""))

""""""

def"
423,Write a Python program to write a Python list of lists to a csv file. After writing the CSV file read the CSV file and display the content. ,"import csv
data = [[10,'a1', 1], [12,'a2', 3], [14, 'a3', 5], [16, 'a4', 7], [18, 'a5', 9]]
with open(""temp.csv"", ""w"", newline="""") as f:
   writer = csv.writer(f)
   writer.writerows(data)
with open('temp.csv', newline='') as csvfile:
 data = csv.reader(csvfile, delimiter=' ')
 for row in data:
   print(', '.join(row))
","import csv

with open('solution.csv', 'w', newline='') as csvfile:
    fieldnames = ['first_name', 'last_name', 'age']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    writer.writeheader()
    writer.writerows([{'first_name': 'John', 'last_name': 'Doe',"
424,"Write a Python program to check whether a given string contains a capital letter, a lower case letter, a number and a minimum length using lambda. ","def check_string(str1):
    messg = [
    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',
    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',
    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',
    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]
    result = [x for x in [i(str1) for i in messg] if x != True]
    if not result:
        result.append('Valid string.')
    return result    
s = input(""Input the string: "")
print(check_string(s))
","def is_capital(string):
    if string[0].isupper():
        return True
    elif string[0].islower():
        return True
    elif string[0].isdigit():
        return True
    else:
        return False

print(is_capital(""Python""))
print(is_capital(""PYTHON""))
print(is_capital(""PYTHON""))
print(is"
425,Write a Python program to run an operating system command using the os module. ,"import os
if os.name == ""nt"":
   command = ""dir""
else:
   command = ""ls -l""
os.system(command)
","import os
os.system('ls')

""""""

import os
import sys

def main():
    os.system('ls')

if __name__ == '__main__':
    main()"
426,"Write a Pandas program to create a subtotal of ""Labor Hours"" against MSHA ID from the given excel data (coalpublic2013.xlsx ). ","import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')
df_sub=df[[""MSHA ID"",""Labor_Hours""]].groupby('MSHA ID').sum()
df_sub
","1. Create a Pandas dataframe from the excel data.
2. Create a Pandas series from the dataframe.
3. Create a Pandas series from the dataframe.
4. Create a Pandas series from the dataframe.
5. Create a Pandas series from the dataframe.
6. Create a Pandas series from the dataframe.
7. Create a Pandas series from the dataframe.
8."
427,Write a Python program to count the number of rows of a given SQLite table. ,"import sqlite3 
from sqlite3 import Error 
def sql_connection():
    try:
      conn = sqlite3.connect('mydatabase.db')
      return conn
    except Error:
      print(Error)
 
def sql_table(conn):
    cursorObj = conn.cursor()
# Create the table
    cursorObj.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")
    print(""Number of records before inserting rows:"")
    cursor = cursorObj.execute('select * from salesman;')
    print(len(cursor.fetchall()))
# Insert records
    cursorObj.executescript(""""""
    INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);
    INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);
    INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);
    INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);
    INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);
    """""")
    conn.commit()
    print(""\nNumber of records after inserting rows:"")
    cursor = cursorObj.execute('select * from salesman;')
    print(len(cursor.fetchall()))
    
sqllite_conn = sql_connection()
sql_table(sqllite_conn)

if (sqllite_conn):
  sqllite_conn.close()
  print(""\nThe SQLite connection is closed."")
","import sqlite3

conn = sqlite3.connect('data.db')
c = conn.cursor()

c.execute(""""""CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username text,
    password text
)"""""")

c.execute(""""""CREATE TABLE IF NOT EXISTS items (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name text,"
428,Write a Python program to count the frequency of consecutive duplicate elements in a given list of numbers. ,"def count_dups(nums):
    element = []
    freque = []
    if not nums:
        return element
    running_count = 1
    for i in range(len(nums)-1):
        if nums[i] == nums[i+1]:
            running_count += 1
        else:
            freque.append(running_count)
            element.append(nums[i])
            running_count = 1
    freque.append(running_count)
    element.append(nums[i+1])
    return element,freque


nums = [1,2,2,2,4,4,4,5,5,5,5]
print(""Original lists:"")
print(nums)

print(""\nConsecutive duplicate elements and their frequency:"")
print(count_dups(nums))
","def count_duplicate(nums):
    count = 0
    for i in range(len(nums)):
        if nums[i] == nums[i-1]:
            count += 1
    return count

print(count_duplicate([1,2,3,1,2,3]))

""""""

def count_duplicate(nums):
    count = 0
    for i in range(len(nums)"
429,Write a NumPy program to convert a given vector of integers to a matrix of binary representation. ,"import numpy as np
nums = np.array([0, 1, 3, 5, 7, 9, 11, 13, 15])
print(""Original vector:"")
print(nums)
bin_nums = ((nums.reshape(-1,1) & (2**np.arange(8))) != 0).astype(int)
print(""\nBinary representation of the said vector:"")
print(bin_nums[:,::-1])
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(a)

# Solution:
a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(a.reshape(3, 3))

# Solution:
a = np.array([1, 2, 3, 4, 5, 6, 7,"
430,Write a NumPy program to create an empty and a full array. ,"import numpy as np
# Create an empty array
x = np.empty((3,4))
print(x)
# Create a full array
y = np.full((3,3),6)
print(y)
","import numpy as np

a = np.empty(5)
print(a)

b = np.full(5, 10)
print(b)

c = np.arange(5)
print(c)

d = np.arange(5, 10)
print(d)

e = np.arange(5, 10, 2)
print(e)

f = np.arange(5, 10, 2, dtype=np.int64"
431,Write a Python program to find all the h2 tags and list the first four from the webpage python.org. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""First four h2 tags from the webpage python.org.:"")
print(soup.find_all('h2')[0:4])

","import urllib.request
import urllib.parse
import urllib.error

def main():
    url = ""http://python.org/""
    print(""Retrieving"", url)
    uh = urllib.request.urlopen(url)
    data = uh.read()
    print(""Retrieved"", len(data), ""characters"")
    print(""Total"", len(data), ""characters"")
    print(""Count:"","
432,Write a Pandas program to check whether only proper case or title case is present in a given column of a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'Hhhh', 'abcd', 'EAWQaaa'],
    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})

print(""Original DataFrame:"")
print(df)
print(""\nIs proper case or title case?"")
df['company_code_is_title'] = list(map(lambda x: x.istitle(), df['company_code']))
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': ['a', 'b', 'c', 'd'], 'col2': ['A', 'B', 'C', 'D']})

print(df.loc[df['col1'].str.contains('A')])

# Output:
#     col1    col2
# 0    a    A
# 1    b    B
# 2"
433,"Write a Pandas program to calculate one, two, three business day(s) from a specified date. Also find the next business month end from a specific date. ","import pandas as pd
from pandas.tseries.offsets import *
import datetime
from datetime import datetime, date
dt = datetime(2020, 1, 4)
print(""Specified date:"")
print(dt)
print(""\nOne business day from the said date:"")
obday = dt + BusinessDay()
print(obday)
print(""\nTwo business days from the said date:"")
tbday = dt + 2 * BusinessDay()
print(tbday)
print(""\nThree business days from the said date:"")
thbday = dt + 3 * BusinessDay()
print(thbday)
print(""\nNext business month end from the said date:"")
nbday = dt + BMonthEnd()
print(nbday)
","import pandas as pd
import datetime as dt

# Read the data from the csv file
df = pd.read_csv('data.csv')

# Create a new dataframe with the data
df_new = df.copy()

# Create a new column named 'business_day'
df_new['business_day'] = df_new['date'].dt.day_name"
434,"Write a Pandas program to filter those records where WHO region contains ""Ea"" substring from world alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
# Remove NA / NaN values
new_w_a_con = w_a_con.dropna()
print(""\nMatch if  a given column has a particular sub string:"")
print(new_w_a_con[new_w_a_con[""WHO region""].str.contains(""Ea"")])
","import pandas as pd

df = pd.read_csv(""world_alcohol_consumption.csv"")

df = df[df['region'].str.contains('Ea')]

df.to_csv('world_alcohol_consumption_filtered.csv', index=False)

# Solution:

# df = pd.read_csv(""world_alcohol_consumption_filtered.csv"")
# df"
435,Write a Python program to extract single key-value pair of a dictionary in variables. ,"d = {'Red': 'Green'}
(c1, c2), = d.items()
print(c1)
print(c2)
","import json

def extract_key_value(dictionary):
    for key, value in dictionary.items():
        print(key, value)

dictionary = {
    ""name"": ""John"",
    ""age"": 30,
    ""city"": ""New York""
}

extract_key_value(dictionary)

# Output:
# name
# age
# city

# Expected Output:
# name
# age
# city

#"
436,Write a Python program to test whether a passed letter is a vowel or not. ,"def is_vowel(char):
    all_vowels = 'aeiou'
    return char in all_vowels
print(is_vowel('c'))
print(is_vowel('e'))
","def is_vowel(letter):
    if letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o' or letter == 'u':
        return True
    else:
        return False

print(is_vowel('a'))
print(is_vowel('e'))
print(is_vowel('i'))
print(is_vowel('o'))
print(is_vowel('"
437,Write a Python program to generate groups of five consecutive numbers in a list. ,"l = [[5*i + j for j in range(1,6)] for i in range(5)]
print(l)
",">>> import random
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>"
438,rite a Python program to get the unique enumeration values. ,"import enum
class Countries(enum.Enum):
    Afghanistan = 93
    Albania = 355
    Algeria = 213
    Andorra = 376
    Angola = 244
    India = 355
    USA = 213
for result in Countries:
    print('{:15} = {}'.format(result.name, result.value))
","def unique(lst):
    lst = list(set(lst))
    return lst

lst = [1,2,3,4,5,6,7,8,9,10]
print(unique(lst))

""""""

# Solution:

def unique(lst):
    lst = list(set(lst))
    return lst

lst = [1,2,3,4,5,6,7,8,9,10"
439,Write a Python program to find the class wise roll number from a tuple-of-tuples. ,"from collections import defaultdict
classes = (
    ('V', 1),
    ('VI', 1),
    ('V', 2),
    ('VI', 2),
    ('VI', 3),
    ('VII', 1),
)

class_rollno = defaultdict(list)

for class_name, roll_id in classes:
    class_rollno[class_name].append(roll_id)

print(class_rollno)
","roll_number = (
    (1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
    (10, 11, 12, 13, 14, 15, 16, 17, 18, 19),
    (20, 21, 22, 23, 24, 25, 26, 27, 28, 29),
    (30, 31, 32, 33, 34, 35, 36, 37, 38, 39),
    (40, 41, 42, 43"
440,"Write a Python program to generate a list, containing the Fibonacci sequence, up until the nth term. ","def fibonacci_nums(n):
  if n <= 0:
    return [0]
  sequence = [0, 1]
  while len(sequence) <= n:
    next_value = sequence[len(sequence) - 1] + sequence[len(sequence) - 2]
    sequence.append(next_value)
  return sequence
print(""First 7 Fibonacci numbers:"")
print(fibonacci_nums(7))
print(""\nFirst 15 Fibonacci numbers:"")
print(fibonacci_nums(15))
print(""\nFirst 50 Fibonacci numbers:"")
print(fibonacci_nums(50))
","def fibonacci(n):
    a, b = 0, 1
    for i in range(n):
        print(a, end="" "")
        a, b = b, a + b
    print()

fibonacci(10)

""""""

def fibonacci(n):
    a, b = 0, 1
    for i in range(n):
        print(a, end="" "")
        a, b"
441,Write a python program to find the next previous palindrome of a specified number. ,"def Previous_Palindrome(num):
    for x in range(num-1,0,-1):
        if str(x) == str(x)[::-1]:
            return x
print(Previous_Palindrome(99));
print(Previous_Palindrome(1221));
","def next_palindrome(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    if n == 2:
        return 2
    if n == 3:
        return 3
    if n == 4:
        return 4
    if n == 5:
        return 5
    if n == 6:
        return 6
    if n == 7:
        return 7
    if n == 8:
        return 8"
442,Write a Python program to convert true to 1 and false to 0. ,"x = 'true'
x = int(x == 'true')
print(x)
x = 'abcd'
x = int(x == 'true')
print(x)
","def true_false(x):
    if x == 1:
        return 1
    else:
        return 0

print(true_false(1))
print(true_false(0))

""""""

# Solution 1

def true_false(x):
    if x == 1:
        return 1
    else:
        return 0

print(true_false(1))
print(true_false(0))

# Solution 2

def true_false(x"
443,Write a Python program to remove specific words from a given list using lambda. ,"def remove_words(list1, remove_words):
    result = list(filter(lambda word: word not in remove_words, list1))
    return result
        
colors = ['orange', 'red', 'green', 'blue', 'white', 'black']
remove_colors = ['orange','black']
print(""Original list:"")
print(colors)
print(""\nRemove words:"")
print(remove_colors)
print(""\nAfter removing the specified words from the said list:"")
print(remove_words(colors, remove_colors))
","def remove_words(words, words_to_remove):
    return [word for word in words if word not in words_to_remove]

print(remove_words(['apple', 'banana', 'carrot', 'apple', 'banana', 'carrot'], ['carrot', 'apple']))

""""""

def remove_words(words, words_to_remove):
    return [word for word in words if word not in words_to_remove]

print("
444,"Write a NumPy program to create a 12x12x4 array with random values and extract any array of shape(6,6,3) from the said array. ","import numpy as np 
nums = np.random.random((8,8,3))
print(""Original array:"")
print(nums)
print(""\nExtract array of shape (6,6,3) from the said array:"")
new_nums = nums[:6, :6, :]
print(new_nums)
","import numpy as np

a = np.random.randint(0,10,(12,12,4))
print(a)

# Solution:

# a = np.random.randint(0,10,(12,12,4))
# print(a)
# print(a.shape)
# print(a.ndim)
# print(a.size)"
445,Write a Pandas program to check the equality of two given series. ,"import pandas as pd
nums1 = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])
nums2 = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])
print(""Original Series:"")
print(nums1)
print(nums2)
print(""Check 2 series are equal or not?"")
print(nums1 == nums2)
","solution = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

solution.eq(solution)

""""""

import pandas as pd
import numpy as np

solution = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

solution.eq(solution)

""""""

# Solution:

solution = pd.Series(["
446,Write a NumPy program to compute the factor of a given array by Singular Value Decomposition. ,"import numpy as np
a = np.array([[1, 0, 0, 0, 2], [0, 0, 3, 0, 0], [0, 0, 0, 0, 0], [0, 2, 0, 0, 0]], dtype=np.float32)
print(""Original array:"")
print(a)
U, s, V = np.linalg.svd(a, full_matrices=False)
q, r = np.linalg.qr(a)
print(""Factor of a given array  by Singular Value Decomposition:"")
print(""U=\n"", U, ""\ns=\n"", s, ""\nV=\n"", V)
","import numpy as np

def factor(arr):
    # compute singular values
    s = np.linalg.svd(arr, compute_uv=False)
    # compute singular vectors
    u, s, v = s[0], s[1], s[2]
    # compute factor
    return np.dot(u, v)

arr = np.array([[1, 2, 3], [4, 5, 6], [7,"
447,"Write a Pandas program to extract a single row, rows and a specific value from a MultiIndex levels DataFrame. ","import pandas as pd 
import numpy as np
sales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'],
          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]
sales_tuples = list(zip(*sales_arrays))
sales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])
print(sales_tuples)
print(""\nConstruct a Dataframe using the said MultiIndex levels: "")
df = pd.DataFrame(np.random.randn(8, 5), index=sales_index)
print(df)

print(""\nExtract a single row from the said dataframe:"")
print(df.loc[('sale2', 'city2')])
print(""\nExtract a single row from the said dataframe:"")
print(df.loc[('sale2', 'city2')])

print(""\nExtract number of rows from the said dataframe:"")
print(df.loc['sale1'])
print(""\nExtract number of rows from the said dataframe:"")
print(df.loc['sale3'])

print(""\nExtract a single value from the said dataframe:"")
print(df.loc[('sale1', 'city2'), 1])
print(""\nExtract a single value from the said dataframe:"")
print(df.loc[('sale4', 'city1'), 4])
","import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'A': [1, 2, 3, 4, 5],
                   'B': [10, 20, 30, 40, 50],
                   'C': ['a', 'b', 'c', 'd', 'e']})

# Create a MultiIndex
df.index = pd.MultiIndex.from_tuples([('A', 1), ('A"
448,Write a Pandas program to calculate the total number of missing values in a DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[np.nan,np.nan,70002,np.nan,np.nan,70005,np.nan,70010,70003,70012,np.nan,np.nan],
'purch_amt':[np.nan,270.65,65.26,np.nan,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,np.nan],
'ord_date': [np.nan,'2012-09-10',np.nan,np.nan,'2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17',np.nan],
'customer_id':[np.nan,3001,3001,np.nan,3002,3001,3001,3004,3003,3002,3001,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nTotal number of missing values of the said DataFrame:"")
result = df.isna().sum().sum()
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [1, 2, 3, 4, 5]})
print(df.isnull().sum())

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [1, 2, 3, 4, 5]})
# print(df"
449,Write a Python program to sum all amicable numbers from 1 to specified numbers. ,"def amicable_numbers_sum(limit):
    if not isinstance(limit, int):
        return ""Input is not an integer!""

    if limit < 1:
        return ""Input must be bigger than 0!""

    amicables = set()

    for num in range(2, limit+1):
        if num in amicables:
            continue

        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])
        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)

    return sum(amicables)


print(amicable_numbers_sum(9999))
print(amicable_numbers_sum(999))
print(amicable_numbers_sum(99))
","def sum_amicable_numbers(n):
    sum = 0
    for i in range(1, n + 1):
        if i % 2 == 0:
            sum += i
        else:
            if i % 3 == 0:
                sum += i
    return sum

print(sum_amicable_numbers(100))

""""""

def sum_amicable_numbers(n):
    sum = 0
    for i in range(1, n +"
450,Write a Python program to remove newline characters from a file. ,"def remove_newlines(fname):
    flist = open(fname).readlines()
    return [s.rstrip('\n') for s in flist]

print(remove_newlines(""test.txt""))
","import os

def remove_newline(file_name):
    with open(file_name, 'r') as f:
        data = f.read()
        data = data.replace('\n', '')
        data = data.replace('\r', '')
        data = data.replace('\t', '')
        data = data.replace('\xa0', '')
        data = data.replace('\u2028', '')
        data = data.replace('\"
451,Write a NumPy program to find the most frequent value in an array. ,"import numpy as np
x = np.random.randint(0, 10, 40)
print(""Original array:"")
print(x)
print(""Most frequent value in the above array:"")
print(np.bincount(x).argmax())
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(np.max(arr))

# Output:
# 10

# Explanation:
# The most frequent value is 10.

# ----------------------------------------------------------------------------------------------------------------------

# Solution:

# import numpy as np

# arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9"
452,Write a Python program to find all lower and upper mixed case combinations of a given string. ,"import itertools
def combination(str1):
    result = map(''.join, itertools.product(*((c.lower(), c.upper()) for c in str1)))
    return list(result)
st =""abc""
print(""Original string:"")
print(st)
print(""All lower and upper mixed case combinations of the said string:"")
print(combination(st))
st =""w3r""
print(""\nOriginal string:"")
print(st)
print(""All lower and upper mixed case combinations of the said string:"")
print(combination(st))
st =""Python""
print(""\nOriginal string:"")
print(st)
print(""All lower and upper mixed case combinations of the said string:"")
print(combination(st))
","def get_lower_upper_mixed_case(string):
    lower_mixed_case = []
    upper_mixed_case = []
    for i in string:
        if i.islower():
            lower_mixed_case.append(i)
        elif i.isupper():
            upper_mixed_case.append(i)
    return lower_mixed_case, upper_mixed_case

print(get_lower_upper"
453,Write a Pandas program to extract items at given positions of a given series. ,"import pandas as pd
num_series = pd.Series(list('2390238923902390239023'))
element_pos = [0, 2, 6, 11, 21]
print(""Original Series:"")
print(num_series)
result = num_series.take(element_pos)
print(""\nExtract items at given positions of the said series:"")
print(result)
","import pandas as pd

# Read the data from the file
df = pd.read_csv(""data.csv"")

# Extract the items at the given positions
print(df.iloc[:, 0:2])

# Extract the items at the given positions
print(df.iloc[:, 0:2, 2])

# Extract the items at the given positions
print(df.iloc[:, 0:2, 3])

# Extract the items at the given"
454,"Write a Python program to find the nested lists elements, which are present in another list using lambda. ","def intersection_nested_lists(l1, l2):
    result = [list(filter(lambda x: x in l1, sublist)) for sublist in l2]
    return result
nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
nums2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""\nIntersection of said nested lists:"")
print(intersection_nested_lists(nums1, nums2))
","def nested_list_elements(lst):
    result = []
    for i in lst:
        if type(i) is list:
            result.extend(nested_list_elements(i))
        else:
            result.append(i)
    return result

lst = [[1,2,3],[4,5,6],[7,8,9]]
print(nested_list_elements(lst))"
455,Write a NumPy program to extract all the elements of the first and fourth columns from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: All the elements of the first and fourth columns "")
print(arra_data[:, [0,3]])
","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12],
              [13, 14, 15, 16]])

print(a[0:2, 0:3])

# Output:
[[1 2 3]
 [5 6 7]
 [9 10 11]
 [13 14 15]]"
456,Write a Python program to check whether it follows the sequence given in the patterns array. ,"def is_samePatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True

print(is_samePatterns([""red"", 
 ""green"", 
 ""green""], [""a"", 
 ""b"", 
 ""b""])) 

print(is_samePatterns([""red"", 
 ""green"", 
 ""greenn""], [""a"", 
 ""b"", 
 ""b""])) 
","def check_sequence(patterns, sequence):
    for i in range(len(sequence)):
        if sequence[i] not in patterns:
            return False
    return True

print(check_sequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def check_sequence(patterns, sequence):
    for i"
457,"Write a Python program to create a dictionary of keys x, y, and z where each key has as value a list from 11-20, 21-30, and 31-40 respectively. Access the fifth value of each key from the dictionary. ","from pprint import pprint
dict_nums = dict(x=list(range(11, 20)), y=list(range(21, 30)), z=list(range(31, 40)))
pprint(dict_nums)
print(dict_nums[""x""][4])
print(dict_nums[""y""][4])
print(dict_nums[""z""][4])
for k,v in dict_nums.items():
   print(k, ""has value"", v)
","def solution(x, y, z):
    d = {11: [], 21: [], 31: [], 41: []}
    for i in range(x, z + 1):
        d[i].append(i)
    for i in range(x, z + 1):
        d[i].append(i)"
458,Write a Pandas program to create a yearly time period from a specified year and display the properties of this period. ,"import pandas as pd
ytp = pd.Period('2020','A-DEC')
print(""Yearly time perid:"",ytp)
print(""\nAll the properties of the said period:"")
print(dir(ytp))
","import pandas as pd
import numpy as np

# Create a dataframe from the csv file
df = pd.read_csv('data.csv')

# Create a new column named 'year'
df['year'] = df['date'].dt.year

# Create a new column named'month'
df['month'] = df['date'].dt.month

# Create a new column named 'day'
df['day']"
459,Write a Python program to set the indentation of the first line. ,"import textwrap
sample_text ='''
Python is a widely used high-level, general-purpose, interpreted, dynamic
programming language. Its design philosophy emphasizes code readability,
and its syntax allows programmers to express concepts in fewer lines of
code than possible in languages such as C++ or Java.
    '''

text1 =  textwrap.dedent(sample_text).strip()
print()
print(textwrap.fill(text1,
                    initial_indent='',
                    subsequent_indent=' ' * 4,
                    width=80,
                    ))
print()
",">>> indent(1)
>>> indent(2)
>>> indent(3)
>>> indent(4)
>>> indent(5)
>>> indent(6)
>>> indent(7)
>>> indent(8)
>>> indent(9)
>>> indent(10)
>>> indent(11)
>>> indent(12)
>>> indent(13)
>>> indent(14)
>>> indent(15)
>>> indent(16)
>>> indent(17)
>>> indent(18)
>>> indent(19)"
460,Write a NumPy program to reverse an array (first element becomes last). ,"import numpy as np
import numpy as np
x = np.arange(12, 38)
print(""Original array:"")
print(x)
print(""Reverse array:"")
x = x[::-1]
print(x)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr.reverse()

print(arr)

# Output:
# [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

# Hint: You can use the built-in reverse function.

# Time complexity: O(n)
# Space Complexity: O(1)

#"
461,Write a Python program to display the examination schedule. (extract the date from exam_st_date). ,"exam_st_date = (11,12,2014)
print( ""The examination will start from : %i / %i / %i""%exam_st_date)
","Sample Output:

Enter exam_st_date: 02/03/2021
Examination Schedule:
2021-03-02

Explanation:

The examination will occur on 02/03/2021.

""""""

exam_st_date = input(""Enter exam_st_date: "")

print(""Examination Schedule:"")

print(exam_st_date[0:2])

print(""\nExplan"
462,Write a Python program to count number of non-empty substrings of a given string. ,"def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); 

str1 = input(""Input a string: "")
print(""Number of substrings:"") 
print(number_of_substrings(str1))
","def count_substring(string, sub_string):
    count = 0
    for i in range(len(string)):
        if string[i:i+len(sub_string)] == sub_string:
            count += 1
    return count

# driver code
string = ""ABCDCDC""
sub_string = ""CDC""
print(count_substring(string, sub_string))

# This code is contributed by Nikhil Kumar Singh(nickz"
463,Write a Pandas program to change the order of index of a given series. ,"import pandas as pd
s = pd.Series(data = [1,2,3,4,5], index = ['A', 'B', 'C','D','E'])
print(""Original Data Series:"")
print(s)
s = s.reindex(index = ['B','A','C','D','E'])
print(""Data Series after changing the order of index:"")
print(s)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'Name': ['Alisa', 'Bethany', 'Cathrine', 'Evelyn'],
                   'Age': [21, 32, 23, 33],
                   'Score': [76, 65, 56, 78]})

# Create a series
s = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])"
464,Write a NumPy program to compute the cross product of two given vectors. ,"import numpy as np
p = [[1, 0], [0, 1]]
q = [[1, 2], [3, 4]]
print(""original matrix:"")
print(p)
print(q)
result1 = np.cross(p, q)
result2 = np.cross(q, p)
print(""cross product of the said two vectors(p, q):"")
print(result1)
print(""cross product of the said two vectors(q, p):"")
print(result2)
","x = np.array([[1, 2, 3], [4, 5, 6]])
y = np.array([[7, 8, 9], [10, 11, 12]])

The cross product of two vectors is:
[[1, 4, 9],
 [4, 1, 12],
 [9, 4, 1]]

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

#"
465,Write a Python program to remove None value from a given list. ,"def remove_none(nums):
    result = [x for x in nums if x is not None]
    return result
nums = [12, 0, None, 23, None, -55, 234, 89, None, 0, 6, -12]
print(""Original list:"")
print(nums)
print(""\nRemove None value from the said list:"")
print(remove_none(nums))
","def remove_none(lst):
    for i in range(len(lst)):
        if lst[i] is None:
            lst.pop(i)
    return lst

lst = [1, 2, 3, None, None, 4, 5, 6, 7, 8, 9, 10]
print(remove_none(lst))

""""""

# Solution:

def remove_none(lst):
    for i in range(len(l"
466,Write a Python program to print a nested lists (each list on a new line) using the print() function. ,"colors = [['Red'], ['Green'], ['Black']]
print('\n'.join([str(lst) for lst in colors]))
","python nested_list.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19"
467,Write a Python program to search a specific item in a given doubly linked list and return true if the item is found otherwise return false. ,"class Node(object):
    # Singly linked node
    def __init__(self, data=None, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev

class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, data):
        # Append an item 
        new_item = Node(data, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item
        self.count += 1
    
    def iter(self):
        # Iterate the list
        current = self.head
        while current:
            item_val = current.data
            current = current.next
            yield item_val

    def print_foward(self):
        for node in self.iter():
            print(node)   
        
    def search_item(self, val):
         for node in self.iter():
            if val == node:
                return True
         return False

items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')
items.append_item('SQL')

print(""Original list:"")
items.print_foward()
print(""\n"")
if items.search_item('SQL'):
    print(""True"")
else:
    print(""False"")

if items.search_item('C+'):
    print(""True"")
else:
    print(""False"")
","def search(head, item):
    if head is None:
        return False
    if head.data == item:
        return True
    return search(head.next, item)

# Test
# head = Node(1)
# head.next = Node(2)
# head.next.next = Node(3)
# head.next.next.next = Node(4)
# head.next.next.next"
468,Write a NumPy program to convert (in sequence depth wise (along third axis)) two 1-D arrays into a 2-D array. ,"import numpy as np
a = np.array([[10],[20],[30]])
b = np.array([[40],[50],[60]])
c = np.dstack((a, b))
print(c)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a)
print(b)

# Solution:

# a = np.array([[1, 2, 3], [4, 5, 6]])
# b = np.array(["
469,Write a Pandas program to check whether two given words present in a specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],
    'address': ['9910 Surrey Ave.','92 N. Bishop Ave.','9910 Golden Star Ave.', '102 Dunbar St.', '17 West Livingston Court']
    })
print(""Original DataFrame:"")
print(df)
def test_and_cond(text):
    result = re.findall(r'(?=.*Ave.)(?=.*9910).*', text) 
    return "" "".join(result)
df['check_two_words']=df['address'].apply(lambda x : test_and_cond(x))
print(""\nPresent two words!"")
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Score': [87, 95, 100, 100, 100, 100]})

print(df['Name'].str.contains('Rolf'))

# Solution:

import pandas as pd

df = pd.DataFrame({'Name': ['R"
470,Write a Python program to create a dictionary grouping a sequence of key-value pairs into a dictionary of lists. Use collections module. ,"from collections import defaultdict
def grouping_dictionary(l):
    d = defaultdict(list)
    for k, v in l:
        d[k].append(v)
    return d
colors = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
print(""Original list:"")
print(colors)
print(""\nGrouping a sequence of key-value pairs into a dictionary of lists:"")
print(grouping_dictionary(colors))
","def create_dict(key_list):
    dict_of_key_value_pairs = {}
    for key in key_list:
        dict_of_key_value_pairs[key] = []
    return dict_of_key_value_pairs

print(create_dict([1, 2, 3, 4, 5]))

""""""

# Solution:

def create_dict(key_list):"
471,"Write a NumPy program totest element-wise for complex number, real number of a given array. Also test whether a given number is a scalar type or not. ","import numpy as np
a = np.array([1+1j, 1+0j, 4.5, 3, 2, 2j])
print(""Original array"")
print(a)
print(""Checking for complex number:"")
print(np.iscomplex(a))
print(""Checking for real number:"")
print(np.isreal(a))
print(""Checking for scalar type:"")
print(np.isscalar(3.1))
print(np.isscalar([3.1]))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([1, 2, 3, 4, 5])
c = np.array([1, 2, 3, 4, 5])

print(np.all(a == b))
print(np.all(a == c))

# Output:
# True
# True"
472,Write a Pandas program to create a time series object with a time zone. ,"import pandas as pd
print(""Timezone: Europe/Berlin:"")
print(""Using pytz:"")
date_pytz = pd.Timestamp('2019-01-01', tz = 'Europe/Berlin')
print(date_pytz.tz)  
print(""Using dateutil:"")
date_util = pd.Timestamp('2019-01-01', tz = 'dateutil/Europe/Berlin')
print(date_util.tz)
print(""\nUS/Pacific:"")
print(""Using pytz:"")
date_pytz = pd.Timestamp('2019-01-01', tz = 'US/Pacific')
print(date_pytz.tz)  
print(""Using dateutil:"")
date_util = pd.Timestamp('2019-01-01', tz = 'dateutil/US/Pacific')
print(date_util.tz)
","import pandas as pd

# Create a time series object
ts = pd.Series(range(1, 101), index=pd.date_range('1/1/2000', periods=100))

# Create a time series object with a time zone
ts_tz = ts.tz_localize('Asia/Kolkata')

# Create a time series object with a time zone
ts_tz_2 = ts.tz_localize('Asia/Kolkata', ambiguous='Na"
473,Write a NumPy program to check whether a Numpy array contains a specified row. ,"import numpy as np
num = np.arange(20)
arr1 = np.reshape(num, [4, 5])
print(""Original array:"")
print(arr1)
print([0, 1, 2, 3, 4] in arr1.tolist())
print([0, 1, 2, 3, 5] in arr1.tolist())
print([15, 16, 17, 18, 19] in arr1.tolist())
","import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

if arr[0, 0] == 1:
    print(""Row 0 contains 1"")
else:
    print(""Row 0 does not contain 1"")

if arr[1, 1] == 2:
    print(""Row 1 contains 2"")
else:
    print(""Row 1 does not contain 2"")

if arr["
474,Write a NumPy program to check whether the NumPy array is empty or not. ,"import numpy as np
x = np.array([2, 3])
y = np.array([])
# size 2, array is not empty
print(x.size)
# size 0, array is empty
print(y.size)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5])

if arr.size == 0:
    print(""Array is empty"")
else:
    print(""Array is not empty"")

# Output:
# Array is empty
# Array is not empty

# Solution:
# import numpy as np
#
# arr = np.array([1, 2, 3, 4, 5])
#
# if arr.size == 0"
475,Write a Python program that accepts a comma separated sequence of words as input and prints the unique words in sorted form (alphanumerically). ,"items = input(""Input comma separated sequence of words"")
words = [word for word in items.split("","")]
print("","".join(sorted(list(set(words)))))
","import collections

def main():
    words = input(""Enter the words separated by a comma: "").split("","")
    print(sorted(set(words)))

if __name__ == ""__main__"":
    main()

# OUTPUT:
# Enter the words separated by a comma: a,b,c,d,e,f,g,h,i,j,k,l,m,n,o"
476,Write a Python program to set a new value of an item in a singly linked list using index value. ,"class Node:
    # Singly linked node
    def __init__(self, data=None):
        self.data = data
        self.next = None
class singly_linked_list:
    def __init__(self):
        # Createe an empty list
        self.tail = None
        self.head = None
        self.count = 0

    def append_item(self, data):
        #Append items on the list
        node = Node(data)
        if self.head:
            self.head.next = node
            self.head = node
        else:
            self.tail = node
            self.head = node
        self.count += 1
    
    def __getitem__(self, index):
        if index > self.count - 1:
            return ""Index out of range""
        current_val = self.tail
        for n in range(index):
            current_val = current_val.next
        return current_val.data
    
    def __setitem__(self, index, value):
        if index > self.count - 1:
            raise Exception(""Index out of range."")
        current = self.tail
        for n in range(index):
            current = current.next
        current.data = value

items = singly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')

print(""Modify items by index:"")
items[1] = ""SQL""
print(""New value: "",items[1])
items[4] = ""Perl""
print(""New value: "",items[4])
","def set_item(item, index):
    new_item = item
    new_index = index
    new_node = Node(new_item)
    new_node.next = head
    head = new_node
    index = new_index
    return head, index

# Code to test the above function
item = 'item'
index = 0
head, index = set_item(item, index)
print(head.data, index)"
477,Write a Python program to update a specific column value of a given table and select all rows before and after updating the said table. ,"import sqlite3 
from sqlite3 import Error 
def sql_connection():
    try:
      conn = sqlite3.connect('mydatabase.db')
      return conn
    except Error:
      print(Error) 
def sql_table(conn):
    cursorObj = conn.cursor()
# Create the table
    cursorObj.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")
# Insert records
    cursorObj.executescript(""""""
    INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);
    INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);
    INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);
    INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);
    INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);
    """""")    
    cursorObj.execute(""SELECT * FROM salesman"")
    rows = cursorObj.fetchall()
    print(""Agent details:"")
    for row in rows:
        print(row)
    print(""\nUpdate commission .15 to .45 where id is 5003:"")
    sql_update_query = """"""Update salesman set commission = .45 where salesman_id = 5003""""""
    cursorObj.execute(sql_update_query)
    conn.commit()
    print(""Record Updated successfully "")    
    cursorObj.execute(""SELECT * FROM salesman"")
    rows = cursorObj.fetchall()
    print(""\nAfter updating Agent details:"")
    for row in rows:
        print(row)
sqllite_conn = sql_connection()
sql_table(sqllite_conn)
if (sqllite_conn):
  sqllite_conn.close()
  print(""\nThe SQLite connection is closed."")
","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

#"
478,Write a Python program to find the k,"class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def kth_smallest(root, k):
    stack = []
    while root or stack:
        while root:
            stack.append(root)
            root = root.left
        root = stack.pop()
        k -= 1
        if k == 0:
            break
        root = root.right
    return root.val

root = TreeNode(8)  
root.left = TreeNode(5)  
root.right = TreeNode(14) 
root.left.left = TreeNode(4)  
root.left.right = TreeNode(6) 
root.left.right.left = TreeNode(8)  
root.left.right.right = TreeNode(7)  
root.right.right = TreeNode(24) 
root.right.right.left = TreeNode(22)  

print(kth_smallest(root, 2))
print(kth_smallest(root, 3))
","def kth_largest(arr, n, k):
    return arr[k-1]

def kth_smallest(arr, n, k):
    return arr[n-k]

def kth_largest_and_smallest(arr, n, k):
    return kth_largest(arr, n, k), kth_smallest(arr, n, k)

def kth_largest_and_smallest_recursive(arr, n, k):
    if n == 0 or k"
479,Write a Pandas program to count year-country wise frequency of reporting dates of unidentified flying object(UFO). ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
df['Year'] = df['Date_time'].apply(lambda x: ""%d"" % (x.year))
result = df.groupby(['Year', 'country']).size()
print(""\nCountry-year wise frequency of reporting dates of UFO:"")
print(result)
","import pandas as pd

# Read the data
df = pd.read_csv('/Users/srinivasan/Downloads/airline_data.csv')

# Create a new dataframe with only the columns that are required
df_new = df[['Origin','Destination','Reporting_Airline','Reporting_Airline_Code','Reporting_Airline_Name','Reporting_Airline_State','Reporting_Airline_Country','Reporting_Air"
480,Write a Python program to create an iterator that returns consecutive keys and groups from an iterable. ,"import itertools as it
print(""Iterate over characters of a string and display\nconsecutive keys and groups from the iterable:"")
str1 = 'AAAAJJJJHHHHNWWWEERRRSSSOOIIU'
data_groupby = it.groupby(str1)
for key, group in data_groupby:
    print('Key:', key)
    print('Group:', list(group))    
print(""\nIterate over elements of a list and display\nconsecutive keys and groups from the iterable:"")
str1 = 'AAAAJJJJHHHHNWWWEERRRSSSOOIIU'    
str1 = [1,2,2,3,4,4,5,5,5,6,6,7,7,7,8]
data_groupby = it.groupby(str1)
for key, group in data_groupby:
    print('Key:', key)
    print('Group:', list(group))
",">>> from collections import Counter
>>> from itertools import groupby
>>>
>>> def group_keys(iterable):
...     return groupby(iterable, key=lambda x: x[0])
>>>
>>> def group_values(iterable):
...     return groupby(iterable, key=lambda x: x[1])
>>>
>>> def group_values_by_key(iterable):
...     return groupby(iterable, key=lambda x: x"
481,Write a Python program to remove all the elements of a given deque object. ,"import collections
odd_nums = (1,3,5,7,9)
odd_deque  = collections.deque(odd_nums)
print(""Original Deque object with odd numbers:"")
print(odd_deque)
print(""Deque length: %d""%(len(odd_deque)))
odd_deque.clear()
print(""Deque object after removing all numbers-"")
print(odd_deque)
print(""Deque length:%d""%(len(odd_deque)))
","import collections

class Deque:
    def __init__(self):
        self.items = collections.deque()

    def isEmpty(self):
        return self.items == collections.deque()

    def addFront(self, item):
        self.items.append(item)

    def addRear(self, item):
        self.items.insert(0, item)

    def removeFront(self):
        return self.items.pop()

    def"
482,"Write a NumPy program to create an array of 4,5 shape and swap column1 with column4. ","import numpy as np
array_nums = np.arange(20).reshape(4,5)
print(""Original array:"")
print(array_nums)
print(""\nAfter swapping column1 with column4:"")
array_nums[:,[0,3]] = array_nums[:,[3,0]]
print(array_nums)
","import numpy as np

arr = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])
arr[:,1] = arr[:,4]
arr[:,2] = arr[:,5]
arr[:,3] = arr[:,6]
arr[:,4] = arr[:,1]
arr[:,5] = arr[:,2]
arr[:,6]"
483,Write a Pandas program to create a TimeSeries to display all the Sundays of given year. ,"import pandas as pd
result = pd.Series(pd.date_range('2020-01-01', periods=52, freq='W-SUN'))
print(""All Sundays of 2019:"")
print(result)
","import pandas as pd

# Create a DataFrame with the following columns:
# 'year', 'weekday', 'day_of_week', 'day_of_year'
# 'weekday', 'day_of_week', 'day_of_year'
# 'weekday', 'day_of_week', 'day_of_year'
# 'weekday', 'day_of_week', 'day_of_year'
# 'weekday', '"
484,Write a Python function that takes a list and returns a new list with unique elements of the first list. ,"def unique_list(l):
  x = []
  for a in l:
    if a not in x:
      x.append(a)
  return x

print(unique_list([1,2,3,3,3,3,4,5])) 
","def unique_list(lst):
    new_lst = []
    for i in lst:
        if i not in new_lst:
            new_lst.append(i)
    return new_lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(unique_list(lst))

""""""

def unique_list(lst):
    new_"
485,Write a Python program to write a Python dictionary to a csv file. After writing the CSV file read the CSV file and display the content. ,"import csv
csv_columns = ['id','Column1', 'Column2', 'Column3', 'Column4', 'Column5']
dict_data = {'id':['1', '2', '3'],
    'Column1':[33, 25, 56],
    'Column2':[35, 30, 30],
    'Column3':[21, 40, 55],
    'Column4':[71, 25, 55],
    'Column5':[10, 10, 40], }
csv_file = ""temp.csv""
try:
   with open(csv_file, 'w') as csvfile:
       writer = csv.DictWriter(csvfile, fieldnames=csv_columns)
       writer.writeheader()
       for data in dict_data:
           writer.writerow(dict_data)
except IOError:
   print(""I/O error"")
data = csv.DictReader(open(csv_file))
print(""CSV file as a dictionary:\n"")
for row in data:
   print(row)
","import csv

with open('solution.csv', 'w', newline='') as solution:
    solution_writer = csv.writer(solution)
    solution_writer.writerow(['Name', 'Age', 'Salary'])
    solution_writer.writerow(['John', '25', '$100'])
    solution_writer.writerow(['Anna', '25', '"
486,"Write a Python program to find the indices of elements of a given list, greater than a specified value. ","def test(lst, value):
    result = [i for i,val in enumerate(lst) if val > value]
    return result
nums = [1234, 1522, 1984, 19372, 1000, 2342, 7626]
print(""\nOriginal list:"")
print(nums)
val = 3000
print(""Indices of elements of the said list, greater than"",val)
print(test(nums,val))
nums = [1234, 1522, 1984, 19372, 1000, 2342, 7626]
print(""\nOriginal list:"")
print(nums)
val = 20000
print(""Indices of elements of the said list, greater than"",val)
print(test(nums,val))
","def solution(lst, x):
    for i in range(len(lst)):
        if lst[i] > x:
            return i
    return -1

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
x = 10
print(solution(lst, x))

""""""

def solution(lst, x):
    for i in range(len(lst"
487,Write a NumPy program to test whether each element of a 1-D array is also present in a second array. ,"import numpy as np
array1 = np.array([0, 10, 20, 40, 60])
print(""Array1: "",array1)
array2 = [0, 40]
print(""Array2: "",array2)
print(""Compare each element of array1 and array2"")
print(np.in1d(array1, array2))
","import numpy as np

arr1 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
arr2 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr1.size)
print(arr2.size)

if arr1.size == arr2.size:
    print(""All elements are present in both arrays"
488,"Write a Python program to determine the largest and smallest integers, longs, floats. ","import sys
print(""Float value information: "",sys.float_info)
print(""\nInteger value information: "",sys.int_info)
print(""\nMaximum size of an integer: "",sys.maxsize) 
","def get_largest_and_smallest(numbers):
    largest = numbers[0]
    smallest = numbers[0]
    for number in numbers:
        if number > largest:
            largest = number
        if number < smallest:
            smallest = number
    return largest, smallest

print(get_largest_and_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

# OUTPUT:
#"
489,Write a Pandas program to extract numbers greater than 940 from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],
    'address': ['7277 Surrey Ave.1111','920 N. Bishop Ave.','9910 Golden Star St.', '1025 Dunbar St.', '1700 West Livingston Court']
    })
print(""Original DataFrame:"")
print(df)
def test_num_great(text): 
    result = re.findall(r'95[5-9]|9[6-9]\d|[1-9]\d{3,}',text)
    return "" "".join(result)
df['num_great']=df['address'].apply(lambda x : test_num_great(x))
print(""\nNumber greater than 940:"")
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

print(df)

# Solution:

# df = pd.read_csv('https://raw.githubusercontent.com/pcm-dpc/"
490,"Write a Python program to print a long text, convert the string to a list and print all the words and their frequencies. ","string_words = '''United States Declaration of Independence
From Wikipedia, the free encyclopedia
The United States Declaration of Independence is the statement
adopted by the Second Continental Congress meeting at the Pennsylvania State
House (Independence Hall) in Philadelphia on July 4, 1776, which announced
that the thirteen American colonies, then at war with the Kingdom of Great
Britain, regarded themselves as thirteen independent sovereign states, no longer
under British rule. These states would found a new nation  the United States of
America. John Adams was a leader in pushing for independence, which was passed
on July 2 with no opposing vote cast. A committee of five had already drafted the
formal declaration, to be ready when Congress voted on independence.

John Adams persuaded the committee to select Thomas Jefferson to compose the original
draft of the document, which Congress would edit to produce the final version.
The Declaration was ultimately a formal explanation of why Congress had voted on July
2 to declare independence from Great Britain, more than a year after the outbreak of
the American Revolutionary War. The next day, Adams wrote to his wife Abigail: ""The
Second Day of July 1776, will be the most memorable Epocha, in the History of America.""
But Independence Day is actually celebrated on July 4, the date that the Declaration of
Independence was approved.

After ratifying the text on July 4, Congress issued the Declaration of Independence in
several forms. It was initially published as the printed Dunlap broadside that was widely
distributed and read to the public. The source copy used for this printing has been lost,
and may have been a copy in Thomas Jefferson's hand.[5] Jefferson's original draft, complete
with changes made by John Adams and Benjamin Franklin, and Jefferson's notes of changes made
by Congress, are preserved at the Library of Congress. The best-known version of the Declaration
is a signed copy that is displayed at the National Archives in Washington, D.C., and which is
popularly regarded as the official document. This engrossed copy was ordered by Congress on
July 19 and signed primarily on August 2.

The sources and interpretation of the Declaration have been the subject of much scholarly inquiry.
The Declaration justified the independence of the United States by listing colonial grievances against
King George III, and by asserting certain natural and legal rights, including a right of revolution.
Having served its original purpose in announcing independence, references to the text of the
Declaration were few in the following years. Abraham Lincoln made it the centerpiece of his rhetoric
(as in the Gettysburg Address of 1863) and his policies. Since then, it has become a well-known statement
on human rights, particularly its second sentence:

We hold these truths to be self-evident, that all men are created equal, that they are endowed by their
Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness.

This has been called ""one of the best-known sentences in the English language"", containing ""the most potent
and consequential words in American history"". The passage came to represent a moral standard to which
the United States should strive. This view was notably promoted by Abraham Lincoln, who considered the
Declaration to be the foundation of his political philosophy and argued that it is a statement of principles
through which the United States Constitution should be interpreted.

The U.S. Declaration of Independence inspired many other similar documents in other countries, the first
being the 1789 Declaration of Flanders issued during the Brabant Revolution in the Austrian Netherlands
(modern-day Belgium). It also served as the primary model for numerous declarations of independence across
Europe and Latin America, as well as Africa (Liberia) and Oceania (New Zealand) during the first half of the
19th century.'''

word_list = string_words.split()

word_freq = [word_list.count(n) for n in word_list]

print(""String:\n {} \n"".format(string_words))
print(""List:\n {} \n"".format(str(word_list)))
print(""Pairs (Words and Frequencies:\n {}"".format(str(list(zip(word_list, word_freq)))))
","def main():
    s = ""Hello World""
    l = s.split()
    print(l)
    print(len(l))
    print(l[0])
    print(l[1])
    print(l[2])
    print(l[3])
    print(l[4])
    print(l[5])
    print(l[6])
    print(l[7])
    print(l"
491,Write a Pandas program to extract numbers less than 100 from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],
    'address': ['72 Surrey Ave.11','92 N. Bishop Ave.','9910 Golden Star St.', '102 Dunbar St.', '17 West Livingston Court']
    })
print(""Original DataFrame:"")
print(df)

def test_num_less(n):
    nums = []
    for i in n.split():
        result = re.findall(r'\b(0*(?:[1-9][0-9]?|100))\b',i)
        nums.append(result)
        all_num=["","".join(x) for x in nums if x != []]
    return "" "".join(all_num)

df['num_less'] = df['address'].apply(lambda x : test_num_less(x))
print(""\nNumber less than 100:"")
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

print(df.loc[df['col2'] < 100])

""""""

import pandas as pd

df = pd.DataFrame({'col"
492,Write a Pandas program to split the following dataframe into groups and count unique values of 'value' column. ,"import pandas as pd
df = pd.DataFrame({
    'id': [1, 1, 2, 3, 3, 4, 4, 4],
    'value': ['a', 'a', 'b', None, 'a', 'a', None, 'b']
})
print(""Original DataFrame:"")
print(df)
print(""Count unique values:"")
print (df.groupby('value')['id'].nunique())
","df = pd.DataFrame({'value': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'group': ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']})

df.groupby('group').count()

df.groupby('group').agg({'value': 'count'})

df.groupby('group')."
493,"Write a Python program to compute the sum of elements of a given array of integers, use map() function. ","from array import array
def array_sum(nums_arr):
    sum_n = 0
    for n in nums_arr:
        sum_n += n
    return sum_n

nums = array('i', [1, 2, 3, 4, 5, -15])
print(""Original array:"",nums)
nums_arr = list(map(int, nums))
result = array_sum(nums_arr)
print(""Sum of all elements of the said array:"")
print(result)
","def sum_of_elements(arr):
    return sum(map(int, arr))

print(sum_of_elements([1, 2, 3, 4, 5]))

""""""

# Solution 1

def sum_of_elements(arr):
    return sum(map(int, arr))

print(sum_of_elements([1, 2, 3, 4, 5]))

# Solution 2

def sum"
494,Write a Python program to convert a given string into a list of words. ,"str1 = ""The quick brown fox jumps over the lazy dog.""
print(str1.split(' '))
str1 = ""The-quick-brown-fox-jumps-over-the-lazy-dog.""
print(str1.split('-'))
","s = ""Hello World""
print(s.split())

""""""

s = ""Hello World""
print(s.split())

""""""

s = ""Hello World""
print(s.split())

""""""

s = ""Hello World""
print(s.split())

""""""

s = ""Hello World""
print(s.split())

""""""

s = ""Hello World""
print(s.split())

""""""

s = ""Hello"
495,Write a Python program to display a given decimal value in scientific notation. Use decimal.Decimal,"import decimal
#Source: https://bit.ly/2SfZEtL
def format_e(n):
    a = '%E' % n
    return a.split('E')[0].rstrip('0').rstrip('.') + 'E' + a.split('E')[1]

print(""Original decimal value: ""+ ""40800000000.00000000000000"")
print(""Scientific notation of the said decimal value:"")
print(format_e(decimal.Decimal('40800000000.00000000000000')))
print(""\nOriginal decimal value: ""+ ""40000000000.00000000000000"")
print(""Scientific notation of the said decimal value:"")
print(format_e(decimal.Decimal('40000000000.00000000000000')))
print(""\nOriginal decimal value: ""+ ""40812300000.00000000000000"")
print(""Scientific notation of the said decimal value:"")
print(format_e(decimal.Decimal('40812300000.00000000000000')))
",">>> import decimal
>>> print(decimal.Decimal(1.1))
1.1
>>> print(decimal.Decimal(1.1).as_integer_ratio())
(1, 1)
>>> print(decimal.Decimal(1.1).as_integer_ratio().limit_denominator(1000))
(1, 1)
>>> print(decimal.Decimal(1.1).as_integer_ratio().limit_denominator"
496,Write a Python program to create a list by concatenating a given list which range goes from 1 to n. ,"my_list = ['p', 'q']
n = 4
new_list = ['{}{}'.format(x, y) for y in range(1, n+1) for x in my_list]
print(new_list)
","def solution(n):
    lst = []
    for i in range(1, n+1):
        lst.append(i)
    return lst

print(solution(5))

# Output: [1, 2, 3, 4, 5]

# Time complexity: O(n)
# Space Complexity: O(n)

# Runtime: 32 ms (96.41%)
# Memory Usage: 14.2 MB"
497,Write a Python program to find the index of an item in a specified list. ,"num =[10, 30, 4, -6]
print(num.index(30))
","def index(list, item):
    for i in range(len(list)):
        if list[i] == item:
            return i
    return -1

print(index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))

""""""

def index(list, item):
    for i in range(len(list)):
        if list[i] == item:
            return i
    return -1"
498,Write a Pandas program to generate time series combining day and intraday offsets intervals. ,"import pandas as pd
dateset1 = pd.date_range('2029-01-01 00:00:00', periods=20, freq='3h10min')
print(""Time series with frequency 3h10min:"")
print(dateset1)
dateset2 = pd.date_range('2029-01-01 00:00:00', periods=20, freq='1D10min20U')
print(""\nTime series with frequency 1 day 10 minutes and 20 microseconds:"")
print(dateset2)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'day': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'intraday': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

# Create a time series
ts = df.groupby('day').sum()

# Create a time series
ts = df.groupby('"
499,Write a Python program to print the following integers with zeros on the left of specified width. ,"x = 3
y = 123
print(""\nOriginal Number: "", x)
print(""Formatted Number(left padding, width 2): ""+""{:0>2d}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number(left padding, width 6): ""+""{:0>6d}"".format(y));
print()
","# Solution 1:
print(""\nSolution 1:"")
print(""\n"".join([""{:>2}"".format(i) for i in range(10)]))

# Solution 2:
print(""\nSolution 2:"")
print(""\n"".join([""{:>2}"".format(i) for i in range(10)]))

# Solution 3:
print(""\nSolution 3:"")
print(""\n"".join([""{:"
501,Write a Python program to add two given lists using map and lambda. ,"nums1 = [1, 2, 3]
nums2 = [4, 5, 6]
print(""Original list:"")
print(nums1)
print(nums2)
result = map(lambda x, y: x + y, nums1, nums2)
print(""\nResult: after adding two list"")
print(list(result))
","def add_two_lists(list1, list2):
    return list(map(lambda x, y: x + y, list1, list2))

print(add_two_lists([1, 2, 3], [4, 5, 6]))

""""""

def add_two_lists(list1, list2):
    return list(map(lambda x, y: x + y, list1, list2))

print(add_two_lists([1, 2,"
502,Write a Python program to generate and print a list of first and last 5 elements where the values are square of numbers between 1 and 30 (both included). ,"def printValues():
	l = list()
	for i in range(1,21):
		l.append(i**2)
	print(l[:5])
	print(l[-5:])

printValues()
","import random

lst = []
for i in range(1, 31):
    lst.append(i**2)
print(lst)

# Solution:

lst = []
for i in range(1, 31):
    lst.append(i**2)
print(lst)

# Solution:

lst = []
for i in range(1, 31):"
503,Write a NumPy program to extract all the rows from a given array where a specific column starts with a given character. ,"import numpy as np
np.set_printoptions(linewidth=100)
student =  np.array([['01', 'V', 'Debby Pramod'],
 ['02', 'V', 'Artemiy Ellie'],
 ['03', 'V', 'Baptist Kamal'],
 ['04', 'V', 'Lavanya Davide'],
 ['05', 'V', 'Fulton Antwan'],
 ['06', 'V', 'Euanthe Sandeep'],
 ['07', 'V', 'Endzela Sanda'],
 ['08', 'V', 'Victoire Waman'],
 ['09', 'V', 'Briar Nur'],
 ['10', 'V', 'Rose Lykos']])
print(""Original array:"")
print(student)
char='E'
result = student[np.char.startswith(student[:,2], char)]
print(""\nStudent name starting with"",char,"":"")
print(result)
char='1'
result = student[np.char.startswith(student[:,0], char)]
print(""\nStudent id starting with"",char,"":"")
print(result)
","import numpy as np

arr = np.array([[1,2,3,4,5,6,7,8,9,10],
                [11,12,13,14,15,16,17,18,19,20],
                [21,22,23,24,25,26,27,28,29,30]])

print(arr[arr[:,0].str.startswith('A')])"
504,Write a Python program to square the elements of a list using map() function. ,"def square_num(n):
  return n * n
nums = [4, 5, 2, 9]
print(""Original List: "",nums)
result = map(square_num, nums)
print(""Square the elements of the said list using map():"")
print(list(result))
","def square_list(lst):
    return map(lambda x: x**2, lst)

lst = [1, 2, 3, 4, 5]
print(square_list(lst))

""""""

# Solution:

def square_list(lst):
    return map(lambda x: x**2, lst)

lst = [1, 2, 3, 4, 5]
print(square_list(lst))"
505,Write a Python program to read a file line by line and store it into a list. ,"def file_read(fname):
        with open(fname) as f:
                #Content_list is the list that contains the read lines.     
                content_list = f.readlines()
                print(content_list)

file_read(\'test.txt\')
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20"
506,Write a Python program to read a file line by line store it into an array. ,"def file_read(fname):
        content_array = []
        with open(fname) as f:
                #Content_list is the list that contains the read lines.     
                for line in f:
                        content_array.append(line)
                print(content_array)

file_read('test.txt')
","def read_file(filename):
    f = open(filename, 'r')
    data = f.readlines()
    f.close()
    return data

def read_file_as_array(filename):
    f = open(filename, 'r')
    data = f.readlines()
    f.close()
    return data

def write_file(filename, data):
    f = open(filename, 'w')
    for line in data:"
507,Write a Python program that takes a text file as input and returns the number of words of a given text file. ,"def count_words(filepath):
   with open(filepath) as f:
       data = f.read()
       data.replace("","", "" "")
       return len(data.split("" ""))
print(count_words(""words.txt""))
","python solution.py input.txt

""""""

import sys

def main():
    try:
        file_name = sys.argv[1]
        file = open(file_name, 'r')
        count = 0
        for line in file:
            count += len(line.split())
        print(count)
    except IndexError:
        print(""File name missing"")
    except FileNotFoundError:
        print(""File"
508,Write a Python program for nth Catalan Number. ,"def catalan_number(num):
    if num <=1:
         return 1
   
    res_num = 0
    for i in range(num):
        res_num += catalan_number(i) * catalan_number(num-i-1)
    return res_num
 
for n in range(10):
    print(catalan_number(n))
	",">>> n = int(input())
>>> print(nCr(n,3))
2
>>> print(nCr(n,2))
3
>>> print(nCr(n,1))
1
>>> print(nCr(n,0))
1

""""""

def nCr(n,r):
    if n == 0 or n == 1:
        return 1
    if n < 0 or r < 0:
        return 0
    return nCr(n-1,r) + nCr"
509,Write a Python program to get the total length of all values of a given dictionary with string values. ,"def test(dictt):
    result = sum((len(values) for values in dictt.values()))
    return result
color = {'#FF0000':'Red', '#800000':'Maroon', '#FFFF00':'Yellow', '#808000':'Olive'}
print(""\nOriginal dictionary:"")
print(color)
print(""\nTotal length of all values of the said dictionary with string values:"")
print(test(color))
","def get_length(dictionary):
    total = 0
    for key in dictionary:
        total += len(dictionary[key])
    return total

print(get_length({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}))

""""""

def get_length(dictionary):
    total = 0
    for key in dictionary:
        total += len(dictionary"
510,Write a Pandas program to convert 1,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32],
    't_id': ['t1', 't2', 't3', 't4', 't5', 't6']})
print(""Original DataFrame:"")
print(df)
print(""\nMultiIndex using columns 't_id', school_code and 'class':"")
df1 = df.set_index(['t_id', 'school_code', 'class'])
print(df1)
print(""\nConvert 1st and 3rd levels in the index frame into columns:"")
df2 = df1.reset_index(level=['t_id', 'class'])
print(df2)
","1. Create a Pandas dataframe from the given data.
2. Create a Pandas series from the given data.
3. Create a Pandas series from the given data.
4. Create a Pandas series from the given data.
5. Create a Pandas series from the given data.
6. Create a Pandas series from the given data.
7. Create a Pandas series from the given data.
8. Create a Pandas series from the given data.
9. Create a Pandas series from the given data.
10."
511,Write a Python program to access a function inside a function. ,"def test(a):
        def add(b):
                nonlocal a
                a += 1
                return a+b
        return add
func= test(4)
print(func(4))
","def my_function(x):
    return x * x

print(my_function(5))

""""""

def my_function(x):
    return x * x

print(my_function(5))

""""""

def my_function(x):
    return x * x

print(my_function(5))

""""""

def my_function(x):
    return x * x

print(my_function(5))

""""""

def my_"
512,Write a Python program to filter a list of integers using Lambda. ,"nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(""Original list of integers:"")
print(nums)
print(""\nEven numbers from the said list:"")
even_nums = list(filter(lambda x: x%2 == 0, nums))
print(even_nums)
print(""\nOdd numbers from the said list:"")
odd_nums = list(filter(lambda x: x%2 != 0, nums))
print(odd_nums)
","def filter_list(lst):
    return list(filter(lambda x: x % 2 == 0, lst))

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(filter_list(lst))

""""""

# Solution

def filter_list(lst):
    return list(filter(lambda x: x % 2 == 0, lst))

lst = [1, 2, 3, 4"
513,"Write a Pandas program to find out the 'WHO region, 'Country', 'Beverage Types' in the year '1986' or '1989' where WHO region is 'Americas' or 'Europe' from the world alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details ('WHO region','Country','Beverage Types') \nin the year 1986 or 1989 where  WHO region is Americas  or 'Europe':"")
print(w_a_con[((w_a_con['Year']==1985) | (w_a_con['Year']==1989)) & ((w_a_con['WHO region']=='Americas') | (w_a_con['WHO region']=='Europe'))][['WHO region','Country','Beverage Types']].head(10))
","import pandas as pd

df = pd.read_csv('world_alcohol_consumption.csv')

df['WHO region, Country, Beverage Types'] = df['WHO region, Country, Beverage Types'].str.replace('Americas', 'Americas')
df['WHO region, Country, Beverage Types'] ="
514,Write a Python program to construct a Decimal from a float and a Decimal from a string. Also represent the Decimal value as a tuple. Use decimal.Decimal,"import decimal
print(""Construct a Decimal from a float:"")
pi_val = decimal.Decimal(3.14159)
print(pi_val)
print(pi_val.as_tuple())
print(""\nConstruct a Decimal from a string:"")
num_str = decimal.Decimal(""123.25"")
print(num_str)
print(num_str.as_tuple())
","import decimal

def solution(x, y):
    return (decimal.Decimal(x) / decimal.Decimal(y))

print(solution(1.5, '1.5'))
print(solution(1.5, '1.5e+2'))
print(solution(1.5, '1.5e+2.5'))
print(solution"
515,Write a Python program to remove all duplicate elements from a given array and returns a new array. ,"import array as arr
def test(nums):
    return sorted(set(nums),key=nums.index)

array_num = arr.array('i', [1, 3, 5, 1, 3, 7, 9])
print(""Original array:"")
for i in range(len(array_num)):    
    print(array_num[i], end=' ')
print(""\nAfter removing duplicate elements from the said array:"")
result = arr.array('i', test(array_num))
for i in range(len(result)):    
    print(result[i], end=' ')
array_num = arr.array('i', [2, 4, 2, 6, 4, 8])
print(""\nOriginal array:"")
for i in range(len(array_num)):    
    print(array_num[i], end=' ')
print(""\nAfter removing duplicate elements from the said array:"")
result = arr.array('i', test(array_num))
for i in range(len(result)):    
    print(result[i], end=' ')
","import collections

def removeDuplicates(arr):
    # create a set to store unique elements
    unique_elements = set(arr)
    # create a new array to store the unique elements
    new_arr = []
    # iterate through the array
    for i in arr:
        # if the element is not in the set, add it to the new array
        if i not in unique_elements:
            new_arr.append(i)"
516,Write a Pandas program to find and replace the missing values in a given DataFrame which do not have any valuable information. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,""--"",70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,""?"",12.43,2480.4,250.45, 3045.6],
'ord_date': ['?','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,""--"",3002,3001,3001],
'salesman_id':[5002,5003,""?"",5001,np.nan,5002,5001,""?"",5003,5002,5003,""--""]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nReplace the missing values with NaN:"")
result = df.replace({""?"": np.nan, ""--"": np.nan})
print(result)
","import pandas as pd

# Read the data
df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pima-indians-diabetes.csv?raw=true')

# Replace missing values
df.fillna(df.median(), inplace=True)

# Print the dataframe
print(df)

# Create a new column called 'Class'"
517,Write a Python program to find the index of the last element in the given list that satisfies the provided testing function. ,"def find_last_index(lst, fn):
  return len(lst) - 1 - next(i for i, x in enumerate(lst[::-1]) if fn(x))

print(find_last_index([1, 2, 3, 4], lambda n: n % 2 == 1))
","def last_element(lst):
    for i in range(len(lst)):
        if lst[i] == last_element(lst[i:]):
            return i
    return -1

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(last_element(lst))

""""""

def last_element(lst):
    for i in range"
518,Write a Python program to iterate over all pairs of consecutive items in a given list. ,"def pairwise(l1):
    temp = []
    for i in range(len(l1) - 1):
        current_element, next_element = l1[i], l1[i + 1]
        x = (current_element, next_element)
        temp.append(x)
    return temp
l1 = [1,1,2,3,3,4,4,5]
print(""Original lists:"")
print(l1)
print(""\nIterate over all pairs of consecutive items of the said list:"")
print(pairwise(l1))
","def pairs(lst):
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            yield lst[i], lst[j]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(list(pairs(lst)))

""""""

def pairs(lst):
    for i in range(len(l"
519,Write a Python program to create a list with the non-unique values filtered out. ,"from collections import Counter
def filter_non_unique(lst):
  return [item for item, count in Counter(lst).items() if count == 1]
print(filter_non_unique([1, 2, 2, 3, 4, 4, 5]))
","def unique_list(lst):
    new_lst = []
    for i in lst:
        if i not in new_lst:
            new_lst.append(i)
    return new_lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(unique_list(lst))

""""""

# Solution:

def unique_list(lst):
    new"
520,Write a Python program to find the second smallest number in a list. ,"def second_smallest(numbers):
  if (len(numbers)<2):
    return
  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):
    return
  dup_items = set()
  uniq_items = []
  for x in numbers:
    if x not in dup_items:
      uniq_items.append(x)
      dup_items.add(x)
  uniq_items.sort()    
  return  uniq_items[1]   

print(second_smallest([1, 2, -8, -2, 0, -2]))
print(second_smallest([1, 1, 0, 0, 2, -2, -2]))
print(second_smallest([1, 1, 1, 0, 0, 0, 2, -2, -2]))
print(second_smallest([2,2]))
print(second_smallest([2]))
","def second_smallest(numbers):
    smallest = numbers[0]
    for i in range(1, len(numbers)):
        if smallest > numbers[i]:
            smallest = numbers[i]
    return smallest

print(second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def second_smallest(numbers):
    smallest = numbers[0]
    for i in"
521,"Write a Python program to create a deque and append few elements to the left and right, then remove some elements from the left, right sides and reverse the deque. ","import collections
# Create a deque
deque_colors = collections.deque([""Red"",""Green"",""White""])
print(deque_colors)
# Append to the left
print(""\nAdding to the left: "")
deque_colors.appendleft(""Pink"")
print(deque_colors)
# Append to the right
print(""\nAdding to the right: "")
deque_colors.append(""Orange"")
print(deque_colors)
# Remove from the right
print(""\nRemoving from the right: "")
deque_colors.pop()
print(deque_colors)
# Remove from the left
print(""\nRemoving from the left: "")
deque_colors.popleft()
print(deque_colors)
# Reverse the dequeue
print(""\nReversing the deque: "")
deque_colors.reverse()
print(deque_colors)
","def deque(n):
    deque = collections.deque()
    for i in range(n):
        deque.append(i)
    return deque

n = int(input(""Enter the number of elements to be added to the left and right sides: ""))
print(""The elements are: "", end="""")
for i in range(n):
    print(deque(i+"
522,Write a Python program to count float number in a given mixed list using lambda. ,"def count_integer(list1):
    ert = list(map(lambda i: isinstance(i, float), list1)) 
    result = len([e for e in ert if e])         
    return result
list1 = [1, 'abcd', 3.12, 1.2, 4, 'xyz', 5, 'pqr', 7, -5, -12.22]
print(""Original list:"")
print(list1)
print(""\nNumber of floats in the said mixed list:"")
print(count_integer(list1))
","def count_float(mixed_list):
    return sum(map(lambda x: isinstance(x, float), mixed_list))

print(count_float([1, 2.0, 'a', [1, 2]]))

""""""

def count_float(mixed_list):
    return sum(map(lambda x: isinstance(x, float), mixed_list))

print(count_float([1, 2.0, 'a', [1, 2"
523,Write a NumPy program to compute the histogram of nums against the bins. ,"import numpy as np
import matplotlib.pyplot as plt
nums = np.array([0.5, 0.7, 1.0, 1.2, 1.3, 2.1])
bins = np.array([0, 1, 2, 3])
print(""nums: "",nums)
print(""bins: "",bins)
print(""Result:"", np.histogram(nums, bins))
plt.hist(nums, bins=bins)
plt.show()
","nums = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
bins = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Solution:

# Solution 1:
nums = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
bins = np.array([1, 2, 3, 4,"
524,Write a Python program to extract numbers from a given string. ,"def test(str1):
    result = [int(str1) for str1 in str1.split() if str1.isdigit()]
    return result
str1 = ""red 12 black 45 green"" 
print(""Original string:"", str1) 
print(""Extract numbers from the said string:"")
print(test(str1))
","def solution(s):
    # your code here
    return [int(i) for i in s.split() if i.isdigit()]

print(solution('1 2 3 4 5 6 7 8 9 10'))

# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Output: [1, 2,"
525,Write a Pandas program to partition each of the passengers into four categories based on their age. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = pd.cut(df['age'], [0, 10, 30, 60, 80])
print(result)
","# Solution 1:
# 1. Create a dictionary to store the age of each passenger.
# 2. Create a list to store the names of the passengers.
# 3. Create a function to calculate the average age of the passengers.
# 4. Create a function to calculate the number of passengers who are under the average age.
# 5. Create a function to calculate the number of passengers who are over the average age.
# 6. Create a function to calculate the number of passengers who are under the average"
526,"Write a NumPy program to fetch all items from a given array of 4,5 shape which are either greater than 6 and a multiple of 3. ","import numpy as np
array_nums1 = np.arange(20).reshape(4,5)
print(""Original arrays:"")
print(array_nums1)
result = array_nums1[(array_nums1>6) & (array_nums1%3==0)]
print(""\nItems greater than 6 and a multiple of 3 of the said array:"")
print(result)
","import numpy as np

arr = np.arange(4,6,3)
print(arr)

arr = np.arange(4,6,3)
print(arr)

arr = np.arange(4,6,3)
print(arr)

arr = np.arange(4,6,3)
print(arr)

arr = np.arange(4,6"
527,Write a Python program to find smallest window that contains all characters of a given string. ,"from collections import defaultdict   

def find_sub_string(str): 
    str_len = len(str) 
      
    # Count all distinct characters. 
    dist_count_char = len(set([x for x in str])) 
  
    ctr, start_pos, start_pos_index, min_len = 0, 0, -1, 9999999999
    curr_count = defaultdict(lambda: 0) 
    for i in range(str_len): 
        curr_count[str[i]] += 1
 
        if curr_count[str[i]] == 1: 
            ctr += 1
  
        if ctr == dist_count_char: 
            while curr_count[str[start_pos]] > 1: 
                if curr_count[str[start_pos]] > 1: 
                    curr_count[str[start_pos]] -= 1
                start_pos += 1
  
            len_window = i - start_pos + 1
            if min_len > len_window: 
                min_len = len_window 
                start_pos_index = start_pos 
    return str[start_pos_index: start_pos_index + min_len] 
      
str1 = ""asdaewsqgtwwsa""
print(""Original Strings:\n"",str1)
print(""\nSmallest window that contains all characters of the said string:"")
print(find_sub_string(str1)) 
","def smallest_window(string):
    smallest_window = 0
    for i in range(len(string)):
        for j in range(i, len(string)):
            if string[i:j+1] == string:
                smallest_window = string[i:j+1]
                break
    return smallest_window

print(smallest_window(""abcdefghijklmnopqrstuvwxyz""))

""""""

def smallest"
528,Write a Python program to find the years where 25th of December be a Sunday between 2000 and 2150. ,"'''Days of the week'''
# Source:https://bit.ly/30NoXF8
 
from datetime import date
from itertools import islice
 
 
# xmasIsSunday :: Int -> Bool
def xmasIsSunday(y):
    '''True if Dec 25 in the given year is a Sunday.'''
    return 6 == date(y, 12, 25).weekday()
 
 
# main :: IO ()
def main():
    '''Years between 2000 and 2150 with 25 December on a Sunday'''
 
    xs = list(filter(
        xmasIsSunday,
        enumFromTo(2000)(2150)
    ))
    total = len(xs)
    print(
        fTable(main.__doc__ + ':\n\n' + '(Total ' + str(total) + ')\n')(
            lambda i: str(1 + i)
        )(str)(index(xs))(
            enumFromTo(0)(total - 1)
        )
    )
 
 
# GENERIC -------------------------------------------------
 
# enumFromTo :: (Int, Int) -> [Int]
def enumFromTo(m):
    '''Integer enumeration from m to n.'''
    return lambda n: list(range(m, 1 + n))
 
 
# index (!!) :: [a] -> Int -> a
def index(xs):
    '''Item at given (zero-based) index.'''
    return lambda n: None if 0 > n else (
        xs[n] if (
            hasattr(xs, ""__getitem__"")
        ) else next(islice(xs, n, None))
    )
 
 
# unlines :: [String] -> String
def unlines(xs):
    '''A single string formed by the intercalation
       of a list of strings with the newline character.
    '''
    return '\n'.join(xs)
 
 
#  FORMATTING ---------------------------------------------
# fTable :: String -> (a -> String) ->
#                     (b -> String) -> (a -> b) -> [a] -> String
def fTable(s):
    '''Heading -> x display function -> fx display function ->
                     f -> xs -> tabular string.
    '''
    def go(xShow, fxShow, f, xs):
        ys = [xShow(x) for x in xs]
        w = max(map(len, ys))
        return s + '\n' + '\n'.join(map(
            lambda x, y: y.rjust(w, ' ') + ' -> ' + fxShow(f(x)),
            xs, ys
        ))
    return lambda xShow: lambda fxShow: lambda f: lambda xs: go(
        xShow, fxShow, f, xs
    ) 
 
# MAIN --
if __name__ == '__main__':
    main()
","def find_sunday(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return year - 2000
            else:
                return year - 2000 + 1
        else:
            return year - 2000 + 1
    else:
        return year - 2000 + 1

print(find_sunday(25))

""""""

""""""

""""""

""""""

"""""""
529,Write a Python program to accept a filename from the user and print the extension of that. ,"filename = input(""Input the Filename: "")
f_extns = filename.split(""."")
print (""The extension of the file is : "" + repr(f_extns[-1]))
","import os

def get_extension(filename):
    return os.path.splitext(filename)[1]

print(get_extension(""hello.txt""))

""""""

import os

def get_extension(filename):
    return os.path.splitext(filename)[1]

print(get_extension(""hello.txt""))

""""""

import os

def get_extension(filename):
    return os.path."
530,Write a NumPy program to save two given arrays into a single file in compressed format (.npz format) and load it. ,"import numpy as np
import os
x = np.arange(10)
y = np.arange(11, 20)
print(""Original arrays:"")
print(x)
print(y)
np.savez('temp_arra.npz', x=x, y=y)
print(""Load arrays from the 'temp_arra.npz' file:"")
with np.load('temp_arra.npz') as data:
    x2 = data['x']
    y2 = data['y']
    print(x2)
    print(y2)
","import numpy as np

arr1 = np.array([1, 2, 3, 4, 5])
arr2 = np.array([6, 7, 8, 9, 10])

np.savez('arr1.npz', arr1)
arr2 = np.load('arr1.npz')

arr3 = arr2['arr1']
arr4 = arr2['arr2']

arr3 = arr3."
531,Write a Python program to swap two sublists in a given list. ,"nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
print(""Original list:"")
print(nums)
nums[6:10], nums[1:3] = nums[1:3], nums[6:10]
print(""\nSwap two sublists of the said list:"")
print(nums)
nums[1:3], nums[4:6] = nums[4:6], nums[1:3]
print(""\nSwap two sublists of the said list:"")
print(nums)
","def swap_two_sublists(list1, list2):
    list1[0], list1[1] = list1[1], list1[0]
    list2[0], list2[1] = list2[1], list2[0]
    return list1, list2

list1 = [1, 2, 3, 4, 5]
list2 = [6, 7, 8, 9, 10]

print(swap_two_sublists(list1"
532,Write a Pandas program to convert a specified character column in upper/lower cases in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})

df1 = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})
print(""Original DataFrame:"")
print(df)
print(""\nUpper cases in comapny_code:"")
df['upper_company_code'] = list(map(lambda x: x.upper(), df['company_code']))
print(df)
print(""\nLower cases in comapny_code:"")
df1['lower_company_code'] = list(map(lambda x: x.lower(), df1['company_code']))
print(df1)
","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pandas_datareader/data/election_data.csv?raw=true')

df['Election_results'] = df['Election_results'].str.upper()

df.head()

df.head()

df.head()

df.head()

df"
533,Write a NumPy program to stack 1-D arrays as columns wise. ,"import numpy as np    
print(""\nOriginal arrays:"")
x = np.array((1,2,3))
y = np.array((2,3,4))
print(""Array-1"")
print(x)
print(""Array-2"")
print(y)
new_array =  np.column_stack((x, y))
print(""\nStack 1-D arrays as columns wise:"")
print(new_array)
","import numpy as np

arr = np.array([[1,2,3,4,5,6,7,8,9,10],
                [11,12,13,14,15,16,17,18,19,20],
                [21,22,23,24,25,26,27,28,29,30]])

print(arr)

arr = np.array([[1,2,3,4,5,6,7,8,"
534,Write a NumPy program to get the lower-triangular L in the Cholesky decomposition of a given array. ,"import numpy as np
a = np.array([[4, 12, -16], [12, 37, -53], [-16, -53, 98]], dtype=np.int32)
print(""Original array:"")
print(a)
L = np.linalg.cholesky(a)
print(""Lower-trianglular L in the Cholesky decomposition of the said array:"")
print(L)
","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

L = np.linalg.cholesky(A)

print(L)

# Output:
[[ 1.  2.  3.]
 [ 4.  5.  6.]
 [ 7.  8.  9.]]

""""""

import numpy as"
535,Write a Python program to get the unique values in a given list of lists. ,"def unique_values_in_list_of_lists(lst):
    result = set(x for l in lst for x in l)
    return list(result)
nums = [[1,2,3,5], [2,3,5,4], [0,5,4,1], [3,7,2,1], [1,2,1,2]]
print(""Original list:"")
print(nums)
print(""Unique values of the said list of lists:"")
print(unique_values_in_list_of_lists(nums))
chars = [['h','g','l','k'], ['a','b','d','e','c'], ['j','i','y'], ['n','b','v','c'], ['x','z']]
print(""\nOriginal list:"")
print(chars)
print(""Unique values of the said list of lists:"")
print(unique_values_in_list_of_lists(chars))
","def unique_list(lst):
    lst = list(set(lst))
    return lst

lst = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]
print(unique_list(lst))

""""""

def unique_list(lst):
    lst = list("
536,Write a NumPy program to compute the condition number of a given matrix. ,"import numpy as np
m = np.array([[1,2],[3,4]])
print(""Original matrix:"")
print(m)
result =  np.linalg.cond(m)
print(""Condition number of the said matrix:"")
print(result)
","import numpy as np

A = np.array([[1, 2, 3, 4, 5],
              [6, 7, 8, 9, 10],
              [11, 12, 13, 14, 15],
              [16, 17, 18, 19, 20]])

print(np.linalg.cond(A))

""""""

# Solution

import numpy as np

A = np.array([[1, 2, 3, 4, 5],"
537,"Write a Python program to create and display all combinations of letters, selecting each letter from a different key in a dictionary. ","import itertools      
d ={'1':['a','b'], '2':['c','d']}
for combo in itertools.product(*[d[k] for k in sorted(d.keys())]):
    print(''.join(combo))
	","def get_combinations(key, dictionary):
    if key in dictionary:
        return dictionary[key]
    else:
        return get_combinations(key + 1, dictionary)

print(get_combinations('a', {'a': 1, 'b': 2, 'c': 3}))

""""""

def get_combinations(key, dictionary):
    if key in dictionary:
        return dictionary[key]
    else:"
538,Write a Pandas program to filter the specified columns and records by range from world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nFiltering records by label or index:"")
print(w_a_con.loc[0:4, [""WHO region"", ""Beverage Types""]])
","# Import pandas
import pandas as pd

# Read the data
dataset = pd.read_csv('datasets/Alcohol_Consumption.csv')

# Create a new column 'Alcohol_Consumption'
dataset['Alcohol_Consumption'] = dataset['Alcohol_Consumption'].apply(lambda x: x if x >= 0 else 0)

# Create a new column 'Alcohol_Consumption'
dataset"
539,Write a NumPy program to create a new array which is the average of every consecutive triplet of elements of a given array. ,"import numpy as np
arr1 = np.array([1,2,3, 2,4,6, 1,2,12, 0,-12,6])
print(""Original array:"")
print(arr1)
result = np.mean(arr1.reshape(-1, 3), axis=1)
print(""Average of every consecutive triplet of elements of the said array:"")
print(result)
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

b = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

c = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

d = np.array([1, 2,"
540,"Write a Python program to create a new Arrow object, cloned from the current one. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
cloned = a.clone()
print(""\nCloned datetime:"")
print(cloned)
",">>> import arrow
>>> arrow.Arrow(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50"
541,Write a Pandas program to get the length of the integer of a given column in a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'skfsalf', 'sdfslew', 'safsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})
print(""Original DataFrame:"")
print(df)
print(""\nLength of sale_amount:"")
df['sale_amount_length'] = df['sale_amount'].map(str).apply(len)
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

print(df['col2'].apply(len))

# Output:
# col2    8
# col1    10
# dtype: int"
542,"Write a Python program to get information about the file pertaining to the file mode. Print the information - ID of device containing file, inode number, protection, number of hard links, user ID of owner, group ID of owner, total size (in bytes), time of last access, time of last modification and time of last status change. ","import os
path = 'e:\\testpath\\p.txt'
fd = os.open(path, os.O_RDWR)
info = os.fstat(fd)
print (f""ID of device containing file: {info.st_dev}"")
print (f""Inode number: {info.st_ino}"")
print (f""Protection: {info.st_mode}"")
print (f""Number of hard links: {info.st_nlink}"")
print (f""User ID of owner: {info.st_uid}"")
print (f""Group ID of owner: {info.st_gid}"")
print (f""Total size, in bytes: {info.st_size}"")
print (f""Time of last access: {info.st_atime}"")
print (f""Time of last modification: {info.st_mtime }"")
print (f""Time of last status change: {info.st_ctime }"")
os.close( fd)
","import os

def get_file_mode(file_path):
    """"""
    Returns the file mode of the file.
    """"""
    try:
        # Open the file for reading
        f = open(file_path, 'r')"
543,Write a Python program to create a flat list of all the values in a flat dictionary. ,"def test(flat_dict):
  return list(flat_dict.values())
students = {
  'Theodore': 19,
  'Roxanne': 20,
  'Mathew': 21,
  'Betty': 20
}
print(""\nOriginal dictionary elements:"")
print(students)
print(""\nCreate a flat list of all the values of the said flat dictionary:"")
print(test(students))
","def flat_list(d):
    l = []
    for i in d:
        l.append(i)
    return l

d = {'red': 1, 'blue': 2, 'white': 3}
print(flat_list(d))

""""""

# Solution

def flat_list(d):
    l = []
    for i in d:
        l.append(i)
    return l

d = {'red': 1"
544,rite a Python program to find numbers between 100 and 400 (both included) where each digit of a number is an even number. The numbers obtained should be printed in a comma-separated sequence.,"items = []
for i in range(100, 401):
    s = str(i)
    if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0):
        items.append(s)
print( "","".join(items))
","import math

def even_numbers(n):
    for i in range(1, n+1):
        if i % 2 == 0:
            print(i, end=', ')

n = int(input())
even_numbers(n)

""""""

#!/bin/python3

import math
import os
import random
import re
import sys"
545,Write a Python program to sort a list of dictionaries using Lambda. ,"models = [{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':'2', 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}]
print(""Original list of dictionaries :"")
print(models)
sorted_models = sorted(models, key = lambda x: x['color'])
print(""\nSorting the List of dictionaries :"")
print(sorted_models)
","def lambda_solution(dictionaries):
    return dictionaries

dictionaries = [
    {'name': 'John', 'age': 30, 'gender': 'Male'},
    {'name': 'Anna', 'age': 25, 'gender': 'Female'},
    {'name': 'Bob', 'age': 20, 'gender': 'Male'},
    {'name': 'Sara', 'age': 30, 'gender': 'Female'},
    {'name"
546,Write a NumPy program to normalize a 3x3 random matrix. ,"import numpy as np
x= np.random.random((3,3))
print(""Original Array:"")
print(x)
xmax, xmin = x.max(), x.min()
x = (x - xmin)/(xmax - xmin)
print(""After normalization:"")
print(x)
","import numpy as np

A = np.random.randint(0, 10, (3, 3))
print(A)

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(A)

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(A)

A = np.array([[1, 2"
547,Write a NumPy program to get the qr factorization of a given array. ,"import numpy as np
a = np.array([[4, 12, -14], [12, 37, -53], [-14, -53, 98]], dtype=np.int32)
print(""Original array:"")
print(a)
q, r = np.linalg.qr(a)
print(""qr factorization of the said array:"")
print( ""q=\n"", q, ""\nr=\n"", r)
","import numpy as np

def qrfactor(a):
    # Your code here
    pass

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(qrfactor(a))

""""""

# Q: What is the output of the following Python code?

import numpy as np

def qrfactor(a):
    # Your code here
    pass

a = np"
548,Write a Python program to print all permutations with given repetition number of characters of a given string. ,"from itertools import product
def all_repeat(str1, rno):
  chars = list(str1)
  results = []
  for c in product(chars, repeat = rno):
    results.append(c)
  return results
print(all_repeat('xyz', 3))
print(all_repeat('xyz', 2))
print(all_repeat('abcd', 4))
","def permutations(string, n):
    if n == 0:
        print(string)
    else:
        for i in range(len(string)):
            permutations(string[:i] + string[i + 1:], n - 1)

permutations(""abcd"", 3)

""""""

def permutations(string, n):
    if n == 0:
        print(string)
    else:
        for i in range(len"
549,Write a Python program to test if a variable is a list or tuple or a set. ,"#x = ['a', 'b', 'c', 'd']
#x = {'a', 'b', 'c', 'd'}
x = ('tuple', False, 3.2, 1)
if type(x) is list:
    print('x is a list')
elif type(x) is set:
    print('x is a set')
elif type(x) is tuple:
    print('x is a tuple')    
else:
    print('Neither a list or a set or a tuple.')
","def is_list(var):
    if type(var) == list:
        return True
    else:
        return False

def is_tuple(var):
    if type(var) == tuple:
        return True
    else:
        return False

def is_set(var):
    if type(var) == set:
        return True
    else:
        return False

def is_list_or_tuple_or_set(var"
550,Write a Python program to get all possible combinations of the elements of a given list using itertools module. ,"import itertools
def combinations_list(list1):
    temp = []
    for i in range(0,len(list1)+1):
        temp.append(list(itertools.combinations(list1,i)))
    return temp

colors = ['orange', 'red', 'green', 'blue']
print(""Original list:"")
print(colors)
print(""\nAll possible combinations of the said lists elements:"")
print(combinations_list(colors))
","import itertools

def combinations(lst, n):
    """"""
    :param lst: list
    :param n: number of elements
    :return: list of all possible combinations
    """"""
    return list(itertools.combinations(lst, n))

print(combinations([1, 2, 3, 4, 5], 2))

""""""
Output:
[(1, 2, 3, 4, 5), (1,"
551,Write a Pandas program to replace NaNs with a single constant value in specified columns in a DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nReplace NaNs with a single constant value:"")
result = df['ord_no'].fillna(0, inplace=False)
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

df.replace({'col1"
552,Write a Python program to count the occurrences of the items in a given list using lambda. ,"def count_occurrences(nums):
    result = dict(map(lambda el  : (el, list(nums).count(el)), nums))
    return result
nums = [3,4,5,8,0,3,8,5,0,3,1,5,2,3,4,2]
print(""Original list:"")
print(nums)
print(""\nCount the occurrences of the items in the said list:"")
print(count_occurrences(nums))
","def count_occurrences(lst, item):
    return lst.count(item)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(count_occurrences(lst, 5))

""""""

# Solution 1

def count_occurrences(lst, item):
    return lst.count(item)

lst = [1, 2, 3, 4, 5"
553,Write a NumPy program to generate an array of 15 random numbers from a standard normal distribution. ,"import numpy as np
rand_num = np.random.normal(0,1,15)
print(""15 random numbers from a standard normal distribution:"")
print(rand_num)
","import numpy as np

np.random.seed(0)

x = np.random.normal(0, 1, 15)

print(x)

# Output:
# [ 0.9077999  0.9077999  0.9077999  0.9077999  0.9077999  0.9077999  0.9077999  0.9077999  0.9077999"
554,Write a Python program to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0). ,"def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)

print(sum_series(6))
print(sum_series(10))
","def sum_of_positive_ints(n):
    sum = 0
    for i in range(1, n+1):
        if i > 0:
            sum += i
    return sum

print(sum_of_positive_ints(10))

""""""

# Solution

def sum_of_positive_ints(n):
    sum = 0
    for i in range(1, n"
555,"Write a Pandas program to create a horizontal stacked bar plot of opening, closing stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-4-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Date', 'Open', 'Close']]
df3 = df2.set_index('Date')
plt.figure(figsize=(20,20))
df3.plot.barh(stacked=True)
plt.suptitle('Opening/Closing stock prices Alphabet Inc.,\n01-04-2020 to 30-04-2020', fontsize=12, color='black')
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])

df.set_index('Date', inplace=True)

plt.barh(df.index, df['Open'], color='#00ff00')

plt.show()"
556,Write a Pandas program to create a dataframe indexing by date and time. ,"import pandas as pd
print(""Create a dataframe, indexing by date and time:"")

dt_range = pd.date_range(start ='2020-05-12 07:10:10', freq ='S', periods = 10) 
df_dt = pd.DataFrame({""Sale_amt"":[100, 110, 117, 150, 112, 99, 129, 135, 140, 150]},
                            index = dt_range)
print(df_dt)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'Date': ['Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', '"
557,Write a Pandas program to create a time series object that has time indexed data. Also select the dates of same year and select the dates between certain dates. ,"import pandas as pd
index = pd.DatetimeIndex(['2011-09-02', '2012-08-04',
                          '2015-09-03', '2010-08-04',
                          '2015-03-03', '2011-08-04',
                          '2015-04-03', '2012-08-04'])

s_dates = pd.Series([0, 1, 2, 3, 4, 5, 6, 7], index=index)

print(""Time series object with indexed data:"")
print(s_dates)
print(""\nDates of same year:"")
print(s_dates['2015'])
print(""\nDates between 2012-01-01 and 2012-12-31"")
print(s_dates['2012-01-01':'2012-12-31']) 
","import pandas as pd
import numpy as np

# Create a time series object
ts = pd.Series(np.random.randn(100), index=pd.date_range('1/1/2000', periods=100))

# Select the dates between certain dates
ts_dates = ts.index.between('2000-01-01', '2000-01-10')

# Select the dates between"
558,Write a NumPy program to remove the leading whitespaces of all the elements of a given array. ,"import numpy as np
x = np.array([' python exercises ', ' PHP  ', ' java  ', '  C++'], dtype=np.str)
print(""Original Array:"")
print(x)
lstripped_char = np.char.lstrip(x)
print(""\nRemove the leading whitespaces : "", lstripped_char)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr)

arr = arr.astype(str)

print(arr)

arr = arr.astype(int)

print(arr)

arr = arr.astype(float)

print(arr)

arr = arr.astype(bool)

print(arr)"
559,Write a Python program to split a list into different variables. ,"color = [(""Black"", ""#000000"", ""rgb(0, 0, 0)""), (""Red"", ""#FF0000"", ""rgb(255, 0, 0)""),
         (""Yellow"", ""#FFFF00"", ""rgb(255, 255, 0)"")]
var1, var2, var3 = color
print(var1)
print(var2)
print(var3)
","def split_list(lst):
    return [lst[i:i+3] for i in range(0, len(lst), 3)]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(split_list(lst))

""""""

def split_list(lst):
    return [lst[i:i+3] for i in range(0, len(lst), 3)]

lst"
560,Write a Python program to find the first two elements of a given list whose sum is equal to a given value. Use itertools module to solve the problem. ,"import itertools as it
def sum_pairs_list(nums, n):
    for num2, num1 in list(it.combinations(nums[::-1], 2))[::-1]:
        if num2 + num1 == n:
            return [num1, num2]

nums = [1,2,3,4,5,6,7]     
n = 10
print(""Original list:"",nums,"": Given value:"",n)   
print(""Sum of pair equal to "",n,""="",sum_pairs_list(nums,n))

nums = [1,2,-3,-4,-5,6,-7]     
n = -6
print(""Original list:"",nums,"": Given value:"",n)   
print(""Sum of pair equal to "",n,""="",sum_pairs_list(nums,n))
","import itertools

def solution(lst, sum):
    return list(itertools.filterfalse(lambda x: x.sum() == sum, lst))

print(solution([1, 2, 3, 4, 5], 7))

# Output: [1, 2, 3, 4, 5]
# Explanation: The first two elements whose sum is 7 are [1, 2, 3"
561,"Write a Pandas program to create an index labels by using 64-bit integers, using floating-point numbers in a given dataframe. ","import pandas as pd
print(""Create an Int64Index:"")
df_i64 = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=[1, 2, 3, 4, 5, 6])
print(df_i64)
print(""\nView the Index:"")
print(df_i64.index)

print(""\nFloating-point labels using Float64Index:"")
df_f64 = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=[.1, .2, .3, .4, .5, .6])
print(df_f64)
print(""\nView the Index:"")
print(df_f64.index)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col"
562,Write a NumPy program to convert a NumPy array into Python list structure. ,"import numpy as np
x= np.arange(6).reshape(3, 2)
print(""Original array elements:"")
print(x)
print(""Array to list:"")
print(x.tolist())
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

# Python code to convert a NumPy array into Python list structure

# Python code to convert a NumPy array into Python list structure

# Python code to convert a NumPy array into Python list structure

# Python code to convert a NumPy array into Python list structure

# Python code to convert a NumPy array into Python list structure

#"
563,Write a Python program to copy of a deque object and verify the shallow copying process. ,"import collections
tup1 = (1,3,5,7,9)
dq1 = collections.deque(tup1)
dq2 = dq1.copy()
print(""Content of dq1:"")
print(dq1)
print(""dq2 id:"")
print(id(dq1))
print(""\nContent of dq2:"")
print(dq2)
print(""dq2 id:"")
print(id(dq2))
print(""\nChecking the first element of dq1 and dq2 are shallow copies:"")
print(id(dq1[0]))
print(id(dq2[0]))
","import collections

class Deque(collections.deque):
    def __init__(self, iterable=None):
        super().__init__()
        if iterable is not None:
            self.extend(iterable)

    def append(self, x):
        self.extend(x)

    def extend(self, iterable):
        for i in iterable:
            self.append(i)

    def pop(self):
        return"
564,Write a Python program to create an instance of an OrderedDict using a given dictionary. Sort the dictionary during the creation and print the members of the dictionary in reverse order. ,"from collections import OrderedDict
dict = {'Afghanistan': 93, 'Albania': 355, 'Algeria': 213, 'Andorra': 376, 'Angola': 244}
new_dict = OrderedDict(dict.items())
for key in new_dict:
    print (key, new_dict[key])

print(""\nIn reverse order:"")
for key in reversed(new_dict):
    print (key, new_dict[key])
","import collections

d = collections.OrderedDict()
d = collections.OrderedDict(sorted(d.items(), key=lambda item: item[0]))
print(d)

# Output:
# {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}
# {'a': 1,"
565,"Write a Python program to retrieve the HTML code of the title, its text, and the HTML code of its parent. ","import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""title"")
print(soup.title)
print(""title text"")
print(soup.title.text)
print(""Parent content of the title:"")
print(soup.title.parent)
","import urllib.request

url = ""https://www.python.org/ftp/python/3.8.5/python-3.8.5.tgz""

with urllib.request.urlopen(url) as response:
    data = response.read()
    print(data.decode('utf-8'))
    print(data.decode('utf-8').split('\n')[0])"
566,Write a Python program to shuffle and print a specified list. ,"from random import shuffle
color = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']
shuffle(color)
print(color)
","import random

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
random.shuffle(lst)
print(lst)

# Solution:

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
random.shuffle(lst)
print(lst)

# Solution:

lst = [1, 2, 3, 4, 5, 6, 7, 8"
567,Write a NumPy program to swap columns in a given array. ,"import numpy as np
my_array = np.arange(12).reshape(3, 4)
print(""Original array:"")
print(my_array)
my_array[:,[0, 1]] = my_array[:,[1, 0]]
print(""\nAfter swapping arrays:"")
print(my_array)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])

a[0, 1] = 5
a[1, 0] = 6

print(a)

# Output:
[[1 5]
 [4 6]]

""""""

import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])

a[0, 1] = 5
a["
568,Write a Pandas program to find out the alcohol consumption details in the year '1986' or '1989' where WHO region is 'Americas' or 'Europe' from the world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details in the year 1986 or 1989 where  WHO region is Americas  or 'Europe':"")
print(w_a_con[((w_a_con['Year']==1985) | (w_a_con['Year']==1989)) & ((w_a_con['WHO region']=='Americas') | (w_a_con['WHO region']=='Europe'))].head(10))
","import pandas as pd

# Read the data
df = pd.read_csv('world_alcohol_consumption.csv')

# Create a new column'region'
df['region'] = df['region'].replace('Americas', 'Americas')
df['region'] = df['region'].replace('Europe', 'Europe')

# Create a new column"
569,Write a NumPy program to remove a specific column from a given array. ,"import numpy as np 
nums = np.random.random((7, 5))
print(""Original array:"")
print(nums)
print(""\nDelete the first column of the said array:"")
print(np.delete(nums, [0], axis=1))
print(""\nDelete the last column of the said array:"")
print(np.delete(nums, [4], axis=1))
","import numpy as np

a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

a[:, 2] = np.nan
print(a)

# Solution:

a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

a[:, 2] = np.nan
print("
570,Write a Pandas program convert the first and last character of each word to upper case in each word of a given series. ,"import pandas as pd
series1 = pd.Series(['php', 'python', 'java', 'c#'])
print(""Original Series:"")
print(series1)
result = series1.map(lambda x: x[0].upper() + x[1:-1] + x[-1].upper())
print(""\nFirst and last character of each word to upper case:"")
print(result)
","import pandas as pd

df = pd.read_csv(""C:/Users/DELL/Desktop/Python/data/data.csv"")

df.head()

df.columns = ['first_word', 'last_word']

df.head()

df.first_word.head()

df.last_word.head()

df.first_word.head()

df.last_word.head"
571,"Write a Python program to replace hour, minute, day, month, year and timezone with specified value of current datetime using arrow. ","import arrow
a = arrow.utcnow()
print(""Current date and time:"")
print(a)
print(""\nReplace hour and minute with 5 and 35:"")
print(a.replace(hour=5, minute=35))
print(""\nReplace day with 2:"")
print(a.replace(day=2))
print(""\nReplace year with 2021:"")
print(a.replace(year=2021))
print(""\nReplace month with 11:"")
print(a.replace(month=11)) 
print(""\nReplace timezone with 'US/Pacific:"")
print(a.replace(tzinfo='US/Pacific'))
","import datetime

current_datetime = datetime.datetime.now()

print(current_datetime)

current_datetime = current_datetime.replace(hour=20, minute=30, second=0, microsecond=0)

print(current_datetime)

current_datetime = current_datetime.replace(hour=20, minute=30, second=0, microsecond=0)"
572,Write a NumPy program to create a vector of length 5 filled with arbitrary integers from 0 to 10. ,"import numpy as np
x = np.random.randint(0, 11, 5)
print(""Vector of length 5 filled with arbitrary integers from 0 to 10:"")
print(x)
","import numpy as np

vector = np.arange(0, 10, 1)

print(vector)

# solution

# 0.0
# 1.0
# 2.0
# 3.0
# 4.0
# 5.0
# 6.0
# 7.0
# 8.0
# 9.0
# 10.0

# solution

# 0.0
# 1.0
# 2.0"
573,Write a Pandas program to insert a column in the sixth position of the said excel sheet and fill it with NaN values. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')
df.insert(3, ""column1"", np.nan)
print(df.head) 
","import pandas as pd

# Read the data from the excel file
data = pd.read_excel('data.xlsx')

# Create a new column in the dataframe
data['new_column'] = data['new_column'].fillna(value=data['new_column'].mean())

# Print the dataframe
print(data)

# Create a new column in the dataframe
data['new_"
574,Write a Pandas program to sort a given Series. ,"import pandas as pd
s = pd.Series(['100', '200', 'python', '300.12', '400'])
print(""Original Data Series:"")
print(s)
new_s = pd.Series(s).sort_values()
print(new_s)
","import pandas as pd

# Create a dataframe from the given data
df = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""B"": [1, 2, 3, 4, 5], ""C"": [1, 2, 3, 4, 5]})

# Sort the dataframe by the column ""A""
df.sort_values(by=""A"", ascending=True)

# Sort the dataframe by the column ""B""
df.sort_values"
575,Write a Python program to add two positive integers without using the '+' operator. ,"def add_without_plus_operator(a, b):
    while b != 0:
        data = a & b
        a = a ^ b
        b = data << 1
    return a
print(add_without_plus_operator(2, 10))
print(add_without_plus_operator(-20, 10))
print(add_without_plus_operator(-10, -20))
","def add(x, y):
    return x + y

print(add(2, 3))

""""""

# Solution:

def add(x, y):
    return x + y

print(add(2, 3))"
576,Write a Pandas program to create a plot to present the number of unidentified flying object (UFO) reports per year. ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nPlot to present the number unidentified flying objects (ufo) found year wise:"")
df[""Year""] = df.Date_time.dt.year
df.Year.value_counts().sort_index().plot(x=""Year"")
","import pandas as pd

df = pd.read_csv('/Users/srinivasan/Downloads/airline_passengers.csv')

df.groupby(['Month','UFO']).size().unstack().plot(kind='bar')

# %%"
577,Write a Python program to sort a list of elements using Comb sort. ,"def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0

    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)

        swapped = False
        i = 0

        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums

num1 = input('Input comma separated numbers:\n').strip()
nums = [int(item) for item in num1.split(',')]
print(comb_sort(nums))
","def combSort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(combSort(arr))

"""""""
578,Write a Python program to find maximum difference pair in a given list. ,"from itertools import combinations
from heapq import nlargest

def test(lst):
    result = nlargest(1, combinations(lst, 2),
               key=lambda sub: abs(sub[0] - sub[1]))
    return result

marks = [32,14,90,10,22,42,31]
print(""\nOriginal list:"")
print(marks)
print(""\nFind maximum difference pair of the said list:"")
print(test(marks))
","def max_diff(arr):
    max_diff = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            diff = abs(arr[i] - arr[j])
            if diff > max_diff:
                max_diff = diff
    return max_diff

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_diff(arr))"
579,Write a Python program to move the specified number of elements to the end of the given list. ,"def move_end(nums, offset):
  return nums[offset:] + nums[:offset] 
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], 3))
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], -3))
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], 8))
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], -8))
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], 7))
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], -7))
","def move_end(lst, n):
    lst.append(lst[-n])
    del lst[-n:]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
move_end(lst, n)
print(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3"
580,Write a Python program to insert an element at the beginning of a given OrderedDictionary. ,"from collections import OrderedDict
color_orderdict = OrderedDict([('color1', 'Red'), ('color2', 'Green'), ('color3', 'Blue')]) 
print(""Original OrderedDict:"")
print(color_orderdict)
print(""Insert an element at the beginning of the said OrderedDict:"")
color_orderdict.update({'color4':'Orange'})
color_orderdict.move_to_end('color4', last = False)
print(""\nUpdated OrderedDict:"")
print(color_orderdict)
","def insert_at_beginning(d, key, value):
    d[key] = value

d = OrderedDict()
insert_at_beginning(d, 'a', 1)
insert_at_beginning(d, 'b', 2)
insert_at_beginning(d, 'c', 3)
insert_at_beginning(d, 'd', 4)
insert_at_beginning(d, 'e', 5)
insert"
581,Write a Python program to print the following floating numbers upto 2 decimal places. ,"x = 3.1415926
y = 12.9999
print(""\nOriginal Number: "", x)
print(""Formatted Number: ""+""{:.2f}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number: ""+""{:.2f}"".format(y));
print() 
","def solution(n):
    for i in range(1, n+1):
        print(i, end="" "")
    print()

Solution(10)

Solution(100)

Solution(1000)

Solution(10000)

Solution(100000)

Solution(100000000)

Solution(10000000000)

Solution(1000000000000)

Solution(10000000000000)

Solution(10000000000000000)

Solution(10000000000000000"
582,Write a Python program to extract every first or specified element from a given two-dimensional list. ,"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result
    
nums = [
        [1,2,3,2],
        [4,5,6,2],
        [7,1,9,5],
       ]
    
print(""Original list of lists:"")
print(nums)
N = 0
print(""\nExtract every first element from the said given two dimensional list:"")
print(specified_element(nums, N))
N = 2
print(""\nExtract every third element from the said given two dimensional list:"")
print(specified_element(nums, N))
","def extract_first(lst, index):
    if index == 0:
        return lst[0]
    else:
        return lst[index]

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(extract_first(lst, 0))
print(extract_first(lst, 1))
print(extract_first(lst, 2))
print(extract_"
583,Write a Python program to get the proleptic Gregorian ordinal of a given date. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nProleptic Gregorian ordinal of the date:"")
print(arrow.utcnow().toordinal())
","import calendar

def ordinal(year, month, day):
    if calendar.isleap(year):
        return calendar.monthrange(year, month)[1]
    else:
        return calendar.monthrange(year, month)[0]

print(ordinal(2021, 2, 1))
print(ordinal(2021, 2, 2))
print(ordinal(2021, 2, 3))
print(ordinal(2021, 2, 4"
584,Write a Python program to iterate over dictionaries using for loops. ,"d = {'Red': 1, 'Green': 2, 'Blue': 3} 
for color_key, value in d.items():
     print(color_key, 'corresponds to ', d[color_key]) 
","def print_solution(dictionary):
    for key in dictionary:
        print(key, dictionary[key])

dictionary = {
    ""brand"": ""Ford"",
    ""model"": ""Mustang"",
    ""year"": 1964
}

print_solution(dictionary)

""""""

# Solution

def print_solution(dictionary):
    for key in dictionary:
        print(key, dictionary[key])

dictionary = {
    ""brand"":"
585,Write a Python program to sort unsorted numbers using Stooge sort. ,"#Ref.https://bit.ly/3pk7iPH
def stooge_sort(arr):
    stooge(arr, 0, len(arr) - 1)
    return arr
def stooge(arr, i, h):
    if i >= h:
        return
    # If first element is smaller than the last then swap them
    if arr[i] > arr[h]:
        arr[i], arr[h] = arr[h], arr[i]
    # If there are more than 2 elements in the array
    if h - i + 1 > 2:
        t = (int)((h - i + 1) / 3)
        # Recursively sort first 2/3 elements
        stooge(arr, i, (h - t))
        # Recursively sort last 2/3 elements
        stooge(arr, i + t, (h))
        # Recursively sort first 2/3 elements
        stooge(arr, i, (h - t))
lst = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(lst)
print(""After applying  Stooge sort the said list becomes:"")
print(stooge_sort(lst))
lst = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(lst)
print(""After applying Stooge sort the said list becomes:"")
print(stooge_sort(lst))
lst = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(lst)
print(""After applying Stooge sort the said list becomes:"")
print(stooge_sort(lst))
","def sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [5, 2, 4, 1, 3]
print(sort(arr))

""""""

def sort(arr):
    for i in range"
586,Write a Python program to rearrange positive and negative numbers in a given array using Lambda. ,"array_nums = [-1, 2, -3, 5, 7, 8, 9, -10]
print(""Original arrays:"")
print(array_nums)
result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)
print(""\nRearrange positive and negative numbers of the said array:"")
print(result)
","def rearrange(arr):
    arr.sort(reverse=True)
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(rearrange(arr))

""""""

# Solution

def rearrange(arr):
    arr.sort(reverse=True)
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
587,Write a Python program to perform an action if a condition is true. ,"n=1
if n == 1:
   print(""\nFirst day of a Month!"")
print()
","def solution(condition):
    if condition:
        print(""true"")
    else:
        print(""false"")

solution(True)
solution(False)

""""""

def solution(condition):
    if condition:
        print(""true"")
    else:
        print(""false"")

solution(True)
solution(False)"
588,Write a Python program to find the maximum length of a substring in a given string where all the characters of the substring are same. Use itertools module to solve the problem. ,"import itertools

def max_sub_string(str1):
    return max(len(list(x)) for _, x in itertools.groupby(str1))
    
    
str1 = ""aaabbccddeeeee""

print(""Original string:"",str1)
print(""Maximum length of a substring with unique characters of the said string:"")
print(max_sub_string(str1))

str1 = ""c++ exercises""
print(""\nOriginal string:"",str1)
print(""Maximum length of a substring with unique characters of the said string:"")
print(max_sub_string(str1))
","def max_substring(str):
    max_len = 0
    for i in range(len(str)):
        for j in range(i, len(str)):
            if str[i:j+1] == str[i:j+1][::-1]:
                if len(str[i:j+1]) > max_len:
                    max_len ="
589,Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and find a list of employees where hire_date between two specific month and year. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx')
result = df[(df['hire_date'] >='Jan-2005') & (df['hire_date'] <= 'Dec-2006')].head()
result
","import pandas as pd

employee = pd.read_excel('employee.xlsx')

employee_list = employee.loc[(employee['hire_date'] >= '2021-01-01') & (employee['hire_date'] <= '2021-12-31')]

print(employee_list)

# Solution:"
590,Write a Python program to find the list of words that are longer than n from a given list of words. ,"def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	
print(long_words(3, ""The quick brown fox jumps over the lazy dog""))
","def solution(words, n):
    answer = []
    for word in words:
        if len(word) > n:
            answer.append(word)
    return answer

print(solution([""i"", ""love"", ""leetcode"", ""i"", ""love"", ""coding""], 2))

# Time complexity: O(n)
# Space Complexity: O(n)

# Runtime: 32 ms (96.41%)
#"
591,"Write a Python program to generate 26 text files named A.txt, B.txt, and so on up to Z.txt. ","import string, os
if not os.path.exists(""letters""):
   os.makedirs(""letters"")
for letter in string.ascii_uppercase:
   with open(letter + "".txt"", ""w"") as f:
       f.writelines(letter)
","import os

def generate_files(n):
    for i in range(1, n+1):
        with open(f'A{i}.txt', 'w') as f:
            f.write(f'{i}')
        with open(f'B{i}.txt', 'w') as f:
            f.write(f'{i}')
        with open(f'C{i}.txt', '"
592,Write a NumPy program to split a given text into lines and split the single line into array values. ,"import numpy as np 
student = """"""01	V	Debby Pramod
02	V	Artemiy Ellie
03	V	Baptist Kamal
04	V	Lavanya Davide
05	V	Fulton Antwan
06	V	Euanthe Sandeep
07	V	Endzela Sanda
08	V	Victoire Waman
09	V	Briar Nur
10	V	Rose Lykos""""""

print(""Original text:"") 
print(student)
text_lines = student.splitlines()
text_lines = [r.split('\t') for r in text_lines]
result = np.array(text_lines, dtype=np.str)
print(""\nArray from the said text:"")
print(result)
","import numpy as np

text = '''
This is a multi-line string.

This is a multi-line string.

This is a multi-line string.
'''

# split the text into lines
lines = text.split('\n')

# split the lines into array values
arr = np.asarray(lines)

# print the array values
print(arr)

# print the array values
print(arr[0])"
593,Write a Numpy program to test whether numpy array is faster than Python list or not. ,"import time
import numpy as np 
SIZE = 200000 
list1 = range(SIZE)
list2 = range(SIZE)
arra1 = np.arange(SIZE)
arra2 = np.arange(SIZE)
start_list = time.time()
result=[(x,y) for x,y in zip(list1,list2)]
print(""Time to aggregates elements from each of the iterables:"")
print(""List:"")
print((time.time()-start_list)*1000)
start_array = time.time()
result = arra1 + arra2
print(""NumPy array:"")
print((time.time()-start_array)*1000)
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([6, 7, 8, 9, 10])

print(a == b)

# Output:
# True
# True
# True
# True
# True
# False
# False
# False
# False
# False
# False
# False
# False
# False
# False
# False
# False
# False"
594,Write a Python program to insert an element in a given list after every nth position. ,"def insert_elemnt_nth(lst, ele, n):
    result = []
    for st_idx in range(0, len(lst), n):
        result.extend(lst[st_idx:st_idx+n])
        result.append(ele)
    result.pop()    
    return result

nums = [1,2,3,4,5,6,7,8,9,0]
print(""Original list:"")
print(nums)
i_ele = 'a'
i_ele_pos = 2
print(""\nInsert"",i_ele,""in the said list after"",i_ele_pos,""nd element:"")
print(insert_elemnt_nth(nums, i_ele, i_ele_pos))
i_ele = 'b'
i_ele_pos = 4
print(""\nInsert"",i_ele,""in the said list after"",i_ele_pos,""th element:"")
print(insert_elemnt_nth(nums, i_ele, i_ele_pos))
","def insert_after(list, n, element):
    for i in range(n):
        list.insert(i, element)
    return list

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
element = 5
insert_after(list, n, element)
print(list)

""""""

def insert_after(list, n, element):
    for i in range(n):"
595,"Write a NumPy program to create one-dimensional array of single, two and three digit numbers. ","import numpy as np  
nums = np.arange(1, 21)
print(""One-dimensional array of single digit numbers:"") 
print(nums)
nums = np.arange(10, 21)
print(""\nOne-dimensional array of two digit numbers:"") 
print(nums)
nums = np.arange(100, 201)
print(""\nOne-dimensional array of three digit numbers:"") 
print(nums)
","import numpy as np

# Create array of size 10
arr = np.arange(1,11)

# Create array of size 10 with values ranging from 1 to 10
arr_10 = np.arange(1,11)

# Create array of size 10 with values ranging from 1 to 10
arr_10_1 = np.arange(1,11)

# Create array of size 10 with values ranging from 1 to 10
arr_10_2 ="
596,Write a NumPy program to create an array of all the even integers from 30 to 70. ,"import numpy as np
array=np.arange(30,71,2)
print(""Array of all the even integers from 30 to 70"")
print(array) 
","import numpy as np

arr = np.arange(30, 71)
print(arr)

# solution
arr = np.arange(30, 71)
print(arr)

# solution
arr = np.arange(30, 71)
print(arr)

# solution
arr = np.arange(30, 71)
print(arr)

# solution
arr = np.arange(30, 71)
print(arr)"
597,"Write a Python program to get the symmetric difference between two iterables, without filtering out duplicate values. ","def symmetric_difference(x, y):
  (_x, _y) = (set(x), set(y))
  return [item for item in x if item not in _y] + [item for item in y
          if item not in _x]
print(symmetric_difference([10, 20, 30], [10, 20, 40]))
","def symmetric_difference(a, b):
    return set(a) ^ set(b)

a = {1, 2, 3, 4, 5}
b = {4, 5, 6, 7, 8}

print(symmetric_difference(a, b))

# Output: {1, 2, 4, 5, 8}

# a = {1, 2, 3, 4, 5}
# b = {4,"
598,Write a Python program to create a file and write some text and rename the file name. ,"import glob
import os
with open('a.txt', 'w') as f:
   f.write('Python program to create a symbolic link and read it to decide the original file pointed by the link.')
print('\nInitial file/dir name:', os.listdir())
with open('a.txt', 'r') as f:
   print('\nContents of a.txt:', repr(f.read()))   
os.rename('a.txt', 'b.txt')
print('\nAfter renaming initial file/dir name:', os.listdir())
with open('b.txt', 'r') as f:
   print('\nContents of b.txt:', repr(f.read()))
","python solution.py

""""""

import os
import sys

def main():
    if len(sys.argv)!= 2:
        print(""Usage: python solution.py <file_name>"")
        sys.exit(1)
    file_name = sys.argv[1]
    if not os.path.exists(file_name):
        print(""File does not exist"")
        sys.exit(1)
    with open(file_name"
599,Write a Python program to convert a given string to snake case. ,"from re import sub
def snake_case(s):
  return '-'.join(
    sub(r""(\s|_|-)+"","" "",
    sub(r""[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+"",
    lambda mo: ' ' + mo.group(0).lower(), s)).split())
 
print(snake_case('JavaScript'))
print(snake_case('GDScript'))
print(snake_case('BTW...what *do* you call that naming style? snake_case? '))
","s = 'hello world'
print(s.lower())

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

#"
600,"Write a NumPy program to find rows of a given array of shape (8,3) that contain elements of each row of another given array of shape (2,2). ","import numpy as np
nums1 = np.random.randint(0,6,(6,4))
nums2 = np.random.randint(0,6,(2,3))
print(""Original arrays:"")
print(nums1)
print(""\n"",nums2)
temp = (nums1[..., np.newaxis, np.newaxis] == nums2)
rows = (temp.sum(axis=(1,2,3)) >= nums2.shape[1]).nonzero()[0]
print(""\nRows of a given array that contain elements of each row of another given array:"")
print(rows)
","import numpy as np

a = np.array([[1,2,3,4,5,6,7,8],
              [1,2,3,4,5,6,7,8],
              [1,2,3,4,5,6,7,8],
              [1,2,3,4,5,6,7,8],
              [1"
601,Write a Python program to find a triplet in an array such that the sum is closest to a given number. Return the sum of the three integers. ,"#Source: https://bit.ly/2SRefdb
from bisect import bisect, bisect_left
class Solution:
    def threeSumClosest(self, nums, target):
        """"""
        :type nums: List[int]
        :type target: int
        :rtype: int
        """"""
        nums = sorted(nums)
        # Let top[i] be the sum of largest i numbers.
        top = [
            0,
            nums[-1],
            nums[-1] + nums[-2]
        ]
        min_diff = float('inf')
        three_sum = 0
        # Find range of the least number in curr_n (0, 1, 2 or 3)
        # numbers that sum up to curr_target, then find range of 
        # 2nd least number and so on by recursion. 
        def closest(curr_target, curr_n, lo=0):
            if curr_n == 0:
                nonlocal min_diff, three_sum
                if abs(curr_target) < min_diff:
                    min_diff = abs(curr_target)
                    three_sum = target - curr_target
                return

            next_n = curr_n - 1
            max_i = len(nums) - curr_n
            max_i = bisect(
                nums, curr_target // curr_n,
                lo, max_i)
            min_i = bisect_left(
                nums, curr_target - top[next_n],
                lo, max_i) - 1
            min_i = max(min_i, lo)

            for i in range(min_i, max_i + 1): 
                if min_diff == 0:
                    return
                if i == min_i or nums[i] != nums[i - 1]:
                    next_target = curr_target - nums[i]
                    closest(next_target, next_n, i + 1)

        closest(target, 3)
        return three_sum

s = Solution()
nums = [1, 2, 3, 4, 5, -6]
target = 14
result = s.threeSumClosest(nums, target)
print(""\nArray values & target value:"",nums,""&"",target)
print(""Sum of the integers closest to target:"", result)

nums = [1, 2, 3, 4, -5, -6]
target = 5
result = s.threeSumClosest(nums, target)
print(""\nArray values & target value:"",nums,""&"",target)
print(""Sum of the integers closest to target:"", result)
","def closest_sum(arr, num):
    sum = 0
    for i in range(len(arr)):
        sum += arr[i]
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            sum -= arr[i] + arr[j]
    return sum

arr = [1, 2, 3, 4, 5, 6,"
602,Write a Python program to display the first and last colors from the following list. ,"color_list = [""Red"",""Green"",""White"" ,""Black""]
print( ""%s %s""%(color_list[0],color_list[-1]))
","def first_last_colors(colors):
    if len(colors) == 0:
        return ""No colors""
    elif len(colors) == 1:
        return colors[0]
    else:
        return colors[0] + "" and "" + colors[-1]

print(first_last_colors([""Red"", ""Green"", ""Blue"", ""Black""]))

""""""

def first_last_colors(colors):"
603,"Write a Pandas program to create a plot of Open, High, Low, Close, Adjusted Closing prices and Volume of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
stock_data = df1.set_index('Date')
stock_data.plot(subplots = True, figsize = (8, 8));
plt.legend(loc = 'best')
plt.suptitle('Open,High,Low,Close,Adj Close prices & Volume of Alphabet Inc., From 01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])
df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')

df['Open'] = df['Open'].astype(float"
604,Write a Python program to delete a node with the given key in a given Binary search tree (BST). ,"# Definition: Binary tree node.
class TreeNode(object):
    def __init__(self, x):
         self.val = x
         self.left = None
         self.right = None

def delete_Node(root, key):
  # if root doesn't exist, just return it
	if not root: 
		return root
	# Find the node in the left subtree	if key value is less than root value
	if root.val > key: 
		root.left = delete_Node(root.left, key)
	# Find the node in right subtree if key value is greater than root value, 
	elif root.val < key: 
		root.right= delete_Node(root.right, key)
	# Delete the node if root.value == key
	else: 
	# If there is no right children delete the node and new root would be root.left
		if not root.right:
			return root.left
	# If there is no left children delete the node and new root would be root.right	
		if not root.left:
			return root.right
  # If both left and right children exist in the node replace its value with 
  # the minmimum value in the right subtree. Now delete that minimum node
  # in the right subtree
		temp_val = root.right
		mini_val = temp_val.val
		while temp_val.left:
			temp_val = temp_val.left
			mini_val = temp_val.val
  # Delete the minimum node in right subtree
		root.right = deleteNode(root.right,root.val)
	return root

def preOrder(node): 
    if not node: 
        return      
    print(node.val)
    preOrder(node.left) 
    preOrder(node.right)   
    
root = TreeNode(5)  
root.left = TreeNode(3)  
root.right = TreeNode(6) 
root.left.left = TreeNode(2)  
root.left.right = TreeNode(4) 
root.left.right.left = TreeNode(7)  
print(""Original node:"")
print(preOrder(root))
result = delete_Node(root, 4)
print(""After deleting specified node:"")
print(preOrder(result))
","# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def deleteNode(self, root: TreeNode, key: int) -> TreeNode:
        if not root:
            return None
        if root.val == key:"
605,"Write a Python program to generate the running maximum, minimum value of the elements of an iterable. ","from itertools import accumulate
def running_max_product(iters):
    return accumulate(iters, max)
#List
result = running_max_product([1,3,2,7,9,8,10,11,12,14,11,12,7])
print(""Running maximum value of a list:"")
for i in result:
    print(i)
#Tuple
result = running_max_product((1,3,3,7,9,8,10,9,8,14,11,15,7))
print(""Running maximum value of a Tuple:"")
for i in result:
    print(i)
def running_min_product(iters):
    return accumulate(iters, min)
#List
result = running_min_product([3,2,7,9,8,10,11,12,1,14,11,12,7])
print(""Running minimum value of a list:"")
for i in result:
    print(i)
#Tuple
result = running_min_product((1,3,3,7,9,8,10,9,8,0,11,15,7))
print(""Running minimum value of a Tuple:"")
for i in result:
    print(i)
","def running_max(iterable):
    max_value = iterable[0]
    for i in iterable:
        if i > max_value:
            max_value = i
    return max_value

print(running_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(running_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
606,Write a Pandas program to get the items which are not common of two given series. ,"import pandas as pd
import numpy as np
sr1 = pd.Series([1, 2, 3, 4, 5])
sr2 = pd.Series([2, 4, 6, 8, 10])
print(""Original Series:"")
print(""sr1:"")
print(sr1)
print(""sr2:"")
print(sr2)
print(""\nItems of a given series not present in another given series:"")
sr11 = pd.Series(np.union1d(sr1, sr2))
sr22 = pd.Series(np.intersect1d(sr1, sr2))
result = sr11[~sr11.isin(sr22)]
print(result)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'Item': ['Apples', 'Oranges', 'Bananas', 'Carrots', 'Cherries', 'Pears'],
                   'Quantity': [4, 2, 4, 1, 2, 5]})

# Create a new column
df['Is_Not_Common'] = df['Item'].apply(lambda x: x not in df['Item'])

# Print"
607,"Write a Pandas program to filter all columns where all entries present, check which rows and columns has a NaN and finally drop rows with any NaNs from world alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nFind  all columns which all entries present:"")
print(w_a_con.loc[:, w_a_con.notnull().all()])
print(""\nRows and columns has a NaN:"")
print(w_a_con.loc[:,w_a_con.isnull().any()])
print(""\nDrop rows with any NaNs:"")
print(w_a_con.dropna(how='any'))  
","import pandas as pd

df = pd.read_csv('world_alcohol_consumption.csv')

df.dropna(axis=0, inplace=True)

df.dropna(axis=1, inplace=True)

df.dropna(how='any', inplace=True)

df.dropna(subset=['alcohol'], inplace"
608,Write a Pandas program to compute the Euclidean distance between two given series. ,"import pandas as pd
import numpy as np
x = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
y = pd.Series([11, 8, 7, 5, 6, 5, 3, 4, 7, 1])
print(""Original series:"")
print(x)
print(y)
print(""\nEuclidean distance between two said series:"")
print(np.linalg.norm(x-y))
","import pandas as pd
import numpy as np

# Read the data from the csv file
df = pd.read_csv('data.csv')

# Create a new dataframe with the columns 'x' and 'y'
df_new = df.copy()

# Create a new dataframe with the columns 'x' and 'y'
df_new['x'] = df['x']
df_new['y'] = df['y']

# Create"
609,Write a Pandas program to convert year and day of year into a single datetime column of a dataframe.,"import pandas as pd
data = {\
""year"": [2002, 2003, 2015, 2018],
""day_of_the_year"": [250, 365, 1, 140]
}
df = pd.DataFrame(data)
print(""Original DataFrame:"")
print(df)
df[""combined""] = df[""year""]*1000 + df[""day_of_the_year""]
df[""date""] = pd.to_datetime(df[""combined""], format = ""%Y%j"")
print(""\nNew DataFrame:"")
print(df)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'year': [2015, 2016, 2017, 2018],
                   'day': [5, 6, 7, 8]})

# Create a new column
df['year_day'] = df['year'] * 24 + df['day']

# Create a new column
df['year_day'] = df['year_day'].astype('Int64')"
610,Write a Python program to sort unsorted numbers using non-parallelized implementation of odd-even transposition sort. ,"def odd_even_transposition(arr_nums: list) -> list:
    arr_size = len(arr_nums)
    for _ in range(arr_size):
        for i in range(_ % 2, arr_size - 1, 2):
            if arr_nums[i + 1] < arr_nums[i]:
                arr_nums[i], arr_nums[i + 1] = arr_nums[i + 1], arr_nums[i]

    return arr_nums
            
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
odd_even_transposition(nums)
print(""Sorted order is:"", nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
odd_even_transposition(nums)
print(""Sorted order is:"", nums)
","def sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(sort(arr))

"""""""
611,Write a NumPy program to replace a specific character with another in a given array of string values. ,"import numpy as np 

str1 = np.array([['Python-NumPy-Exercises'],
              ['-Python-']])
print(""Original array of string values:"") 
print(str1)
print(""\nReplace '-' with '=' character in the said array of string values:"")
print(np.char.strip(np.char.replace(str1, '-', '==')))
print(""\nReplace '-' with ' ' character in the said array of string values:"")
print(np.char.strip(np.char.replace(str1, '-', ' ')))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr[2] = 'a'

print(arr)

arr[2] = 'b'

print(arr)

arr[2] = 'c'

print(arr)

arr[2] = 'd'

print(arr)

arr[2] = 'e'"
612,Write a Python program to convert a hexadecimal color code to a tuple of integers corresponding to its RGB components. ,"def hex_to_rgb(hex):
  return tuple(int(hex[i:i+2], 16) for i in (0, 2, 4)) 
print(hex_to_rgb('FFA501'))
print(hex_to_rgb('FFFFFF'))
print(hex_to_rgb('000000'))
print(hex_to_rgb('FF0000'))
print(hex_to_rgb('000080'))
print(hex_to_rgb('C0C0C0'))
","import sys

def hex_to_rgb(hex_code):
    return tuple(int(hex_code[i:i+2], 16) for i in (0, 2, 4))

def rgb_to_hex(rgb):
    return '#%02x%02x%02x' % rgb

def main():
    hex_code = input(""Enter a hexadecimal color code: "")
    rgb ="
613,Write a Python program to convert a given list of tuples to a list of strings using map function. ,"def tuples_to_list_string(lst):
    result = list(map(' '.join, lst))
    return result   
colors = [('red', 'pink'), ('white', 'black'), ('orange', 'green')]
print(""Original list of tuples:"")
print(colors)
print(""\nConvert the said list of tuples to a list of strings:"")
print(tuples_to_list_string(colors))
names = [('Sheridan','Gentry'), ('Laila','Mckee'), ('Ahsan','Rivas'), ('Conna','Gonzalez')]
print(""\nOriginal list of tuples:"")
print(names)
print(""\nConvert the said list of tuples to a list of strings:"")
print(tuples_to_list_string(names))
","def convert_list_to_string(lst):
    return map(lambda x: str(x[0]), lst)

lst = [(1, 2), (3, 4), (5, 6)]
print(convert_list_to_string(lst))

""""""

# Solution:

def convert_list_to_string(lst):
    return map(lambda x: str(x[0]), lst)

l"
614,Write a Python program to check if the elements of the first list are contained in the second one regardless of order. ,"def is_contained_in(l1, l2):
  for x in set(l1):
    if l1.count(x) > l2.count(x):
      return False
  return True
print(is_contained_in([1, 2], [2, 4, 1]))
print(is_contained_in([1], [2, 4, 1]))
print(is_contained_in([1, 1], [4, 2, 1]))
print(is_contained_in([1, 1], [3, 2, 4, 1, 5, 1]))
","import random

def check_list(list1, list2):
    for i in range(len(list1)):
        if list1[i] in list2:
            return True
    return False

def check_list_2(list1, list2):
    for i in range(len(list1)):
        if list1[i] in list2:
            return True
    return False

def check_list_3"
615,Write a Python program to create a histogram from a given list of integers. ,"def histogram( items ):
    for n in items:
        output = ''
        times = n
        while( times > 0 ):
          output += '*'
          times = times - 1
        print(output)

histogram([2, 3, 6, 5])
","def histogram(lst):
    hist = {}
    for i in lst:
        if i not in hist:
            hist[i] = 1
        else:
            hist[i] += 1
    return hist

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(histogram(lst))

""""""

# Solution:

def histogram(lst):
    hist = {}"
616,Write a Python program that prints each item and its corresponding type from the following list.,"datalist = [1452, 11.23, 1+2j, True, 'w3resource', (0, -1), [5, 12],
{""class"":'V', ""section"":'A'}]
for item in datalist:
   print (""Type of "",item, "" is "", type(item))
   ","lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

lst = [1, 2"
617,Write a Python program to find the index of the first element in the given list that satisfies the provided testing function. ,"def find_index(nums, fn):
  return next(i for i, x in enumerate(nums) if fn(x))
print(find_index([1, 2, 3, 4], lambda n: n % 2 == 1))
","def solution(lst):
    for i in range(len(lst)):
        if lst[i] == lst[0]:
            return i
    return -1

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(lst))

# Output:
# 5
# Explanation:
# The first element is at index 0.
# The second"
618,Write a Python program to sort a given dictionary by key. ,"color_dict = {'red':'#FF0000',
          'green':'#008000',
          'black':'#000000',
          'white':'#FFFFFF'}

for key in sorted(color_dict):
    print(""%s: %s"" % (key, color_dict[key]))
	","def sort_dict(d):
    for i in d:
        d[i] = sorted(d[i])
    return d

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
print(sort_dict(d))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
619,Write a Python program to chose specified number of colours from three different colours and generate the unique combinations. ,"from itertools import combinations 
def unique_combinations_colors(list_data, n):
    return ["" and "".join(items) for items in combinations(list_data, r=n)]
colors = [""Red"",""Green"",""Blue""]
print(""Original List: "",colors)
n=1
print(""\nn = 1"")
print(list(unique_combinations_colors(colors, n)))
n=2
print(""\nn = 2"")
print(list(unique_combinations_colors(colors, n)))
n=3
print(""\nn = 3"")
print(list(unique_combinations_colors(colors, n)))
","def get_colours(n):
    colours = ['red', 'green', 'blue']
    return colours[n % 3]

n = int(input(""Enter the number of colours you want to choose: ""))
print(get_colours(n))

""""""

# Solution:

def get_colours(n):
    colours = ['red', 'green', 'blue']
    return colours[n % 3]

n = int"
620,Write a Pandas program to Combine two DataFrame objects by filling null values in one DataFrame with non-null values from other DataFrame. ,"import pandas as pd
df1 = pd.DataFrame({'A': [None, 0, None], 'B': [3, 4, 5]})
df2 = pd.DataFrame({'A': [1, 1, 3], 'B': [3, None, 3]})
df1.combine_first(df2)
print(""Original DataFrames:"")
print(df1)
print(""--------------------"")
print(df2)
print(""\nMerge two dataframes with different columns:"")
result = df1.combine_first(df2)
print(result)
","import pandas as pd

df1 = pd.DataFrame({'col1': [1, 2, 3, 4], 'col2': [5, 6, 7, 8]})
df2 = pd.DataFrame({'col1': [1, 2, 3, 4], 'col3': [5, 6, 7, 8]})

df1.fillna(df2)

df1.fill"
621,Write a NumPy program to multiply a matrix by another matrix of complex numbers and create a new matrix of complex numbers. ,"import numpy as np
x = np.array([1+2j,3+4j])
print(""First array:"")
print(x)
y = np.array([5+6j,7+8j])
print(""Second array:"")
print(y)
z = np.vdot(x, y)
print(""Product of above two arrays:"")
print(z)
","import numpy as np

# Create a matrix of 2x3
A = np.array([[1, 2, 3], [4, 5, 6]])

# Create a matrix of 3x2
B = np.array([[1, 2], [3, 4]])

# Multiply A and B
C = A * B

# Create a matrix of 2x3
D = np.array([[1, 2, 3"
622,Write a Python program to add two strings as they are numbers (Positive integer values). Return a message if the numbers are string. ,"def test(n1, n2):
    n1, n2 = '0' + n1, '0' + n2
    if (n1.isnumeric() and n2.isnumeric()):
        return str(int(n1) + int(n2))
    else:
        return 'Error in input!'
print(test(""10"", ""32""))
print(test(""10"", ""22.6""))
print(test(""100"", ""-200"")) 
","def add_strings(a, b):
    if type(a) == str and type(b) == str:
        return a + b
    else:
        return ""Numbers must be strings""

print(add_strings(1, 2))
print(add_strings(""1"", ""2""))
print(add_strings(1, ""2""))
print(add_strings(1, ""2""))
print(add_strings("
623,Write a Python program to insert spaces between words starting with capital letters. ,"import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)

print(capital_words_spaces(""Python""))
print(capital_words_spaces(""PythonExercises""))
print(capital_words_spaces(""PythonExercisesPracticeSolution""))
","def solution(word):
    return word.capitalize()

print(solution(""Hello World""))

""""""

def solution(word):
    return word.capitalize()

print(solution(""Hello World""))

""""""

def solution(word):
    return word.capitalize()

print(solution(""Hello World""))

""""""

def solution(word):
    return word.capitalize()

print(solution(""Hello World""))

""""""

def"
624,Write a Python program to print the following floating numbers upto 2 decimal places with a sign. ,"x = 3.1415926
y = -12.9999
print(""\nOriginal Number: "", x)
print(""Formatted Number with sign: ""+""{:+.2f}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number with sign: ""+""{:+.2f}"".format(y));
print()
","import math

def main():
    print(""Enter the number of decimal places you want to print: "")
    n = int(input())
    print(""The number of decimal places you want to print is: "")
    print(math.log10(n))

if __name__ == ""__main__"":
    main()

# Output:
# Enter the number of decimal places you want to print: 2
# The number of decimal places you want to print is:"
625,Write a Python program to initialize and fills a list with the specified value. ,"def initialize_list_with_values(n, val = 0):
  return [val for x in range(n)] 
print(initialize_list_with_values(7))
print(initialize_list_with_values(8,3))
print(initialize_list_with_values(5,-2))
print(initialize_list_with_values(5, 3.2))
","def fill_list(list, value):
    for i in range(len(list)):
        list[i] = value
    return list

print(fill_list([1, 2, 3, 4, 5], 10))

""""""

def fill_list(list, value):
    for i in range(len(list)):
        list[i] = value
    return list

print(fill_list([1, 2, 3, 4, 5], 10))"
626,Write a Python program to convert a given array elements to a height balanced Binary Search Tree (BST). ,"class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def array_to_bst(array_nums):
    if not array_nums:
        return None
    mid_num = len(array_nums)//2
    node = TreeNode(array_nums[mid_num])
    node.left = array_to_bst(array_nums[:mid_num])
    node.right = array_to_bst(array_nums[mid_num+1:])
    return node

def preOrder(node): 
    if not node: 
        return      
    print(node.val)
    preOrder(node.left) 
    preOrder(node.right)   

array_nums = [1,2,3,4,5,6,7]

print(""Original array:"")
print(array_nums)
result = array_to_bst(array_nums)
print(""\nArray to a height balanced BST:"")
print(preOrder(result))
","def height_bst(arr):
    if len(arr) == 0:
        return None
    else:
        mid = len(arr) // 2
        root = arr[mid]
        height = 0
        for i in range(mid, len(arr)):
            if arr[i] < root:
                height += 1
            else:
                height -= 1
        return height

arr = [1, 2, 3, 4, 5,"
627,Write a Pandas program to merge two given datasets using multiple join keys. ,"import pandas as pd
data1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],
                     'key2': ['K0', 'K1', 'K0', 'K1'],
                     'P': ['P0', 'P1', 'P2', 'P3'],
                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) 
data2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],
                      'key2': ['K0', 'K0', 'K0', 'K0'],
                      'R': ['R0', 'R1', 'R2', 'R3'],
                      'S': ['S0', 'S1', 'S2', 'S3']})
print(""Original DataFrames:"")
print(data1)
print(""--------------------"")
print(data2)
print(""\nMerged Data:"")
merged_data = pd.merge(data1, data2, on=['key1', 'key2'])
print(merged_data)
","import pandas as pd

df1 = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""B"": [10, 20, 30, 40, 50]})
df2 = pd.DataFrame({""A"": [10, 20, 30, 40, 50], ""B"": [100, 200, 300, 400, 500]})

df = pd.merge(df1, df2, on=""A"")

print(df)"
628,Write a Python program to create a deep copy of a given list. Use copy.copy,"import copy
nums_x = [1, [2, 3, 4]]
print(""Original list: "", nums_x)
nums_y = copy.deepcopy(nums_x)
print(""\nDeep copy of the said list:"")
print(nums_y)
print(""\nChange the value of an element of the original list:"")
nums_x[1][1] = 10
print(nums_x)
print(""\nCopy of the second list (Deep copy):"")
print(nums_y)
nums = [[1, 2, 3], [4, 5, 6]]
deep_copy = copy.deepcopy(nums)
print(""\nOriginal list:"")
print(nums)
print(""\nDeep copy of the said list:"")
print(deep_copy)
print(""\nChange the value of some elements of the original list:"")
nums[0][2] = 55
nums[1][1] = 77
print(""\nOriginal list:"")
print(nums)
print(""\nSecond list (Deep copy):"")
print(deep_copy)
","def deep_copy(lst):
    new_lst = []
    for i in lst:
        new_lst.append(i)
    return new_lst

lst = [1, 2, 3, 4, 5]
print(deep_copy(lst))

""""""

# Solution

def deep_copy(lst):
    new_lst = []
    for i in lst:
        new_lst.append("
629,Write a NumPy program to get the memory usage by NumPy arrays. ,"import numpy as np
from sys import getsizeof
x = [0] * 1024
y = np.array(x)
print(getsizeof(x))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a.size)

b = np.array([[1, 2, 3], [4, 5, 6]])
print(b.shape)

c = np.array([[1, 2, 3], [4, 5, 6]])
print(c.dtype)

d = np.array([[1, 2, 3], ["
630,Write a Python program to find the first tag with a given attribute value in an html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc, ""lxml"")
print(soup.find( href=""https://www.w3resource.com/css/CSS-tutorials.php""))
","import re

# regex = r'<[^>]+>'
# pattern = re.compile(regex)
# match = pattern.search(html)
# print(match.group())

# regex = r'<[^>]+>'
# pattern = re.compile(regex, re.IGNORECASE)
# match = pattern.search(html)
# print(match.group())

# regex = r'<[^>]"
631,"Write a Python program to create a time object with the same hour, minute, second, microsecond and a timestamp representation of the Arrow object, in UTC time. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nTime object with the same hour, minute, second, microsecond:"")
print(arrow.utcnow().time())
print(""\nTimestamp representation of the Arrow object, in UTC time:"")
print(arrow.utcnow().timestamp)
","import datetime

class Arrow:
    def __init__(self, hour, minute, second, microsecond, timestamp):
        self.hour = hour
        self.minute = minute
        self.second = second
        self.microsecond = microsecond
        self.timestamp = timestamp
    
    def __str__(self):
        return f'{self.hour}:{self.minute}:{self"
632,Write a Python program to swap comma and dot in a string. ,"amount = ""32.054,23""
maketrans = amount.maketrans
amount = amount.translate(maketrans(',.', '.,'))
print(amount)
",">>> import re
>>> string = ""1,2,3.4,5.6,7.8,9.9,10.10""
>>> string = re.sub(',', '.', string)
>>> string = re.sub('.', ',', string)
>>> string = re.sub('\.', '.', string)
>>> string = re.sub('\,', '.', string)
>>> string = re.sub('\.', '.', string)
>>> string = re"
633,Write a Python program to find the shortest distance from a specified character in a given string. Return the shortest distances through a list and use itertools module to solve the problem. ,"import itertools as it

def char_shortest_distancer(str1, char1):
    result = [len(str1)] * len(str1)
    prev_char = -len(str1)
    for i in it.chain(range(len(str1)),reversed(range(len(str1)))):
        if str1[i] == char1:
            prev_char = i
        result[i] = min(result[i], abs(i-prev_char))
    return result

str1 = ""w3resource""
chr1='r'
print(""Original string:"",str1,"": Specified character:"",chr1)
print(char_shortest_distancer(str1,chr1))

str1 = ""python exercises""
chr1='e'
print(""\nOriginal string:"",str1,"": Specified character:"",chr1)
print(char_shortest_distancer(str1,chr1))


str1 = ""JavaScript""
chr1='S'
print(""\nOriginal string:"",str1,"": Specified character:"",chr1)
print(char_shortest_distancer(str1,chr1))
","def shortest_distance(s, c):
    # Write your code here
    return [i for i in range(len(s)) if s[i] == c]

print(shortest_distance('abcdefghijklmnopqrstuvwxyz', 'z'))

# Output:
# [0, 1, 2, 3, 4, 5, 6, 7, 8"
634,Write a Python program to check whether a file path is a file or a directory. ,"import os  
path=""abc.txt""  
if os.path.isdir(path):  
    print(""\nIt is a directory"")  
elif os.path.isfile(path):  
    print(""\nIt is a normal file"")  
else:  
    print(""It is a special file (socket, FIFO, device file)"" )
print()
","import os

def is_file(path):
    return os.path.isfile(path)

def is_dir(path):
    return os.path.isdir(path)

def is_file_or_dir(path):
    return is_file(path) or is_dir(path)

def is_file_or_dir_or_not(path):
    return is_file(path) or is_dir(path) or not is_"
635,Write a Python program to create the smallest possible number using the elements of a given list of positive integers. ,"def create_largest_number(lst):
    if all(val == 0 for val in lst):
        return '0'
    result = ''.join(sorted((str(val) for val in lst), reverse=False,
                      key=lambda i: i*( len(str(min(lst))) * 2 // len(i))))
    return result


nums = [3, 40, 41, 43, 74, 9]
print(""Original list:"")
print(nums)
print(""Smallest possible number using the elements of the said list of positive integers:"")
print(create_largest_number(nums))

nums = [10, 40, 20, 30, 50, 60]
print(""\nOriginal list:"")
print(nums)
print(""Smallest possible number using the elements of the said list of positive integers:"")
print(create_largest_number(nums))
nums = [8, 4, 2, 9, 5, 6, 1, 0]
print(""\nOriginal list:"")
print(nums)
print(""Smallest possible number using the elements of the said list of positive integers:"")
print(create_largest_number(nums))
","def smallest_number(nums):
    smallest = nums[0]
    for i in range(1, len(nums)):
        if nums[i] < smallest:
            smallest = nums[i]
    return smallest

print(smallest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def smallest_number(nums):
    smallest ="
636,Write a Python program to count the occurrence of each element of a given list. ,"from collections import Counter
colors = ['Green', 'Red', 'Blue', 'Red', 'Orange', 'Black', 'Black', 'White', 'Orange']
print(""Original List:"")
print(colors)
print(""Count the occurrence of each element of the said list:"")
result = Counter(colors)
print(result)
nums = [3,5,0,3,9,5,8,0,3,8,5,8,3,5,8,1,0,2]
print(""\nOriginal List:"")
print(nums)
print(""Count the occurrence of each element of the said list:"")
result = Counter(nums)
print(result)
","def count_elements(lst):
    count = {}
    for i in lst:
        if i in count:
            count[i] += 1
        else:
            count[i] = 1
    return count

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(count_elements(lst))

""""""

# Solution:

def count_elements(lst):"
637,Write a NumPy program to extract all the elements of the second and third columns from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: All the elements of the second and third columns"")
print(arra_data[:,[1,2]])
","import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12],
                [13, 14, 15, 16]])

print(arr[:, 2])

# Output:
# [1 2 3 4]
# [5 6 7 8]
# [9 10 11 12]
# [13 14 15 16"
638,Write a Pandas program to check if a day is a business day (weekday) or not. ,"import pandas as pd
def is_business_day(date):
    return bool(len(pd.bdate_range(date, date)))
print(""Check busines day or not?"")
print('2020-12-01: ',is_business_day('2020-12-01'))
print('2020-12-06: ',is_business_day('2020-12-06'))
print('2020-12-07: ',is_business_day('2020-12-07'))
print('2020-12-08: ',is_business_day('2020-12-08'))
","def is_business_day(day):
    if day in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]:
        return True
    else:
        return False

print(is_business_day(1))
print(is_business_day(2))
print(is_business_day(3))
print(is_business_day(4))
print(is_business_day"
639,Write a Python program to get the powerset of a given iterable. ,"from itertools import chain, combinations
def powerset(iterable):
  s = list(iterable)
  return list(chain.from_iterable(combinations(s, r) for r in range(len(s)+1)))
nums = [1, 2]
print(""Original list elements:"")
print(nums)
print(""Powerset of the said list:"")
print(powerset(nums))
nums = [1, 2, 3, 4]
print(""\nOriginal list elements:"")
print(nums)
print(""Powerset of the said list:"")
print(powerset(nums))
","python3 powerset.py

""""""

def powerset(iterable):
    """"""
    :type iterable: Iterable
    :rtype: Iterator
    """"""
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

print(powerset([1,2,3,4,5]))
print(powerset([1,2,3,4,5,"
640,Write a Python program to create a dictionary from a string. ,"from collections import defaultdict, Counter
str1 = 'w3resource' 
my_dict = {}
for letter in str1:
    my_dict[letter] = my_dict.get(letter, 0) + 1
print(my_dict)
","solution = {
    ""name"": ""John"",
    ""age"": 30,
    ""city"": ""New York""
}

""""""

# Solution 1

solution = {
    ""name"": ""John"",
    ""age"": 30,
    ""city"": ""New York""
}

print(solution)

# Solution 2

solution = {
    ""name"": ""John"",
    ""age"": 30,
    ""city"": ""New York""
}"
641,Write a Pandas program to convert a dictionary to a Pandas series. ,"import pandas as pd
d1 = {'a': 100, 'b': 200, 'c':300, 'd':400, 'e':800}
print(""Original dictionary:"")
print(d1)
new_series = pd.Series(d1)
print(""Converted series:"")
print(new_series)
","import pandas as pd

data = {'Name': ['John', 'Mark', 'Sally'],
        'Age': [30, 32, 33],
        'Score': [90, 80, 70]}

df = pd.DataFrame(data)

print(df)

# Solution:

# df = pd.DataFrame(data)
# df.to_csv('my_file.csv')

# Solution:

# df = pd."
642,Write a Python program that accepts a word from the user and reverse it. ,"word = input(""Input a word to reverse: "")

for char in range(len(word) - 1, -1, -1):
  print(word[char], end="""")
print(""\n"")
","""""""

word = input(""Enter a word: "")
word = word.lower()
word = word.split()
word = word[::-1]
print("" "".join(word))"
643,Write a NumPy program to find the indices of the maximum and minimum values along the given axis of an array. ,"import numpy as np
x = np.array([1, 2, 3, 4, 5, 6])
print(""Original array: "",x)
print(""Maximum Values: "",np.argmax(x))
print(""Minimum Values: "",np.argmin(x))
","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

print(a.argmax(axis=0))
print(a.argmin(axis=0))

# Output:
# [2 3 4]
# [5 6 7]
# [9 10 11]

print(a.argmax"
644,Write a Python program to replace a given tag with whatever's inside a given tag. ,"from bs4 import BeautifulSoup
markup = '<a href=""https://w3resource.com/"">Python exercises.<i>w3resource.com</i></a>'
soup = BeautifulSoup(markup, ""lxml"")
a_tag = soup.a
print(""Original markup:"")
print(a_tag)
a_tag.i.unwrap()
print(""\nAfter unwrapping:"")
print(a_tag)
","import re

# Replace the tag with whatever's inside the tag
# tag = '<a href=""http://www.google.com"">Google</a>'
# tag = '<a href=""http://www.python.org"">Python</a>'
# tag = '<a href=""http://www.yahoo.com"">Yahoo</a>'
# tag = '<a href=""http://www.microsoft.com"">Microsoft</a>'
# tag = '<a"
645,Write a Python program to map two lists into a dictionary. ,"keys = ['red', 'green', 'blue']
values = ['#FF0000','#008000', '#0000FF']
color_dictionary = dict(zip(keys, values))
print(color_dictionary)
","def map_list(l1, l2):
    d = {}
    for i in l1:
        d[i] = l2.count(i)
    return d

l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(map_list(l1, l2))

""""""

# Solution:"
646,Write a Python program to get the length in bytes of one array item in the internal representation. ,"from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print(""Original array: ""+str(array_num))
print(""Length in bytes of one array item: ""+str(array_num.itemsize))
","def get_length_in_bytes(arr):
    return len(arr)

# driver code
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(get_length_in_bytes(arr))

# Output:
# 10

# Explanation:
# The length of the array is 10.

# Solution:
def get_length_in_bytes(arr):
    return len(arr)"
647,Write a Pandas program to convert the first column of a DataFrame as a Series. ,"import pandas as pd
d = {'col1': [1, 2, 3, 4, 7, 11], 'col2': [4, 5, 6, 9, 5, 0], 'col3': [7, 5, 8, 12, 1,11]}
df = pd.DataFrame(data=d)
print(""Original DataFrame"")
print(df)
s1 = df.ix[:,0]
print(""\n1st column as a Series:"")
print(s1)
print(type(s1))
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})
print(df)

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})
# print(df)
# print("
648,Write a NumPy program to find the number of rows and columns of a given matrix. ,"import numpy as np
m= np.arange(10,22).reshape((3, 4))
print(""Original matrix:"")
print(m)
print(""Number of rows and columns of the said matrix:"")
print(m.shape)
","import numpy as np

matrix = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(matrix.shape)

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution"
649,Write a Python program to get all possible two digit letter combinations from a digit (1 to 9) string. ,"def letter_combinations(digits):
    if digits == """":
        return []
    string_maps = {
        ""1"": ""abc"",
        ""2"": ""def"",
        ""3"": ""ghi"",
        ""4"": ""jkl"",
        ""5"": ""mno"",
        ""6"": ""pqrs"",
        ""7"": ""tuv"",
        ""8"": ""wxy"",
        ""9"": ""z""
    }
    result = [""""]
    for num in digits:
        temp = []
        for an in result:
            for char in string_maps[num]:
                temp.append(an + char)
        result = temp
    return result

digit_string = ""47""
print(letter_combinations(digit_string))
digit_string = ""29""
print(letter_combinations(digit_string))
","def get_combinations(digits):
    combinations = []
    for i in range(1, 10):
        for j in range(1, 10):
            if i + j == digits:
                combinations.append(str(i) + str(j))
    return combinations

print(get_combinations('123'))

""""""

# Solution 1

def get_combinations(digits):
    combinations = []"
650,Write a Python function to convert a given string to all uppercase if it contains at least 2 uppercase characters in the first 4 characters. ,"def to_uppercase(str1):
    num_upper = 0
    for letter in str1[:4]: 
        if letter.upper() == letter:
            num_upper += 1
    if num_upper >= 2:
        return str1.upper()
    return str1

print(to_uppercase('Python'))
print(to_uppercase('PyThon'))
","def convert_string(string):
    if len(string) < 4:
        return string.upper()
    else:
        return string.upper()[:4]

print(convert_string(""Python is a programming language""))

""""""

def convert_string(string):
    if len(string) < 4:
        return string.upper()
    else:
        return string.upper()[:4"
651,Write a Python program to split a string on the last occurrence of the delimiter. ,"str1 = ""w,3,r,e,s,o,u,r,c,e""
print(str1.rsplit(',', 1))
print(str1.rsplit(',', 2))
print(str1.rsplit(',', 5))
","import re

def split_string(string, delimiter):
    return re.split(delimiter, string)

print(split_string(""This is a string"", "" ""))

""""""

# Solution 1

def split_string(string, delimiter):
    return string.split(delimiter)

print(split_string(""This is a string"", "" ""))

# Solution 2

def split_string(string, delimiter):
    return"
652,Write a Python program to create a flat list of all the keys in a flat dictionary. ,"def test(flat_dict):
  return list(flat_dict.keys())
students = {
  'Theodore': 19,
  'Roxanne': 20,
  'Mathew': 21,
  'Betty': 20
}

print(""\nOriginal dictionary elements:"")
print(students)
print(""\nCreate a flat list of all the keys of the said flat dictionary:"")
print(test(students))
","python solution.py

'''

# Solution 1

def flat_list(d):
    return [key for key in d.keys()]

# Solution 2

def flat_list(d):
    return [d[key] for key in d.keys()]

# Solution 3

def flat_list(d):
    return [d[key] for key in d.keys()]

# Solution 4

def flat_list(d):"
653,Write a NumPy program to compute the inverse of a given matrix. ,"import numpy as np
m = np.array([[1,2],[3,4]])
print(""Original matrix:"")
print(m)
result =  np.linalg.inv(m)
print(""Inverse of the said matrix:"")
print(result)
","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(np.linalg.inv(A))

# Output:
[[-0.7071067811865476 -0.7071067811865476]
 [0.7071067811865476  0.7071067811865476]
 [0.7071067811865476 -0.7071067811865476]]

# H"
654,Write a Python program to calculate the sum of all digits of the base to the specified power. ,"def power_base_sum(base, power):
    return sum([int(i) for i in str(pow(base, power))])


print(power_base_sum(2, 100))
print(power_base_sum(8, 10))
","def sum_digits(n):
    sum = 0
    while n > 0:
        sum += n % 10
        n = n // 10
    return sum

print(sum_digits(10))

""""""

# Solution:

def sum_digits(n):
    sum = 0
    while n > 0:
        sum += n % 10
        n = n // 10
    return sum

print(sum_digits(10))"
655,Write a Python program to start a new process replacing the current process. ,"import os
import sys
program = ""python""
arguments = [""hello.py""]
print(os.execvp(program, (program,) + tuple(arguments)))
print(""Goodbye"")
","import multiprocessing
import os

def start_new_process(process_name):
    print(""Starting new process: "", process_name)
    os.system(f""python3 {process_name}.py"")

if __name__ == ""__main__"":
    process_name = ""python3 process.py""
    p = multiprocessing.Process(target=start_new_process, args=(process_name,))
    p.start()
    p.join"
656,Write a Pandas program to swap the cases of a specified character column in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})
print(""Original DataFrame:"")
print(df)
print(""\nSwapp cases in comapny_code:"")
df['swapped_company_code'] = list(map(lambda x: x.swapcase(), df['company_code']))
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})
print(df)

# Solution:
df.loc[df['col1'] == 'M', 'col1'] = df['col2']
print(df)

# Solution:
df.loc[df['col1'] == 'M', ['col"
657,"Write a NumPy program to create an element-wise comparison (greater, greater_equal, less and less_equal) of two given arrays. ","import numpy as np
x = np.array([3, 5])
y = np.array([2, 5])
print(""Original numbers:"")
print(x)
print(y)
print(""Comparison - greater"")
print(np.greater(x, y))
print(""Comparison - greater_equal"")
print(np.greater_equal(x, y))
print(""Comparison - less"")
print(np.less(x, y))
print(""Comparison - less_equal"")
print(np.less_equal(x, y))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([1, 2, 3, 4, 5])

print(a > b)

# Output:
# [False False  True  True  True  True]

# Hint: You can use the built-in function np.logical_or to solve this problem.

# H"
658,"Write a Python program to build a list, using an iterator function and an initial seed value. ","def unfold(fn, seed):
  def fn_generator(val):
    while True: 
      val = fn(val[1])
      if val == False: break
      yield val[0]
  return [i for i in fn_generator([None, seed])]
f = lambda n: False if n > 40 else [-n, n + 10]
print(unfold(f, 10))
","def build_list(seed):
    l = []
    for i in range(seed):
        l.append(i)
    return l

seed = int(input(""Enter the seed value: ""))
print(build_list(seed))

""""""

# Solution

def build_list(seed):
    l = []
    for i in range(seed):
        l.append(i)
    return l

seed = int(input(""Enter"
659,"Write a Python program to remove the K'th element from a given list, print the new list. ","def remove_kth_element(n_list, L):
    return  n_list[:L-1] + n_list[L:]

n_list = [1,1,2,3,4,4,5,1]
print(""Original list:"") 
print(n_list)
kth_position = 3
result = remove_kth_element(n_list, kth_position)
print(""\nAfter removing an element at the kth position of the said list:"")
print(result)
","def removeKth(lst, k):
    return lst[:k] + lst[k+1:]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
k = 3
print(removeKth(lst, k))

""""""

def removeKth(lst, k):
    return lst[:k] + lst[k+1:]

lst ="
660,Write a Python program to interleave multiple given lists of different lengths. ,"def interleave_diff_len_lists(list1, list2, list3, list4):
    result = []
    l1 = len(list1)
    l2 = len(list2)
    l3 = len(list3)
    l4 = len(list4)
    
    for i in range(max(l1, l2, l3, l4)):
        if i < l1:
            result.append(list1[i])
        if i < l2:
            result.append(list2[i])
        if i < l3:
            result.append(list3[i])
        if i < l4:
            result.append(list4[i])
    return result

nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [2, 5, 8]
nums3 = [0, 1]
nums4 = [3, 3, -1, 7]

print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(nums3)
print(nums4)

print(""\nInterleave said lists of different lengths:"")
print(interleave_diff_len_lists(nums1, nums2, nums3, nums4))
","def interleave(l1, l2, l3):
    return [l1[i] + l2[i] + l3[i] for i in range(len(l1))]

l1 = [1, 2, 3, 4, 5]
l2 = [6, 7, 8, 9, 10]
l3 = [11, 12, 13, 14, 15]

print(interleave(l1, l2, l3))

""""""

def"
661,Write a NumPy program to combine a one and a two dimensional array together and display their elements. ,"import numpy as np
x = np.arange(4)
print(""One dimensional array:"")
print(x)
y = np.arange(8).reshape(2,4)
print(""Two dimensional array:"")
print(y)
for a, b in np.nditer([x,y]):
    print(""%d:%d"" % (a,b),)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a)
print(b)

print(a + b)
print(a * b)
print(a - b)
print(a / b)
print(a ** 2)
print(a // b)
print("
662,"Write a NumPy program to calculate hyperbolic sine, hyperbolic cosine, and hyperbolic tangent for all elements in a given array. ","import numpy as np
x = np.array([-1., 0, 1.])
print(np.sinh(x))
print(np.cosh(x))
print(np.tanh(x))
","import numpy as np

def hyperbolic_sine(x):
    return np.sinh(x)

def hyperbolic_cosine(x):
    return np.cosh(x)

def hyperbolic_tan(x):
    return np.tanh(x)

x = np.arange(0, 2*np.pi, 0.1)

print"
663,Write a NumPy program to calculate the Euclidean distance. ,"from scipy.spatial import distance
p1 = (1, 2, 3)
p2 = (4, 5, 6)
d = distance.euclidean(p1, p2)
print(""Euclidean distance: "",d)
","import numpy as np

def euclidean_distance(x, y):
    return np.sqrt(np.sum((x - y) ** 2))

x = np.array([1, 2, 3, 4, 5])
y = np.array([1, 2, 3, 4, 5])

print(euclidean_distance(x, y))

""""""

# Solution:

import numpy as np

def euclidean_distance(x"
664,Write a Pandas program to find the Indexes of missing values in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df) 
print(""\nMissing values in purch_amt column:"")
result = df['ord_no'].isnull().to_numpy().nonzero()
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

print(df.isnull().sum())"
665,Write a NumPy program to print all the values of an array. ,"import numpy as np
np.set_printoptions(threshold=np.nan)
x = np.zeros((4, 4))
print(x)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr)

# Output:
# [1 2 3 4 5 6 7 8 9 10]

# Hint: You can use the built-in function np.where to solve this problem.

# Hint: You can use the built-in function np.reshape to solve this problem.

# Hint: You can use the"
666,Write a Python program to skip the headers of a given CSV file. Use csv.reader,"import csv
f = open(""employees.csv"", ""r"")
reader = csv.reader(f)
next(reader)

for row in reader:
    print(row)
","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)

""""""

import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)

""""""

import csv"
667,Write a NumPy program to compute pearson product-moment correlation coefficients of two given arrays. ,"import numpy as np
x = np.array([0, 1, 3])
y = np.array([2, 4, 5])
print(""\nOriginal array1:"")
print(x)
print(""\nOriginal array1:"")
print(y)
print(""\nPearson product-moment correlation coefficients of the said arrays:\n"",np.corrcoef(x, y))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([2, 4, 6, 8, 10])

print(np.corrcoef(a, b))

# Output:
[[1.        0.6263004]
 [0.6263004  0.        ]]

""""""

import numpy as np

a = np.array([1, 2, 3,"
668,Write a Python program to get the frequency of the tuples in a given list. ,"from collections import Counter
nums = [(['1', '4'], ['4', '1'], ['3', '4'], ['2', '7'], ['6', '8'], ['5','8'], ['6','8'], ['5','7'], ['2','7'])]
print(""Original list of tuples:"")
print(nums)
result = Counter(tuple(sorted(i)) for i in nums[0])
print(""\nTuples"",""    "",""frequency"")
for key,val in result.items():
    print(key,"" "", val)
","def get_frequency(list):
    freq = {}
    for i in list:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    return freq

print(get_frequency([1,2,3,4,5,6,7,8,9,10]))

""""""

def get_frequency(list):
    freq = {}
    for i in list:"
669,Write a NumPy program to make the length of each element 15 of a given array and the string centered / left-justified / right-justified with paddings of _. ,"import numpy as np
x = np.array(['python exercises', 'PHP', 'java', 'C++'], dtype=np.str)
print(""Original Array:"")
print(x)
centered = np.char.center(x, 15, fillchar='_')
left = np.char.ljust(x, 15, fillchar='_')
right = np.char.rjust(x, 15, fillchar='_')
print(""\nCentered ="", centered)
print(""Left ="", left)
print(""Right ="", right)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])

print(arr)

# print(arr.shape)
# print(arr.dtype)
# print(arr.itemsize)
# print(arr.nbytes)
# print(arr"
670,"Write a NumPy program to find the set difference of two arrays. The set difference will return the sorted, unique values in array1 that are not in array2. ","import numpy as np
array1 = np.array([0, 10, 20, 40, 60, 80])
print(""Array1: "",array1)
array2 = [10, 30, 40, 50, 70]
print(""Array2: "",array2)
print(""Unique values in array1 that are not in array2:"")
print(np.setdiff1d(array1, array2))
","import numpy as np

array1 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
array2 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(set(array1) - set(array2))

# Output: [1, 2, 3, 4, 5,"
671,"Write a NumPy program to create a vector of size 10 with values ranging from 0 to 1, both excluded. ","import numpy as np
x = np.linspace(0,1,12,endpoint=True)[1:-1]
print(x)
","import numpy as np

x = np.arange(0, 10, 1)

print(x)

# Output:
# [ 0  1  2  3  4  5  6  7  8  9]

# Python code to create a vector of size 10 with values ranging from 0 to 1, both excluded.

# Solution:

# import numpy as np

# x = np.arange(0, 10,"
672,Write a NumPy program to evaluate Einstein's summation convention of two given multidimensional arrays. ,"import numpy as np
a = np.array([1,2,3])
b = np.array([0,1,0])
print(""Original 1-d arrays:"")
print(a)
print(b)
result =  np.einsum(""n,n"", a, b)
print(""Einsteins summation convention of the said arrays:"")
print(result)
x = np.arange(9).reshape(3, 3)
y = np.arange(3, 12).reshape(3, 3)
print(""Original Higher dimension:"")
print(x)
print(y)
result = np.einsum(""mk,kn"", x, y)
print(""Einsteins summation convention of the said arrays:"")
print(result)
","a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

a.sum()

b.sum()

a.sum(axis=0)

b.sum(axis=0)

a.sum(axis=1)

b.sum(axis=1)

a.sum(axis=1, out="
673,Write a Python program to remove the contents of a tag in a given html document. ,"from bs4 import BeautifulSoup
html_content = '<a href=""https://w3resource.com/"">Python exercises<i>w3resource</i></a>'
soup = BeautifulSoup(html_content, ""lxml"")
print(""Original Markup:"")
print(soup.a)
tag = soup.a
tag = tag.clear()
print(""\nAfter clearing the contents in the tag:"")
print(soup.a)
","import re

html = '''
<html>
<head>
<title>The Dormouse's story</title>
</head>
<body>
<p class=""title""><b>The Dormouse's story</b></p>

<p class=""story"">Once upon a time there were three little sisters; and their names were
<a href=""http://example.com/elsie"" class=""sister"" id=""link1"">Elsie</a>,
<"
674,Write a Python program to count the number of elements in a list within a specified range. ,"def count_range_in_list(li, min, max):
	ctr = 0
	for x in li:
		if min <= x <= max:
			ctr += 1
	return ctr

list1 = [10,20,30,40,40,40,70,80,99]
print(count_range_in_list(list1, 40, 100))

list2 = ['a','b','c','d','e','f']
print(count_range_in_list(list2, 'a', 'e'))
","def count_elements(list, start, end):
    count = 0
    for i in list:
        if i >= start and i <= end:
            count += 1
    return count

print(count_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0, 9))

""""""

def count_elements(list, start, end):
    count = 0
    for i in list:
        if"
675,Write a Python program to concatenate elements of a list. ,"color = ['red', 'green', 'orange']
print('-'.join(color))
print(''.join(color))
","def concatenate(list):
    return list[0] + list[1] + list[2] + list[3] + list[4] + list[5] + list[6] + list[7] + list[8] + list[9] + list[10] + list[11] + list[12] + list[13] + list[14] + list[15] + list[16] + list[17] + list[18] + list[19] + list[20]"
676,Write a Python program to access multiple elements of specified index from a given list. ,"def access_elements(nums, list_index):
    result = [nums[i] for i in list_index]
    return result


nums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]
print (""Original list:"")
print(nums)
list_index = [0,3,5,7,10]
print(""Index list:"")
print(list_index)
print(""\nItems with specified index of the said list:"")
print(access_elements(nums, list_index))
","def get_index(list, index):
    return list.index(index)

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
index = 5
print(get_index(list, index))

""""""

def get_index(list, index):
    return list.index(index)

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
index = 5"
677,Write a Python program to Zip two given lists of lists. ,"list1 = [[1, 3], [5, 7], [9, 11]] 
list2 = [[2, 4], [6, 8], [10, 12, 14]]   
print(""Original lists:"")
print(list1)
print(list2)
result = list(map(list.__add__, list1, list2)) 
print(""\nZipped list:\n"" +  str(result))
",">>> import zipfile
>>> import os
>>> import sys
>>> import time
>>> import csv

>>> def read_csv(filename):
    with open(filename, 'r') as f:
        reader = csv.reader(f)
        data = list(reader)
        return data

>>> def write_csv(filename, data):
    with open(filename, 'w') as f:
        writer = csv.writer(f)
        writer.writerows(data)

>>>"
678,Write a Pandas program to extract unique reporting dates of unidentified flying object (UFO). ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nUnique reporting dates of UFO:"")
print(df[""Date_time""].map(lambda t: t.date()).unique())
","import pandas as pd

# Read the data
df = pd.read_csv('/Users/krishna/Downloads/UFO_Data.csv')

# Create a new dataframe with only unique reporting dates
df_unique = df.drop_duplicates(subset=['Reporting_Date'])

# Print the dataframe
print(df_unique)

# Create a new dataframe with only unique reporting dates
df_unique = df.drop"
679,"Write a Pandas program to create a Pivot table and find survival rate by gender, age of the different categories of various classes. ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
age = pd.cut(df['age'], [0, 20, 55])
result = df.pivot_table('survived', index=['sex', age], columns='class')
print(result)
","import pandas as pd
import numpy as np

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/iris.csv')

# Create a pivot table
pivot = df.pivot_table(index='species', columns='class', values='petal_length', aggfunc='mean')

# Find survival rate by gender
pivot['survived'] ="
680,Write a Python program to sort unsorted numbers using Pigeonhole sorting. ,"#Ref. https://bit.ly/3olnZcd
def pigeonhole_sort(a):
    # size of range of values in the list (ie, number of pigeonholes we need)
    min_val = min(a)  # min() finds the minimum value
    max_val = max(a)  # max() finds the maximum value
    size = max_val - min_val + 1  # size is difference of max and min values plus one
    # list of pigeonholes of size equal to the variable size
    holes = [0] * size
    # Populate the pigeonholes.
    for x in a:
        assert isinstance(x, int), ""integers only please""
        holes[x - min_val] += 1
    # Putting the elements back into the array in an order.
    i = 0
    for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            a[i] = count + min_val
            i += 1
            
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
pigeonhole_sort(nums)
print(""Sorted order is:"", nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
pigeonhole_sort(nums)
print(""Sorted order is:"", nums)
","def sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [5, 2, 3, 1, 4]
print(sort(arr))

""""""

def sort(arr):
    for i in"
681,"Write a Python program to calculate the difference between two iterables, without filtering duplicate values. ","def difference(x, y):
  _y = set(y)
  return [item for item in x if item not in _y]
print(difference([1, 2, 3], [1, 2, 4]))
","def diff(a, b):
    return (a[i] - b[i])

a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(diff(a, b))

# Output:
# 3
# 5
# 7
# 9
# 10

# Python code to solve the following problem"
682,Write a Python program to get the number of datasets currently listed on data.gov. ,"from lxml import html
import requests
response = requests.get('http://www.data.gov/')
doc_gov = html.fromstring(response.text)
link_gov = doc_gov.cssselect('small a')[0]
print(""Number of datasets currently listed on data.gov:"")
print(link_gov.text)
","import os
import sys
import csv

# Open the file in read mode
with open('data.csv', 'r') as csvfile:
    # Split the data into a list of individual lines
    lines = csv.reader(csvfile)
    # Read the header row first (skip this step if there is now header)
    next(lines)
    # Iterate over each row in the csv
    for row in lines:
        # Print each row
        print"
683,"Write a NumPy program to add two arrays A and B of sizes (3,3) and (,3). ","import numpy as np
A = np.ones((3,3))
B = np.arange(3)
print(""Original array:"")
print(""Array-1"")
print(A)
print(""Array-2"")
print(B)
print(""A + B:"")
new_array = A + B
print(new_array)
","a = np.array([[1,2,3],[4,5,6]])
b = np.array([[7,8,9],[10,11,12]])

a = np.array([[1,2,3],[4,5,6]])
b = np.array([[7,8,9],[10,11,12]])

a = np.array([[1,2,3],[4,5,"
684,Write a Python program to detect the number of local variables declared in a function. ,"def abc():
    x = 1
    y = 2
    str1= ""w3resource""
    print(""Python Exercises"")

print(abc.__code__.co_nlocals)
","def local_vars(func):
    def wrapper(*args, **kwargs):
        print(""Number of local variables: "", len(args))
        return func(*args, **kwargs)
    return wrapper

@local_vars
def add(a, b):
    return a + b

print(add(1, 2))

""""""

# Solution 2

def local_vars(func):
    def wrapper(*args, **kwargs):
        print"
685,Write a Python program to that takes any number of iterable objects or objects with a length property and returns the longest one. ,"def longest_item(*args):
  return max(args, key = len)
print(longest_item('this', 'is', 'a', 'Green'))  
print(longest_item([1, 2, 3], [1, 2], [1, 2, 3, 4, 5])) 
print(longest_item([1, 2, 3, 4], 'Red'))
","def longest_iterable(iterable):
    """"""
    >>> longest_iterable([1, 2, 3, 4, 5])
    4
    >>> longest_iterable([1, 2, 3, 4, 5, 6])
    6
    >>> longest_iterable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
    10
    """"""
    return max(iterable, key=len)"
686,Write a Python program that multiply each number of given list with a given number using lambda function. Print the result. ,"nums = [2, 4, 6, 9 , 11]
n = 2
print(""Original list: "", nums)
print(""Given number: "", n)
filtered_numbers=list(map(lambda number:number*n,nums))
print(""Result:"")
print(' '.join(map(str,filtered_numbers)))
","def multiply(list):
    result = 1
    for i in list:
        result *= i
    return result

print(multiply([1, 2, 3, 4, 5]))

""""""

# Solution 1

def multiply(list):
    result = 1
    for i in list:
        result *= i
    return result

print(multiply([1, 2, 3, 4, 5]))"
687,Write a Python program to convert list to list of dictionaries. ,"color_name = [""Black"", ""Red"", ""Maroon"", ""Yellow""]
color_code = [""#000000"", ""#FF0000"", ""#800000"", ""#FFFF00""]
print([{'color_name': f, 'color_code': c} for f, c in zip(color_name, color_code)])
","l = [
    {'name': 'John', 'age': 30},
    {'name': 'Bob', 'age': 32},
    {'name': 'Jack', 'age': 33},
    {'name': 'Mary', 'age': 35},
    {'name': 'John', 'age': 40}
]

l = [
    {'name': 'John', 'age': 30},
    {'name': 'Bob', 'age': 32},
    {'name':"
688,"Write a Python program to round a Decimal value to the nearest multiple of 0.10, unless already an exact multiple of 0.05. Use decimal.Decimal","from decimal import Decimal
#Source: https://bit.ly/3hEyyY4

def round_to_10_cents(x):
    remainder = x.remainder_near(Decimal('0.10'))
    if abs(remainder) == Decimal('0.05'):
        return x
    else:
        return x - remainder

# Test code.
for x in range(80, 120):
    y = Decimal(x) / Decimal('1E2')
    print(""{0} rounds to {1}"".format(y, round_to_10_cents(y)))
","import decimal

def solution(d):
    if d % 0.10 == 0:
        return decimal.Decimal(d)
    else:
        return decimal.Decimal(d) / decimal.Decimal(0.10)

print(solution(5.5))
print(solution(5.5))
print(solution(5.5))
print(solution(5.5"
689,Write a Pandas program to split the following given dataframe into groups based on school code and cast grouping as a list. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
student_data = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])
print(""Original DataFrame:"")
print(student_data)
print('\nCast grouping as a list:')
result = student_data.groupby(['school_code'])
print(list(result))
","df = pd.DataFrame({'School Code': ['A', 'A', 'A', 'B', 'B', 'B', 'C', 'C', 'C', 'D', 'D', 'D', 'E', 'E', 'F', 'F', 'F', 'G', 'G', 'H', 'H', 'I', 'I', 'J', 'J', 'K', 'K', 'L', 'L', 'M',"
690,Write a Python program to find the missing number in a given array of numbers between 10 and 20. ,"import array as arr
def test(nums):
    return sum(range(10, 21)) - sum(list(nums))

array_num = arr.array('i', [10, 11, 12, 13, 14, 16, 17, 18, 19, 20])
print(""Original array:"")
for i in range(len(array_num)):    
    print(array_num[i], end=' ')
print(""\nMissing number in the said array (10-20): "",test(array_num))
 
array_num = arr.array('i', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])
print(""\nOriginal array:"")
for i in range(len(array_num)):    
    print(array_num[i], end=' ')
print(""\nMissing number in the said array (10-20): "",test(array_num))
","import random

def missing_number(arr):
    for i in range(10,21):
        if i not in arr:
            return i

arr = [10,20,30,40,50,60,70,80,90,100]
print(missing_number(arr))

# Output: 30

# Explanation:
# 10 is missing in the array, so it is not present in the array.
# 20 is missing in the array,"
691,"Write a Python program to map the values of a list to a dictionary using a function, where the key-value pairs consist of the original value as the key and the result of the function as the value. ","def map_dictionary(itr, fn):
  return dict(zip(itr, map(fn, itr)))
print(map_dictionary([1, 2, 3], lambda x: x * x))
","def map_list(lst):
    d = {}
    for i in lst:
        d[i] = map(lambda x: x * x, lst)
    return d

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(map_list(lst))

"""""""
692,Write a Python program to check if there are duplicate values in a given flat list. ,"def has_duplicates(lst):
  return len(lst) != len(set(lst))
nums = [1, 2, 3, 4, 5, 6, 7]
print(""Original list:"")
print(nums)
print(""Check if there are duplicate values in the said given flat list:"")
print(has_duplicates(nums)) 
nums = [1, 2, 3, 3, 4, 5, 5, 6, 7]
print(""\nOriginal list:"")
print(nums)
print(""Check if there are duplicate values in the said given flat list:"")
print(has_duplicates(nums)) 
","def check_duplicate(lst):
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            if lst[i] == lst[j]:
                return True
    return False

lst = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8,"
693,Write a Python program to combine two given sorted lists using heapq module. ,"from heapq import merge
nums1 = [1, 3, 5, 7, 9, 11]
nums2 = [0, 2, 4, 6, 8, 10]
print(""Original sorted lists:"")
print(nums1)
print(nums2)
print(""\nAfter merging the said two sorted lists:"")
print(list(merge(nums1, nums2)))
","import heapq

def merge_sorted_lists(l1, l2):
    heapq.heapify(l1)
    heapq.heapify(l2)
    res = []
    while l1 and l2:
        if l1[0] < l2[0]:
            res.append(l1.pop(0))
        else:
            res.append(l2.pop(0))
    while l1:
        res"
694,Write a Python program to find shortest list of values with the keys in a given dictionary. ,"def test(dictt):
    min_value=1
    result = [k for k, v in dictt.items() if len(v) == (min_value)] 
    return result    

dictt = {
 'V': [10, 12],
 'VI': [10],
 'VII': [10, 20, 30, 40],
 'VIII': [20],
 'IX': [10,30,50,70],
 'X': [80]
 }

print(""\nOriginal Dictionary:"")
print(dictt)
print(""\nShortest list of values with the keys of the said dictionary:"")
print(test(dictt))
","def shortest_list(d, key):
    shortest_list = []
    for i in d:
        if i[key] < d[i]:
            shortest_list.append(i)
    return shortest_list

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}
print(shortest_list(d, 'a'))

""""""

# Solution"
695,"Write a Python program to check for access to a specified path. Test the existence, readability, writability and executability of the specified path. ","import os
print('Exist:', os.access('c:\\Users\\Public\\C programming library.docx', os.F_OK))
print('Readable:', os.access('c:\\Users\\Public\\C programming library.docx', os.R_OK))
print('Writable:', os.access('c:\\Users\\Public\\C programming library.docx', os.W_OK))
print('Executable:', os.access('c:\\Users\\Public\\C programming library.docx', os.X_OK))
","import os

def check_access(path):
    if os.access(path, os.R_OK):
        print(""Access granted"")
    else:
        print(""Access denied"")

check_access(""C:\\Users\\srin\\Desktop\\Python\\Python_Projects\\Python_Projects_2\\test.txt"")

""""""

#!/bin/python3

import math
import os"
696,Write a Python program to sort a list of elements using Selection sort. ,"def selection_sort(nums):
    for i, n in enumerate(nums):
        mn = min(range(i,len(nums)), key=nums.__getitem__)
        nums[i], nums[mn] = nums[mn], n
    return nums
user_input = input(""Input numbers separated by a comma:\n"").strip()
nums = [int(item) for item in user_input.split(',')]
print(selection_sort(nums))
","def selection_sort(arr):
    for i in range(len(arr)):
        min_index = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_index]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr

arr = [10, 4, 8, 2, 1, 5, 7, 9, 3]"
697,Write a Pandas program to split the following datasets into groups on customer_id to summarize purch_amt and calculate percentage of purch_amt in each group. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['05-10-2012','09-10-2012','05-10-2012','08-17-2012','10-09-2012','07-27-2012','10-09-2012','10-10-2012','10-10-2012','06-17-2012','07-08-2012','04-25-2012'],
'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
gr_data = df.groupby(['customer_id','salesman_id']).agg({'purch_amt': 'sum'})
gr_data[""% (Purch Amt.)""] = gr_data.apply(lambda x:  100*x / x.sum())
print(""\nPercentage of purch_amt in each group of customer_id:"")
print(gr_data)
","import pandas as pd

# Read the data
df = pd.read_csv('purch_amt.csv')

# Create a new dataframe with the columns customer_id, group, and purch_amt
df_grouped = df.groupby(['customer_id', 'group']).agg({'purch_amt': ['sum']})

# Create a new data"
698,Write a Python program to extract a tag or string from a given tree of html document. ,"from bs4 import BeautifulSoup
html_content = '<a href=""https://w3resource.com/"">Python exercises<i>w3resource</i></a>'
soup = BeautifulSoup(html_content, ""lxml"")
print(""Original Markup:"")
print(soup.a)
i_tag = soup.i.extract()
print(""\nExtract i tag from said html Markup:"")
print(i_tag)
","import requests
from bs4 import BeautifulSoup

url = ""https://www.python.org/blogs/html-tables/""

r = requests.get(url)
soup = BeautifulSoup(r.text, 'html.parser')

# print(soup.prettify())

# print(soup.title)
# print(soup.title.string)
# print(soup.title.name)
# print(soup"
699,Write a Python program to remove consecutive duplicates of a given list. ,"from itertools import groupby
def compress(l_nums):
    return [key for key, group in groupby(l_nums)] 
n_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]
print(""Original list:"") 
print(n_list)
print(""\nAfter removing consecutive duplicates:"")
print(compress(n_list)) 

","def remove_duplicates(lst):
    # Your code here
    return lst

lst = [1, 1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,"
700,"Write a Pandas program to create a Pivot table and find the total sale amount region wise, manager wise, sales man wise. ","import numpy as np
import pandas as pd
df = pd.read_excel('E:\SaleData.xlsx')
print(pd.pivot_table(df,index=[""Region"",""Manager"",""SalesMan""], values=""Sale_amt"", aggfunc=np.sum))
","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20"
701,Write a Pandas program to find out the alcohol consumption details in the year '1986' where WHO region is 'Western Pacific' and country is 'VietNam' from the world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details in the year 1986 where WHO region is Western Pacific and country is VietNam :"")
print(w_a_con[(w_a_con['Year']==1986) & (w_a_con['WHO region']=='Western Pacific') & (w_a_con['Country']=='Viet Nam')])
","import pandas as pd
import numpy as np

df = pd.read_csv('world_alcohol_consumption.csv')

df['region'] = df['region'].str.lower()
df['country'] = df['country'].str.lower()

df['region'] = df['region'].replace('western pacific', 'western pacific"
702,"Write a Python function that checks whether a passed string is palindrome or not.
","def isPalindrome(string):
	left_pos = 0
	right_pos = len(string) - 1
	
	while right_pos >= left_pos:
		if not string[left_pos] == string[right_pos]:
			return False
		left_pos += 1
		right_pos -= 1
	return True
print(isPalindrome('aza')) 
","def isPalindrome(string):
    if string == string[::-1]:
        return True
    else:
        return False

print(isPalindrome(""A man, a plan, a canal: Panama""))
print(isPalindrome(""race a car""))

""""""

def isPalindrome(string):
    if string == string[::-1]:
        return True
    else:
        return False

print(isPalindrome(""A man,"
703,Write a Python program to count integer in a given mixed list. ,"def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr

list1 = [1, 'abcd', 3, 1.2, 4, 'xyz', 5, 'pqr', 7, -5, -12.22]

print(""Original list:"")
print(list1)

print(""\nNumber of integers in the said mixed list:"")
print(count_integer(list1))
","def count_integer(mixed_list):
    count = 0
    for i in mixed_list:
        if isinstance(i, int):
            count += 1
    return count

print(count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def count_integer(mixed_list):
    count = 0
    for i in mixed_list:
        if isinstance(i, int):
            count"
704,Write a Python program to check if first digit/character of each element in a given list is same or not. ,"def test(lst):
    result = all(str(x)[0] == str(lst[0])[0] for x in lst) 
    return result
nums = [1234, 122, 1984, 19372, 100]
print(""\nOriginal list:"")
print(nums)
print(""Check if first digit in each element of the said given list is same or not!"")
print(test(nums))
nums = [1234, 922, 1984, 19372, 100]
print(""\nOriginal list:"")
print(nums)
print(""Check if first digit in each element of the said given list is same or not!"")
print(test(nums))
nums = ['aabc', 'abc', 'ab', 'a']
print(""\nOriginal list:"")
print(nums)
print(""Check if first character in each element of the said given list is same or not!"")
print(test(nums))
nums = ['aabc', 'abc', 'ab', 'ha']
print(""\nOriginal list:"")
print(nums)
print(""Check if first character in each element of the said given list is same or not!"")
print(test(nums))
","def is_same(num):
    if num[0] == '0':
        return False
    else:
        return True

print(is_same([1, 2, 3, 4, 5, 6, 7, 8, 9]))

""""""

def is_same(num):
    if num[0] == '0':
        return False
    else:
        return True

print(is_same([1, 2,"
705,"Write a Python program to print four values decimal, octal, hexadecimal (capitalized), binary in a single line of a given integer. ","i = int(input(""Input an integer: ""))
o = str(oct(i))[2:]
h = str(hex(i))[2:]
h = h.upper()
b = str(bin(i))[2:]
d = str(i)
print(""Decimal Octal Hexadecimal (capitalized), Binary"")
print(d,'  ',o,' ',h,'                   ',b)
","# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

# Solution 11:

# Solution 12:

# Solution 13:

# Solution 14:

# Solution 15:

# Solution 16:"
706,Write a NumPy program to extract third and fourth elements of the first and second rows from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: Third and fourth elements of the first and second rows "")
print(arra_data[0:2, 2:4])
","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

print(a[0][2])
print(a[1][2])
print(a[2][2])

# Output:
# 5
# 6
# 7
# 8

# Output:
# 9
#"
707,Write a NumPy program to create a record array from a (flat) list of arrays. ,"import numpy as np
a1=np.array([1,2,3,4])
a2=np.array(['Red','Green','White','Orange'])
a3=np.array([12.20,15,20,40])
result= np.core.records.fromarrays([a1, a2, a3],names='a,b,c')
print(result[0])
print(result[1])
print(result[2])
","import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Create a record array from the list of arrays

# Create a record array from a list of arrays

# Create a record array from a list of arrays

# Create a record array from a list of arrays

# Create a record array from a list of arrays

# Create a record array from a list of arrays"
708,Write a Python program to find palindromes in a given list of strings using Lambda. ,"texts = [""php"", ""w3r"", ""Python"", ""abcd"", ""Java"", ""aaa""]
print(""Orginal list of strings:"")
print(texts) 
result = list(filter(lambda x: (x == """".join(reversed(x))), texts)) 
print(""\nList of palindromes:"")
print(result) 
","def palindrome(s):
    return s == s[::-1]

s = [""abcd"", ""cba"", ""dabcd"", ""cbad""]

print(list(filter(palindrome, s)))

""""""

# Solution

def palindrome(s):
    return s == s[::-1]

s = [""abcd"", ""cba"", ""dabcd"", ""cbad""]

print(list("
709,"Write a Python program that reads a CSV file and remove initial spaces, quotes around each entry and the delimiter. ","import csv
csv.register_dialect('csv_dialect',
                    delimiter='|',
                    skipinitialspace=True,
                    quoting=csv.QUOTE_ALL)
with open('temp.csv', 'r') as csvfile:
   reader = csv.reader(csvfile, dialect='csv_dialect')
   for row in reader:
       print(row)
","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)

# Solution:

# import csv
#
# with open('data.csv', 'r') as f:
#     csv_reader = csv.reader(f)
#     for row in csv_reader:
#         print"
710,Write a Pandas program to create a bar plot of the trading volume of Alphabet Inc. stock between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-4-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1.set_index('Date')
plt.figure(figsize=(6,6))
plt.suptitle('Trading Volume of Alphabet Inc. stock,\n01-04-2020 to 30-04-2020', fontsize=16, color='black')
plt.xlabel(""Date"",fontsize=12, color='black')
plt.ylabel(""Trading Volume"", fontsize=12, color='black') 
df2['Volume'].plot(kind='bar');
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])

df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')

plt.bar(df['Date'], df['Volume'])

plt.show"
711,Write a Python program to delete all occurrences of a specified character in a given string. ,"def delete_all_occurrences(str1, ch):
     result = str1.replace(ch, """")
     return(result)

str_text = ""Delete all occurrences of a specified character in a given string""
print(""Original string:"")
print(str_text)
print(""\nModified string:"")
ch='a'
print(delete_all_occurrences(str_text, ch))
","def delete_char(str, char):
    return str.replace(char, '')

print(delete_char('abcdef', 'd'))

""""""

def delete_char(str, char):
    return str.replace(char, '')

print(delete_char('abcdef', 'd'))

""""""

def delete_char(str, char):
    return str.replace(char, '')

print(delete_char('abcdef"
712,"Write a Pandas program to create a Pivot table and find manager wise, salesman wise total sale and also display the sum of all sale amount at the bottom. ","import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df,index=[""Manager"",""SalesMan""],values=[""Units"",""Sale_amt""],
               aggfunc=[np.sum],fill_value=0,margins=True)
print(table)
","import pandas as pd

df = pd.read_csv(""/Users/krishna/Downloads/Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales"
713,"Write a Python program to create a time object with the same hour, minute, second, microsecond and timezone info. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nTime object with the same hour, minute, second, microsecond and timezone info.:"")
print(arrow.utcnow().timetz())
","import datetime

# create a datetime object
dt = datetime.datetime(2021, 8, 1, 12, 30, 0, 0)

# print the datetime object
print(dt)

# create a datetime object with the same hour, minute, second, microsecond and timezone info
dt = datetime.datetime(2021, 8, 1, 12, 30, 0, 0, tzinfo=datetime."
714,Write a Pandas program to get the items of a given series not present in another given series. ,"import pandas as pd
sr1 = pd.Series([1, 2, 3, 4, 5])
sr2 = pd.Series([2, 4, 6, 8, 10])
print(""Original Series:"")
print(""sr1:"")
print(sr1)
print(""sr2:"")
print(sr2)
print(""\nItems of sr1 not present in sr2:"")
result = sr1[~sr1.isin(sr2)]
print(result)
","import pandas as pd

data = {'Name': ['Rolf', 'Bob', 'Jen', 'Anne'],
        'Score': [90, 80, 70, 60]}

df = pd.DataFrame(data)

print(df)

# Solution:

# df = pd.read_csv('data.csv')
# print(df)

# Solution:

# df = pd.read_csv('data.csv"
715,Write a Python program to create a new list dividing two given lists of numbers. ,"def dividing_two_lists(l1,l2):
    result = [x/y for x, y in zip(l1,l2)]
    return result 
nums1 = [7,2,3,4,9,2,3]
nums2 = [9,8,2,3,3,1,2]
print(""Original list:"")
print(nums1)
print(nums1)
print(dividing_two_lists(nums1, nums2))
","def divide(lst1, lst2):
    return [x / y for x, y in zip(lst1, lst2)]

lst1 = [1, 2, 3, 4, 5]
lst2 = [2, 4, 6, 8, 10]

print(divide(lst1, lst2))

""""""

# Solution:

def divide(lst1, lst2):
    return [x / y for x"
716,"Write a Python program to print the documents (syntax, description etc.) of Python built-in function(s). ",print(abs.__doc__),"def my_function(arg1, arg2, arg3):
    print(arg1, arg2, arg3)

my_function(1, 2, 3)

""""""

def my_function(arg1, arg2, arg3):
    print(arg1, arg2, arg3)

my_function(1, 2, 3)

""""""

def my_function(arg1, arg2, arg3):"
717,"Write a Python program to count the even, odd numbers in a given array of integers using Lambda. ","array_nums = [1, 2, 3, 5, 7, 8, 9, 10]
print(""Original arrays:"")
print(array_nums)
odd_ctr = len(list(filter(lambda x: (x%2 != 0) , array_nums)))
even_ctr = len(list(filter(lambda x: (x%2 == 0) , array_nums)))
print(""\nNumber of even numbers in the above array: "", even_ctr)
print(""\nNumber of odd numbers in the above array: "", odd_ctr)
","def even_odd(arr):
    even = 0
    odd = 0
    for i in arr:
        if i % 2 == 0:
            even += 1
        else:
            odd += 1
    return even, odd

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(even_odd(arr))

""""""

# Solution:

def even_odd(arr):"
718,Write a Python program to get a datetime or timestamp representation from current datetime. ,"import arrow
a = arrow.utcnow()
print(""Datetime representation:"")
print(a.datetime)
b = a.timestamp
print(""\nTimestamp representation:"")
print(b)
","import datetime

def get_timestamp():
    return datetime.datetime.now()

def get_datetime():
    return datetime.datetime.now()

def get_timestamp_as_string():
    return get_timestamp().strftime('%Y-%m-%d %H:%M:%S')

def get_datetime_as_string():
    return get_datetime().strftime('%Y-%m-"
719,Write a Python program to check whether lowercase letters exist in a string. ,"str1 = 'A8238i823acdeOUEI'
print(any(c.islower() for c in str1))
","def check_lowercase(string):
    for i in string:
        if i.islower():
            return True
    return False

print(check_lowercase(""python""))

""""""

# Solution 1

def check_lowercase(string):
    for i in string:
        if i.islower():
            return True
    return False

print(check_lowercase(""python""))

# Solution 2

def check_lowercase(string):
    for"
720,Write a Pandas program to split the following given dataframe into groups based on single column and multiple columns. Find the size of the grouped data. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
student_data = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])

print(""Original DataFrame:"")
print(student_data)
print('\nSplit the said data on school_code wise:')
grouped_single = student_data.groupby(['school_code'])
print(""Size of the grouped data - single column"")
print(grouped_single.size())
print('\nSplit the said data on school_code and class wise:')

grouped_mul = student_data.groupby(['school_code', 'class'])
print(""Size of the grouped data - multiple columns:"")
print(grouped_mul.size())
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})"
721,Write a Python program to create a new JSON file from an existing JSON file. ,"import json

with open('states.json') as f:
  state_data= json.load(f)

for state in state_data['states']:
  del state['area_codes']

with open('new_states.json', 'w') as f:
  json.dump(state_data, f, indent=2)
","import json

with open('data.json') as f:
    data = json.load(f)

print(data)

# Output:
# {
#   ""name"": ""John"",
#   ""age"": 30,
#   ""gender"": ""Male""
# }

# Create a new JSON file
# with open('data.json', 'w') as f:
#     json.dump(data, f)

# Output:
# {
#"
722,Write a Python program to move spaces to the front of a given string. ,"def move_Spaces_front(str1):
  noSpaces_char = [ch for ch in str1 if ch!=' ']
  spaces_char = len(str1) - len(noSpaces_char)
  result = ' '*spaces_char
  result = '""'+result + ''.join(noSpaces_char)+'""'
  return(result)

print(move_Spaces_front(""w3resource .  com  ""))
print(move_Spaces_front(""   w3resource.com  ""))
","def move_spaces(s):
    return s.lstrip().rstrip()

print(move_spaces(""  hello world  ""))

""""""

def move_spaces(s):
    return s.lstrip().rstrip()

print(move_spaces(""  hello world  ""))

""""""

def move_spaces(s):
    return s.lstrip().rstrip()

print(move_spaces(""  hello world  ""))

"""""""
723,Write a Pandas program to check whether alpha numeric values present in a given column of a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'name_code': ['Company','Company a001','Company 123', '1234', 'Company 12'],
    'date_of_birth ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'age': [18.5, 21.2, 22.5, 22, 23]
})
print(""Original DataFrame:"")
print(df)
print(""\nWhether all characters in the string are alphanumeric?"")
df['name_code_is_alphanumeric'] = list(map(lambda x: x.isalnum(), df['name_code']))
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Age': [30, 32, 33, 34, 35, 36],
                   'Score': [90, 95, 100, 90, 95, 100]})

print(df['Name'].isalpha())

# Output:
# True
# True
# True
# True"
724,Write a Python program to split a given dictionary of lists into list of dictionaries. ,"def list_of_dicts(marks):
    keys = marks.keys()
    vals = zip(*[marks[k] for k in keys])
    result = [dict(zip(keys, v)) for v in vals]
    return result

marks = {'Science': [88, 89, 62, 95], 'Language': [77, 78, 84, 80]}
print(""Original dictionary of lists:"")
print(marks)
print(""\nSplit said dictionary of lists into list of dictionaries:"")
print(list_of_dicts(marks))
","d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}

d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}

d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}

d = {'a"
725,Write a Python program to read specific columns of a given CSV file and print the content of the columns. ,"import csv
with open('departments.csv', newline='') as csvfile:
 data = csv.DictReader(csvfile)
 print(""ID Department Name"")
 print(""---------------------------------"")
 for row in data:
   print(row['department_id'], row['department_name'])
","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)

""""""

import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)

""""""

import c"
726,Write a Python program to create a list with infinite elements. ,"import itertools
c = itertools.count()
print(next(c))
print(next(c))
print(next(c))
print(next(c))
print(next(c))
","def create_list(n):
    lst = []
    for i in range(n):
        lst.append(i)
    return lst

print(create_list(5))

""""""

# Solution

def create_list(n):
    lst = []
    for i in range(n):
        lst.append(i)
    return lst

print(create_list(5))"
727,Write a NumPy program to select indices satisfying multiple conditions in a NumPy array. ,"import numpy as np
a = np.array([97, 101, 105, 111, 117])
b = np.array(['a','e','i','o','u'])
print(""Original arrays"")
print(a)
print(b)
print(""Elements from the second array  corresponding to elements in the first array  that are greater than 100 and less than 110:"")
print(b[(100 < a) & (a < 110)])
","python solution.py

""""""

import numpy as np

def select_indices(arr, condition, n):
    """"""
    This function takes an array and a condition and returns the indices satisfying the condition.
    
    Parameters
    ----------
    arr : numpy.ndarray
        Array to be sorted.
    condition : function
        Function to determine if an element is True or False.
    n : int
        Number of elements in the array.
    
    Returns"
728,Write a Python program to invert a given dictionary with non-unique hashable values. ,"from collections import defaultdict
def test(students):
  obj = defaultdict(list)
  for key, value in students.items():
    obj[value].append(key)
  return dict(obj)
 
students = {
  'Ora Mckinney': 8,
  'Theodore Hollandl': 7,
  'Mae Fleming': 7,
  'Mathew Gilbert': 8,
  'Ivan Little': 7,  
}
print(test(students))
","def invert_dict(d):
    d = dict(d)
    for key in d:
        d[key] = key
    return d

d = {'a': 1, 'b': 2, 'c': 3}
print(invert_dict(d))

""""""

# Solution:

def invert_dict(d):
    d = dict(d)
    for key in d:
        d[key] = key
    return"
729,Write a NumPy program to create an inner product of two arrays. ,"import numpy as np
x = np.arange(24).reshape((2,3,4))
print(""Array x:"")
print(x)
print(""Array y:"")
y = np.arange(4)
print(y)
print(""Inner of x and y arrays:"")
print(np.inner(x, y))
","a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

inner_product = np.dot(a, b)

print(inner_product)

""""""

# Solution

import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8"
730,Write a Pandas program to create a Pivot table and find the maximum sale value of the items. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df, index='Item', values='Sale_amt', aggfunc=np.max)
print(table)
","pivot_table(df, columns=['Item_Name', 'Sale'], values='Sale', aggfunc='max')

""""""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('pivot_table.csv')

# Create a Pandas dataframe from the dataframe
df = pd.DataFrame(df)

# Create a Pandas"
731,Write a Pandas program to convert index of a given dataframe into a column. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32]},
     index = ['t1', 't2', 't3', 't4', 't5', 't6'])
print(""Original DataFrame:"")
print(df)
print(""\nConvert index of the said dataframe into a column:"")
df.reset_index(level=0, inplace=True)
print(df)
","df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Score': [90, 80, 70, 60, 50, 40]})

df.columns = ['Name', 'Score']

df.head()

df.columns = ['Name', 'Score']

df.head()

df.columns = ['Name', 'Score']

df.head()"
732,Write a Python program to sum a specific column of a list in a given list of lists. ,"def sum_column(nums, C):
    result = sum(row[C] for row in nums)
    return result

nums = [
        [1,2,3,2],
        [4,5,6,2],
        [7,8,9,5],
        ]
print(""Original list of lists:"")
print(nums)

column = 0
print(""\nSum: 1st column of the said list of lists:"")
print(sum_column(nums, column))
column = 1
print(""\nSum: 2nd column of the said list of lists:"")
print(sum_column(nums, column))
column = 3
print(""\nSum: 4th column of the said list of lists:"")
print(sum_column(nums, column))
","def sum_col(lst, col):
    return sum(lst[:,col])

lst = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
col = 3
print(sum_col(lst, col))

""""""

def sum_col(lst, col):
    return sum(lst[:,col])

lst = [[1,2,3,4],[5"
733,Write a Python program to add two given lists and find the difference between lists. Use map() function. ,"def addition_subtrction(x, y):
    return x + y, x - y
 
nums1 = [6, 5, 3, 9]
nums2 = [0, 1, 7, 7]
print(""Original lists:"")
print(nums1)
print(nums2)
result = map(addition_subtrction, nums1, nums2)
print(""\nResult:"")
print(list(result))
","def add_two_lists(list1, list2):
    return list(map(lambda x, y: x + y, list1, list2))

print(add_two_lists([1, 2, 3], [4, 5, 6]))

""""""

def add_two_lists(list1, list2):
    return list(map(lambda x, y: x + y, list1, list2))

print(add_two"
734,Write a Pandas program to create a date range using a startpoint date and a number of periods. ,"import pandas as pd
date_range = pd.date_range('2020-01-01', periods=45)
print(""Date range of perods 45:"")
print(date_range)
","import pandas as pd
import datetime as dt

start = dt.datetime(2020, 1, 1)
end = dt.datetime(2020, 1, 10)

periods = 10

df = pd.DataFrame({""start"": [start], ""end"": [end]})

print(df)

# Solution:

# df = pd.DataFrame({""start"": [start], ""end"": [end"
735,"Write a NumPy program to calculate inverse sine, inverse cosine, and inverse tangent for all elements in a given array. ","import numpy as np
x = np.array([-1., 0, 1.])
print(""Inverse sine:"", np.arcsin(x))
print(""Inverse cosine:"", np.arccos(x))
print(""Inverse tangent:"", np.arctan(x))
","import numpy as np

def sine(x):
    return np.sin(x)

def cosine(x):
    return np.cos(x)

def tangent(x):
    return np.tan(x)

x = np.arange(0, np.pi, 0.1)

sine_answer = sine(x)
print(sine_answer)

cosine_"
736,Write a Pandas program to create the mean and standard deviation of the data of a given Series. ,"import pandas as pd
s = pd.Series(data = [1,2,3,4,5,6,7,8,9,5,3])
print(""Original Data Series:"")
print(s)
print(""Mean of the said Data Series:"")
print(s.mean())
print(""Standard deviation of the said Data Series:"")
print(s.std())
","import pandas as pd

# Create a dataframe from the given data
df = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""B"": [1, 2, 3, 4, 5], ""C"": [1, 2, 3, 4, 5]})

# Create a new column called ""mean""
df[""mean""] = df[""A""].mean()

# Create a new column called ""std""
df["""
737,Write a Python program to remove duplicates from a list. ,"a = [10,20,30,20,10,50,60,40,80,50,40]

dup_items = set()
uniq_items = []
for x in a:
    if x not in dup_items:
        uniq_items.append(x)
        dup_items.add(x)

print(dup_items)
","def remove_duplicates(list):
    new_list = []
    for i in list:
        if i not in new_list:
            new_list.append(i)
    return new_list

print(remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def remove_duplicates(list):
    new_list = []
    for i in list:
        if i not in new"
738,Write a Python program to find the latitude and longitude of a given location using Nominatim API and GeoPy package. ,"from geopy.geocoders import Nominatim
geolocator = Nominatim(user_agent=""geoapiExercises"")
ladd1 = ""27488 Stanford Avenue, North Dakota""
print(""Location address:"",ladd1)
location = geolocator.geocode(ladd1)
print(""Latitude and Longitude of the said address:"")
print((location.latitude, location.longitude))
ladd2 = ""380 New York St, Redlands, CA 92373""
print(""\nLocation address:"",ladd2)
location = geolocator.geocode(ladd2)
print(""Latitude and Longitude of the said address:"")
print((location.latitude, location.longitude))
ladd3 = ""1600 Pennsylvania Avenue NW""
print(""\nLocation address:"",ladd3)
location = geolocator.geocode(ladd3)
print(""Latitude and Longitude of the said address:"")
print((location.latitude, location.longitude))
","import geopy.geocoders
import geopy.distance

# Geolocation API
geolocator = geopy.geocoders.Nominatim(user_agent=""myGeoLocation"")

# Geocode the location
location = geolocator.geocode(input(""Enter the location: ""))

# Print the latitude and longitude
print(location.latitude, location.longitude)"
739,Write a Python program to get hourly datetime between two hours. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nString representing the date, controlled by an explicit format string:"")
print(arrow.utcnow().strftime('%d-%m-%Y %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%m-%d %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%d-%m %H:%M:%S'))
","hour1 = datetime.datetime.strptime('10:00', '%H:%M')
hour2 = datetime.datetime.strptime('10:30', '%H:%M')

print(hour1.strftime('%H:%M'))
print(hour2.strftime('%H:%M'))

# Solution:

# hour1 = datetime.datetime.strptime('10:00', '%H:%M')"
740,Write a Python program to sort an unsorted array numbers using Wiggle sort. ,"def wiggle_sort(arra_nums):
    for i, _ in enumerate(arra_nums):
        if (i % 2 == 1) == (arra_nums[i - 1] > arra_nums[i]):
            arra_nums[i - 1], arra_nums[i] = arra_nums[i], arra_nums[i - 1]

    return arra_nums

print(""Input the array elements: "")
arra_nums = list(map(int, input().split()))
print(""Original unsorted array:"")
print(arra_nums)
print(""The said array after applying Wiggle sort:"")
print(wiggle_sort(arra_nums))
","def wiggleSort(arr):
    for i in range(len(arr)):
        if arr[i] % 2 == 0:
            arr[i] = arr[i] / 2
        else:
            arr[i] = arr[i] * 3 + 1
    return arr

arr = [1, 5, 2, 6, 3, 7, 4, 8, 9, 10]
print(wiggleSort(arr))

""""""

def wiggleSort("
741,Write a NumPy program to compute the inner product of vectors for 1-D arrays (without complex conjugation) and in higher dimension. ,"import numpy as np
a = np.array([1,2,5])
b = np.array([2,1,0])
print(""Original 1-d arrays:"")
print(a)
print(b)
print 
result = np.inner(a, b)
print(""Inner product of the said vectors:"")
x = np.arange(9).reshape(3, 3)
y = np.arange(3, 12).reshape(3, 3)
print(""Higher dimension arrays:"")
print(x)
print(y)
result = np.inner(x, y)
print(""Inner product of the said vectors:"")
print(result)
","import numpy as np

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

print(np.inner(a, b))

# OUTPUT:
# [1 2 3]
# [4 5 6]

# OUTPUT:
# [1 4]
# [2 5]
# [3 6]

# OUTPUT:
# [1"
742,Write a Python program to find the pairs of maximum and minimum product from a given list. Use itertools module. ,"import itertools as it
def list_max_min_pair(nums):
    result_max = max(it.combinations(nums, 2), key = lambda sub: sub[0] * sub[1])
    result_min = min(it.combinations(nums, 2), key = lambda sub: sub[0] * sub[1])
    return result_max, result_min

nums = [2,5,8,7,4,3,1,9,10,1]   
print(""The original list: "") 
print(nums)
print(""\nPairs of maximum and minimum product from the said list:"")
print(list_max_min_pair(nums))
","import itertools

def find_pairs(lst):
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            if lst[i] * lst[j] == lst[i] * lst[j]:
                print(lst[i], lst[j])

find_pairs([1, 2, 3, 4, 5, 6"
743,Write a python program to check whether two lists are circularly identical. ,"list1 = [10, 10, 0, 0, 10]
list2 = [10, 10, 10, 0, 0]
list3 = [1, 10, 10, 0, 0]

print('Compare list1 and list2')
print(' '.join(map(str, list2)) in ' '.join(map(str, list1 * 2)))
print('Compare list1 and list3')
print(' '.join(map(str, list3)) in ' '.join(map(str, list1 * 2)))
","def isCircular(list1, list2):
    if len(list1)!= len(list2):
        return False
    for i in range(len(list1)):
        if list1[i]!= list2[i]:
            return False
    return True

print(isCircular([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))
print(isCircular([1, 2, 3, 4, 5], [1"
744," Write a NumPy program to create a 4x4 matrix in which 0 and 1 are staggered, with zeros on the main diagonal. ","import numpy as np
x = np.zeros((4, 4))
x[::2, 1::2] = 1
x[1::2, ::2] = 1
print(x)
","import numpy as np

# Create a 4x4 matrix
matrix = np.zeros((4,4))

# Set the main diagonal to 1
matrix[0,0] = 1
matrix[0,1] = 1
matrix[0,2] = 1
matrix[0,3] = 1

# Set the main diagonal to 0
matrix[1,0] = 1
matrix["
745,Write a Python program to convert a given list of integers and a tuple of integers in a list of strings. ,"nums_list = [1,2,3,4]
nums_tuple = (0, 1, 2, 3) 
print(""Original list and tuple:"")
print(nums_list)
print(nums_tuple)
result_list = list(map(str,nums_list))
result_tuple = tuple(map(str,nums_tuple))
print(""\nList of strings:"")
print(result_list)
print(""\nTuple of strings:"")
print(result_tuple)
","def convert_list_to_tuple(list_of_ints):
    tuple_of_ints = tuple(list_of_ints)
    return tuple_of_ints

print(convert_list_to_tuple([1, 2, 3, 4, 5]))

""""""

def convert_list_to_tuple(list_of_ints):
    tuple_of_ints = tuple(list_of_ints)"
746,Write a Python program to retrieve the value of the nested key indicated by the given selector list from a dictionary or list. ,"from functools import reduce 
from operator import getitem
def test(d, selectors):
  return reduce(getitem, selectors, d) 
users = {
  'Carla ': {
    'name': {
      'first': 'Carla ',
      'last': 'Russell' 
    },
    'postIds': [1, 2, 3, 4, 5]
  }
}
print(test(users, ['Carla ', 'name', 'last']))
print(test(users, ['Carla ', 'postIds', 1]))
","def get_value(d, selector):
    for key in d:
        if selector in d[key]:
            return d[key][selector]

print(get_value({'a': {'b': {'c': 'd'}}, 'c': 'd'}, 'b'))

""""""

def get_value(d, selector):
    for key in d:
        if selector in d[key]:
            return"
747,Write a Python program to insert tags or strings immediately after specified tags or strings. ,"from bs4 import BeautifulSoup
soup = BeautifulSoup(""<b>w3resource.com</b>"", ""lxml"")
print(""Original Markup:"")
print(soup.b)
tag = soup.new_tag(""i"")
tag.string = ""Python""
print(""\nNew Markup, after inserting the text:"")
soup.b.string.insert_after(tag)
print(soup.b)
","def insert_tags(s, tags):
    return s.replace(tags, '<{}>'.format(tags))

print(insert_tags('<b>Hello</b>', 'bold'))

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

''"
748,Write a Python program to get all values from an enum class. ,"from enum import IntEnum
class Country(IntEnum):
    Afghanistan = 93
    Albania = 355
    Algeria = 213
    Andorra = 376
    Angola = 244
    Antarctica = 672
country_code_list = list(map(int, Country))
print(country_code_list)
","class Enum(object):
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return self.name

    def __repr__(self):
        return self.name

class Enum(object):
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return self.name

    def __repr__(self):
        return self.name"
749,Write a Python program to create a list of random integers and randomly select multiple items from the said list. Use random.sample(),"import random 
print(""Create a list of random integers:"")
population = range(0, 100)
nums_list = random.sample(population, 10)
print(nums_list)
no_elements = 4
print(""\nRandomly select"",no_elements,""multiple items from the said list:"")
result_elements = random.sample(nums_list, no_elements)
print(result_elements)
no_elements = 8
print(""\nRandomly select"",no_elements,""multiple items from the said list:"")
result_elements = random.sample(nums_list, no_elements)
print(result_elements)
","import random

lst = [random.randint(1, 100) for i in range(10)]
print(lst)

# Solution:

lst = [random.randint(1, 100) for i in range(10)]
print(lst)

# Solution:

lst = [random.randint(1, 100) for i in range(10)]
print(lst)

# Solution:"
750,Write a Python program to find tags by CSS class in a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a class=""sister"" href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
<a class=""sister"" href=""http://example.com/lacie"" id=""link1"">Lacie</a>
<a class=""sister"" href=""http://example.com/tillie""  id=""link2"">Tillie</a>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc,""lxml"")
print(""\nTags by CSS class:"")
print(soup.select("".sister""))
","import re

html = """"""
<html>
<head>
<style>
body {
  background-color: #f0f0f0;
  color: #fff;
  font-family: Verdana, sans-serif;
  font-size: 12px;
  font-weight: bold;
  margin: 0;
  padding: 0;
  border: 1px solid #f0f0f0;
  border-radius: 5px;"
751,Write a Pandas program to create a plot to visualize daily percentage returns of Alphabet Inc. stock price between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Date', 'Adj Close']]
df3 = df2.set_index('Date')
daily_changes = df3.pct_change(periods=1)
daily_changes['Adj Close'].plot(figsize=(10,7),legend=True,linestyle='--',marker='o')
plt.suptitle('Daily % return of Alphabet Inc. stock price,\n01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.grid(True)
plt.show() 
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc_stock_price_data.csv')

df['Date'] = pd.to_datetime(df['Date'])
df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')

df['Date'] = df['Date'].dt.strftime('"
752,Write a Python program to count the most common words in a dictionary. ,"words = [
   'red', 'green', 'black', 'pink', 'black', 'white', 'black', 'eyes',
   'white', 'black', 'orange', 'pink', 'pink', 'red', 'red', 'white', 'orange',
   'white', ""black"", 'pink', 'green', 'green', 'pink', 'green', 'pink',
   'white', 'orange', ""orange"", 'red'
]
from collections import Counter
word_counts = Counter(words)
top_four = word_counts.most_common(4)
print(top_four)
","def count_words(dictionary):
    """"""
    Function to count the most common words in a dictionary.
    """"""
    # Initialize an empty dictionary
    dictionary = {}
    # Iterate through the dictionary
    for word in dictionary:
        # Iterate through the dictionary
        for letter in dictionary[word]:
            # Add the word to the dictionary
            dictionary[word] = dictionary[word] + 1
    # Return the dictionary
    return dictionary

# Driver function
d"
753,Write a NumPy program to get the values and indices of the elements that are bigger than 10 in a given array. ,"import numpy as np
x = np.array([[0, 10, 20], [20, 30, 40]])
print(""Original array: "")
print(x)
print(""Values bigger than 10 ="", x[x>10])
print(""Their indices are "", np.nonzero(x > 10))
","import numpy as np

arr = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])

print(arr[arr > 10])

# Output:
# [20, 30, 40, 50, 60, 70, 80, 90, 100]

# Explanation:
# The array is:
# [10, 20, 30, 40, 50, 60, 70, 80, 90, 100"
754,Write a Python program that prints all the numbers from 0 to 6 except 3 and 6.,"for x in range(6):
    if (x == 3 or x==6):
        continue
    print(x,end=' ')
print(""\n"")
	","""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution"
755,A Python Dictionary contains List as value. Write a Python program to clear the list values in the said dictionary. ,"def test(dictionary):
    for key in dictionary:
        dictionary[key].clear()
    return dictionary

dictionary = { 
               'C1' : [10,20,30], 
               'C2' : [20,30,40],
               'C3' : [12,34]
             }
print(""\nOriginal Dictionary:"")
print(dictionary)
print(""\nClear the list values in the said dictionary:"")
print(test(dictionary)) 
","def clear_list(d):
    for i in d:
        d[i] = []

d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}
clear_list(d)
print(d)

""""""

# Solution:

def clear_list(d):
    for i in d:
        d[i] = []

d ="
756,Write a Python program to find the maximum and minimum values in a given list within specified index range. ,"def reverse_list_of_lists(nums,lr,hr):
    temp = []
    for idx, el in enumerate(nums):
        if idx >= lr and idx < hr:
            temp.append(el)
    result_max = max(temp) 
    result_min = min(temp) 
    return result_max, result_min
nums = [4,3,0,5,3,0,2,3,4,2,4,3,5]
print(""Original list:"")
print(nums)
print(""\nIndex range:"")
lr = 3
hr = 8
print(lr,""to"",hr)
print(""\nMaximum and minimum values of the said given list within index range:"")
print(reverse_list_of_lists(nums,lr,hr))
","def max_min(list):
    max = list[0]
    min = list[0]
    for i in range(1, len(list)):
        if list[i] > max:
            max = list[i]
        if list[i] < min:
            min = list[i]
    return max, min

print(max_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
757,Write a Pandas program to get the positions of items of a given series in another given series. ,"import pandas as pd
series1 = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
series2 = pd.Series([1, 3, 5, 7, 10])
print(""Original Series:"")
print(series1)
print(series2)
result = [pd.Index(series1).get_loc(i) for i in series2]
print(""Positions of items of series2 in series1:"")
print(result)
","import pandas as pd

series = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(series.index)

# Output: Index(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], dtype='int64')

print(series.values)

# Output: [1, 2, 3,"
758,Write a Python program to count the frequency in a given dictionary. ,"from collections import Counter
def test(dictt):    
    result = Counter(dictt.values())
    return result    

dictt = {
 'V': 10,
 'VI': 10,
 'VII': 40,
 'VIII': 20,
 'IX': 70,
 'X': 80,
 'XI': 40,
 'XII': 20, 
 }

print(""\nOriginal Dictionary:"")
print(dictt)
print(""\nCount the frequency of the said dictionary:"")
print(test(dictt))
","def count_frequency(dictionary):
    count = 0
    for i in dictionary:
        count += dictionary[i]
    return count

dictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, '"
759,Write a Python program to insert values to a table from user input. ,"import  sqlite3
conn  =  sqlite3 . connect ( 'mydatabase.db' )
cursor  =  conn.cursor ()
#create the salesman table 
cursor.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")

s_id = input('Salesman ID:')
s_name = input('Name:')
s_city = input('City:')
s_commision = input('Commission:')
cursor.execute(""""""
INSERT INTO salesman(salesman_id, name, city, commission)
VALUES (?,?,?,?)
"""""", (s_id, s_name, s_city, s_commision))
conn.commit ()
print ( 'Data entered successfully.' )
conn . close ()
if (conn):
  conn.close()
  print(""\nThe SQLite connection is closed."")
","def insert_values(table, values):
    for i in range(len(values)):
        table[i] = values[i]
    return table

table = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(insert_values(table, values))

""""""

def insert_values(table, values):
    for"
760,Write a Python program to find the length of the text of the first <h2> tag of a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc, 'html.parser')
print(""Length of the text of the first <h2> tag:"")
print(len(soup.find('h2').text))

","import re

html = """"""
<html>
<head>
<title>The Dormouse's story</title>
</head>
<body>
<p class=""title""><b>The Dormouse's story</b></p>
<p class=""story"">Once upon a time there were three little sisters; and their names were
<a href=""http://example.com/elsie"" class=""sister"" id=""link1"">Els"
761,Write a NumPy program to get the number of nonzero elements in an array. ,"import numpy as np
x = np.array([[0, 10, 20], [20, 30, 40]])
print(""Original array:"")
print(x)
print(""Number of non zero elements in the above array:"")
print(np.count_nonzero(x))
","import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12]])

print(np.count_nonzero(arr))

""""""

# Solution

import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12"
762,Write a Pandas program to replace more than one value with other values in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['A','B', 'C', 'D', 'A'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})

print(""Original DataFrame:"")
print(df)

print(""\nReplace A with c:"")
df = df.replace([""A"", ""D""], [""X"", ""Y""])
print(df)
","import pandas as pd

df = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""B"": [10, 20, 30, 40, 50]})
print(df)

df.replace({""A"": 10, ""B"": 20}, inplace=True)
print(df)

df.replace({""A"": 10, ""B"": 20}, inplace=True, regex=True)
print(df)"
763,Write a NumPy program to compute the eigenvalues and right eigenvectors of a given square array. ,"import numpy as np
m = np.mat(""3 -2;1 0"")
print(""Original matrix:"")
print(""a\n"", m)
w, v = np.linalg.eig(m) 
print( ""Eigenvalues of the said matrix"",w)
print( ""Eigenvectors of the said matrix"",v)
","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

eigenvalues, eigenvectors = np.linalg.eig(A)

print(""Eigenvalues: "", eigenvalues)
print(""Eigenvectors: "", eigenvectors)

""""""

# Solution:

import numpy as np

A = np"
764,Write a Python program to chunk a given list into n smaller lists. ,"from math import ceil

def chunk_list_into_n(nums, n):
  size = ceil(len(nums) / n)
  return list(
    map(lambda x: nums[x * size:x * size + size],
    list(range(n)))
  )
print(chunk_list_into_n([1, 2, 3, 4, 5, 6, 7], 4))  
","def chunk(lst, n):
    return [lst[i:i+n] for i in range(0, len(lst), n)]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 4
print(chunk(lst, n))

""""""

def chunk(lst, n):
    return [lst[i:i+n] for i in range(0, len(lst"
765,Write a NumPy program to add a border (filled with 0's) around an existing array. ,"import numpy as np
x = np.ones((3,3))
print(""Original array:"")
print(x)
print(""0 on the border and 1 inside in the array"")
x = np.pad(x, pad_width=1, mode='constant', constant_values=0)
print(x)
","import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12]])

arr = np.pad(arr, (2, 2), 'constant', constant_values=(0, 0))

arr = np.pad(arr, (2, 2), 'edge')

arr = np.pad(arr, (2, 2), 'edge"
766,Write a Python program to create an array contains six integers. Also print all the members of the array. ,"from array import array
my_array = array('i', [10, 20, 30, 40, 50])
for i in my_array:
    print(i)
","import array

arr = array.array('i', [1, 2, 3, 4, 5, 6])
print(arr)
print(arr[0])
print(arr[-1])
print(arr[-6])

arr = array.array('i', [1, 2, 3, 4, 5, 6])
print(arr)
print(arr[0:6])
print(arr[-1:])
print(arr[-6"
767,Write a Python program to check whether all dictionaries in a list are empty or not. ,"my_list = [{},{},{}]
my_list1 = [{1,2},{},{}]
print(all(not d for d in my_list))
print(all(not d for d in my_list1))
","def is_empty(dictionary):
    if len(dictionary) == 0:
        return True
    else:
        return False

print(is_empty({""a"":1,""b"":2,""c"":3}))

""""""

# Solution 1

def is_empty(dictionary):
    if len(dictionary) == 0:
        return True
    else:
        return False

print(is_empty({""a"":1,""b"":"
768,Write a NumPy program to place a specified element in specified time randomly in a specified 2D array. ,"import numpy as np
n = 4
i = 3
e = 10
array_nums1 = np.zeros((n,n))
print(""Original array:"")
print(array_nums1)
np.put(array_nums1, np.random.choice(range(n*n), i, replace=False), e)
print(""\nPlace a specified element in specified time randomly:"")
print(array_nums1)
","import numpy as np

# Create an array of given shape
arr = np.random.randint(0, 10, size=(3, 4))

# Create a random time
t = np.random.randint(0, 10, size=arr.shape)

# Create a random array of given shape
arr = np.random.randint(0, 10, size=(3, 4))

# Create a random time
t = np.random.rand"
769,"Write a Python program to read a matrix from console and print the sum for each column. Accept matrix rows, columns and elements for each column separated with a space(for every row) as input from the user. ","rows = int(input(""Input rows: ""))
columns = int(input(""Input columns: ""))
matrix = [[0]*columns for row in range(rows)]
print('Input number of elements in a row (1, 2, 3): ')
for row in range(rows):
    lines = list(map(int, input().split()))
    for column in range(columns):
        matrix[row][column] = lines[column]

sum = [0]*columns
print(""sum for each column:"")
for column in range(columns):
    for row in range(rows):
        sum[column] += matrix[row][column]
    print((sum[column]), ' ', end = '')
","def matrix_sum(rows, columns, elements):
    for i in range(rows):
        for j in range(columns):
            print(elements[i][j], end="" "")
        print()

rows = int(input(""Enter the number of rows: ""))
columns = int(input(""Enter the number of columns: ""))
elements"
770,Write a Pandas program to select consecutive columns and also select rows with Index label 0 to 9 with some columns from world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nSelect consecutive columns:"")
print(w_a_con.loc[:,""Country"":""Display Value""].head())
print(""\nAlternate command:"")
print(w_a_con.iloc[:,2:5].head())
print(""\nSelect rows with Index label 0 to 9 with specific columns:"")
print(w_a_con.loc[0:9,[""Year"",""Country"",""Display Value""]])
","import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/dataprofessor/data/master/glassdoor.csv')
df.head()

df.columns

df.index

df.iloc[:,0:3]

df.iloc[:,0:3].columns

df.iloc[:,0:3].columns"
771,rite a Python class named Rectangle constructed by a length and width and a method which will compute the area of a rectangle. ,"class Rectangle():
    def __init__(self, l, w):
        self.length = l
        self.width  = w

    def rectangle_area(self):
        return self.length*self.width

newRectangle = Rectangle(12, 10)
print(newRectangle.rectangle_area())
","class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width
    def area(self):
        return self.length * self.width

rectangle = Rectangle(4, 6)
print(rectangle.area())

""""""

class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width"
772,Write a Pandas program to remove the html tags within the specified column of a given DataFrame. ,"import pandas as pd
import re as re
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],
    'address': ['9910 Surrey <b>Avenue</b>','92 N. Bishop Avenue','9910 <br>Golden Star Avenue', '102 Dunbar <i></i>St.', '17 West Livingston Court']
})
print(""Original DataFrame:"")
print(df)
def remove_tags(string):
    result = re.sub('<.*?>','',string)
    return result
df['with_out_tags']=df['address'].apply(lambda cw : remove_tags(cw))
print(""\nSentences without tags':"")
print(df)
","import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/dataprofessor/data/master/student_scores.csv')

df['Tag'] = df['Name'].str.extract('(\w+)')

df.head()

df.Tag.value_counts()

df.Tag.value_counts().sort_index()

df.Tag.value_counts()."
773,Write a NumPy program to add a vector to each row of a given matrix. ,"import numpy as np
m = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
v = np.array([1, 1, 0])
print(""Original vector:"")
print(v)
print(""Original matrix:"")
print(m)
result = np.empty_like(m) 
for i in range(4):
  result[i, :] = m[i, :] + v
print(""\nAfter adding the vector v to each row of the matrix m:"")
print(result)
","import numpy as np

matrix = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

# Solution:

# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

#"
774,Write a Pandas program to find out the alcohol consumption of a given year from the world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details in the year 1985:"")
print(w_a_con[w_a_con['Year']==1985].head(10))
print(""\nThe world alcohol consumption details in the year 1989:"")
print(w_a_con[w_a_con['Year']==1989].head(10))
","import pandas as pd

df = pd.read_csv('world_alcohol_consumption.csv')

df['year'] = df['year'].astype(int)

df.head()

df.columns = ['year', 'country', 'country_code', 'country_name', 'country_code_name', 'country_name_code', 'country_name_code_name', 'country_name_code_name_code"
775,Write a Python program to compute average of two given lists. ,"def average_two_lists(nums1, nums2):
    result = sum(nums1 + nums2) / len(nums1 + nums2) 
    return result

nums1 = [1, 1, 3, 4, 4, 5, 6, 7]
nums2 = [0, 1, 2, 3, 4, 4, 5, 7, 8]
print(""Original list:"")
print(nums1)
print(nums2)

print(""\nAverage of two lists:"")
print(average_two_lists(nums1, nums2))
","def average(a, b):
    return (a + b)/2

a = [1, 2, 3, 4, 5]
b = [1, 2, 3, 4, 5]

print(average(a, b))

""""""

# Solution:

def average(a, b):
    return (a + b)/2

a = [1, 2, 3, 4, 5]
b = [1, 2, 3, 4, 5]

print(average"
776,"Write a NumPy program to create 24 python datetime.datetime objects (single object for every hour), and then put it in a numpy array. ","import numpy as np
import datetime
start = datetime.datetime(2000, 1, 1)
dt_array = np.array([start + datetime.timedelta(hours=i) for i in range(24)])
print(dt_array)
","import datetime

# Create a datetime object
dt = datetime.datetime(2021, 1, 1, 0, 0, 0)

# Create a numpy array
arr = np.array([dt])

# Print the datetime object
print(dt)

# Print the array
print(arr)

# Create a datetime object
dt = datetime.datetime(2021, 1"
777,Write a Pandas program to import some excel data (coalpublic2013.xlsx ) skipping first twenty rows into a Pandas dataframe. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx', skiprows = 20)
df
","import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')

df.head()

df.tail()

df.shape

df.columns

df.columns = ['Year', 'Coal', 'Coal_Total', 'Coal_Total_Total', 'Coal_Total_Total_Total', 'Coal_Total_Total_Total_"
778,Write a Python program to append the same value /a list multiple times to a list/list-of-lists. ,"print(""Add a value(7), 5 times, to a list:"")
nums = []
nums += 5 * ['7']
print(nums)
nums1 = [1,2,3,4]
print(""\nAdd 5, 6 times, to a list:"")
nums1 += 6 * [5]
print(nums1)
print(""\nAdd a list, 4 times, to a list of lists:"")
nums1 = []
nums1 += 4 * [[1,2,5]]
print(nums1)
print(""\nAdd a list, 4 times, to a list of lists:"")
nums1 = [[5,6,7]]
nums1 += 4 * [[1,2,5]]
print(nums1)
","def append_same_value(list_of_lists):
    for i in range(len(list_of_lists)):
        list_of_lists[i].append(list_of_lists[i][0])
    return list_of_lists

print(append_same_value([[1,2,3],[4,5,6],[7,8,9]]))

""""""

def append_same_value(list_"
779,Write a NumPy program to replace all elements of NumPy array that are greater than specified array. ,"import numpy as np
x = np.array([[ 0.42436315, 0.48558583, 0.32924763], [ 0.7439979,0.58220701,0.38213418], [ 0.5097581,0.34528799,0.1563123 ]])
print(""Original array:"")
print(x)
print(""Replace all elements of the said array with .5 which are greater than .5"")
x[x > .5] = .5
print(x)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr[arr > 3] = 0

arr

arr[arr > 3] = 0

arr

arr[arr > 3] = 0

arr

arr[arr > 3] = 0

arr

arr[arr > 3] = 0

arr

arr[arr > 3] ="
780,Write a Python program to calculate the product of the unique numbers of a given list. ,"def unique_product(list_data):
    temp = list(set(list_data))
    p = 1
    for i in temp:
        p *= i
    return p
nums = [10, 20, 30, 40, 20, 50, 60, 40]
print(""Original List : "",nums)
print(""Product of the unique numbers of the said list: "",unique_product(nums))
","def product(lst):
    return reduce(lambda x, y: x * y, lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(product(lst))

""""""

# Solution:

def product(lst):
    return reduce(lambda x, y: x * y, lst)

lst = [1, 2, 3, 4, 5, 6, 7,"
781,Write a Pandas program to create a heatmap (rectangular data as a color-encoded matrix) for comparison of the top 10 years in which the UFO was sighted vs each Month. ,"import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
#Source: https://bit.ly/1l9yjm9
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
most_sightings_years = df['Date_time'].dt.year.value_counts().head(10)
def is_top_years(year):
   if year in most_sightings_years.index:
       return year
month_vs_year = df.pivot_table(columns=df['Date_time'].dt.month,index=df['Date_time'].dt.year.apply(is_top_years),aggfunc='count',values='city')
month_vs_year.columns = month_vs_year.columns.astype(int)
print(""\nHeatmap for comparison of the top 10 years in which the UFO was sighted vs each month:"")
plt.figure(figsize=(10,8))
ax = sns.heatmap(month_vs_year, vmin=0, vmax=4)
ax.set_xlabel('Month').set_size(20)
ax.set_ylabel('Year').set_size(20)
","import pandas as pd
import matplotlib.pyplot as plt

# Read the data
df = pd.read_csv('https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv"
782,Write a Python program to remove existing indentation from all of the lines in a given text. ,"import textwrap
sample_text = '''
    Python is a widely used high-level, general-purpose, interpreted,
    dynamic programming language. Its design philosophy emphasizes
    code readability, and its syntax allows programmers to express
    concepts in fewer lines of code than possible in languages such
    as C++ or Java.
    '''
text_without_Indentation = textwrap.dedent(sample_text)
print()
print(text_without_Indentation )
print()
","import re

text = '''
This is a multi-line string.

This is also a multi-line string.

This is also a multi-line string.

'''

# Solution:
# Solution 1:
# text = re.sub('\n','', text)
# print(text)

# Solution 2:
# text = re.sub('\n','', text, 0, re.MULTILINE)
# print("
783,Write a Pandas program to import given excel data (employee.xlsx ) into a Pandas dataframe and sort based on multiple given columns. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx')
result = df.sort_values(by=['first_name','last_name'],ascending=[0,1])
result
","import pandas as pd

# Read the data into a dataframe
df = pd.read_excel('employee.xlsx', sheet_name='Sheet1')

# Sort the dataframe based on multiple columns
df = df.sort_values(['Name', 'Age', 'Job'])

# Print the dataframe
print(df)

# Create a Pandas Excel writer using X"
784,Write a Pandas program to start index with different value rather than 0 in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 37, 33, 30, 31, 32]})
     
print(""Original DataFrame:"")
print(df)
print(""\nDefault Index Range:"")
print(df.index)
df.index += 10 
print(""\nNew Index Range:"")
print(df.index)
print(""\nDataFrame with new index:"")
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Score': [60, 70, 65, 60, 70, 90]})

# Solution 1
df.loc[df['Name'] == 'Rolf', 'Score'] = 100

# Solution 2
df.loc[df['Name'] == 'Charlie', 'Score'] = 100"
785,"Write a Pandas program to create a bar plot of opening, closing stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-4-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Date', 'Open', 'Close']]
df3 = df2.set_index('Date')
plt.figure(figsize=(20,20))
df3.plot(kind='bar');
plt.suptitle('Opening/Closing stock prices Alphabet Inc.,\n01-04-2020 to 30-04-2020', fontsize=12, color='black')
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])

df.set_index('Date', inplace=True)

plt.bar(df.index, df['Open'])

plt.show()

""""""

import pandas as p"
786,Write a Pandas program to create a Pivot table and calculate how many women and men were in a particular cabin class. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table(index=['sex'], columns=['pclass'], values='survived', aggfunc='count')
print(result)
","import pandas as pd

df = pd.read_csv(""C:\\Users\\DELL\\Desktop\\Python\\Data_Visualization\\cabin_class.csv"")

df.head()

df.columns

df.columns = ['Cabin Class', 'Count']

df.head()

df.head(5)

df.head(5).Count

df.head(5).Cabin Class"
787,Write a Python program to find the maximum and minimum values in a given heterogeneous list. ,"def max_min_val(list_val):
     max_val = max(i for i in list_val if isinstance(i, int)) 
     min_val = min(i for i in list_val if isinstance(i, int))
     return(max_val, min_val)

list_val = ['Python', 3, 2, 4, 5, 'version'] 
print(""Original list:"")
print(list_val)
print(""\nMaximum and Minimum values in the said list:"")
print(max_min_val(list_val))
","def max_min(lst):
    max = lst[0]
    min = lst[0]
    for i in lst:
        if i > max:
            max = i
        if i < min:
            min = i
    return max, min

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_min(lst))

""""""

# Solution 1"
788,Write a Pandas program to split a given dataset using group by on specified column into two labels and ranges. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'salesman_id': [5001,5002,5003,5004,5005,5006,5007,5008,5009,5010,5011,5012],
'sale_jan':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 1760, 2983.43, 480.4,  1250.45, 75.29,1045.6]})
print(""Original Orders DataFrame:"")
print(df)
result = df.groupby(pd.cut(df['salesman_id'], 
                  bins=[0,5006,np.inf],  
                  labels=['S1', 'S2']))['sale_jan'].sum().reset_index()
print(""\nGroupBy with condition of  two labels and ranges:"")
print(result)
","import pandas as pd

# Read the data
df = pd.read_csv(""data/pima-indians-diabetes.csv"")

# Split the data into two labels
y = df[""Outcome""]
x = df.drop(""Outcome"", axis=1)

# Split the data into two ranges
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size"
789,Write a Python program to find common elements in a given list of lists. ,"def common_list_of_lists(lst):
    temp = set(lst[0]).intersection(*lst)
    return list(temp) 

nums = [[7,2,3,4,7],[9,2,3,2,5],[8,2,3,4,4]]
print(""Original list:"")
print(nums)
print(""\nCommon elements of the said list of lists:"")
print(common_list_of_lists(nums))
chars = [['a','b','c'],['b','c','d'],['c','d','e']]
print(""\nOriginal list:"")
print(chars)
print(""\nCommon elements of the said list of lists:"")
print(common_list_of_lists(chars))
","def common_elements(l1, l2):
    l1 = list(set(l1))
    l2 = list(set(l2))
    common = []
    for i in l1:
        for j in l2:
            if i == j:
                common.append(i)
    return common

l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
l2 = [1, 2, 3"
790,Write a Python program to check whether a list contains a sublist. ,"def is_Sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False

	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1
				
				if n == len(s):
					sub_set = True

	return sub_set

a = [2,4,3,5,7]
b = [4,3]
c = [3,7]
print(is_Sublist(a, b))
print(is_Sublist(a, c))
","def contains_sublist(lst, sublist):
    for i in range(len(lst)):
        if lst[i] in sublist:
            return True
    return False

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
sublist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(contains_sublist(lst, sublist))"
791,Write a Python program to count the number of each character of a given text of a text file. ,"import collections
import pprint
file_input = input('File Name: ')
with open(file_input, 'r') as info:
  count = collections.Counter(info.read().upper())
  value = pprint.pformat(count)
print(value)
","import os

def count_char(filename):
    count = 0
    with open(filename, 'r') as f:
        for line in f:
            count += len(line)
    return count

print(count_char('text.txt'))

""""""

# Solution 1

def count_char(filename):
    count = 0
    with open(filename, 'r') as f:
        for line in f:
            count +="
792,Write a NumPy program to concatenate two 2-dimensional arrays. ,"import numpy as np
a = np.array([[0, 1, 3], [5, 7, 9]])
b = np.array([[0, 2, 4], [6, 8, 10]])
c = np.concatenate((a, b), 1)
print(c)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

c = np.concatenate((a, b), axis=0)
print(c)

d = np.concatenate((a, b), axis=1)
print(d)

e = np.concatenate((a, b"
793,Write a Python program to remove None value from a given list using lambda function. ,"def remove_none(nums):
    result = filter(lambda v: v is not None, nums)
    return list(result)

nums = [12, 0, None, 23, None, -55, 234, 89, None, 0, 6, -12]
print(""Original list:"")
print(nums)
print(""\nRemove None value from the said list:"")
print(remove_none(nums))
","def remove_none(lst):
    for i in lst:
        if i is None:
            lst.remove(i)
    return lst

lst = [1, 2, 3, None, None, 4, 5, 6, 7, 8, 9, 10]
print(remove_none(lst))

""""""

# Solution:

def remove_none(lst):
    for i in lst:
        if i is None:"
794,Write a Python program to configure the rounding to round up and round down a given decimal value. Use decimal.Decimal,"import decimal
print(""Configure the rounding to round up:"")
decimal.getcontext().prec = 1
decimal.getcontext().rounding = decimal.ROUND_UP
print(decimal.Decimal(30) / decimal.Decimal(4))
print(""\nConfigure the rounding to round down:"")
decimal.getcontext().prec = 3
decimal.getcontext().rounding = decimal.ROUND_DOWN
print(decimal.Decimal(30) / decimal.Decimal(4))
print(""\nConfigure the rounding to round up:"")
print(decimal.Decimal('8.325').quantize(decimal.Decimal('.01'), rounding=decimal.ROUND_UP))
print(""\nConfigure the rounding to round down:"")
print(decimal.Decimal('8.325').quantize(decimal.Decimal('.01'), rounding=decimal.ROUND_DOWN))
","import decimal

def rounding(decimal_value):
    if decimal_value < 0:
        decimal_value = -decimal_value
    return decimal.Decimal(str(decimal_value)).quantize(decimal.Decimal('0.00'))

print(rounding(3.141592653589793))
print(rounding(-3.141592653589793))
print(rounding(3.14159265"
795,Write a Python program to find the highest 3 values of corresponding keys in a dictionary. ,"from heapq import nlargest
my_dict = {'a':500, 'b':5874, 'c': 560,'d':400, 'e':5874, 'f': 20}  
three_largest = nlargest(3, my_dict, key=my_dict.get)
print(three_largest) 
","def highest_3_values(d):
    for key in d:
        if d[key] > 3:
            print(key, d[key])

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
highest_3_values(d)

""""""

def highest_3_values(d):
    for key in d:
        if d[key] > 3:
            print(key, d[key"
796,Write a Pandas program to convert a NumPy array to a Pandas series. ,"import numpy as np
import pandas as pd
np_array = np.array([10, 20, 30, 40, 50])
print(""NumPy array:"")
print(np_array)
new_series = pd.Series(np_array)
print(""Converted Pandas series:"")
print(new_series)
","import numpy as np
import pandas as pd

# Create a NumPy array
arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Create a Pandas series
series = pd.Series(arr)

# Print the array
print(arr)

# Print the series
print(series)

# Convert the array to a Pandas series
series = pd.Series(arr,"
797,"Write a NumPy program to get the number of items, array dimensions, number of array dimensions and the memory size of each element of a given array. ","import numpy as np
array_nums = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(""Original array:"")
print(array_nums)
print(""\nNumber of items of the said array:"")
print(array_nums.size) 
print(""\nArray dimensions:"")
print(array_nums.shape)
print(""\nNumber of array dimensions:"")
print(array_nums.ndim)
print(""\nMemory size of each element of the said array"")
print(array_nums.itemsize)
","import numpy as np

arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(arr.shape)
print(arr.ndim)
print(arr.size)
print(arr.itemsize)

# Solution:

# arr = np.array([[1, 2, 3, 4], [5"
798,Write a Python program to drop empty Items from a given Dictionary. ,"dict1 = {'c1': 'Red', 'c2': 'Green', 'c3':None}
print(""Original Dictionary:"")
print(dict1)
print(""New Dictionary after dropping empty items:"")
dict1 = {key:value for (key, value) in dict1.items() if value is not None}
print(dict1)
","def drop_empty(d):
    for i in d:
        if d[i] == []:
            del d[i]
    return d

d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}
print(drop_empty(d))

""""""

def drop_empty(d):
    for i in d:
        if d[i] == []:
            del d[i"
799,Write a Pandas program to stack two given series vertically and horizontally. ,"import pandas as pd
series1 = pd.Series(range(10))
series2 = pd.Series(list('pqrstuvwxy'))
print(""Original Series:"")
print(series1)
print(series2)
series1.append(series2)
df = pd.concat([series1, series2], axis=1)
print(""\nStack two given series vertically and horizontally:"")
print(df)
","Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], index=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])

Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], index=['a', 'b', 'c"
800,Write a NumPy program to create an array which looks like below array. ,"import numpy as np
x = np.triu(np.arange(2, 14).reshape(4, 3), -1)
print(x)
","arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr = np.array([[1, 2, 3], [4, 5, 6], [7"
801,Write a NumPy program to find common values between two arrays. ,"import numpy as np
array1 = np.array([0, 10, 20, 40, 60])
print(""Array1: "",array1)
array2 = [10, 30, 40]
print(""Array2: "",array2)
print(""Common values between two arrays:"")
print(np.intersect1d(array1, array2))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([2, 4, 6, 8, 10])

print(np.intersect1d(a, b))

# Output:
# [1, 2, 3, 4, 5]
# [2, 4, 6, 8, 10]

# Hint:
# Use np.intersect1d() to find the common values between two arrays.
# Use"
802,Write a Pandas program to extract only number from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],
    'address': ['7277 Surrey Ave.','920 N. Bishop Ave.','9910 Golden Star St.', '25 Dunbar St.', '17 West Livingston Court']
    })
print(""Original DataFrame:"")
print(df)
def find_number(text):
    num = re.findall(r'[0-9]+',text)
    return "" "".join(num)
df['number']=df['address'].apply(lambda x: find_number(x))
print(""\Extracting numbers from dataframe columns:"")
print(df)
","import pandas as pd

# Read the data from the file
df = pd.read_csv(""data.csv"")

# Extract the number from the column ""Number""
print(df[""Number""].head(1))

# Extract the number from the column ""Number""
print(df[""Number""].head(1).values)

# Extract the number from the column ""Number""
print(df[""Number""].head(1).values[0])"
803,Write a Python program to download and display the content of robot.txt for en.wikipedia.org. ,"import requests
response = requests.get(""https://en.wikipedia.org/robots.txt"")
test = response.text
print(""robots.txt for http://www.wikipedia.org/"")
print(""==================================================="")
print(test)
","import urllib.request

url = ""https://www.en.wikipedia.org/wiki/Robot_%28s_%28s%29""

with urllib.request.urlopen(url) as response:
    data = response.read()
    print(data.decode(""utf-8""))

""""""

import urllib.request
import urllib.parse
import urllib.error

url = ""https://"
804,Write a Python program to calculate the discriminant value. ,"def discriminant():
    x_value = float(input('The x value: '))
    y_value = float(input('The y value: '))
    z_value = float(input('The z value: '))
    discriminant = (y_value**2) - (4*x_value*z_value)
    if discriminant > 0:
        print('Two Solutions. Discriminant value is:', discriminant)
    elif discriminant == 0:
        print('One Solution. Discriminant value is:', discriminant)
    elif discriminant < 0:
        print('No Real Solutions. Discriminant value is:', discriminant)


discriminant()
","def discriminant(a,b,c):
    return (b**2)-(4*a*c)

a = float(input(""Enter the value of a: ""))
b = float(input(""Enter the value of b: ""))
c = float(input(""Enter the value of c: ""))

print(""The discriminant is: "", discriminant(a,b,c))

""""""

# Solution:

def discriminant(a,b,c):
    return (b**"
805,Write a Python program to compute the sum of non-zero groups (separated by zeros) of a given list of numbers. ,"def test(lst):
    result = []
    ele_val = 0
    for digit in lst:
        if digit == 0:
            if ele_val != 0:
                result.append(ele_val)
                ele_val = 0
        else:
            ele_val += digit 
    if ele_val>0:
        result.append(ele_val) 
    return result
nums = [3,4,6,2,0,0,0,0,0,0,6,7,6,9,10,0,0,0,0,0,7,4,4,0,0,0,0,0,0,5,3,2,9,7,1,0,0,0]
print(""\nOriginal list:"")
print(nums)
print(""\nCompute the sum of non-zero groups (separated by zeros) of the said list of numbers:"")
print(test(nums))
","def sum_of_groups(nums):
    sum = 0
    for i in range(len(nums)):
        if nums[i]!= 0:
            sum += nums[i]
    return sum

print(sum_of_groups([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def sum_of_groups(nums):"
806,Write a Python program to generate all permutations of a list in Python. ,"import itertools
print(list(itertools.permutations([1,2,3])))
","import itertools

def permutations(lst):
    if len(lst) == 1:
        return [lst]
    else:
        return list(itertools.permutations(lst))

print(permutations([1,2,3]))
print(permutations([1,2,3,4]))
print(permutations([1,2,3,4,5]))
print(permutations([1,2,3,4,5,"
807,Write a Python program to sort unsorted strings using natural sort. ,"#Ref.https://bit.ly/3a657IZ
from __future__ import annotations
import re
def natural_sort(input_list: list[str]) -> list[str]:
    def alphanum_key(key):
        return [int(s) if s.isdigit() else s.lower() for s in re.split(""([0-9]+)"", key)]
    return sorted(input_list, key=alphanum_key)
strs = ['2 ft 7 in', '1 ft 5 in', '10 ft 2 in', '2 ft 11 in', '7 ft 6 in']
print(""\nOriginal list:"")
print(strs)
natural_sort(strs)
print(""Sorted order is:"", strs)
strs =  ['1 ft 5 in', '10 ft 2 in', '2 ft 11 in', '2 ft 7 in', '7 ft 6 in']
print(""\nOriginal list:"")
print(strs)
natural_sort(strs)
print(""Sorted order is:"", strs)
strs =  ['Elm11', 'Elm12', 'Elm2', 'elm0', 'elm1', 'elm10', 'elm13', 'elm9']
print(""\nOriginal list:"")
print(strs)
natural_sort(strs)
print(""Sorted order is:"", strs)
strs =   ['Elm11', 'Elm12', 'Elm2', 'elm0', 'elm1', 'elm10', 'elm13', 'elm9']
print(""\nOriginal list:"")
print(strs)
natural_sort(strs)
print(""Sorted order is:"", strs) 
","def sort_unsorted_strings(unsorted_strings):
    # your code goes here
    return unsorted_strings

""""""

def sort_unsorted_strings(unsorted_strings):
    # your code goes here
    return unsorted_strings

""""""

def sort_unsorted_strings(unsorted_strings):
    # your code goes here
    return unsorted_strings

""""""

def sort_unsorted_strings(unsorted_strings):
    # your code"
808,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight the maximum value in each column. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
def highlight_max(s):
    '''
    highlight the maximum in a Series green.
    '''
    is_max = s == s.max()
    return ['background-color: green' if v else '' for v in is_max]

print(""\nHighlight the maximum value in each column:"")
df.style.apply(highlight_max,subset=pd.IndexSlice[:, ['B', 'C', 'D', 'E']])
","import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randint(0, 100, size=(10, 4)), columns=['col1', 'col2', 'col3', 'col4'])
print(df)

df.max()

df.max(axis=1)

df.max(axis=1).max()

df.max(axis="
809,Write a Python program to find whether a given array of integers contains any duplicate element. Return true if any value appears at least twice in the said array and return false if every element is distinct. ,"def test_duplicate(array_nums):
    nums_set = set(array_nums)    
    return len(array_nums) != len(nums_set)     
print(test_duplicate([1,2,3,4,5]))
print(test_duplicate([1,2,3,4, 4]))
print(test_duplicate([1,1,2,2,3,3,4,4,5]))
","def duplicate_element(arr):
    for i in range(len(arr)):
        if arr[i] == arr[i]:
            return True
    return False

arr = [1,2,3,1,2,3,4,3,2,4,5,6,7,8,9,9,9,9,9,9,9,9,"
810,Write a NumPy program to create a white image of size 512x256. ,"from PIL import Image
import numpy as np

a = np.full((512, 256, 3), 255, dtype=np.uint8)
image = Image.fromarray(a, ""RGB"")
image.save(""white.png"", ""PNG"")
","import numpy as np

# Create a black image of size 512x256
img = np.zeros((512, 256))

# Create a white image of size 512x256
img = np.ones((512, 256))

# Create a black image of size 512x256
img = np.full((512, 256), 255)

# Create a white image of size 512x256
img = np.full((512, 256), 255)

# Create a black image of size"
811,Write a Python program to find the maximum and minimum values in a given list of tuples. ,"from operator import itemgetter

def max_min_list_tuples(class_students):
    return_max = max(class_students,key=itemgetter(1))[1] 
    return_min = min(class_students,key=itemgetter(1))[1] 
    return return_max, return_min
   
class_students = [('V', 60), ('VI', 70), ('VII', 75), ('VIII', 72), ('IX', 78), ('X', 70)]
print(""Original list with tuples:"")
print(class_students)
print(""\nMaximum and minimum values of the said list of tuples:"")
print(max_min_list_tuples(class_students))
","def max_min(tup):
    return tup[0] if tup[0] > tup[1] else tup[1]

tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print(max_min(tup1))

tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print(max_min(tup"
812,Write a Python program to find the items starts with specific character from a given list. ,"def test(lst, char):
    result = [i for i in lst if i.startswith(char)]
    return result
text = [""abcd"", ""abc"", ""bcd"", ""bkie"", ""cder"", ""cdsw"", ""sdfsd"", ""dagfa"", ""acjd""]
print(""\nOriginal list:"")
print(text)
char = ""a""
print(""\nItems start with"",char,""from the said list:"")
print(test(text, char))
char = ""d""
print(""\nItems start with"",char,""from the said list:"")
print(test(text, char))
char = ""w""
print(""\nItems start with"",char,""from the said list:"")
print(test(text, char))
","def solution(s):
    return [i for i in s if i[0] == 'a']

""""""

def solution(s):
    return [i for i in s if i[0] == 'a']

print(solution([""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", """
813,Write a Python program to split a given list into two parts where the length of the first part of the list is given. ,"def split_two_parts(n_list, L):
    return n_list[:L], n_list[L:]
n_list = [1,1,2,3,4,4,5, 1]
print(""Original list:"") 
print(n_list)
first_list_length = 3
print(""\nLength of the first part of the list:"",first_list_length)
print(""\nSplited the said list into two parts:"")
print(split_two_parts(n_list, first_list_length))

","def split_list(lst):
    first_part = lst[:len(lst)//2]
    second_part = lst[len(lst)//2:]
    return first_part, second_part

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(split_list(lst))

""""""

def split_list(lst):"
814,Write a Python program to check the sum of three elements (each from an array) from three arrays is equal to a target value. Print all those three-element combinations. ,"import itertools
from functools import partial
X = [10, 20, 20, 20]
Y = [10, 20, 30, 40]
Z = [10, 30, 40, 20]
T = 70

def check_sum_array(N, *nums):
  if sum(x for x in nums) == N:
    return (True, nums)
  else:
      return (False, nums)
pro = itertools.product(X,Y,Z)
func = partial(check_sum_array, T)
sums = list(itertools.starmap(func, pro))

result = set()
for s in sums:
    if s[0] == True and s[1] not in result:
      result.add(s[1])
      print(result)
","def threeSum(nums):
    nums.sort()
    result = []
    for i in range(len(nums)):
        if i > 0 and nums[i] == nums[i-1]:
            continue
        left, right = i+1, len(nums)-1
        while left < right:
            if nums[i] + nums[left]"
815,Write a Python program to construct an infinite iterator that returns evenly spaced values starting with a specified number and step. ,"import itertools as it
start = 10
step = 1
print(""The starting number is "", start, ""and step is "",step)
my_counter = it.count(start, step)
# Following  loop will run for ever
print(""The said function print never-ending items:"")
for i in my_counter:    
    print(i)
","def iter_range(start, stop, step):
    while start < stop:
        yield start
        start += step

print(list(iter_range(1, 10, 2)))

""""""

def iter_range(start, stop, step):
    while start < stop:
        yield start
        start += step

print(list(iter_range(1, 10, 2)))

""""""

def iter_range(start,"
816,Write a NumPy program to create an array of equal shape and data type of a given array. ,"import numpy as np  
nums = np.array([[5.54, 3.38, 7.99],
              [3.54, 8.32, 6.99],
              [1.54, 2.39, 9.29]])
print(""Original array:"")
print(nums)
print(""\nNew array of equal shape and data type of the said array filled by 0:"")
print(np.zeros_like(nums))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], dtype=np.int64)

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], dtype=np.float64)"
817,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to display the dataframe in table style and border around the table and not around the rows. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
print(""\nDataframe - table style and border around the table and not around the rows:"")
df.style.set_table_styles([{'selector':'','props':[('border','4px solid #7a7')]}])
","import pandas as pd

df = pd.DataFrame(
    {
        ""First column"": [""Rolf"", ""Charlie"", ""Anna"", ""Bob"", ""Jen"", ""Sue"", ""Anne"", ""Brad""],
        ""Second column"": [1, 2, 3, 4, 5, 6, 7, 8],
        ""Third column"": [10, 20, 30, 40,"
818,rite a Python program which accepts a sequence of comma separated 4 digit binary numbers as its input and print the numbers that are divisible by 5 in a comma separated sequence. ,"items = []
num = [x for x in input().split(',')]
for p in num:
    x = int(p, 2)
    if not x%5:
        items.append(p)
print(','.join(items))
","def solution(numbers):
    answer = []
    for i in numbers:
        if int(i, 2) % 5 == 0:
            answer.append(i)
    return answer

print(solution([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
819,Write a Python program to compute the sum of digits of each number of a given list. ,"def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())

nums = [10,2,56]
print(""Original tuple: "") 
print(nums)
print(""Sum of digits of each number of the said list of integers:"")
print(sum_of_digits(nums))

nums = [10,20,4,5,'b',70,'a']
print(""\nOriginal tuple: "") 
print(nums)
print(""Sum of digits of each number of the said list of integers:"")
print(sum_of_digits(nums))

nums = [10,20,-4,5,-70]
print(""\nOriginal tuple: "") 
print(nums)
print(""Sum of digits of each number of the said list of integers:"")
print(sum_of_digits(nums))
","def sum_digits(nums):
    sum = 0
    for i in nums:
        sum += i
    return sum

print(sum_digits([1, 2, 3, 4, 5]))

""""""

def sum_digits(nums):
    sum = 0
    for i in nums:
        sum += i
    return sum

print(sum_digits([1, 2, 3, 4, 5]))"
820,Write a Pandas program to print the day after and before a specified date. Also print the days between two given dates. ,"import pandas as pd
import datetime
from datetime import datetime, date
today = datetime(2012, 10, 30)
print(""Current date:"", today)
tomorrow = today + pd.Timedelta(days=1)
print(""Tomorrow:"", tomorrow)
yesterday = today - pd.Timedelta(days=1)
print(""Yesterday:"", yesterday)
date1 = datetime(2016, 8, 2)
date2 = datetime(2016, 7, 19)
print(""\nDifference between two dates: "",(date1 - date2))
","import datetime

def get_day_after(date):
    return date.day

def get_day_before(date):
    return date.day - 1

def get_days_between(date1, date2):
    return (date2 - date1).days

def main():
    date1 = datetime.date(2021, 1, 1)
    date2 = datetime.date(2021, 1,"
821,Write a Pandas program to extract date (format: mm-dd-yyyy) from a given column of a given DataFrame. ,"import pandas as pd
import re as re
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})
print(""Original DataFrame:"")
print(df)
def find_valid_dates(dt):
    #format: mm-dd-yyyy
    result = re.findall(r'\b(1[0-2]|0[1-9])/(3[01]|[12][0-9]|0[1-9])/([0-9]{4})\b',dt)
    return result
df['valid_dates']=df['date_of_sale'].apply(lambda dt : find_valid_dates(dt))
print(""\nValid dates (format: mm-dd-yyyy):"")
print(df)
","import pandas as pd
import datetime

df = pd.read_csv('https://github.com/datasets/csv/blob/master/data/airline.csv?raw=true')

df['Date'] = pd.to_datetime(df['Date'])
df['Date'] = df['Date'].dt.strftime('%m-%d-%Y')

print(df"
822,Write a Python program to sort a list of elements using the quick sort algorithm. ,"def quickSort(data_list):
   quickSortHlp(data_list,0,len(data_list)-1)

def quickSortHlp(data_list,first,last):
   if first < last:

       splitpoint = partition(data_list,first,last)

       quickSortHlp(data_list,first,splitpoint-1)
       quickSortHlp(data_list,splitpoint+1,last)


def partition(data_list,first,last):
   pivotvalue = data_list[first]

   leftmark = first+1
   rightmark = last

   done = False
   while not done:

       while leftmark <= rightmark and data_list[leftmark] <= pivotvalue:
           leftmark = leftmark + 1

       while data_list[rightmark] >= pivotvalue and rightmark >= leftmark:
           rightmark = rightmark -1

       if rightmark < leftmark:
           done = True
       else:
           temp = data_list[leftmark]
           data_list[leftmark] = data_list[rightmark]
           data_list[rightmark] = temp

   temp = data_list[first]
   data_list[first] = data_list[rightmark]
   data_list[rightmark] = temp


   return rightmark

data_list = [54,26,93,17,77,31,44,55,20]
quickSort(data_list)
print(data_list)
","def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[0]
    less = [i for i in arr[1:] if i <= pivot]
    greater = [i for i in arr[1:] if i > pivot]
    return quick_sort(less) + [pivot] + quick_sort(greater)

arr = [6, 5, 4, 8, 2, 1, 7, 3, 9"
823,"Write a Python program to check if a given list is strictly increasing or not. Moreover, If removing only one element from the list results in a strictly increasing list, we still consider the list true. ","# Source: https://bit.ly/3qZqcwm
def almost_increasing_sequence(sequence):
    if len(sequence) < 3:
        return True

    a, b, *sequence = sequence
    skipped = 0
    for c in sequence:
        if a < b < c:  # XXX
            a, b = b, c
            continue
        elif b < c:    # !XX
            a, b = b, c
        elif a < c:    # X!X
            a, b = a, c
        skipped += 1
        if skipped == 2:
            return False
    return a < b

print(almost_increasing_sequence([]))
print(almost_increasing_sequence([1]))
print(almost_increasing_sequence([1, 2]))
print(almost_increasing_sequence([1, 2, 3]))
print(almost_increasing_sequence([3, 1, 2]))
print(almost_increasing_sequence([1, 2, 3, 0, 4, 5, 6]))
print(almost_increasing_sequence([1, 2, 3, 0]))
print(almost_increasing_sequence([1, 2, 0, 3]))
print(almost_increasing_sequence([10, 1, 2, 3, 4, 5]))
print(almost_increasing_sequence([1, 2, 10, 3, 4]))
print(almost_increasing_sequence([1, 2, 3, 12, 4, 5]))

print(almost_increasing_sequence([3, 2, 1]))
print(almost_increasing_sequence([1, 2, 0, -1]))
print(almost_increasing_sequence([5, 6, 1, 2]))
print(almost_increasing_sequence([1, 2, 3, 0, -1]))
print(almost_increasing_sequence([10, 11, 12, 2, 3, 4, 5]))
","def is_increasing(lst):
    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    return True

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(is_increasing(lst))

"""""""
824,"Write a Python program to generate a random color hex, a random alphabetical string, random value between two integers (inclusive) and a random multiple of 7 between 0 and 70. Use random.randint()","import random
import string
print(""Generate a random color hex:"")
print(""#{:06x}"".format(random.randint(0, 0xFFFFFF)))
print(""\nGenerate a random alphabetical string:"")
max_length = 255
s = """"
for i in range(random.randint(1, max_length)):
    s += random.choice(string.ascii_letters)
print(s)
print(""Generate a random value between two integers, inclusive:"")
print(random.randint(0, 10))
print(random.randint(-7, 7))
print(random.randint(1, 1))
print(""Generate a random multiple of 7 between 0 and 70:"")
print(random.randint(0, 10) * 7)
","import random

def random_color():
    return ""#%06x"" % random.randint(0x00ff00, 0xffffff)

def random_alphabet():
    return chr(random.randint(97, 122))

def random_value():
    return random.randint(0, 70)

def random_multiple():"
825,Write a Python class which has two methods get_String and print_String. get_String accept a string from the user and print_String print the string in upper case. ,"class IOString():
    def __init__(self):
        self.str1 = """"

    def get_String(self):
        self.str1 = input()

    def print_String(self):
        print(self.str1.upper())

str1 = IOString()
str1.get_String()
str1.print_String()
","class MyClass:
    def get_String(self, string):
        for i in string:
            print(i.upper())

    def print_String(self, string):
        for i in string:
            print(i.upper())

obj = MyClass()
obj.get_String(""Hello"")
obj.print_String(""Hello"")

""""""

class MyClass:"
826,Write a Python program to get the Fibonacci series between 0 to 50. ,"x,y=0,1

while y<50:
    print(y)
    x,y = y,x+y
	","def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

print(fib(50))

""""""

# Solution

def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n"
827,Write a Python program to convert a given dictionary into a list of lists. ,"def test(dictt):
    result = list(map(list, dictt.items()))
    return result    

color_dict = {1 : 'red', 2 : 'green', 3 : 'black', 4 : 'white', 5 : 'black'}
print(""\nOriginal Dictionary:"")
print(color_dict)
print(""Convert the said dictionary into a list of lists:"")
print(test(color_dict))

color_dict = {'1' : 'Austin Little', '2' : 'Natasha Howard', '3' : 'Alfred Mullins', '4' : 'Jamie Rowe'}
print(""\nOriginal Dictionary:"")
print(color_dict)
print(""Convert the said dictionary into a list of lists:"")
print(test(color_dict))
","d = {'a': 1, 'b': 2, 'c': 3}

l = []

for i in d:
    l.append(d[i])

print(l)

# Output: [1, 2, 3]

# Solution:

d = {'a': 1, 'b': 2, 'c': 3}

l = []

for i in d:
    l.append(d[i])

print(l)"
828,"Write a NumPy program to create two arrays with shape (300,400, 5), fill values using unsigned integer (0 to 255). Insert a new axis that will appear at the beginning in the expanded array shape. Now combine the said two arrays into one. ","import numpy as np 
nums1 = np.random.randint(low=0, high=256, size=(200, 300, 3), dtype=np.uint8)
nums2 = np.random.randint(low=0, high=256, size=(200, 300, 3), dtype=np.uint8)
print(""Array1:"") 
print(nums1) 
print(""\nArray2:"") 
print(nums2) 
nums1 = np.expand_dims(nums1, axis=0)
nums2 = np.expand_dims(nums2, axis=0)
nums = np.append(nums1, nums2, axis=0)
print(""\nCombined array:"")
print(nums)
","import numpy as np

a = np.arange(300).reshape(300,400,5)
b = np.arange(400).reshape(300,400,5)

a[:,:,0] = 255
a[:,:,1] = 255
a[:,:,2] = 255
a"
829,Write a Pandas program to create a Pivot table and find the minimum sale value of the items. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df, index='Item', values='Sale_amt', aggfunc=np.min)
print(table)
","pivot_table(df, columns=['Item_Name'], values='Sale_Price')

""""""

# Solution 1

import pandas as pd
import numpy as np

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pivot_table.csv?raw=true')

# Create a pivot table
df.pivot_table(values='Sale_Price"
830,Write a Python program to print all unique values in a dictionary. ,"L = [{""V"":""S001""}, {""V"": ""S002""}, {""VI"": ""S001""}, {""VI"": ""S005""}, {""VII"":""S005""}, {""V"":""S009""},{""VIII"":""S007""}]
print(""Original List: "",L)
u_value = set( val for dic in L for val in dic.values())
print(""Unique Values: "",u_value)
","def unique_values(d):
    for key in d:
        if d[key] == 1:
            print(key)

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
unique_values(d)

""""""

def unique_values(d):
    for key in d:
        if d[key] == 1:
            print(key)

d = {'a': 1, 'b"
831,Write a Python program to remove key values pairs from a list of dictionaries. ,"original_list = [{'key1':'value1', 'key2':'value2'}, {'key1':'value3', 'key2':'value4'}]
print(""Original List: "")
print(original_list)
new_list = [{k: v for k, v in d.items() if k != 'key1'} for d in original_list]
print(""New List: "")
print(new_list)
","def remove_key_value_pairs(dictionaries):
    for i in dictionaries:
        for j in i:
            if j in dictionaries[i]:
                dictionaries[i].remove(j)
    return dictionaries

dictionaries = [
    {'name': 'John', 'age': 30, 'city': 'San Francisco'},
    {'name': 'Mary', 'age': 25, 'city': 'Los Angeles'},
    {'"
832,Write a NumPy program to create a 5x5 matrix with row values ranging from 0 to 4. ,"import numpy as np
x = np.zeros((5,5))
print(""Original array:"")
print(x)
print(""Row values ranging from 0 to 4."")
x += np.arange(5)
print(x)
","import numpy as np

matrix = np.array([[0, 1, 2, 3, 4],
                   [5, 6, 7, 8, 9],
                   [10, 11, 12, 13, 14],
                   [15, 16, 17, 18, 19],
                   [20, 21, 22, 23, 24]])

print(matrix)

# solution

# solution

# solution

# solution

# solution"
833,"Write a Python program to find the first appearance of the substring 'not' and 'poor' from a given string, if 'not' follows the 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string. ","def not_poor(str1):
  snot = str1.find('not')
  spoor = str1.find('poor')
  

  if spoor > snot and snot>0 and spoor>0:
    str1 = str1.replace(str1[snot:(spoor+4)], 'good')
    return str1
  else:
    return str1
print(not_poor('The lyrics is not that poor!'))
print(not_poor('The lyrics is poor!'))
","# solution

# Input Format

The first line contains a string,.
The second line contains the substring.

# Output Format

Print the modified string.

# Sample Input

not bad
poor
Sample Output

good
Explanation

'not' follows 'poor', so it replaces the"
834,Write a Python program to lowercase first n characters in a string. ,"str1 = 'W3RESOURCE.COM'
print(str1[:4].lower() + str1[4:])
","def lowercase_first_n_chars(string, n):
    return string[:n].lower() + string[n:]

""""""

def lowercase_first_n_chars(string, n):
    return string[:n].lower() + string[n:]

if __name__ == '__main__':
    string = ""hello world""
    n = 3
    print(lowercase_first_n_chars(string, n))"
835,Write a Python program to find the first duplicate element in a given array of integers. Return -1 If there are no such elements. ,"def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate

print(find_first_duplicate([1, 2, 3, 4, 4, 5]))
print(find_first_duplicate([1, 2, 3, 4]))
print(find_first_duplicate([1, 1, 2, 3, 3, 2, 2]))
","def findDuplicate(arr):
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] == arr[j]:
                return arr[i]
    return -1

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(findDuplicate(arr))

"""""""
836,Write a Python program to interleave two given list into another list randomly using map() function. ,"import random
def randomly_interleave(nums1, nums2):
    result =  list(map(next, random.sample([iter(nums1)]*len(nums1) + [iter(nums2)]*len(nums2), len(nums1)+len(nums2))))
    return result
nums1 = [1,2,7,8,3,7]
nums2 = [4,3,8,9,4,3,8,9]
print(""Original lists:"") 
print(nums1)
print(nums2)
print(""\nInterleave two given list into another list randomly:"")
print(randomly_interleave(nums1, nums2))
","import random

def interleave(lst1, lst2):
    return list(map(list, zip(*lst1, *lst2)))

lst1 = [1, 2, 3, 4, 5]
lst2 = [6, 7, 8, 9, 10]

print(interleave(lst1, lst2))

# Output:
# [1, 2, 3, 4, 5, 6, 7, 8,"
837,Write a Python program to remove duplicate words from a given string. ,"def unique_list(text_str):
    l = text_str.split()
    temp = []
    for x in l:
        if x not in temp:
            temp.append(x)
    return ' '.join(temp)

text_str = ""Python Exercises Practice Solution Exercises""
print(""Original String:"")
print(text_str)
print(""\nAfter removing duplicate words from the said string:"")
print(unique_list(text_str))
","def remove_duplicate_words(string):
    # your code goes here
    return string

# test your code
print(remove_duplicate_words(""this is a string""))
print(remove_duplicate_words(""this is a string""))
print(remove_duplicate_words(""this is a string""))
print(remove_duplicate_words(""this is a string""))
print(remove_duplicate_words(""this is a string""))
print(remove_du"
838,Write a Pandas program to get the index of an element of a given Series. ,"import pandas as pd
ds = pd.Series([1,3,5,7,9,11,13,15], index=[0,1,2,3,4,5,7,8])
print(""Original Series:"")
print(ds)
print(""\nIndex of 11 in the said series:"")
x = ds[ds == 11].index[0]
print(x)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'Name': ['John', 'Jane', 'John', 'Jane', 'John', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', '"
839,"Write a Python program to check if a given string contains an element, which is present in a list. ","def test(lst,str1):
    result = [el for el in lst if(el in str1)] 
    return bool(result)


str1 = ""https://www.w3resource.com/python-exercises/list/""
lst = ['.com', '.edu', '.tv']   
print(""The original string and list: "") 
print(str1)
print(lst)
print(""\nCheck if"",str1,""contains an element, which is present in the list"",lst)
print(test(lst,str1))
str1 = ""https://www.w3resource.net""
lst = ['.com', '.edu', '.tv']   
print(""\nThe original string and list: "" + str1) 
print(str1)
print(lst)
print(""\nCheck if"",str1,""contains an element, which is present in the list"",lst)
print(test(lst,str1))
","def is_present(str, lst):
    for i in lst:
        if i in str:
            return True
    return False

print(is_present(""abc"", [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"","
840,Write a Python program to insert a list of records into a given SQLite table. ,"import sqlite3 
from sqlite3 import Error 
def sql_connection():
    try:
      conn = sqlite3.connect('mydatabase.db')
      return conn
    except Error:
      print(Error)
 
def sql_table(conn, rows):
    cursorObj = conn.cursor()
# Create the table
    cursorObj.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")
    sqlite_insert_query = """"""INSERT INTO salesman
                          (salesman_id, name, city, commission) 
                          VALUES (?, ?, ?, ?);""""""    
    cursorObj.executemany(sqlite_insert_query, rows)
    conn.commit()      
    print(""Number of records after inserting rows:"")
    cursor = cursorObj.execute('select * from salesman;')
    print(len(cursor.fetchall()))
  
# Insert records
rows = [(5001,'James Hoog', 'New York', 0.15),
         (5002,'Nail Knite', 'Paris', 0.25),
         (5003,'Pit Alex', 'London', 0.15),
         (5004,'Mc Lyon', 'Paris', 0.35),
         (5005,'Paul Adam', 'Rome', 0.45)]
                   
sqllite_conn = sql_connection() 
sql_table(sqllite_conn, rows)
    
if (sqllite_conn):
  sqllite_conn.close()
  print(""\nThe SQLite connection is closed."")
","import sqlite3

conn = sqlite3.connect('mydatabase.db')
c = conn.cursor()

c.execute(""""""CREATE TABLE IF NOT EXISTS mytable (
    first_name text,
    last_name text,
    age integer,
    gender text
)"""""")

c.execute(""INSERT INTO mytable VALUES ('John', 'Doe', 25, 'Male')"")
c.execute(""INSERT INTO mytable VALUES"
841,Write a Python program to sort a list of elements using Pancake sort. ,"def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums

user_input = input(""Input numbers separated by a comma:\n"").strip()
nums = [int(item) for item in user_input.split(',')]
print(pancake_sort(nums))
","def pancakeSort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [5, 2, 4, 1, 3]
print(pancakeSort(arr))

""""""

def pancakeSort(arr"
842,Write a Python program to shift last element to first position and first element to last position in a given list. ,"def shift_first_last(lst):
    x = lst.pop(0)
    y = lst.pop()
    lst.insert(0, y)
    lst.insert(len(lst), x)
    return lst

nums = [1,2,3,4,5,6,7]
print(""Original list:"")
print(nums)
print(""Shift last element to first position and first element to last position of the said list:"")
print(shift_first_last(nums))

chars = ['s','d','f','d','s','s','d','f']
print(""\nOriginal list:"")
print(chars)
print(""Shift last element to first position and first element to last position of the said list:"")
print(shift_first_last(chars))
","def shift_last_element(lst):
    lst.pop()
    lst.pop()
    lst.append(lst.pop(0))
    lst.insert(0,lst.pop(0))
    return lst

lst = [1,2,3,4,5,6,7,8,9,10]
print(shift_last_element(lst))

""""""

def shift_"
843,Write a NumPy program to create a 5x5x5 cube of 1's. ,"import numpy as np
x = np.zeros((5, 5, 5)).astype(int) + 1
print(x)
","import numpy as np

# Create a 5x5x5 cube of 1's
cube = np.ones((5,5,5))

# Print the cube
print(cube)

# Create a 5x5x5 cube of 0's
cube = np.zeros((5,5,5))

# Print the cube
print(cube)

# Create a 5x5x5 cube of -1's
cube = np.full((5,5,5"
844,Write a NumPy program to display NumPy array elements of floating values with given precision. ,"import numpy as np
x=np.array([ 0.26153123, 0.52760141, 0.5718299, 0.5927067, 0.7831874, 0.69746349,             
  0.35399976, 0.99469633, 0.0694458, 0.54711478]) 
print(""Original array elements:"")
print(x)
print(""Print array values with precision 3:"")
np.set_printoptions(precision=3)
print(x)
","import numpy as np

a = np.array([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.10])
print(a)

# Solution:

# a = np.array([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10"
845,"Write a Pandas program to compute the minimum, 25th percentile, median, 75th, and maximum of a given series. ","import pandas as pd
import numpy as np
num_state = np.random.RandomState(100)
num_series = pd.Series(num_state.normal(10, 4, 20))
print(""Original Series:"")
print(num_series)
result = np.percentile(num_series, q=[0, 25, 50, 75, 100])
print(""\nMinimum, 25th percentile, median, 75th, and maximum of a given series:"")
print(result)
","import pandas as pd
import numpy as np

# Read the data from the file
df = pd.read_csv(""data.csv"")

# Create a new dataframe with the columns
# ""x"" and ""y""
df_new = pd.DataFrame(columns=[""x"", ""y""])

# Create a new column ""z""
df_new[""z""] = df[""x""] + df["""
846,Write a Python program to find the majority element from a given array of size n using Collections module. ,"import collections
class Solution(object):
    def majorityElement(self, nums):
        """"""
        :type nums: List[int]
        :return type: int
        """"""
        count_ele=collections.Counter(nums)
        return count_ele.most_common()[0][0]

result = Solution().majorityElement([10,10,20,30,40,10,20,10])
print(result)
","def majority_element(arr):
    count = 0
    for i in arr:
        if arr.count(i) > count:
            count = arr.count(i)
            index = arr.index(i)
    return index

arr = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3"
847,Write a Python program to insert a new text within a url in a specified position. ,"from bs4 import BeautifulSoup
html_doc = '<a href=""http://example.com/"">HTML<i>w3resource.com</i></a>'
soup = BeautifulSoup(html_doc, ""lxml"")
tag = soup.a
print(""Original Markup:"")
print(tag.contents)
tag.insert(2, ""CSS"") #2-> Position of the text (1, 2, 3)
print(""\nNew url after inserting the text:"")
print(tag.contents)
","url = ""https://www.google.com""
position = 3
new_text = ""This is a new text""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

#"
848,Write a Python program to convert a given list of strings and characters to a single list of characters. ,"def l_strs_to_l_chars(lst):
    result = [i for element in lst for i in element]
    return result

colors = [""red"", ""white"", ""a"", ""b"", ""black"", ""f""]
print(""Original list:"")
print(colors)
print(""\nConvert the said list of strings and characters to a single list of characters:"")
print(l_strs_to_l_chars(colors))
","def convert_to_char(lst):
    return [c for c in lst if c.isalpha()]

print(convert_to_char([""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"","
849,Write a Python program to perform a deep flattens a list. ,"from collections.abc import Iterable
def deep_flatten(lst):
  return ([a for i in lst for a in
          deep_flatten(i)] if isinstance(lst, Iterable) else [lst])
nums = [1, [2], [[3], [4], 5], 6]
print(""Original list elements:"")
print(nums) 
print()
print(""Deep flatten the said list:"")
print(deep_flatten(nums))
nums = [[[1, 2, 3], [4, 5]], 6]
print(""\nOriginal list elements:"")
print(nums) 
print()
print(""Deep flatten the said list:"")
print(deep_flatten(nums))
","def flatten(lst):
    if len(lst) == 0:
        return []
    else:
        return flatten(lst[0]) + flatten(lst[1:])

lst = [1, 2, [3, 4, [5, [6, 7]], 8]]
print(flatten(lst))

""""""

def flatten(lst):
    if len(lst) == 0:
        return []
    else:"
850,Write a Python program to insert a given string at the beginning of all items in a list. ,"num = [1,2,3,4]
print(['emp{0}'.format(i) for i in  num])
","def insert_string(list, string):
    for i in range(len(list)):
        list[i] = list[i] + string
    return list

list = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"","
851,Write a Python program to get a datetime or timestamp representation from current datetime. ,"import arrow
a = arrow.utcnow()
print(""Datetime representation:"")
print(a.datetime)
b = a.timestamp
print(""\nTimestamp representation:"")
print(b)
","import datetime

def get_timestamp():
    return datetime.datetime.now()

def get_datetime():
    return datetime.datetime.now()

def get_timestamp_as_string():
    return get_timestamp().strftime('%Y-%m-%d %H:%M:%S')

def get_datetime_as_string():
    return get_datetime().strftime('%Y-%m-"
852,rite a NumPy program to create a null vector of size 10 and update sixth value to 11.,"
import numpy as np
x = np.zeros(10)
print(x)
print(""Update sixth value to 11"")
x[6] = 11
print(x)
","import numpy as np

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
x[6] = 11

# Output:
# array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Hint: You can use the built-in function np.where to solve this problem.

# Hint: You can use the built-in function np.where"
853,Write a Python program to concatenate the consecutive numbers in a given string. ,"import re
txt = ""Enter at 1 20 Kearny Street. The security desk can direct you to floor 1 6. Please have your identification ready.""
print(""Original string:"")
print(txt)
new_txt = re.sub(r""(?<=\d)\s(?=\d)"", '', txt)
print('\nAfter concatenating the consecutive numbers in the said string:')
print(new_txt)
","def concatenate(str1, str2):
    return str1 + str2

print(concatenate(""Hello"", ""World""))

""""""

def concatenate(str1, str2):
    return str1 + str2

print(concatenate(""Hello"", ""World""))

""""""

def concatenate(str1, str2):
    return str1 + str2

print(concatenate(""Hello"", ""World""))"
854,Write a Python program to sort unsorted numbers using Odd Even Transposition Parallel sort. ,"#Ref.https://bit.ly/3cce7iB
from multiprocessing import Lock, Pipe, Process

# lock used to ensure that two processes do not access a pipe at the same time
processLock = Lock()
def oeProcess(position, value, LSend, RSend, LRcv, RRcv, resultPipe):
    global processLock

    # we perform n swaps since after n swaps we know we are sorted
    # we *could* stop early if we are sorted already, but it takes as long to
    # find out we are sorted as it does to sort the list with this algorithm
    for i in range(0, 10):

        if (i + position) % 2 == 0 and RSend is not None:
            # send your value to your right neighbor
            processLock.acquire()
            RSend[1].send(value)
            processLock.release()

            # receive your right neighbor's value
            processLock.acquire()
            temp = RRcv[0].recv()
            processLock.release()

            # take the lower value since you are on the left
            value = min(value, temp)
        elif (i + position) % 2 != 0 and LSend is not None:
            # send your value to your left neighbor
            processLock.acquire()
            LSend[1].send(value)
            processLock.release()

            # receive your left neighbor's value
            processLock.acquire()
            temp = LRcv[0].recv()
            processLock.release()

            # take the higher value since you are on the right
            value = max(value, temp)
    # after all swaps are performed, send the values back to main
    resultPipe[1].send(value)
""""""
the function which creates the processes that perform the parallel swaps
arr = the list to be sorted
""""""
def OddEvenTransposition(arr):
    processArray = []
    resultPipe = []
    # initialize the list of pipes where the values will be retrieved
    for _ in arr:
        resultPipe.append(Pipe())
    # creates the processes
    # the first and last process only have one neighbor so they are made outside
    # of the loop
    tempRs = Pipe()
    tempRr = Pipe()
    processArray.append(
        Process(
            target=oeProcess,
            args=(0, arr[0], None, tempRs, None, tempRr, resultPipe[0]),
        )
    )
    tempLr = tempRs
    tempLs = tempRr

    for i in range(1, len(arr) - 1):
        tempRs = Pipe()
        tempRr = Pipe()
        processArray.append(
            Process(
                target=oeProcess,
                args=(i, arr[i], tempLs, tempRs, tempLr, tempRr, resultPipe[i]),
            )
        )
        tempLr = tempRs
        tempLs = tempRr

    processArray.append(
        Process(
            target=oeProcess,
            args=(
                len(arr) - 1,
                arr[len(arr) - 1],
                tempLs,
                None,
                tempLr,
                None,
                resultPipe[len(arr) - 1],
            ),
        )
    )
    # start the processes
    for p in processArray:
        p.start()
    # wait for the processes to end and write their values to the list
    for p in range(0, len(resultPipe)):
        arr[p] = resultPipe[p][0].recv()
        processArray[p].join()
    return arr
# creates a reverse sorted list and sorts it
def main():
    arr = list(range(10, 0, -1))
    print(""Initial List"")
    print(*arr)
    arr = OddEvenTransposition(arr)
    print(""\nSorted List:"")
    print(*arr)
if __name__ == ""__main__"":
    main()
","def sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr)):
            if arr[i] % 2 == 0:
                arr[i], arr[j] = arr[j], arr[i]
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(sort(arr))

""""""

def sort(arr):
    for i"
855,Write a NumPy program to rearrange columns of a given NumPy 2D array using given index positions. ,"import numpy as np
array1 = np.array([[11, 22, 33, 44, 55],
             [66,  77,  88,  99, 100]])
print(""Original arrays:"")
print(array1)
i = [1,3,0,4,2]
result = array1[:,i]
print(""New array:"")
print(result)
","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

# a[:, 0] = [1, 2, 3, 4]
# a[:, 1] = [5, 6, 7, 8]
# a[:, 2] = [9, 10, 11, 12]

# a[:, 0]"
856,Write a Python program to remove a specified dictionary from a given list. ,"def remove_dictionary(colors, r_id):
    colors[:] = [d for d in colors if d.get('id') != r_id]
    return colors

colors = [{""id"" : ""#FF0000"", ""color"" : ""Red""}, 
          {""id"" : ""#800000"", ""color"" : ""Maroon""}, 
          {""id"" : ""#FFFF00"", ""color"" : ""Yellow""}, 
          {""id"" : ""#808000"", ""color"" : ""Olive""}] 
print('Original list of dictionary:')
print(colors)
r_id = ""#FF0000""
print(""\nRemove id"",r_id,""from the said list of dictionary:"")
print(remove_dictionary(colors, r_id))
","def remove_dict(dictionary, key):
    for i in dictionary:
        if i == key:
            dictionary.remove(i)
    return dictionary

dictionary = {'a': 1, 'b': 2, 'c': 3}
print(remove_dict(dictionary, 'a'))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
857,Write a Pandas program to extract only punctuations from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001.','c000,2','c0003', 'c0003#', 'c0004,'],
    'year': ['year 1800','year 1700','year 2300', 'year 1900', 'year 2200']
    })
print(""Original DataFrame:"")
print(df)
def find_punctuations(text):
    result = re.findall(r'[!""\$%&\'()*+,\-.\/:;=#@?\[\\\]^_`{|}~]*', text)
    string="""".join(result)
    return list(string)
df['nonalpha']=df['company_code'].apply(lambda x: find_punctuations(x))
print(""\nExtracting punctuation:"")
print(df)
","import pandas as pd

df = pd.read_csv('../data/pandas_data.csv')

df['punctuation'] = df['text'].str.extractall(r'[^\w\s]')

print(df['punctuation'])

# Solution:

# df['punctuation'] = df['text'].str.extractall(r'[^\w\s]')
#"
858,Write a NumPy program to extract all the elements of the second row from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: Second row"")
print(arra_data[1,:])
","import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12],
                [13, 14, 15, 16]])

print(arr[2, 2])

# Output:
# 5
# 6
# 7
# 8
# 13
# 14
# 15
# 16

# Hint: You can"
859,Write a NumPy program to convert cartesian coordinates to polar coordinates of a random 10x2 matrix representing cartesian coordinates. ,"import numpy as np
z= np.random.random((10,2))
x,y = z[:,0], z[:,1]
r = np.sqrt(x**2+y**2)
t = np.arctan2(y,x)
print(r)
print(t)
","import numpy as np

# Create a random matrix of cartesian coordinates
x = np.random.rand(10, 2)

# Convert the matrix to polar coordinates
polar = np.dot(x, np.array([[np.cos(x[i, 0]), np.sin(x[i, 0])] for i in range(10)]))

# Convert polar coordinates to cartesian coordinates
cartesian = np.dot(polar"
860,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight the maximum value in last two columns. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
def highlight_max(s):
    '''
    highlight the maximum in a Series green.
    '''
    is_max = s == s.max()
    return ['background-color: green' if v else '' for v in is_max]

print(""\nHighlight the maximum value in last two columns:"")
df.style.apply(highlight_max,subset=pd.IndexSlice[:, ['D', 'E']])
","import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randint(0, 100, size=(10, 4)), columns=['col1', 'col2', 'col3', 'col4'])
print(df)

df.loc[:, 'col1'] = np.random.randint(0, 100, size=10)
df.loc[:, 'col"
861,Write a Python program to check if all items of a given list of strings is equal to a given string. ,"color1 = [""green"", ""orange"", ""black"", ""white""]
color2 = [""green"", ""green"", ""green"", ""green""]

print(all(c == 'blue' for c in color1))
print(all(c == 'green' for c in color2))
","def all_equal(lst):
    for i in lst:
        if lst.count(i)!= 1:
            return False
    return True

lst = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"","
862,Write a Python program to convert the values of RGB components to a hexadecimal color code. ,"def rgb_to_hex(r, g, b):
  return ('{:02X}' * 3).format(r, g, b)
 
print(rgb_to_hex(255, 165, 1))
print(rgb_to_hex(255, 255, 255))
print(rgb_to_hex(0, 0, 0))
print(rgb_to_hex(0, 0, 128))
print(rgb_to_hex(192, 192, 192))
","import math

def rgb_to_hex(r, g, b):
    return '#{:02x}{:02x}{:02x}'.format(r, g, b)

print(rgb_to_hex(255, 0, 0))
print(rgb_to_hex(0, 255, 0))
print(rgb_to_hex(0, 0, 255))
print(rgb_to_hex(0, 0,"
863,Write a NumPy program to compute the determinant of an array. ,"import numpy as np
a = np.array([[1,2],[3,4]])
print(""Original array:"")
print(a)
result =  np.linalg.det(a)
print(""Determinant of the said array:"")
print(result)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a.determinant())

# Output:
# Traceback (most recent call last):
#   File ""<stdin>"", line 1, in <module>
# TypeError: unsupported operand type(s) for *: 'int' and 'float'

# Solution:

# import numpy as np
# a"
864,Write a Python program to find the first occurrence of a given number in a sorted list using Binary Search (bisect). ,"from bisect import bisect_left   
def Binary_Search(a, x): 
    i = bisect_left(a, x) 
    if i != len(a) and a[i] == x: 
        return i 
    else: 
        return -1

nums = [1, 2, 3, 4, 8, 8, 10, 12] 
x = 8 
num_position = Binary_Search(nums, x) 
if num_position == -1: 
    print(x, ""is not present."") 
else: 
    print(""First occurrence of"", x, ""is present at index"", num_position)
","def binary_search(list, target):
    low = 0
    high = len(list) - 1
    while low <= high:
        mid = (low + high) // 2
        if list[mid] == target:
            return mid
        elif list[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return None

print(binary_search([1, 2, 3,"
865,Write a Python program to get the frequency of the elements in a list. ,"import collections
my_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]
print(""Original List : "",my_list)
ctr = collections.Counter(my_list)
print(""Frequency of the elements in the List : "",ctr)
","def get_frequency(list):
    freq = {}
    for i in list:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    return freq

print(get_frequency([1,2,3,4,5,6,7,8,9,10]))

""""""

def get_frequency(list):
    freq = {}
    for i in list:
        if"
866,Write a Pandas program to count the number of missing values of a specified column in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df) 
print(""\nMissing values in purch_amt column:"")
result = df['purch_amt'].value_counts(dropna=False).loc[np.nan]
print(result)
","import pandas as pd

# Read the data
df = pd.read_csv(""data/missing_values.csv"")

# Print the number of missing values
print(df.isnull().sum())

# Print the number of missing values
print(df.isnull().sum().sum())

# Print the number of missing values
print(df.isnull().sum().sum())

# Print the number of missing values
print(df."
867,rite a Python program to display the current date and time.,"import datetime
now = datetime.datetime.now()
print (""Current date and time : "")
print (now.strftime(""%Y-%m-%d %H:%M:%S""))
","import datetime

def main():
    print(""Current date and time: "")
    print(datetime.datetime.now())

if __name__ == ""__main__"":
    main()

""""""

# Solution

import datetime

def main():
    print(""Current date and time: "")
    print(datetime.datetime.now())

if __name__ == ""__main__"":
    main()

""""""

# Solution

import datetime"
868,"Write a NumPy program to test element-wise of a given array for finiteness (not infinity or not Not a Number), positive or negative infinity, for NaN, for NaT (not a time), for negative infinity, for positive infinity. ","import numpy as np
print(""\nTest element-wise for finiteness (not infinity or not Not a Number):"")
print(np.isfinite(1))
print(np.isfinite(0))
print(np.isfinite(np.nan))
print(""\nTest element-wise for positive or negative infinity:"")
print(np.isinf(np.inf))
print(np.isinf(np.nan))
print(np.isinf(np.NINF))
print(""Test element-wise for NaN:"")
print(np.isnan([np.log(-1.),1.,np.log(0)]))
print(""Test element-wise for NaT (not a time):"")
print(np.isnat(np.array([""NaT"", ""2016-01-01""], dtype=""datetime64[ns]"")))
print(""Test element-wise for negative infinity:"")
x = np.array([-np.inf, 0., np.inf])
y = np.array([2, 2, 2])
print(np.isneginf(x, y))
print(""Test element-wise for positive infinity:"")
x = np.array([-np.inf, 0., np.inf])
y = np.array([2, 2, 2])
print(np.isposinf(x, y))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])

print(np.isnan(a))
print(np.isinf(a))
print(np.isfinite(a))

print(np.isnan(a))
print(np."
869,Write a NumPy program to sum and compute the product of a NumPy array elements. ,"import numpy as np
x = np.array([10, 20, 30], float)
print(""Original array:"")
print(x)
print(""Sum of the array elements:"")
print(x.sum())
print(""Product of the array elements:"")
print(x.prod())
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
print(a.sum())
print(a.prod())

# Solution:

# a = np.array([1, 2, 3, 4, 5])
# print(a.sum())
# print(a.prod())

# Solution:

# a = np.array([1, 2, 3, 4, 5])
# print(a."
870,Write a Python program to interleave multiple given lists of different lengths using itertools module. ,"from itertools import chain, zip_longest
def interleave_diff_len_lists(list1, list2, list3, list4):
    return [x for x in chain(*zip_longest(list1, list2, list3, list4)) if x is not None]    
    
nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [2, 5, 8]
nums3 = [0, 1]
nums4 = [3, 3, -1, 7]

print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(nums3)
print(nums4)

print(""\nInterleave said lists of different lengths:"")
print(interleave_diff_len_lists(nums1, nums2, nums3, nums4))
",">>> from itertools import combinations
>>> l1 = [1, 2, 3, 4, 5]
>>> l2 = [1, 2, 3, 4, 5, 6]
>>> l3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>> l4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18"
871,Write a Python program to find the maximum value in a given heterogeneous list using lambda. ,"def max_val(list_val):
     max_val = max(list_val, key = lambda i: (isinstance(i, int), i))  
     return(max_val)

list_val = ['Python', 3, 2, 4, 5, 'version'] 
print(""Original list:"")
print(list_val)
print(""\nMaximum values in the said list using lambda:"")
print(max_val(list_val))
","def max_value(lst):
    return max(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_value(lst))

""""""

# Solution

def max_value(lst):
    return max(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_value"
872,"Write a NumPy program to find the set exclusive-or of two arrays. Set exclusive-or will return the sorted, unique values that are in only one (not both) of the input arrays. ","import numpy as np
array1 = np.array([0, 10, 20, 40, 60, 80])
print(""Array1: "",array1)
array2 = [10, 30, 40, 50, 70]
print(""Array2: "",array2)
print(""Unique values that are in only one (not both) of the input arrays:"")
print(np.setxor1d(array1, array2))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([2, 3, 4, 5, 6])

print(np.set_exclusive_zeros(a, b))

# OUTPUT:
# [1 2 3 4 5 6 5 6 6]
# [2 3 4 5 6 6 6"
873,Write a NumPy program to stack arrays in sequence vertically. ,"import numpy as np    
print(""\nOriginal arrays:"")
x = np.arange(9).reshape(3,3)
y = x*3
print(""Array-1"")
print(x)
print(""Array-2"")
print(y)
new_array =  np.vstack((x,y))
print(""\nStack arrays in sequence vertically:"")
print(new_array)
","import numpy as np

arr1 = np.array([1, 2, 3, 4, 5])
arr2 = np.array([6, 7, 8, 9, 10])

arr3 = np.vstack((arr1, arr2))

print(arr3)

arr4 = np.hstack((arr1, arr2))

print(arr4)

arr5 = np.dstack((arr1, arr2))

print(arr5)

arr6"
874,Write a Python program to get the n maximum elements from a given list of numbers. ,"def max_n_nums(nums, n = 1):
  return sorted(nums, reverse = True)[:n]
nums = [1, 2, 3]
print(""Original list elements:"")
print(nums)
print(""Maximum values of the said list:"", max_n_nums(nums))
nums = [1, 2, 3]
print(""\nOriginal list elements:"")
print(nums)
print(""Two maximum values of the said list:"", max_n_nums(nums,2))
nums = [-2, -3, -1, -2, -4, 0, -5]
print(""\nOriginal list elements:"")
print(nums)
print(""Threee maximum values of the said list:"", max_n_nums(nums,3))
nums = [2.2, 2, 3.2, 4.5, 4.6, 5.2, 2.9]
print(""\nOriginal list elements:"")
print(nums)
print(""Two maximum values of the said list:"", max_n_nums(nums, 2))
","def get_n_maximum(n, lst):
    max_elements = []
    for i in range(n):
        max_elements.append(lst[i])
    return max_elements

print(get_n_maximum(5, [1, 2, 3, 4, 5]))

""""""

def get_n_maximum(n, lst):
    max_elements = []
    for i in range(n):"
875,Write a NumPy program totest element-wise for positive or negative infinity. ,"import numpy as np
a = np.array([1, 0, np.nan, np.inf])
print(""Original array"")
print(a)
print(""Test element-wise for positive or negative infinity:"")
print(np.isinf(a))
","import numpy as np

def totest(x):
    if x > 0:
        return 1
    else:
        return -1

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(totest(x))

""""""

# Solution

import numpy as np

def totest(x):
    if x > 0:
        return 1
    else:
        return -"
876,"Write a Python program to get the difference between a given number and 17, if the number is greater than 17 return double the absolute difference. ","def difference(n):
    if n <= 17:
        return 17 - n
    else:
        return (n - 17) * 2 

print(difference(22))
print(difference(14))
","def diff(num):
    if num > 17:
        return num - 17
    else:
        return num

print(diff(17))

""""""

# Solution:

def diff(num):
    if num > 17:
        return num - 17
    else:
        return num

print(diff(17))"
877,Write a NumPy program to remove all rows in a NumPy array that contain non-numeric values. ,"import numpy as np
x = np.array([[1,2,3], [4,5,np.nan], [7,8,9], [True, False, True]])
print(""Original array:"")
print(x)
print(""Remove all non-numeric elements of the said array"")
print(x[~np.isnan(x).any(axis=1)])
","import numpy as np

arr = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]])

print(arr)

arr = arr[arr.any(axis=0)]

print(arr)

arr = arr[arr.any(axis=1)]

print(arr)"
878,Write a Pandas program to find the indexes of rows of a specified value of a given column in a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32]},
     index =  [1, 2, 3, 4, 5, 6])
print(""Original DataFrame with single index:"")
print(df)
print(""\nIndex of rows where specified column matches certain value:"")
print(df.index[df['school_code']=='s001'].tolist())
","import pandas as pd

df = pd.DataFrame({'Name': ['John', 'Jane', 'John', 'Jane', 'John', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane',"
879,Write a Python program to calculate arc length of an angle. ,"def arclength():
    pi=22/7
    diameter = float(input('Diameter of circle: '))
    angle = float(input('angle measure: '))
    if angle >= 360:
        print(""Angle is not possible"")
        return
    arc_length = (pi*diameter) * (angle/360)
    print(""Arc Length is: "", arc_length)

arclength()
","def arc_length(a, b, c):
    return abs(a - b) + abs(c - b) + abs(a - c) + abs(b - c)

a = int(input(""Enter the first angle: ""))
b = int(input(""Enter the second angle: ""))
c = int(input(""Enter the third angle: ""))

print(""The arc length of"", a, ""and"", b, ""is"", arc_length(a, b, c))"
880,Write a NumPy program to create a Cartesian product of two arrays into single array of 2D points. ,"import numpy as np
x = np.array([1,2,3])
y = np.array([4,5])
result = np.transpose([np.tile(x, len(y)), np.repeat(y, len(x))])
print(result)
","import numpy as np

x = np.array([[1,2,3], [4,5,6]])
y = np.array([[7,8,9], [10,11,12]])

print(x)
print(y)

print(x.shape)
print(y.shape)

print(x.ndim)
print(y.ndim)

print(x.size)
print(y"
881,Write a NumPy program to find the missing data in a given array. ,"import numpy as np 
 
nums = np.array([[3, 2, np.nan, 1],
              [10, 12, 10, 9],
              [5, np.nan, 1, np.nan]])

print(""Original array:"") 
print(nums)
print(""\nFind the missing data of the said array:"")
print(np.isnan(nums))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.sum())

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.sum(axis=0))

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print"
882,Write a Python program to add more number of elements to a deque object from an iterable object. ,"import collections
even_nums = (2, 4, 6, 8, 10)
even_deque = collections.deque(even_nums)
print(""Even numbers:"")
print(even_deque)
more_even_nums = (12, 14, 16, 18, 20)
even_deque.extend(more_even_nums)
print(""More even numbers:"")
print(even_deque)
","import collections

class Deque:
    def __init__(self):
        self.items = collections.deque()

    def add_front(self, item):
        self.items.appendleft(item)

    def add_rear(self, item):
        self.items.append(item)

    def remove_front(self):
        return self.items.pop()

    def remove_rear(self):
        return self.items"
883,Write a Python program to print content of elements that contain a specified string of a given web page. ,"import requests
import re
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""\nContent of elements that contain 'Python' string:"")
str1 = soup.find_all(string=re.compile('Python'))
for txt in str1:
    print("" "".join(txt.split()))
","import re

def web_content(url):
    with open(url, 'r') as f:
        content = f.read()
    return content

def web_content_re(url):
    with open(url, 'r') as f:
        content = f.read()
    return re.findall(r'<a href=""(.*?)"">', content)

def web_content_re_2(url):
    with open("
884,Write a Python program to get an array buffer information. ,"from array import array
a = array(""I"", (12,25))
print(""Array buffer start address in memory and number of elements."")
print(a.buffer_info())
","import array

arr = array.array('i', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr)

# Output:
# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Python code to get an array buffer information

# import array

# arr = array.array('i', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
885,Write a Python program to count the number of lines in a given CSV file. Use csv.reader,"import csv
reader = csv.reader(open(""employees.csv""))
no_lines= len(list(reader))
print(no_lines)
","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    print(type(csv_reader))
    print(csv_reader)
    print(csv_reader[0])
    print(csv_reader[0][0])
    print(csv_reader[0][1])
    print(csv_reader[0][2])
    print(csv_reader[0][3])"
886,Write a Python program to sort an odd-even sort or odd-even transposition sort. ,"def odd_even_transposition(arr: list) -> list:
    arr_size = len(arr)
    for _ in range(arr_size):
        for i in range(_ % 2, arr_size - 1, 2):
            if arr[i + 1] < arr[i]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]

    return arr
            
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
odd_even_transposition(nums)
print(""Sorted order is:"", nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
odd_even_transposition(nums)
print(""Sorted order is:"", nums)
","def sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr)):
            if arr[i] % 2 == 0:
                arr[i], arr[j] = arr[j], arr[i]
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(sort(arr))

arr = [1, 2, 3, 4"
887,"Write a Python program to display a number in left, right and center aligned of width 10. ","x = 22
print(""\nOriginal Number: "", x)
print(""Left aligned (width 10)   :""+""{:< 10d}"".format(x));
print(""Right aligned (width 10)  :""+""{:10d}"".format(x));
print(""Center aligned (width 10) :""+""{:^10d}"".format(x));
print()
","import math

def display(number):
    print(""{:^10}"".format(number))

def left(number):
    display(number)
    print("" ""*(10-len(str(number)))+str(number))

def right(number):
    display(number)
    print("" ""*(10-len(str(number)))+str(number))

def center(number):
    display(number)
    print("" ""*"
888,Write a Python program to determine whether variable is defined or not. ,"try:
  x = 1
except NameError:
  print(""Variable is not defined....!"")
else:
  print(""Variable is defined."")
try:
  y
except NameError:
  print(""Variable is not defined....!"")
else:
  print(""Variable is defined."")
  ","def is_defined(variable):
    if variable:
        print(""Variable is defined"")
    else:
        print(""Variable is not defined"")

is_defined(False)
is_defined(True)

""""""

# Solution

def is_defined(variable):
    if variable:
        print(""Variable is defined"")
    else:
        print(""Variable is not defined"")

is_defined(False)
is_defined(True)"
889,Write a NumPy program to replace the negative values in a NumPy array with 0. ,"import numpy as np
x = np.array([-1, -4, 0, 2, 3, 4, 5, -6])
print(""Original array:"")
print(x)
print(""Replace the negative values of the said array with 0:"")
x[x < 0] = 0
print(x)
","import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr[arr < 0] = 0

arr

arr[arr < 0] = 0

arr

arr[arr < 0] = 0

arr

arr[arr < 0] = 0

arr

arr[arr < 0] = 0

arr

arr[arr < 0] ="
890,"Write a Pandas program to create a stacked bar plot of opening, closing stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-4-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Date', 'Open', 'Close']]
df3 = df2.set_index('Date')
plt.figure(figsize=(20,20))
df3.plot.bar(stacked=True);
plt.suptitle('Opening/Closing stock prices Alphabet Inc.,\n01-04-2020 to 30-04-2020', fontsize=12, color='black')
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])
df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')

fig, ax = plt.subplots(figsize=(10, 5))"
891,Write a Python program to find missing and additional values in two lists. ,"list1 = ['a','b','c','d','e','f']
list2 = ['d','e','f','g','h']
print('Missing values in second list: ', ','.join(set(list1).difference(list2)))
print('Additional values in second list: ', ','.join(set(list2).difference(list1)))
","import numpy as np
import pandas as pd

# Create a list of numbers
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Create a list of strings
strings = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

# Create a list of lists
lists = [numbers, strings]

# Create a dictionary
dictionary ="
892,rite a Python program to remove spaces from a given string. ,"def remove_spaces(str1):
  str1 = str1.replace(' ','')
  return str1
    
print(remove_spaces(""w 3 res ou r ce""))
print(remove_spaces(""a b c""))
","def remove_spaces(str):
    return str.replace("" "", """")

print(remove_spaces(""hello world""))

""""""

def remove_spaces(str):
    return str.replace("" "", """")

print(remove_spaces(""hello world""))

""""""

def remove_spaces(str):
    return str.replace("" "", """")

print(remove_spaces(""hello world""))

""""""

def remove_spaces(str):"
893,Write a Pandas program to create a Pivot table and find the region wise Television and Home Theater sold. ,"import pandas as pd
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df,index=[""Region"", ""Item""], values=""Units"")
print(table.query('Item == [""Television"",""Home Theater""]'))
","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21"
894,Write a Python program to update all the values of a specific column of a given SQLite table. ,"import sqlite3 
from sqlite3 import Error 
def sql_connection():
    try:
      conn = sqlite3.connect('mydatabase.db')
      return conn
    except Error:
      print(Error) 
def sql_table(conn):
    cursorObj = conn.cursor()
# Create the table
    cursorObj.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")
# Insert records
    cursorObj.executescript(""""""
    INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);
    INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);
    INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);
    INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);
    INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);
    """""")    
    cursorObj.execute(""SELECT * FROM salesman"")
    rows = cursorObj.fetchall()
    print(""Agent details:"")
    for row in rows:
        print(row)
    print(""\nUpdate all commision to .55:"")
    sql_update_query = """"""Update salesman set commission = .55""""""
    cursorObj.execute(sql_update_query)
    conn.commit()
    print(""Record Updated successfully "")    
    cursorObj.execute(""SELECT * FROM salesman"")
    rows = cursorObj.fetchall()
    print(""\nAfter updating Agent details:"")
    for row in rows:
        print(row)
sqllite_conn = sql_connection()
sql_table(sqllite_conn)
if (sqllite_conn):
  sqllite_conn.close()
  print(""\nThe SQLite connection is closed."")
","import sqlite3

conn = sqlite3.connect('data.db')
c = conn.cursor()

c.execute('CREATE TABLE IF NOT EXISTS data (id INTEGER, name TEXT, dob DATE, address TEXT, phone INTEGER, email TEXT, website TEXT, password TEXT)')

c.execute('INSERT INTO data VALUES (1, ""Raj"", ""2021-05-05"", ""Rajesh"", ""09"
895,Write a Python program to swap two variables. ,"a = 30
b = 20
print(""\nBefore swap a = %d and b = %d"" %(a, b))
a, b = b, a
print(""\nAfter swaping a = %d and b = %d"" %(a, b))
print()
","def swap(a, b):
    a, b = b, a
    return a, b

a = int(input(""Enter first number: ""))
b = int(input(""Enter second number: ""))
print(swap(a, b))

""""""

# Solution:

a = int(input(""Enter first number: ""))
b = int(input(""Enter second number: ""))
print(a, b)
a, b = b, a
print(a, b)"
896,Write a Pandas program to join two dataframes using keys from right dataframe only. ,"import pandas as pd
data1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],
                     'key2': ['K0', 'K1', 'K0', 'K1'],
                     'P': ['P0', 'P1', 'P2', 'P3'],
                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) 
data2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],
                      'key2': ['K0', 'K0', 'K0', 'K0'],
                      'R': ['R0', 'R1', 'R2', 'R3'],
                      'S': ['S0', 'S1', 'S2', 'S3']})
print(""Original DataFrames:"")
print(data1)
print(""--------------------"")
print(data2)
print(""\nMerged Data (keys from data2):"")
merged_data = pd.merge(data1, data2, how='right', on=['key1', 'key2'])
print(merged_data)
print(""\nMerged Data (keys from data1):"")
merged_data = pd.merge(data2, data1, how='right', on=['key1', 'key2'])
print(merged_data)
","df1 = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})
df2 = pd.DataFrame({'a': [7, 8, 9], 'b': [10, 11, 12]})

df1.join(df2, on='a')

""""""

import pandas as pd
import numpy as np

df1 = pd.DataFrame({'a': [1,"
897,Write a NumPy program to compute the inner product of two given vectors. ,"import numpy as np
x = np.array([4, 5])
y = np.array([7, 10])
print(""Original vectors:"")
print(x)
print(y)
print(""Inner product of said vectors:"")
print(np.dot(x, y))
","a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

inner_product = np.dot(a, b)

print(inner_product)

""""""

import numpy as np

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

inner_product = np.dot(a, b)

print(inner_product)"
898,Write a Pandas program to calculate all Thursdays between two given days. ,"import pandas as pd
thursdays  = pd.date_range('2020-01-01', 
                           '2020-12-31', freq=""W-THU"")
print(""All Thursdays between 2020-01-01 and 2020-12-31:\n"")
print(thursdays.values)
","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution"
899,Write a Python program to print all permutations of a given string (including duplicates). ,"def permute_string(str):
    if len(str) == 0:
        return ['']
    prev_list = permute_string(str[1:len(str)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(str)):
            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]
            if new_str not in next_list:
                next_list.append(new_str)
    return next_list

print(permute_string('ABCD'));
","def permutations(string):
    if len(string) == 1:
        return [string]
    else:
        return [string[0] + permutations(string[1:]) for i in range(len(string))]

print(permutations('abcd'))

""""""

def permutations(string):
    if len(string) == 1:
        return [string]
    else:
        return [string[0] + permutations(string["
900,Write a Python program to extract values from a given dictionaries and create a list of lists from those values. ,"def test(dictt,keys):
    return [list(d[k] for k in keys) for d in dictt] 

students = [
        {'student_id': 1, 'name': 'Jean Castro', 'class': 'V'}, 
        {'student_id': 2, 'name': 'Lula Powell', 'class': 'V'},
        {'student_id': 3, 'name': 'Brian Howell', 'class': 'VI'}, 
        {'student_id': 4, 'name': 'Lynne Foster', 'class': 'VI'}, 
        {'student_id': 5, 'name': 'Zachary Simon', 'class': 'VII'}
        ]

print(""\nOriginal Dictionary:"")
print(students)
print(""\nExtract values from the said dictionarie and create a list of lists using those values:"")
print(""\n"",test(students,('student_id', 'name', 'class')))
print(""\n"",test(students,('student_id', 'name')))
print(""\n"",test(students,('name', 'class')))
","def extract_values(dictionaries):
    values = []
    for key in dictionaries:
        values.append(dictionaries[key])
    return values

print(extract_values({
    ""name"": ""John"",
    ""age"": 30,
    ""city"": ""New York""
}))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
901,Write a NumPy program to calculate the sum of all columns of a 2D NumPy array. ,"import numpy as np
num = np.arange(36)
arr1 = np.reshape(num, [4, 9])
print(""Original array:"")
print(arr1)
result  = arr1.sum(axis=0)
print(""\nSum of all columns:"")
print(result)
","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

print(a.sum())

# OUTPUT:
# [1 2 3 4 5 6 7 8 9 10 11 12]

# Hint: To solve this problem, you'll need to use the NumPy library.
# You can install NumPy with the command:"
902,Write a Python program to remove the n,"def remove_char(str, n):
      first_part = str[:n] 
      last_part = str[n+1:]
      return first_part + last_part
print(remove_char('Python', 0))
print(remove_char('Python', 3))
print(remove_char('Python', 5))
","def remove_n(n):
    if n == 0:
        return 0
    else:
        return n - 1

print(remove_n(5))

""""""

def remove_n(n):
    if n == 0:
        return 0
    else:
        return n - 1

print(remove_n(5))

""""""

def remove_n(n):
    if n == 0:
        return 0
    else:
        return n - 1

print(remove_"
903,Write a Python program to remove duplicate characters of a given string. ,"from collections import OrderedDict
def remove_duplicate(str1):
  return """".join(OrderedDict.fromkeys(str1))
     
print(remove_duplicate(""python exercises practice solution""))
print(remove_duplicate(""w3resource""))
","def remove_duplicate_char(string):
    # your code goes here
    return string

# test your code
print(remove_duplicate_char('abcdefg'))
print(remove_duplicate_char('abcdefg'))
print(remove_duplicate_char('abcdefg'))
print(remove_duplicate_char('abcdefg'))
print(remove_duplicate_char('abcdefg'))
print(remove_du"
904,Write a NumPy program to create a record array from a given regular array. ,"import numpy as np
arra1 = np.array([(""Yasemin Rayner"", 88.5, 90),
                 (""Ayaana Mcnamara"", 87, 99),
             (""Jody Preece"", 85.5, 91)])
print(""Original arrays:"")
print(arra1)
print(""\nRecord array;"")
result = np.core.records.fromarrays(arra1.T,
                              names='col1, col2, col3',
                              formats = 'S80, f8, i8')
print(result)
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a record array from the array
a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a record array from a given array
a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

#"
905,Write a Python program to create a ctime formatted representation of the date and time using arrow module. ,"import arrow
print(""Ctime formatted representation of the date and time:"")
a = arrow.utcnow().ctime()
print(a) 
","import arrow

print(arrow.now().format('YYYY-MM-DD HH:mm:ss'))

""""""

import arrow

print(arrow.now().format('YYYY-MM-DD HH:mm:ss'))

""""""

import arrow

print(arrow.now().format('YYYY-MM-DD HH:mm:ss'))

""""""

import arrow

print(arrow.now().format('YYYY-MM-"
906,Write a Python program to input two integers in a single line. ,"print(""Input the value of x & y"")
x, y = map(int, input().split())
print(""The value of x & y are: "",x,y)
","a = int(input())
b = int(input())
print(a+b)

""""""

a = int(input())
b = int(input())
print(a+b)"
907,"Write a Python program to find out, if the given number is abundant. ","def is_abundant(n):
    fctr_sum = sum([fctr for fctr in range(1, n) if n % fctr == 0])
    return fctr_sum > n
print(is_abundant(12))
print(is_abundant(13))
","def is_abundant(n):
    if n < 2:
        return False
    for i in range(2, n):
        if n % i == 0:
            return True
    return False

print(is_abundant(12))

""""""

def is_abundant(n):
    if n < 2:
        return False
    for i in range(2, n):
        if n % i == 0:
            return True
    return"
908,Write a NumPy program to create a random vector of size 10 and sort it. ,"import numpy as np
x = np.random.random(10)
print(""Original array:"")
print(x)
x.sort()
print(""Sorted array:"")
print(x)
","import numpy as np

np.random.seed(0)

x = np.random.randn(10)

x.sort()

print(x)

""""""

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#"
909,"Write a NumPy program to create to concatenate two given arrays of shape (2, 2) and (2,1). ","import numpy as np 
nums1 = np.array([[4.5, 3.5],
                 [5.1, 2.3]])
nums2 = np.array([[1],
                  [2]])
print(""Original arrays:"")
print(nums1)
print(nums2)
print(""\nConcatenating the said two arrays:"")
print(np.concatenate((nums1, nums2), axis=1))
","import numpy as np

a = np.array([[1, 2], [3, 4]])
b = np.array([[5, 6], [7, 8]])

c = np.concatenate((a, b), axis=0)
print(c)

d = np.concatenate((a, b), axis=1)
print(d)

# Output:
[[1 2]"
910,Write a Python program to find the first repeated character in a given string. ,"def first_repeated_char(str1):
  for index,c in enumerate(str1):
    if str1[:index+1].count(c) > 1:
      return c 
  return ""None""

print(first_repeated_char(""abcdabcd""))
print(first_repeated_char(""abcd""))
","def first_repeated_char(str):
    for i in range(len(str)):
        if str[i] == str[i-1]:
            return str[i]
    return -1

print(first_repeated_char(""abcabcbb""))
print(first_repeated_char(""bbbbb""))
print(first_repeated_char(""pwwkew""))
print(first_repeated_char(""""))
print(first_repeated_char"
911,Write a python program to find the longest words. ,"def longest_word(filename):
    with open(filename, 'r') as infile:
              words = infile.read().split()
    max_len = len(max(words, key=len))
    return [word for word in words if len(word) == max_len]

print(longest_word('test.txt'))
","def longest_word(s):
    words = s.split()
    longest = """"
    for word in words:
        if len(word) > len(longest):
            longest = word
    return longest

print(longest_word(""The quick brown fox jumps over the lazy dog.""))

""""""

def longest_word(s):
    words = s.split()
    longest = """"
    for word in words:
        if len(word) > len(longest):"
912,"Write a Python program to display your details like name, age, address in three different lines. ","def personal_details():
    name, age = ""Simon"", 19
    address = ""Bangalore, Karnataka, India""
    print(""Name: {}\nAge: {}\nAddress: {}"".format(name, age, address))

personal_details()
","def display_details(name, age, address):
    print(name)
    print(age)
    print(address)

display_details(name=""John"", age=30, address=""New York"")
display_details(name=""John"", age=30, address=""New York"")
display_details(name=""John"", age=30, address=""New York"")

""""""

def display_details(name, age, address):
    print(name)"
913,Write a Python program to count the frequency of consecutive duplicate elements in a given list of numbers. Use itertools module. ,"from itertools import groupby
def count_same_pair(nums):
    result = [sum(1 for _ in group) for _, group in groupby(nums)]
    return result

nums = [1,1,2,2,2,4,4,4,5,5,5,5]
print(""Original lists:"")
print(nums)
print(""\nFrequency of the consecutive duplicate elements:"")
print(count_same_pair(nums))
","def count_consecutive_duplicates(nums):
    # Your code here
    return sum(1 for i in range(len(nums)) if nums[i] == nums[i-1])

print(count_consecutive_duplicates([1,2,3,1,2,3]))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
914,Write a Python program to get the daylight savings time adjustment using arrow module. ,"import arrow
print(""Daylight savings time adjustment:"")
a = arrow.utcnow().dst()
print(a)
","import arrow

def get_dst(time):
    return arrow.get(time).timezone.dst(arrow.get(time).time)

print(get_dst('2021-05-01'))

""""""

# Solution

import arrow

def get_dst(time):
    return arrow.get(time).timezone.dst(arrow.get(time).time)

print(get_dst('2021-05-01'"
915,Write a Pandas program to construct a series using the MultiIndex levels as the column and index. ,"import pandas as pd 
import numpy as np
sales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'],
          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]
sales_tuples = list(zip(*sales_arrays))
print(""Create a MultiIndex:"")
sales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])
print(sales_tuples)
print(""\nConstruct a series using the said MultiIndex levels: "")
s = pd.Series(np.random.randn(8), index = sales_index)
print(s)
","import pandas as pd

# Create a DataFrame
df = pd.DataFrame(
    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]],
    index=pd.MultiIndex.from_product([['a', 'b', 'c'], ['d', 'e', 'f']]),
    columns=pd.MultiIndex.from_product([['a', 'b', '"
916,Write a Python program to write dictionaries and a list of dictionaries to a given CSV file. Use csv.reader,"import csv
print(""Write dictionaries to a CSV file:"")
fw = open(""test.csv"", ""w"", newline='')
writer = csv.DictWriter(fw, fieldnames=[""Name"", ""Class""])
writer.writeheader()
writer.writerow({""Name"": ""Jasmine Barrett"", ""Class"": ""V""})
writer.writerow({""Name"": ""Garry Watson"", ""Class"": ""V""})
writer.writerow({""Name"": ""Courtney Caldwell"", ""Class"": ""VI""})
fw.close()
fr = open(""test.csv"", ""r"")
csv = csv.reader(fr, delimiter = "","")
for row in csv:
  print(row) 
fr.close()
","import csv

with open('solution.csv', 'w', newline='') as solution:
    solution_writer = csv.writer(solution)
    solution_writer.writerow(['Name', 'Age', 'Salary'])
    solution_writer.writerow(['John', '25', '$100'])
    solution_writer.writerow(['Anna', '25', '$100'])"
917,Write a Python program to find the first non-repeating character in given string. ,"def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1 
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None

print(first_non_repeating_character('abcdef'))
print(first_non_repeating_character('abcabcdef'))
print(first_non_repeating_character('aabbcc'))
","def first_non_repeating_char(string):
    # your code goes here
    for i in range(len(string)):
        if string[i] == string[i+1]:
            return string[i]
    return''

print(first_non_repeating_char('abcabcbb'))
print(first_non_repeating_char('bbbbb'))
print(first_non_repeating_char('pwwkew'))"
918,Write a Python program to merge more than one dictionary in a single expression. ,"import collections as ct
def merge_dictionaries(color1,color2):
    merged_dict = dict(ct.ChainMap({}, color1, color2))
    return merged_dict
color1 = { ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }
color2 = { ""G"": ""Green"", ""W"": ""White"" }
print(""Original dictionaries:"")
print(color1,' ',color2)
print(""\nMerged dictionary:"")
print(merge_dictionaries(color1, color2))

def merge_dictionaries(color1,color2, color3):
    merged_dict = dict(ct.ChainMap({}, color1, color2, color3))
    return merged_dict

color1 = { ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }
color2 = { ""G"": ""Green"", ""W"": ""White"" }
color3 = { ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" }

print(""\nOriginal dictionaries:"")
print(color1,' ',color2, color3)
print(""\nMerged dictionary:"")
# Duplicate colours have automatically removed.
print(merge_dictionaries(color1, color2, color3))
","def mergeDicts(dict1, dict2):
    dict1.update(dict2)
    return dict1

# Driver program to test above function
dict1 = {'a': 1, 'b': 2, 'c': 3}
dict2 = {'d': 4, 'e': 5, 'f': 6}
print(mergeDicts(dict1, dict2))

""""""

# Solution:

def mergeDicts(dict1, dict2):"
919,Write a Python program to shuffle the elements of a given list. Use random.shuffle(),"import random 
nums = [1, 2, 3, 4, 5]
print(""Original list:"")
print(nums)
random.shuffle(nums)
print(""Shuffle list:"")
print(nums)
words = ['red', 'black', 'green', 'blue']
print(""\nOriginal list:"")
print(words)
random.shuffle(words)
print(""Shuffle list:"")
print(words)
","import random

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
random.shuffle(lst)
print(lst)

""""""

# Solution 1

# lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# random.shuffle(lst)
# print(lst)

# Solution 2

lst = [1, 2"
920,"Write a Pandas program to filter those records where WHO region matches with multiple values (Africa, Eastern Mediterranean, Europe) from world alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
new_w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(new_w_a_con.head())
print(""\nFilter by matching multiple values in a given dataframe:"")
flt_wine = new_w_a_con[""WHO region""].isin([""Africa"", ""Eastern Mediterranean"", ""Europe""])
print(new_w_a_con[flt_wine])
","import pandas as pd

df = pd.read_csv('world_alcohol_consumption.csv')

df = df[df['region'].isin(['Africa', 'Eastern Mediterranean', 'Europe'])]

df.to_csv('world_alcohol_consumption_filtered.csv', index=False)

# Solution:

# df = pd.read_csv('world_alcohol"
921,Write a Python program to sort a given matrix in ascending order according to the sum of its rows. ,"def sort_matrix(M):
    result = sorted(M, key=sum)
    return result

matrix1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]
matrix2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]

print(""Original Matrix:"")
print(matrix1)
print(""\nSort the said matrix in ascending order according to the sum of its rows"") 
print(sort_matrix(matrix1))
print(""\nOriginal Matrix:"")
print(matrix2) 
print(""\nSort the said matrix in ascending order according to the sum of its rows"") 
print(sort_matrix(matrix2))
","def sort_matrix(matrix):
    rows = len(matrix)
    sum_rows = sum(matrix[0])
    for row in matrix:
        for i in range(len(row)):
            row[i] = row[i]/sum_rows
    return matrix

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(sort_matrix(matrix))"
922,"Write a Python code to send a request to a web page, and print the JSON value of the response. Also print each key value of the response. ","import requests
r = requests.get('https://api.github.com/')
response = r.json()
print(""JSON value of the said response:"")
print(r.json())
print(""\nEach key of the response:"")
print(""Current user url:"",response['current_user_url'])
print(""Current user authorizations html url:"",response['current_user_authorizations_html_url'])
print(""Authorizations url:"",response['authorizations_url'])
print(""code_search_url:"",response['code_search_url'])
print(""commit_search_url:"",response['commit_search_url'])
print(""Emails url:"",response['emails_url'])
print(""Emojis url:"",response['emojis_url'])
print(""Events url:"",response['events_url'])
print(""Feeds url:"",response['feeds_url'])
print(""Followers url:"",response['followers_url'])
print(""Following url:"",response['following_url'])
print(""Gists url:"",response['gists_url'])
print(""Issue search url:"",response['issue_search_url'])
print(""Issues url:"",response['issues_url'])
print(""Keys url:"",response['keys_url'])
print(""label search url:"",response['label_search_url'])
print(""Notifications url:"",response['notifications_url'])
print(""Organization url:"",response['organization_url'])
print(""Organization repositories url:"",response['organization_repositories_url'])
print(""Organization teams url:"",response['organization_teams_url'])
print(""Public gists url:"",response['public_gists_url'])
print(""Rate limit url:"",response['rate_limit_url'])
print(""Repository url:"",response['repository_url'])
print(""Repository search url:"",response['repository_search_url'])
print(""Current user repositories url:"",response['current_user_repositories_url'])
print(""Starred url:"",response['starred_url'])
print(""Starred gists url:"",response['starred_gists_url'])
print(""User url:"",response['user_url'])
print(""User organizations url:"",response['user_organizations_url'])
print(""User repositories url:"",response['user_repositories_url'])
print(""User search url:"",response['user_search_url'])
","import requests

url = ""http://httpbin.org/get""

response = requests.get(url)

print(response.text)

print(response.json())

print(response.headers)

print(response.cookies)

print(response.status_code)

print(response.encoding)

print(response.content)

print(response.headers.get('"
923,Write a Python program to insert a new item before the second element in an existing array. ,"from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print(""Original array: ""+str(array_num))
print(""Insert new value 4 before 3:"")
array_num.insert(1, 4)
print(""New array: ""+str(array_num))
","def insert_new_item(arr, item):
    arr.insert(2, item)

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
insert_new_item(arr, 10)
print(arr)

""""""

def insert_new_item(arr, item):
    arr.insert(2, item)

arr = [1, 2, 3, 4, 5, 6, 7, 8,"
924,Write a NumPy program to save as text a matrix which has in each row 2 float and 1 string at the end. ,"import numpy as np
matrix = [[1, 0, 'aaa'], [0, 1, 'bbb'], [0, 1, 'ccc']]
np.savetxt('test', matrix, delimiter='  ', header='string', comments='', fmt='%s')
","import numpy as np

matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(matrix)

# Solution:

# np.savetxt('matrix.txt', matrix, fmt='%2.2f')

# Solution:

# np.savetxt('matrix.txt', matrix, fmt='%2.2f', delimiter="
925,Write a Python program to check whether multiple variables have the same value. ,"x = 20
y = 20
z = 20
if x == y == z == 20:
    print(""All variables have same value!"")  
	","def check_multiple_variables(a, b, c):
    if a == b and b == c:
        return True
    else:
        return False

print(check_multiple_variables(1, 2, 3))
print(check_multiple_variables(1, 2, 3, 4))
print(check_multiple_variables(1, 2, 3, 4, 5))

""""""

""""""

def check_multiple_variables(a, b, c"
926,"Write a Python program to write a string to a buffer and retrieve the value written, at the end discard buffer memory. ","import io
# Write a string to a buffer
output = io.StringIO()
output.write('Python Exercises, Practice, Solution')
# Retrieve the value written
print(output.getvalue())
# Discard buffer memory
output.close()
","def solution(s):
    # Your code here
    return s[-1]

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)"
927,Write a Python program to copy the contents of a file to another file . ,"from shutil import copyfile
copyfile('test.py', 'abc.py')
","import os

def copy_file(source, destination):
    with open(source, 'r') as source_file:
        with open(destination, 'w') as destination_file:
            for line in source_file:
                destination_file.write(line)

if __name__ == '__main__':
    source = 'C:\\Users\\srin\\Desktop\\Python\\Python_Project\\sample.txt'
    destination = 'C:\\Users\\"
928,Write a NumPy program to merge three given NumPy arrays of same shape. ,"import numpy as np
arr1 = np.random.random(size=(25, 25, 1))
arr2 = np.random.random(size=(25, 25, 1))
arr3 = np.random.random(size=(25, 25, 1))
print(""Original arrays:"")
print(arr1)
print(arr2)
print(arr3)
result = np.concatenate((arr1, arr2, arr3), axis=-1)
print(""\nAfter concatenate:"")
print(result) 
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

c = np.concatenate((a, b), axis=0)
print(c)

d = np.concatenate((a, b), axis=1)
print(d)

e = np.concatenate((a,"
929,Write a NumPy program to interchange two axes of an array. ,"import numpy as np
x = np.array([[1,2,3]])
print(x)
y =  np.swapaxes(x,0,1)
print(y)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a)
print(b)

a[0, 1] = b[1, 0]
a[0, 2] = b[1, 1]
a[1, 0] = b[2, 0]
a[1, 1] = b["
930,Write a Python program to decapitalize the first letter of a given string. ,"def decapitalize_first_letter(s, upper_rest = False):
  return ''.join([s[:1].lower(), (s[1:].upper() if upper_rest else s[1:])]) 
print(decapitalize_first_letter('Java Script'))
print(decapitalize_first_letter('Python'))
","def decapitalize(string):
    return string[0].upper() + string[1:].lower()

print(decapitalize(""Python is a high-level general-purpose programming language. It is based on the abstract syntax tree of the modern world. It is also a general-purpose programming language, and it is often used as a formal language. It is also a general-purpose programming language, and it is often used as a formal language. It is also a general-purpose programming language, and it is"
931,"Write a Pandas program to select first 2 rows, 2 columns and specific two columns from World alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nSelect first 2 rows:"")
print(w_a_con.iloc[:2])
print(""\nSelect first 2 columns:"")
print(w_a_con.iloc[:,:2].head())
print(""\nSelect 2 specific columns:"")
print(w_a_con[['Display Value', 'Year']])
","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/Alcohol-Consumption/world_alcohol.csv')
df.head()

df.columns

df.columns = ['Year', 'Country', 'Alcohol', 'Consumption']

df.head()

df.head(2)

df.head(2, columns="
932,Write a NumPy program to compute e,"import numpy as np
x = np.array([1., 2., 3., 4.], np.float32)
print(""Original array: "")
print(x)
print(""\ne^x, element-wise of the said:"")
r = np.exp(x)
print(r)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a)
print(b)

print(a.shape)
print(b.shape)

print(a.ndim)
print(b.ndim)

print(a.size)
print(b.size)

print(a.dtype)
print("
933,Write a Python program to move the specified number of elements to the start of the given list. ,"def move_start(nums, offset):
  return nums[-offset:] + nums[:-offset] 
print(move_start([1, 2, 3, 4, 5, 6, 7, 8], 3))
print(move_start([1, 2, 3, 4, 5, 6, 7, 8], -3))
print(move_start([1, 2, 3, 4, 5, 6, 7, 8], 8))
print(move_start([1, 2, 3, 4, 5, 6, 7, 8], -8))
print(move_start([1, 2, 3, 4, 5, 6, 7, 8], 7))
print(move_start([1, 2, 3, 4, 5, 6, 7, 8], -7))
","def move_elements(lst, n):
    lst.insert(0, n)
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 5
move_elements(lst, n)
print(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 5
move_e"
934,Write a Python program to find and print all li tags of a given web page. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.w3resource.com/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""\nFind and print all li tags:\n"")
for tag in soup.find_all(""li""):
    print(""{0}: {1}"".format(tag.name, tag.text))
","import re

url = ""https://www.python.org/~guido/python-projects/index.html""

# find all li tags
# find all tags
# find all tags with class
# find all tags with class and class name
# find all tags with class and class name
# find all tags with class and class name and class name
# find all tags with class and class name and class name and class name
# find all tags with class and class name and class name and class"
935,Write a Pandas program to add summation to a row of the given excel file. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')
sum_row=df[[""Production"", ""Labor_Hours""]].sum()
df_sum=pd.DataFrame(data=sum_row).T
df_sum=df_sum.reindex(columns=df.columns)
df_sum
","import pandas as pd

# Read the data from the excel file
df = pd.read_excel('data.xlsx')

# Add the summation to the row
df['summation'] = df['summation'].apply(lambda x: x + df['summation'])

# Write the dataframe to the excel file
df.to_excel('summation.xlsx')

# Read the data from the excel file"
936,"Write a Python program to make a chain of function decorators (bold, italic, underline etc.) in Python. ","def make_bold(fn):
    def wrapped():
        return ""<b>"" + fn() + ""</b>""
    return wrapped

def make_italic(fn):
    def wrapped():
        return ""<i>"" + fn() + ""</i>""
    return wrapped

def make_underline(fn):
    def wrapped():
        return ""<u>"" + fn() + ""</u>""
    return wrapped
@make_bold
@make_italic
@make_underline
def hello():
    return ""hello world""
print(hello()) ## returns ""<b><i><u>hello world</u></i></b>""
","def bold(func):
    def wrapper(*args, **kwargs):
        return f'{func(*args, **kwargs)} {func.__name__}'
    return wrapper

def italic(func):
    def wrapper(*args, **kwargs):
        return f'{func(*args, **kwargs)} {func.__name__}'
    return wrapper

def underline(func):
    def wrapper(*args,"
937,Write a Python program to remove an element from a given list. ,"student = ['Ricky Rivera', 98, 'Math', 90, 'Science']
print(""Original list:"")
print(student)
print(""\nAfter deleting an element:, using index of the element:"")
del(student[0])
print(student)
","def remove_element(lst, element):
    lst.remove(element)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
remove_element(lst, 5)
print(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
remove_element(lst, 5)
print(lst)

lst = [1, 2, 3"
938,Write a Python program to count repeated characters in a string. ,"import collections
str1 = 'thequickbrownfoxjumpsoverthelazydog'
d = collections.defaultdict(int)
for c in str1:
    d[c] += 1

for c in sorted(d, key=d.get, reverse=True):
  if d[c] > 1:
      print('%s %d' % (c, d[c]))
","def repeated_char(s):
    count = 0
    for i in s:
        if i == s[count]:
            count += 1
        else:
            count = 0
    return count

print(repeated_char(""abcabcbb""))
print(repeated_char(""bbbbb""))
print(repeated_char(""pwwkew""))

""""""

def repeated_char(s):
    count = 0
    for i in s:
        if i == s["
939,Write a Pandas program to check if a specified column starts with a specified string in a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})
print(""Original DataFrame:"")
print(df)
print(""\nIf a specified column starts with a specified string?"")
df['company_code_starts_with'] = list(
    map(lambda x: x.startswith('ze'), df['company_code']))
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

print(df['col1'].str.startswith('col'))

# Output:
# True
# True
# True
# False
# False"
940,Write a NumPy program to replace all the nan (missing values) of a given array with the mean of another array. ,"import numpy as np
array_nums1 = np.arange(20).reshape(4,5)
array_nums2 = np.array([[1,2,np.nan],[4,5,6],[np.nan, 7, np.nan]])
print(""Original arrays:"")
print(array_nums1)
print(array_nums2)
print(""\nAll the nan of array_nums2 replaced by the mean of array_nums1:"")
array_nums2[np.isnan(array_nums2)]= np.nanmean(array_nums1)
print(array_nums2)
","import numpy as np

a = np.array([[1, 2, np.nan], [3, 4, 5], [np.nan, 6, 7]])
print(a)

b = np.array([[1, 2, 3], [4, 5, 6], [np.nan, np.nan, 7]])
print(b)

c = np.array([[1, 2, 3], [4, 5"
941,Write a Python program to execute a string containing Python code. ,"mycode = 'print(""hello world"")'
code = """"""
def mutiply(x,y):
    return x*y

print('Multiply of 2 and 3 is: ',mutiply(2,3))
""""""
exec(mycode)
exec(code)
","def my_function(s):
    return s.upper()

print(my_function(""Python is fun""))

""""""

# Solution:

def my_function(s):
    return s.upper()

print(my_function(""Python is fun""))"
942,Write a Python program to check whether an integer fits in 64 bits. ,"int_val = 30
if int_val.bit_length() <= 63:
    print((-2 ** 63).bit_length())
    print((2 ** 63).bit_length())
	","def check_64bit(n):
    if n > 0:
        return True
    else:
        return False

print(check_64bit(123))
print(check_64bit(0))
print(check_64bit(1))
print(check_64bit(2))
print(check_64bit(3))
print(check_64bit(4))
print(check_64bit(5))
print(check_64bit(6))
print(check_"
943,Write a Python program to calculate the sum of the numbers in a list between the indices of a specified range. ,"def sum_Range_list(nums, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += nums[i]                                                                                                                                                                                                  
    return sum_range   

nums = [2,1,5,6,8,3,4,9,10,11,8,12]
print(""Original list:"")
print(nums)
m = 8
n = 10
print(""Range:"",m,"","",n) 
print(""\nSum of the specified range:"")
print(sum_Range_list(nums, m, n))
","def sum_of_numbers(nums, start, end):
    return sum(nums[start:end])

print(sum_of_numbers([1, 2, 3, 4, 5], 0, 5))

""""""

def sum_of_numbers(nums, start, end):
    return sum(nums[start:end])

print(sum_of_numbers([1, 2, 3, 4, 5],"
944,Write a Pandas program to convert year-month string to dates adding a specified day of the month. ,"import pandas as pd
from dateutil.parser import parse
date_series = pd.Series(['Jan 2015', 'Feb 2016', 'Mar 2017', 'Apr 2018', 'May 2019'])
print(""Original Series:"")
print(date_series)
print(""\nNew dates:"")
result = date_series.map(lambda d: parse('11 ' + d))
print(result)
","import pandas as pd

# Create a dataframe from the csv file
df = pd.read_csv('/Users/srinivasan/Downloads/data.csv')

# Create a dataframe from the csv file
df = pd.read_csv('/Users/srinivasan/Downloads/data.csv')

# Create a dataframe from the csv file
df = pd.read_csv('/Users/s"
945,Write a NumPy program to convert numpy datetime64 to Timestamp. ,"import numpy as np
from datetime import datetime
dt = datetime.utcnow()
print(""Current date:"")
print(dt)
dt64 = np.datetime64(dt)
ts = (dt64 - np.datetime64('1970-01-01T00:00:00Z')) / np.timedelta64(1, 's')
print(""Timestamp:"")
print(ts)
print(""UTC from Timestamp:"")
print(datetime.utcfromtimestamp(ts))
","import numpy as np

# Convert numpy datetime64 to Timestamp
np.datetime64(np.datetime64('2021-01-01'), 'D')

# Convert Timestamp to numpy datetime64
np.datetime64(np.datetime64('2021-01-01'), 'D')

# Convert numpy datetime64 to Timestamp
np.datetime64(np.datetime64('2021-01-01'), 'D')"
946,Write a Pandas program to rename all and only some of the column names from world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
new_w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nRename all the column names:"")
w_a_con.columns = ['year','who_region','country','beverage_types','display_values']
print(w_a_con.head())
print(""\nRenaming only some of the column names:"")
new_w_a_con.rename(columns = {""WHO region"":""WHO_region"",""Display Value"":""Display_Value"" },inplace = True)
print(new_w_a_con.head()) 
","import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/dataprofessor/data/master/world_alcohol_consumption.csv')
df.rename(columns={'gdpPercap': 'gdp_per_cap'}, inplace=True)
df.rename(columns={'lifeExp': 'life_exp'}, inplace=True)
df.rename(column"
947,Write a Python program to get the n minimum elements from a given list of numbers. ,"def min_n_nums(nums, n = 1):
  return sorted(nums, reverse = False)[:n]

nums = [1, 2, 3]
print(""Original list elements:"")
print(nums)
print(""Minimum values of the said list:"", min_n_nums(nums))
nums = [1, 2, 3]
print(""\nOriginal list elements:"")
print(nums)
print(""Two minimum values of the said list:"", min_n_nums(nums,2))
nums = [-2, -3, -1, -2, -4, 0, -5]
print(""\nOriginal list elements:"")
print(nums)
print(""Threee minimum values of the said list:"", min_n_nums(nums,3))
nums = [2.2, 2, 3.2, 4.5, 4.6, 5.2, 2.9]
print(""\nOriginal list elements:"")
print(nums)
print(""Two minimum values of the said list:"", min_n_nums(nums, 2))
","def get_min(nums):
    return min(nums)

print(get_min([1, 2, 3, 4, 5]))

""""""

def get_min(nums):
    return min(nums)

print(get_min([1, 2, 3, 4, 5]))

""""""

def get_min(nums):
    return min(nums)

print(get_min([1, 2, 3,"
948,Write a Pandas program to create a dataframe and set a title or name of the index column. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
                                index = ['t1', 't2', 't3', 't4', 't5', 't6'])
print(""Original DataFrame:"")
print(df)
df.index.name = 'Index_name'
print(""\nSaid DataFrame with a title or name of the index column:"")
print(df)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

# Create a title
df.index.name = 'index'

# Create a title
df.index.name = 'index'

# Create a title
df.index.name = 'index'

# Create a"
949,Write a Pandas program to join the two dataframes with matching records from both sides where available. ,"import pandas as pd
student_data1 = pd.DataFrame({
        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5'],
         'name': ['Danniella Fenton', 'Ryder Storey', 'Bryce Jensen', 'Ed Bernal', 'Kwame Morin'], 
        'marks': [200, 210, 190, 222, 199]})

student_data2 = pd.DataFrame({
        'student_id': ['S4', 'S5', 'S6', 'S7', 'S8'],
        'name': ['Scarlette Fisher', 'Carla Williamson', 'Dante Morse', 'Kaiser William', 'Madeeha Preston'], 
        'marks': [201, 200, 198, 219, 201]})

print(""Original DataFrames:"")
print(student_data1)
print(student_data2)
merged_data = pd.merge(student_data1, student_data2, on='student_id', how='outer')
print(""Merged data (outer join):"")
print(merged_data)
","import pandas as pd
import numpy as np

df1 = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})
df2 = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col3': [10, 20, 30, 40, 50]})

df = pd.concat([df1"
950,Write a Python program to create a symbolic link and read it to decide the original file pointed by the link. ,"import os
path = '/tmp/' + os.path.basename(__file__)
print('Creating link {} -> {}'.format(path, __file__))
os.symlink(__file__, path)
stat_info = os.lstat(path)
print('\nFile Permissions:', oct(stat_info.st_mode))
print('\nPoints to:', os.readlink(path))
#removes the file path
os.unlink(path)
","import os

# Create a symbolic link
os.symlink(""/home/user/file.txt"", ""/home/user/file2.txt"")

# Read the link
print(os.readlink(""/home/user/file.txt""))

# Create a symbolic link
os.symlink(""/home/user/file2.txt"", ""/home/user/file3.txt"")

# Read the link
print(os.readlink"
951,Write a Python program to reverse strings in a given list of string values. ,"def reverse_strings_list(string_list):
    result = [x[::-1] for x in string_list]
    return result

colors_list = [""Red"", ""Green"", ""Blue"", ""White"", ""Black""]
print(""\nOriginal lists:"")
print(colors_list)
print(""\nReverse strings of the said given list:"")
print(reverse_strings_list(colors_list))
","def reverse_string(string):
    return string[::-1]

print(reverse_string(['a', 'b', 'c', 'd', 'e', 'f']))

""""""

def reverse_string(string):
    return string[::-1]

print(reverse_string(['a', 'b', 'c', 'd', 'e', 'f']))"
952,Write a Pandas program to convert integer or float epoch times to Timestamp and DatetimeIndex. ,"import pandas as pd
dates1 = pd.to_datetime([1329806505, 129806505, 1249892905,
                1249979305, 1250065705], unit='s')
print(""Convert integer or float epoch times to Timestamp and DatetimeIndex upto second:"")
print(dates1)
print(""\nConvert integer or float epoch times to Timestamp and DatetimeIndex upto milisecond:"")
dates2 = pd.to_datetime([1249720105100, 1249720105200, 1249720105300,
                1249720105400, 1249720105500], unit='ms')
print(dates2)
","import pandas as pd

# convert epoch times to Timestamp
df = pd.DataFrame({""epoch"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,"
953,Write a Python program to convert more than one list to nested dictionary. ,"def nested_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result

student_id = [""S001"", ""S002"", ""S003"", ""S004""] 
student_name = [""Adina Park"", ""Leyton Marsh"", ""Duncan Boyle"", ""Saim Richards""] 
student_grade = [85, 98, 89, 92]
print(""Original strings:"")
print(student_id)
print(student_name)
print(student_grade)
print(""\nNested dictionary:"")
ch='a'
print(nested_dictionary(student_id, student_name, student_grade))
","def nested_dict_to_dict(nested_list):
    dictionary = {}
    for i in range(len(nested_list)):
        dictionary[i] = nested_list[i]
    return dictionary

nested_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(nested_dict_to_dict(nested_list))

""""""

# Solution

def nested_dict_to"
954,Write a Python program to find a first even and odd number in a given list of numbers. ,"def first_even_odd(nums):
    first_even = next((el for el in nums if el%2==0),-1)
    first_odd = next((el for el in nums if el%2!=0),-1)
    return first_even,first_odd

nums= [1,3,5,7,4,1,6,8]
print(""Original list:"")
print(nums)
print(""\nFirst even and odd number of the said list of numbers:"")
print(first_even_odd(nums))
","def even_odd(numbers):
    even = 0
    odd = 0
    for i in numbers:
        if i % 2 == 0:
            even += 1
        else:
            odd += 1
    return even, odd

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(even_odd(numbers))

""""""

# Solution 1

def even_odd(numbers):"
955,Write a Python program to sort a list of lists by a given index of the inner list. ,"from operator import itemgetter
def index_on_inner_list(list_data, index_no):
    result = sorted(list_data, key=itemgetter(index_no))
    return result
students = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] 
print (""Original list:"")
print(students)
index_no = 0
print(""\nSort the said list of lists by a given index"",""( Index = "",index_no,"") of the inner list"")
print(index_on_inner_list(students, index_no))
index_no = 2
print(""\nSort the said list of lists by a given index"",""( Index = "",index_no,"") of the inner list"")
print(index_on_inner_list(students, index_no))
","l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

l.sort(key=lambda x: x[0])

print(l)

l.sort(key=lambda x: x[1])

print(l)

l.sort(key=lambda x: x[2])

print(l)

l.sort(key=lambda x: x[0])

print(l)"
956,Write a Python program to generate a list of numbers in the arithmetic progression starting with the given positive integer and up to the specified limit. ,"def arithmetic_progression(n, x):
  return list(range(n, x + 1, n))

print(arithmetic_progression(1, 15))
print(arithmetic_progression(3, 37))
print(arithmetic_progression(5, 25))
","import math

def generate_list(start, limit):
    list = []
    for i in range(start, limit):
        if i % 2 == 0:
            list.append(i**2)
        else:
            list.append(i**3)
    return list

print(generate_list(1, 10))

# Output: [1, 4, 9, 16, 25, 36, 49, 64"
957,Write a NumPy program to sort an given array by the n,"import numpy as np
print(""Original array:\n"")
nums = np.random.randint(0,10,(3,3))
print(nums)
print(""\nSort the said array by the nth column: "")
print(nums[nums[:,1].argsort()])
","import numpy as np

arr = np.array([[1,2,3,4,5,6,7,8,9,10],
                [10,9,8,7,6,5,4,3,2,1]])

arr.sort()
print(arr)

arr.sort(axis=0)
print(arr)

arr.sort(axis=1)
print(arr)

arr.sort(axis=0,kind='quicksort')"
958,Write a Python program to sort a list of elements using Bogosort sort. ,"import random

def bogosort(nums):
    def isSorted(nums):
        if len(nums) < 2:
            return True
        for i in range(len(nums) - 1):
            if nums[i] > nums[i + 1]:
                return False
        return True

    while not isSorted(nums):
        random.shuffle(nums)
    return nums
num1 = input('Input  comma separated numbers:\n').strip()
nums = [int(item) for item in num1.split(',')]
print(bogosort(nums))
","def bogo_sort(lst):
    for i in range(len(lst)):
        random.shuffle(lst)
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(bogo_sort(lst))

""""""

# Time complexity: O(n^2)
# Space Complexity: O(1)

def bogo_sort(lst):"
959,"Write a Python program to create a floating-point representation of the Arrow object, in UTC time using arrow module. ","import arrow
a = arrow.utcnow()
print(""Current Datetime:"")
print(a)
print(""\nFloating-point representation of the said Arrow object:"")
f = arrow.utcnow().float_timestamp
print(f) 
","import arrow

# create a datetime object
dt = arrow.now()

# create a string representation of the datetime object
print(dt.format('YYYY-MM-DD HH:mm:ss'))

# create a datetime object from a string representation
dt = arrow.get(dt.format('YYYY-MM-DD HH:mm:ss'))

# create a string representation of the datetime object
print(dt.format('"
960,"Write a Python program to create a time object with the same hour, minute, second, microsecond and timezone info. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nTime object with the same hour, minute, second, microsecond and timezone info.:"")
print(arrow.utcnow().timetz())
","import datetime

# create a datetime object
dt = datetime.datetime(2021, 8, 1, 12, 30, 0, 0)

# print the datetime object
print(dt)

# create a datetime object with the same hour, minute, second, microsecond and timezone info
dt = datetime.datetime(2021, 8, 1, 12, 30, 0, 0, tzinfo=datetime."
961,Write a NumPy program to append values to the end of an array. ,"import numpy as np
x = [10, 20, 30]
print(""Original array:"")
print(x)
x = np.append(x, [[40, 50, 60], [70, 80, 90]])
print(""After append values to the end of the array:"")
print(x)
","import numpy as np

a = np.array([1, 2, 3, 4, 5])

a.append(6)

print(a)

# Output:
# [1 2 3 4 5 6]

# Hint: You can use np.append() to add new values to an array.

# Hint: You can use np.append() to add new values to an array.

# Hint: You can use np.append() to add new values to"
962,Write a Python program to convert a string to a list. ,"import ast
color =""['Red', 'Green', 'White']""
print(ast.literal_eval(color))
","s = ""Hello World""
print(list(s))

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution"
963,"Write a Python program to print a specified list after removing the 0th, 4th and 5th elements. ","color = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']
color = [x for (i,x) in enumerate(color) if i not in (0,4,5)]
print(color)
","import sys

def remove_zero(lst):
    lst.pop(0)
    lst.pop(4)
    lst.pop(5)
    return lst

if __name__ == '__main__':
    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    print(remove_zero(lst))"
964,Write a Python program to convert a given string to snake case. ,"from re import sub
def snake_case(s):
  return '_'.join(
    sub('([A-Z][a-z]+)', r' \1',
    sub('([A-Z]+)', r' \1',
    s.replace('-', ' '))).split()).lower()

print(snake_case('JavaScript'))
print(snake_case('Foo-Bar'))
print(snake_case('foo_bar'))
print(snake_case('--foo.bar'))
print(snake_case('Foo-BAR'))
print(snake_case('fooBAR'))
print(snake_case('foo bar'))
","s = 'hello world'
print(s.lower())

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

#"
965,Write a Python program to find common element(s) in a given nested lists. ,"def common_in_nested_lists(nested_list):
    result = list(set.intersection(*map(set, nested_list)))
    return result
nested_list = [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]
print(""\nOriginal lists:"")
print(nested_list)
print(""\nCommon element(s) in nested lists:"")
print(common_in_nested_lists(nested_list))
","def common_elements(l1, l2):
    common_elements = []
    for i in l1:
        for j in l2:
            if i == j:
                common_elements.append(i)
    return common_elements

l1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
l2 = [[1, 2, 3], [4, 5, 6], [7, 8,"
966,Write a NumPy program to remove nan values from a given array. ,"import numpy as np
x = np.array([200, 300, np.nan, np.nan, np.nan ,700])
y = np.array([[1, 2, 3], [np.nan, 0, np.nan] ,[6,7,np.nan]] )
print(""Original array:"")
print(x)
print(""After removing nan values:"")
result = x[np.logical_not(np.isnan(x))]
print(result)
print(""\nOriginal array:"")
print(y)
print(""After removing nan values:"")
result = y[np.logical_not(np.isnan(y))]
print(result)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr = np.delete(arr, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr = np.delete(arr, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], axis=0)

arr = np.delete(arr,"
967,"Write a Pandas program to create a plot of adjusted closing prices, thirty days and forty days simple moving average of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
stock_data = df1.set_index('Date')
close_px = stock_data['Adj Close']
stock_data['SMA_30_days'] = stock_data.iloc[:,4].rolling(window=30).mean() 
stock_data['SMA_40_days'] = stock_data.iloc[:,4].rolling(window=40).mean()
plt.figure(figsize=[10,8])
plt.grid(True)
plt.title('Historical stock prices of Alphabet Inc. [01-04-2020 to 30-09-2020]\n',fontsize=18, color='black')
plt.plot(stock_data['Adj Close'],label='Adjusted Closing Price', color='black')
plt.plot(stock_data['SMA_30_days'],label='30 days simple moving average', color='red')
plt.plot(stock_data['SMA_40_days'],label='40 days simple moving average', color='green')
plt.legend(loc=2)
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])
df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')

df['Adj Close'] = df['Adj Close'].rolling"
968,Write a NumPy program to create a 3x4 matrix filled with values from 10 to 21. ,"import numpy as np
m= np.arange(10,22).reshape((3, 4))
print(m)
","import numpy as np

matrix = np.array([[10, 20, 30, 40],
                   [50, 60, 70, 80],
                   [90, 100, 110, 120]])

print(matrix)

# solution

# solution

# solution

# solution

# solution

# solution

# solution

# solution

# solution

# solution

# solution

# solution

# solution"
969,Write a NumPy program to extract second and third elements of the second and third rows from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: Second and third elements of the second and third rows"")
print(arra_data[1:3, 1:3])
","import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12],
                [13, 14, 15, 16]])

print(arr[2, 2])
print(arr[2, 3])

# Output:
# 5
# 6
# 7
# 8
# 13
# 14
#"
970,Write a Pandas program to create a Pivot table and find survival rate by gender on various classes. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table('survived', index='sex', columns='class')
print(result)
","import pandas as pd
import numpy as np

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/iris.csv')

# Create a pivot table
pivot = df.pivot_table(index='species', columns='class', values='petal_length', aggfunc='mean')

# Find survival rate by gender
pivot['survived'] = pivot['petal_length"
971,Write a NumPy program to calculate percentiles for a sequence or single-dimensional NumPy array. ,"import numpy as np
nums = np.array([1,2,3,4,5])
print(""50th percentile (median):"")
p = np.percentile(nums, 50)
print(p)
print(""40th percentile:"")
p = np.percentile(nums, 40)
print(p)
print(""90th percentile:"")
p = np.percentile(nums, 90)
print(p)
","import numpy as np

# Create a NumPy array with the values in the range [0, 100]
arr = np.arange(100)

# Print the values in the array
print(arr)

# Print the values in the array, but with the values rounded to 2 decimal places
print(arr, 'rounded to 2 decimal places')

# Print the values in the array, but with the values rounded to 5 decimal places
print(arr, 'rounded to 5"
972,Write a Python program to break a given list of integers into sets of a given positive number. Return true or false. ,"import collections as clt
def check_break_list(nums, n):
    coll_data = clt.Counter(nums)
    for x in sorted(coll_data.keys()):
        for index in range(1, n):
            coll_data[x+index] = coll_data[x+index]  - coll_data[x]
            if coll_data[x+index] < 0:
                return False
    return True

nums = [1,2,3,4,5,6,7,8]
n = 4
print(""Original list:"",nums)
print(""Number to devide the said list:"",n)
print(check_break_list(nums, n))
nums = [1,2,3,4,5,6,7,8]
n = 3
print(""\nOriginal list:"",nums)
print(""Number to devide the said list:"",n)
print(check_break_list(nums, n))
","def break_list(list):
    set_list = []
    for i in list:
        if i not in set_list:
            set_list.append(i)
    return len(set_list) == len(list)

print(break_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(break_list([1, 2, 3, 4, 5, 6,"
973,Write a Python program to sort a list of elements using the insertion sort algorithm. ,"def insertionSort(nlist):
   for index in range(1,len(nlist)):

     currentvalue = nlist[index]
     position = index

     while position>0 and nlist[position-1]>currentvalue:
         nlist[position]=nlist[position-1]
         position = position-1

     nlist[position]=currentvalue

nlist = [14,46,43,27,57,41,45,21,70]
insertionSort(nlist)
print(nlist)
","def insertionSort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j] :
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(insertionSort(arr))

"""""""
974,"Write a Python program to find the numbers of a given string and store them in a list, display the numbers which are bigger than the length of the list in sorted form. Use lambda function to solve the problem. ","str1 = ""sdf 23 safs8 5 sdfsd8 sdfs 56 21sfs 20 5""
print(""Original string: "",str1)
str_num=[i for i in str1.split(' ')]
lenght=len(str_num)
numbers=sorted([int(x) for x in str_num if x.isdigit()])
print('Numbers in sorted form:')
for i in ((filter(lambda x:x>lenght,numbers))):
    print(i,end=' ')
","def solution(str):
    lst = list(map(int, str))
    lst.sort()
    return lst

print(solution(""abcd""))

# Time complexity: O(n)
# Space Complexity: O(n)

# Solution 2:

def solution(str):
    lst = list(map(int,"
975,Write a Pandas program to merge two given dataframes with different columns. ,"import pandas as pd
data1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],
                     'key2': ['K0', 'K1', 'K0', 'K1'],
                     'P': ['P0', 'P1', 'P2', 'P3'],
                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) 
data2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],
                      'key2': ['K0', 'K0', 'K0', 'K0'],
                      'R': ['R0', 'R1', 'R2', 'R3'],
                      'S': ['S0', 'S1', 'S2', 'S3']})
print(""Original DataFrames:"")
print(data1)
print(""--------------------"")
print(data2)
print(""\nMerge two dataframes with different columns:"")
result = pd.concat([data1,data2], axis=0, ignore_index=True)
print(result)
","df1 = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})
df2 = pd.DataFrame({'col1': [7, 8, 9], 'col2': [10, 11, 12]})

df1.merge(df2, on='col1')

""""""

import pandas as pd
import numpy as np

df1 = pd.DataFrame({'col1"
976,Write a Pandas program to drop those rows from a given DataFrame in which specific columns have missing values. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[np.nan,np.nan,70002,np.nan,np.nan,70005,np.nan,70010,70003,70012,np.nan,np.nan],
'purch_amt':[np.nan,270.65,65.26,np.nan,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,np.nan],
'ord_date': [np.nan,'2012-09-10',np.nan,np.nan,'2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17',np.nan],
'customer_id':[np.nan,3001,3001,np.nan,3002,3001,3001,3004,3003,3002,3001,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nDrop those rows in which specific columns have missing values:"")
result = df.dropna(subset=['ord_no', 'customer_id'])
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5],
                   'col2': [10, 20, 30, 40, 50],
                   'col3': [100, 200, 300, 400, 500]})

df.dropna(subset=['col2'])

df.dropna(subset=['col3'])

df.dropna(subset"
977,Write a Python program to find the difference between elements (n+1th - nth) of a given list of numeric values. ,"def elements_difference(nums):
    result = [j-i for i, j in zip(nums[:-1], nums[1:])]
    return result

nums1 = [1,2,3,4,5,6,7,8,9,10]
nums2 = [2,4,6,8]

print(""Original list:"")
print(nums1)
print(""\nDfference between elements (n+1th  nth) of the said list :"")
print(elements_difference(nums1))
print(""\nOriginal list:"")
print(nums2)
print(""\nDfference between elements (n+1th  nth) of the said list :"")
print(elements_difference(nums2))

","def diff(nums):
    return nums[nums[0]] - nums[nums[nums[0] + 1]]

n = int(input())
nums = [int(x) for x in input().split()]
print(diff(nums))

# Solution:

# def diff(nums):
#     return nums[nums[0]] - nums[nums[nums"
978,Write a Pandas program to create a time-series from a given list of dates as strings. ,"import pandas as pd
import numpy as np
import datetime
from datetime import datetime, date 
dates = ['2014-08-01','2014-08-02','2014-08-03','2014-08-04']
time_series = pd.Series(np.random.randn(4), dates)
print(time_series)
","import pandas as pd

# Create a dataframe from the list of dates
dates = ['Jan-01', 'Jan-02', 'Jan-03', 'Jan-04', 'Jan-05', 'Jan-06', 'Jan-07', 'Jan-08', 'Jan-09', 'Jan-10', 'Jan-11', 'Jan-12', 'Jan-13', 'Jan-14', 'Jan-15', 'Jan-16', 'Jan-17', '"
979,Write a Pandas program to convert a series of date strings to a timeseries. ,"import pandas as pd
date_series = pd.Series(['01 Jan 2015', '10-02-2016', '20180307', '2014/05/06', '2016-04-12', '2019-04-06T11:20'])
print(""Original Series:"")
print(date_series)
print(""\nSeries of date strings to a timeseries:"")
print(pd.to_datetime(date_series))
","import pandas as pd

# Create a dataframe from the string data
data = pd.Series(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])

# Create a timeseries from the dataframe
ts = pd.Series(data)

# Create a timeseries from the string data
ts = pd.Series(data.str.split('-'))"
980,"Write a NumPy program to create a 90x30 array filled with random point numbers, increase the number of items (10 edge elements) shown by the print statement. ","import numpy as np 
nums = np.random.randint(10, size=(90, 30))
print(""Original array:"")
print(nums)
print(""\nIncrease the number of items (10 edge elements) shown by the print statement:"")
np.set_printoptions(edgeitems=10)
print(nums)
","import numpy as np

# Create an array filled with random points
x = np.random.rand(90, 30)

# Increase the number of elements by 10
x = x + 10

# Print the array
print(x)

# Create a NumPy program to create a 90x30 array filled with random point numbers, increase the number of items (10 edge elements) shown by the print statement."
981,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight the minimum value in each column. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
def highlight_min(s):
    '''
    highlight the minimum in a Series red.
    '''
    is_max = s == s.min()
    return ['background-color: red' if v else '' for v in is_max]

print(""\nHighlight the minimum value in each column:"")
df.style.apply(highlight_min,subset=pd.IndexSlice[:, ['B', 'C', 'D', 'E']])
","import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randint(0, 100, size=(10, 4)), columns=['col1', 'col2', 'col3', 'col4'])
print(df)

df.loc[:, 'col1'] = np.random.randint(0, 100, size=10)
print(df)

df."
982,Write a Pandas program to split the following dataframe into groups and calculate quarterly purchase amount. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['05-10-2012','09-10-2012','05-10-2012','08-17-2012','10-09-2012','07-27-2012','10-09-2012','10-10-2012','10-10-2012','06-17-2012','07-08-2012','04-25-2012'],
'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
df['ord_date']= pd.to_datetime(df['ord_date']) 
print(""\nQuartly purchase amount:"")
result = df.set_index('ord_date').groupby(pd.Grouper(freq='Q')).agg({'purch_amt':sum})
print(result)
","df = pd.DataFrame({'Date': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                   'Amount': [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200]})

df.groupby('Date').sum()

df.groupby('Date').sum().plot()

df.group"
983,Write a NumPy program to sort a given array by row and column in ascending order. ,"import numpy as np  
nums = np.array([[5.54, 3.38, 7.99],
              [3.54, 4.38, 6.99],
              [1.54, 2.39, 9.29]])
print(""Original array:"")
print(nums)
print(""\nSort the said array by row in ascending order:"")
print(np.sort(nums))
print(""\nSort the said array by column in ascending order:"")
print(np.sort(nums, axis=0))
","import numpy as np

arr = np.array([[1,2,3,4,5,6,7,8,9,10],
                [10,11,12,13,14,15,16,17,18,19],
                [20,21,22,23,24,25,26,27,28,29]])

arr.sort(axis=0)
arr.sort(axis=1)

print(arr)

#"
984,Write a Python program that reads a given expression and evaluates it. ,"#https://bit.ly/2lxQysi
import re
print(""Input number of data sets:"")
class c(int):
    def __add__(self,n):
        return c(int(self)+int(n))
    def __sub__(self,n):
        return c(int(self)-int(n))
    def __mul__(self,n):
        return c(int(self)*int(n))
    def __truediv__(self,n):
        return c(int(int(self)/int(n)))
   
for _ in range(int(input())):
  print(""Input an expression:"")
  print(eval(re.sub(r'(\d+)',r'c(\1)',input()[:-1])))
",">>> import math
>>> math.sqrt(2)
1.0
>>> math.sqrt(3)
1.0
>>> math.sqrt(4)
1.0
>>> math.sqrt(5)
2.0
>>> math.sqrt(6)
2.0
>>> math.sqrt(7)
2.0
>>> math.sqrt(8)
2.0
>>> math.sqrt(9)
2.0
>>> math.sqrt("
985,"Write a NumPy program to create a 10x10 matrix, in which the elements on the borders will be equal to 1, and inside 0. ","import numpy as np
x = np.ones((10, 10))
x[1:-1, 1:-1] = 0
print(x)
","import numpy as np

matrix = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   [1, 2, 3, 4, 5, 6, 7"
986,Write a Python program to pack consecutive duplicates of a given list elements into sublists. ,"from itertools import groupby
def pack_consecutive_duplicates(l_nums):
    return [list(group) for key, group in groupby(l_nums)]
n_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]
print(""Original list:"") 
print(n_list)
print(""\nAfter packing consecutive duplicates of the said list elements into sublists:"")
print(pack_consecutive_duplicates(n_list)) 

","def pack_consecutive_duplicates(lst):
    # your code goes here
    pass

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40"
987,Write a Python program to remove additional spaces in a given list. ,"def test(lst):
    result =[]
    for i in lst:
        j = i.replace(' ','')
        result.append(j)
    return result

text = ['abc ', '  ', ' ', 'sdfds ', ' ', '     ', 'sdfds ', 'huy']
print(""\nOriginal list:"")
print(text)
print(""Remove additional spaces from the said list:"")
print(test(text))
","def remove_spaces(lst):
    for i in range(len(lst)):
        lst[i] = lst[i].replace("" "", """")
    return lst

lst = [""this is a string"", ""this is a string"", ""this is a string"", ""this is a string"", ""this is a string"", ""this is a string"", ""this is a string"", ""this is a string"", ""this is a string"", ""this is a string"", ""this is a"
988,Write a NumPy program to compute the 80th percentile for all elements in a given array along the second axis. ,"import numpy as np
x = np.arange(12).reshape((2, 6))
print(""\nOriginal array:"")
print(x)
r1 = np.percentile(x, 80, 1)
print(""\n80th percentile for all elements of the said array along the second axis:"")
print(r1)
","import numpy as np

a = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
              [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
              [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]])

print(np.percentile(a, [80, 90]))

# OUTPUT:"
989,Write a NumPy program to multiply a 5x3 matrix by a 3x2 matrix and create a real matrix product. ,"import numpy as np
x = np.random.random((5,3))
print(""First array:"")
print(x)
y = np.random.random((3,2))
print(""Second array:"")
print(y)
z = np.dot(x, y)
print(""Dot product of two arrays:"")
print(z)
","import numpy as np

# Create a 5x3 matrix
A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Create a 3x2 matrix
B = np.array([[10, 20], [30, 40]])

# Create a real matrix product
C = A @ B

# Print the result
print(C)

# Create a 5x"
990,Write a Pandas program to subtract two timestamps of same time zone or different time zone. ,"import pandas as pd
print(""Subtract two timestamps of same time zone:"")
date1 = pd.Timestamp('2019-03-01 12:00', tz='US/Eastern')
date2 = pd.Timestamp('2019-04-01 07:00', tz='US/Eastern')
print(""Difference: "", (date2-date1))
print(""\nSubtract two timestamps of different time zone:"")
date1 = pd.Timestamp('2019-03-01 12:00', tz='US/Eastern')
date2 = pd.Timestamp('2019-03-01 07:00', tz='US/Pacific')
# Remove the time zone and do the subtraction
print(""Difference: "", (date1.tz_localize(None) - date2.tz_localize(None)))
","import pandas as pd
import datetime

# Read the data from the csv file
df = pd.read_csv('/Users/srinivasan/Downloads/data.csv')

# Create a new column called 'date'
df['date'] = pd.to_datetime(df['date'])

# Create a new column called 'time'
df['time'] = df['date'].dt.time

# Create a new"
991,Write a Python program to get the weighted average of two or more numbers. ,"def weighted_average(nums, weights):
  return sum(x * y for x, y in zip(nums, weights)) / sum(weights)
nums1 = [10, 50, 40]
nums2 = [2, 5, 3]
print(""Original list elements:"")
print(nums1) 
print(nums2)
print(""\nWeighted average of the said two list of numbers:"")
print(weighted_average(nums1, nums2))
nums1 = [82, 90, 76, 83]
nums2 = [.2, .35, .45, 32]
print(""\nOriginal list elements:"")
print(nums1) 
print(nums2)
print(""\nWeighted average of the said two list of numbers:"")
print(weighted_average(nums1, nums2))
","def get_weighted_average(numbers):
    total = 0
    for num in numbers:
        total += num
    return total / len(numbers)

numbers = [1, 2, 3, 4, 5]
print(get_weighted_average(numbers))

numbers = [1, 2, 3, 4, 5]
print(get_weighted_average(numbers))

numbers = [1, 2, 3, 4, 5]"
992,Write a Python program to form Bigrams of words in a given list of strings. ,"def bigram_sequence(text_lst):
    result = [a for ls in text_lst for a in zip(ls.split("" "")[:-1], ls.split("" "")[1:])]
    return result
text = [""Sum all the items in a list"", ""Find the second smallest number in a list""]
print(""Original list:"")
print(text)
print(""\nBigram sequence of the said list:"")
print(bigram_sequence(text))
","def bigrams(words):
    # your code goes here
    return

""""""

# Solution 1

def bigrams(words):
    return set(words)

# Solution 2

def bigrams(words):
    return {tuple(words[i:i+2]) for i in range(len(words))}

# Solution 3

def bigrams(words):
    return {tuple(words[i:i+2]) for i in range("
993,Write a Python program to delete the last item from a singly linked list. ,"class Node:
    # Singly linked node
    def __init__(self, data=None):
        self.data = data
        self.next = None
class singly_linked_list:
    def __init__(self):
        # Createe an empty list
        self.tail = None
        self.head = None
        self.count = 0

    def append_item(self, data):
        #Append items on the list
        node = Node(data)
        if self.head:
            self.head.next = node
            self.head = node
        else:
            self.tail = node
            self.head = node
        self.count += 1
    
    def delete_item(self, data):
        # Delete an item from the list
        current = self.tail
        prev = self.tail
        while current:
            if current.data == data:
                if current == self.tail:
                    self.tail = current.next
                else:
                    prev.next = current.next
                self.count -= 1
                return
            prev = current
            current = current.next
    def iterate_item(self):
        # Iterate the list.
        current_item = self.tail
        while current_item:
            val = current_item.data
            current_item = current_item.next
            yield val

items = singly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')

print(""Original list:"")
for val in items.iterate_item():
    print(val)

print(""\nAfter removing the last item from the list:"")
items.delete_item('Java')
for val in items.iterate_item():
    print(val)
","# Node class
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# Linked List class
class LinkedList:
    def __init__(self):
        self.head = None
    
    # Function to delete the last item from a singly linked list
    def deleteLast(self):
        if self.head is None:
            return None
        
        # If the list is empty, return"
994,Write a Pandas program to filter words from a given series that contain atleast two vowels. ,"import pandas as pd
from collections import Counter
color_series = pd.Series(['Red', 'Green', 'Orange', 'Pink', 'Yellow', 'White'])
print(""Original Series:"")
print(color_series)
print(""\nFiltered words:"")
result = mask = color_series.map(lambda c: sum([Counter(c.lower()).get(i, 0) for i in list('aeiou')]) >= 2)
print(color_series[result])
","import pandas as pd

# Read the data
df = pd.read_csv('vowels.csv')

# Create a new column named 'vowels_with_two_vowels'
df['vowels_with_two_vowels'] = df['vowels'].str.contains('[aeiou]')

# Print the dataframe
print(df)

# Create a new column named 'vow"
995,Write a Python program to add leading zeroes to a string. ,"str1='122.22'
print(""Original String: "",str1)
print(""\nAdded trailing zeros:"")
str1 = str1.ljust(8, '0')
print(str1)
str1 = str1.ljust(10, '0')
print(str1)
print(""\nAdded leading zeros:"")
str1='122.22'
str1 = str1.rjust(8, '0')
print(str1)
str1 = str1.rjust(10, '0')
print(str1)
","def add_leading_zeroes(s, n):
    return s + str(n).zfill(len(s))

print(add_leading_zeroes(""1234"", 2))
print(add_leading_zeroes(""12345"", 3))
print(add_leading_zeroes(""123456789"", 4))

""""""

def add_leading_zeroes(s, n):
    return s + str(n).zfill(len(s))

print("
996,"Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and find details where ""Mine Name"" starts with ""P"". ","import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')    
df[df[""Mine_Name""].map(lambda x: x.startswith('P'))].head()
","import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')
df['Mine Name'] = df['Mine Name'].str.startswith('P')

print(df)

# Solution:

# df = pd.read_excel('coalpublic2013.xlsx')
# df['Mine Name'] = df['Mine Name'"
997,"Write a NumPy program to calculate round, floor, ceiling, truncated and round (to the given number of decimals) of the input, element-wise of a given array. ","import numpy as np
x = np.array([3.1, 3.5, 4.5, 2.9, -3.1, -3.5, -5.9])
print(""Original array: "")
print(x)
r1 = np.around(x)
r2 = np.floor(x)
r3 = np.ceil(x)
r4 = np.trunc(x)
r5 = [round(elem) for elem in x]

print(""\naround:   "", r1)
print(""floor:    "",r2)
print(""ceil:     "",r3)
print(""trunc:    "",r4)
print(""round:    "",r5)
","import numpy as np

a = np.array([1, 2, 3, 4, 5])

print(np.round(a))

print(np.floor(a))

print(np.ceil(a))

print(np.trunc(a))

# Output:
# [1.  2.  3.  4.  5.]"
998,Write a NumPy program to create a vector of length 10 with values evenly distributed between 5 and 50. ,"import numpy as np
v = np.linspace(10, 49, 5)
print(""Length 10 with values evenly distributed between 5 and 50:"")
print(v)
","import numpy as np

x = np.random.randint(5, size=10)
print(x)

# Solution:

# x = np.random.randint(5, size=10)
# print(x)

# Solution:

# x = np.random.randint(5, size=10)
# print(x)

# Solution:

# x = np.random.randint(5, size="
999,Write a Python program to check whether any word in a given sting contains duplicate characrters or not. Return True or False. ,"def duplicate_letters(text):
	word_list = text.split()
	for word in word_list:
		if len(word) > len(set(word)):
			return False
	return True
text = ""Filter out the factorials of the said list.""
print(""Original text:"")
print(text)
print(""Check whether any word in the said sting contains duplicate characrters or not!"")
print(duplicate_letters(text))
text = ""Python Exercise.""
print(""\nOriginal text:"")
print(text)
print(""Check whether any word in the said sting contains duplicate characrters or not!"")
print(duplicate_letters(text))
text = ""The wait is over.""
print(""\nOriginal text:"")
print(text)
print(""Check whether any word in the said sting contains duplicate characrters or not!"")
print(duplicate_letters(text))
","def check_duplicate(word):
    if word in word_list:
        return True
    else:
        return False

word = input(""Enter the word: "")
word_list = list(word)

if check_duplicate(word):
    print(""The word contains duplicate characters."")
else:
    print(""The word does not contain duplicate characters."")

# Output:
# Enter the word: abc"
1001,Write a Pandas program to rename names of columns and specific labels of the Main Index of the MultiIndex dataframe. ,"import pandas as pd 
import numpy as np
sales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'],
          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]
sales_tuples = list(zip(*sales_arrays))
sales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])
print(sales_tuples)
print(""\nConstruct a Dataframe using the said MultiIndex levels: "")
df = pd.DataFrame(np.random.randn(8, 5), index=sales_index)
print(df)
print(""\nRename the columns name of the said dataframe"")
df1 = df.rename(columns={0: ""col1"", 1: ""col2"", 2:""col3"", 3:""col4"", 4:""col5""})
print(df1)
print(""\nRename specific labels of the main index of the DataFrame"")
df2 = df1.rename(index={""sale2"": ""S2"", ""city2"": ""C2""})
print(df2)
","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/iris.csv?raw=true')

df.columns = ['sepal_length','sepal_width', 'petal_length', 'petal_width']

df.head()

df.columns = ['sepal_length','sepal_width', 'petal"
1002,Write a Pandas program to create a line plot of the historical stock prices of Alphabet Inc. between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-09-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1.set_index('Date')
plt.figure(figsize=(5,5))
plt.suptitle('Stock prices of Alphabet Inc.,\n01-04-2020 to 30-09-2020', \
                 fontsize=18, color='black')
plt.xlabel(""Date"",fontsize=16, color='black')
plt.ylabel(""$ price"", fontsize=16, color='black')
 
df2['Close'].plot(color='green');
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc Historical Prices.csv')

df['Date'] = pd.to_datetime(df['Date'])

df.set_index('Date', inplace=True)

plt.plot(df.index, df['Open'])
plt.show()

""""""

import pandas as p"
1003,Write a NumPy program to join a sequence of arrays along a new axis. ,"import numpy as np    
x = np.array([1, 2, 3])
y = np.array([2, 3, 4])
print(""Original arrays:"")
print(x)
print(y)
print(""Sequence of arrays along a new axis:"")
print(np.vstack((x, y)))
x = np.array([[1], [2], [3]])
y = np.array([[2], [3], [4]])
print(""\nOriginal arrays:"")
print(x)
print()
print(y)
print(""Sequence of arrays along a new axis:"")
print(np.vstack((x, y)))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

c = np.concatenate((a, b), axis=1)
print(c)

# Output:
# [[1 2 3 4 5 6 7 8 9]
#  [4 5 6 7 8 9 10 11 12]]

# %%"
1004,Write a Python program to rotate a given list by specified number of items to the right or left direction. ,"nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(""original List:"")
print(nums1)
print(""\nRotate the said list in left direction by 4:"")
result = nums1[3:] + nums1[:4]
print(result)
print(""\nRotate the said list in left direction by 2:"")
result = nums1[2:] + nums1[:2]
print(result)
print(""\nRotate the said list in Right direction by 4:"")
result = nums1[-3:] + nums1[:-4]
print(result)
print(""\nRotate the said list in Right direction by 2:"")
result = nums1[-2:] + nums1[:-2]
print(result)
","def rotate(lst, n):
    lst.reverse()
    for i in range(n):
        lst.append(lst.pop())
    lst.reverse()
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
print(rotate(lst, n))

""""""

# Solution 1

def rotate(lst, n"
1005,Write a Python program to get the last part of a string before a specified character. ,"str1 = 'https://www.w3resource.com/python-exercises/string'
print(str1.rsplit('/', 1)[0])
print(str1.rsplit('-', 1)[0])
","s = ""hello world""
print(s[-3:])

""""""

s = ""hello world""
print(s[-3:])"
1006,Write a NumPy program to create a 5x5 array with random values and find the minimum and maximum values. ,"import numpy as np
x = np.random.random((5,5))
print(""Original Array:"")
print(x) 
xmin, xmax = x.min(), x.max()
print(""Minimum and Maximum Values:"")
print(xmin, xmax)
","import numpy as np

# Create an array of random numbers
np.random.seed(0)
a = np.random.randint(10, size=(5, 5))
print(a)

# Find the minimum and maximum values
print(np.min(a))
print(np.max(a))

# Create a new array with random numbers
np.random.seed(0)
b = np.random.randint(10,"
1007,Write a NumPy program to find the 4th element of a specified array. ,"import numpy as np
x = np.array([[2, 4, 6], [6, 8, 10]], np.int32)
print(x)
e1 = x.flat[3]
print(""Forth e1ement of the array:"")
print(e1)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr[4])

# Output: 10

# Hint: You can use the built-in function np.where to find the index of the 4th element.

# Hint: You can use the built-in function np.where to find the index of the 4th element.

# Hint: You can use the"
1008,Write a Python program to find the list with maximum and minimum length. ,"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )
    max_list = max(input_list, key = len)
    return(max_length, max_list)
def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )
    min_list = min(input_list, key = len)
    return(min_length, min_list)
list1 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]
print(""Original list:"")
print(list1)
print(""\nList with maximum length of lists:"")
print(max_length_list(list1))
print(""\nList with minimum length of lists:"")
print(min_length_list(list1))
list1 =  [[0], [1, 3], [5, 7], [9, 11], [3, 5, 7]]
print(""Original list:"")
print(list1)
print(""\nList with maximum length of lists:"")
print(max_length_list(list1))
print(""\nList with minimum length of lists:"")
print(min_length_list(list1))
list1 =  [[12], [1, 3], [1, 34, 5, 7], [9, 11], [3, 5, 7]]
print(""Original list:"")
print(list1)
print(""\nList with maximum length of lists:"")
print(max_length_list(list1))
print(""\nList with minimum length of lists:"")
print(min_length_list(list1))
","def solution(arr):
    max_len = 0
    min_len = 0
    for i in range(len(arr)):
        if arr[i] > max_len:
            max_len = arr[i]
        if arr[i] < min_len:
            min_len = arr[i]
    return max_len, min_len

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print("
1009,Write a Python program to extract and display all the header tags from en.wikipedia.org/wiki/Main_Page. ,"from urllib.request import urlopen
from bs4 import BeautifulSoup
import re

html = urlopen('https://en.wikipedia.org/wiki/Peter_Jeffrey_(RAAF_officer)')
bs = BeautifulSoup(html, 'html.parser')
images = bs.find_all('img', {'src':re.compile('.jpg')})
for image in images: 
    print(image['src']+'\n')
","import urllib.request

url = ""https://en.wikipedia.org/wiki/Main_Page""

with urllib.request.urlopen(url) as response:
    html = response.read()
    print(html)

# Extracting the header tags

import re

url = ""https://en.wikipedia.org/wiki/Main_Page""

with urllib.request.urlopen(url) as"
1010,Write a Python program to select an item randomly from a list. ,"import random
color_list = ['Red', 'Blue', 'Green', 'White', 'Black']
print(random.choice(color_list))
","import random

def random_select(lst):
    return lst[random.randint(0, len(lst) - 1)]

print(random_select([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
1011,Write a NumPy program to build an array of all combinations of three NumPy arrays. ,"import numpy as np
x = [1, 2, 3]
y = [4, 5]
z = [6, 7]
print(""Original arrays:"")
print(""Array-1"")
print(x)
print(""Array-2"")
print(y)
print(""Array-3"")
print(z)
new_array = np.array(np.meshgrid(x, y, z)).T.reshape(-1,3)
print(""Combine array:"")
print(new_array)
","import numpy as np

a = np.array([[1,2,3],[4,5,6],[7,8,9]])
b = np.array([[1,2,3],[4,5,6],[7,8,9]])
c = np.array([[1,2,3],[4,5,6],[7,8,9]])

print(np.all(a==b))
print(np.all(a==c"
1012,Write a Python program to count the number of groups of non-zero numbers separated by zeros of a given list of numbers. ,"def test(lst):
    previous_digit = 0
    ctr = 0
    for digit in lst:
        if previous_digit==0 and digit!=0:
            ctr+=1
        previous_digit = digit
    return ctr

nums = [3,4,6,2,0,0,0,0,0,0,6,7,6,9,10,0,0,0,0,0,5,9,9,7,4,4,0,0,0,0,0,0,5,3,2,9,7,1]

print(""\nOriginal list:"")
print(nums)
print(""\nNumber of groups of non-zero numbers separated by zeros of the said list:"")
print(test(nums)) 
","def count_zeros(nums):
    count = 0
    for i in range(len(nums)):
        if nums[i] == 0:
            count += 1
    return count

print(count_zeros([0, 1, 0, 2, 1, 0, 1, 3, 0, 5, 0, 0, 0, 0, 0]))

""""""

def count_zeros(nums):"
1013,Write a Python program to create a copy of its own source code. ,"def file_copy(src, dest):
    with open(src) as f, open(dest, 'w') as d:
        d.write(f.read())
        file_copy(""untitled0.py"", ""z.py"")
        with open('z.py', 'r') as filehandle:
            for line in filehandle:
                print(line, end = '')
","def main():
    print(""Enter the source code of the program to be copied:"")
    source = input()
    print(""Enter the destination code of the copied source code:"")
    destination = input()
    print(""Enter the name of the file to be copied:"")
    name = input()
    print(""Enter the name of the file to be copied:"")
    name2 = input()
    print(""Enter the name of the file to be copied:"")
    name3 = input()"
1014,"Write a Python code to send a request to a web page, and print the response text and content. Also get the raw socket response from the server. ","import requests
res = requests.get('https://www.google.com/')
print(""Response text of https://google.com/:"")
print(res.text)
print(""\n=============================================================================="")
print(""\nContent of the said url:"")
print(res.content)
print(""\n=============================================================================="")
print(""\nRaw data of the said url:"")
r = requests.get('https://api.github.com/events', stream = True)
print(r.raw)
print(r.raw.read(15))
","import socket

def send_request(url):
    # create a socket object
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # connect to the server
    s.connect((url, 80))
    # send the request
    s.send(url.encode())
    # receive the response
    response = s.recv(1024)
    # close"
1015,Write a Pandas program to split the following dataframe into groups based on customer id and create a list of order date for each group. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
result = df.groupby('customer_id')['ord_date'].apply(list)
print(""\nGroup on 'customer_id' and display the list of order dates in group wise:"")
print(result)
","df = pd.read_csv('../data/customer_orders.csv')

df.groupby(['customer_id', 'order_date']).agg({'order_id': ['count']}).sort_values(by='order_date', ascending=True)

df.groupby(['customer_id', 'order_date']).agg({'order_id': ['count']}).sort_values("
1016,"Write a Pandas program to create a Pivot table and find number of adult male, adult female and children. ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table('sex',  'who', aggfunc = 'count')
print(result)
","# Create a Pandas dataframe
df = pd.DataFrame({'Male': [1, 2, 3, 4, 5],
                   'Female': [2, 4, 6, 8, 10],
                   'Child': [3, 5, 7, 9, 11]})

# Create a Pivot table
pivot = df.pivot_table(index='Male', columns='Child', values='Female')

# Print the result
print(p"
1017,Write a Python program to clone or copy a list. ,"original_list = [10, 22, 44, 23, 4]
new_list = list(original_list)
print(original_list)
print(new_list)
","def clone(lst):
    return [i for i in lst]

def copy(lst):
    return [i for i in lst]

lst = [1, 2, 3, 4, 5]

print(clone(lst))
print(copy(lst))

""""""

# Solution 2

def clone(lst):
    return [i for i in lst]

def copy(lst):
    return [i for i in lst]"
1018,Write a NumPy program to calculate the absolute value element-wise. ,"import numpy as np
x = np.array([-10.2, 122.2, .20])
print(""Original array:"")
print(x)
print(""Element-wise absolute value:"")
print(np.absolute(x))
",">>> import numpy as np
>>> x = np.array([-1, 0, 1])
>>> np.abs(x)
array([ 1.,  1.,  1.])

""""""

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution"
1019,"Write a NumPy program to check whether each element of a given array is composed of digits only, lower case letters only and upper case letters only. ","import numpy as np
x = np.array(['Python', 'PHP', 'JS', 'Examples', 'html5', '5'], dtype=np.str)
print(""\nOriginal Array:"")
print(x)
r1 = np.char.isdigit(x)
r2 = np.char.islower(x)
r3 = np.char.isupper(x)
print(""Digits only ="", r1)
print(""Lower cases only ="", r2)
print(""Upper cases only ="", r3)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.dtype)

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], dtype=np.int64)

print(arr.dtype)

arr = np.array([1,"
1020,"Write a Pandas program to extract year, month, day, hour, minute, second and weekday from unidentified flying object (UFO) reporting date. ","import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nYear:"")
print(df.Date_time.dt.year.head())
print(""\nMonth:"")
print(df.Date_time.dt.month.head())
print(""\nDay:"")
print(df.Date_time.dt.day.head())
print(""\nHour:"")
print(df.Date_time.dt.hour.head())
print(""\nMinute:"")
print(df.Date_time.dt.minute.head())
print(""\nSecond:"")
print(df.Date_time.dt.second.head())
print(""\nWeekday:"")
print(df.Date_time.dt.weekday_name.head())
","import pandas as pd
import datetime

# Read the data from the file
df = pd.read_csv('unidentified_object.csv')

# Extract the year, month, day, hour, minute, second and weekday from the dataframe
df['year'] = df['Date'].dt.year
df['month'] = df['Date'].dt.month
df['day'] = df['Date'"
1021,Write a Python program to wrap an element in the specified tag and create the new wrapper. ,"from bs4 import BeautifulSoup
soup = BeautifulSoup(""<p>Python exercises.</p>"", ""lxml"")
print(""Original Markup:"")
print(soup.p.string.wrap(soup.new_tag(""i"")))
print(""\nNew Markup:"")
print(soup.p.wrap(soup.new_tag(""div"")))
","import re

def wrap(element, tag):
    return f'<{tag}>{element}</{tag}>'

print(wrap('<b>Hello</b>', 'b'))
print(wrap('<b>Hello</b>', 'i'))
print(wrap('<b>Hello</b>', 'i'))
print(wrap('<b>Hello</b>', 'i'))
print(wrap('<b>Hello</"
1022,Write a NumPy program to find unique rows in a NumPy array. ,"import numpy as np
x = np.array([[20, 20, 20, 0],
              [0, 20, 20, 20],
              [0, 20, 20, 20],
              [20, 20, 20, 0],
              [10, 20, 20,20]])
print(""Original array:"")
print(x)
y = np.ascontiguousarray(x).view(np.dtype((np.void, x.dtype.itemsize * x.shape[1])))
_, idx = np.unique(y, return_index=True)

unique_result = x[idx]
print(""Unique rows of the above array:"")
print(unique_result)
","import numpy as np

arr = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                [1, 2, 3,"
1023,"Write a NumPy program to sort a given complex array using the real part first, then the imaginary part. ","import numpy as np
complex_num = [1 + 2j, 3 - 1j, 3 - 2j, 4 - 3j, 3 + 5j]
print(""Original array:"")
print(complex_num)
print(""\nSorted a given complex array using the real part first, then the imaginary part."")
print(np.sort_complex(complex_num))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
print(a)

a = np.array([1, 2, 3, 4, 5])
print(a.real)

a = np.array([1, 2, 3, 4, 5])
print(a.imag)

a = np.array([1, 2, 3, 4, 5])
print(a.reshape(2"
1024,Write a Pandas program to get a time series with the last working days of each month of a specific year. ,"import pandas as pd
s = pd.date_range('2021-01-01', periods=12, freq='BM')
df = pd.DataFrame(s, columns=['Date'])
print('last working days of each month of a specific year:')
print(df)
","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/data/fips_code_data.csv?raw=true')
df['fips'] = df['fips'].astype(str)
df['fips'] = df['fips'].str.zfill(5)
df['year'] = df['fips'].str[:"
1025,Write a Python program to check whether the n-th element exists in a given list. ,"x = [1, 2, 3, 4, 5, 6]
xlen = len(x)-1
print(x[xlen])
","def check_nth_element(list, n):
    if n in list:
        return True
    else:
        return False

print(check_nth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))

""""""

def check_nth_element(list, n):
    if n in list:
        return True
    else:
        return False

print(check_nth_"
1026,"Write a Pandas program to create a plot of adjusted closing prices, 30 days simple moving average and exponential moving average of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
stock_data = df1.set_index('Date')
close_px = stock_data['Adj Close']
stock_data['SMA_30_days'] = stock_data.iloc[:,4].rolling(window=30).mean() 
stock_data['EMA_20_days'] = stock_data.iloc[:,4].ewm(span=20,adjust=False).mean()
plt.figure(figsize=[15,10])
plt.grid(True)
plt.title('Historical stock prices of Alphabet Inc. [01-04-2020 to 30-09-2020]\n',fontsize=18, color='black')
plt.plot(stock_data['Adj Close'],label='Adjusted Closing Price', color='black')
plt.plot(stock_data['SMA_30_days'],label='30 days Simple moving average', color='red')
plt.plot(stock_data['EMA_20_days'],label='20 days Exponential moving average', color='green')
plt.legend(loc=2)
plt.show()
","import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Read the data
df = pd.read_csv('alphabet_inc_data.csv')

# Create a new dataframe with only the columns we want
df = df[['Date', 'Adj Close']]

# Create a new dataframe with only the columns we want
df = df["
1027,"Write a Python program to create a new Arrow object, representing the ""ceiling"" of the timespan of the Arrow object in a given timeframe using arrow module. The timeframe can be any datetime property like day, hour, minute. ","import arrow
print(arrow.utcnow())
print(""Hour ceiling:"")
print(arrow.utcnow().ceil('hour'))
print(""\nMinute ceiling:"")
print(arrow.utcnow().ceil('minute'))
print(""\nSecond ceiling:"")
print(arrow.utcnow().ceil('second')) 
","import arrow

def create_arrow(time_span):
    return arrow.get(time_span)

def get_arrow(time_span):
    return arrow.get(time_span)

def get_arrow_time_span(time_span):
    return arrow.get(time_span).time_span

def get"
1028,"Write a NumPy program to create a 4x4 array with random values, now create a new array from the said array swapping first and last rows. ","import numpy as np 
nums = np.arange(16, dtype='int').reshape(-1, 4)
print(""Original array:"")
print(nums)
print(""\nNew array after swapping first and last rows of the said array:"")
new_nums = nums[::-1]
print(new_nums)
","import numpy as np

a = np.random.randint(0,10,(4,4))
print(a)

b = np.random.randint(0,10,(4,4))
print(b)

c = np.concatenate((a,b),axis=1)
print(c)

d = np.concatenate((a,b),axis="
1029,"Write a Python program to create a Beautiful Soup parse tree into a nicely formatted Unicode string, with a separate line for each HTML/XML tag and string. ","from bs4 import BeautifulSoup
str1 = ""<p>Some<b>bad<i>HTML Code</i></b></p>""
print(""Original string:"")
print(str1)
soup = BeautifulSoup(""<p>Some<b>bad<i>HTML Code</i></b></p>"", ""xml"")
print(""\nFormatted Unicode string:"")
print(soup.prettify())
","import urllib.request
import bs4

url = ""https://www.python.org/blogs/html-tables/""
html = urllib.request.urlopen(url)
soup = bs4.BeautifulSoup(html, 'html.parser')

# print(soup.prettify())

# print(soup.prettify())

# print("
1030,Write a Python program to find the indexes of all elements in the given list that satisfy the provided testing function. ,"def find_index_of_all(lst, fn):
  return [i for i, x in enumerate(lst) if fn(x)]
print(find_index_of_all([1, 2, 3, 4], lambda n: n % 2 == 1))
","def solution(lst, func):
    for i in range(len(lst)):
        if func(lst[i]):
            print(i)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
func = lambda x: x % 2 == 0

solution(lst, func)

""""""

def solution(lst, func):
    for i in range("
1031,Write a Pandas program to join the two given dataframes along rows and merge with another dataframe along the common column id. ,"import pandas as pd
student_data1 = pd.DataFrame({
        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5'],
         'name': ['Danniella Fenton', 'Ryder Storey', 'Bryce Jensen', 'Ed Bernal', 'Kwame Morin'], 
        'marks': [200, 210, 190, 222, 199]})

student_data2 = pd.DataFrame({
        'student_id': ['S4', 'S5', 'S6', 'S7', 'S8'],
        'name': ['Scarlette Fisher', 'Carla Williamson', 'Dante Morse', 'Kaiser William', 'Madeeha Preston'], 
        'marks': [201, 200, 198, 219, 201]})

exam_data = pd.DataFrame({
        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5', 'S7', 'S8', 'S9', 'S10', 'S11', 'S12', 'S13'],
        'exam_id': [23, 45, 12, 67, 21, 55, 33, 14, 56, 83, 88, 12]})

print(""Original DataFrames:"")
print(student_data1)
print(student_data2)
print(exam_data)

print(""\nJoin first two said dataframes along rows:"")
result_data = pd.concat([student_data1, student_data2])
print(result_data)

print(""\nNow join the said result_data and df_exam_data along student_id:"")
final_merged_data = pd.merge(result_data, exam_data, on='student_id')
print(final_merged_data)
","df1 = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})
df2 = pd.DataFrame({'col1': [7, 8, 9], 'col2': [10, 11, 12]})

df = pd.concat([df1, df2], axis=0)

df.columns = ['col1', 'col2', '"
1032,Write a Pandas program to remove the duplicates from 'WHO region' column of World alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())

print(""\nAfter removing the duplicates of WHO region column:"")
print(w_a_con.drop_duplicates('WHO region'))
","import pandas as pd

df = pd.read_csv('datasets/WHO_region.csv')
df.drop_duplicates(subset=['WHO region'], inplace=True)
df.to_csv('datasets/WHO_region_duplicates.csv')

""""""

# Solution

import pandas as pd

df = pd.read_csv('datasets/WHO_region.csv"
1033,Write a Pandas program to import three datasheets from a given excel data (coalpublic2013.xlsx ) and combine in to a single dataframe. ,"import pandas as pd
import numpy as np
df1 = pd.read_excel('E:\employee.xlsx',sheet_name=0)
df2 = pd.read_excel('E:\employee.xlsx',sheet_name=1)
df3 = pd.read_excel('E:\employee.xlsx',sheet_name=2)
df = pd.concat([df1, df2, df3])
print(df)
","import pandas as pd

df1 = pd.read_excel('coalpublic2013.xlsx')
df2 = pd.read_excel('coalpublic2013.xlsx')
df3 = pd.read_excel('coalpublic2013.xlsx')

df = pd.concat([df1, df2, df3], axis=0)

df"
1034,"Write a Python program to create a string representation of the Arrow object, formatted according to a format string. ","import arrow
print(""Current datetime:"")
print(arrow.utcnow())
print(""\nYYYY-MM-DD HH:mm:ss ZZ:"")
print(arrow.utcnow().format('YYYY-MM-DD HH:mm:ss ZZ'))
print(""\nDD-MM-YYYY HH:mm:ss ZZ:"")
print(arrow.utcnow().format('DD-MM-YYYY HH:mm:ss ZZ'))
print(arrow.utcnow().format('\nMMMM DD, YYYY'))
print(arrow.utcnow().format())
",">>> import arrow
>>> arrow.Arrow(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,"
1035,Write a Python program to get the daylight savings time adjustment using arrow module. ,"import arrow
print(""Daylight savings time adjustment:"")
a = arrow.utcnow().dst()
print(a)
","import arrow

def get_dst(time):
    return arrow.get(time).timezone.dst(arrow.get(time).time)

print(get_dst('2021-05-01'))

""""""

# Solution

import arrow

def get_dst(time):
    return arrow.get(time).timezone.dst(arrow.get(time).time)

print(get_dst('2021-05-01'"
1036,Write a NumPy program to compute the natural logarithm of one plus each element of a given array in floating-point accuracy. ,"import numpy as np
x = np.array([1e-99, 1e-100])
print(""Original array: "")
print(x)
print(""\nNatural logarithm of one plus each element:"")
print(np.log1p(x))
","python solution.py

""""""

import numpy as np

def natural_log(x):
    return np.log(x+1)

def natural_log_array(x):
    return np.log(x+1)

def natural_log_array_array(x):
    return np.log(x+1)

def natural_log_array_array_array(x):
    return np"
1037,A Python Dictionary contains List as value. Write a Python program to update the list values in the said dictionary. ,"def test(dictionary):
    dictionary['Math'] = [x+1 for x in dictionary['Math']]
    dictionary['Physics'] = [x-2 for x in dictionary['Physics']]
    return dictionary

dictionary = { 
               'Math' : [88, 89, 90], 
               'Physics' : [92, 94, 89],
               'Chemistry' : [90, 87, 93]
             }
print(""\nOriginal Dictionary:"")
print(dictionary)
print(""\nUpdate the list values of the said dictionary:"")
print(test(dictionary))
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

#"
1038,Write a NumPy program to calculate averages without NaNs along a given array. ,"import numpy as np
arr1 = np.array([[10, 20 ,30], [40, 50, np.nan], [np.nan, 6, np.nan], [np.nan, np.nan, np.nan]])
print(""Original array:"")
print(arr1)
temp = np.ma.masked_array(arr1,np.isnan(arr1))
result = np.mean(temp, axis=1)
print(""Averages without NaNs along the said array:"")
print(result.filled(np.nan))
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

b = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

c = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(np.average(a))
print(np.average(b))
print("
1039,Write a Python program to create a dictionary with the unique values of a given list as keys and their frequencies as the values. ,"from collections import defaultdict
def frequencies(lst):
  freq = defaultdict(int)
  for val in lst:
    freq[val] += 1
  return dict(freq) 
print(frequencies(['a', 'b', 'f', 'a', 'c', 'e', 'a', 'a', 'b', 'e', 'f'])) 
print(frequencies([3,4,7,5,9,3,4,5,0,3,2,3]))
","import collections

def unique_values(lst):
    d = collections.Counter(lst)
    return dict(d)

print(unique_values([1,2,3,4,5,6,7,8,9,10]))

# Output: {1: 2, 2: 1, 3: 2, 4: 2, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10"
1040,Write a Python program to find the most common element of a given list. ,"from collections import Counter
language = ['PHP', 'PHP', 'Python', 'PHP', 'Python', 'JS', 'Python', 'Python','PHP', 'Python']
print(""Original list:"")
print(language)
cnt = Counter(language)
print(""\nMost common element of the said list:"")
print(cnt.most_common(1)[0][0])
","def most_common(lst):
    return lst[0]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(most_common(lst))

""""""

def most_common(lst):
    return lst[0]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(most_common(lst))

"""""""
1041,Write a python program to access environment variables and value of the environment variable. ,"import os
print(""Access all environment variables:"")
print('*----------------------------------*')
print(os.environ)
print('*----------------------------------*')
print(""Access a particular environment variable:"")
print(os.environ['HOME'])
print('*----------------------------------*')
print(os.environ['PATH'])
print('*----------------------------------*')
print('Value of the environment variable key:')
print(os.getenv('JAVA_HOME'))
print(os.getenv('PYTHONPATH'))
","import os

print(os.environ.get('PATH'))

# Output:
# PATH:
# 'C:\\Python27\\Lib\\site-packages\\pip'
# 'C:\\Python27\\Lib\\site-packages\\pip\\site-packages\\pip'
# 'C:\\Python27\\Lib\\site-packages\\pip\\site-packages\\pip\\site-packages\\pip'
# 'C:\\Python27\\Lib\\site"
1042,Write a Python program to round every number of a given list of numbers and print the total sum multiplied by the length of the list. ,"nums = [22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]
print(""Original list: "", nums)
print(""Result:"")
lenght=len(nums)
print(sum(list(map(round,nums))* lenght)) 
","import math

def solution(numbers):
    total = 0
    for i in numbers:
        total += math.floor(i/len(numbers))
    return total

print(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

# Time complexity: O(n)
# Space Complexity: O(n)

# Runtime: 32 ms (96.41"
1043,Write a Python program to retrieve all descendants of the body tag from a given web page. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""\nDescendants of the body tag (https://www.python.org):\n"")
root = soup.html    
root_childs = [e.name for e in root.descendants if e.name is not None]
print(root_childs)

","import urllib.request
import urllib.parse
import urllib.error

url = ""http://py4e-data.dr-chuck.net/comments_42.html""

try:
    fhand = urllib.request.urlopen(url)
except urllib.error.URLError as e:
    print(""ERROR:"", e.reason)

for line in fhand:
    print(line.decode()."
1044,Write a Pandas program to capitalize all the string values of specified columns of a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'name': ['alberto','gino','ryan', 'Eesha', 'syed'],
    'date_of_birth ': ['17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [18.5, 21.2, 22.5, 22, 23]
})
print(""Original DataFrame:"")
print(df)
print(""\nAfter capitalizing name column:"")
df['name'] = list(map(lambda x: x.capitalize(), df['name']))
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': ['a', 'b', 'c', 'd'],
                   'col2': ['e', 'f', 'g', 'h'],
                   'col3': ['i', 'j', 'k', 'l']})

df.columns = ['col1', 'col2', 'col3']

print(df.head())

df.columns = ['col"
1045,Write a Python program to check whether a given datetime is between two dates and times using arrow module. ,"import arrow
print(""Test whether a given datetime is between two dates and times:"")
start = arrow.get(datetime(2017, 6, 5, 12, 30, 10))
end = arrow.get(datetime(2017, 6, 5, 12, 30, 36))
print(arrow.get(datetime(2017, 6, 5, 12, 30, 27)).is_between(start, end))
start = arrow.get(datetime(2017, 5, 5))
end = arrow.get(datetime(2017, 5, 8))
print(arrow.get(datetime(2017, 5, 8)).is_between(start, end, '[]'))
start = arrow.get(datetime(2017, 5, 5))
end = arrow.get(datetime(2017, 5, 8))
print(arrow.get(datetime(2017, 5, 8)).is_between(start, end, '[)'))
","import arrow

def check_date(date):
    if arrow.get(date).time() >= arrow.get(date).time():
        return True
    else:
        return False

print(check_date(""2021-05-01""))
print(check_date(""2021-05-02""))
print(check_date(""2021-05-03""))
print(check_date(""2021-05-04""))
print(check_date"
1046,Write a Python program to get variable unique identification number or string. ,"x = 100
print(format(id(x), 'x'))
s = 'w3resource'
print(format(id(s), 'x')) 
","def get_unique_identifier(string):
    """"""
    This function returns the unique identifier of the string.
    """"""
    # Your code here
    return string

print(get_unique_identifier(""Hello World""))
print(get_unique_identifier(""Hello World""))
print(get_unique_identifier(""Hello World""))
print(get_unique_identifier(""Hello World""))
print(get_unique_identifier(""Hello World""))
print(get_unique_identifier("""
1047,Write a Python program to calculate number of days between two dates.,"from datetime import date
f_date = date(2014, 7, 2)
l_date = date(2014, 7, 11)
delta = l_date - f_date
print(delta.days)
","date1 = input(""Enter the first date in the format dd/mm/yyyy: "")
date2 = input(""Enter the second date in the format dd/mm/yyyy: "")

print(""Number of days between"", date1, ""and"", date2, ""is"",
      calculate_days(date1, date2))

""""""

def calculate_days(date1, date2):
    """"""
    Calculate number of days between two dates.

    :param date1"
1048,Write a Python program to create a string from two given strings concatenating uncommon characters of the said strings. ,"def uncommon_chars_concat(s1, s2):   
     
     set1 = set(s1) 
     set2 = set(s2) 
  
     common_chars = list(set1 & set2) 
     result = [ch for ch in s1 if ch not in common_chars] + [ch for ch in s2 if ch not in common_chars] 
     return(''.join(result))

s1 = 'abcdpqr'
s2 = 'xyzabcd'
print(""Original Substrings:\n"",s1+""\n"",s2)
print(""\nAfter concatenating uncommon characters:"")
print(uncommon_chars_concat(s1, s2))
","def uncommon_characters(str1, str2):
    str1 = str1.lower()
    str2 = str2.lower()
    str1 = str1.replace("" "", """")
    str2 = str2.replace("" "", """")
    str1 = str1.replace("" "", """")
    str2 = str2.replace("" "", """")
    str1 = str1.replace("" "", """")
    str2 = str2."
1049,Write a Pandas program to create a Pivot table and find the item wise unit sold. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
print(pd.pivot_table(df,index=[""Item""], values=""Units"", aggfunc=np.sum))
","import pandas as pd

df = pd.read_csv(""https://github.com/datasets/csv/blob/master/data/airline.csv?raw=true"")

df.head()

df.pivot_table(values='airline_fare', index='day', columns='month', aggfunc='sum')

df.head()

df.pivot_table(values='airline_fare', index='day', columns='"
1050,Write a NumPy program to test whether all elements in an array evaluate to True. ,"import numpy as np
print(np.all([[True,False],[True,True]]))
print(np.all([[True,True],[True,True]]))
print(np.all([10, 20, 0, -50]))
print(np.all([10, 20, -50]))
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

if all(a):
    print(""All elements evaluate to True"")
else:
    print(""Some elements evaluate to False"")

# Output

# All elements evaluate to True
# Some elements evaluate to False"
1051,Write a Python program to remove leading zeros from an IP address. ,"def remove_zeros_from_ip(ip_add):
  new_ip_add = ""."".join([str(int(i)) for i in ip_add.split(""."")])  
  return new_ip_add ;

print(remove_zeros_from_ip(""255.024.01.01""))
print(remove_zeros_from_ip(""127.0.0.01 ""))
","def remove_leading_zeros(ip):
    # your code goes here
    return ip.lstrip('0')

print(remove_leading_zeros('127.0.0.1'))
print(remove_leading_zeros('255.255.255.255'))
print(remove_leading_zeros('255.255.255.255.255'))
print(remove_leading_zeros('255.255.255.255.255.255'))
print("
1052,Write a NumPy program to convert specified inputs to arrays with at least one dimension. ,"import numpy as np
x= 12.0
print(np.atleast_1d(x))
x = np.arange(6.0).reshape(2, 3)
print(np.atleast_1d(x))
print(np.atleast_1d(1, [3, 4]))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a)
print(b)

# Solution:

# a = np.array([[1, 2, 3], [4, 5, 6]])
# b = np.array([[7, 8, 9], [10, 11,"
1053,Write a Python program to split a given list into specified sized chunks using itertools module. ,"from itertools import islice
def split_list(lst, n):
    lst = iter(lst)
    result = iter(lambda: tuple(islice(lst, n)), ())
    return list(result)

nums = [12,45,23,67,78,90,45,32,100,76,38,62,73,29,83]
print(""Original list:"")
print(nums)
n = 3
print(""\nSplit the said list into equal size"",n)
print(split_list(nums,n))
n = 4
print(""\nSplit the said list into equal size"",n)
print(split_list(nums,n))
n = 5
print(""\nSplit the said list into equal size"",n)
print(split_list(nums,n))
","import itertools

def chunks(lst, n):
    """"""Yield successive n-sized chunks from lst.""""""
    for i in range(0, len(lst), n):
        yield lst[i:i + n]

def main():
    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    print(list(chunks(lst, 3)))
    print(list"
1054,Write a Python program to find all the link tags and list the first ten from the webpage python.org. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""First four h2 tags from the webpage python.org.:"")
print(soup.find_all('a')[0:10])

","import urllib.request
import re

url = ""https://python.org/""

# Open the url
webpage = urllib.request.urlopen(url)

# Read the webpage
html = webpage.read()

# Find all the links
links = re.findall(r'<a href=""(.*?)"">', html)

# Print the first ten links
for link in links[:10]:
    print(link)"
1055,Write a Pandas program to check inequality over the index axis of a given dataframe and a given series. ,"import pandas as pd
df_data = pd.DataFrame({'W':[68,75,86,80,None],'X':[78,75,None,80,86], 'Y':[84,94,89,86,86],'Z':[86,97,96,72,83]});
sr_data = pd.Series([68, 75, 86, 80, None]) 
print(""Original DataFrame:"")
print(df_data)
print(""\nOriginal Series:"")
print(sr_data)
print(""\nCheck for inequality of the said series & dataframe:"")
print(df_data.ne(sr_data, axis = 0))
","import pandas as pd
import numpy as np

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

s = pd.Series([1, 2, 3, 4, 5])

print(df.eq(s))

# Output:
#     True
#     True
#     True
#     False
#"
1056,Write a Python function to get a string made of 4 copies of the last two characters of a specified string (length must be at least 2). ,"def insert_end(str):
	sub_str = str[-2:]
	return sub_str * 4

print(insert_end('Python'))
print(insert_end('Exercises'))
","def get_last_two_char(string):
    return string[-2:] + string[:-2]

print(get_last_two_char(""abcdefg""))

""""""

def get_last_two_char(string):
    return string[-2:] + string[:-2]

print(get_last_two_char(""abcdefg""))

""""""

def get_last_two"
1057,"Write a Python program to display vertically each element of a given list, list of lists. ","text = [""a"", ""b"", ""c"", ""d"",""e"", ""f""]
print(""Original list:"")
print(text)
print(""\nDisplay each element vertically of the said list:"")
for i in text:
       print(i)
nums = [[1, 2, 5], [4, 5, 8], [7, 3, 6]] 
print(""Original list:"")
print(nums)
print(""\nDisplay each element vertically of the said list of lists:"")
for a,b,c in zip(*nums): 
    print(a, b, c)
","def display_vertically(lst):
    for i in lst:
        print(i)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
display_vertically(lst)

""""""

def display_vertically(lst):
    for i in lst:
        print(i)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9"
1058,Write a Python program to check if the elements of a given list are unique or not. ,"def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True

nums1 = [1,2,4,6,8,2,1,4,10,12,14,12,16,17]
print (""Original list:"")
print(nums1)
print(""\nIs the said list contains all unique elements!"")
print(all_unique(nums1)) 

nums2 = [2,4,6,8,10,12,14]
print (""\nOriginal list:"")
print(nums2)
print(""\nIs the said list contains all unique elements!"")
print(all_unique(nums2))
","def is_unique(lst):
    for i in lst:
        if lst.count(i) > 1:
            return False
    return True

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(is_unique(lst))

""""""

# Solution 1

def is_unique(lst):
    return len(set(lst)) == len(lst)"
1059,Write a Python program to check if a nested list is a subset of another nested list. ,"def checkSubset(input_list1, input_list2): 
    return all(map(input_list1.__contains__, input_list2)) 
      

list1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] 
list2 = [[1, 3],[13,15,17]]   
print(""Original list:"")
print(list1)
print(list2)
print(""\nIf the one of the said list is a subset of another.:"")
print(checkSubset(list1, list2)) 

list1 = [
           [
             [1,2],[2,3]
           ],
           [
             [3,4],[5,6]
           ]
         ]
list2 = [
           [
             [3,4], [5, 6]
           ]
         ]
print(""Original list:"")
print(list1)
print(list2)
print(""\nIf the one of the said list is a subset of another.:"")
print(checkSubset(list1, list2)) 
list1 = [
           [
             [1,2],[2,3]
           ],
           [
             [3,4],[5,7]
           ]
         ]
list2 = [
           [
             [3,4], [5, 6]
           ]
         ]
print(""Original list:"")
print(list1)
print(list2)
print(""\nIf the one of the said list is a subset of another.:"")
print(checkSubset(list1, list2))
","def isSubset(lst, sub):
    if len(lst) == 0:
        return False
    if len(lst) == 1:
        return True
    if lst[0] in sub:
        return isSubset(lst[1:], sub)
    else:
        return False

lst = [1, 2, 3, 4, 5]
sub = [4, 5]
print(isSubset(lst, sub"
1060,"Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and draw a bar plot comparing year, MSHA ID, Production and Labor_hours of first ten records. ","import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
df = pd.read_excel('E:\coalpublic2013.xlsx')
df.head(10).plot(kind='bar', figsize=(20,8))
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_excel('coalpublic2013.xlsx')
df.head()

df.columns = ['Year', 'MSHA_ID', 'Production', 'Labor_hours']
df.head()

df.head()

df.head()"
1061,"Write a NumPy program to add elements in a matrix. If an element in the matrix is 0, we will not add the element below this element. ","import numpy as np
def sum_matrix_Elements(m):
    arra = np.array(m)   
    element_sum = 0  
    for p in range(len(arra)):  
        for q in range(len(arra[p])):  
            if arra[p][q] == 0 and p < len(arra)-1: 
                arra[p+1][q] = 0  
            element_sum += arra[p][q]  
    return element_sum
m = [[1, 1, 0, 2],
          [0, 3, 0, 3], 
          [1, 0, 4, 4]]
print(""Original matrix:"")
print(m)
print(""Sum:"")
print(sum_matrix_Elements(m))
","import numpy as np

matrix = np.array([[1, 2, 3, 4, 5],
                   [6, 7, 8, 9, 10],
                   [11, 12, 13, 14, 15]])

print(matrix)

# Add elements in the matrix
matrix = np.array([[1, 2, 3, 4, 5],
                   [6, 7, 8, 9"
1062,"Write a Python program to get the minimum value of a list, after mapping each element to a value using a given function. ","def min_by(lst, fn):
  return min(map(fn, lst)) 
print(min_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n'])) 
","def min_value(lst):
    min_val = lst[0]
    for i in lst:
        if i < min_val:
            min_val = i
    return min_val

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(min_value(lst))

""""""

def min_value(lst):
    min_"
1063,"Write a NumPy program to find the number of elements of an array, length of one array element in bytes and total bytes consumed by the elements. ","import numpy as np
x = np.array([1,2,3], dtype=np.float64)
print(""Size of the array: "", x.size)
print(""Length of one array element in bytes: "", x.itemsize)
print(""Total bytes consumed by the elements of the array: "", x.nbytes)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(arr.size)
print(arr.itemsize)
print(arr.nbytes)

# Solution:

# arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
# print(arr.size"
1064,Create two arrays of six elements. Write a NumPy program to count the number of instances of a value occurring in one array on the condition of another array. ,"import numpy as np
x = np.array([10,-10,10,-10,-10,10])
y = np.array([.85,.45,.9,.8,.12,.6])
print(""Original arrays:"")
print(x)
print(y)
result = np.sum((x == 10) & (y > .5))
print(""\nNumber of instances of a value occurring in one array on the condition of another array:"")
print(result)
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
b = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(np.count_nonzero(a == b))

# Output:
# [10]
# [10]
# [10]"
1065,Write a Python program to count the number 4 in a given list. ,"def list_count_4(nums):
  count = 0  
  for num in nums:
    if num == 4:
      count = count + 1

  return count

print(list_count_4([1, 4, 6, 7, 4]))
print(list_count_4([1, 4, 6, 4, 7, 4]))","def count4(list):
    count = 0
    for i in list:
        if i == 4:
            count += 1
    return count

print(count4([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def count4(list):
    count = 0
    for i in list:
        if i == 4:
            count += 1
    return count

print(count4([1, 2, 3"
1066,Write a Python script to merge two Python dictionaries. ,"d1 = {'a': 100, 'b': 200}
d2 = {'x': 300, 'y': 200}
d = d1.copy()
d.update(d2)
print(d)
","python solution.py

""""""

# Python program to merge two Python dictionaries

# Python program to merge two Python dictionaries

# Python program to merge two Python dictionaries

# Python program to merge two Python dictionaries

# Python program to merge two Python dictionaries

# Python program to merge two Python dictionaries

# Python program to merge two Python dictionaries

# Python program to merge two Python dictionaries

# Python program to merge two Python dictionaries

# Python program to merge two Python diction"
1067,Write a Pandas program to convert unix/epoch time to a regular time stamp in UTC. Also convert the said timestamp in to a given time zone. ,"import pandas as pd
epoch_t = 1621132355
time_stamp = pd.to_datetime(epoch_t, unit='s')
# UTC (Coordinated Universal Time) is one of the well-known names of UTC+0 time zone which is 0h.
# By default, time series objects of pandas do not have an assigned time zone.
print(""Regular time stamp in UTC:"")
print(time_stamp)
print(""\nConvert the said timestamp in to US/Pacific:"")
print(time_stamp.tz_localize('UTC').tz_convert('US/Pacific'))
print(""\nConvert the said timestamp in to Europe/Berlin:"")
print(time_stamp.tz_localize('UTC').tz_convert('Europe/Berlin'))
","import datetime

def convert_unix_to_utc(unix_time):
    """"""
    Converts unix time to UTC timezone
    """"""
    utc_time = datetime.datetime.utcfromtimestamp(unix_time)
    return utc_time.strftime('%Y-%m-%d %H:%M:%S')

def convert"
1068,Write a NumPy program to create random vector of size 15 and replace the maximum value by -1. ,"import numpy as np
x = np.random.random(15)
print(""Original array:"")
print(x)
x[x.argmax()] = -1
print(""Maximum value replaced by -1:"")
print(x)
","import numpy as np

np.random.seed(0)

x = np.random.randint(0, 10, 15)
x[x.argmax()] = -1

print(x)

""""""

import numpy as np

np.random.seed(0)

x = np.random.randint(0, 10, 15)
x[x.argmax()] = -1

print(x)"
1069,"Write a Python program to generate a random integer between 0 and 6 - excluding 6, random integer between 5 and 10 - excluding 10, random integer between 0 and 10, with a step of 3 and random date between two dates. Use random.randrange()","import random
import datetime
print(""Generate a random integer between 0 and 6:"")
print(random.randrange(5))
print(""Generate random integer between 5 and 10, excluding 10:"")
print(random.randrange(start=5, stop=10))
print(""Generate random integer between 0 and 10, with a step of 3:"")
print(random.randrange(start=0, stop=10, step=3))
print(""\nRandom date between two dates:"")
start_dt = datetime.date(2019, 2, 1)
end_dt = datetime.date(2019, 3, 1)
time_between_dates = end_dt - start_dt
days_between_dates = time_between_dates.days
random_number_of_days = random.randrange(days_between_dates)
random_date = start_dt + datetime.timedelta(days=random_number_of_days)
print(random_date)
","import random

def random_date():
    return random.randrange(0, 10)

def random_date_2():
    return random.randrange(5, 10)

def random_date_3():
    return random.randrange(0, 10)

def random_date_4():
    return random"
1070,Write a Pandas program to create a conversion between strings and datetime. ,"from datetime import datetime
from dateutil.parser import parse
print(""Convert datatime to strings:"")
stamp=datetime(2019,7,1)
print(stamp.strftime('%Y-%m-%d'))
print(stamp.strftime('%d/%b/%y'))
print(""\nConvert strings to datatime:"")
print(parse('Sept 17th 2019'))
print(parse('1/11/2019'))
print(parse('1/11/2019', dayfirst=True))
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Age': [30, 32, 33, 34, 35, 36],
                   'Salary': [55000, 60000, 50000, 50000, 50000, 50000]})

# Create a new column
df['Date'] = pd.to_datetime(df"
1071,Write a Python program to solve (x + y) * (x + y). ,"x, y = 4, 3
result = x * x + 2 * x * y + y * y
print(""({} + {}) ^ 2) = {}"".format(x, y, result))
","x = int(input(""Enter the value of x: ""))
y = int(input(""Enter the value of y: ""))

print(""The solution is:"", x + y)

""""""

x = int(input(""Enter the value of x: ""))
y = int(input(""Enter the value of y: ""))

print(""The solution is:"", x + y)"
1072,Write a Python program to get 90 days of visits broken down by browser for all sites on data.gov. ,"from urllib.request import urlopen
from bs4 import BeautifulSoup
html = urlopen(""https://en.wikipedia.org/wiki/Python"")
bsObj = BeautifulSoup(html)
for link in bsObj.findAll(""a""):
  if 'href' in link.attrs:
    print(link.attrs['href'])
","import requests
import json
import pandas as pd

url = ""https://data.gov.in/api/v2/datasets/e9d8d8d-c9d0-4c8b-a8d8-b9d9d9d9d9d/datasets/e9d8d8d-c9d0-4c8b-a8d8-b9d9d9d9d"
1073,Write a Pandas program to extract only phone number from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],
    'company_phone_no': ['Company1-Phone no. 4695168357','Company2-Phone no. 8088729013','Company3-Phone no. 6204658086', 'Company4-Phone no. 5159530096', 'Company5-Phone no. 9037952371']
    })
print(""Original DataFrame:"")
print(df)
def find_phone_number(text):
    ph_no = re.findall(r""\b\d{10}\b"",text)
    return """".join(ph_no)
df['number']=df['company_phone_no'].apply(lambda x: find_phone_number(x))
print(""\Extracting numbers from dataframe columns:"")
print(df)
","import pandas as pd

# Read the data from the file
df = pd.read_csv('phone_number.csv')

# Extract the phone number from the column
phone_number = df['phone_number']

# Print the phone number
print(phone_number)

# Create a new column in the DataFrame called 'phone_number_extracted'
df['phone_number_extracted'] = phone_number.str.extract('(\"
1074,Write a Pandas program to split a given dataframe into groups and display target column as a list of unique values. ,"import pandas as pd
df = pd.DataFrame( {'id' : ['A','A','A','A','A','A','B','B','B','B','B'], 
                    'type' : [1,1,1,1,2,2,1,1,1,2,2], 
                    'book' : ['Math','Math','English','Physics','Math','English','Physics','English','Physics','English','English']})

print(""Original DataFrame:"")
print(df)
new_df = df[['id', 'type', 'book']].drop_duplicates()\
                         .groupby(['id','type'])['book']\
                         .apply(list)\
                         .reset_index()

new_df['book'] = new_df.apply(lambda x: (','.join([str(s) for s in x['book']])), axis = 1)
print(""\nList all unique values in a group:"")
print(new_df)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

print(df.group"
1075,Write a Python program to sort a given matrix in ascending order according to the sum of its rows using lambda. ,"def sort_matrix(M):
    result = sorted(M, key=lambda matrix_row: sum(matrix_row)) 
    return result

matrix1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]
matrix2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]

print(""Original Matrix:"")
print(matrix1)
print(""\nSort the said matrix in ascending order according to the sum of its rows"") 
print(sort_matrix(matrix1))
print(""\nOriginal Matrix:"")
print(matrix2) 
print(""\nSort the said matrix in ascending order according to the sum of its rows"") 
print(sort_matrix(matrix2))
","def sort_matrix(matrix):
    rows = len(matrix)
    sum_rows = sum(rows)
    for i in range(rows):
        for j in range(i+1, rows):
            if matrix[i][j] == 0:
                continue
            if matrix[i][j] < 0:
                matrix[i][j] = -matrix[i][j]
            else:
                matrix[i"
1076,Write a Python program to group a sequence of key-value pairs into a dictionary of lists. ,"from collections import defaultdict
class_roll = [('v', 1), ('vi', 2), ('v', 3), ('vi', 4), ('vii', 1)]
d = defaultdict(list)
for k, v in class_roll:
    d[k].append(v)
print(sorted(d.items()))
","python solution.py

""""""

import json
import sys

def main():
    if len(sys.argv)!= 3:
        print(""Usage: python solution.py <input.json> <output.json>"")
        sys.exit(1)
    
    with open(sys.argv[1]) as f:
        data = json.load(f)
    
    with open(sys.argv[2], 'w') as f:"
1077,Write a Pandas program to drop the columns where at least one element is missing in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})

print(""Original Orders DataFrame:"")
print(df)
print(""\nDrop the columns where at least one element is missing:"")
result = df.dropna(axis='columns')
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

df.drop('col2', axis=1, inplace=True)

df.drop('col1', axis=0, inplace=True)

df.drop('col1', axis=1, inplace=True)

df."
1078,Write a Python program to get the maximum and minimum value in a dictionary. ,"my_dict = {'x':500, 'y':5874, 'z': 560}

key_max = max(my_dict.keys(), key=(lambda k: my_dict[k]))
key_min = min(my_dict.keys(), key=(lambda k: my_dict[k]))

print('Maximum Value: ',my_dict[key_max])
print('Minimum Value: ',my_dict[key_min])
","def get_max_min(d):
    max_val = d[0]
    min_val = d[0]
    for i in d:
        if i > max_val:
            max_val = i
        if i < min_val:
            min_val = i
    return max_val, min_val

d = {1: 10, 2: 20, 3: 30}
print(get_max_min(d))

""""""

def"
1079,Write a NumPy program to split of an array of shape 4x4 it into two arrays along the second axis. ,"import numpy as np
x = np.arange(16).reshape((4, 4))
print(""Original array:"",x)
print(""After splitting horizontally:"")
print(np.hsplit(x, [2, 6]))
","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

b = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

print(a)
print(b)

print(a.shape"
1080,Write a Pandas program to split a given dataframe into groups and create a new column with count from GroupBy. ,"import pandas as pd
pd.set_option('display.max_rows', None)
df = pd.DataFrame({
'book_name':['Book1','Book2','Book3','Book4','Book1','Book2','Book3','Book5'],
'book_type':['Math','Physics','Computer','Science','Math','Physics','Computer','English'],
'book_id':[1,2,3,4,1,2,3,5]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nNew column with count from groupby:"")
result = df.groupby([""book_name"", ""book_type""])[""book_type""].count().reset_index(name=""count"")
print(result)
","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Age': [30, 32, 33, 34, 35, 36],
                   'Score': [85, 90, 95, 100, 90, 100]})

df.groupby('Name').count()

df.groupby('Name').sum()

df."
1081,"Write a Pandas program to create a Pivot table and find the probability of survival by class, gender, solo boarding and port of embarkation. ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table('survived', ['sex' , 'alone' ], [ 'embark_town', 'class' ])
print(result)

","import pandas as pd
import numpy as np

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/iris.csv')

# Create a pivot table
pivot = df.pivot_table(index='class', columns='gender', values='solo_boarding', aggfunc='count')

# Print the pivot table
print(pivot)"
1082,"Write a Python program to get a string from a given string where all occurrences of its first char have been changed to '$', except the first char itself. ","def change_char(str1):
  char = str1[0]
  str1 = str1.replace(char, '$')
  str1 = char + str1[1:]

  return str1

print(change_char('restart'))
","str = ""abcd$ef$ghi$jkl$mno$pqrstu$vwx""

str = ""abcd$ef$ghi$jkl$mno$pqrstu$vwx""

str = ""abcd$ef$ghi$jkl$mno$pqrstu$vwx""

str = ""abcd$ef$ghi$"
1083,Write a NumPy program to create two arrays of size bigger and smaller than a given array. ,"import numpy as np    
x = np.arange(16).reshape(4,4)
print(""Original arrays:"")
print(x)
print(""\nArray with size 2x2 from the said array:"")
new_array1 = np.resize(x,(2,2))
print(new_array1)
print(""\nArray with size 6x6 from the said array:"")
new_array2 = np.resize(x,(6,6))
print(new_array2)
","import numpy as np

arr1 = np.array([1, 2, 3, 4, 5])
arr2 = np.array([6, 7, 8, 9, 10])

print(arr1)
print(arr2)

arr1 = np.array([1, 2, 3, 4, 5])
arr2 = np.array([6, 7, 8, 9, 10])

print(arr1)
print(arr2)

arr"
1084,"Write a Pandas program to find out the records where consumption of beverages per person average >=4 and Beverage Types is Beer, Wine, Spirits from world alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details: average consumption of \nbeverages per person >=4 and Beverage Types is Beer:"")
print(w_a_con[(w_a_con['Display Value'] >= 4) & ((w_a_con['Beverage Types'] == 'Beer') | (w_a_con['Beverage Types'] == 'Wine')| (w_a_con['Beverage Types'] == 'Spirits'))].head(10))
","import pandas as pd

df = pd.read_csv('world-alcohol-consumption.csv')

df['Beer'] = df['Beer'].apply(lambda x: 1 if x >= 4 else 0)
df['Wine'] = df['Wine'].apply(lambda x: 1 if x >= 4 else 0)
df['Spices'] = df['Spices'].apply("
1085,"Write a NumPy program to create a three-dimension array with shape (300,400,5) and set to a variable. Fill the array elements with values using unsigned integer (0 to 255). ","import numpy as np   
np.random.seed(32) 
nums = np.random.randint(low=0, high=256, size=(300, 400, 5), dtype=np.uint8)
print(nums)
","import numpy as np

arr = np.zeros((300,400,5), dtype=np.uint8)
arr[:,:,0] = 255
arr[:,:,1] = 255
arr[:,:,2] = 255
arr[:,:,3] = 255
arr[:,:,4] = 255

arr = np.zeros((300,400,"
1086,Write a Python program to check a dictionary is empty or not. ,"my_dict = {}

if not bool(my_dict):
    print(""Dictionary is empty"")
	","def is_empty(dictionary):
    if len(dictionary) == 0:
        return True
    else:
        return False

print(is_empty({""a"":1,""b"":2,""c"":3}))

""""""

# Solution 1

def is_empty(dictionary):
    if len(dictionary) == 0:
        return True
    else:
        return False

print(is_empty({""a"":1,""b"":2,""c"":3"
1087,"Write a NumPy program to count the number of ""P"" in a given array, element-wise. ","import numpy as np
x1 = np.array(['Python', 'PHP', 'JS', 'examples', 'html'], dtype=np.str)
print(""\nOriginal Array:"")
print(x1)
print(""Number of P:"")
r = np.char.count(x1, ""P"")
print(r)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

count = np.count_nonzero(arr == 'P')

print(count)

""""""

# Solution

import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

count = np.count_"
1088,"Write a Python program to calculate the sum of a list, after mapping each element to a value using the provided function. ","def sum_by(lst, fn):
  return sum(map(fn, lst))
print(sum_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n']))
","def sum_list(lst):
    return sum(lst)

lst = [1, 2, 3, 4, 5]
print(sum_list(lst))

""""""

# Solution 1

def sum_list(lst):
    return sum(lst)

lst = [1, 2, 3, 4, 5]
print(sum_list(lst))

# Solution 2

def sum"
1089,Write a Pandas program to create a comparison of the top 10 years in which the UFO was sighted vs each Month. ,"import pandas as pd
#Source: https://bit.ly/1l9yjm9
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
most_sightings_years = df['Date_time'].dt.year.value_counts().head(10)
def is_top_years(year):
   if year in most_sightings_years.index:
       return year
month_vs_year = df.pivot_table(columns=df['Date_time'].dt.month,index=df['Date_time'].dt.year.apply(is_top_years),aggfunc='count',values='city')
month_vs_year.index = month_vs_year.index.astype(int)
month_vs_year.columns = month_vs_year.columns.astype(int)
print(""\nComparison of the top 10 years in which the UFO was sighted vs each month:"")
print(month_vs_year.head(10))
","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/UFO%20Visits.csv?raw=true')

df['Year'] = df['Year'].astype(str)
df['Month'] = df['Month'].astype(str)

df['UFO'] = df['UFO'].astype(str)"
1090,Write a NumPy program to remove single-dimensional entries from a specified shape. ,"import numpy as np
x = np.zeros((3, 1, 4))
print(np.squeeze(x).shape)
","import numpy as np

x = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
x.shape = (3, 2)

x[1, 1] = 0

print(x)

x.shape = (3, 2)

x[1, 1] = 0

print(x)

x.shape = (3, 2)

x[1, 1] = 0"
1091,Write a Python code to send cookies to a given server and access cookies from the response of a server. ,"import requests
url = 'http://httpbin.org/cookies'
# A dictionary (my_cookies) of cookies to send to the specified url.
my_cookies = dict(cookies_are='Cookies parameter use to send cookies to the server')
r = requests.get(url, cookies = my_cookies)
print(r.text)
# Accessing cookies with Requests
# url = 'http://WebsiteName/cookie/setting/url'
# res = requests.get(url)
# Value of cookies
# print(res.cookies['cookie_name'])
","import socket
import sys

# Create a socket
s = socket.socket()

# Define the port on which you want to connect
port = 80

# Connect to the server
s.connect(('localhost', port))

# Send some data
s.send(b'GET / HTTP/1.0\r\n\r\n')

# Receive some data
response = s.recv(4096)

# Print the received data"
1092,"Write a Pandas program to split a dataset, group by one column and get mean, min, and max values by group. Using the following dataset find the mean, min, and max values of purchase amount (purch_amt) group by customer id (customer_id). ","import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
orders_data = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3005,3001,3002,3009,3005,3007,3002,3004,3009,3008,3003,3002],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(orders_data)
result = orders_data.groupby('customer_id').agg({'purch_amt': ['mean', 'min', 'max']})
print(""\nMean, min, and max values of purchase amount (purch_amt) group by customer id  (customer_id)."")
print(result)
","import pandas as pd

# Read the data
df = pd.read_csv('purchase_data.csv')

# Group by customer id
grouped = df.groupby('customer_id')

# Get mean, min, and max values
mean = grouped.mean()"
1093,Write a Python program to sort a tuple by its float element. ,"price = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]
print( sorted(price, key=lambda x: float(x[1]), reverse=True))
","tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

tuple.sort()

print(tuple)

# Output:
# (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
# (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
# (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
#"
1094,Write a NumPy program to get the element-wise remainder of an array of division. ,"import numpy as np
x = np.arange(7)
print(""Original array:"")
print(x)
print(""Element-wise remainder of division:"")
print(np.remainder(x, 5))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])

print(a)

print(a.remainder())

# Output:
# [1 2 3 4 5]

# Expected Output:
# [1 2 3]

# Expected Output:
# [1 2]

# Expected Output:
# [1 2]

# Expected Output:
# [1 2]

#"
1095,"Write a Python program to get string representing the date, controlled by an explicit format string. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nString representing the date, controlled by an explicit format string:"")
print(arrow.utcnow().strftime('%d-%m-%Y %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%m-%d %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%d-%m %H:%M:%S'))
","import datetime

def date_converter(date):
    return datetime.datetime.strptime(date, '%d-%m-%Y').strftime('%Y-%m-%d')

print(date_converter('2021-01-01'))

""""""

# Solution 1

import datetime

def date_converter(date):
    return datetime.datetime.strptime(date, '"
1096,Write a Python program to remove a specified column from a given nested list. ,"def remove_column(nums, n):
   for i in nums: 
    del i[n] 
   return nums

list1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]
n = 0
print(""Original Nested list:"")
print(list1)
print(""After removing 1st column:"")
print(remove_column(list1, n))

list2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]
n = 2
print(""\nOriginal Nested list:"")
print(list2)
print(""After removing 3rd column:"")
print(remove_column(list2, n))
","def remove_column(nested_list, column):
    """"""
    :type nested_list: List[List[int]]
    :type column: int
    :rtype: List[List[int]]
    """"""
    if column == 0:
        return nested_list
    else:
        return [item for item in nested_list if item is not None]

# Main
nested_list = [[1, 2, 3], [4, 5, 6], [7,"
1097,Write a Python program to count the frequency of words in a file. ,"from collections import Counter
def word_count(fname):
        with open(fname) as f:
                return Counter(f.read().split())

print(""Number of words in the file :"",word_count(""test.txt""))
","import collections

def count_words(filename):
    """"""
    Count the frequency of words in a file.
    """"""
    # Open the file for reading
    infile = open(filename, 'r')
    # Read the file line by line
    for line in infile:
        # Split the line into words
        words = line.split()
        # Count the number of words
        count = len(words)
        # Print the number of words
        print(count, words)"
1098,Write a Python program to chunk a given list into smaller lists of a specified size. ,"from math import ceil
def chunk_list(lst, size):
  return list(
    map(lambda x: lst[x * size:x * size + size],
      list(range(ceil(len(lst) / size)))))
print(chunk_list([1, 2, 3, 4, 5, 6, 7, 8], 3))
","def chunk(lst, n):
    return [lst[i:i+n] for i in range(0, len(lst), n)]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
print(chunk(lst, n))

""""""

def chunk(lst, n):
    return [lst[i:i+n] for i in range(0, len"
1099,"Write a NumPy program to create a 4x4 array, now create a new array from the said array swapping first and last, second and third columns. ","import numpy as np 
nums = np.arange(16, dtype='int').reshape(-1, 4)
print(""Original array:"")
print(nums)
print(""\nNew array after swapping first and last columns of the said array:"")
new_nums = nums[:, ::-1]
print(new_nums)
","import numpy as np

arr = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])

arr2 = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])

arr3 = np.array([[1,2,3,4],[5,6"
1100,"Write a Python program to create a time object with the same hour, minute, second, microsecond and a timestamp representation of the Arrow object, in UTC time. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nTime object with the same hour, minute, second, microsecond:"")
print(arrow.utcnow().time())
print(""\nTimestamp representation of the Arrow object, in UTC time:"")
print(arrow.utcnow().timestamp)
","import datetime

class Arrow:
    def __init__(self, hour, minute, second, microsecond, timestamp):
        self.hour = hour
        self.minute = minute
        self.second = second
        self.microsecond = microsecond
        self.timestamp = timestamp
    
    def __str__(self):
        return f'{self.hour}:{self.minute}:{self"
1101,Write a Python program to get the proleptic Gregorian ordinal of a given date. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nProleptic Gregorian ordinal of the date:"")
print(arrow.utcnow().toordinal())
","import calendar

def ordinal(year, month, day):
    if calendar.isleap(year):
        return calendar.monthrange(year, month)[1]
    else:
        return calendar.monthrange(year, month)[0]

print(ordinal(2021, 2, 1))
print(ordinal(2021, 2, 2))
print(ordinal(2021, 2, 3))
print(ordinal(2021, 2, 4"
1102,Write a Python program to capitalize first and last letters of each word of a given string. ,"def capitalize_first_last_letters(str1):
     str1 = result = str1.title()
     result =  """"
     for word in str1.split():
        result += word[:-1] + word[-1].upper() + "" ""
     return result[:-1]  
     
print(capitalize_first_last_letters(""python exercises practice solution""))
print(capitalize_first_last_letters(""w3resource""))
","s = ""Hello World""
print(s.capitalize())

""""""

s = ""Hello World""
print(s.capitalize())"
1103,Write a Python program to find if a given string starts with a given character using Lambda. ,"starts_with = lambda x: True if x.startswith('P') else False
print(starts_with('Python'))
starts_with = lambda x: True if x.startswith('P') else False
print(starts_with('Java'))
","def is_start_with_char(str, char):
    return str.startswith(char)

print(is_start_with_char('python', 't'))

""""""

# Solution 1

def is_start_with_char(str, char):
    return char in str

print(is_start_with_char('python', 't'))

# Solution 2

def is_start_with_char(str, char"
1104,Write a Python program to read a given string character by character and compress repeated character by storing the length of those character(s). ,"from itertools import groupby
def encode_str(input_str):
    return [(len(list(n)), m) for m,n in groupby(input_str)]
 
str1 = ""AAASSSSKKIOOOORRRREEETTTTAAAABBBBBBDDDDD"" 
print(""Original string:"")
print(str1)
print(""Result:"")
print(encode_str(str1))

str1 = ""jjjjiiiiooooosssnssiiiiwwwweeeaaaabbbddddkkkklll"" 
print(""\nOriginal string:"")
print(str1)
print(""Result:"")
print(encode_str(str1))
","def compress(string):
    compressed = """"
    for i in string:
        if i not in compressed:
            compressed += i
    return compressed

print(compress(""abcdefg""))

""""""

def compress(string):
    compressed = """"
    for i in string:
        if i not in compressed:
            compressed += i
            compressed += str(len(compressed))
    return compressed"
1105,Write a NumPy program to create a 3x3x3 array filled with arbitrary values. ,"import numpy as np
x = np.random.random((3, 3, 3))
print(x)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a)

# Solution:
a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a)
print(a.reshape(3, 3))

# Solution:
a = np.array([[1, 2,"
1106,Write a Python program to print a variable without spaces between values. ,"x = 30
print('Value of x is ""{}""'.format(x))
","def print_var(var):
    print(var)

print_var(""Hello"")

""""""

# Solution

def print_var(var):
    print(var)

print_var(""Hello"")

""""""

# Solution

def print_var(var):
    print(var)

print_var(""Hello"")

""""""

# Solution

def print_var(var):
    print(var)

print_var(""Hello"")

"""""""
1107,Write a Python function to reverses a string if it's length is a multiple of 4. ,"def reverse_string(str1):
    if len(str1) % 4 == 0:
       return ''.join(reversed(str1))
    return str1

print(reverse_string('abcd'))
print(reverse_string('python'))
","def reverse_string(string):
    if len(string) % 4 == 0:
        return string[::-1]
    else:
        return string

print(reverse_string(""abcdefg""))

""""""

def reverse_string(string):
    if len(string) % 4 == 0:
        return string[::-1]
    else:
        return string

print(reverse_string(""abcdefg""))"
1108,Write a NumPy program to convert angles from radians to degrees for all elements in a given array. ,"import numpy as np
x = np.array([-np.pi, -np.pi/2, np.pi/2, np.pi])
r1 = np.degrees(x)
r2 = np.rad2deg(x)
assert np.array_equiv(r1, r2)
print(r1)
","import numpy as np

def rad2deg(x):
    return x * 180 / np.pi

def deg2rad(x):
    return x * 180 / np.pi

def main():
    print(""Enter the angles in radians:"")
    print(""Enter the angles in degrees:"")
    print(""Enter the angles in degrees:"")
    print(""Enter the angles in degrees:"")
    print(""Enter the angles in degrees:"")"
1109,Write a NumPy program to extract all the contiguous 4x4 blocks from a given random 12x12 matrix. ,"import numpy as np
arra1 = np.random.randint(0,5,(12,12))
print(""Original arrays:"")
print(arra1)
n = 4
i = 1 + (arra1.shape[0]-4)
j = 1 + (arra1.shape[1]-4)
result = np.lib.stride_tricks.as_strided(arra1, shape=(i, j, n, n), strides = arra1.strides + arra1.strides)
print(""\nContiguous 4x4 blocks:"")
print(result)
","import numpy as np

# Create a random matrix
matrix = np.random.randint(0, 10, size=(12, 12))

# Create a 4x4 block
block = np.zeros((4, 4))

# Fill the block with the values
for i in range(4):
    for j in range(4):
        block[i][j] = matrix[i][j]

# Print the block
print("
1110,Write a Python program to compute the greatest common divisor (GCD) of two positive integers. ,"def gcd(x, y):
   gcd = 1   
   if x % y == 0:
       return y   
   for k in range(int(y / 2), 0, -1):
       if x % k == 0 and y % k == 0:
           gcd = k
           break 
   return gcd
print(""GCD of 12 & 17 ="",gcd(12, 17))
print(""GCD of 4 & 6 ="",gcd(4, 6))
print(""GCD of 336 & 360 ="",gcd(336, 360))
","def gcd(x, y):
    if x > y:
        x, y = y, x
    while y:
        x, y = y, x % y
    return x

print(gcd(12, 24))

# Output:
# 7
# Output:
# 7
# Output:
# 7
# Output:
# 7
# Output:
# 7
# Output:
# 7
# Output:
# 7"
1111,"Write a NumPy program to change the sign of a given array to that of a given array, element-wise. ","import numpy as np
x1 = np.array([-1, 0, 1, 2])
print(""Original array: "")
print(x1)
x2 = -2.1
print(""\nSign of x1 to that of x2, element-wise:"")
print(np.copysign(x1, x2))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)
a[0][0] = -1
print(a)

# Output:
[[-1 -1 -1]
 [ 0  0  0]
 [ 1  1  1]]

""""""

import numpy as np

a = np.array([[1, 2, 3],"
1112,Write a Python program to sort a given list of lists by length and value. ,"def sort_sublists(input_list):
    input_list.sort()  # sort by sublist contents
    input_list.sort(key=len)
    return input_list

list1 = [[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]]
print(""Original list:"")
print(list1)
print(""\nSort the list of lists by length and value:"")
print(sort_sublists(list1))
","def sort_by_length(lst):
    lst.sort(key=len)
    return lst

lst = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]
print(sort_by_length(lst))

""""""

def sort_by_length(lst):
    lst.sort(key=len)"
1113,Write a Python program to calculate the average value of the numbers in a given tuple of tuples using lambda. ,"def average_tuple(nums):
    result = tuple(map(lambda x: sum(x) / float(len(x)), zip(*nums)))
    return result

nums = ((10, 10, 10), (30, 45, 56), (81, 80, 39), (1, 2, 3))
print (""Original Tuple: "")
print(nums)
print(""\nAverage value of the numbers of the said tuple of tuples:\n"",average_tuple(nums))
nums = ((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3))
print (""\nOriginal Tuple: "")
print(nums)
print(""\nAverage value of the numbers of the said tuple of tuples:\n"",average_tuple(nums))

","def average(a,b,c):
    return (a+b+c)/3

print(average(1,2,3))

""""""

# Solution:

def average(a,b,c):
    return (a+b+c)/3

print(average(1,2,3))"
1114,Write a NumPy program to change the dimension of an array. ,"import numpy as np
x = np.array([1, 2, 3, 4, 5, 6])
print(""6 rows and 0 columns"")
print(x.shape)

y = np.array([[1, 2, 3],[4, 5, 6],[7,8,9]])
print(""(3, 3) -> 3 rows and 3 columns "")
print(y)

x = np.array([1,2,3,4,5,6,7,8,9])
print(""Change array shape to (3, 3) -> 3 rows and 3 columns "")
x.shape = (3, 3)
print(x)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])

a.shape = (2, 3)

a.shape = (2, 3, 1)

a.shape = (2, 3, 1, 1)

a.shape = (2, 3, 1, 1, 1)

a.shape = (2, 3, 1, 1, 1, 1)

a.shape = (2, 3,"
1115,Write a Pandas program to replace missing white spaces in a given string with the least frequent character. ,"import pandas as pd
str1 = 'abc def abcdef icd'
print(""Original series:"")
print(str1)
ser = pd.Series(list(str1))
element_freq = ser.value_counts()
print(element_freq)
current_freq = element_freq.dropna().index[-1]
result = """".join(ser.replace(' ', current_freq))
print(result)
","def solution(s):
    # your code goes here
    return s.lower().count(' ')

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This"
1116,Write a Pandas program to remove the time zone information from a Time series data. ,"import pandas as pd
date1 = pd.Timestamp('2019-01-01', tz='Europe/Berlin')
date2 = pd.Timestamp('2019-01-01', tz='US/Pacific')
date3 = pd.Timestamp('2019-01-01', tz='US/Eastern')
print(""Time series data with time zone:"")
print(date1)
print(date2)
print(date3)
print(""\nTime series data without time zone:"")
print(date1.tz_localize(None))
print(date2.tz_localize(None))
print(date3.tz_localize(None))
","import pandas as pd

# Read the data
data = pd.read_csv('time_series.csv')

# Create a new column in the dataframe
data['timezone'] = data['date'].dt.tz_localize(None)

# Remove the timezone information
data = data.drop(columns=['date', 'timezone'])

# Write the dataframe to a new csv file
data.to_csv('time_zone_"
1117,Write a Python program to print the calendar of a given month and year.,"import calendar
y = int(input(""Input the year : ""))
m = int(input(""Input the month : ""))
print(calendar.month(y, m))","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution 23"
1118,Write a Python program to count the number of lines in a text file. ,"def file_lengthy(fname):
        with open(fname) as f:
                for i, l in enumerate(f):
                        pass
        return i + 1
print(""Number of lines in the file: "",file_lengthy(""test.txt""))
","import os

def count_lines(filename):
    """"""
    Count the number of lines in a text file.
    """"""
    try:
        with open(filename, 'r') as f:
            contents = f.readlines()
            return len(contents)
    except FileNotFoundError:
        print(f'The file {filename} does not exist.')
        return 0

print(count_lines('text_file.txt'))

""""""
Output"
1119,Write a NumPy program to check element-wise True/False of a given array where signbit is set. ,"import numpy as np
x = np.array([-4, -3, -2, -1, 0, 1, 2, 3, 4])
print(""Original array: "")
print(x)
r1 = np.signbit(x)
r2 = x < 0
assert np.array_equiv(r1, r2)
print(r1)
","import numpy as np

a = np.array([1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0"
1120,"Write a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum. ","def sum_thrice(x, y, z):

     sum = x + y + z
  
     if x == y == z:
      sum = sum * 3
     return sum

print(sum_thrice(1, 2, 3))
print(sum_thrice(3, 3, 3))
","def three_sum(nums):
    nums.sort()
    result = []
    for i in range(len(nums)):
        if i > 0 and nums[i] == nums[i-1]:
            continue
        if nums[i] > 0:
            break
        for j in range(i+1, len(nums)):
            if nums[j] > 0:
                break"
1121,Write a Python program to sort unsorted numbers using Patience sorting. ,"#Ref.https://bit.ly/2YiegZB
from bisect import bisect_left
from functools import total_ordering
from heapq import merge
@total_ordering
class Stack(list):
    def __lt__(self, other):
        return self[-1] < other[-1]
    def __eq__(self, other):
        return self[-1] == other[-1]
def patience_sort(collection: list) -> list:
    stacks = []
    # sort into stacks
    for element in collection:
        new_stacks = Stack([element])
        i = bisect_left(stacks, new_stacks)
        if i != len(stacks):
            stacks[i].append(element)
        else:
            stacks.append(new_stacks)

    # use a heap-based merge to merge stack efficiently
    collection[:] = merge(*[reversed(stack) for stack in stacks])
    return collection            
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
patience_sort(nums)
print(""Sorted order is:"", nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
patience_sort(nums)
print(""Sorted order is:"", nums)
","def sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [10, 7, 8, 9, 1, 5, 6, 4, 3, 2]
print(sort(arr))

""""""

def sort"
1122,Write a Pandas program to filter those records which not appears in a given list from world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
new_w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(new_w_a_con.head())
print(""\nSelect all rows which not appears in a given list:"")
who_region = [""Africa"", ""Eastern Mediterranean"", ""Europe""]
flt_wine = ~new_w_a_con[""WHO region""].isin(who_region)
print(new_w_a_con[flt_wine])
","import pandas as pd

df = pd.read_csv(""world_alcohol_consumption.csv"")

df = df[df['alcohol']!= '?']

df.to_csv('world_alcohol_consumption_filtered.csv')

# Solution:

df = pd.read_csv(""world_alcohol_consumption_filtered.csv"")

df = df[df['alcohol']!= '?']

df"
1123,"Write a Pandas program to create a Pivot table and count survival by gender, categories wise age of various classes. ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
age = pd.cut(df['age'], [0, 10, 30, 60, 80])
result = df.pivot_table('survived', index=['sex',age], columns='pclass', aggfunc='count')
print(result)
","import pandas as pd

df = pd.read_csv(""https://github.com/jbrownlee/Datasets/blob/master/iris.csv"")

df.head()

df.columns = ['sepal_length','sepal_width', 'petal_length', 'petal_width', 'class']

df.head()

df.describe()

df.groupby('class').surv"
1124,Write a NumPy program to round elements of the array to the nearest integer. ,"import numpy as np
x = np.array([-.7, -1.5, -1.7, 0.3, 1.5, 1.8, 2.0])
print(""Original array:"")
print(x)
x = np.rint(x)
print(""Round elements of the array to the nearest integer:"")
print(x)
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

rounded = np.around(a, decimals=2)

rounded = np.around(a, decimals=2)

rounded = np.around(a, decimals=2)

rounded = np.around(a, decimals=2)

rounded = np.around(a, decimals="
1125,Write a Pandas program to count the missing values in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df) 
print(""\nTotal missing values in a dataframe:"")
tot_missing_vals = df.isnull().sum().sum()
print(tot_missing_vals)
","import pandas as pd

# Read the data from the file
df = pd.read_csv(""data.csv"")

# Print the number of missing values in the DataFrame
print(df.isnull().sum())

# Print the number of missing values in the DataFrame
print(df.isnull().sum())

# Print the number of missing values in the DataFrame
print(df.isnull().sum())

# Print the number of missing values in the DataFrame"
1126,Write a Python program to remove all the values except integer values from a given array of mixed values. ,"def test(lst):
    return [lst for lst in lst if isinstance(lst, int)]
mixed_list = [34.67, 12, -94.89, ""Python"", 0, ""C#""]
print(""Original list:"", mixed_list)
print(""After removing all the values except integer values from the said array of mixed values:"")
print(test(mixed_list)) 
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr)

arr = np.delete(arr, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr)

arr = np.delete(arr, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],"
1127,Write a Python program to calculate the sum of two lowest negative numbers of a given array of integers. ,"def test(nums):
    result = sorted([item for item in nums if item < 0])
    return result[0]+result[1]

nums = [-14, 15, -10, -11, -12, -13, 16, 17, 18, 19, 20]
print(""Original list elements:"")
print(nums)
print(""Sum of two lowest negative numbers of the said array of integers: "",test(nums))
nums = [-4, 5, -2, 0, 3, -1, 4 , 9]
print(""\nOriginal list elements:"")
print(nums)
print(""Sum of two lowest negative numbers of the said array of integers: "",test(nums))
","def sum_of_numbers(nums):
    sum = 0
    for num in nums:
        if num < 0:
            sum += num
    return sum

print(sum_of_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))

""""""

def sum_of_numbers(nums):
    sum = 0
    for num"
1128,Write a Python program to convert a given list of lists to a dictionary. ,"def test(lst):
    result = {item[0]: item[1:] for item in lst}
    return result

students = [[1, 'Jean Castro', 'V'], [2, 'Lula Powell', 'V'], [3, 'Brian Howell', 'VI'], [4, 'Lynne Foster', 'VI'], [5, 'Zachary Simon', 'VII']]

print(""\nOriginal list of lists:"")
print(students)
print(""\nConvert the said list of lists to a dictionary:"")
print(test(students))
","l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}

l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7,"
1129,Write a Python program to extract a given number of randomly selected elements from a given list. ,"import random
def random_select_nums(n_list, n):
        return random.sample(n_list, n)
n_list = [1,1,2,3,4,4,5,1]
print(""Original list:"") 
print(n_list)
selec_nums = 3
result = random_select_nums(n_list, selec_nums)
print(""\nSelected 3 random numbers of the above list:"")
print(result) 
","import random

def random_selection(lst, n):
    """"""
    This function returns a list of n random elements from the given list.
    """"""
    return [lst[random.randint(0, len(lst) - 1)] for i in range(n)]

print(random_selection(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',"
1130," Write a Python program to that retrieves an arbitary Wikipedia page of ""Python"" and creates a list of links on that page. ","from urllib.request import urlopen
from urllib.error import HTTPError
from bs4 import BeautifulSoup
def getTitle(url):
    try:
        html = urlopen(url)
    except HTTPError as e:
        return None
    try:
        bsObj = BeautifulSoup(html.read(), ""lxml"")
        title = bsObj.body.h1
    except AttributeError as e:
        return None
    return title
    
    title = getTitle(url)
    if title == None:
      return ""Title could not be found""
    else:
      return title

print(getTitle(""https://www.w3resource.com/""))
print(getTitle(""http://www.example.com/""))
","import requests

url = ""https://en.wikipedia.org/wiki/Python""

response = requests.get(url)

print(response.text)

print(response.status_code)

print(response.headers)

print(response.headers.get('Content-Type'))

print(response.headers.get('Content-Language'))

print(response.headers.get('Content-Language', '"
1131,Write a Python program to alter the owner and the group id of a specified file. ,"import os
fd = os.open( ""/tmp"", os.O_RDONLY )
os.fchown( fd, 100, -1)
os.fchown( fd, -1, 50)
print(""Changed ownership successfully.."")
os.close( fd )
","import os

def alter_owner_and_group_id(file_name):
    # Open the file
    with open(file_name, 'r') as file:
        # Read the file
        data = file.read()
        # Change the owner
        data = data.replace('owner', 'owner_id')
        # Change the group id
        data = data.replace('group_id', 'group_id_id')
        # Write the file
        with"
1132,"Write a NumPy program to create a two-dimensional array with shape (8,5) of random numbers. Select random numbers from a normal distribution (200,7). ","import numpy as np 
np.random.seed(20) 
cbrt = np.cbrt(7)
nd1 = 200 
print(cbrt * np.random.randn(10, 4) + nd1) 
","import numpy as np

np.random.seed(0)

x = np.random.normal(loc=0, scale=1, size=(8,5))

print(x)

# Output:
[[ 0.9077999  0.9077999  0.9077999  0.9077999  0.9077999  0.9077"
1133,Write a Python program to multiply two integers without using the * operator in python. ,"def multiply(x, y):
    if y < 0:
        return -multiply(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply(x, y - 1)

print(multiply(3, 5));
","def multiply(a,b):
    return a*b

print(multiply(2,3))

""""""

# Solution:

def multiply(a,b):
    return a*b

print(multiply(2,3))"
1134,Write a Pandas program to extract email from a specified column of string type of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'name_email': ['Alberto Franco [emailprotected]','Gino Mcneill [emailprotected]','Ryan Parkes [emailprotected]', 'Eesha Hinton', 'Gino Mcneill [emailprotected]']
    })
print(""Original DataFrame:"")
print(df)
def find_email(text):
    email = re.findall(r'[\w\.-][emailprotected][\w\.-]+',str(text))
    return "","".join(email)
df['email']=df['name_email'].apply(lambda x: find_email(x))
print(""\Extracting email from dataframe columns:"")
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi"
1135,Write a Python program to read a given CSV files with initial spaces after a delimiter and remove those initial spaces. ,"import csv
print(""\nWith initial spaces after a delimiter:\n"")
with open('departments.csv', 'r') as csvfile:
   data = csv.reader(csvfile, skipinitialspace=False)
   for row in data:
     print(', '.join(row))
print(""\n\nWithout initial spaces after a delimiter:\n"")
with open('departments.csv', 'r') as csvfile:
   data = csv.reader(csvfile, skipinitialspace=True)
   for row in data:
     print(', '.join(row))
","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)

# Solution:

# import csv
#
# with open('data.csv', 'r') as f:
#     csv_reader = csv.reader(f)
#     for row in csv_reader:
#         print"
1136,"Write a Pandas program to split a given dataset, group by one column and remove those groups if all the values of a specific columns are not available. ","import pandas as pd
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'weight': [173, 192, 186, 167, 151, 159],
    'height': [35, None, 33, 30, None, 32]},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])
print(""Original DataFrame:"")
print(df)
print(""\nGroup by one column and remove those groups if all the values of a specific columns are not available:"")
result = df[(~df['height'].isna()).groupby(df['school_code']).transform('any')]
print(result)
","import pandas as pd

# Read the data
df = pd.read_csv(""data/pima-indians-diabetes.csv"")

# Create a new column called 'Status'
df['Status'] = df['Outcome'].map({'Not Available': 0, 'Available': 1})

# Remove the 'Outcome' column
df = df.drop('Outcome', axis=1)"
1137,Write a Python program to check whether a string starts with specified characters.,"string = ""w3resource.com""
print(string.startswith(""w3r""))
","s = ""abcdefghijklmnopqrstuvwxyz""

print(""The string starts with the characters:"",s[0:5])

""""""

s = ""abcdefghijklmnopqrstuvwxyz""

print(""The string starts with the characters:"",s[0:5])

""""""

s = ""abcdefghijklmnopqrstuvwxyz""

print(""The string starts with the characters:"",s["
1138,Write a NumPy program to get the largest integer smaller or equal to the division of the inputs. ,"import numpy as np
x = [1., 2., 3., 4.]
print(""Original array:"")
print(x)
print(""Largest integer smaller or equal to the division of the inputs:"")
print(np.floor_divide(x, 1.5))
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
b = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(np.argmax(a))
print(np.argmin(a))

# Output:
# 1
# 2
# 3
# 4
# 5
# 6
# 7"
1139,Write a Python program to calculate the maximum aggregate from the list of tuples (pairs). ,"from collections import defaultdict
def max_aggregate(st_data):
    temp = defaultdict(int)
    for name, marks in st_data:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])


students = [('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]
print(""Original list:"")
print(students)
print(""\nMaximum aggregate value of the said list of tuple pair:"")
print(max_aggregate(students))
","def max_aggregate(pairs):
    max_aggregate = 0
    for pair in pairs:
        if max_aggregate < pair[1]:
            max_aggregate = pair[1]
    return max_aggregate

print(max_aggregate([(1, 2), (3, 4), (5, 6)]))

""""""

# Solution:

def max_aggregate(pairs):
    max_aggregate = 0"
1140,"Write a NumPy program to create a random array with 1000 elements and compute the average, variance, standard deviation of the array elements. ","import numpy as np
x = np.random.randn(1000)
print(""Average of the array elements:"")
mean = x.mean()
print(mean)
print(""Standard deviation of the array elements:"")
std = x.std()
print(std)
print(""Variance of the array elements:"")
var = x.var()
print(var)
","import numpy as np

# Create a random array of 1000 elements
np.random.seed(0)
a = np.random.randint(0, 100, 1000)

# Compute the average
avg = np.mean(a)

# Compute the variance
var = np.var(a)

# Compute the standard deviation
std = np.std(a)

# Print the results
print(""The"
1141,Write a NumPy program to split array into multiple sub-arrays along the 3rd axis. ,"import numpy as np    
print(""\nOriginal arrays:"")
x = np.arange(16.0).reshape(2, 2, 4)
print(x)
new_array1 = np.dsplit(x, 2)
print(""\nsplit array into multiple sub-arrays along the 3rd axis:"")
print(new_array1)
","import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(arr)

# Output:
[[1 2 3]
 [4 5 6]
 [7 8 9]]

# Output:
[[1 4]
 [2 5]
 [3 6]]

# Output:
[[1 4]
 [2 5]
 [3 6]]

#"
1142,Write a NumPy program to change the data type of an array. ,"import numpy as np
x = np.array([[2, 4, 6], [6, 8, 10]], np.int32)
print(x)
print(""Data type of the array x is:"",x.dtype)
# Change the data type of x
y = x.astype(float)
print(""New Type: "",y.dtype)
print(y)
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
a.dtype = np.int64

# a = np.array([1, 2, 3, 4, 5])
# a.dtype = np.float64

# a = np.array([1, 2, 3, 4, 5])
# a.dtype = np.int32

# a = np.array([1, 2, 3, 4, 5])"
1143,"Write a NumPy program to Create a 1-D array of 30 evenly spaced elements between 2.5. and 6.5, inclusive. ","import numpy as np
x = np.linspace(2.5, 6.5, 30)
print(x)
","import numpy as np

x = np.arange(2.5, 6.5, 0.1)

# Create a NumPy array of 30 evenly spaced elements between 2.5 and 6.5, inclusive.

# Create a NumPy array of 30 evenly spaced elements between 2.5 and 6.5, inclusive.

# Create a NumPy array of 30 evenly spaced elements between 2.5 and 6.5, inclusive."
1144,Write a Pandas program to drop the rows where all elements are missing in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[np.nan,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[np.nan,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': [np.nan,'2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[np.nan,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001]})

print(""Original Orders DataFrame:"")
print(df)
print(""\nDrop the rows where all elements are missing:"")
result = df.dropna(how='all')
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

# drop rows where all elements are missing in the DataFrame
df.dropna(inplace=True)

# print the DataFrame
print(df)

# output
#     col1  col2
# 0     1     10
# 1"
1145,Write a Pandas program to remove repetitive characters from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'text_code': ['t0001.','t0002','t0003', 't0004'],
    'text_lang': ['She livedd a long life.', 'How oold is your father?', 'What is tthe problem?','TThhis desk is used by Tom.']
    })
print(""Original DataFrame:"")
print(df)
def rep_char(str1):
    tchr = str1.group(0)
    if len(tchr) > 1:
        return tchr[0:1] # can change the value here on repetition
def unique_char(rep, sent_text):
    convert = re.sub(r'(\w)\1+', rep, sent_text) 
    return convert
df['normal_text']=df['text_lang'].apply(lambda x : unique_char(rep_char,x))
print(""\nRemove repetitive characters:"")
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', '"
1146,Write a Python program to remove the specific item from a given list of lists. ,"import copy	
def remove_list_of_lists(color, N):
    for x in color:
        del x[N]
    return color

nums = [
        [""Red"",""Maroon"",""Yellow"",""Olive""],
        [""#FF0000"", ""#800000"", ""#FFFF00"", ""#808000""],
        [""rgb(255,0,0)"",""rgb(128,0,0)"",""rgb(255,255,0)"",""rgb(128,128,0)""]
       ]
nums1 =  copy.deepcopy(nums)
nums2 =  copy.deepcopy(nums)
nums3 =  copy.deepcopy(nums)

print(""Original list of lists:"")
print(nums)
N = 0
print(""\nRemove 1st item from the said list of lists:"")
print(remove_list_of_lists(nums1, N))
N = 1
print(""\nRemove 2nd item from the said list of lists:"")
print(remove_list_of_lists(nums2, N))
N = 3
print(""\nRemove 4th item from the said list of lists:"")
print(remove_list_of_lists(nums3, N))
","def remove_item(lst, item):
    for i in range(len(lst)):
        if lst[i][0] == item:
            lst.pop(i)
    return lst

lst = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
print(remove_item(lst, 5))

""""""

def remove_"
1147,Write a Pandas program to convert a given Series to an array. ,"import pandas as pd
import numpy as np
s1 = pd.Series(['100', '200', 'python', '300.12', '400'])
print(""Original Data Series:"")
print(s1)
print(""Series to an array"")
a = np.array(s1.values.tolist())
print (a)
","import pandas as pd

# Create a Pandas DataFrame from a Series
df = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create an array from the Series
arr = df.values

# Create an array from a Series
arr2 = df.values

# Create an array from a Series
arr3 = df.values

# Create an array from a Series
arr4 = df.values

# Create"
1148,Write a NumPy program to split the element of a given array with spaces. ,"import numpy as np
x = np.array(['Python PHP Java C++'], dtype=np.str)
print(""Original Array:"")
print(x)
r = np.char.split(x)
print(""\nSplit the element of the said array with spaces: "")
print(r)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr)

# Solution:

# arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
# print(arr)
# print(arr.shape)
# print(arr.dtype)
# print(arr.ndim)
# print(arr."
1149,Write a Python program to find the item with maximum frequency in a given list. ,"from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result
nums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]
print (""Original list:"")
print(nums)
print(""\nItem with maximum frequency of the said list:"")
print(max_occurrences(nums))
","def max_freq(lst):
    max_freq = 0
    for i in lst:
        if i > max_freq:
            max_freq = i
    return max_freq

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_freq(lst))

""""""

def max_freq(lst):
    max_freq = 0"
1150,Write a Python program to check if a given element occurs at least n times in a list. ,"def check_element_in_list(lst, x, n):
    t = 0
    try:
        for _ in range(n):
            t = lst.index(x, t) + 1
        return True
    except ValueError:
        return False

nums = [0,1,3,5,0,3,4,5,0,8,0,3,6,0,3,1,1,0]
print(""Original list:"")
print(nums)
x = 3
n = 4
print(""\nCheck if"",x,""occurs at least"",n,""times in a list:"")
print(check_element_in_list(nums,x,n))
x = 0
n = 5
print(""\nCheck if"",x,""occurs at least"",n,""times in a list:"")
print(check_element_in_list(nums,x,n))
x = 8
n = 3
print(""\nCheck if"",x,""occurs at least"",n,""times in a list:"")
print(check_element_in_list(nums,x,n))
","def atLeastN(list, n):
    for i in range(len(list)):
        if list[i] < n:
            return False
    return True

print(atLeastN([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))

""""""

def atLeastN(list, n):
    for i in range(len(list)):
        if list[i] < n:"
1151,Write a Python program to find maximum length of consecutive 0's in a given binary string. ,"def max_consecutive_0(input_str): 
     return  max(map(len,input_str.split('1')))
str1 = '111000010000110'
print(""Original string:"" + str1)
print(""Maximum length of consecutive 0s:"")
print(max_consecutive_0(str1))
str1 = '111000111'
print(""Original string:"" + str1)
print(""Maximum length of consecutive 0s:"")
print(max_consecutive_0(str1))
","def max_consecutive_zeroes(binary_string):
    max_len = 0
    for i in range(len(binary_string)):
        if binary_string[i] == '0':
            if i == 0 or binary_string[i-1] == '0':
                max_len += 1
            else:
                max_len = max(max_len, i-1)
    return max_len

print(max_consecutive"
1152,Write a python program to find the next smallest palindrome of a specified number. ,"import sys
def Next_smallest_Palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i

print(Next_smallest_Palindrome(99));
print(Next_smallest_Palindrome(1221));
","def next_smallest(n):
    if n == 1:
        return 1
    if n == 2:
        return 2
    if n == 3:
        return 3
    if n % 2 == 0:
        return next_smallest(n//2)
    else:
        return next_smallest(n-1)

print(next_smallest(int(input())))

""""""

def next_smallest(n):
    if n =="
1153,Write a Python program to generate an infinite cycle of elements from an iterable. ,"import itertools as it
def cycle_data(iter):
    return it.cycle(iter)
# Following  loops will run for ever    
#List
result = cycle_data(['A','B','C','D'])
print(""The said function print never-ending items:"")
for i in result:
    print(i)

#String
result = cycle_data('Python itertools')
print(""The said function print never-ending items:"")
for i in result:
    print(i)
","def cycle(iterable):
    for i in iterable:
        yield i

# Create a generator object
gen = cycle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Print the first element of the generator object
print(next(gen))

# Print the second element of the generator object
print(next(gen))

# Print the third element of the generator object
print(next(gen))

# Print the fourth"
1154,Write a NumPy program totest whether any of the elements of a given array is non-zero. ,"import numpy as np
x = np.array([1, 0, 0, 0])
print(""Original array:"")
print(x)
print(""Test whether any of the elements of a given array is non-zero:"")
print(np.any(x))
x = np.array([0, 0, 0, 0])
print(""Original array:"")
print(x)
print(""Test whether any of the elements of a given array is non-zero:"")
print(np.any(x))
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

if np.nonzero(a)[0].size!= 0:
    print(""Array contains non-zero elements."")
else:
    print(""Array does not contain non-zero elements."")

# Output:
# Array contains non-zero elements.
# 
# Array does not contain non-zero elements."
1155,Write a Python program to get the array size of types unsigned integer and float. ,"from array import array
a = array(""I"", (12,25))
print(a.itemsize)
a = array(""f"", (12.236,36.36))
print(a.itemsize)
","def get_array_size(arr):
    return len(arr)

print(get_array_size([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def get_array_size(arr):
    return len(arr)

print(get_array_size([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def get_array_size("
1156,Write a Python program to print the index of the character in a string. ,"str1 = ""w3resource""
for index, char in enumerate(str1):
    print(""Current character"", char, ""position at"", index )
","def index_of_char(string, char):
    for i in range(len(string)):
        if string[i] == char:
            return i
    return -1

# driver code
string = ""Python is fun""
char = ""P""

print(index_of_char(string, char))

# Output:
# -1
# -1
# -1
# -1
# -1
# -1
# -1
# -1"
1157,Write a Python program to parse a given CSV string and get the list of lists of string values. Use csv.reader,"import csv
csv_string = """"""1,2,3
4,5,6
7,8,9
""""""
print(""Original string:"")
print(csv_string)
lines = csv_string.splitlines()
print(""List of CSV formatted strings:"")
print(lines)
reader = csv.reader(lines)
parsed_csv = list(reader)
print(""\nList representation of the CSV file:"")
print(parsed_csv)
","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    data = list(csv_reader)

data = data[1:]

for i in range(len(data)):
    data[i] = data[i][0].split(',')

print(data)

# Solution:

import csv

with open('data.csv',"
1158,"Write a Pandas program to filter all records starting from the 'Year' column, access every other column from world alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nFrom the 'Year' column, access every other column:"")
print(w_a_con.loc[:,'Year'::2].head(10))
print(""\nAlternate solution:"")
print(w_a_con.iloc[:,0::2].head(10))
","import pandas as pd

df = pd.read_csv('world_alcohol_consumption.csv')

df = df[df['Year'] >= '1960']

df = df[df['Year'] <= '1980']

df = df[df['World'] >= '0-1']

df = df[df['World'] <= '10']

df = df[df['World'] >= '10-20']"
1159,"Write a Pandas program to get the current date, oldest date and number of days between Current date and oldest date of Ufo dataset. ","import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nCurrent date of Ufo dataset:"")
print(df.Date_time.max())
print(""\nOldest date of Ufo dataset:"")
print(df.Date_time.min())
print(""\nNumber of days between Current date and oldest date of Ufo dataset:"")
print((df.Date_time.max() - df.Date_time.min()).days)
","import pandas as pd
import datetime

df = pd.read_csv('https://github.com/datasets/ufo-data/raw/master/data/ufo-data.csv')
df['date'] = pd.to_datetime(df['date'])
df['date'] = df['date'].dt.date
df['date'] = df['date'].dt.strftime('%"
1160,Write a Python program to filter even numbers from a given dictionary values. ,"def test(dictt):
    result = {key: [idx for idx in val if not idx % 2]  
          for key, val in dictt.items()}   
    return result    

students = {'V' : [1, 4, 6, 10], 'VI' : [1, 4, 12], 'VII' : [1, 3, 8]} 
print(""\nOriginal Dictionary:"")
print(students)
print(""Filter even numbers from said dictionary values:"")
print(test(students))

students = {'V' : [1, 3, 5], 'VI' : [1, 5], 'VII' : [2, 7, 9]} 
print(""\nOriginal Dictionary:"")
print(students)
print(""Filter even numbers from said dictionary values:"")
print(test(students))
","def even_numbers(d):
    new_dict = {}
    for key, value in d.items():
        if key % 2 == 0:
            new_dict[key] = value
    return new_dict

print(even_numbers({1: 2, 3: 4, 5: 6, 7: 8, 9: 10, 11: 12, 12: 13}))

""""""

def even_numbers(d):
    new_dict = {}
    for key"
1161,Write a Pandas program to split the following dataset using group by on first column and aggregate over multiple lists on second column. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
df = pd.DataFrame({
    'student_id': ['S001','S001','S002','S002','S003','S003'],
    'marks': [[88,89,90],[78,81,60],[84,83,91],[84,88,91],[90,89,92],[88,59,90]]})
print(""Original DataFrame:"")
print(df)
print(""\nGroupby and aggregate over multiple lists:"")
result = df.set_index('student_id')['marks'].groupby('student_id').apply(list).apply(lambda x: np.mean(x,0))
print(result)
","import pandas as pd

df = pd.read_csv(""https://github.com/datasets/csv/raw/master/data/finance.csv"")

df.groupby(['first_name', 'last_name']).agg(
    {'balance': ['sum']}).reset_index()

df.groupby(['first_name', 'last_name']).agg(
    {'balance': ['"
1162,Write a NumPy program to calculate the arithmetic means of corresponding elements of two given arrays of same size. ,"import numpy as np 
nums1 = np.array([[2, 5, 2],
              [1, 5, 5]])
nums2 = np.array([[5, 3, 4],
              [3, 2, 5]])
print(""Array1:"") 
print(nums1)
print(""Array2:"") 
print(nums2)
print(""\nArithmetic means of corresponding elements of said two arrays:"")
print(np.divide(np.add(nums1, nums2), 2))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(np.mean(a, axis=0))
print(np.mean(b, axis=0))

# Output:
# [7.5 6.5]
# [10.5 11.5]

# H"
1163,Write a Python program to count the number of sublists contain a particular element. ,"def count_element_in_list(input_list, x): 
    ctr = 0
    for i in range(len(input_list)): 
        if x in input_list[i]: 
            ctr+= 1
          
    return ctr
      

list1 = [[1, 3], [5, 7], [1, 11], [1, 15, 7]] 
print(""Original list:"")
print(list1)
print(""\nCount 1 in the said list:"")
print(count_element_in_list(list1, 1)) 
print(""\nCount 7 in the said list:"")
print(count_element_in_list(list1, 7)) 


list1 = [['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']] 
print(""\nOriginal list:"")
print(list1)
print(""\nCount 'A' in the said list:"")
print(count_element_in_list(list1, 'A')) 
print(""\nCount 'E' in the said list:"")
print(count_element_in_list(list1, 'E'))
","def count_sublists(arr, element):
    count = 0
    for i in range(len(arr)):
        if arr[i] == element:
            count += 1
    return count

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
element = 5
print(count_sublists(arr, element))

""""""

def count_sublists(arr, element):
    count = 0
    for i"
1164,"Write a NumPy program to create a three-dimension array with shape (3,5,4) and set to a variable. ","import numpy as np  
nums = np.array([[[1, 5, 2, 1],
               [4, 3, 5, 6],
               [6, 3, 0, 6],
               [7, 3, 5, 0],
               [2, 3, 3, 5]],
              
              [[2, 2, 3, 1],
               [4, 0, 0, 5],
               [6, 3, 2, 1],
               [5, 1, 0, 0],               
               [0, 1, 9, 1]],
              
              [[3, 1, 4, 2],
               [4, 1, 6, 0],
               [1, 2, 0, 6],
               [8, 3, 4, 0],               
               [2, 0, 2, 8]]]) 
print(""Array:"")
print(nums)
","import numpy as np

arr = np.array([[1,2,3,4,5],
                [6,7,8,9,10],
                [11,12,13,14,15]])

arr = np.array([[1,2,3,4,5],
                [6,7,8,9,10],
                [11,12,13,14,15]])

arr"
1165,Write a NumPy program to create random set of rows from 2D array. ,"import numpy as np
new_array = np.random.randint(5, size=(5,3))
print(""Random set of rows from 2D array array:"")
print(new_array)
","import numpy as np

# Create a 2D array
A = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
              [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
              [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]])

# Print the array
print(A)

# Create a random 2D array
B ="
1166,"Write a Python program to get the difference between two given lists, after applying the provided function to each list element of both. ","def difference_by(a, b, fn):
  _b = set(map(fn, b))
  return [item for item in a if fn(item) not in _b]
from math import floor
print(difference_by([2.1, 1.2], [2.3, 3.4], floor)) 
print(difference_by([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], lambda v : v['x']))
","def get_difference(list1, list2):
    return list1[0] - list2[0], list1[1] - list2[1]

print(get_difference([1, 2, 3], [4, 5, 6]))

""""""

def get_difference(list1, list2):
    return list1[0] - list2[0], list1[1] - list2[1]"
1167,Write a Pandas program to create a Pivot table and calculate number of women and men were in a particular cabin class. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table(index=['sex'], columns=['pclass'], aggfunc='count')
print(result)
","import pandas as pd

df = pd.read_csv(""C:\\Users\\DELL\\Desktop\\Python\\Data_Visualization\\cabin_class.csv"")

df.head()

df.columns

df.shape

df.dtypes

df.describe()

df.isnull().sum()

df.dropna(inplace=True)

df.head()

df."
1168,"Write a Python program to get a new string from a given string where ""Is"" has been added to the front. If the given string already begins with ""Is"" then return the string unchanged. ","def new_string(str):
  if len(str) >= 2 and str[:2] == ""Is"":
    return str
  return ""Is"" + str

print(new_string(""Array""))
print(new_string(""IsEmpty""))
","def is_is(s):
    if s[0] == 'I':
        return s[1:]
    else:
        return s

print(is_is('Is Is'))

""""""

def is_is(s):
    if s[0] == 'I':
        return s[1:]
    else:
        return s

print("
1169,Write a Python program to remove all elements from a given list present in another list. ,"def index_on_inner_list(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result

list1 = [1,2,3,4,5,6,7,8,9,10]
list2 = [2,4,6,8]

print(""Original lists:"")
print(""list1:"", list1)
print(""list2:"", list2)

print(""\nRemove all elements from 'list1' present in 'list2:"")
print(index_on_inner_list(list1, list2))
","def remove_elements(lst, ele):
    lst.remove(ele)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
ele = 5
remove_elements(lst, ele)
print(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
ele = 5
remove_elements(lst, ele)
print"
1170,Write a Python program to concatenate all elements in a list into a string and return it. ,"def concatenate_list_data(list):
    result= ''
    for element in list:
        result += str(element)
    return result

print(concatenate_list_data([1, 5, 12, 2]))
","def concatenate_list(list):
    return """".join(list)

print(concatenate_list([1, 2, 3]))

""""""

def concatenate_list(list):
    return """".join(list)

print(concatenate_list([1, 2, 3]))

""""""

def concatenate_list(list):
    return """".join(list)

print(concaten"
1171,Write a Pandas program to select a specific row of given series/dataframe by integer index. ,"import pandas as pd
ds = pd.Series([1,3,5,7,9,11,13,15], index=[0,1,2,3,4,5,7,8])
print(""Original Series:"")
print(ds)
print(""\nPrint specified row from the said series using location based indexing:"")
print(""\nThird row:"")
print(ds.iloc[[2]])
print(""\nFifth row:"")
print(ds.iloc[[4]])
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32]})

print(""Original DataFrame with single index:"")
print(df)
print(""\nPrint specified row from the said DataFrame using location based indexing:"")
print(""\nThird row:"")
print(df.iloc[[2]])
print(""\nFifth row:"")
print(df.iloc[[4]])
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

# Create a series
s = pd.Series([1, 2, 3, 4, 5])

# Select a specific row
print(df.iloc[0])

# Select a specific row
print(df.il"
1172,"Write a Python program to check if a function is a user-defined function or not. Use types.FunctionType, types.LambdaType()","import types
def func(): 
    return 1

print(isinstance(func, types.FunctionType))
print(isinstance(func, types.LambdaType))
print(isinstance(lambda x: x, types.FunctionType))
print(isinstance(lambda x: x, types.LambdaType))
print(isinstance(max, types.FunctionType))
print(isinstance(max, types.LambdaType))
print(isinstance(abs, types.FunctionType))
print(isinstance(abs, types.LambdaType))
","def is_user_defined_function(func):
    if type(func) == types.FunctionType:
        return True
    else:
        return False

print(is_user_defined_function(lambda x: x + 1))

""""""

# Solution:

def is_user_defined_function(func):
    if type(func) == types.FunctionType:
        return True
    else:"
1173,Write a Python program to match key values in two dictionaries. ,"x = {'key1': 1, 'key2': 3, 'key3': 2}
y = {'key1': 1, 'key2': 2}
for (key, value) in set(x.items()) & set(y.items()):
    print('%s: %s is present in both x and y' % (key, value))
	","def match_key_values(dict1, dict2):
    for key in dict1:
        if key in dict2:
            if dict1[key] == dict2[key]:
                print(f""{key} is a match"")
            else:
                print(f""{key} is not a match"")
        else:
            print(f""{key} is not a match"")

if __name__ == '__main__':
    dict1 = {'a': 1"
1174,Write a Python program to add a prefix text to all of the lines in a string. ,"import textwrap
sample_text ='''
    Python is a widely used high-level, general-purpose, interpreted,
    dynamic programming language. Its design philosophy emphasizes
    code readability, and its syntax allows programmers to express
    concepts in fewer lines of code than possible in languages such
    as C++ or Java.
    '''
text_without_Indentation = textwrap.dedent(sample_text)
wrapped = textwrap.fill(text_without_Indentation, width=50)
#wrapped += '\n\nSecond paragraph after a blank line.'
final_result = textwrap.indent(wrapped, '> ')
print()
print(final_result)
print()
","def add_prefix(string, prefix):
    return prefix.join(string.splitlines())

print(add_prefix(""Hello World"", ""Hello""))

""""""

def add_prefix(string, prefix):
    return prefix.join(string.splitlines()) + "" ""

print(add_prefix(""Hello World"", ""Hello""))"
1175,Write a Python program to move a specified element in a given list. ,"def group_similar_items(seq,el):
    seq.append(seq.pop(seq.index(el)))
    return seq 

colors = ['red','green','white','black','orange']
print(""Original list:"")
print(colors)
el = ""white""
print(""Move"",el,""at the end of the said list:"")
print(group_similar_items(colors, el))

colors = ['red','green','white','black','orange']
print(""\nOriginal list:"")
print(colors)
el = ""red""
print(""Move"",el,""at the end of the said list:"")
print(group_similar_items(colors, el))

colors = ['red','green','white','black','orange']
print(""\nOriginal list:"")
print(colors)
el = ""black""
print(""Move"",el,""at the end of the said list:"")
print(group_similar_items(colors, el))
","def move_element(list, element, position):
    list.insert(position, element)

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
element = 5
position = 2
move_element(list, element, position)
print(list)

""""""

def move_element(list, element, position):
    list.insert(position, element)

list = [1, 2, 3, 4, 5, 6,"
1176,"Write a NumPy program to create a 2-D array whose diagonal equals [4, 5, 6, 8] and 0's elsewhere. ","import numpy as np
x =  np.diagflat([4, 5, 6, 8])
print(x)
","import numpy as np

a = np.array([[4, 5, 6, 8],
              [0, 0, 0, 0]])

print(a)

# output:
[[4 4 4 4]
 [0 0 0 0]
 [0 0 0 0]]

""""""

import numpy as np

a = np.array([[4, 5, 6, 8],
              [0,"
1177,Write a Python program to computing square roots using the Babylonian method. ,"def BabylonianAlgorithm(number):
    if(number == 0):
        return 0;

    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;

    return g;
print('The Square root of 0.3 =', BabylonianAlgorithm(0.3));
",">>> import math
>>> def sqrt(x):
...     if x == 0:
...         return 0
...     else:
...         y = math.sqrt(x)
...         return y
>>> sqrt(4)
2.0
>>> sqrt(4.0)
2.0
>>> sqrt(4.5)
1.0
>>> sqrt(4.5)
1.0
>>> sqrt(4.5)
1.0
>>> sqrt"
1178,Write a Python program to find thegreatest common divisor(gcd) of two integers. ,"def Recurgcd(a, b):
	low = min(a, b)
	high = max(a, b)

	if low == 0:
		return high
	elif low == 1:
		return 1
	else:
		return Recurgcd(low, high%low)
print(Recurgcd(12,14))
","def gcd(x, y):
    if x > y:
        x, y = y, x
    for i in range(1, y):
        if x % i == 0 and y % i == 0:
            gcd = i
    return gcd

print(gcd(12, 24))

""""""

# Solution:

def gcd(x, y):
    if x > y:
        x, y = y, x"
1179,Write a Pandas program to create a DataFrame using intervals as an index. ,"import pandas as pd
print(""Create an Interval Index using IntervalIndex.from_breaks:"")
df_interval = pd.DataFrame({""X"":[1, 2, 3, 4, 5, 6, 7]},
                            index = pd.IntervalIndex.from_breaks(
                            [0, 0.5, 1.0, 1.5, 2.0, 2.5, 3, 3.5]))    
print(df_interval)
print(df_interval.index)

print(""\nCreate an Interval Index using IntervalIndex.from_tuples:"")
df_interval = pd.DataFrame({""X"":[1, 2, 3, 4, 5, 6, 7]},             
                            index = pd.IntervalIndex.from_tuples(
                            [(0, .5), (.5, 1), (1, 1.5), (1.5, 2), (2, 2.5), (2.5, 3), (3, 3.5)]))
print(df_interval)
print(df_interval.index)

print(""\nCreate an Interval Index using IntervalIndex.from_arrays:"")
df_interval = pd.DataFrame({""X"":[1, 2, 3, 4, 5, 6, 7]},             
                            index = pd.IntervalIndex.from_arrays(
                            [0, .5, 1, 1.5, 2, 2.5, 3], [.5, 1, 1.5, 2, 2.5, 3, 3.5]))
print(df_interval)
print(df_interval.index) 
","import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'A': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'B': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20],
                   'C': [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]})

# Create a DataFrame from a Series
df"
1180,Write a NumPy program to divide each row by a vector element. ,"import numpy as np
x = np.array([[20,20,20],[30,30,30],[40,40,40]])
print(""Original array:"")
print(x)
v = np.array([20,30,40])
print(""Vector:"")
print(v)
print(x / v[:,None])
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a/b)

# Output:
[[1. 2. 3.]
 [4. 5. 6.]]

# %%"
1181,Write a Python program to print the following 'here document'. ,"print(""""""
a string that you ""don't"" have to escape
This
is a  ....... multi-line
heredoc string --------> example
"""""")
","https://www.w3resource.com/python-exercises/python-basic-exercises.php

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

#"
1182,Write a Python program to print the element(s) that has a specified id of a given web page. ,"import requests
import re
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""\nelement(s) that has #python-network id:\n"")
print(soup.select_one(""#python-network""))
","def get_id(web_page):
    for i in range(len(web_page)):
        if web_page[i] == '<':
            return i

print(get_id('<html><body><h1>Hello</h1></body></html>'))

""""""

def get_id(web_page):
    for i in range(len(web_page)):
        if web_page[i] =="
1183,Write a Python program to get a string which is n (non-negative integer) copies of a given string. ,"def larger_string(str, n):
   result = """"
   for i in range(n):
      result = result + str
   return result

print(larger_string('abc', 2))
print(larger_string('.py', 3))
","def get_string(n):
    return """".join(random.choice(string.ascii_letters) for i in range(n))

print(get_string(5))

""""""

# Solution:

def get_string(n):
    return """".join(random.choice(string.ascii_letters) for i in range(n))

print(get_string(5))"
1184,Write a Python program to split a list based on first character of word. ,"from itertools import groupby
from operator import itemgetter

word_list = ['be','have','do','say','get','make','go','know','take','see','come','think',
     'look','want','give','use','find','tell','ask','work','seem','feel','leave','call']

for letter, words in groupby(sorted(word_list), key=itemgetter(0)):
    print(letter)
    for word in words:
        print(word)
","lst = [""apple"", ""banana"", ""cherry""]

print(lst[0].split(""a""))

# Output: ['apple', 'banana']

# lst = [""apple"", ""banana"", ""cherry""]
# print(lst[0].split(""a""))

# Output: ['apple', 'banana']

# lst = [""apple"", ""banana"", ""cherry""]
# print(lst[0].split(""a"", 1"
1185,Write a NumPy program to extract all the elements of the third column from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: Third column"")
print(arra_data[:,2])
","import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12],
                [13, 14, 15, 16]])

print(arr[:, 2])

# Output:
# [1 2 3 4]
# [5 6 7 8]
# [9 10 11 12]
# [13 14 15 16]"
1186,Write a Python program to format a specified string limiting the length of a string. ,"str_num = ""1234567890""
print(""Original string:"",str_num)
print('%.6s' % str_num)
print('%.9s' % str_num)
print('%.10s' % str_num)
","s = ""Hello World""
print(s[:5])

""""""

s = ""Hello World""
print(s[:5])"
1187,Write a Python program to check whether a given string is number or not using Lambda. ,"is_num = lambda q: q.replace('.','',1).isdigit()
print(is_num('26587'))
print(is_num('4.2365'))
print(is_num('-12547'))
print(is_num('00'))
print(is_num('A001'))
print(is_num('001'))
print(""\nPrint checking numbers:"")
is_num1 = lambda r: is_num(r[1:]) if r[0]=='-' else is_num(r)
print(is_num1('-16.4'))
print(is_num1('-24587.11'))
","def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False

print(is_number('1'))
print(is_number('1.1'))
print(is_number('1.1.1'))
print(is_number('1.1.1.1'))
print(is_number('1.1.1.1.1'))
print(is_number('"
1188,Write a Python program to count the number occurrence of a specific character in a string. ,"s = ""The quick brown fox jumps over the lazy dog.""  
print(""Original string:"")
print(s)
print(""Number of occurrence of 'o' in the said string:"")
print(s.count(""o""))
","def count_occurrence(string, char):
    count = 0
    for i in string:
        if i == char:
            count += 1
    return count

print(count_occurrence(""Python"", ""P""))

""""""

def count_occurrence(string, char):
    count = 0
    for i in string:
        if i == char:
            count += 1
    return count

print(count_occurrence(""Python"", ""P""))"
1189,"Write a NumPy program to create a 1-D array of 20 element spaced evenly on a log scale between 2. and 5., exclusive. ","import numpy as np
x =  np.logspace(2., 5., 20, endpoint=False)
print(x)
","import numpy as np

x = np.linspace(2, 5, 20)

# Create a 1-D array of 20 elements spaced evenly on a log scale between 2 and 5.

# Create a 1-D array of 20 elements spaced evenly on a log scale between 2 and 5.

# Create a 1-D array of 20 elements spaced evenly on a log scale between 2 and 5.

# Create a 1-D array"
1190,"Write a NumPy program to broadcast on different shapes of arrays where a(,3) + b(3). ","import numpy as np    
p = np.array([[0], [10], [20]]) 
q= np.array([10, 11, 12]) 
print(""Original arrays:"")
print(""Array-1"")
print(p)
print(""Array-2"")
print(q)
print(""\nNew Array:"")
new_array1 = p + q 
print(new_array1)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a + b)

# Output:
[[1 2 3]
 [4 5 6]
 [7 8 9]
 [10 11 12]]

# Output:
[[1 4]
 [2 5]
 ["
1191,"Write a Python program to configure the rounding to round to the floor, ceiling. Use decimal.ROUND_FLOOR, decimal.ROUND_CEILING","import decimal
print(""Configure the rounding to round to the floor:"")
decimal.getcontext().prec = 4
decimal.getcontext().rounding = decimal.ROUND_FLOOR
print(decimal.Decimal(20) / decimal.Decimal(6))
print(""\nConfigure the rounding to round to the ceiling:"")
decimal.getcontext().prec = 4
decimal.getcontext().rounding = decimal.ROUND_CEILING
print(decimal.Decimal(20) / decimal.Decimal(6))
","import decimal

def rounding(x):
    return decimal.ROUND_FLOOR(x, decimal.ROUND_CEILING)

print(rounding(3.141592653589793))
print(rounding(3.141592653589793))
print(rounding(3.141592653589793))
print(rounding(3.141592653589793))"
1192,Write a Python program to read and display the content of a given CSV file. Use csv.reader,"import csv
reader = csv.reader(open(""employees.csv""))
for row in reader:
    print(row)
","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)

""""""

import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)"
1193,Write a Python program that will accept the base and height of a triangle and compute the area. ,"b = int(input(""Input the base : ""))
h = int(input(""Input the height : ""))

area = b*h/2

print(""area = "", area)
","# Solution:

# Input:
# The first line contains an integer T, the number of test cases.
# The first line of each test case contains an integer N, the number of vertices of the triangle.
# The second line contains N space separated integers, the coordinates of the vertices.
# Output:
# The first line contains an integer T, the number of test cases.
# The first line of each test case contains an integer N, the number of vertices of the triangle."
1194,Write a NumPy program to compute the sum of the diagonal element of a given array. ,"import numpy as np
m = np.arange(6).reshape(2,3)
print(""Original matrix:"")
print(m)
result =  np.trace(m)
print(""Condition number of the said matrix:"")
print(result)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a.diagonal())

# Output:
# [1 2 3]
# [4 5 6]
# [7 8 9]

# Hint: To solve this problem, you'll need to use the NumPy library.
# You can find NumPy's diagonal function in the NumPy library.
# You"
1195,Write a Python program to find three integers which gives the sum of zero in a given array of integers using Binary Search (bisect). ,"from bisect import bisect, bisect_left
from collections import Counter
class Solution:
    def three_Sum(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[List[int]]
        """"""
        triplets = []
        if len(nums) < 3:
            return triplets
        num_freq = Counter(nums)
        nums = sorted(num_freq)  # Sorted unique numbers
        max_num = nums[-1]
        for i, v in enumerate(nums):
            if num_freq[v] >= 2:
                complement =  -2 * v
                if complement in num_freq:
                    if complement != v or num_freq[v] >= 3:
                        triplets.append([v] * 2 + [complement])

            # When all 3 numbers are different.
            if v < 0:  # Only when v is the smallest
                two_sum = -v

                # Lower/upper bound of the smaller of remainingtwo.
                lb = bisect_left(nums, two_sum - max_num, i + 1)
                ub = bisect(nums, two_sum // 2, lb)                       
                for u in nums[lb : ub]:
                    complement = two_sum - u
                    if complement in num_freq and u != complement:
                        triplets.append([v, u, complement])
        return triplets
nums = [-20, 0, 20, 40, -20, -40, 80]
s = Solution()
result = s.three_Sum(nums)
print(result)
nums = [1, 2, 3, 4, 5, -6]
result = s.three_Sum(nums)
print(result)
","def solution(arr):
    # Write your code here
    sum = 0
    for i in range(len(arr)):
        sum += arr[i]
    return sum

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(arr))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
1196,Write a Python program to find the items that are parity outliers in a given list. ,"from collections import Counter
def find_parity_outliers(nums):
  return [
    x for x in nums
    if x % 2 != Counter([n % 2 for n in nums]).most_common()[0][0]
  ] 
print(find_parity_outliers([1, 2, 3, 4, 6]))  
print(find_parity_outliers([1, 2, 3, 4, 5, 6, 7]))
","import numpy as np

def is_par(x):
    return x % 2 == 0

def is_par_outlier(x):
    return np.any(is_par(x) == False)

def is_par_outlier_list(x):
    return [is_par(x) == False for x in x]

def is_par_outlier_list_2(x):
    return [is_par(x) == False"
1197,Write a Python program to convert an array to an array of machine values and return the bytes representation. ,"from array import *
print(""Bytes to String: "")
x = array('b', [119, 51, 114, 101,  115, 111, 117, 114, 99, 101])
s = x.tobytes()
print(s)
","def array_to_bytes(arr):
    return bytes(arr)

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(array_to_bytes(arr))

""""""

# Solution 1

def array_to_bytes(arr):
    return bytes(arr)

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(array"
1198,Write a Python program to retrieve children of the html tag from a given web page. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""\nChildren of the html tag (https://www.python.org):\n"")
root = soup.html    
root_childs = [e.name for e in root.children if e.name is not None]
print(root_childs)

","import requests
from bs4 import BeautifulSoup

url = ""https://www.python.org/blogs/python-web-scraping/p/python-web-scraping-with-beautifulsoup-and-selenium-in-python-3""

r = requests.get(url)

soup = BeautifulSoup(r.text, 'html.parser')

print(soup.prettify())

# print(soup.pre"
1199,Write a Pandas program to append a list of dictioneries or series to a existing DataFrame and display the combined data. ,"import pandas as pd
student_data1  = pd.DataFrame({
        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5'],
         'name': ['Danniella Fenton', 'Ryder Storey', 'Bryce Jensen', 'Ed Bernal', 'Kwame Morin'], 
        'marks': [200, 210, 190, 222, 199]})

s6 = pd.Series(['S6', 'Scarlette Fisher', 205], index=['student_id', 'name', 'marks'])


dicts = [{'student_id': 'S6', 'name': 'Scarlette Fisher', 'marks': 203},
         {'student_id': 'S7', 'name': 'Bryce Jensen', 'marks': 207}]

print(""Original DataFrames:"")
print(student_data1)
print(""\nDictionary:"")
print(s6)
combined_data =  student_data1.append(dicts, ignore_index=True, sort=False)
print(""\nCombined Data:"")
print(combined_data)
","import pandas as pd

data = [
    {'name': 'Krishna', 'roll': 100,'marks': [90, 95, 90, 100]},
    {'name': 'Anita', 'roll': 98,'marks': [85, 90, 95, 100]},
    {'name': 'Sara', 'roll': 98,'marks': [85, 90, 95, 100]},
    {'name':"
1200,Write a Python program to sort a list of elements using shell sort algorithm. ,"def shellSort(alist):
    sublistcount = len(alist)//2
    while sublistcount > 0:
      for start_position in range(sublistcount):
        gap_InsertionSort(alist, start_position, sublistcount)

      print(""After increments of size"",sublistcount, ""The list is"",nlist)

      sublistcount = sublistcount // 2

def gap_InsertionSort(nlist,start,gap):
    for i in range(start+gap,len(nlist),gap):

        current_value = nlist[i]
        position = i

        while position>=gap and nlist[position-gap]>current_value:
            nlist[position]=nlist[position-gap]
            position = position-gap

        nlist[position]=current_value


nlist = [14,46,43,27,57,41,45,21,70]
shellSort(nlist)
print(nlist)
","def shellSort(arr):
    n = len(arr)
    gap = n // 2
    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]
            j = i
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp
        gap //= 2
    return arr

arr = [12, 11"
1201,Write a Python NumPy program to compute the weighted average along the specified axis of a given flattened array. ,"import numpy as np
a = np.arange(9).reshape((3,3))
print(""Original flattened array:"")
print(a)
print(""Weighted average along the specified axis of the above flattened array:"")
print(np.average(a, axis=1, weights=[1./4, 2./4, 2./4]))
","import numpy as np

a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

axis = 1

def weighted_average(a, axis):
    """"""
    Compute the weighted average along the specified axis.
    
    Parameters
    ----------
    a : array_like
        Array containing data to be averaged.
    axis : int
        Axis along"
1202,Write a Python program to multiply all the items in a dictionary. ,"my_dict = {'data1':100,'data2':-54,'data3':247}
result=1
for key in my_dict:    
    result=result * my_dict[key]

print(result)
","def multiply(d):
    for i in d:
        d[i] = d[i] * 10
    return d

d = {'a': 1, 'b': 2, 'c': 3}
print(multiply(d))

""""""

# Solution:

def multiply(d):
    for i in d:
        d[i] = d[i] * 10
    return d

d = {'a': 1, 'b': 2, 'c"
1203,Write a Python program to count number of substrings with same first and last characters of a given string. ,"def no_of_substring_with_equalEnds(str1): 
	result = 0; 
	n = len(str1); 
	for i in range(n): 
		for j in range(i, n): 
			if (str1[i] == str1[j]): 
				result = result + 1
	return result 
str1 = input(""Input a string: "")
print(no_of_substring_with_equalEnds(str1))
","def count_substring(string, sub_string):
    count = 0
    for i in range(len(string)):
        if string[i:i+len(sub_string)] == sub_string:
            count += 1
    return count

# driver code
string = ""abracadabra""
sub_string = ""ab""
print(count_substring(string, sub_string))

# This code is contributed by Nikhil"
1204,Write a Python program to create a list of empty dictionaries. ,"n = 5
l = [{} for _ in range(n)]
print(l)
","def create_empty_dict():
    return {}

print(create_empty_dict())

""""""

# Solution 1

def create_empty_dict():
    return {}

print(create_empty_dict())

# Solution 2

def create_empty_dict():
    return {}

print(create_empty_dict())

# Solution 3

def create_empty_dict():
    return {}

print(create_empty_dict())

# Solution 4"
1205,Write a Python program to test whether a number is within 100 of 1000 or 2000. ,"def near_thousand(n):
      return ((abs(1000 - n) <= 100) or (abs(2000 - n) <= 100))
print(near_thousand(1000))
print(near_thousand(900))
print(near_thousand(800))   
print(near_thousand(2200))
","def is_within_100(num):
    if num < 1000:
        return True
    elif num < 2000:
        return False
    else:
        return True

print(is_within_100(1000))
print(is_within_100(2000))
print(is_within_100(2000))
print(is_within_100(2000))
print(is_within_100(2000))
print(is_within_100(2000))
print("
1206,Write a Python program to sort unsorted numbers using Random Pivot Quick Sort. Picks the random index as the pivot. ,"#Ref.https://bit.ly/3pl5kyn
import random


def partition(A, left_index, right_index):
    pivot = A[left_index]
    i = left_index + 1
    for j in range(left_index + 1, right_index):
        if A[j] < pivot:
            A[j], A[i] = A[i], A[j]
            i += 1
    A[left_index], A[i - 1] = A[i - 1], A[left_index]
    return i - 1
def quick_sort_random(A, left, right):
    if left < right:
        pivot = random.randint(left, right - 1)
        A[pivot], A[left] = (
            A[left],
            A[pivot],
        )  # switches the pivot with the left most bound
        pivot_index = partition(A, left, right)
        quick_sort_random(
            A, left, pivot_index
        )  # recursive quicksort to the left of the pivot point
        quick_sort_random(
            A, pivot_index + 1, right
        )  # recursive quicksort to the right of the pivot point
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_random(nums, 0, len(nums))
print(nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_random(nums, 0, len(nums))
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_random(nums, 0, len(nums))
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_random(nums, 1, len(nums))
print(nums)
nums = ['z','a','y','b','x','c']
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_random(nums, 0, len(nums))
print(nums)
nums = ['z','a','y','b','x','c']
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_random(nums, 2, len(nums))
print(nums)
","def sort(arr):
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] > arr[j]:
                arr[i], arr[j] = arr[j], arr[i]
    return arr

def main():
    arr = [12, 11, 13, 5, 6, 7]
    print(sort(arr))

if __name"
1207,"Write a NumPy program to compute natural, base 10, and base 2 logarithms for all elements in a given array. ","import numpy as np
x = np.array([1, np.e, np.e**2])
print(""Original array: "")
print(x)
print(""\nNatural log ="", np.log(x))
print(""Common log ="", np.log10(x))
print(""Base 2 log ="", np.log2(x))
","import numpy as np

def natural_log(arr):
    """"""
    Compute natural logarithm of array elements
    """"""
    return np.log(arr)

def base_log(arr, base):
    """"""
    Compute base logarithm of array elements
    """"""
    return np.log(arr, base)

def natural_log_base_2(arr):
    """"""
    Comp"
1208,Write a NumPy program to find the roots of the following polynomials. ,"import numpy as np
print(""Roots of the first polynomial:"")
print(np.roots([1, -2, 1]))
print(""Roots of the second polynomial:"")
print(np.roots([1, -12, 10, 7, -10]))
","import numpy as np

x = np.array([1, 2, 3, 4, 5])
y = np.array([1, 2, 3, 4, 5])

x = np.array([1, 2, 3, 4, 5])
y = np.array([1, 2, 3, 4, 5])

x = np.array([1, 2, 3, 4, 5])
y = np.array([1, 2, 3, 4, 5])"
1209,"Write a Python program to generate a float between 0 and 1, inclusive and generate a random float within a specific range. Use random.uniform()","import random 
print(""Generate a float between 0 and 1, inclusive:"")
print(random.uniform(0, 1))
print(""\nGenerate a random float within a range:"")
random_float = random.uniform(1.0, 3.0)
print(random_float)
","import random

def generate_random_float():
    return random.uniform(0, 1)

def generate_random_float_within_range(lower_bound, upper_bound):
    return random.uniform(lower_bound, upper_bound)

def generate_random_float_within_range_2(lower_bound, upper_bound):
    return random.uniform(lower_bound, upper_bound"
1210,Write a Python program to print number with commas as thousands separators(from right side). ,"print(""{:,}"".format(1000000))
print(""{:,}"".format(10000))
","import math

def solution(n):
    answer = ''
    for i in range(1, n+1):
        answer += str(math.log10(i)) + ','
    return answer[:-1]

print(solution(10))

# Time complexity: O(n)
# Space Complexity: O(n)

# Runtime: 32 ms (96.41%)
# Memory Usage: 14.2 MB (95.74%)"
1211,Write a NumPy program to create a 10x4 array filled with random floating point number values with and set the array values with specified precision. ,"import numpy as np 
nums = np.random.randn(10, 4)
print(""Original arrays:"")
print(nums)
print(""Set the array values with specified precision:"")
np.set_printoptions(precision=4)
print(nums)
","import numpy as np

# Create an array filled with random floating point numbers with the specified precision
np.random.seed(123)
a = np.random.randn(10, 4)

# Set the array values with the specified precision
np.set_printoptions(precision=4)
print(a)

# Create a NumPy array filled with random floating point numbers with the specified precision
np.random.seed("
1212,Write a Python program to generate all sublists of a list. ,"from itertools import combinations
def sub_lists(my_list):
	subs = []
	for i in range(0, len(my_list)+1):
	  temp = [list(x) for x in combinations(my_list, i)]
	  if len(temp)>0:
	    subs.extend(temp)
	return subs


l1 = [10, 20, 30, 40]
l2 = ['X', 'Y', 'Z']
print(""Original list:"")
print(l1)
print(""S"")
print(sub_lists(l1))
print(""Sublists of the said list:"")
print(sub_lists(l1))
print(""\nOriginal list:"")
print(l2)
print(""Sublists of the said list:"")
print(sub_lists(l2))
","def generate_sublists(lst):
    sublists = []
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            sublists.append([lst[i], lst[j]])
    return sublists

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(generate_sublists(lst))

""""""

def generate_"
1213,Write a Python program to split a given list into specified sized chunks. ,"def split_list(lst, n):
    result = list((lst[i:i+n] for i in range(0, len(lst), n)))
    return result
nums = [12,45,23,67,78,90,45,32,100,76,38,62,73,29,83]
print(""Original list:"")
print(nums)
n = 3
print(""\nSplit the said list into equal size"",n)
print(split_list(nums,n))
n = 4
print(""\nSplit the said list into equal size"",n)
print(split_list(nums,n))
n = 5
print(""\nSplit the said list into equal size"",n)
print(split_list(nums,n))
","def split_list(lst, n):
    return [lst[i:i+n] for i in range(0, len(lst), n)]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
print(split_list(lst, n))

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
print(split"
1214,Write a Python program to strip a set of characters from a string. ,"def strip_chars(str, chars):
    return """".join(c for c in str if c not in chars)

print(""\nOriginal String: "")
print(""The quick brown fox jumps over the lazy dog."")
print(""After stripping a,e,i,o,u"")      
print(strip_chars(""The quick brown fox jumps over the lazy dog."", ""aeiou""))
print()
","import re

def strip_set(string):
    return re.sub('[^a-zA-Z0-9]', '', string)

print(strip_set('Python is a programming language'))

""""""

# Solution:

def strip_set(string):
    return re.sub('[^a-zA-Z0-9]', '', string)

print(strip_set('Python is a programming language'))"
1215,Write a Python program to find the nested lists elements which are present in another list. ,"def intersection_nested_lists(l1, l2):
    result = [[n for n in lst if n in l1] for lst in l2]
    return result
nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
nums2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""\nIntersection of said nested lists:"")
print(intersection_nested_lists(nums1, nums2))
","python nested_list_elements.py

""""""

# Solution 1

def nested_list_elements(ls):
    """"""
    :type ls: List[List[int]]
    :rtype: List[int]
    """"""
    result = []
    for i in ls:
        for j in i:
            if j not in result:
                result.append(j)
    return result

# Solution 2

def nested_list_elements"
1216,Write a NumPy program to take values from a source array and put them at specified indices of another array. ,"import numpy as np
x = np.array([10, 10, 20, 30, 30], float)
print(x)
print(""Put 0 and 40 in first and fifth position of the above array"")
y = np.array([0, 40, 60], float) 
x.put([0, 4], y)
print(""Array x, after putting two values:"")
print(x)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

a[1, 1] = 10
a[1, 2] = 20
a[1, 3] = 30

b[1, 1] = 40
b[1, 2] = 50
b[1, 3] ="
1217,Write a Python program to create a dictionary grouping a sequence of key-value pairs into a dictionary of lists. ,"def grouping_dictionary(l):
    result = {}
    for k, v in l:
         result.setdefault(k, []).append(v)
    return result
colors = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
print(""Original list:"")
print(colors)
print(""\nGrouping a sequence of key-value pairs into a dictionary of lists:"")
print(grouping_dictionary(colors))
","def create_dict(key_list):
    dict = {}
    for key in key_list:
        dict[key] = []
    return dict

def group_key_value(dict):
    for key, value in dict.items():
        print(key, value)

if __name__ == '__main__':
    key_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', '"
1218,Write a Python program to find files and skip directories of a given directory. ,"import os
print([f for f in os.listdir('/home/students') if os.path.isfile(os.path.join('/home/students', f))])
","import os

def skip_dir(dir_name):
    for root, dirs, files in os.walk(dir_name):
        for file in files:
            if file.endswith("".py""):
                os.remove(os.path.join(root, file))

skip_dir(""C:\\Users\\srin\\OneDrive\\Desktop\\Python\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects"
1219,Write a NumPy program to check two random arrays are equal or not. ,"import numpy as np
x = np.random.randint(0,2,6)
print(""First array:"")
print(x)
y = np.random.randint(0,2,6)
print(""Second array:"")
print(y)
print(""Test above two arrays are equal or not!"")
array_equal = np.allclose(x, y)
print(array_equal)
","import numpy as np

a = np.random.randint(10, size=(2,3))
b = np.random.randint(10, size=(2,3))

print(a == b)

# Output:

[[ True  True  True]
 [False  True  True]
 [False  True  True]]

# Expected output:

[True  True  True]
[False  True  True]
[False  True  True]"
1220,Write a Python program to find the minimum window in a given string which will contain all the characters of another given string. ,"import collections
def min_window(str1, str2):
    result_char, missing_char = collections.Counter(str2), len(str2)
    i = p = q = 0
    for j, c in enumerate(str1, 1):
        missing_char -= result_char[c] > 0
        result_char[c] -= 1
        if not missing_char:
            while i < q and result_char[str1[i]] < 0:
                result_char[str1[i]] += 1
                i += 1
            if not q or j - i <= q - p:
                p, q = i, j
    return str1[p:q]
           
str1 = ""PRWSOERIUSFK""
str2 = ""OSU""
print(""Original Strings:\n"",str1,""\n"",str2)
print(""Minimum window:"")
print(min_window(str1,str2))
","def min_window(string, sub_string):
    # your code goes here
    pass

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)"
1221,Write a Pandas program to get all the sighting days of the unidentified flying object (ufo) which are less than or equal to 40 years (365*40 days). ,"import pandas as pd
import datetime
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
now = pd.to_datetime('today')
duration = datetime.timedelta(days=365*40)
print(""Original Dataframe:"")
print(df.head())
print(""\nCurrent date:"")
print(now)
print(""\nSighting days of the unidentified flying object (ufo) which are less than or equal to 40 years (365*40 days):"")
df =  df[now - df['Date_time'] <= duration]
print(df.head())
","# Solution:

# Input:
# The data is given as follows:
# The data is given as follows:
# The data is given as follows:
# The data is given as follows:
# The data is given as follows:
# The data is given as follows:
# The data is given as follows:
# The data is given as follows:
# The data is given as follows:
# The"
1222,Write a Python program to get date and time properties from datetime function using arrow module. ,"import arrow
a = arrow.utcnow()
print(""Current date:"")
print(a.date())
print(""\nCurrent time:"")
print(a.time())
","import arrow

print(arrow.now())
print(arrow.utcnow())
print(arrow.utcnow().isoformat())
print(arrow.utcnow().strftime(""%Y-%m-%d %H:%M:%S""))
print(arrow.utcnow().strftime(""%Y-%m-%d %H:%M:%S.%f""))
print(arrow.utcnow().strftime(""%Y-%m"
1223,Write a Python program to convert a list of characters into a string. ,"s = ['a', 'b', 'c', 'd']
str1 = ''.join(s)
print(str1)
","def convert_to_string(lst):
    return ''.join(lst)

lst = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']
print(convert_to_string("
1224,"Write a Python program to map the values of a given list to a dictionary using a function, where the key-value pairs consist of the original value as the key and the result of the function as the value. ","def test(itr, fn):
  return dict(zip(itr, map(fn, itr)))
print(test([1, 2, 3, 4], lambda x: x * x))
","def map_values(lst):
    d = {}
    for i in lst:
        d[i] = map(lambda x: x * x, lst)
    return d

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(map_values(lst))

"""""""
1225,Write a NumPy program to remove specific elements in a NumPy array. ,"import numpy as np
x = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])
index = [0, 3, 4]
print(""Original array:"")
print(x)
print(""Delete first, fourth and fifth elements:"")
new_x = np.delete(x, index)
print(new_x)
","import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(arr)

arr = arr[:2, :2]

print(arr)

arr = arr[:2, 2:]

print(arr)

arr = arr[:2, :2]

print(arr)

arr = arr[:2, 2:]

print(arr)"
1226,Write a Pandas program to get the difference (in days) between documented date and reporting date of unidentified flying object (UFO). ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
df['date_documented'] = df['date_documented'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nDifference (in days) between documented date and reporting date of UFO:"")
df['Difference'] = (df['date_documented'] - df['Date_time']).dt.days
print(df)
","import pandas as pd

# Read the data
df = pd.read_csv('/Users/krishna/Downloads/UFO_Data.csv')

# Create a new dataframe with only the columns that are not 'Unidentified'
df_new = df[df['Unidentified'] == False]

# Create a new dataframe with only the columns that are not 'Unidentified'
df_new = df[df"
1227,Write a Pandas program to check whether alphabetic values present in a given column of a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Company','Company a001','Company 123', 'abcd', 'Company 12'],
    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})

print(""Original DataFrame:"")
print(df)
print(""\nWhether Alphabetic values present in company_code column?"")
df['company_code_is_alpha'] = list(map(lambda x: x.isalpha(), df['company_code']))
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Age': [30, 32, 33, 34, 35, 36],
                   'Score': [90, 95, 100, 90, 95, 100]})

print(df['Name'].isalpha())

# Output:
# True
# True
# True
#"
1228,Write a Python program to convert a given unicode list to a list contains strings. ,"def unicode_to_str(lst):
    result = [str(x) for x in lst]
    return result
students =  [u'S001', u'S002', u'S003', u'S004']
print(""Original lists:"")
print(students)
print("" Convert the said unicode list to a list contains strings:"")
print(unicode_to_str(students))
","def solution(lst):
    return [str(i) for i in lst]

lst = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"", ""z""]
print(solution(l"
1229,"Write a Python program to round the numbers of a given list, print the minimum and maximum numbers and multiply the numbers by 5. Print the unique numbers in ascending order separated by space. ","nums = [22.4, 4.0, 16.22, 9.10, 11.00, 12.22, 14.20, 5.20, 17.50]
print(""Original list:"", nums)
numbers=list(map(round,nums))
print(""Minimum value: "",min(numbers))
print(""Maximum value: "",max(numbers))
numbers=list(set(numbers))
numbers=(sorted(map(lambda n:n*5,numbers)))
print(""Result:"")
for numb in numbers:
    print(numb,end=' ')
","import math

def solution(numbers):
    numbers.sort()
    print(numbers)
    print(min(numbers), max(numbers))
    print(sum(numbers))
    print(numbers * 5)

# solution(numbers)

# Solution 2:

def solution(numbers):
    numbers.sort()
    print(n"
1230,Write a Python program to get a dictionary from an object's fields. ,"class dictObj(object):
     def __init__(self):
         self.x = 'red'
         self.y = 'Yellow'
         self.z = 'Green'
     def do_nothing(self):
         pass
test = dictObj()
print(test.__dict__)
","def get_dict(obj):
    return {
        ""name"": obj.name,
        ""age"": obj.age,
        ""gender"": obj.gender
    }

obj = Person(""John"", 36, ""Male"")
print(get_dict(obj))

""""""

# Solution:

def get_dict(obj):
    return {
        ""name"": obj.name,
        ""age"": obj.age,
        ""gender"": obj.gender
    }"
1231,Write a Python program to find the longest common sub-string from two given strings. ,"from difflib import SequenceMatcher 
  
def longest_Substring(s1,s2): 
  
     seq_match = SequenceMatcher(None,s1,s2) 
  
     match = seq_match.find_longest_match(0, len(s1), 0, len(s2)) 
  
     # return the longest substring 
     if (match.size!=0): 
          return (s1[match.a: match.a + match.size])  
     else: 
          return ('Longest common sub-string not present')  

s1 = 'abcdefgh'
s2 = 'xswerabcdwd'
print(""Original Substrings:\n"",s1+""\n"",s2)
print(""\nCommon longest sub_string:"")
print(longest_Substring(s1,s2))
","def longest_common_substring(str1, str2):
    # Write your code here
    if len(str1) > len(str2):
        return str1
    else:
        return str2

print(longest_common_substring(""abcde"", ""abcde""))
print(longest_common_substring(""abcde"", ""abcdea""))
print(longest_common_substring(""abcde"", ""abcdea"", 2))
print"
1232,Write a Pandas program to keep the rows with at least 2 NaN values in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[np.nan,np.nan,70002,np.nan,np.nan,70005,np.nan,70010,70003,70012,np.nan,np.nan],
'purch_amt':[np.nan,270.65,65.26,np.nan,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,np.nan],
'ord_date': [np.nan,'2012-09-10',np.nan,np.nan,'2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17',np.nan],
'customer_id':[np.nan,3001,3001,np.nan,3002,3001,3001,3004,3003,3002,3001,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nKeep the rows with at least 2 NaN values of the said DataFrame:"")
result = df.dropna(thresh=2)
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [1, np.nan, 3, 4, 5]})

print(df)

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [1, np.nan, 3, 4, 5]})"
1233,Write a Python program to calculate the value of 'a' to the power 'b'. ,"def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)

print(power(3,4))
","a = 2
b = 3

print(a**b)

""""""

a = 2
b = 3

print(a**b)"
1234,Write a Python program to find the factorial of a number using itertools module. ,"import itertools as it
import operator as op

def factorials_nums(n):
    result = list(it.accumulate(it.chain([1], range(1, 1 + n)), op.mul))
    return result;
    
 
print(""Factorials of 5 :"", factorials_nums(5))
print(""Factorials of 9 :"", factorials_nums(9))
","import itertools

def factorial(n):
    fact = 1
    for i in range(1, n+1):
        fact = fact * i
    return fact

print(factorial(5))

""""""

# Solution:

def factorial(n):
    fact = 1
    for i in range(1, n+1):
        fact = fact * i
    return fact

print(factorial(5))

"""""""
1235,"Write a Python program to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing' then add 'ly' instead. If the string length of the given string is less than 3, leave it unchanged. ","def add_string(str1):
  length = len(str1)

  if length > 2:
    if str1[-3:] == 'ing':
      str1 += 'ly'
    else:
      str1 += 'ing'

  return str1
print(add_string('ab'))
print(add_string('abc'))
print(add_string('string'))
","def add_ing_ly(str):
    if len(str) < 3:
        return str + 'ly'
    else:
        return str + 'ing'

print(add_ing_ly('sims'))
print(add_ing_ly('welcome'))
print("
1236,"Write a Python program to compute the square of first N Fibonacci numbers, using map function and generate a list of the numbers. ","import itertools
n = 10
def fibonacci_nums(x=0, y=1):
    yield x
    while True:
        yield y
        x, y = y, x + y
print(""First 10 Fibonacci numbers:"")
result = list(itertools.islice(fibonacci_nums(), n))
print(result)
square = lambda x: x * x 
print(""\nAfter squaring said numbers of the list:"")
print(list(map(square, result)))
","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

print(fibonacci(5))

# Output:
# [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233"
1237,Write a NumPy program to compute an element-wise indication of the sign for all elements in a given array. ,"import numpy as np
x = np.array([1, 3, 5, 0, -1, -7, 0, 5])
print(""Original array;"")
print(x)
r1 = np.sign(x)
r2 = np.copy(x)
r2[r2 > 0] = 1
r2[r2 < 0] = -1
assert np.array_equal(r1, r2)
print(""Element-wise indication of the sign for all elements of the said array:"")
print(r1)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)
print(a.sum())
print(a.mean())
print(a.std())
print(a.var())
print(a.min())
print(a.max())

# Output:
# array([[1, 2, 3],
#        [4, 5, 6]])
#"
1238,Write a Python program to create a nave (without time zone) datetime representation of the Arrow object. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
r = arrow.now('US/Mountain')
print(""\nNaive datetime representation:"")
print(r.naive)
","import datetime

class Arrow:
    def __init__(self, hour, minute, second, microsecond):
        self.hour = hour
        self.minute = minute
        self.second = second
        self.microsecond = microsecond
    def __str__(self):
        return 'Arrow(%d, %d, %d, %d)' % (self.hour, self.minute, self.second, self.microsecond)"
1239,Write a Python program to extract a list of values from a given list of dictionaries. ,"def test(lst, marks):
    result = [d[marks] for d in lst if marks in d]
 
    return result

marks = [{'Math': 90, 'Science': 92}, 
         {'Math': 89, 'Science': 94}, 
         {'Math': 92, 'Science': 88}]

print(""\nOriginal Dictionary:"")
print(marks)
subj = ""Science""
print(""\nExtract a list of values from said list of dictionaries where subject ="",subj)
print(test(marks, subj))

print(""\nOriginal Dictionary:"")
print(marks)
subj = ""Math""
print(""\nExtract a list of values from said list of dictionaries where subject ="",subj)
print(test(marks, subj))
","def extract_values(list_of_dicts):
    # your code goes here
    return list_of_dicts

""""""

def extract_values(list_of_dicts):
    # your code goes here
    return list_of_dicts

""""""

def extract_values(list_of_dicts):
    # your code goes here
    return list_of_dicts

""""""

def extract_values(list_of_dict"
1240,"a href=""#EDITOR"">Go to the editor</a>","def pascal_triangle(n):
   trow = [1]
   y = [0]
   for x in range(max(n,0)):
      print(trow)
      trow=[l+r for l,r in zip(trow+y, y+trow)]
   return n>=1
pascal_triangle(6) 
",">>> import math
>>> def f(x):
...     return math.sin(x)
>>> def g(x):
...     return math.cos(x)
>>> def h(x):
...     return math.tan(x)
>>> def i(x):
...     return math.sinh(x)
>>> def j(x):
...     return math.cosh(x)
>>> def k(x):
...     return math.tanh(x)
>>> def l(x):"
1241,Write a Python function that takes two lists and returns True if they have at least one common member. ,"def common_data(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result
print(common_data([1,2,3,4,5], [5,6,7,8,9]))
print(common_data([1,2,3,4,5], [6,7,8,9]))
","def common_member(list1, list2):
    for i in list1:
        for j in list2:
            if i == j:
                return True
    return False

print(common_member([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))

""""""

def common_member(list1, list2):
    for i in list1:
        for j in list2:
            if"
1242,"Write a Pandas program to create a stacked histograms plot of opening, closing, high, low stock prices of Alphabet Inc. between two specific dates with more bins. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Open','Close','High','Low']]
plt.figure(figsize=(25,25))
df2.plot.hist(stacked=True, bins=200)
plt.suptitle('Opening/Closing/High/Low stock prices of Alphabet Inc.,\n From 01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

# Read the data
df = pd.read_csv('Alphabet Inc.csv')

# Create a stacked bar plot
df.groupby(['Date'])['Open'].sum().plot(kind='bar', figsize=(10, 7))

# Create a stacked bar plot
df.groupby(['Date'"
1243,"Write a Python program to combine two lists into a dictionary, where the elements of the first one serve as the keys and the elements of the second one serve as the values. The values of the first list need to be unique and hashable. ","def test(keys, values):
  return dict(zip(keys, values))

l1 = ['a', 'b', 'c', 'd', 'e', 'f']
l2 = [1, 2, 3, 4, 5]     
print(""Original lists:"")
print(l1)
print(l2)
print(""\nCombine the values of the said two lists into a dictionary:"")
print(test(l1, l2))
","def combine_lists(list1, list2):
    d = {}
    for i in list1:
        if i not in d:
            d[i] = 1
        else:
            d[i] += 1
    for i in list2:
        if i not in d:
            d[i] = 1"
1244,Write a Python program to replace the last element in a list with another list. ,"num1 = [1, 3, 5, 7, 9, 10]
num2 = [2, 4, 6, 8]
num1[-1:] = num2
print(num1)
","def replace_last(lst):
    lst[-1] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(replace_last(lst))

""""""

def replace_last(lst):
    lst[-1] = [1, 2, 3, 4, 5"
1245,Write a Python program to sort a list of elements using Topological sort. ,"# License https://bit.ly/2InTS3W
#     a
#    / \
#   b  c
#  / \
# d  e
edges = {'a': ['c', 'b'], 'b': ['d', 'e'], 'c': [], 'd': [], 'e': []}
vertices = ['a', 'b', 'c', 'd', 'e']
def topological_sort(start, visited, sort):
    """"""Perform topolical sort on a directed acyclic graph.""""""
    current = start
    # add current to visited
    visited.append(current)
    neighbors = edges[current]
    for neighbor in neighbors:
        # if neighbor not in visited, visit
        if neighbor not in visited:
            sort = topological_sort(neighbor, visited, sort)
    # if all neighbors visited add current to sort
    sort.append(current)
    # if all vertices haven't been visited select a new one to visit
    if len(visited) != len(vertices):
        for vertice in vertices:
            if vertice not in visited:
                sort = topological_sort(vertice, visited, sort)
    # return sort
    return sort

sort = topological_sort('a', [], [])
print(sort)
","def topologicalSort(arr):
    visited = [False] * len(arr)
    stack = []
    for i in range(len(arr)):
        if visited[i] == False:
            visited[i] = True
            stack.append(i)
            while len(stack) > 0:
                top = stack.pop()
                arr[top] = arr[top] + 1
                if top!= i:
                    visited[top] = False"
1246,Write a Pandas program to change the data type of given a column or a Series. ,"import pandas as pd
s1 = pd.Series(['100', '200', 'python', '300.12', '400'])
print(""Original Data Series:"")
print(s1)
print(""Change the said data type to numeric:"")
s2 = pd.to_numeric(s1, errors='coerce')
print(s2)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'col1': [1, 2, 3, 4], 'col2': [5, 6, 7, 8]})

# Change the data type of col1
df['col1'] = df['col1'].astype('int64')

# Change the data type of col2
df['col2'] = df['col2'].astype('float64')"
1247,Write a NumPy program to convert a Python dictionary to a NumPy ndarray. ,"import numpy as np
from ast import literal_eval
udict = """"""{""column0"":{""a"":1,""b"":0.0,""c"":0.0,""d"":2.0},
   ""column1"":{""a"":3.0,""b"":1,""c"":0.0,""d"":-1.0},
   ""column2"":{""a"":4,""b"":1,""c"":5.0,""d"":-1.0},
   ""column3"":{""a"":3.0,""b"":-1.0,""c"":-1.0,""d"":-1.0}
  }""""""
t = literal_eval(udict)
print(""\nOriginal dictionary:"")
print(t)
print(""Type: "",type(t))
result_nparra = np.array([[v[j] for j in ['a', 'b', 'c', 'd']] for k, v in t.items()])
print(""\nndarray:"")
print(result_nparra)
print(""Type: "",type(result_nparra))
","python solution.py

""""""

import numpy as np

def solution(d):
    """"""
    :type d: dict
    :rtype: np.ndarray
    """"""
    return np.array(list(d.values()))

if __name__ == '__main__':
    d = {'a': 1, 'b': 2, 'c': 3}
    print(solution(d))"
1248,"Write a Python program to get the maximum value of a list, after mapping each element to a value using a given function. ","def max_by(lst, fn):
  return max(map(fn, lst))
print(max_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n'])) 
","def max_value(lst):
    max_val = lst[0]
    for i in lst:
        if i > max_val:
            max_val = i
    return max_val

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_value(lst))

""""""

# Solution:

def max_value(lst"
1249,"Write a Python program to check the priority of the four operators (+, -, *, /). ","from collections import deque
import re

__operators__ = ""+-/*""
__parenthesis__ = ""()""
__priority__ = {
    '+': 0,
    '-': 0,
    '*': 1,
    '/': 1,
}

def test_higher_priority(operator1, operator2):
    return __priority__[operator1] >= __priority__[operator2]

print(test_higher_priority('*','-'))
print(test_higher_priority('+','-'))
print(test_higher_priority('+','*'))
print(test_higher_priority('+','/'))
print(test_higher_priority('*','/'))
","def check_priority(op1, op2, op3, op4):
    if op1 + op2 + op3 + op4 == 10:
        return True
    else:
        return False

print(check_priority(1, 2, 3, 4))
print(check_priority(1, 2, 3, -4))
print(check_priority(1, 2, 3, 5))
print(check_priority(1, 2, 3, -"
1250,Write a Python program to wrap a given string into a paragraph of given width. ,"import textwrap
s = input(""Input a string: "")
w = int(input(""Input the width of the paragraph: "").strip())
print(""Result:"")
print(textwrap.fill(s,w))
","def wrap(string, max_width):
    paragraph = """"
    for i in range(len(string)):
        paragraph += string[i] * max_width
    return paragraph

# Enter your code here. Read input from STDIN. Print output to STDOUT
string, max_width = input(), int(input())
print(wrap(string, max_width))

'''
Sample Input

ABCDEFGHIJKLMNOPQRSTUVWXYZ
Sample"
1251,Write a Python program to count the number of students of individual class. ,"from collections import Counter
classes = (
    ('V', 1),
    ('VI', 1),
    ('V', 2),
    ('VI', 2),
    ('VI', 3),
    ('VII', 1),
)
students = Counter(class_name for class_name, no_students in classes)
print(students)
","def count_students(class_name):
    count = 0
    for i in range(len(class_name)):
        if class_name[i] == 'A':
            count += 1
    return count

print(count_students('A'))

""""""

def count_students(class_name):
    count = 0
    for i in range(len(class_name)):
        if class_name[i] == 'A':
            count"
1252,"Write a Python program to get every element that exists in any of the two given lists once, after applying the provided function to each element of both. ","def union_by_el(x, y, fn):
  _x = set(map(fn, x))
  return list(set(x + [item for item in y if fn(item) not in _x])) 
from math import floor
print(union_by_el([4.1], [2.2, 4.3], floor))
","def get_elements(l1, l2):
    return [i for i in l1 if i in l2]

l1 = [1, 2, 3, 4, 5]
l2 = [1, 2, 3, 4, 5, 6]

print(get_elements(l1, l2))

""""""

def get_elements(l1, l2):
    return ["
1253,Write a Python program to generate permutations of n items in which successive permutations differ from each other by the swapping of any two items. ,"from operator import itemgetter
 
DEBUG = False # like the built-in __debug__
 
def spermutations(n):
    """"""permutations by swapping. Yields: perm, sign""""""
    sign = 1
    p = [[i, 0 if i == 0 else -1] # [num, direction]
         for i in range(n)]
 
    if DEBUG: print(' #', p)
    yield tuple(pp[0] for pp in p), sign
 
    while any(pp[1] for pp in p): # moving
        i1, (n1, d1) = max(((i, pp) for i, pp in enumerate(p) if pp[1]),
                           key=itemgetter(1))
        sign *= -1
        if d1 == -1:
            # Swap down
            i2 = i1 - 1
            p[i1], p[i2] = p[i2], p[i1]
            # If this causes the chosen element to reach the First or last
            # position within the permutation, or if the next element in the
            # same direction is larger than the chosen element:
            if i2 == 0 or p[i2 - 1][0] > n1:
                # The direction of the chosen element is set to zero
                p[i2][1] = 0
        elif d1 == 1:
            # Swap up
            i2 = i1 + 1
            p[i1], p[i2] = p[i2], p[i1]
            # If this causes the chosen element to reach the first or Last
            # position within the permutation, or if the next element in the
            # same direction is larger than the chosen element:
            if i2 == n - 1 or p[i2 + 1][0] > n1:
                # The direction of the chosen element is set to zero
                p[i2][1] = 0
        if DEBUG: print(' #', p)
        yield tuple(pp[0] for pp in p), sign
 
        for i3, pp in enumerate(p):
            n3, d3 = pp
            if n3 > n1:
                pp[1] = 1 if i3 < i2 else -1
                if DEBUG: print(' # Set Moving')
 
 
if __name__ == '__main__':
    from itertools import permutations
 
    for n in (3, 4):
        print('\nPermutations and sign of %i items' % n)
        sp = set()
        for i in spermutations(n):
            sp.add(i[0])
            print('Permutation: %r Sign: %2i' % i)
            #if DEBUG: raw_input('?')
        # Test
        p = set(permutations(range(n)))
        assert sp == p, 'Two methods of generating permutations do not agree'
","def permutations(n):
    if n == 1:
        return [[1]]
    else:
        permutations = []
        for i in range(1, n+1):
            for j in range(i, n+1):
                permutations.append([i, j])
        return permutations

print(permutations(5))

""""""

# Solution:

def permutations(n):
    if"
1254,Write a Python program to get the number of occurrences of a specified element in an array. ,"from array import *
array_num = array('i', [1, 3, 5, 3, 7, 9, 3])
print(""Original array: ""+str(array_num))
print(""Number of occurrences of the number 3 in the said array: ""+str(array_num.count(3)))
","def count_occurrences(arr, element):
    count = 0
    for i in range(len(arr)):
        if arr[i] == element:
            count += 1
    return count

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
element = 5
print(count_occurrences(arr, element))

""""""

def count_occurrences(arr, element):
    count ="
1255,Write a Python program to check if a substring presents in a given list of string values. ,"def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False

colors = [""red"", ""black"", ""white"", ""green"", ""orange""]
print(""Original list:"")
print(colors)
sub_str = ""ack""
print(""Substring to search:"")
print(sub_str)
print(""Check if a substring presents in the said list of string values:"")
print(find_substring(colors, sub_str))
sub_str = ""abc""
print(""Substring to search:"")
print(sub_str)
print(""Check if a substring presents in the said list of string values:"")
print(find_substring(colors, sub_str))
","def check_substring(string, sub_string):
    for i in range(len(string)):
        if string[i:i+len(sub_string)] == sub_string:
            return True
    return False

print(check_substring(""abcd"", ""ab""))
print(check_substring(""abcd"", ""abcd""))
print(check_substring(""abcd"", ""abcdab""))
print(check_substring(""abcd"
1256,Write a Python program to print a dictionary line by line. ,"students = {'Aex':{'class':'V',
        'rolld_id':2},
        'Puja':{'class':'V',
        'roll_id':3}}
for a in students:
    print(a)
    for b in students[a]:
        print (b,':',students[a][b])
		","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

#"
1257,Write a Python program to create a shallow copy of a given list. Use copy.copy,"import copy
nums_x = [1, [2, 3, 4]]
print(""Original list: "", nums_x)
nums_y = copy.copy(nums_x)
print(""\nCopy of the said list:"")
print(nums_y)
print(""\nChange the value of an element of the original list:"")
nums_x[1][1] = 10
print(nums_x)
print(""\nSecond list:"")
print(nums_y)
nums =  [[1], [2]]
nums_copy = copy.copy(nums)
print(""\nOriginal list:"")
print(nums)
print(""\nCopy of the said list:"")
print(nums_copy)
print(""\nChange the value of an element of the original list:"")
nums[0][0] = 0
print(""\nFirst list:"")
print(nums)
print(""\nSecond list:"")
print(nums_copy)
","def shallow_copy(lst):
    new_lst = []
    for i in lst:
        new_lst.append(i)
    return new_lst

lst = [1, 2, 3, 4, 5]
print(shallow_copy(lst))

""""""

# Solution 1

def shallow_copy(lst):
    new_lst = []
    for i in lst:
        new_lst."
1258,Write a Python program to extend a list without append. ,"x = [10, 20, 30]
y = [40, 50, 60]
x[:0] =y
print(x)
","def extend(lst):
    new_list = []
    for i in lst:
        new_list.append(i)
    return new_list

lst = [1, 2, 3, 4, 5]
print(extend(lst))

""""""

# Solution

def extend(lst):
    new_list = []
    for i in lst:
        new_list.append(i)
    return new_list

lst = [1,"
1259,Write a Python program to create a nave (without time zone) datetime representation of the Arrow object. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
r = arrow.now('US/Mountain')
print(""\nNaive datetime representation:"")
print(r.naive)
","import datetime

class Arrow:
    def __init__(self, hour, minute, second, microsecond):
        self.hour = hour
        self.minute = minute
        self.second = second
        self.microsecond = microsecond
    def __str__(self):
        return 'Arrow(%d, %d, %d, %d)' % (self.hour, self.minute, self.second, self.microsecond)"
1260,"Write a NumPy program to count the lowest index of ""P"" in a given array, element-wise. ","import numpy as np
x1 = np.array(['Python', 'PHP', 'JS', 'EXAMPLES', 'HTML'], dtype=np.str)
print(""\nOriginal Array:"")
print(x1)
print(""count the lowest index of P:"")
r = np.char.find(x1, ""P"")
print(r)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

lowest = np.argmin(arr)

print(lowest)

# Output:
# 0
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9
# 10

# Explanation:
# The array contains the following elements"
1261,Write a Pandas program to display most frequent value in a given series and replace everything else as 'Other' in the series. ,"import pandas as pd
import numpy as np
np.random.RandomState(100)
num_series = pd.Series(np.random.randint(1, 5, [15]))
print(""Original Series:"")
print(num_series)
print(""Top 2 Freq:"", num_series.value_counts())
result = num_series[~num_series.isin(num_series.value_counts().index[:1])] = 'Other'
print(num_series)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
1262,Write a Python program find the common values that appear in two given strings. ,"def intersection_of_two_string(str1, str2):
    result = """"
    for ch in str1:
        if ch in str2 and not ch in result:
            result += ch
    return result

str1 = 'Python3'
str2 = 'Python2.7'
print(""Original strings:"")
print(str1)
print(str2)
print(""\nIntersection of two said String:"") 
print(intersection_of_two_string(str1, str2))
","def common_values(str1, str2):
    common_values = []
    for i in range(len(str1)):
        for j in range(len(str2)):
            if str1[i] == str2[j]:
                common_values.append(str1[i])
    return common_values

print(common_values(""abcd"", ""abcd""))

""""""

def common_values(str1, str2):
    common_"
1263,"Write a Python program to create a 3-tuple ISO year, ISO week number, ISO weekday and an ISO 8601 formatted representation of the date and time. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\n3-tuple - ISO year, ISO week number, ISO weekday:"")
print(arrow.utcnow().isocalendar())
print(""\nISO 8601 formatted representation of the date and time:"")
print(arrow.utcnow().isoformat())
","import datetime

def iso_week_number(iso_year, iso_week):
    iso_week_number = datetime.datetime(iso_year, 1, 1).isocalendar()[1]
    return iso_week_number

def iso_weekday(iso_year, iso_week):
    iso_weekday = datetime.datetime(iso_year, 1, 1)."
1264,Write a Python program to count number of occurrences of each value in a given array of non-negative integers. ,"import numpy as np
array1 = [0, 1, 6, 1, 4, 1, 2, 2, 7] 
print(""Original array:"")
print(array1)
print(""Number of occurrences of each value in array: "")
print(np.bincount(array1))
","def count_occurrences(arr, n):
    count = 0
    for i in range(n):
        if arr[i] == arr[i]:
            count += 1
    return count

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = len(arr)
print(count_occurrences(arr, n))

""""""

def count_occurrences(arr,"
1265,Write a Python program to get a list of locally installed Python modules. ,"import pkg_resources
installed_packages = pkg_resources.working_set
installed_packages_list = sorted([""%s==%s"" % (i.key, i.version)
     for i in installed_packages])
for m in installed_packages_list:
    print(m)
","import sys

print(sys.modules)

# Solution:

# import sys
# print(sys.modules)

# Solution:

# import sys
# print(sys.modules)

# Solution:

# import sys
# print(sys.modules)

# Solution:

# import sys
# print(sys.modules)

# Solution:

# import sys
# print(sys.modules)

# Solution:

# import sys
# print"
1266,Write a Python program to find intersection of two given arrays using Lambda. ,"array_nums1 = [1, 2, 3, 5, 7, 8, 9, 10]
array_nums2 = [1, 2, 4, 8, 9]
print(""Original arrays:"")
print(array_nums1)
print(array_nums2)
result = list(filter(lambda x: x in array_nums1, array_nums2)) 
print (""\nIntersection of the said arrays: "",result)
","def intersection(arr1, arr2):
    return list(set(arr1) & set(arr2))

arr1 = [1, 2, 3, 4, 5]
arr2 = [2, 3, 5, 6, 7]
print(intersection(arr1, arr2))

arr1 = [1, 2, 3, 4, 5]
arr2 = [2, 3, 5, 6, 7]
print(list(set(arr1) & set("
1267,Write a Python program to combine values in python list of dictionaries. ,"from collections import Counter
item_list = [{'item': 'item1', 'amount': 400}, {'item': 'item2', 'amount': 300}, {'item': 'item1', 'amount': 750}]
result = Counter()
for d in item_list:
    result[d['item']] += d['amount']
print(result) 
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21"
1268,"Write a NumPy program to create a new array of 3*5, filled with 2. ","import numpy as np
#using no.full
x = np.full((3, 5), 2, dtype=np.uint)
print(x)
#using no.ones
y = np.ones([3, 5], dtype=np.uint) *2
print(y)
","import numpy as np

a = np.arange(3*5).reshape(3,5)
print(a)

# Solution:
a = np.arange(3*5).reshape(3,5)
print(a)
a = np.arange(3*5).reshape(3,5)
print(a)
a = np.arange(3*5).reshape(3,5)
print(a)"
1269,"Write a Pandas program to filter all records starting from the 2nd row, access every 5th row from world alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nStarting from the 2nd row, access every 5th row:"")
print(w_a_con.iloc[1::5].head(10))
","import pandas as pd

df = pd.read_csv('world_alcohol_consumption.csv')

df = df[df['Alcohol'] >= 5]

df.head()

df.head(5)

df.tail(5)

df.tail(5)

df.tail(5)

df.tail(5)

df.tail(5)

df.tail("
1270,Write a NumPy program to check whether the dimensions of two given arrays are same or not. ,"import numpy as np
def test_array_dimensions(ar1,ar2):
 try:
   ar1 + ar2
 except ValueError:
   return ""Different dimensions""
 else:
   return ""Same dimensions""
ar1 = np.arange(20).reshape(4,5)
ar2 = np.arange(20).reshape(4,5)
print(test_array_dimensions(ar1, ar2))
ar1 = np.arange(20).reshape(5,4)
ar2 = np.arange(20).reshape(4,5)
print(test_array_dimensions(ar1, ar2))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a.shape)
print(b.shape)

if a.shape == b.shape:
    print(""Both arrays have same dimensions"")
else:
    print(""Both arrays have different dimensions"")

# Output:
# (2"
1271,Write a Pandas program to create a time-series with two index labels and random values. Also print the type of the index. ,"import pandas as pd
import numpy as np
import datetime
from datetime import datetime, date
dates = [datetime(2011, 9, 1), datetime(2011, 9, 2)]
print(""Time-series with two index labels:"")
time_series = pd.Series(np.random.randn(2), dates)
print(time_series)
print(""\nType of the index:"")
print(type(time_series.index))
","import pandas as pd

# Create a time-series with two index labels and random values
ts = pd.Series(np.random.randn(100), index=['Jan', 'Feb'])

# Print the type of the index
print(type(ts.index))

# Create a time-series with two index labels and random values
ts = pd.Series(np.random.randn(100), index=['"
1272,Write a NumPy program to compute the condition number of a given matrix. ,"import numpy as np
from numpy import linalg as LA
a = np.array([[1, 0, -1], [0, 1, 0], [1, 0, 1]])
print(""Original matrix:"")
print(a)
print(""The condition number of the said matrix:"")
print(LA.cond(a))
","import numpy as np

A = np.array([[1, 2, 3, 4, 5],
              [6, 7, 8, 9, 10],
              [11, 12, 13, 14, 15],
              [16, 17, 18, 19, 20]])

print(np.linalg.cond(A))

""""""

# Solution

import numpy as np

A = np.array([[1, 2, 3, 4, 5],"
1273,"Write a NumPy program to view inputs as arrays with at least two dimensions, three dimensions. ","import numpy as np
x = 10
print(""View inputs as arrays with at least two dimensions:"")
print(np.atleast_1d(x))
x = np.arange(4.0).reshape(2, 2)
print(np.atleast_1d(x))
print(""View inputs as arrays with at least three dimensions:"")
x =15
print(np.atleast_3d(x))
x = np.arange(3.0)
print(np.atleast_3d(x))
","python solution.py

""""""

import numpy as np

# Create an array of three dimensions
arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Create an array of two dimensions
arr2 = np.array([[1, 2], [3, 4]])

# Create an array with three dimensions
arr3 = np.array([[1, 2, 3], [4, 5"
1274,Write a Pandas program to create the todays date. ,"import pandas as pd
from datetime import date
now = pd.to_datetime(str(date.today()), format='%Y-%m-%d')
print(""Today's date:"")
print(now)
","import datetime

# Create a datetime object
today = datetime.datetime.now()

# Print the date
print(today)

# Create a string object
date = today.strftime(""%Y-%m-%d"")

# Print the date
print(date)

# Create a string object
date = today.strftime(""%Y-%m-%d %H:%M:%S"")

# Print the date
print(date)

# Create"
1275,"Write a NumPy program to create a new array of given shape (5,6) and type, filled with zeros. ","import numpy as np
nums = np.zeros(shape=(5, 6), dtype='int')
print(""Original array:"")
print(nums)
nums[::2, ::2] = 3
nums[1::2, ::2] = 7
print(""\nNew array:"")
print(nums)
","import numpy as np

arr = np.zeros((5,6))

arr = np.zeros((5,6), dtype=np.int64)

arr = np.zeros((5,6), dtype=np.float64)

arr = np.zeros((5,6), dtype=np.complex128)

arr = np.zeros((5,6), dtype=np.object)"
1276,Write a NumPy program to save a given array to a binary file . ,"import numpy as np
import os
a = np.arange(20)
np.save('temp_arra.npy', a)
print(""Check if 'temp_arra.npy' exists or not?"")
if os.path.exists('temp_arra.npy'):
    x2 = np.load('temp_arra.npy')
    print(np.array_equal(a, x2))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5])

np.save('arr.npy', arr)

arr = np.load('arr.npy')

arr

arr.shape

arr.size

arr.dtype

arr.ndim

arr.itemsize

arr.nbytes

arr.nbytes / arr.itemsize

arr.nbytes / arr.itemsize / arr.n"
1277,Write a Python program to extract the nth element from a given list of tuples. ,"def extract_nth_element(test_list, n):
    result = [x[n] for x in test_list]
    return result

students = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] 
print (""Original list:"")
print(students)
n = 0
print(""\nExtract nth element ( n ="",n,"") from the said list of tuples:"")
print(extract_nth_element(students, n))

n = 2
print(""\nExtract nth element ( n ="",n,"") from the said list of tuples:"")
print(extract_nth_element(students, n))
","def extract_nth_element(lst, n):
    return lst[n]

lst = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]
n = 3
print(extract_nth_element(lst, n))

""""""

def extract_nth_element(lst, n):
    return lst[n]

lst = [('a', 1),"
1278,Write a NumPy program to create a contiguous flattened array. ,"import numpy as np
x = np.array([[10, 20, 30], [20, 40, 50]])
print(""Original array:"")
print(x)
y = np.ravel(x)
print(""New flattened array:"")
print(y)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

# a = np.array([[1, 2, 3], [4, 5, 6]])
# print(a)
# print(a.flatten())

# a = np.array([[1, 2, 3], [4, 5, 6]])
# print(a)
# print(a.flatten())

# a"
1279,Write a Python program to print the first n Lucky Numbers. ,"n=int(input(""Input a Number: ""))
List=range(-1,n*n+9,2)
i=2
while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1
print(List[1:n+1])
","def main():
    n = int(input(""Enter the number of numbers you want to print: ""))
    print(""The first"", n, ""lucky numbers are: "")
    for i in range(n):
        print(random.randint(1, 100))

if __name__ == ""__main__"":
    main()

""""""

# Solution

def main():
    n = int(input(""Enter the number of numbers you want to print: ""))
    print(""The"
1280,Write a Python function to calculate the factorial of a number (a non-negative integer). The function accepts the number as an argument. ,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)
n=int(input(""Input a number to compute the factiorial : ""))
print(factorial(n))
","def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

print(factorial(5))

""""""

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

print(factorial(5))

""""""

def factorial(n"
1281,Write a Python program to convert a list into a nested dictionary of keys. ,"num_list = [1, 2, 3, 4]
new_dict = current = {}
for name in num_list:
    current[name] = {}
    current = current[name]
print(new_dict)
","def nested_dict_to_dict(lst):
    d = {}
    for i in lst:
        d[i] = nested_dict_to_dict(i)
    return d

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(nested_dict_to_dict(lst))

""""""

def nested_dict_to_dict(lst):
    d = {}
    for"
1282,"Write a Python program to find the second lowest grade of any student(s) from the given names and grades of each student using lists and lambda. Input number of students, names and grades of each student. ","students = []
sec_name = []
second_low = 0
n = int(input(""Input number of students: ""))
for _ in range(n):
   s_name = input(""Name: "")
   score = float(input(""Grade: ""))
   students.append([s_name,score])
print(""\nNames and Grades of all students:"")
print(students)
order =sorted(students, key = lambda x: int(x[1]))
for i in range(n):
   if order[i][1] != order[0][1]:
       second_low = order[i][1]
       break
print(""\nSecond lowest grade: "",second_low)
sec_student_name = [x[0] for x in order if x[1] == second_low]
sec_student_name.sort()
print(""\nNames:"")
for s_name in sec_student_name:
   print(s_name)
","def second_lowest_grade(students, names, grades):
    second_lowest_grade = []
    for student in students:
        second_lowest_grade.append(min(grades[student]))
    return second_lowest_grade

print(second_lowest_grade([""Harry"", ""Ron"", ""Hermione"", ""Ginny""],"
1283,Write a Python program to check whether a given datetime is between two dates and times using arrow module. ,"import arrow
print(""Test whether a given datetime is between two dates and times:"")
start = arrow.get(datetime(2017, 6, 5, 12, 30, 10))
end = arrow.get(datetime(2017, 6, 5, 12, 30, 36))
print(arrow.get(datetime(2017, 6, 5, 12, 30, 27)).is_between(start, end))
start = arrow.get(datetime(2017, 5, 5))
end = arrow.get(datetime(2017, 5, 8))
print(arrow.get(datetime(2017, 5, 8)).is_between(start, end, '[]'))
start = arrow.get(datetime(2017, 5, 5))
end = arrow.get(datetime(2017, 5, 8))
print(arrow.get(datetime(2017, 5, 8)).is_between(start, end, '[)'))
","import arrow

def check_date(date):
    if arrow.get(date).time() >= arrow.get(date).time():
        return True
    else:
        return False

print(check_date(""2021-05-01""))
print(check_date(""2021-05-02""))
print(check_date(""2021-05-03""))
print(check_date(""2021-05-04""))
print(check_date"
1284,Write a Python program to convert string element to integer inside a given tuple using lambda. ,"def tuple_int_str(tuple_str):
    result = tuple(map(lambda x: (int(x[0]), int(x[2])), tuple_str))
    return result     
tuple_str =  (('233', 'ABCD', '33'), ('1416', 'EFGH', '55'), ('2345', 'WERT', '34'))
print(""Original tuple values:"")
print(tuple_str)
print(""\nNew tuple values:"")
print(tuple_int_str(tuple_str))
","def convert_to_int(tuple):
    return tuple[0]

print(convert_to_int((1, 2, 3, 4, 5)))

""""""

# Solution 1

def convert_to_int(tuple):
    return tuple[0]

print(convert_to_int((1, 2, 3, 4, 5)))

# Solution 2

def convert_to_int(tuple):
    return tuple[0]"
1285,Write a Pandas program to extract hash attached word from twitter text from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'tweets': ['#Obama says goodbye','Retweets for #cash','A political endorsement in #Indonesia', '1 dog = many #retweets', 'Just a simple #egg']
    })
print(""Original DataFrame:"")
print(df)
def find_hash(text):
    hword=re.findall(r'(?<=#)\w+',text)
    return "" "".join(hword)
df['hash_word']=df['tweets'].apply(lambda x: find_hash(x))
print(""\Extracting#@word from dataframe columns:"")
print(df)
","import pandas as pd
import hashlib

df = pd.read_csv('hash_word.csv')

# Hash the word
hash_word = hashlib.sha256(df['text'].values.tolist()).hexdigest()

# Hash the word
hash_word = hashlib.sha256(df['text'].values.tolist()).hexdigest()

# Hash the word
hash_word ="
1286,"Write a Python program to get the index of the first element, which is greater than a specified element using itertools module. ","from itertools import takewhile
def first_index(l1, n):
    return len(list(takewhile(lambda x: x[1] <= n, enumerate(l1))))


nums = [12,45,23,67,78,90,100,76,38,62,73,29,83]
print(""Original list:"")
print(nums)
n = 73
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
n = 21
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
n = 80
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
n = 55
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
","def get_index(element, iterable):
    for i, e in enumerate(iterable):
        if e > element:
            return i
    return -1

print(get_index(5, [1, 2, 3, 4, 5, 6, 7, 8, 9]))

""""""

# Solution

def get_index(element, iterable):
    for i, e in enumerate(iterable):"
1287,Write a Python program to sort unsorted numbers using Timsort. ,"#Ref:https://bit.ly/3qNYxh9
def binary_search(lst, item, start, end):
    if start == end:
        return start if lst[start] > item else start + 1
    if start > end:
        return start

    mid = (start + end) // 2
    if lst[mid] < item:
        return binary_search(lst, item, mid + 1, end)
    elif lst[mid] > item:
        return binary_search(lst, item, start, mid - 1)
    else:
        return mid
def insertion_sort(lst):
    length = len(lst)
    for index in range(1, length):
        value = lst[index]
        pos = binary_search(lst, value, 0, index - 1)
        lst = lst[:pos] + [value] + lst[pos:index] + lst[index + 1 :]
    return lst
def merge(left, right):
    if not left:
        return right

    if not right:
        return left
    if left[0] < right[0]:
        return [left[0]] + merge(left[1:], right)
    return [right[0]] + merge(left, right[1:])

def tim_sort(lst):
    length = len(lst)
    runs, sorted_runs = [], []
    new_run = [lst[0]]
    sorted_array = []
    i = 1
    while i < length:
        if lst[i] < lst[i - 1]:
            runs.append(new_run)
            new_run = [lst[i]]
        else:
            new_run.append(lst[i])
        i += 1
    runs.append(new_run)
    for run in runs:
        sorted_runs.append(insertion_sort(run))
    for run in sorted_runs:
        sorted_array = merge(sorted_array, run)
    return sorted_array
lst = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(lst)
print(""After applying Timsort the said list becomes:"")
sorted_lst = tim_sort(lst)
print(sorted_lst)
lst =  ""Python""
print(""\nOriginal list:"")
print(lst)
print(""After applying Timsort the said list becomes:"")
sorted_lst = tim_sort(lst)
print(sorted_lst)
lst = (1.1, 1, 0, -1, -1.1)
print(""\nOriginal list:"")
print(lst)
print(""After applying Timsort the said list becomes:"")
sorted_lst = tim_sort(lst)
print(sorted_lst)
","def timsort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [6, 4, 8, 2, 5, 1, 9, 7, 3]
print(tsort(arr))

""""""

def timsort"
1288,Write a Python program to check if a given function returns True for at least one element in the list. ,"def test(lst, fn = lambda x: x):
  return all(not fn(x) for x in lst)
print(test([1, 0, 2, 3], lambda x: x >= 3 ))
print(test([1, 0, 2, 3], lambda x: x < 0 ))
print(test([2, 2, 4, 4]))
","def is_true(x):
    if x == 0:
        return False
    else:
        return True

print(is_true(0))
print(is_true(1))
print(is_true(2))
print(is_true(3))
print(is_true(4))
print(is_true(5))
print(is_true(6))
print(is_true(7))
print(is_true("
1289,Write a Python program to initialize a list containing the numbers in the specified range where start and end are inclusive and the ratio between two terms is step. Returns an error if step equals 1. ,"from math import floor, log
def geometric_progression(end, start=1, step=2):
  return [start * step ** i for i in range(floor(log(end / start)
          / log(step)) + 1)] 
print(geometric_progression(256))
print(geometric_progression(256, 3))
print(geometric_progression(256, 1, 4))
","import math

def main():
    print(""Enter the range of numbers to be included in the list: "")
    start = int(input())
    end = int(input())
    step = int(input())
    print(""Enter the step value: "")
    step = int(input())
    print(""Enter the range of numbers to be included in the list: "")
    start"
1290,"Write a Pandas program to create a whole month of dates in daily frequencies. Also find the maximum, minimum timestamp and indexs. ","import pandas as pd
dates = pd.Series(pd.date_range('2020-12-01',periods=31, freq='D'))
print(""Month of December 2020:"")
print(dates)
dates = pd.Series(pd.date_range('2020-12-01',periods=31, freq='D'))
print(""\nMaximum date: "", dates.max())
print(""Minimum date: "", dates.min())
print(""Maximum index: "", dates.idxmax())
print(""Minimum index: "", dates.idxmin())
","import pandas as pd
import datetime as dt

# Create a dataframe
df = pd.DataFrame(columns=['Date', 'Daily Frequency'])

# Create a loop to iterate over the dates
for i in range(1, 32):
    # Create a new date
    new_date = dt.date(2021, i, 1)
    # Create a new frequency
    new_frequency ="
1291,Write a Python program to sort a list of elements using Radix sort. ,"def radix_sort(nums):
    RADIX = 10
    placement = 1
    max_digit = max(nums)

    while placement < max_digit:
      buckets = [list() for _ in range( RADIX )]
      for i in nums:
        tmp = int((i / placement) % RADIX)
        buckets[tmp].append(i)
      a = 0
      for b in range( RADIX ):
        buck = buckets[b]
        for i in buck:
          nums[a] = i
          a += 1
      placement *= RADIX
    return nums
user_input = input(""Input numbers separated by a comma:\n"").strip()
nums = [int(item) for item in user_input.split(',')]
print(radix_sort(nums))
","def radixSort(arr):
    # Write your code here
    for i in range(len(arr)):
        for j in range(len(arr)):
            if arr[j] >= arr[i]:
                arr[j], arr[i] = arr[i], arr[j]
    return arr

# Driver code
arr = [10, 4, 9, 2, 5, 8, 3, 1, 6, 7]
print(radixSort(arr))"
1292,Write a Pandas program to add some data to an existing Series. ,"import pandas as pd
s = pd.Series(['100', '200', 'python', '300.12', '400'])
print(""Original Data Series:"")
print(s)
print(""\nData Series after adding some data:"")
new_s = s.append(pd.Series(['500', 'php']))
print(new_s)
","import pandas as pd

# Create a Pandas DataFrame
df = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})

# Add the new column to the existing DataFrame
df['col3'] = df['col1'] + df['col2']

# Print the new DataFrame
print(df)

# Create a Pandas Series
s = pd.Series([1, 2, 3, 4"
1293,"Write a Python program to create a datetime object, converted to the specified timezone using arrow module. ","import arrow
utc = arrow.utcnow()
pacific=arrow.now('US/Pacific')
nyc=arrow.now('America/Chicago').tzinfo
print(pacific.astimezone(nyc))
","import datetime

# Convert the datetime object to a string
print(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))

# Convert the string to a datetime object
print(datetime.datetime.strptime('2021-10-10 12:12:12', '%Y-%m-%d %H:%M:%S'))

# Convert the"
1294,Write a Python program to create a dictionary from two lists without losing duplicate values. ,"from collections import defaultdict
class_list = ['Class-V', 'Class-VI', 'Class-VII', 'Class-VIII']
id_list = [1, 2, 2, 3]
temp = defaultdict(set)
for c, i in zip(class_list, id_list):
    temp[c].add(i)
print(temp)
","def solution(a, b):
    d = {}
    for i in a:
        if i in b:
            d[i] = b.count(i)
    return d

print(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def solution(a, b):
    d = {}"
1295,Write a Python program to create a dictionary with the same keys as the given dictionary and values generated by running the given function for each value. ,"def test(obj, fn):
  return dict((k, fn(v)) for k, v in obj.items())
 
users = {
  'Theodore': { 'user': 'Theodore', 'age': 45 },
  'Roxanne': { 'user': 'Roxanne', 'age': 15 },
  'Mathew': { 'user': 'Mathew', 'age': 21 },
}
print(""\nOriginal dictionary elements:"")
print(users)
print(""\nDictionary with the same keys:"")
print(test(users, lambda u : u['age']))
","def solution(d, f):
    answer = {}
    for i in d:
        answer[i] = f(d[i])
    return answer

def f(d):
    return d.values()

print(solution({1:2, 2:3, 3:4}, f))

""""""

def solution(d, f):
    answer = {}
    for i in d:
        answer["
1296,Write a Pandas program to create a plot of stock price and trading volume of Alphabet Inc. between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
stock_data = df1.set_index('Date')
top_plt = plt.subplot2grid((5,4), (0, 0), rowspan=3, colspan=4)
top_plt.plot(stock_data.index, stock_data[""Close""])
plt.title('Historical stock prices of Alphabet Inc. [01-04-2020 to 30-09-2020]')
bottom_plt = plt.subplot2grid((5,4), (3,0), rowspan=1, colspan=4)
bottom_plt.bar(stock_data.index, stock_data['Volume'])
plt.title('\nAlphabet Inc. Trading Volume', y=-0.60)
plt.gcf().set_size_inches(12,8)
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])

df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')

df['Volume'] = df['Volume'].astype(float)

df['Trading"
1297,Write a Python program to square and cube every number in a given list of integers using Lambda. ,"nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(""Original list of integers:"")
print(nums)
print(""\nSquare every number of the said list:"")
square_nums = list(map(lambda x: x ** 2, nums))
print(square_nums)
print(""\nCube every number of the said list:"")
cube_nums = list(map(lambda x: x ** 3, nums))
print(cube_nums)
","def square(numbers):
    return [i**2 for i in numbers]

def cube(numbers):
    return [i**3 for i in numbers]

print(square(numbers))
print(cube(numbers))

""""""

# Solution

def square(numbers):
    return [i**2 for i in numbers]

def cube(numbers):
    return [i**3 for i in numbers]

numbers ="
1298,"Write a NumPy program to generate a uniform, non-uniform random sample from a given 1-D array with and without replacement. ","import numpy as np 
print(""Generate a uniform random sample with replacement:"") 
print(np.random.choice(7, 5))
print(""\nGenerate a uniform random sample without replacement:"") 
print(np.random.choice(7, 5, replace=False))
print(""\nGenerate a non-uniform random sample with replacement:"") 
print(np.random.choice(7, 5, p=[0.1, 0.2, 0, 0.2, 0.4, 0, 0.1]))
print(""\nGenerate a uniform random sample without replacement:"") 
print(np.random.choice(7, 5, replace=False, p=[0.1, 0.2, 0, 0.2, 0.4, 0, 0.1]))  
","import numpy as np

# Generate a uniform random sample
np.random.seed(0)
x = np.random.rand(10)

# Generate a non-uniform random sample
np.random.seed(1)
x = np.random.rand(10)

# Generate a uniform random sample with replacement
np.random.seed(2)
x = np.random.rand(10)"
1299,Write a Python program to use double quotes to display strings. ,"import json
print(json.dumps({'Alex': 1, 'Suresh': 2, 'Agnessa': 3}))
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

#"
1300,Write a Python program to get the current memory address and the length in elements of the buffer used to hold an array's contents and also find the size of the memory buffer in bytes. ,"from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print(""Original array: ""+str(array_num))
print(""Current memory address and the length in elements of the buffer: ""+str(array_num.buffer_info()))
print(""The size of the memory buffer in bytes: ""+str(array_num.buffer_info()[1] * array_num.itemsize))
","def get_memory_address(arr):
    # Your code here
    return arr[0], len(arr)

def get_length(arr):
    # Your code here
    return len(arr)

def get_buffer_size(arr):
    # Your code here
    return len(arr)

def get_buffer_address(arr):
    # Your code here"
1301,Write a NumPy program to compute the determinant of a given square array. ,"import numpy as np
from numpy import linalg as LA
a = np.array([[1, 0], [1, 2]])
print(""Original 2-d array"")
print(a)
print(""Determinant of the said 2-D array:"")
print(np.linalg.det(a))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(np.linalg.det(a))

# Output:

# Traceback (most recent call last):
#   File ""<stdin>"", line 1, in <module>
# TypeError: unsupported operand type(s) for *: 'int' and 'float'

# Output:

#"
1302,"Write a Pandas program to split the following dataframe into groups by school code and get mean, min, and max value of age with customized column name for each school. ","import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
student_data = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    ' height ': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])

print(""Original DataFrame:"")
print(student_data)
print('\nMean, min, and max value of age for each school with customized column names:')
grouped_single = student_data.groupby('school_code').agg(Age_Mean = ('age','mean'),Age_Max=('age',max),Age_Min=('age',min))
print(grouped_single)
","import pandas as pd

df = pd.read_csv(""https://github.com/jbrownlee/Datasets/blob/master/python/data/student_scores.csv"")

# Create a new column named ""avg"" that is the mean of all the values in the column.
df[""avg""] = df[""gpa""].astype(""float"").mean()"
1303,"Write a Python program to filter the height and width of students, which are stored in a dictionary using lambda. ","def filter_data(students):
    result = dict(filter(lambda x: (x[1][0], x[1][1]) > (6.0, 70), students.items()))
    return result  
students = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}
print(""Original Dictionary:"")
print(students)
print(""\nHeight> 6ft and Weight> 70kg:"")
print(filter_data(students))
","height_dict = {
    ""Harry"": [180, 173, 165, 173, 165, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173,"
1304,"Write a NumPy program to remove the first dimension from a given array of shape (1,3,4). ","import numpy as np
nums = np.array([[[1, 2, 3, 4],
               [0, 1, 3, 4],
               [5, 0, 3, 2]]])
print('Shape of the said array:')
print(nums.shape) 
print(""\nAfter removing the first dimension of the shape of the said array:"")
","import numpy as np

a = np.array([[1,2,3,4],[5,6,7,8]])
print(a)

a = np.array([[1,2,3,4],[5,6,7,8]])
print(a.shape)

a = np.array([[1,2,3,4],[5,6,7,8]])
print(a.ndim)"
1305,Write a NumPy program to compute the following polynomial values. ,"import numpy as np
print(""Polynomial value when x = 2:"")
print(np.polyval([1, -2, 1], 2))
print(""Polynomial value when x = 3:"")
print(np.polyval([1, -12, 10, 7, -10], 3))
","x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
y = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
y = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

x = np"
1306,Write a Python program to get the file size of a plain file. ,"def file_size(fname):
        import os
        statinfo = os.stat(fname)
        return statinfo.st_size

print(""File size in bytes of a plain file: "",file_size(""test.txt""))
","import os

def get_file_size(file_name):
    with open(file_name, 'rb') as f:
        return os.fstat(f.fileno()).st_size

print(get_file_size('file.txt'))

""""""

# Solution

def get_file_size(file_name):
    with open(file_name, 'rb') as f:
        return os.fstat(f.fileno()).st_"
1307,Write a Python program to remove all consecutive duplicates of a given string. ,"from itertools import groupby 
def remove_all_consecutive(str1): 
	result_str = [] 
	for (key,group) in groupby(str1): 
		result_str.append(key) 

	return ''.join(result_str)
	
str1 = 'xxxxxyyyyy'
print(""Original string:"" + str1)
print(""After removing consecutive duplicates: "" + str1)
print(remove_all_consecutive(str1))
","def remove_consecutive_duplicates(string):
    # your code goes here
    return string

# Test your code
print(remove_consecutive_duplicates(""abcabcbb""))
print(remove_consecutive_duplicates(""bbbbb""))
print(remove_consecutive_duplicates(""bbbbb""))
print(remove_consecutive_duplicates(""bbbbb""))
print(remove_consecutive_duplicates(""bb"
1308,Write a Python program that accept some words and count the number of distinct words. Print the number of distinct words and number of occurrences for each distinct word according to their appearance. ,"from collections import Counter, OrderedDict
class OrderedCounter(Counter,OrderedDict):
   pass
word_array = []
n = int(input(""Input number of words: ""))
print(""Input the words: "")
for i in range(n):
   word_array.append(input().strip())
word_ctr = OrderedCounter(word_array)
print(len(word_ctr))
for word in word_ctr:
   print(word_ctr[word],end=' ')
","Sample Input

The following is a sample input.

The following is a sample output.

Sample Input

The following is a sample input.

The following is a sample output.

Sample Input

The following is a sample input.

The following is a sample output.

Sample Input

The following is a sample input.

The following is a sample output.

Sample Input"
1309,Write a Pandas program to get the average mean of the UFO (unidentified flying object) sighting was reported. ,"import pandas as pd
#Source: https://bit.ly/32kGinQ
df = pd.read_csv(r'ufo.csv')
df['date_documented'] = df['date_documented'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
# Add a new column instance, this adds a value to each instance of ufo sighting
df['instance'] = 1

# set index to time, this makes df a time series df and then you can apply pandas time series functions.
df.set_index(df['date_documented'], drop=True, inplace=True)

# create another df by resampling the original df and counting the instance column by Month ('M' is resample by month)
ufo2 = pd.DataFrame(df['instance'].resample('M').count())

# just to find month of resampled observation
ufo2['date_documented'] = pd.to_datetime(ufo2.index.values)

ufo2['month'] = ufo2['date_documented'].apply(lambda x: x.month)
print(""Average mean of  the UFO (unidentified flying object) sighting was reported:"")
print(ufo2.groupby(by='month').mean())
","import pandas as pd

# Read the data
df = pd.read_csv('/Users/srinivasan/Downloads/UFO_Sighting_Report.csv')

# Calculate the average
df['UFO_Sighting_Report_Average'] = df['UFO_Sighting_Report'].mean()

# Print the average
print(df['UFO_Sighting_Report_Average'])

# Create a"
1310,Write a Python program to reverse a given list of lists. ,"def reverse_list_of_lists(list1):
    return list1[::-1]
colors = [['orange', 'red'], ['green', 'blue'], ['white', 'black', 'pink']]
print(""Original list:"")
print(colors)
print(""\nReverse said list of lists:"")
print(reverse_list_of_lists(colors))
nums = [[1,2,3,4], [0,2,4,5], [2,3,4,2,4]]
print(""\nOriginal list:"")
print(nums)
print(""\nReverse said list of lists:"")
print(reverse_list_of_lists(nums))
","def reverse_list(lst):
    lst.reverse()
    return lst

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(reverse_list(lst))

""""""

# Solution 1

def reverse_list(lst):
    lst.reverse()
    return lst

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print("
1311,Write a Python program to iterate over two lists simultaneously. ,"num = [1, 2, 3]
color = ['red', 'white', 'black']
for (a,b) in zip(num, color):
     print(a, b)
	 ","def iterate_list(l1, l2):
    for item in l1:
        for item in l2:
            print(item, end=' ')
        print()

l1 = [1, 2, 3, 4, 5]
l2 = ['a', 'b', 'c', 'd', 'e']

iterate_list(l1, l2)

l1 = [1, 2, 3, 4, 5]
l2 = ['a', 'b"
1312,Write a Python program to split a given dictionary of lists into list of dictionaries using map function. ,"def list_of_dicts(marks):
    result = map(dict, zip(*[[(key, val) for val in value] for key, value in marks.items()]))
    return list(result)
marks = {'Science': [88, 89, 62, 95], 'Language': [77, 78, 84, 80]}
print(""Original dictionary of lists:"")
print(marks)
print(""\nSplit said dictionary of lists into list of dictionaries:"")
print(list_of_dicts(marks))
","d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}

print(list(map(lambda x: dict(x), d.values())))

""""""

d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}

print(list(map(lambda x: dict(x), d"
1313,Write a Python program to find the second largest number in a list. ,"def second_largest(numbers):
  if (len(numbers)<2):
    return
  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):
    return
  dup_items = set()
  uniq_items = []
  for x in numbers:
    if x not in dup_items:
      uniq_items.append(x)
      dup_items.add(x)
  uniq_items.sort()    
  return  uniq_items[-2]   
print(second_largest([1,2,3,4,4]))
print(second_largest([1, 1, 1, 0, 0, 0, 2, -2, -2]))
print(second_largest([2,2]))
print(second_largest([1]))
","def second_largest(numbers):
    if len(numbers) == 0:
        return None
    else:
        return numbers[0]

print(second_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def second_largest(numbers):
    if len(numbers) == 0:
        return None
    else:
        return numbers[0]

print(second_largest([1, 2"
1314,Write a Pandas program to split the following dataframe into groups based on all columns and calculate Groupby value counts on the dataframe. ,"import pandas as pd
df = pd.DataFrame( {'id' : [1, 2, 1, 1, 2, 1, 2], 
                    'type' : [10, 15, 11, 20, 21, 12, 14], 
                    'book' : ['Math','English','Physics','Math','English','Physics','English']})

print(""Original DataFrame:"")
print(df)
result = df.groupby(['id', 'type', 'book']).size().unstack(fill_value=0)
print(""\nResult:"")
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

print"
1315,Write a Python program to sort a list of lists by a given index of the inner list using lambda. ,"def index_on_inner_list(list_data, index_no):
    result = sorted(list_data, key=lambda x: x[index_no])
    return result
students = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] 
print (""Original list:"")
print(students)
index_no = 0
print(""\nSort the said list of lists by a given index"",""( Index = "",index_no,"") of the inner list"")
print(index_on_inner_list(students, index_no))
index_no = 2
print(""\nSort the said list of lists by a given index"",""( Index = "",index_no,"") of the inner list"")
print(index_on_inner_list(students, index_no))
","def sort_by_index(lst, index):
    return sorted(lst, key=lambda x: x[index])

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(sort_by_index(lst, 0))

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(sort_by_index(lst"
1316,Write a Python program to get all combinations of key-value pairs in a given dictionary. ,"import itertools
def test(dictt):
    result = list(map(dict, itertools.combinations(dictt.items(), 2)))
    return result    

students = {'V' : [1, 4, 6, 10], 'VI' : [1, 4, 12], 'VII' : [1, 3, 8]} 
print(""\nOriginal Dictionary:"")
print(students)
print(""\nCombinations of key-value pairs of the said dictionary:"")
print(test(students))

students = {'V' : [1, 3, 5], 'VI' : [1, 5]} 
print(""\nOriginal Dictionary:"")
print(students)
print(""\nCombinations of key-value pairs of the said dictionary:"")
print(test(students))
","python solution.py

""""""

def get_key_value_pairs(dictionary):
    """"""
    :param dictionary: dictionary to get key-value pairs from
    :return: list of key-value pairs
    """"""
    return [k, v for k, v in dictionary.items()]

def get_all_key_value_pairs(dictionary):
    """"""
    :param dictionary: dictionary to get all key-value pairs from
    :return"
1317,Write a Pandas program to create a Pivot table and find the region wise total sale. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df,index=""Region"",values=""Sale_amt"", aggfunc = np.sum)
print(table)
","import pandas as pd

df = pd.read_csv(""C:\\Users\\DELL\\Desktop\\Python\\Sales.csv"")

df.head()

df.columns = ['Region', 'Sales']

df.head()

df.Sales.plot(kind='bar')

df.Sales.plot(kind='barh')

df.Sales.plot(kind='barh')

df.Sales.plot(kind='barh"
1318,Write a Python program to sort a list alphabetically in a dictionary. ,"num = {'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]}
sorted_dict = {x: sorted(y) for x, y in num.items()}
print(sorted_dict)
","def sort_list(list):
    new_list = []
    for i in list:
        new_list.append(i)
    new_list.sort()
    return new_list

print(sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]))

""""""

def sort_list(list):
    new_list = []
    for i in list:
        new_list.append(i)
    new_list"
1319,Write a Python program to sort unsorted numbers using Merge-insertion sort. ,"#Ref.https://bit.ly/3r32ezJ
from __future__ import annotations


def merge_insertion_sort(collection: list[int]) -> list[int]:
    """"""Pure implementation of merge-insertion sort algorithm in Python
    :param collection: some mutable ordered collection with heterogeneous
    comparable items inside
    :return: the same collection ordered by ascending
    Examples:
    >>> merge_insertion_sort([0, 5, 3, 2, 2])
    [0, 2, 2, 3, 5]
    >>> merge_insertion_sort([99])
    [99]
    >>> merge_insertion_sort([-2, -5, -45])
    [-45, -5, -2]
    """"""

    def binary_search_insertion(sorted_list, item):
        left = 0
        right = len(sorted_list) - 1
        while left <= right:
            middle = (left + right) // 2
            if left == right:
                if sorted_list[middle] < item:
                    left = middle + 1
                break
            elif sorted_list[middle] < item:
                left = middle + 1
            else:
                right = middle - 1
        sorted_list.insert(left, item)
        return sorted_list

    def sortlist_2d(list_2d):
        def merge(left, right):
            result = []
            while left and right:
                if left[0][0] < right[0][0]:
                    result.append(left.pop(0))
                else:
                    result.append(right.pop(0))
            return result + left + right

        length = len(list_2d)
        if length <= 1:
            return list_2d
        middle = length // 2
        return merge(sortlist_2d(list_2d[:middle]), sortlist_2d(list_2d[middle:]))

    if len(collection) <= 1:
        return collection

    """"""
    Group the items into two pairs, and leave one element if there is a last odd item.
    Example: [999, 100, 75, 40, 10000]
                -> [999, 100], [75, 40]. Leave 10000.
    """"""
    two_paired_list = []
    has_last_odd_item = False
    for i in range(0, len(collection), 2):
        if i == len(collection) - 1:
            has_last_odd_item = True
        else:
            """"""
            Sort two-pairs in each groups.
            Example: [999, 100], [75, 40]
                        -> [100, 999], [40, 75]
            """"""
            if collection[i] < collection[i + 1]:
                two_paired_list.append([collection[i], collection[i + 1]])
            else:
                two_paired_list.append([collection[i + 1], collection[i]])

    """"""
    Sort two_paired_list.
    Example: [100, 999], [40, 75]
                -> [40, 75], [100, 999]
    """"""
    sorted_list_2d = sortlist_2d(two_paired_list)

    """"""
    40 < 100 is sure because it has already been sorted.
    Generate the sorted_list of them so that you can avoid unnecessary comparison.
    Example:
           group0 group1
           40     100
           75     999
        ->
           group0 group1
           [40,   100]
           75     999
    """"""
    result = [i[0] for i in sorted_list_2d]

    """"""
    100 < 999 is sure because it has already been sorted.
    Put 999 in last of the sorted_list so that you can avoid unnecessary comparison.
    Example:
           group0 group1
           [40,   100]
           75     999
        ->
           group0 group1
           [40,   100,   999]
           75
    """"""
    result.append(sorted_list_2d[-1][1])

    """"""
    Insert the last odd item left if there is.
    Example:
           group0 group1
           [40,   100,   999]
           75
        ->
           group0 group1
           [40,   100,   999,   10000]
           75
    """"""
    if has_last_odd_item:
        pivot = collection[-1]
        result = binary_search_insertion(result, pivot)

    """"""
    Insert the remaining items.
    In this case, 40 < 75 is sure because it has already been sorted.
    Therefore, you only need to insert 75 into [100, 999, 10000],
    so that you can avoid unnecessary comparison.
    Example:
           group0 group1
           [40,   100,   999,   10000]
            ^ You don't need to compare with this as 40 < 75 is already sure.
           75
        ->
           [40,   75,    100,   999,   10000]
    """"""
    is_last_odd_item_inserted_before_this_index = False
    for i in range(len(sorted_list_2d) - 1):
        if result[i] == collection[-i]:
            is_last_odd_item_inserted_before_this_index = True
        pivot = sorted_list_2d[i][1]
        # If last_odd_item is inserted before the item's index,
        # you should forward index one more.
        if is_last_odd_item_inserted_before_this_index:
            result = result[: i + 2] + binary_search_insertion(result[i + 2 :], pivot)
        else:
            result = result[: i + 1] + binary_search_insertion(result[i + 1 :], pivot)

    return result

nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
print(""After applying Merge-insertion Sort the said list becomes:"")
print(merge_insertion_sort(nums))
print(nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
print(""After applying Merge-insertion  Sort the said list becomes:"")
print(merge_insertion_sort(nums))
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Merge-insertion  Sort the said list becomes:"")
print(merge_insertion_sort(nums))

chars = ['z','a','y','b','x','c']
print(""\nOriginal list:"")
print(chars)
print(""After applying Merge-insertion  Sort the said list becomes:"")
print(merge_insertion_sort(chars))
","def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = arr[:mid]
    right = arr[mid:]
    left = merge_sort(left)
    right = merge_sort(right)
    return merge(left, right)

def merge(left, right):
    result = []
    i, j = 0, 0
    while i < len(left) and j"
1320,Write a NumPy program to save a given array to a text file and load it. ,"import numpy as np
import os
x = np.arange(12).reshape(4, 3)
print(""Original array:"")
print(x)
header = 'col1 col2 col3'
np.savetxt('temp.txt', x, fmt=""%d"", header=header) 
print(""After loading, content of the text file:"")
result = np.loadtxt('temp.txt')
print(result)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5])

np.savetxt('arr.txt', arr)

arr2 = np.loadtxt('arr.txt')

print(arr2)

arr3 = np.loadtxt('arr.txt', dtype=int)

print(arr3)

arr4 = np.loadtxt('arr.txt', dtype=str)

print(arr4)"
1321,"Write a Python program to sum two or more lists, the lengths of the lists may be different. ","def sum_lists_diff_length(test_list):
    result =  [sum(x) for x in zip(*map(lambda x:x+[0]*max(map(len, test_list)) if len(x)<max(map(len, test_list)) else x, test_list))]
    return result

nums = [[1,2,4],[2,4,4],[1,2]]
print(""\nOriginal list:"")
print(nums)
print(""Sum said lists with different lengths:"")
print(sum_lists_diff_length(nums))

nums = [[1],[2,4,4],[1,2],[4]]
print(""\nOriginal list:"")
print(nums)
print(""Sum said lists with different lengths:"")
print(sum_lists_diff_length(nums))
","def sum_lists(l1, l2):
    return [len(l1), len(l2)]

l1 = [1, 2, 3, 4, 5]
l2 = [1, 2, 3, 4, 5]

print(sum_lists(l1, l2))

""""""

def sum_lists(l1, l2):
    return [len(l1), len(l2)]

l1 = [1"
1322,"Write a Python program to create a new Arrow object, representing the ""floor"" of the timespan of the Arrow object in a given timeframe using arrow module. The timeframe can be any datetime property like day, hour, minute. ","import arrow
print(arrow.utcnow())
print(""Hour ceiling:"")
print(arrow.utcnow().floor('hour'))
print(""\nMinute ceiling:"")
print(arrow.utcnow().floor('minute'))
print(""\nSecond ceiling:"")
print(arrow.utcnow().floor('second'))
","import arrow

# create a new Arrow object
new_arrow = arrow.Arrow(arrow.now())

# create a new timeframe
new_timeframe = arrow.TimeFrame(new_arrow.floor, new_arrow.hour, new_arrow.minute)

# create a new arrow object
new_arrow = arrow.Arrow(arrow."
1323,Write a Python program to get the third side of right angled triangle from two given sides. ,"def pythagoras(opposite_side,adjacent_side,hypotenuse):
        if opposite_side == str(""x""):
            return (""Opposite = "" + str(((hypotenuse**2) - (adjacent_side**2))**0.5))
        elif adjacent_side == str(""x""):
            return (""Adjacent = "" + str(((hypotenuse**2) - (opposite_side**2))**0.5))
        elif hypotenuse == str(""x""):
            return (""Hypotenuse = "" + str(((opposite_side**2) + (adjacent_side**2))**0.5))
        else:
            return ""You know the answer!""
    
print(pythagoras(3,4,'x'))
print(pythagoras(3,'x',5))
print(pythagoras('x',4,5))
print(pythagoras(3,4,5))
","def get_triangle(a, b, c):
    if a == b == c:
        return a
    elif a == b or b == c or a == c:
        return b
    else:
        return get_triangle(a, b, c - 1) + get_triangle(a, b - 1, c - 1) + get_triangle(a - 1, b, c - 1) + get_triangle(a - 1, b -"
1324,Write a Python function to create the HTML string with tags around the word(s). ,"def add_tags(tag, word):
	return ""<%s>%s</%s>"" % (tag, word, tag)
print(add_tags('i', 'Python'))
print(add_tags('b', 'Python Tutorial'))
","def solution(word):
    return f'<p>{word}</p>'

print(solution('python'))

""""""

def solution(word):
    return f'<p>{word}</p>'

print(solution('python'))

""""""

def solution(word):
    return f'<p>{word}</p>'

print(solution('python'))

""""""

def solution(word):"
1325,Write a Python program to get the least common multiple (LCM) of two positive integers. ,"def lcm(x, y):
  if x > y:
      z = x
  else:
      z = y
  while(True):
      if((z % x == 0) and (z % y == 0)):
          lcm = z
          break
      z += 1
  return lcm
print(lcm(4, 6))
print(lcm(15, 17))
","def lcm(x, y):
    return (x * y) // gcd(x, y)

def gcd(x, y):
    while y:
        x, y = y, x % y
    return x

print(lcm(12, 24))

# Output: 24
# Explanation: The L.C.M. is the smallest positive integer that is evenly divisible by both 12 and 24.

# Input Format
# The first"
1326,"Write a Python program to count Uppercase, Lowercase, special character and numeric values in a given string. ","def count_chars(str):
     upper_ctr, lower_ctr, number_ctr, special_ctr = 0, 0, 0, 0
     for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          elif str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1
          elif str[i] >= '0' and str[i] <= '9': number_ctr += 1
          else: special_ctr += 1
     return upper_ctr, lower_ctr, number_ctr, special_ctr
           
str = ""@W3Resource.Com""
print(""Original Substrings:"",str)
u, l, n, s = count_chars(str)
print('\nUpper case characters: ',u)
print('Lower case characters: ',l)
print('Number case: ',n)
print('Special case characters: ',s)
","def count_upper(string):
    count = 0
    for i in string:
        if i.isupper():
            count += 1
    return count

def count_lower(string):
    count = 0
    for i in string:
        if i.islower():
            count += 1
    return count

def count_special(string):
    count = 0
    for i in string:
        if i.isdigit():"
1327,Write a Python program to find all the values in a list are greater than a specified number. ,"list1 = [220, 330, 500]
list2 = [12, 17, 21]
print(all(x >= 200 for x in list1))
print(all(x >= 25 for x in list2))
","def solution(lst, n):
    for i in lst:
        if i > n:
            print(i)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 10
solution(lst, n)

""""""

def solution(lst, n):
    for i in lst:
        if i > n:
            print(i)

lst = ["
1328,"Write a Python program to join two given list of lists of same length, element wise. ","def elementswise_join(l1, l2):
    result = [x + y for x, y in zip(l1, l2)]
    return result

nums1 = [[10,20], [30,40], [50,60], [30,20,80]]
nums2 = [[61], [12,14,15], [12,13,19,20], [12]]
print(""Original lists:"")
print(nums1)
print(nums2)
print(""\nJoin the said two lists element wise:"")
print(elementswise_join(nums1, nums2))

list1 = [['a','b'], ['b','c','d'], ['e', 'f']]
list2 = [['p','q'], ['p','s','t'], ['u','v','w']]
print(""\nOriginal lists:"")
print(list1)
print(list2)
print(""\nJoin the said two lists element wise:"")
print(elementswise_join(list1, list2))
","l1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
l2 = [[10, 11, 12], [13, 14, 15], [16, 17, 18]]

l3 = []
for i in range(len(l1)):
    for j in range(len(l1[i])):
        l3.append(l1[i][j])

l4 = []
for i in range(len"
1329,Write a NumPy program to find indices of elements equal to zero in a NumPy array. ,"import numpy as np
nums = np.array([1,0,2,0,3,0,4,5,6,7,8])
print(""Original array:"")
print(nums)
print(""Indices of elements equal to zero of the said array:"")
result = np.where(nums == 0)[0]
print(result)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

zero_indices = np.where(arr == 0)

print(zero_indices)

# Output:
# array([0, 1, 3, 4, 6, 7, 8, 9, 10])

# In[ ]:"
1330,Write a Python program to search a date from a given string using arrow module. ,"import arrow
print(""\nSearch a date from a string:"")
d1 = arrow.get('David was born in 11 June 2003', 'DD MMMM YYYY')
print(d1)
","import arrow

date = input(""Enter the date: "")

print(arrow.get(date))

""""""

import arrow

date = input(""Enter the date: "")

print(arrow.get(date))"
1331,Write a Pandas program to join (left join) the two dataframes using keys from left dataframe only. ,"import pandas as pd
data1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],
                     'key2': ['K0', 'K1', 'K0', 'K1'],
                     'P': ['P0', 'P1', 'P2', 'P3'],
                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) 
data2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],
                      'key2': ['K0', 'K0', 'K0', 'K0'],
                      'R': ['R0', 'R1', 'R2', 'R3'],
                      'S': ['S0', 'S1', 'S2', 'S3']})
print(""Original DataFrames:"")
print(data1)
print(""--------------------"")
print(data2)
print(""\nMerged Data (keys from data1):"")
merged_data = pd.merge(data1, data2, how='left', on=['key1', 'key2'])
print(merged_data)
print(""\nMerged Data (keys from data2):"")
merged_data = pd.merge(data2, data1, how='left', on=['key1', 'key2'])
print(merged_data)
","import pandas as pd

left = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})
right = pd.DataFrame({'c': [7, 8, 9], 'd': [10, 11, 12]})

left.join(right, on='a')

# OUTPUT:
# a   b   c   d
# 1   1   4   7"
1332,Write a Python program to sort a list of elements using Heap sort. ,"def heap_data(nums, index, heap_size):
    largest_num = index
    left_index = 2 * index + 1
    right_index = 2 * index + 2
    if left_index < heap_size and nums[left_index] > nums[largest_num]:
        largest_num = left_index

    if right_index < heap_size and nums[right_index] > nums[largest_num]:
        largest_num = right_index
    if largest_num != index:
        nums[largest_num], nums[index] = nums[index], nums[largest_num]
        heap_data(nums, largest_num, heap_size)
def heap_sort(nums):
    n = len(nums)
    for i in range(n // 2 - 1, -1, -1):
        heap_data(nums, i, n)
    for i in range(n - 1, 0, -1):
        nums[0], nums[i] = nums[i], nums[0]
        heap_data(nums, 0, i)
    return nums
user_input = input(""Input numbers separated by a comma:\n"").strip()
nums = [int(item) for item in user_input.split(',')]
heap_sort(nums)
print(nums)
","def heapSort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(heapSort(arr))

""""""

def heapSort(arr):"
1333,"Write a Python program to find the maximum, minimum aggregation pair in given list of integers. ","from itertools import combinations 
def max_aggregate(l_data):
    max_pair = max(combinations(l_data, 2), key = lambda pair: pair[0] + pair[1])
    min_pair = min(combinations(l_data, 2), key = lambda pair: pair[0] + pair[1])
    return max_pair,min_pair
nums = [1,3,4,5,4,7,9,11,10,9]
print(""Original list:"")
print(nums)
result = max_aggregate(nums)
print(""\nMaximum aggregation pair of the said list of tuple pair:"")
print(result[0])
print(""\nMinimum aggregation pair of the said list of tuple pair:"")
print(result[1])
","def max_aggregation_pair(arr):
    max_aggregation_pair = arr[0]
    for i in range(1, len(arr)):
        if arr[i] > max_aggregation_pair:
            max_aggregation_pair = arr[i]
    return max_aggregation_pair

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_aggregation_pair("
1334,Write a Pandas program to split the following dataset using group by on 'salesman_id' and find the first order date for each group. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3005,3001,3002,3009,3005,3007,3002,3004,3009,3008,3003,3002],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5004,5003,5002,5004,5001]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nGroupby to find first order date for each group(salesman_id):"")
result = df.groupby('salesman_id')['ord_date'].min()
print(result)
","salesman_id = salesman_id.groupby(['salesman_id'])['salesman_id'].apply(lambda x: x.sort_values(ascending=False).head(1))

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

#"
1335,Write a Python program to create the largest possible number using the elements of a given list of positive integers. ,"def create_largest_number(lst):
    if all(val == 0 for val in lst):
        return '0'
    result = ''.join(sorted((str(val) for val in lst), reverse=True,
                      key=lambda i: i*( len(str(max(lst))) * 2 // len(i))))
    return result
nums = [3, 40, 41, 43, 74, 9]
print(""Original list:"")
print(nums)
print(""Largest possible number using the elements of the said list of positive integers:"")
print(create_largest_number(nums))

nums = [10, 40, 20, 30, 50, 60]
print(""\nOriginal list:"")
print(nums)
print(""Largest possible number using the elements of the said list of positive integers:"")
print(create_largest_number(nums))
nums = [8, 4, 2, 9, 5, 6, 1, 0]
print(""\nOriginal list:"")
print(nums)
print(""Largest possible number using the elements of the said list of positive integers:"")
print(create_largest_number(nums))
","def largest_possible_number(nums):
    max_num = 0
    for num in nums:
        if num > max_num:
            max_num = num
    return max_num

print(largest_possible_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def largest_possible_number(nums):
    max_num = 0
    for"
1336,Write a NumPy program to get the index of a maximum element in a NumPy array along one axis. ,"import numpy as np    
a = np.array([[1,2,3],[4,3,1]])
print(""Original array:"")
print(a)
i,j = np.unravel_index(a.argmax(), a.shape)
print(""Index of a maximum element in a numpy array along one axis:"")
print(a[i,j])
","import numpy as np

a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(a.argmax(axis=0))

# Output:
# [2 3 4]

# Explanation:
# The maximum element along axis 0 is at index 2.
# The maximum element along axis 1 is at index 3.
# The maximum element along axis 2"
1337,"Write a Python program to create a localized, humanized representation of a relative difference in time using arrow module. ","import arrow
print(""Current datetime:"")
print(arrow.utcnow())
earlier = arrow.utcnow().shift(hours=-4)
print(earlier.humanize())
later = earlier.shift(hours=3)
print(later.humanize(earlier))
","import arrow

def time_difference(time1, time2):
    time1 = arrow.get(time1)
    time2 = arrow.get(time2)
    diff = time1 - time2
    return diff.humanize()

print(time_difference(""2021-05-01"", ""2021-05-02""))

""""""

# Solution:

from datetime import datetime

def time_difference("
1338,Write a Python program to get the difference between the two lists. ,"list1 = [1, 3, 5, 7, 9]
list2=[1, 2, 4, 6, 7, 8]
diff_list1_list2 = list(set(list1) - set(list2))
diff_list2_list1 = list(set(list2) - set(list1))
total_diff = diff_list1_list2 + diff_list2_list1
print(total_diff)
","def get_diff(list1, list2):
    diff = []
    for i in range(len(list1)):
        diff.append(list1[i] - list2[i])
    return diff

print(get_diff([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))

""""""

def get_diff(list1, list2):
    diff = []
    for i in range(len(list1)):"
1339,"Write a NumPy program to create an array of 10 zeros,10 ones, 10 fives. ","import numpy as np
array=np.zeros(10)
print(""An array of 10 zeros:"")
print(array)
array=np.ones(10)
print(""An array of 10 ones:"")
print(array)
array=np.ones(10)*5
print(""An array of 10 fives:"")
print(array)
","import numpy as np

arr = np.zeros(10)
arr = np.ones(10)
arr = np.full(10, 5)

arr = np.arange(10)
arr = np.arange(10, 20)
arr = np.arange(10, 20, 2)
arr = np.arange(10, 20, 2, dtype=np.int64)
arr = np.arange(10, 20"
1340,Write a Python program to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.(default value of number=2). ,"def sum_difference(n=2):
    sum_of_squares = 0
    square_of_sum = 0
    for num in range(1, n+1):
        sum_of_squares += num * num
        square_of_sum += num

    square_of_sum = square_of_sum ** 2

    return square_of_sum - sum_of_squares


print(sum_difference(12))
","def sq_sum(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**2
    return sum

print(sq_sum(5))

""""""

# Solution

def sq_sum(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**2
    return sum"
1341,"Write a Pandas program to create a stacked histograms plot with more bins of opening, closing, high, low stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Open','Close','High','Low']]
plt.figure(figsize=(30,30))
df2.hist();
plt.suptitle('Opening/Closing/High/Low stock prices of Alphabet Inc., From 01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])
df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')

df['Open'] = df['Open'].astype"
1342,Write a Python program to read a string and interpreting the string as an array of machine values. ,"from array import array
import binascii
array1 = array('i', [7, 8, 9, 10])
print('array1:', array1)
as_bytes = array1.tobytes()
print('Bytes:', binascii.hexlify(as_bytes))
array2 = array('i')
array2.frombytes(as_bytes)
print('array2:', array2)
","def array_to_string(arr):
    return ''.join(str(x) for x in arr)

def string_to_array(s):
    return [int(x) for x in s.split()]

def main():
    s = input(""Enter a string: "")
    arr = string_to_array(s)
    print(array_to_string(arr))

if __name__ == ""__main__"":
    main"
1343,"Create a 2-dimensional array of size 2 x 3, composed of 4-byte integer elements. Write a NumPy program to find the number of occurrences of a sequence in the said array. ","import numpy as np
np_array = np.array([[1, 2, 3], [2, 1, 2]], np.int32)
print(""Original Numpy array:"")
print(np_array)
print(""Type: "",type(np_array))
print(""Sequence: 1,2"",)
result = repr(np_array).count(""1, 2"")
print(""Number of occurrences of the said sequence:"",result)
","import numpy as np

arr = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]])

print(arr.shape"
1344,Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and find a specific MSHA ID. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')    
df[df[""MSHA ID""]==102901].head()
","import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')

# print(df)

# print(df.head())

# print(df.columns)

# print(df.columns.values)

# print(df.columns.values[0])

# print(df.columns.values[1])

# print("
1345,Write a Python program to sort a list of elements using the bubble sort algorithm. ,"def bubbleSort(nlist):
    for passnum in range(len(nlist)-1,0,-1):
        for i in range(passnum):
            if nlist[i]>nlist[i+1]:
                temp = nlist[i]
                nlist[i] = nlist[i+1]
                nlist[i+1] = temp

nlist = [14,46,43,27,57,41,45,21,70]
bubbleSort(nlist)
print(nlist)
","def bubbleSort(arr):
    for i in range(len(arr)):
        for j in range(len(arr)-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(bubbleSort(arr))

""""""

""""""

def bubbleSort(arr"
1346,"Write a NumPy program to get the floor, ceiling and truncated values of the elements of a numpy array. ","import numpy as np
x = np.array([-1.6, -1.5, -0.3, 0.1, 1.4, 1.8, 2.0])
print(""Original array:"")
print(x)
print(""Floor values of the above array elements:"")
print(np.floor(x))
print(""Ceil values of the above array elements:"")
print(np.ceil(x))
print(""Truncated values of the above array elements:"")
print(np.trunc(x))
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(a.floor())
print(a.ceiling())
print(a.trunc())

# Output:
# [1 2 3 4 5 6 7 8 9]
# [1 2 3 4]
# [1 2 3 4 5 6 7 8 9]
# [1 2 3 4]"
1347,Write a Python program to check whether a JSON string contains complex object or not. ,"import json
def is_complex_num(objct):
    if '__complex__' in objct:
        return complex(objct['real'], objct['img'])
    return objct

complex_object =json.loads('{""__complex__"": true, ""real"": 4, ""img"": 5}', object_hook = is_complex_num)
simple_object =json.loads('{""real"": 4, ""img"": 3}', object_hook = is_complex_num)
print(""Complex_object: "",complex_object)
print(""Without complex object: "",simple_object)
","import json

def is_complex(json_string):
    try:
        json.loads(json_string)
    except ValueError:
        return False
    else:
        return True

print(is_complex(""{'a': 1, 'b': 2}""))
print(is_complex(""[1, 2, 3]""))
print(is_complex(""[1, 2, 3, 4]""))
print(is_complex(""[1, 2, 3,"
1348,Write a Python program to remove the characters which have odd index values of a given string. ,"def odd_values_string(str):
  result = """" 
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result

print(odd_values_string('abcdef'))
print(odd_values_string('python'))
","import string

def odd_index(string):
    odd_index = []
    for i in range(len(string)):
        if string[i] % 2!= 0:
            odd_index.append(string[i])
    return odd_index

print(odd_index(""abcd""))

""""""

def odd_index(string):
    odd_index = []
    for i in range(len(string)):
        if string[i]"
1349,"Write a Python program to configure the rounding to round to the nearest, with ties going to the nearest even integer. Use decimal.ROUND_HALF_EVEN","import decimal
print(""Configure the rounding to round to the nearest, with ties going to the nearest even integer:"")
decimal.getcontext().prec = 1
decimal.getcontext().rounding = decimal.ROUND_HALF_EVEN
print(decimal.Decimal(10) / decimal.Decimal(4))
","import decimal

def rounding(x):
    return decimal.ROUND_HALF_EVEN * round(x, -1) + decimal.ROUND_HALF_EVEN

print(rounding(1.5))
print(rounding(2.5))
print(rounding(3.5))
print(rounding(4.5))
print(rounding(5.5"
1350,Write a NumPy program to generate a generic 2D Gaussian-like array. ,"import numpy as np
x, y = np.meshgrid(np.linspace(-1,1,10), np.linspace(-1,1,10))
d = np.sqrt(x*x+y*y)
sigma, mu = 1.0, 0.0
g = np.exp(-( (d-mu)**2 / ( 2.0 * sigma**2 ) ) )
print(""2D Gaussian-like array:"")
print(g)
","import numpy as np

# Generate a 2D Gaussian-like array
x = np.random.randn(100, 100)

# Generate a 2D Gaussian-like array
y = np.random.randn(100, 100)

# Generate a 2D Gaussian-like array
z = np.random.randn(100, 100)

# Generate a 2D Gaussian-like array
w = np.random.randn(100"
1351,Write a Python program to calculate the distance between London and New York city. ,"from geopy import distance
london = (""51.5074 N, 0.1278 W"")
newyork = (""40.7128 N, 74.0060 W"")
print(""Distance between London and New York city (in km):"")
print(distance.distance(london, newyork).km,"" kms"")
","def distance(london, newyork):
    return ((london[0] - newyork[0])**2 + (london[1] - newyork[1])**2)**0.5

london = [1, 2]
newyork = [3, 4]

print(distance(london, newyork))

""""""

# Solution:

def distance(london, newyork):
    return ((london[0] -"
1352,Write a NumPy program to create a function cube which cubes all the elements of an array. ,"import numpy as np
def cube(e):
    it = np.nditer([e, None])
    for a, b in it:
        b[...] = a*a*a
    return it.operands[1]
print(cube([1,2,3]))
","def cube(arr):
    return arr*arr*arr

arr = [1,2,3,4,5]
print(cube(arr))

""""""

# Solution

def cube(arr):
    return arr*arr*arr

arr = [1,2,3,4,5]
print(cube(arr))

# Solution

def cube(arr):
    return arr*arr*arr

arr = [1,2,3"
1353,Write a Python program to reverse words in a string. ,"def reverse_string_words(text):
    for line in text.split('\n'):
        return(' '.join(line.split()[::-1]))
print(reverse_string_words(""The quick brown fox jumps over the lazy dog.""))
print(reverse_string_words(""Python Exercises.""))
","def reverse_words(s):
    return s[::-1]

print(reverse_words(""hello world""))

""""""

def reverse_words(s):
    return s[::-1]

print(reverse_words(""hello world""))"
1354,Write a Python program to find the specified number of maximum values in a given dictionary. ,"def test(dictt, N):
    result = sorted(dictt, key=dictt.get, reverse=True)[:N]
    return result 
dictt = {'a':5, 'b':14, 'c': 32, 'd':35, 'e':24, 'f': 100, 'g':57, 'h':8, 'i': 100}
print(""\nOriginal Dictionary:"")
print(dictt)
N = 1
print(""\n"",N,""maximum value(s) in the said dictionary:"")
print(test(dictt, N))
N = 2
print(""\n"",N,""maximum value(s) in the said dictionary:"")
print(test(dictt, N))
N = 5
print(""\n"",N,""maximum value(s) in the said dictionary:"")
print(test(dictt, N))
","def max_values(d):
    max_values = {}
    for key, value in d.items():
        if value not in max_values:
            max_values[value] = key
        else:
            max_values[value] = key
    return max_values

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
print(max_values(d))

""""""

"""""""
1355,"Write a Python program to iterate over a root level path and print all its sub-directories and files, also loop over specified dirs and files. ","import os
print('Iterate over a root level path:')
path = '/tmp/'
for root, dirs, files in os.walk(path):
 print(root)
","import os

def iterate_dirs_files(dir_path):
    for root, dirs, files in os.walk(dir_path):
        for file in files:
            print(os.path.join(root, file))
        for directory in dirs:
            print(os.path.join(root, directory))

if __name__ == '__main__':
    dir_path"
1356,Write a Python code to remove all characters except a specified character in a given string. ,"def remove_characters(str1,c):
    return ''.join([el for el in str1 if el == c])
text = ""Python Exercises""
print(""Original string"")
print(text)
except_char = ""P""
print(""Remove all characters except"",except_char,""in the said string:"")
print(remove_characters(text,except_char))
text = ""google""
print(""\nOriginal string"")
print(text)
except_char = ""g""
print(""Remove all characters except"",except_char,""in the said string:"")
print(remove_characters(text,except_char))
text = ""exercises""
print(""\nOriginal string"")
print(text)
except_char = ""e""
print(""Remove all characters except"",except_char,""in the said string:"")
print(remove_characters(text,except_char))
","def remove_char(string, char):
    return string.replace(char, """")

print(remove_char(""Python is fun"", ""d""))

""""""

def remove_char(string, char):
    return string.replace(char, """")

print(remove_char(""Python is fun"", ""d""))"
1357,Write a Pandas program to create a Pivot table and find number of survivors and average rate grouped by gender and class. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table(index='sex', columns='class', aggfunc={'survived':sum, 'fare':'mean'})
print(result)
","import pandas as pd

df = pd.read_csv(""../data/class_survival.csv"")

df.groupby(['gender', 'class']).survived.sum().unstack().plot(kind='bar')

# %%"
1358,Write a Python program to find all keys in the provided dictionary that have the given value. ,"def test(dict, val):
  return list(key for key, value in dict.items() if value == val)

students = {
  'Theodore': 19,
  'Roxanne': 20,
  'Mathew': 21,
  'Betty': 20
}

print(""\nOriginal dictionary elements:"")
print(students)
print(""\nFind all keys in the said dictionary that have the specified value:"")
print(test(students, 20))
","python solution.py

""""""

# Solution 1

def find_keys_with_value(d, value):
    """"""
    :param d: dictionary
    :param value: value to be searched
    :return: list of keys with value
    """"""
    return [key for key, value in d.items() if value == value and key!= value]

# Solution 2

def find_keys_with_value(d, value):
    """"""
    :"
1359,Write a NumPy program to find the closest value (to a given scalar) in an array. ,"import numpy as np
x = np.arange(100)
print(""Original array:"")
print(x)
a = np.random.uniform(0,100)
print(""Value to compare:"")
print(a)
index = (np.abs(x-a)).argmin()
print(x[index])
","import numpy as np

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(np.argmin(x))

# Output:
# 0
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9
# 10

# Expected Output:
# 0
# 1
# 2
# 3
# 4
#"
1360,Write a Pandas program to split a string of a column of a given DataFrame into multiple columns. ,"import pandas as pd
df = pd.DataFrame({
    'name': ['Alberto  Franco','Gino Ann Mcneill','Ryan  Parkes', 'Eesha Artur Hinton', 'Syed  Wharton'],
    'date_of_birth ': ['17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [18.5, 21.2, 22.5, 22, 23]
})
print(""Original DataFrame:"")
print(df)
df[[""first"", ""middle"", ""last""]] = df[""name""].str.split("" "", expand = True)
print(""\nNew DataFrame:"")
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

print(df)

# Solution"
1361,Write a Pandas program to create a Pivot table with multiple indexes from a given excel sheet (Salesdata.xlsx). ,"import pandas as pd
df = pd.read_excel('E:\SaleData.xlsx')
print(df)
pd.pivot_table(df,index=[""Region"",""SalesMan""])
","import pandas as pd

# Read the data from Salesdata.xlsx
df = pd.read_excel('Salesdata.xlsx')

# Create a Pivot table with multiple columns
pivot = df.pivot_table(index='Customer', columns='Month', values='Sales')

# Print the result
print(pivot)

# Create a Pivot table with multiple rows
pivot = df."
1362,"Write a Python program which iterates the integers from 1 to a given number and print ""Fizz"" for multiples of three, print ""Buzz"" for multiples of five, print ""FizzBuzz"" for multiples of both three and five using itertools module. ","#Source:https://bit.ly/30PS62m
import itertools as it
 
def fizz_buzz(n):
    fizzes = it.cycle([""""] * 2 + [""Fizz""])
    buzzes = it.cycle([""""] * 4 + [""Buzz""])
    fizzes_buzzes = (fizz + buzz for fizz, buzz in zip(fizzes, buzzes))
    result = (word or n for word, n in zip(fizzes_buzzes, it.count(1)))
    for i in it.islice(result, 100):
        print(i)

n = 50
fizz_buzz(n)
","def fizzbuzz(n):
    for i in range(1, n+1):
        if i % 3 == 0 and i % 5 == 0:
            print(""FizzBuzz"")
        elif i % 3 == 0:
            print(""Fizz"")
        elif i % 5 == 0"
1363,Write a Python program to create a shallow copy of a given dictionary. Use copy.copy,"import copy
nums_x = {""a"":1, ""b"":2, 'cc':{""c"":3}}
print(""Original dictionary: "", nums_x)
nums_y = copy.copy(nums_x)
print(""\nCopy of the said list:"")
print(nums_y)
print(""\nChange the value of an element of the original dictionary:"")
nums_x[""cc""][""c""] = 10
print(nums_x)
print(""\nSecond dictionary:"")
print(nums_y)

nums = {""x"":1, ""y"":2, 'zz':{""z"":3}}
nums_copy = copy.copy(nums)
print(""\nOriginal dictionary :"")
print(nums)
print(""\nCopy of the said list:"")
print(nums_copy)
print(""\nChange the value of an element of the original dictionary:"")
nums[""zz""][""z""] = 10
print(""\nFirst dictionary:"")
print(nums)
print(""\nSecond dictionary (copy):"")
print(nums_copy)
","def shallow_copy(d):
    new_d = {}
    for key in d:
        new_d[key] = d[key]
    return new_d

d = {'a': 1, 'b': 2, 'c': 3}
print(shallow_copy(d))

""""""

# Solution

def shallow_copy(d):
    new_d = {}
    for key in d:
        new_d[key] = d"
1364,Write a Python program access the index of a list. ,"nums = [5, 15, 35, 8, 98]
for num_index, num_val in enumerate(nums):
    print(num_index, num_val)
	","def index(list):
    for i in range(len(list)):
        print(i)

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
index(list)

""""""

def index(list):
    for i in range(len(list)):
        print(i)

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
index(list)"
1365,"Write a Python program to remove sublists from a given list of lists, which contains an element outside a given range. ","#Source bit.ly/33MAeHe
def remove_list_range(input_list, left_range, rigth_range):
   result = [i for i in input_list if (min(i)>=left_range and max(i)<=rigth_range)]
   return result
list1 = [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]]
left_range = 13
rigth_range = 17
print(""Original list:"")
print(list1)
print(""\nAfter removing sublists from a given list of lists, which contains an element outside the given range:"")
print(remove_list_range(list1, left_range, rigth_range))
","def remove_sublist(lst, start, end):
    for i in range(start, end):
        lst.remove(lst[i])
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(remove_sublist(lst, 0, 9))

""""""

def remove_sublist(lst, start, end):
    for"
1366,"Write a Python program to create a string representation of the Arrow object, formatted according to a format string. ","import arrow
print(""Current datetime:"")
print(arrow.utcnow())
print(""\nYYYY-MM-DD HH:mm:ss ZZ:"")
print(arrow.utcnow().format('YYYY-MM-DD HH:mm:ss ZZ'))
print(""\nDD-MM-YYYY HH:mm:ss ZZ:"")
print(arrow.utcnow().format('DD-MM-YYYY HH:mm:ss ZZ'))
print(arrow.utcnow().format('\nMMMM DD, YYYY'))
print(arrow.utcnow().format())
",">>> import arrow
>>> arrow.Arrow(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,"
1367,Write a Pandas program to create a Pivot table and find survival rate by gender. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result=df.groupby('sex')[['survived']].mean()
print(result)
","import pandas as pd
import numpy as np

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pima-indians-diabetes.csv')

# Create a pivot table
pivot = df.pivot_table(index='Outcome', columns='Sex', values='Age', aggfunc='mean')

# Find the survival rate by gender
pivot['Survived'] = pivot['Surv"
1368,Write a Python program to calculate surface volume and area of a sphere. ,"pi=22/7
radian = float(input('Radius of sphere: '))
sur_area = 4 * pi * radian **2
volume = (4/3) * (pi * radian ** 3)
print(""Surface Area is: "", sur_area)
print(""Volume is: "", volume)
","import math

radius = float(input(""Enter the radius of the sphere: ""))

volume = math.pi * (radius ** 2)
area = math.pi * (radius ** 2) * 3.14

print(""The volume of the sphere is:"", volume)
print(""The area of the sphere is:"", area)"
1369,Write a Python program to convert all the characters in uppercase and lowercase and eliminate duplicate letters from a given sequence. Use map() function. ,"def change_cases(s):
  return str(s).upper(), str(s).lower()
 
chrars = {'a', 'b', 'E', 'f', 'a', 'i', 'o', 'U', 'a'}
print(""Original Characters:\n"",chrars)
 
result = map(change_cases, chrars)
print(""\nAfter converting above characters in upper and lower cases\nand eliminating duplicate letters:"")
print(set(result))
","def convert_uppercase(string):
    return string.upper()

def convert_lowercase(string):
    return string.lower()

def remove_duplicate_letters(string):
    return ''.join(sorted(set(string)))

def main():
    string = input(""Enter the string: "")
    print(convert_uppercase(string))
    print(convert_"
1370,Write a Python program to create a deque from an existing iterable object. ,"import collections
even_nums = (2, 4, 6)
print(""Original tuple:"")
print(even_nums)
print(type(even_nums))
even_nums_deque = collections.deque(even_nums)
print(""\nOriginal deque:"")
print(even_nums_deque)
even_nums_deque.append(8)
even_nums_deque.append(10)
even_nums_deque.append(12)
even_nums_deque.appendleft(2)
print(""New deque from an existing iterable object:"")
print(even_nums_deque)
print(type(even_nums_deque))
","import collections

class Deque:
    def __init__(self):
        self.items = collections.deque()

    def add_front(self, item):
        self.items.appendleft(item)

    def add_rear(self, item):
        self.items.append(item)

    def remove_front(self):
        return self.items.pop()

    def remove_rear(self):
        return self.items.popleft()"
1371,Write a Pandas program to find the index of a substring of DataFrame with beginning and end position. ,"import pandas as pd
df = pd.DataFrame({
    'name_code': ['c0001','1000c','b00c2', 'b2c02', 'c2222'],
    'date_of_birth ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'age': [18.5, 21.2, 22.5, 22, 23]
})
print(""Original DataFrame:"")
print(df)
print(""\nIndex of a substring in a specified column of a dataframe:"")
df['Index'] = list(map(lambda x: x.find('c', 0, 5), df['name_code']))
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['John', 'Jane', 'Jack', 'Jill', 'Jasmine'],
                   'Age': [30, 32, 33, 34, 35],
                   'Score': [85, 90, 95, 100, 90]})

# Find the index of the substring 'Jack' in the DataFrame
print(df.loc[df['Name'] == 'Jack', 'Score"
1372,Write a Pandas program to check whether only space is present in a given column of a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF ', '  ', 'abcd', ' '],
    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})

print(""Original DataFrame:"")
print(df)
print(""\nIs space is present?"")
df['company_code_is_title'] = list(map(lambda x: x.isspace(), df['company_code']))
print(df)

","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

print(df.isnull().sum())

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})"
1373,"Write a NumPy program to calculate the difference between neighboring elements, element-wise of a given array. ","import numpy as np
x = np.array([1, 3, 5, 7, 0])
print(""Original array: "")
print(x)
print(""Difference between neighboring elements, element-wise of the said array."")
print(np.diff(x))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

b = np.array([[1, 2, 3], [4, 5, 6]])
print(b)

print(np.diff(a))

print(np.diff(b))

# Output:
[[1 2]
 [3 4]]

# Output:
[[1 2]"
1374,Write a Python program to count characters at same position in a given string (lower and uppercase characters) as in English alphabet. ,"def count_char_position(str1): 
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or 
            (i == ord(str1[i]) - ord('a'))): 
            count_chars += 1
    return count_chars 
  
str1 = input(""Input a string: "")
print(""Number of characters of the said string at same position as in English alphabet:"")
print(count_char_position(str1))
","def count_chars(str,ch):
    count = 0
    for i in range(len(str)):
        if str[i] == ch:
            count += 1
    return count

print(count_chars(""python"", ""P""))

""""""

def count_chars(str,ch):
    count = 0
    for i in range(len(str)):
        if str[i] =="
1375,Write a NumPy program to multiply the values of two given vectors. ,"import numpy as np
x = np.array([1, 8, 3, 5])
print(""Vector-1"")
print(x)
y= np.random.randint(0, 11, 4)
print(""Vector-2"")
print(y)
result = x * y
print(""Multiply the values of two said vectors:"")
print(result)
","a = np.array([1, 2, 3, 4])
b = np.array([5, 6, 7, 8])

c = a * b
print(c)

Solution:

a = np.array([1, 2, 3, 4])
b = np.array([5, 6, 7, 8])

c = a * b
print(c)

Solution:

a = np.array([1, 2, 3, 4])
b = np."
1376,Write a Python program to remove duplicate words from a given string use collections module. ,"from collections import OrderedDict
text_str = ""Python Exercises Practice Solution Exercises""
print(""Original String:"")
print(text_str)
print(""\nAfter removing duplicate words from the said string:"")
result = ' '.join(OrderedDict((w,w) for w in text_str.split()).keys())
print(result)
","def remove_duplicate_words(string):
    # your code goes here
    return string.replace(string[0], '').replace(string[-1], '').replace(string[0], '').replace(string[-1], '')

# driver code
string = ""This is a string""
print(remove_duplicate_words(string))

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)"
1377,Write a NumPy program totest a given array element-wise for finiteness (not infinity or not a Number). ,"import numpy as np
a = np.array([1, 0, np.nan, np.inf])
print(""Original array"")
print(a)
print(""Test a given array element-wise for finiteness :"")
print(np.isfinite(a))
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a)

print(a.sum())

print(a.min())

print(a.max())

print(a.mean())

print(a.std())

print(a.var())

print(a.sum(axis=0))

print"
1378,Write a NumPy program to convert a NumPy array of float values to a NumPy array of integer values. ,"import numpy as np
x= np.array([[12.0, 12.51], [2.34, 7.98], [25.23, 36.50]])
print(""Original array elements:"")
print(x)
print(""Convert float values to integer values:"")
print(x.astype(int))
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(a)

# convert the array to an integer array
a = np.array(a, dtype=int)
print(a)

# convert the array to an integer array
a = np.array(a, dtype=np.int64)
print(a)

# convert the"
1379,Write a Python program to find the second most repeated word in a given string. ,"def word_count(str):
    counts = dict()
    words = str.split()

    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1

    counts_x = sorted(counts.items(), key=lambda kv: kv[1])
    #print(counts_x)
    return counts_x[-2]
 
print(word_count(""Both of these issues are fixed by postponing the evaluation of annotations. Instead of compiling code which executes expressions in annotations at their definition time, the compiler stores the annotation in a string form equivalent to the AST of the expression in question. If needed, annotations can be resolved at runtime using typing.get_type_hints(). In the common case where this is not required, the annotations are cheaper to store (since short strings are interned by the interpreter) and make startup time faster.""))
","def second_most_repeated_word(string):
    string = string.lower()
    string = string.replace("" "", """")
    string = string.replace(""."", """")
    string = string.replace("","", """")
    string = string.replace(""!"", """")
    string = string.replace(""?"", """")
    string = string.replace("";"", """")
    string = string.replace(""!"", """")
    string = string.replace(""."", """")"
1380,"Write a Python program to find the specified number of largest products from two given list, multiplying an element from each list. ","def top_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result
nums1 = [1, 2, 3, 4, 5, 6]
nums2 = [3, 6, 8, 9, 10, 6]
print(""Original lists:"")
print(nums1)
print(nums2,""\n"")
N = 3
print(N,""Number of largest products from the said two lists:"")
print(top_product(nums1, nums2, N))
N = 4
print(N,""Number of largest products from the said two lists:"")
print(top_product(nums1, nums2, N))
","def solution(a, b):
    answer = []
    for i in range(len(a)):
        for j in range(len(b)):
            answer.append(a[i] * b[j])
    return answer

print(solution([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))

""""""

def solution(a, b):
    answer = []"
1381,Write a Pandas program to extract only non alphanumeric characters from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001#','[emailprotected]^2','$c0003', 'c0003', '&c0004'],
    'year': ['year 1800','year 1700','year 2300', 'year 1900', 'year 2200']
    })
print(""Original DataFrame:"")
print(df)
def find_nonalpha(text):
    result = re.findall(""[^A-Za-z0-9 ]"",text)
    return result
df['nonalpha']=df['company_code'].apply(lambda x: find_nonalpha(x))
print(""\Extracting only non alphanumeric characters from company_code:"")
print(df)
","import pandas as pd

df = pd.read_csv(""C:/Users/DELL/Downloads/pandas_data_science/pandas_data_science/exercises/data/election_results.csv"")

df.columns = df.columns.str.lower()

df.dropna(subset=['candidate_name'], inplace=True)

df.dropna(subset=['"
1382,Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and draw a bar plot where each bar will represent one of the top 10 production. ,"import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
df = pd.read_excel('E:\coalpublic2013.xlsx')
sorted_by_production = df.sort_values(['Production'], ascending=False).head(10)
sorted_by_production['Production'].head(10).plot(kind=""barh"")
plt.show()
","import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')

df.plot(kind='bar', figsize=(10,10))

# Create a bar plot with the top 10 production

df.plot(kind='bar', figsize=(10,10), rot=0)

# Create a bar plot with the top 10 production"
1383,Write a Python program to chose specified number of colours from three different colours and generate all the combinations with repetitions. ,"from itertools import combinations_with_replacement
 
def combinations_colors(l, n):
    return combinations_with_replacement(l,n)
l = [""Red"",""Green"",""Blue""]
print(""Original List: "",l)
n=1
print(""\nn = 1"")
print(list(combinations_colors(l, n)))
n=2
print(""\nn = 2"")
print(list(combinations_colors(l, n)))
n=3
print(""\nn = 3"")
print(list(combinations_colors(l, n)))
","def combinations(n, k):
    if n == k:
        print(n, end="" "")
        return
    else:
        for i in range(1, n + 1):
            combinations(n - i, k)
            print(i, end="" "")

combinations(3, 3)

""""""

def combinations(n, k):
    if n == k:
        print(n, end="" "")"
1384,"Write a Python program to add two given lists of different lengths, start from left. ","def elementswise_left_join(l1, l2):
    f_len = len(l1)-(len(l2) - 1)
    for i in range(0, len(l2), 1):
        if f_len - i >= len(l1):
            break
        else:
            l1[i] = l1[i] + l2[i]
    return l1

nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [3, 3, -1, 7]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""\nAdd said two lists from left:"")
print(elementswise_left_join(nums1,nums2))

nums3 = [1, 2, 3, 4, 5, 6]
nums4 = [2, 4, -3]
print(""\nOriginal lists:"")
print(nums3)
print(nums4)
print(""\nAdd said two lists from left:"")
print(elementswise_left_join(nums3,nums4))
","def add_two_lists(list1, list2):
    result = []
    for i in range(len(list1)):
        result.append(list1[i] + list2[i])
    return result

print(add_two_lists([1, 2, 3], [4, 5, 6]))

""""""

def add_two_lists(list1, list2):
    result = []
    for i in range(len(list1"
1385,Write a Pandas program to draw a horizontal and cumulative histograms plot of opening stock prices of Alphabet Inc. between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-4-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Open']]
plt.figure(figsize=(15,15))
df2.plot.hist(orientation='horizontal', cumulative=True)
plt.suptitle('Opening stock prices of Alphabet Inc.,\n From 01-04-2020 to 30-04-2020', fontsize=12, color='black')
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

# Read the data
df = pd.read_csv('Alphabet Inc_Stock_Price_Data.csv')

# Create a new dataframe with only the columns we want
df_new = df[['Date', 'Open', 'High', 'Low', 'Close']]

# Create a new dataframe with only the columns we want
df_new"
1386,Write a Python program to generate a 3*4*6 3D array whose each element is *. ,"array = [[ ['*' for col in range(6)] for col in range(4)] for row in range(3)]
print(array)
","import numpy as np

def generate_3d_array(n):
    """"""
    Generate a 3D array of n elements.
    """"""
    return np.array([[np.random.randint(0, 10) for _ in range(3)] for _ in range(n)])

def main():
    """"""
    Run the program.
    """"""
    n = int(input(""Enter the number of elements: ""))
    print(gener"
1387,Write a Python program to group the elements of a given list based on the given function. ,"from collections import defaultdict
from math import floor
def test(lst, fn):
  d = defaultdict(list)
  for el in lst:
    d[fn(el)].append(el)
  return dict(d)
nums = [7,23, 3.2, 3.3, 8.4]
print(""Original list & function:"")
print(nums,"" Function name: floor:"")
print(""Group the elements of the said list based on the given function:"")
print(test(nums, floor))
print(""\n"")
print(""Original list & function:"")
colors = ['Red', 'Green', 'Black', 'White', 'Pink']
print(colors,"" Function name: len:"")
print(""Group the elements of the said list based on the given function:"")
print(test(colors, len))
","def group(lst, fn):
    return list(map(fn, lst))

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
fn = lambda x: x**2
print(group(lst, fn))

""""""

# Solution 1

def group(lst, fn):
    return list(map(fn, lst))

lst = [1, 2, 3, 4,"
1388,Write a Python program to get unique values from a list. ,"my_list = [10, 20, 30, 40, 20, 50, 60, 40]
print(""Original List : "",my_list)
my_set = set(my_list)
my_new_list = list(my_set)
print(""List of unique numbers : "",my_new_list)
","def unique_values(lst):
    lst = list(set(lst))
    return lst

lst = [1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,"
1389,Write a Python program to access a specific item in a singly linked list using index value. ,"class Node:
    # Singly linked node
    def __init__(self, data=None):
        self.data = data
        self.next = None
class singly_linked_list:
    def __init__(self):
        # Createe an empty list
        self.tail = None
        self.head = None
        self.count = 0
	
    def append_item(self, data):
        #Append items on the list
        node = Node(data)
        if self.head:
            self.head.next = node
            self.head = node
        else:
            self.tail = node
            self.head = node
        self.count += 1
    
    def __getitem__(self, index):
        if index > self.count - 1:
            return ""Index out of range""
        current_val = self.tail
        for n in range(index):
            current_val = current_val.next
        return current_val.data


items = singly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')

print(""Search using index:"")
print(items[0])
print(items[1])
print(items[4])
print(items[5])
print(items[10])
","# Node class
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# Linked List class
class LinkedList:
    def __init__(self):
        self.head = None
    
    # Insert a new node at the beginning of the linked list
    def insert_beginning(self, new_data):
        new_node = Node(new_data)
        new_node"
1390,"Write a Pandas program to select random number of rows, fraction of random rows from World alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nSelect random number of rows:"")
print(w_a_con.sample(5))
print(""\nSelect fraction of randome rows:"")
print(w_a_con.sample(frac=0.02))
","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/Alcohol-Consumption/Alcohol-Consumption.csv')

df.head()

df.shape

df.sample(frac=0.1)

df.sample(frac=0.1, random_state=42)

df.sample(frac=0.1, random_"
1391,"Write a NumPy program to create a 5x5 zero matrix with elements on the main diagonal equal to 1, 2, 3, 4, 5. ","import numpy as np
x = np.diag([1, 2, 3, 4, 5])
print(x)
","import numpy as np

matrix = np.zeros((5,5))
matrix[0][0] = 1
matrix[0][1] = 2
matrix[0][2] = 3
matrix[0][3] = 4
matrix[0][4] = 5

matrix[1][0] = 1
matrix[1][1] = 2
matrix[1]["
1392,"Write a NumPy program to compute the trigonometric sine, cosine and tangent array of angles given in degrees. ","import numpy as np
print(""sine: array of angles given in degrees"")
print(np.sin(np.array((0., 30., 45., 60., 90.)) * np.pi / 180.))
print(""cosine: array of angles given in degrees"")
print(np.cos(np.array((0., 30., 45., 60., 90.)) * np.pi / 180.))
print(""tangent: array of angles given in degrees"")
print(np.tan(np.array((0., 30., 45., 60., 90.)) * np.pi / 180.))
","import numpy as np

def trigonometric_sine(x):
    return np.sin(x)

def trigonometric_cosine(x):
    return np.cos(x)

def trigonometric_tan(x):
    return np.tan(x)

def trigonometric_array(x):
    return np.array([trigonometric_sine(x), trigonometric_cosine("
1393,Write a Python program to print the names of all HTML tags of a given web page going through the document tree. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""\nNames of all HTML tags (https://www.python.org):\n"")
for child in soup.recursiveChildGenerator():
    if child.name:
        print(child.name)

","import urllib.request
import html

url = ""http://py4e-data.dr-chuck.net/known_by_Fikri.html""
html = urllib.request.urlopen(url).read()
print(html)

# Solution:

# import urllib.request
# import html

# url = ""http://py4e-data.dr-chuck.net/known_by_F"
1394,Write a Python program to create a backup of a SQLite database. ,"import sqlite3
import io
conn = sqlite3.connect('mydatabase.db')
with io.open('clientes_dump.sql', 'w') as f:
   for linha in conn.iterdump():
       f.write('%s\n' % linha)
print('Backup performed successfully.')
print('Saved as mydatabase_dump.sql')
conn.close()
","import sqlite3

conn = sqlite3.connect('sqlite_python.db')
c = conn.cursor()

c.execute(""""""CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username text,
    password text
)"""""")

c.execute(""INSERT INTO users VALUES (1, 'bob','secret')"")
c.execute(""INSERT INTO users VALUES (2, '"
1395,Write a Python program to find the dimension of a given matrix. ,"def matrix_dimensions(test_list):
    row = len(test_list)
    column = len(test_list[0])
    return row,column

lst = [[1,2],[2,4]]
print(""\nOriginal list:"")
print(lst)
print(""Dimension of the said matrix:"")
print(matrix_dimensions(lst))
lst = [[0,1,2],[2,4,5]]
print(""\nOriginal list:"")
print(lst)
print(""Dimension of the said matrix:"")
print(matrix_dimensions(lst))
lst = [[0,1,2],[2,4,5],[2,3,4]]
print(""\nOriginal list:"")
print(lst)
print(""Dimension of the said matrix:"")
print(matrix_dimensions(lst)) 
","def dimension(matrix):
    if len(matrix) == 0:
        return 0
    else:
        return len(matrix[0]) + dimension(matrix[1:])

print(dimension([[1,2,3],[4,5,6],[7,8,9]]))

""""""

def dimension(matrix):
    if len(matrix) == 0:
        return 0
    else:
        return len(matrix[0]) + dimension(mat"
1396,Write a Python program to find the index position of the last occurrence of a given number in a sorted list using Binary Search (bisect). ,"from bisect import bisect_right   
def BinarySearch(a, x): 
    i = bisect_right(a, x) 
    if i != len(a)+1 and a[i-1] == x: 
        return (i-1) 
    else: 
        return -1 
nums = [1, 2, 3, 4, 8, 8, 10, 12] 
x = 8
num_position   = BinarySearch(nums, x) 
if num_position == -1: 
    print(""not presetn!"") 
else: 
    print(""Last occurrence of"", x, ""is present at"", num_position)
","def binary_search(list, target):
    start = 0
    end = len(list) - 1
    while start <= end:
        mid = (start + end) // 2
        if list[mid] == target:
            return mid
        elif list[mid] < target:
            start = mid + 1
        else:
            end = mid - 1
    return None

print(binary_search([1,"
1397,Write a Python program to list home directory without absolute path. ,"import os.path
print(os.path.expanduser('~'))
","""""""

import os

def list_home_dir():
    """"""
    This function returns the list of absolute path of the home directory.
    """"""
    home_dir = os.path.expanduser(""~"")
    return [os.path.join(home_dir, d) for d in os.listdir(home_dir)]

print(list_home_dir())"
1398,Write a Python program to check if two given lists contain the same elements regardless of order. ,"def check_same_contents(nums1, nums2):
  for x in set(nums1 + nums2):
    if nums1.count(x) != nums2.count(x):
      return False
  return True
nums1 = [1, 2, 4]
nums2 = [2, 4, 1]
print(""Original list elements:"")
print(nums1)
print(nums2)
print(""\nCheck two said lists contain the same elements regardless of order!"")
print(check_same_contents(nums1, nums2))
nums1 = [1, 2, 3]
nums2 = [1, 2, 3]
print(""\nOriginal list elements:"")
print(nums1)
print(nums2)
print(""\nCheck two said lists contain the same elements regardless of order!"")
print(check_same_contents(nums1, nums2))
nums1 = [1, 2, 3]
nums2 = [1, 2, 4]
print(""\nOriginal list elements:"")
print(nums1)
print(nums2)
print(""\nCheck two said lists contain the same elements regardless of order!"")
print(check_same_contents(nums1, nums2))
","def check_lists(list1, list2):
    if len(list1)!= len(list2):
        return False
    for i in range(len(list1)):
        if list1[i]!= list2[i]:
            return False
    return True

print(check_lists([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))
print(check_lists([1, 2, 3, 4,"
1399,Write a NumPy program to insert a new axis within a 2-D array. ,"import numpy as np
x = np.zeros((3, 4))
y = np.expand_dims(x, axis=1).shape
print(y)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])

a = np.insert(a, 2, [7, 8, 9], axis=1)

print(a)

# OUTPUT:
# [[1 2 3]
#  [4 5 6]
#  [7 8 9]]

# a = np.array([[1, 2, 3], [4, 5, 6]])"
1400,Write a Python program to print out a set containing all the colors from color_list_1 which are not present in color_list_2. ,"color_list_1 = set([""White"", ""Black"", ""Red""])
color_list_2 = set([""Red"", ""Green""])
print(""Original set elements:"")
print(color_list_1)
print(color_list_2)
print(""\nDifferenct of color_list_1 and color_list_2:"")
print(color_list_1.difference(color_list_2))
print(""\nDifferenct of color_list_2 and color_list_1:"")
print(color_list_2.difference(color_list_1))
","color_list_1 = {'Red', 'Green', 'White', 'Black'}
color_list_2 = {'Red', 'Green', 'White', 'Black'}

color_list_1.difference_update(color_list_2)

print(color_list_1)

""""""

color_list_1 = {'Red', 'Green', 'White', 'Black'}
color"
1401,Write a Python program to read last n lines of a file. ,"import sys
import os
def file_read_from_tail(fname,lines):
        bufsize = 8192
        fsize = os.stat(fname).st_size
        iter = 0
        with open(fname) as f:
                if bufsize > fsize:
                        bufsize = fsize-1
                        data = []
                        while True:
                                iter +=1
                                f.seek(fsize-bufsize*iter)
                                data.extend(f.readlines())
                                if len(data) >= lines or f.tell() == 0:
                                        print(''.join(data[-lines:]))
                                        break

file_read_from_tail('test.txt',2)
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21"
1402,"Write a Pandas program to find the sum, mean, max, min value of 'Production (short tons)' column of coalpublic2013.xlsx file. ","import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')
print(""Sum: "",df[""Production""].sum()) 
print(""Mean: "",df[""Production""].mean())
print(""Maximum: "",df[""Production""].max())
print(""Minimum: "",df[""Production""].min()) 
","import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')

print(df['Production (short tons)'].sum())
print(df['Production (short tons)'].mean())
print(df['Production (short tons)'].max())
print(df['Production (short tons)'].min())

# Solution:

import pandas as pd"
1403,"Write a Pandas program to filter rows based on row numbers ended with 0, like 0, 10, 20, 30 from world alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nFilter rows based on row numbers ended with 0, like 0, 10, 20, 30:"")
print(w_a_con.filter(regex='0$', axis=0))
","import pandas as pd

df = pd.read_csv(""world_alcohol_consumption.csv"")

df = df[df[""Alcohol""]!= 0]

df.head()

df.shape

df.columns

df.columns = ['Alcohol', 'Consumption']

df.head()

df.head(5)

df.head(5).Alcohol"
1404,Write a Pandas program to split a given dataframe into groups with bin counts. ,"import pandas as pd
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'customer_id':[3005,3001,3002,3009,3005,3007,3002,3004,3009,3008,3003,3002],
'sales_id':[5002,5003,5004,5003,5002,5001,5005,5007,5008,5004,5005,5001]})
print(""Original DataFrame:"")
print(df)
groups = df.groupby(['customer_id', pd.cut(df.sales_id, 3)])
result = groups.size().unstack()
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

print(df.groupby(['col1', '"
1405,Write a Pandas program to keep the valid entries of a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[np.nan,np.nan,70002,np.nan,np.nan,70005,np.nan,70010,70003,70012,np.nan,np.nan],
'purch_amt':[np.nan,270.65,65.26,np.nan,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,np.nan],
'ord_date': [np.nan,'2012-09-10',np.nan,np.nan,'2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17',np.nan],
'customer_id':[np.nan,3001,3001,np.nan,3002,3001,3001,3004,3003,3002,3001,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nKeep the said DataFrame with valid entries:"")
result = df.dropna(inplace=False)
print(result)
","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Rolf', 'Rolf', 'Anne'],
                   'Age': [30, 32, 33, 34],
                   'Score': [90, 80, 70, 60]})

print(df)

# Solution:

# df = pd.DataFrame({'Name': ['Rolf', 'Rolf', 'Rolf', 'Anne'],
#                   'Age':"
1406,Write a Pandas program to create a graphical analysis of UFO (unidentified flying object) Sightings year. ,"import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
df[""ufo_yr""] = df.Date_time.dt.year
years_data = df.ufo_yr.value_counts()
years_index = years_data.index  # x ticks
years_values = years_data.get_values()
plt.figure(figsize=(15,8))
plt.xticks(rotation = 60)
plt.title('UFO Sightings by Year')
plt.xlabel(""Year"")
plt.ylabel(""Number of reports"")
years_plot = sns.barplot(x=years_index[:60],y=years_values[:60], palette = ""Reds"")
","import pandas as pd
import matplotlib.pyplot as plt

# Read the data
df = pd.read_csv('/Users/srinivasan/Downloads/UFO_Sightings.csv')

# Create a new dataframe with only the columns that are required
df_new = df[['Year', 'Sightings']]

# Create a new dataframe with only the columns that are required
df_new = df"
1407,Write a NumPy program to remove the trailing whitespaces of all the elements of a given array. ,"import numpy as np
x = np.array([' python exercises ', ' PHP  ', ' java  ', '  C++'], dtype=np.str)
print(""Original Array:"")
print(x)
rstripped_char = np.char.rstrip(x)
print(""\nRemove the trailing whitespaces : "", rstripped_char)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.rstrip())

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.rstrip(' '))

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9,"
1408,"Write a Python program to calculate the sum of all items of a container (tuple, list, set, dictionary). ","s = sum([10,20,30])
print(""\nSum of the container: "", s)
print()
","def sum_of_items(container):
    sum = 0
    for item in container:
        sum += item
    return sum

print(sum_of_items([1, 2, 3, 4, 5]))

""""""

# Solution 1

def sum_of_items(container):
    sum = 0
    for item in container:
        sum += item
    return sum

print(sum_of_items([1,"
1409,Write a NumPy program totest element-wise for NaN of a given array. ,"import numpy as np
a = np.array([1, 0, np.nan, np.inf])
print(""Original array"")
print(a)
print(""Test element-wise for NaN:"")
print(np.isnan(a))
","import numpy as np

a = np.array([[1, 2, np.nan], [3, 4, 5], [np.nan, 6, 7]])

print(a)

# Output:
[[1 2.0 nan 6.0]
 [3 4.0 5.0 nan 7.0]]

""""""

import numpy as np

a = np.array([[1, 2, np.nan], [3, 4, 5],"
1410,Write a NumPy program to find the index of the sliced elements as follows from a given 4x4 array. ,"import numpy as np    
x = np.reshape(np.arange(16),(4,4))
print(""Original arrays:"")
print(x)
print(""Sliced elements:"")
result = x[[0,1,2],[0,1,3]]
print(result)
","import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12],
                [13, 14, 15, 16]])

print(arr[0:2, 0:2])

# Output:
[[1 2]
 [5 6]
 [9 10]
 [13 14]
 [15 16]]

# Explan"
1411,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight dataframe's specific columns with different colors. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
print(""\nDifferent background color:"")
coldict = {'B':'red', 'D':'yellow'}

def highlight_cols(x):
    #copy df to new - original data are not changed
    df = x.copy()
    #select all values to default value - red color
    df.loc[:,:] = 'background-color: red'
    #overwrite values grey color
    df[['B','C', 'E']] = 'background-color: grey'
    #return color df
    return df    

df.style.apply(highlight_cols, axis=None)
","import pandas as pd

df = pd.DataFrame(
    {
        ""First column"": [""Rolf"", ""Charlie"", ""Anna"", ""Bob"", ""Jen"", ""Sue"", ""Anne"", ""Brad""],
        ""Second column"": [1, 2, 3, 4, 5, 6, 7, 8],
        ""Third column"": [10, 20, 30, 40, 50, 60, 70, 80],"
1412,Write a NumPy program to calculate exp(x) - 1 for all elements in a given array. ,"import numpy as np
x = np.array([1., 2., 3., 4.], np.float32)
print(""Original array: "")
print(x)
print(""\nexp(x)-1 for all elements of the said array:"")
r1 = np.expm1(x)
r2 = np.exp(x) - 1.
assert np.allclose(r1, r2)
print(r1)
","import numpy as np

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(np.exp(x))

# Output:
[1.        1.        1.        1.        1.        1.        1.        1.        1.        1.        1.        1.        1.        1.        1.        1.        1.        1.        1."
1413,Write a Pandas program to count of occurrence of a specified substring in a DataFrame column. ,"import pandas as pd
df = pd.DataFrame({
    'name_code': ['c001','c002','c022', 'c2002', 'c2222'],
    'date_of_birth ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'age': [18.5, 21.2, 22.5, 22, 23]
})
print(""Original DataFrame:"")
print(df)
print(""\nCount occurrence of 2 in date_of_birth column:"")
df['count'] = list(map(lambda x: x.count(""2""), df['name_code']))
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Bob', 'Jen', 'Anne'],
                   'Score': [60, 70, 80, 90]})

# Solution 1
print(df['Name'].count())

# Solution 2
print(df['Name'].value_counts())

# Solution 3
print(df['Name'].value_counts(sort=False))

# Solution"
1414,Write a Python program to create a file where all letters of English alphabet are listed by specified number of letters on each line. ,"import string
def letters_file_line(n):
   with open(""words1.txt"", ""w"") as f:
       alphabet = string.ascii_uppercase
       letters = [alphabet[i:i + n] + ""\n"" for i in range(0, len(alphabet), n)]
       f.writelines(letters)
letters_file_line(3)
","import os

def create_file(filename, letters):
    with open(filename, 'w') as file:
        for letter in letters:
            file.write(letter)

def main():
    filename = 'file.txt'
    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', '"
1415,Write a Python program to convert a given heterogeneous list of scalars into a string. ,"def heterogeneous_list_to_str(lst):
    result = ','.join(str(x) for x in lst)
    return result
h_data = [""Red"", 100, -50, ""green"", ""w,3,r"", 12.12, False]
print(""Original list:"")
print(h_data)
print(""\nConvert the heterogeneous list of scalars into a string:"")
print(heterogeneous_list_to_str(h_data))
","def heterogeneous_list_to_string(heterogeneous_list):
    return ''.join(heterogeneous_list)

print(heterogeneous_list_to_string([1, 2, 3]))

""""""

def heterogeneous_list_to_string(heterogeneous_list):
    return ''.join(heterogeneous_list)

print(heterogeneous_list_to_string([1, 2, 3]))

""""""

def heterogeneous_list"
1416,Write a Python program to get all possible combinations of the elements of a given list. ,"def combinations_list(colors):
    if len(colors) == 0:
        return [[]]
    result = []
    for el in combinations_list(colors[1:]):
        result += [el, el+[colors[0]]]
    return result
colors = ['orange', 'red', 'green', 'blue']
print(""Original list:"")
print(colors)
print(""\nAll possible combinations of the said lists elements:"")
print(combinations_list(colors))
","def combinations(lst, n):
    if n == 0:
        return [[]]
    else:
        return [item for sublist in combinations(lst, n-1) for item in sublist] + [item for sublist in combinations(lst, n-1) for item in sublist]

print(combinations([1,2,3,4,5],3))

""""""

def combinations(lst, n):
    if n == 0:"
1417,Write a NumPy program to combine last element with first element of two given ndarray with different shapes. ,"import numpy as np
array1 = ['PHP','JS','C++']
array2 = ['Python','C#', 'NumPy']    
print(""Original arrays:"")          
print(array1)
print(array2)          
result  = np.r_[array1[:-1], [array1[-1]+array2[0]], array2[1:]]   
print(""\nAfter Combining:"")       
print(result)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a + b)

# Output:
[[11 7 11]
 [12  8  9]]

# Output:
[[ 7  7  7]
 [ 8  8  8]
 [ 9  9  9"
1418,Write a Python program to count most and least common characters in a given string. ,"from collections import Counter 
def max_least_char(str1):
    temp = Counter(str1) 
    max_char = max(temp, key = temp.get)
    min_char = min(temp, key = temp.get)
    return (max_char, min_char)

str1 = ""hello world""
print (""Original string: "")
print(str1)
result = max_least_char(str1)
print(""\nMost common character of the said string:"",result[0])
print(""Least common character of the said string:"",result[1])
","def count_common_char(str):
    count = 0
    for i in str:
        if i in str:
            count += 1
    return count

print(count_common_char(""abcdefghijklmnopqrstuvwxyz""))

""""""

def count_common_char(str):
    count = 0
    for i in str:
        if i in str:
            count += 1
    return count

print(count_common"
1419,Write a Python program using Sieve of Eratosthenes method for computing primes upto a specified number. ,"def prime_eratosthenes(n):
    prime_list = []
    for i in range(2, n+1):
        if i not in prime_list:
            print (i)
            for j in range(i*i, n+1, i):
                prime_list.append(j)

print(prime_eratosthenes(100));
","def is_prime(n):
    if n == 1:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    for i in range(3, int(n**0.5)+1, 2):
        if n % i == 0:
            return False
    return True

def SieveOfEratosthenes(n):
    sieve = [True] *"
1420,Write a NumPy program to convert the raw data in an array to a binary string and then create an array. ,"import numpy as np
x = np.array([10, 20, 30], float)
print(""Original array:"")
print(x)
s = x.tostring()
print(""Binary string array:"")
print(s)
print(""Array using fromstring():"")
y = np.fromstring(s)
print(y)
","import numpy as np

# create an array of 10 elements
arr = np.random.randint(0, 100, size=10)

# convert the array to a binary string
binary = np.array(arr, dtype=np.uint8)

# create an array of 10 elements
arr = np.random.randint(0, 100, size=10)

# convert the array to a binary string
binary = np.array(arr"
1421,Write a Python program to remove spaces from dictionary keys. ,"student_list = {'S  001': ['Math', 'Science'], 'S    002': ['Math', 'English']}
print(""Original dictionary: "",student_list)
student_dict = {x.translate({32: None}): y for x, y in student_list.items()}
print(""New dictionary: "",student_dict)
","import re

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22"
1422,Write a Python program to sort unsorted numbers using Multi-key quicksort. ,"#Ref.https://bit.ly/36fvcEw
def quick_sort_3partition(sorting: list, left: int, right: int) -> None:
    if right <= left:
        return
    a = i = left
    b = right
    pivot = sorting[left]
    while i <= b:
        if sorting[i] < pivot:
            sorting[a], sorting[i] = sorting[i], sorting[a]
            a += 1
            i += 1
        elif sorting[i] > pivot:
            sorting[b], sorting[i] = sorting[i], sorting[b]
            b -= 1
        else:
            i += 1
    quick_sort_3partition(sorting, left, a - 1)
    quick_sort_3partition(sorting, b + 1, right)
def three_way_radix_quicksort(sorting: list) -> list:
    if len(sorting) <= 1:
        return sorting
    return (
        three_way_radix_quicksort([i for i in sorting if i < sorting[0]])
        + [i for i in sorting if i == sorting[0]]
        + three_way_radix_quicksort([i for i in sorting if i > sorting[0]])
    )
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_3partition(nums, 0, len(nums)-1)
print(nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
print(""After applying Multi-key quicksort the said list becomes:"")
quick_sort_3partition(nums, 0,  len(nums)-1)
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Multi-key quicksort the said list becomes:"")
quick_sort_3partition(nums, 0, len(nums)-1)
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Multi-key quicksort the said list becomes:"")
quick_sort_3partition(nums, 1,  len(nums)-1)
print(nums)
nums = ['z','a','y','b','x','c']
print(""\nOriginal list:"")
print(nums)
print(""After applying Multi-key quicksort the said list becomes:"")
quick_sort_3partition(nums, 0, len(nums)-1)
print(nums)
nums = ['z','a','y','b','x','c']
print(""\nOriginal list:"")
print(nums)
print(""After applying Multi-key quicksort the said list becomes:"")
quick_sort_3partition(nums, 2,  len(nums)-1)
print(nums) 
","def quicksort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[0]
    less = [i for i in arr[1:] if i <= pivot]
    greater = [i for i in arr[1:] if i > pivot]
    return quicksort(less) + [pivot] + quicksort(greater)

arr = [6, 5, 4, 8, 2, 1, 7, 3,"
1423,Write a Python program to returns sum of all divisors of a number. ,"def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)
print(sum_div(8))
print(sum_div(12))
","def divisors(n):
    divisors = []
    for i in range(1, n + 1):
        if n % i == 0:
            divisors.append(i)
    return sum(divisors)

print(divisors(12))

""""""

def divisors(n):
    divisors = []
    for i in range(1, n + 1):
        if n % i == 0:
            divisors"
1424,Write a Pandas program to plot the volatility over a period of time of Alphabet Inc. stock price between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Date', 'Close']]
df3 = df2.set_index('Date')
data_filled = df3.asfreq('D', method='ffill')
data_returns = data_filled.pct_change()
data_std = data_returns.rolling(window=30, min_periods=30).std()
plt.figure(figsize=(20,20))
data_std.plot();
plt.suptitle('Volatility over a period of time  of Alphabet Inc. stock price,\n01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.grid(True)
plt.show() 
","import pandas as pd
import matplotlib.pyplot as plt

# Read the data
df = pd.read_csv('Alphabet Inc.csv')

# Create a new dataframe with the columns 'Date' and 'Open'
df_new = df[['Date', 'Open']]

# Create a new dataframe with the columns 'Date' and 'Open'
df_new = df_new.rename(column"
1425,Write a Python program to create a list reflecting the modified run-length encoding from a given list of integers or a given list of characters. ,"from itertools import groupby
def modified_encode(alist):
        def ctr_ele(el):
            if len(el)>1: return [len(el), el[0]]
            else: return el[0]
        return [ctr_ele(list(group)) for key, group in groupby(alist)]

n_list = [1,1,2,3,4,4,5, 1]
print(""Original list:"") 
print(n_list)
print(""\nList reflecting the modified run-length encoding from the said list:"")
print(modified_encode(n_list))

n_list = 'aabcddddadnss'
print(""\nOriginal String:"") 
print(n_list)
print(""\nList reflecting the modified run-length encoding from the said string:"")
print(modified_encode(n_list))

","def run_length_encoding(list):
    # Your code here
    pass

# Test your code
# run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#"
1426,Write a NumPy program to create a vector with values ranging from 15 to 55 and print all values except the first and last. ,"import numpy as np
v = np.arange(15,55)
print(""Original vector:"")
print(v)
print(""All values except the first and last of the said vector:"")
print(v[1:-1])
","import numpy as np

x = np.arange(15, 55, 1)
print(x)

# solution

# x = np.arange(15, 55, 1)
# print(x)
# x = x[1:4]
# print(x)

# solution

# x = np.arange(15, 55, 1)
# print(x)
# x = x[1:"
1427,Write a Python program to flatten a shallow list. ,"import itertools
original_list = [[2,4,3],[1,5,6], [9], [7,9,0]]
new_merged_list = list(itertools.chain(*original_list))
print(new_merged_list)
","def flatten(lst):
    # Your code here
    return lst

lst = [1, 2, [3, 4, [5, [6, 7]], 8]]
print(flatten(lst))

""""""

def flatten(lst):
    # Your code here
    return lst

lst = [1, 2, [3, 4, [5, [6, 7]], 8]]
print(flatten(lst))

"""""""
1428,Write a Python program that will return true if the two given integer values are equal or their sum or difference is 5. ,"def test_number5(x, y):
   if x == y or abs(x-y) == 5 or (x+y) == 5:
       return True
   else:
       return False
print(test_number5(7, 2))
print(test_number5(3, 2))
print(test_number5(2, 2))
print(test_number5(7, 3))
print(test_number5(27, 53))
","def equal_sum(a, b):
    if a == b:
        return True
    elif a + b == 5:
        return True
    else:
        return False

print(equal_sum(1, 2))
print(equal_sum(1, 3))
print(equal_sum(1, 4))
print(equal_sum(1, 5))

""""""

# Solution 1

def equal_sum(a"
1429,Write a Python program to find the common tuples between two given lists. ,"def test(list1, list2):
    result =  set(list1).intersection(list2)
    return list(result)
list1 =  [('red', 'green'), ('black', 'white'), ('orange', 'pink')] 
list2 =  [('red', 'green'), ('orange', 'pink')] 
print(""\nOriginal lists:"")
print(list1)
print(list2)
print(""\nCommon tuples between two said lists"")
print(test(list1,list2)) 
list1 =  [('red', 'green'), ('orange', 'pink')] 
list2 =  [('red', 'green'), ('black', 'white'), ('orange', 'pink')] 
print(""\nOriginal lists:"")
print(list1)
print(list2)
print(""\nCommon tuples between two said lists"")
print(test(list1,list2))
","def common_tuple(list1, list2):
    common_tuple = []
    for i in range(len(list1)):
        for j in range(len(list2)):
            if list1[i] == list2[j]:
                common_tuple.append((list1[i], list2[j]))
    return common_tuple

print(common_tuple([1, 2, 3, 4, 5], [2, 3, 4"
1430,Write a Python program to change a given string to a new string where the first and last chars have been exchanged. ,"def change_sring(str1):
      return str1[-1:] + str1[1:-1] + str1[:1]
	  
print(change_sring('abcd'))
print(change_sring('12345'))
","s = ""abcd""
new_s = s[1:3] + s[0] + s[2:4]
print(new_s)

""""""

s = ""abcd""
new_s = s[1:3] + s[0] + s[2:4]
print(new_s)"
1431,Write a Python program to convert a given list of dictionaries into a list of values corresponding to the specified key. ,"def pluck(lst, key):
  return [x.get(key) for x in lst]
 
simpsons = [
  { 'name': 'Areeba', 'age': 8 },
  { 'name': 'Zachariah', 'age': 36 },
  { 'name': 'Caspar', 'age': 34 },
  { 'name': 'Presley', 'age': 10 }
]
print(pluck(simpsons, 'age'))
","def solution(dict_list):
    return [dict_list[i]['name'] for i in range(len(dict_list))]

""""""

def solution(dict_list):
    return [dict_list[i]['name'] for i in range(len(dict_list))]

print(solution([{'name': 'john', 'age': 30}, {'name':'mary', 'age': 25}, {'name':"
1432,Write a Pandas program to create a time series combining hour and minute. ,"import pandas as pd
result = pd.timedelta_range(0, periods=30, freq=""1H20T"")
print(""For a frequency of 1 hours 20 minutes, here we have combined the hour (H) and minute (T):\n"")
print(result)
","import pandas as pd

# Create a time series
hour = pd.Series(pd.date_range('1/1/2000', periods=24, freq='H'))
minute = pd.Series(pd.date_range('1/1/2000', periods=24, freq='T'))

# Create a time series
hour = pd.Series(pd.date_range('1/1/2000', periods=24, freq='H'))
minute"
1433,Write a Python program to format a number with a percentage. ,"x = 0.25
y = -0.25
print(""\nOriginal Number: "", x)
print(""Formatted Number with percentage: ""+""{:.2%}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number with percentage: ""+""{:.2%}"".format(y));
print()
","def format_number(number):
    return f'{number:.2f}%'

print(format_number(100))
print(format_number(50))
print(format_number(0))
print(format_number(0.1))
print(format_number(0.01))
print(format_number(0.001))
print(format_number(0.0001))
print(format_number(0.00001))
print(format_number(0.0000"
1434,Write a Python program to generate combinations of a given length of given iterable. ,"import itertools as it
def combinations_data(iter, length):
    return it.combinations(iter, length)
#List
result = combinations_data(['A','B','C','D'], 1)
print(""\nCombinations of an given iterable of length 1:"")
for i in result:
    print(i)

#String
result = combinations_data(""Python"", 1)
print(""\nCombinations of an given iterable of length 1:"")
for i in result:
    print(i)
    
#List
result = combinations_data(['A','B','C','D'], 2)
print(""\nCombinations of an given iterable of length 2:"")
for i in result:
    print(i)

#String
result = combinations_data(""Python"", 2)
print(""\nCombinations of an given iterable of length 2:"")
for i in result:
    print(i)
","def combinations(iterable, r):
    pool = tuple(iterable)
    n = len(pool)
    if r > n:
        return
    indices = list(range(r))
    yield tuple(pool[i] for i in indices)
    while True:
        for i in reversed(range(r)):
            if indices[i]!= i:
                break
        else:
            return
        indices[i] += 1
        for j"
1435,Write a Pandas program to find the index of a given substring of a DataFrame column. ,"import pandas as pd
df = pd.DataFrame({
    'name_code': ['c001','c002','c022', 'c2002', 'c2222'],
    'date_of_birth ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'age': [18.5, 21.2, 22.5, 22, 23]
})
print(""Original DataFrame:"")
print(df)
print(""\nCount occurrence of 22 in date_of_birth column:"")
df['Index'] = list(map(lambda x: x.find('22'), df['name_code']))
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['John', 'Jane', 'John', 'Jane', 'John', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', '"
1436,Write a NumPy program to get the block-sum (block size is 5x5) from a given array of shape 25x25. ,"import numpy as np
arra1 = np.ones((25,25))
k = 5
print(""Original arrays:"")
print(arra1)
result = np.add.reduceat(np.add.reduceat(arra1, np.arange(0, arra1.shape[0], k), axis=0),
                                      np.arange(0, arra1.shape[1], k), axis=1)
print(""\nBlock-sum (5x5) of the said array:"")
print(result)
","import numpy as np

arr = np.array([[1, 2, 3, 4, 5],
                [6, 7, 8, 9, 10],
                [11, 12, 13, 14, 15],
                [16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25]])

print(arr)

# Solution:

# arr = np.array([["
1437,Write a Python program to get the length of an array. ,"from array import array
num_array = array('i', [10,20,30,40,50])
print(""Length of the array is:"")
print(len(num_array))
","def get_length(arr):
    return len(arr)

print(get_length([1, 2, 3, 4, 5]))

""""""

def get_length(arr):
    return len(arr)

print(get_length([1, 2, 3, 4, 5]))

""""""

def get_length(arr):
    return len(arr)

print(get_length([1, 2, 3, 4, 5]))

""""""

def"
1438,Write a NumPy program to get the magnitude of a vector in NumPy. ,"import numpy as np
x = np.array([1,2,3,4,5])
print(""Original array:"")
print(x)
print(""Magnitude of the vector:"")
print(np.linalg.norm(x))
","import numpy as np

x = np.array([1, 2, 3, 4, 5])
print(np.linalg.norm(x))

# Output:
# array([ 1.,  2.,  3.,  4.,  5.])

# Hint: You can use np.linalg.norm to get the magnitude of a vector.

# Hint: You can use np.linalg.norm to get the magnitude of a vector.

#"
1439,Write a Python program to remove words from a given list of strings containing a character or string. ,"def remove_words(in_list, char_list):
    new_list = []
    for line in in_list:
        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in char_list])])
        new_list.append(new_words)
    return new_list
     
str_list = ['Red color', 'Orange#', 'Green', 'Orange @', ""White""]
print(""Original list:"")
print(""list1:"",str_list)
char_list = ['#', 'color', '@']
print(""\nCharacter list:"")
print(char_list)
print(""\nNew list:"")
print(remove_words(str_list, char_list))
","import re

def remove_words(words, char):
    for word in words:
        if re.search(char, word):
            words.remove(word)
    return words

print(remove_words(['hello', 'world', 'python', 'programming', 'is', 'fun', '?'], '?'))

""""""

def remove_words(words, char):
    for word in words:
        if re.search(char, word):"
1440,"Write a Pandas program to split a dataset, group by one column and get mean, min, and max values by group, also change the column name of the aggregated metric. Using the following dataset find the mean, min, and max values of purchase amount (purch_amt) group by customer id (customer_id). ","import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])
print(""Original DataFrame:"")
print(df)
print('\nChange the name of an aggregated metric:')
grouped_single = df.groupby('school_code').agg({'age': [(""mean_age"",""mean""), (""min_age"", ""min""), (""max_age"",""max"")]})
print(grouped_single)
","import pandas as pd
import numpy as np

df = pd.read_csv('purchase_data.csv')

df.groupby(['customer_id']).agg({'purch_amt': ['mean', '"
1441,Write a Python program to check a list is empty or not. ,"l = []
if not l:
  print(""List is empty"")
  ","def is_empty(lst):
    if len(lst) == 0:
        return True
    else:
        return False

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(is_empty(lst))

""""""

# Solution 1

def is_empty(lst):
    if len(lst) == 0:
        return True
    else:
        return False

lst = ["
1442,Write a Pandas program to create a scatter plot of the trading volume/stock prices of Alphabet Inc. stock between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1.set_index('Date')
x= ['Close']; y = ['Volume']
plt.figure(figsize=[15,10])
df2.plot.scatter(x, y, s=50);
plt.grid(True)
plt.title('Trading Volume/Price of Alphabet Inc. stock,\n01-04-2020 to 30-09-2020', fontsize=14, color='black')
plt.xlabel(""Stock Price"",fontsize=12, color='black')
plt.ylabel(""Trading Volume"", fontsize=12, color='black') 
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc_data.csv')

df['Date'] = pd.to_datetime(df['Date'])

df.set_index('Date', inplace=True)

plt.scatter(df['Volume'], df['Price'])

plt.show()

"""""""
1443,Write a Python program to calculate magic square. ,"def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    
    #Horizontal Part:
    sum_list.extend([sum (lines) for lines in my_matrix])   

    #Vertical Part:
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    
    #Diagonals Part
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)  
    
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)

    if len(set(sum_list))>1:
        return False
    return True

m=[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]] 
print(magic_square_test(m));

m=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]
print(magic_square_test(m));

m=[[2, 7, 6], [9, 5, 1], [4, 3, 7]]
print(magic_square_test(m));
","def magic_square(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return magic_square(n-1) + magic_square(n-2)

print(magic_square(5))

""""""

# Solution

def magic_square(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return magic_square(n-1)"
1444,Write a Python program to append a list to the second list. ,"list1 = [1, 2, 3, 0]
list2 = ['Red', 'Green', 'Black']
final_list = list1 + list2
print(final_list)
","def append_list(list1, list2):
    list1.append(list2)
    return list1

print(append_list([1, 2, 3], [4, 5, 6]))

""""""

def append_list(list1, list2):
    list1.append(list2)
    return list1

print(append_list([1, 2, 3], [4, 5, 6]))

""""""

def append_list(list1,"
1445,Write a NumPy program to find the real and imaginary parts of an array of complex numbers. ,"import numpy as np
x = np.sqrt([1+0j])
y = np.sqrt([0+1j])
print(""Original array:x "",x)
print(""Original array:y "",y)
print(""Real part of the array:"")
print(x.real)
print(y.real)
print(""Imaginary part of the array:"")
print(x.imag)
print(y.imag)
","import numpy as np

a = np.array([1, 2, 3, 4])
print(a)
print(a.real)
print(a.imag)

# Output:
# array([1., 2., 3., 4.])
# array([1.+0.j, 2.+0.j, 3.+0.j, 4.+0.j])

# Python code to solve the following problem:

# import numpy as"
1446,Write a Python program to parse a string representing a time according to a format. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\ntime.struct_time, in the current timezone:"")
print(arrow.utcnow().timetuple())
","import re

def parse_time(time_string):
    """"""Parse a string representing a time according to a format.

    Args:
        time_string (str): A string representing a time according to a format.

    Returns:
        (int, int): A tuple containing the hours, minutes and seconds of the time.
    """"""
    # TODO: Replace this with your code
    # Parse the time string
    # Return the hours, minutes and seconds
    #"
1447,Write a NumPy program to create a new shape to an array without changing its data. ,"import numpy as np
x = np.array([1, 2, 3, 4, 5, 6])
y = np.reshape(x,(3,2))
print(""Reshape 3x2:"")
print(y)
z = np.reshape(x,(2,3))
print(""Reshape 2x3:"")
print(z)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

b = np.array([[1, 2, 3], [4, 5, 6]])
print(b)

c = np.array([[1, 2, 3], [4, 5, 6]])
print(c)

d = np.array([[1, 2, 3], [4, 5,"
1448,Write a Python program to find the location address of a specified latitude and longitude using Nominatim API and Geopy package. ,"from geopy.geocoders import Nominatim
geolocator = Nominatim(user_agent=""geoapiExercises"")
lald = ""47.470706, -99.704723""
print(""Latitude and Longitude:"",lald)
location = geolocator.geocode(lald)
print(""Location address of the said Latitude and Longitude:"")
print(location)
lald = ""34.05728435, -117.194132331602""
print(""\nLatitude and Longitude:"",lald)
location = geolocator.geocode(lald)
print(""Location address of the said Latitude and Longitude:"")
print(location)
lald = ""38.8976998, -77.0365534886228""
print(""\nLatitude and Longitude:"",lald)
location = geolocator.geocode(lald)
print(""Location address of the said Latitude and Longitude:"")
print(location)
lald = ""55.7558 N, 37.6173 E""
print(""\nLatitude and Longitude:"",lald)
location = geolocator.geocode(lald)
print(""Location address of the said Latitude and Longitude:"")
print(location)
lald = ""35.6762 N, 139.6503 E""
print(""\nLatitude and Longitude:"",lald)
location = geolocator.geocode(lald)
print(""Location address of the said Latitude and Longitude:"")
print(location)
lald = ""41.9185 N, 45.4777 E""
print(""\nLatitude and Longitude:"",lald)
location = geolocator.geocode(lald)
print(""Location address of the said Latitude and Longitude:"")
print(location)
","import geopy

# Create a geopy object
geolocator = geopy.geocoders.Nominatim(user_agent=""my_app"")

# Create a geopy object
location = geolocator.geocode(""Mumbai, India"")

# Print the location
print(location.address)

# Print the latitude and longitude
print(location.latitude, location.longitude)"
1449,Write a Python program to flatten a given nested list structure. ,"def flatten_list(n_list):
    result_list = []
    if not n_list: return result_list
    stack = [list(n_list)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list 
n_list = [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]
print(""Original list:"") 
print(n_list)
print(""\nFlatten list:"")
print(flatten_list(n_list))
","def flatten(lst):
    # your code goes here
    flattened = []
    for i in lst:
        if type(i) == list:
            flattened.extend(flatten(i))
        else:
            flattened.append(i)
    return flattened

lst = [[1,2,3],[4,5,6],[7,8,9]]
print(flatten(lst))

""""""

def flatten(l"
1450,Write a Python program to extract the text in the first paragraph tag of a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc, 'html.parser')
print(""The text in the first paragraph tag:"")
print(soup.find_all('p')[0].text)

","import urllib.request
import re

url = ""http://py4e-data.dr-chuck.net/known_by_Fikri.html""
html = urllib.request.urlopen(url).read()

# find all the <p> tags
p = re.compile(r'<p>(.*?)</p>')

# find all the <a> tags
a = re.compile(r'<a href="""
1451,Write a Python program to get the index of the first element which is greater than a specified element. ,"def first_index(l1, n):
    return next(a[0] for a in enumerate(l1) if a[1] > n)
 
nums = [12,45,23,67,78,90,100,76,38,62,73,29,83]
print(""Original list:"")
print(nums)
n = 73
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
n = 21
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
n = 80
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
n = 55
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
","def solution(arr, x):
    for i in range(len(arr)):
        if arr[i] > x:
            return i
    return -1

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
x = 6
print(solution(arr, x))

""""""

def solution(arr, x):
    for i in range(len(arr)):
        if arr[i"
1452,rite a Python program that accepts a string and calculate the number of digits and letters. ,"s = input(""Input a string"")
d=l=0
for c in s:
    if c.isdigit():
        d=d+1
    elif c.isalpha():
        l=l+1
    else:
        pass
print(""Letters"", l)
print(""Digits"", d)
","def count_digits(string):
    count = 0
    for i in string:
        if i.isdigit():
            count += 1
    return count

print(count_digits(""Python is easy to learn""))

""""""

def count_digits(string):
    count = 0
    for i in string:
        if i.isdigit():
            count += 1
    return count

print(count_digits(""Python is easy to learn"
1453,"Write a NumPy program to create an array of (3, 4) shape, multiply every element value by 3 and display the new array. ","import numpy as np
x= np.arange(12).reshape(3, 4)
print(""Original array elements:"")
print(x)
for a in np.nditer(x, op_flags=['readwrite']):
    a[...] = 3 * a
print(""New array elements:"")
print(x)
","import numpy as np

arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(arr)
print(arr * 3)
print(arr.dot(3))

# Solution:

# import numpy as np
#
# arr = np.array([[1, 2, 3, 4], [5, 6"
1454,Write a NumPy program to convert the values of Centigrade degrees into Fahrenheit degrees. Centigrade values are stored into a NumPy array. ,"import numpy as np
fvalues = [0, 12, 45.21, 34, 99.91]
F = np.array(fvalues)
print(""Values in Fahrenheit degrees:"")
print(F)
print(""Values in  Centigrade degrees:"") 
print(5*F/9 - 5*32/9)
","import numpy as np

# Convert degrees to centigrade
degrees = np.deg2rad(np.arange(0, 360, 10))

# Convert degrees to fahrenheit
fahrenheit = np.deg2rad(degrees)

# Convert degrees to centigrade
centigrade = np.rad2deg(fahrenheit)

# Print the values
print(centigrade)"
1455,Write a NumPy program to compute the weighted of a given array. ,"import numpy as np
x = np.arange(5)
print(""\nOriginal array:"")
print(x)
weights = np.arange(1, 6)
r1 = np.average(x, weights=weights)
r2 = (x*(weights/weights.sum())).sum()
assert np.allclose(r1, r2)
print(""\nWeighted average of the said array:"")
print(r1)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

weight = np.array([[1, 2, 3], [4, 5, 6]])
print(weight)

weighted_array = np.dot(weight, a)
print(weighted_array)

weighted_array = np.dot(weight, a, dtype=np.int64)
print(weighted_"
1456,Write a NumPy program to compute the Kronecker product of two given mulitdimension arrays. ,"import numpy as np
a = np.array([1,2,3])
b = np.array([0,1,0])
print(""Original 1-d arrays:"")
print(a)
print(b)
result =  np.kron(a, b)
print(""Kronecker product of the said arrays:"")
print(result)
x = np.arange(9).reshape(3, 3)
y = np.arange(3, 12).reshape(3, 3)
print(""Original Higher dimension:"")
print(x)
print(y)
result = np.kron(x, y)
print(""Kronecker product  of the said arrays:"")
print(result)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(np.kron(a, b))

# OUTPUT:
# [[1 2 3]
#  [4 5 6]
#  [7 8 9]
#  [10 11 12]]

# [[1 4]"
1457,Write a Python program to sort a given list of strings(numbers) numerically. ,"def sort_numeric_strings(nums_str):
    result = [int(x) for x in nums_str]
    result.sort()
    return result
nums_str = ['4','12','45','7','0','100','200','-12','-500']
print(""Original list:"")
print(nums_str)
print(""\nSort the said list of strings(numbers) numerically:"")
print(sort_numeric_strings(nums_str))
","def sort_numbers(numbers):
    numbers.sort()
    return numbers

print(sort_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))

""""""

def sort_numbers(numbers):
    numbers.sort()
    return numbers

print(sort_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))

""""""

def sort_"
1458,Write a Python program to compute the difference between two lists. ,"from collections import Counter
color1 = [""red"", ""orange"", ""green"", ""blue"", ""white""]
color2 = [""black"", ""yellow"", ""green"", ""blue""]
counter1 = Counter(color1)
counter2 = Counter(color2)
print(""Color1-Color2: "",list(counter1 - counter2))
print(""Color2-Color1: "",list(counter2 - counter1))
","def diff(list1, list2):
    diff = []
    for i in range(len(list1)):
        diff.append(list1[i] - list2[i])
    return diff

print(diff([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))

""""""

def diff(list1, list2):
    diff = []
    for i in range(len(list1)):
        diff.append(list"
1459,"Write a NumPy program to replace all numbers in a given array which is equal, less and greater to a given number. ","import numpy as np
nums = np.array([[5.54, 3.38, 7.99],
              [3.54, 8.32, 6.99],
              [1.54, 2.39, 9.29]])
print(""Original array:"")
print(nums)
n = 8.32
r = 18.32
print(""\nReplace elements of the said array which are equal to "",n,""with"",r)
print(np.where(nums == n, r, nums))
print(""\nReplace elements with of the said array which are less than"",n,""with"",r)
print(np.where(nums < n, r, nums))
print(""\nReplace elements with of the said array which are greater than"",n,""with"",r)
print(np.where(nums > n, r, nums))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr)

# Replace all numbers in array which is equal to given number

arr[arr == 5] = 0

print(arr)

# Replace all numbers in array which is less than given number

arr[arr < 5] = 0

print(arr)

#"
1460,"Write a Python program to split values into two groups, based on the result of the given filtering function. ","def bifurcate_by(lst, fn):
  return [
    [x for x in lst if fn(x)],
    [x for x in lst if not fn(x)]
  ]
print(bifurcate_by(['red', 'green', 'black', 'white'], lambda x: x[0] == 'w'))
","def filter_func(x):
    if x % 2 == 0:
        return True
    else:
        return False

print(filter_func(5))
print(filter_func(6))
print(filter_func(7))
print(filter_func(8))
print(filter_func(9))
print(filter_func(10))

""""""

def filter_func(x):
    if x % 2 == 0:"
1461,Write a Pandas program to create a Pivot table and check missing values of children. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.loc[df['who']=='child'].isnull().sum()
print(result)
","import pandas as pd

df = pd.read_csv(""https://github.com/datasets/csv/blob/master/adult.csv"")

df.head()

df.isnull().sum()

df.isnull().sum().sum()

df.isnull().sum().sum()

df.isnull().sum().sum()

df.isnull().sum().sum()

df.isnull().sum().sum()"
1462,Write a Python program to sort a list of nested dictionaries. ,"my_list = [{'key': {'subkey': 1}}, {'key': {'subkey': 10}}, {'key': {'subkey': 5}}]
print(""Original List: "")
print(my_list)
my_list.sort(key=lambda e: e['key']['subkey'], reverse=True)
print(""Sorted List: "")
print(my_list)
","def sort_dict(d):
    return sorted(d.items(), key=lambda item: item[1])

d = {
    ""a"": 1,
    ""b"": 2,
    ""c"": 3,
    ""d"": 4,
    ""e"": 5,
    ""f"": 6
}

print(sort_dict(d))

""""""

def sort_dict(d):
    return sorted(d.items(), key=lambda item: item[1])"
1463,Write a NumPy program to get the unique elements of an array. ,"import numpy as np
x = np.array([10, 10, 20, 20, 30, 30])
print(""Original array:"")
print(x)
print(""Unique elements of the above array:"")
print(np.unique(x))
x = np.array([[1, 1], [2, 3]])
print(""Original array:"")
print(x)
print(""Unique elements of the above array:"")
print(np.unique(x))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(arr)
print(np.unique(arr))

# Output:
# [1 2 3 4 5 6 7 8 9 10]
# [1 2 3 4 5 6 7 8 9 10]
# [1 2 3 4 5 6 7 8 9 10]
# [1 2 3 4 5 6 7 8 9 10]
# [1 2"
1464,Write a Python program to extract a specified column from a given nested list. ,"def remove_column(nums, n):
   result = [i.pop(n) for i in nums]
   return result 

list1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]
n = 0
print(""Original Nested list:"")
print(list1)
print(""Extract 1st column:"")
print(remove_column(list1, n))

list2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]
n = 2
print(""\nOriginal Nested list:"")
print(list2)
print(""Extract 3rd column:"")
print(remove_column(list2, n))
","def extract_column(nested_list, column):
    """"""
    :param nested_list: nested list
    :param column: column to extract
    :return: list of values
    """"""
    return [value for row in nested_list for value in row[column]]

# driver code
nested_list = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]
print(extract_column("
1465,Write a Python program to print the following floating numbers with no decimal places. ,"x = 3.1415926
y = -12.9999
print(""\nOriginal Number: "", x)
print(""Formatted Number with no decimal places: ""+""{:.0f}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number with no decimal places: ""+""{:.0f}"".format(y));
print()
",">>> import math
>>> print(math.floor(5.5))
5
>>> print(math.ceil(5.5))
6
>>> print(math.sqrt(25))
2.73205
>>> print(math.log(100, 10))
1.0
>>> print(math.log(100, 10))
1.0
>>> print(math.log(100, 10))
1.0
>>> print(math.log(100, 10))
1.0"
1466,"Write a Python program to get the key, value and item in a dictionary. ","dict_num = {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}
print(""key  value  count"")
for count, (key, value) in enumerate(dict_num.items(), 1):
    print(key,'   ',value,'    ', count)
","def get_key(d, key):
    for k, v in d.items():
        if k == key:
            return v
    return None

def get_value(d, key):
    for k, v in d.items():
        if k == key:
            return v
    return None

def get_item(d, key):
    for k, v in d.items():
        if k == key:
            return v
    return None"
1467,Write a NumPy program to create an array with values ranging from 12 to 38.,"import numpy as np
x = np.arange(12, 38)
print(x)
","arr = np.arange(12, 38)

# Write your NumPy"
1468,Write a Pandas program to create a Pivot table and separate the gender according to whether they traveled alone or not to get the probability of survival. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table( 'survived' , [ 'sex' , 'alone' ] , 'class' )
print(result)
","import pandas as pd
import numpy as np

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pima-indians-diabetes.csv')

# Create a pivot table
pivot = df.pivot_table(index='Outcome', columns='Sex', values='Age', aggfunc='sum')

# Create a separate table for"
1469,Write a Python program to convert a given list of strings into list of lists using map function. ,"def strings_to_listOflists(str):
    result = map(list, str)
    return list(result)

colors = [""Red"", ""Green"", ""Black"", ""Orange""]
print('Original list of strings:')
print(colors)
print(""\nConvert the said list of strings into list of lists:"")
print(strings_to_listOflists(colors))
","def solution(str_list):
    return [list(map(str, s)) for s in str_list]

""""""

def solution(str_list):
    return [list(map(str, s)) for s in str_list]

print(solution([""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h""]))

""""""

def solution(str_list):
    return [list(map"
1470,"Write a Python program to get a single string from two given strings, separated by a space and swap the first two characters of each string. ","def chars_mix_up(a, b):
  new_a = b[:2] + a[2:]
  new_b = a[:2] + b[2:]

  return new_a + ' ' + new_b
print(chars_mix_up('abc', 'xyz'))
","def swap_case(s):
    return s.swapcase()

print(swap_case(""python""))

""""""

def swap_case(s):
    return s.swapcase()

print(swap_case(""python""))

""""""

def swap_case(s):
    return s.swapcase()

print(swap_case(""python""))

""""""

def swap_"
1471,"Write a Pandas program to get the day of month, day of year, week number and day of week from a given series of date strings. ","import pandas as pd
from dateutil.parser import parse
date_series = pd.Series(['01 Jan 2015', '10-02-2016', '20180307', '2014/05/06', '2016-04-12', '2019-04-06T11:20'])
print(""Original Series:"")
print(date_series)
date_series = date_series.map(lambda x: parse(x))
print(""Day of month:"")
print(date_series.dt.day.tolist())
print(""Day of year:"")
print(date_series.dt.dayofyear.tolist())
print(""Week number:"")
print(date_series.dt.weekofyear.tolist())
print(""Day of week:"")
print(date_series.dt.weekday_name.tolist())
","import pandas as pd

# Read the data from the file
df = pd.read_csv(""https://github.com/datasets/csv/blob/master/weather_data.csv?raw=true"")

# Create a dataframe with the data
df_weather = df.copy()

# Select the columns we want to use
df_weather = df_weather[['date', 'temp', '"
1472,Write a Python program to sort a given collection of numbers and its length in ascending order using Recursive Insertion Sort. ,"#Ref.https://bit.ly/3iJWk3w
from __future__ import annotations

def rec_insertion_sort(collection: list, n: int):
    # Checks if the entire collection has been sorted
    if len(collection) <= 1 or n <= 1:
        return
    insert_next(collection, n - 1)
    rec_insertion_sort(collection, n - 1)
def insert_next(collection: list, index: int):
    # Checks order between adjacent elements
    if index >= len(collection) or collection[index - 1] <= collection[index]:
        return
    # Swaps adjacent elements since they are not in ascending order
    collection[index - 1], collection[index] = (
        collection[index],
        collection[index - 1],
    )
    insert_next(collection, index + 1)
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Insertion Sort the said list becomes:"")
rec_insertion_sort(nums, len(nums))
print(nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Insertion Sort the said list becomes:"")
rec_insertion_sort(nums, len(nums))
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Insertion Sort the said list becomes:"")
rec_insertion_sort(nums, len(nums))
print(nums)
","def insertionSort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j] :
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(insertion"
1473,"Write a NumPy program to create a 11x3 array filled with student information (id, class and name) and shuffle the said array rows starting from 3","import numpy as np
np.random.seed(42) 
student = np.array([['stident_id', 'Class', 'Name'],
              ['01', 'V', 'Debby Pramod'],
              ['02', 'V', 'Artemiy Ellie'],
              ['03', 'V', 'Baptist Kamal'],
              ['04', 'V', 'Lavanya Davide'],
              ['05', 'V', 'Fulton Antwan'],
              ['06', 'V', 'Euanthe Sandeep'],
              ['07', 'V', 'Endzela Sanda'],
              ['08', 'V', 'Victoire Waman'],
              ['09', 'V', 'Briar Nur'],
              ['10', 'V', 'Rose Lykos']]) 
print(""Original array:"")
print(student)
np.random.shuffle(student[2:8])
print(""Shuffle the said array rows starting from 3rd to 9th"")
print(student)
","import numpy as np

arr = np.array([[1,2,3],[4,5,6],[7,8,9]])
np.random.shuffle(arr)
print(arr)

""""""

# Solution

import numpy as np

arr = np.array([[1,2,3],[4,5,6],[7,8,9]])
np.random.sh"
1474,Write a Pandas program to get all the sighting years of the unidentified flying object (ufo) and create the year as column. ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nSighting years of the unidentified flying object:"")
df[""Year""] = df.Date_time.dt.year
print(df.head(10))
","# Solution:

# Input:
# ufo = pd.read_csv('ufo.csv')
# year = ufo['year'].unique()
# year = year.tolist()
# year = year[0]
# year = year.tolist()
# year = year[0]
# year = year.tolist()
# year = year[0]
# year = year.tolist"
1475,Write a Python program to remove a key from a dictionary. ,"myDict = {'a':1,'b':2,'c':3,'d':4}
print(myDict)
if 'a' in myDict: 
    del myDict['a']
print(myDict)
","def remove_key(d, key):
    if key in d:
        del d[key]
    else:
        print(""Key not found"")

d = {'a': 1, 'b': 2, 'c': 3}
remove_key(d, 'a')
print(d)

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
1476,Write a Python program to find the occurrences of 10 most common words in a given text. ,"from collections import Counter
import re
text = """"""The Python Software Foundation (PSF) is a 501(c)(3) non-profit 
corporation that holds the intellectual property rights behind
the Python programming language. We manage the open source licensing 
for Python version 2.1 and later and own and protect the trademarks 
associated with Python. We also run the North American PyCon conference 
annually, support other Python conferences around the world, and 
fund Python related development with our grants program and by funding 
special projects.""""""
words = re.findall('\w+',text)
print(Counter(words).most_common(10))
","import string

def most_common_words(text):
    text = text.lower()
    text = text.split()
    text = [word for word in text if word not in string.punctuation]
    text =''.join(text)
    text = text.split()
    text = [word for word in text if word not in string.punctuation]
    text =''.join(text)
    text = text.split()
    text ="
1477,"Write a Python function to get the city, state and country name of a specified latitude and longitude using Nominatim API and Geopy package. ","from geopy.geocoders import Nominatim
geolocator = Nominatim(user_agent=""geoapiExercises"")
def city_state_country(coord):
    location = geolocator.reverse(coord, exactly_one=True)
    address = location.raw['address']
    city = address.get('city', '')
    state = address.get('state', '')
    country = address.get('country', '')
    return city, state, country
print(city_state_country(""47.470706, -99.704723""))
","def get_city_state_country(lat, lon):
    import geopy.geocoders
    import geopy.distance
    import geopy.extra.rate_limiter
    import geopy.extra.rate_limiter
    import geopy.distance
    import geopy.distance
    import geopy.distance
    import geopy.distance
    import geopy.distance
    import geopy."
1478,Write a Pandas program to create a period index represent all monthly boundaries of a given year. Also print start and end time for each period object in the said index. ,"import pandas as pd
import datetime
from datetime import datetime, date
sdt = datetime(2020, 1, 1)
edt = datetime(2020, 12, 31)
dateset = pd.period_range(sdt, edt, freq='M')
print(""All monthly boundaries of a given year:"")
print(dateset) 
print(""\nStart and end time for each period object in the said index:"")
for d in dateset: 
    print (""{0} {1}"".format(d.start_time, d.end_time)) 
","import pandas as pd

# Create a dataframe
df = pd.DataFrame(columns=['Month', 'Start', 'End'])

# Create a loop to iterate through the dataframe
for i in range(1, 13):
    # Create a new dataframe with the month and start and end time
    new_df = pd.DataFrame(columns=['Month', '"
1479,Write a Python program to create a new list taking specific elements from a tuple and convert a string value to integer. ,"student_data  = [('Alberto Franco','15/05/2002','35kg'), ('Gino Mcneill','17/05/2002','37kg'), ('Ryan Parkes','16/02/1999', '39kg'), ('Eesha Hinton','25/09/1998', '35kg')]
print(""Original data:"")
print(student_data)
students_data_name = list(map(lambda x:x[0], student_data))
students_data_dob = list(map(lambda x:x[1], student_data))
students_data_weight = list(map(lambda x:int(x[2][:-2]), student_data))
print(""\nStudent name:"")
print(students_data_name)
print(""Student name:"")
print(students_data_dob)
print(""Student weight:"")
print(students_data_weight)
","def solution(tuple):
    return tuple[0]

print(solution((1, 2, 3, 4, 5)))

""""""

def solution(tuple):
    return tuple[0]

print(solution((1, 2, 3, 4, 5)))

""""""

def solution(tuple):
    return tuple[0]

print(solution((1, 2, 3, 4, 5)))

"""""""
1480,"Write a Python program to create a floating-point representation of the Arrow object, in UTC time using arrow module. ","import arrow
a = arrow.utcnow()
print(""Current Datetime:"")
print(a)
print(""\nFloating-point representation of the said Arrow object:"")
f = arrow.utcnow().float_timestamp
print(f) 
","import arrow

# create a datetime object
dt = arrow.now()

# create a string representation of the datetime object
print(dt.format('YYYY-MM-DD HH:mm:ss'))

# create a datetime object from a string representation
dt = arrow.get(dt.format('YYYY-MM-DD HH:mm:ss'))

# create a string representation of the datetime object
print(dt.format('"
1481,Write a NumPy program to compute the line graph of a set of data. ,"import numpy as np    
import matplotlib.pyplot as plt
arr = np.random.randint(1, 50, 10)
y, x = np.histogram(arr, bins=np.arange(51))
fig, ax = plt.subplots()
ax.plot(x[:-1], y)
fig.show()
","python solution.py

""""""

import numpy as np
import matplotlib.pyplot as plt

def plot_line_graph(x, y):
    """"""
    Plot a line graph of the data.
    
    Parameters
    ----------
    x : ndarray
        The x-coordinates of the data points.
    y : ndarray
        The y-coordinates of the data points.
    
    Returns
    -------
    None."
1482,Write a Python program to remove lowercase substrings from a given string. ,"import re
str1 = 'KDeoALOklOOHserfLoAJSIskdsf'
print(""Original string:"")
print(str1)
print(""After removing lowercase letters, above string becomes:"")
remove_lower = lambda text: re.sub('[a-z]', '', text)
result =  remove_lower(str1)
print(result)
","def remove_lowercase_substrings(string):
    lowercase_substrings = []
    for i in string:
        if i.islower():
            lowercase_substrings.append(i)
    return lowercase_substrings

print(remove_lowercase_substrings(""Python is a programming language""))

""""""

def remove_lowercase_substrings(string):
    lowercase_substrings = []
    for i in string:
        if i.islower"
1483,Write a Python program to count occurrences of a substring in a string. ,"str1 = 'The quick brown fox jumps over the lazy dog.'
print()
print(str1.count(""fox""))
print()
","def count_substring(string, sub_string):
    count = 0
    for i in range(len(string)):
        if string[i:i+len(sub_string)] == sub_string:
            count += 1
    return count

# driver code
string = ""Python""
sub_string = ""is""

print(count_substring(string, sub_string))

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)"
1484,Write a Python program that reads each row of a given csv file and skip the header of the file. Also print the number of rows and the field names. ,"import csv
fields = []
rows = []
with open('departments.csv', newline='') as csvfile:
 data = csv.reader(csvfile, delimiter=' ', quotechar=',')
 # Following command skips the first row of the CSV file.
 fields = next(data)
 for row in data:
   print(', '.join(row))
print(""\nTotal no. of rows: %d""%(data.line_num))
print('Field names are:')
print(', '.join(field for field in fields))
","python solution.py

""""""

import csv

with open('data.csv', newline='') as f:
    reader = csv.reader(f)
    header_row = next(reader)
    print(f""CSV Header: {header_row}"")
    for row in reader:
        print(row)"
1485,Write a Pandas program to set value in a specific cell in a given dataframe using index. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32]},
     index = ['t1', 't2', 't3', 't4', 't5', 't6'])
print(""Original DataFrame:"")
print(df)
print(""\nSet school code 's004' to 's005':"")
df.at['t6', 'school_code'] = 's005'
print(df)
print(""\nSet date_of_birth of 'Alberto Franco' to '16/05/2002':"")
df.at['t1', 'date_of_birth'] = '16/05/2002'
print(df)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob'],
                   'Age': [30, 32, 33, 34],
                   'Score': [85, 90, 95, 100]})

# Create a new column
df['Age'] = df['Age'].apply(lambda x: x * 2)

# Print the dataframe
print(df)"
1486, Write a Python program to check whether a page contains a title or not. ,"from urllib.request import urlopen
from bs4 import BeautifulSoup
html = urlopen('https://www.wikipedia.org/')
bs = BeautifulSoup(html, ""html.parser"")
nameList = bs.findAll('a', {'class' : 'link-box'})
for name in nameList:
  print(name.get_text())
  ","import re

def check_title(page):
    if re.search(r'^[A-Za-z0-9_]+$', page):
        return True
    else:
        return False

page = input(""Enter the page to check: "")

if check_title(page):
    print(""Title contains a word"")
else:
    print(""Title does not contain a word"")

# Solution:

# import re

# def check_title"
1487,Write a Pandas program to generate sequences of fixed-frequency dates and time spans. ,"import pandas as pd
dtr = pd.date_range('2018-01-01', periods=12, freq='H')
print(""Hourly frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='min')
print(""\nMinutely frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='S')
print(""\nSecondly frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='2H')
print(""nMultiple Hourly frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='5min')
print(""\nMultiple Minutely frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='BQ')
print(""\nMultiple Secondly frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='w')
print(""\nWeekly frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='2h20min')
print(""\nCombine together day and intraday offsets-1:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='1D10U')
print(""\nCombine together day and intraday offsets-2:"")
print(dtr)
","import pandas as pd

# Create a Pandas DataFrame
df = pd.DataFrame({""Date"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   ""Time"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   ""Duration"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

# Create a Pandas Series"
1488,Write a Python program to sum of all counts in a collections.,"import collections
num = [2,2,4,6,6,8,6,10,4]
print(sum(collections.Counter(num).values()))
","def sum_of_all_counts(collection):
    """"""
    :type collection: List[int]
    :rtype: int
    """"""
    return sum(collection)
    # solution
    # return sum(collection)
    # solution
    # return sum(collection)
    # solution
    # return sum(collection)
    # solution
    # return sum(collection)
    # solution
    # return sum(collection)
    # solution
    # return sum(collection)"
1489,Write a Python program to find the index of a given string at which a given substring starts. If the substring is not found in the given string return 'Not found'. ,"def find_Index(str1, pos):
    if len(pos) > len(str1):
        return 'Not found'

    for i in range(len(str1)):

        for j in range(len(pos)):

            if str1[i + j] == pos[j] and j == len(pos) - 1:
                return i
                
            elif str1[i + j] != pos[j]:
                break

    return 'Not found'
print(find_Index(""Python Exercises"", ""Ex""))
print(find_Index(""Python Exercises"", ""yt""))
print(find_Index(""Python Exercises"", ""PY""))
","def find_index(string, substring):
    for i in range(len(string)):
        if string[i:i+len(substring)] == substring:
            return i
    return 'Not found'

print(find_index('abcdefg', 'ab'))
print(find_index('abcdefg', 'ab'))
print(find_index('abcdef"
1490,Write a Pandas program to import three datasheets from a given excel data (employee.xlsx ) into a single dataframe and export the result into new Excel file. ,"import pandas as pd
import numpy as np
df1 = pd.read_excel('E:\employee.xlsx',sheet_name=0)
df2 = pd.read_excel('E:\employee.xlsx',sheet_name=1)
df3 = pd.read_excel('E:\employee.xlsx',sheet_name=2)
df = pd.concat([df1, df2, df3])
df.to_excel('e:\output.xlsx', index=False)
","import pandas as pd

df = pd.read_excel('employee.xlsx')

df.to_excel('employee.xlsx')

# Solution:

# import pandas as pd
# import numpy as np
# import pandas as pd
# import numpy as np
# import pandas as pd
# import n"
1491,"Write a Python program that accept name of given subject and marks. Input number of subjects in first line and subject name,marks separated by a space in next line. Print subject name and marks in order of its first occurrence. ","import collections, re
n = int(input(""Number of subjects: ""))
item_order = collections.OrderedDict()
for i in range(n):
   sub_marks_list = re.split(r'(\d+)$',input(""Input Subject name and marks: "").strip())
   subject_name = sub_marks_list[0]
   item_price = int(sub_marks_list[1])
   if subject_name not in item_order:
       item_order[subject_name]=item_price
   else:
       item_order[subject_name]=item_order[subject_name]+item_price
           
for i in item_order:
   print(i+str(item_order[i]))
","def main():
    name = input(""Enter your name: "")
    marks = input(""Enter your marks: "")
    print(name + "" "" + marks)

if __name__ == ""__main__"":
    main()

""""""

# Solution

def main():
    name = input(""Enter your name: "")
    marks ="
1492,Write a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings. ,"def match_words(words):
  ctr = 0

  for word in words:
    if len(word) > 1 and word[0] == word[-1]:
      ctr += 1
  return ctr

print(match_words(['abc', 'xyz', 'aba', '1221']))
","def solution(strs):
    count = 0
    for i in range(len(strs)):
        if len(strs[i]) >= 2 and strs[i][0] == strs[i][-1]:
            count += 1
    return count

print(solution([""aba"", ""cdc"", ""aaab"", ""ccb""]))
print(solution([""a"","
1493,Write a Pandas program to find the positions of the values neighboured by smaller values on both sides in a given series. ,"import pandas as pd
import numpy as np
nums = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])
print(""Original series:"")
print(nums)
print(""\nPositions of the values surrounded by smaller values on both sides:"")
temp = np.diff(np.sign(np.diff(nums)))
result = np.where(temp == -2)[0] + 1
print(result)
","import pandas as pd
import numpy as np

# Read the data
df = pd.read_csv(""data.csv"")

# Create a new dataframe with the new column
df_new = df.copy()

# Create a new column with the new column
df_new[""smaller_value""] = df[""smaller_value""].apply(lambda x: x if x < x else x - 1)

# Create"
1494,Write a Python program to print the following integers with '*' on the right of specified width. ,"x = 3
y = 123
print(""\nOriginal Number: "", x)
print(""Formatted Number(right padding, width 2): ""+""{:*< 3d}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number(right padding, width 6): ""+""{:*< 7d}"".format(y));
print()
","def print_integers(n, width):
    for i in range(n):
        print('*' * width)

print_integers(10, 5)
print_integers(20, 5)
print_integers(30, 5)
print_integers(40, 5)
print_integers(50, 5)
print_integers(60, 5)
print_integers(70, 5)
print_integers(80,"
1495,Write a NumPy program to convert an array to a float type. ,"import numpy as np
import numpy as np
a = [1, 2, 3, 4]
print(""Original array"")
print(a)
x = np.asfarray(a)
print(""Array converted to a float type:"")
print(x)
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
print(a)

a = np.array([1, 2, 3, 4, 5])
print(a.dtype)

a = np.array([1, 2, 3, 4, 5])
print(a.dtype)

a = np.array([1, 2, 3, 4, 5])
print(a.dtype)

a = np.array"
1496,Write a Python program to count the same pair in two given lists. use map() function. ,"from operator import eq
def count_same_pair(nums1, nums2):
    result = sum(map(eq, nums1, nums2))
    return result

nums1 = [1,2,3,4,5,6,7,8]
nums2 = [2,2,3,1,2,6,7,9]
print(""Original lists:"")
print(nums1)
print(nums2)
print(""\nNumber of same pair of the said two given lists:"")
print(count_same_pair(nums1, nums2))
","def count_pair(list1, list2):
    count = 0
    for i in list1:
        for j in list2:
            if i == j:
                count += 1
    return count

print(count_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def count_pair("
1497,Write a Python program to find unique triplets whose three elements gives the sum of zero from an array of n integers. ,"def three_sum(nums):
  result = []
  nums.sort()
  for i in range(len(nums)-2):
    if i> 0 and nums[i] == nums[i-1]:
      continue
    l, r = i+1, len(nums)-1
    while l < r:
      s = nums[i] + nums[l] + nums[r]
      if s > 0:
        r -= 1
      elif s < 0:
          l += 1
      else:
        # found three sum
        result.append((nums[i], nums[l], nums[r]))
        # remove duplicates
        while l < r and nums[l] == nums[l+1]:
          l+=1
          while l < r and nums[r] == nums[r-1]:
            r -= 1
            l += 1
            r -= 1
          return result

x = [1, -6, 4, 2, -1, 2, 0, -2, 0 ]
print(three_sum(x))
","def triplets(arr):
    arr.sort()
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            for k in range(j+1, len(arr)):
                if arr[i] + arr[j] + arr[k] == 0:
                    return [arr[i], arr[j], arr[k]]

print(triplets([1, 2,"
1498,Write a Python program to write (without writing separate lines between rows) and read a CSV file with specified delimiter. Use csv.reader,"import csv     
fw = open(""test.csv"", ""w"", newline='')
writer = csv.writer(fw, delimiter = "","")
writer.writerow([""a"",""b"",""c""])
writer.writerow([""d"",""e"",""f""])
writer.writerow([""g"",""h"",""i""])
fw.close()
 
fr = open(""test.csv"", ""r"")
csv = csv.reader(fr, delimiter = "","")
for row in csv:
  print(row) 
fr.close()
","import csv

with open('test.csv', 'w', newline='') as f:
    writer = csv.writer(f)
    writer.writerow(['Name', 'Age', 'Class'])
    writer.writerow(['John', 25, 'First'])
    writer.writerow(['Anna', 27, 'Second'])
    writer.writerow(['Peter', 29, 'Third'])"
1499,"Write a Python program to make an iterator that drops elements from the iterable as long as the elements are negative; afterwards, returns every element. ","import itertools as it
def drop_while(nums):
    return it.takewhile(lambda x : x < 0, nums)
nums = [-1,-2,-3,4,-10,2,0,5,12]
print(""Original list: "",nums)
result = drop_while(nums)
print(""Drop elements from the said list as long as the elements are negative\n"",list(result))
#Alternate solution
def negative_num(x):
    return x < 0
def drop_while(nums):
    return it.dropwhile(negative_num, nums)
nums = [-1,-2,-3,4,-10,2,0,5,12]
print(""Original list: "",nums)
result = drop_while(nums)
print(""Drop elements from the said list as long as the elements are negative\n"",list(result))
","def negative_iterator(iterable):
    for element in iterable:
        if element < 0:
            yield element

iterator = negative_iterator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(next(iterator))
print(next(iterator))
print(next(iterator))
print(next(iterator))
print(next(iterator))
print(next(iterator"
1501,Write a Pandas program to create a combination from two dataframes where a column id combination appears more than once in both dataframes.,"import pandas as pd
data1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],
                     'key2': ['K0', 'K1', 'K0', 'K1'],
                     'P': ['P0', 'P1', 'P2', 'P3'],
                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) 
data2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],
                      'key2': ['K0', 'K0', 'K0', 'K0'],
                      'R': ['R0', 'R1', 'R2', 'R3'],
                      'S': ['S0', 'S1', 'S2', 'S3']})
print(""Original DataFrames:"")
print(data1)
print(""--------------------"")
print(data2)
print(""\nMerged Data (many-to-many join case):"")
result = pd.merge(data1, data2, on='key1')
print(result)
","import pandas as pd
import numpy as np

df1 = pd.DataFrame({'id': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                    'name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue', 'Charlie', 'Rolf', 'Charlie', 'Anna']})
df2 = pd.DataFrame({'id': [1"
1502,"Write a Python program to create a new Arrow object, representing the ""ceiling"" of the timespan of the Arrow object in a given timeframe using arrow module. The timeframe can be any datetime property like day, hour, minute. ","import arrow
print(arrow.utcnow())
print(""Hour ceiling:"")
print(arrow.utcnow().ceil('hour'))
print(""\nMinute ceiling:"")
print(arrow.utcnow().ceil('minute'))
print(""\nSecond ceiling:"")
print(arrow.utcnow().ceil('second')) 
","import arrow

def create_arrow(time_span):
    return arrow.get(time_span)

def get_arrow(time_span):
    return arrow.get(time_span)

def get_arrow_time_span(time_span):
    return arrow.get(time_span).time_span

def get"
1503,Write a Python program to move all spaces to the front of a given string in single traversal. ,"def moveSpaces(str1): 
    no_spaces = [char for char in str1 if char!=' ']   
    space= len(str1) - len(no_spaces)
    # Create string with spaces
    result = ' '*space    
    return result + ''.join(no_spaces)
  
s1 = ""Python Exercises""
print(""Original String:\n"",s1)

print(""\nAfter moving all spaces to the front:"")
print(moveSpaces(s1))
","def move_spaces(s):
    # your code goes here
    return s.lstrip()

# driver code
s = ""  hello world  ""
print(move_spaces(s))

# Output:
# hello world
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
1504,Write a Python program to check if all the elements of a list are included in another given list. ,"def test_includes_all(nums, lsts):
  for x in lsts:
    if x not in nums:
      return False
  return True
print(test_includes_all([10, 20, 30, 40, 50, 60], [20, 40]))
print(test_includes_all([10, 20, 30, 40, 50, 60], [20, 80]))
","def check_all(list1, list2):
    for i in list1:
        if i not in list2:
            return False
    return True

print(check_all([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))

""""""

def check_all(list1, list2):
    for i in list1:
        if i not in list2:
            return False
    return True"
1505,"Write a NumPy program to create a 3x3 identity matrix, i.e. diagonal elements are 1, the rest are 0. ","import numpy as np
x = np.eye(3)
print(x)
","import numpy as np

A = np.array([[1, 2, 3],
              [4, 5, 6],
              [7, 8, 9]])

print(A)

# Solution:

# A = np.eye(3)
# print(A)

# Solution:

# A = np.diag([1, 2, 3])
# print(A)

# Solution:"
1506,Write a Python program to create a 3X3 grid with numbers. ,"nums = []
for i in range(3):
    nums.append([])
    for j in range(1, 4):
        nums[i].append(j)
print(""3X3 grid with numbers:"")
print(nums)
","grid = [[1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]]

""""""

grid = [[1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]]

def print_grid(grid):
    for i in range(len(grid)):
        for j in range(len(grid[i])):
            print(grid[i][j], end="" "")
        print()"
1507,Write a Python program that sum the length of the names of a given list of names after removing the names that starts with an lowercase letter. Use lambda function. ,"sample_names = ['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']
sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))
print(""Result:"")
print(len(''.join(sample_names)))
","def solution(names):
    return sum([len(name.split('.')[0].lower()) for name in names])

""""""

def solution(names):
    return sum([len(name.split('.')[0].lower()) for name in names])

print(solution([""Alex"", ""Brian"", ""Chris"", ""Dave"", ""Eve"", ""Fred"", ""George"", ""George"", ""George"","
1508,"Write a Python program to extract year, month and date value from current datetime using arrow module. ","import arrow
a = arrow.utcnow()
print(""Year:"")
print(a.year)
print(""\nMonth:"")
print(a.month)
print(""\nDate:"")
print(a.day)
","import arrow

current_date = arrow.now()
print(current_date.year)
print(current_date.month)
print(current_date.day)

# Solution:

import arrow

current_date = arrow.now()
print(current_date.year)
print(current_date.month)
print(current_date.day)

# Solution:

import arrow

current_date = arrow.now()
print("
1509,"Write a Pandas program to create a histograms plot of opening, closing, high, low stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Open','Close','High','Low']]
#df3 = df2.set_index('Date')
plt.figure(figsize=(25,25))
df2.plot.hist(alpha=0.5)
plt.suptitle('Opening/Closing/High/Low stock prices of Alphabet Inc.,\n From 01-04-2020 to 30-09-2020', fontsize=12, color='blue')
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

# Read the data
df = pd.read_csv('Alphabet Inc.csv')

# Create a histogram plot
plt.hist(df['Open'], bins=30)

# Format the plot
plt.title('Histogram of Alphabet Inc. Opening Price')
plt.xlabel('Opening Price')
plt."
1510, Write a Python program to list all language names and number of related articles in the order they appear in wikipedia.org. ,"#https://bit.ly/2lVhlLX
# via: https://analytics.usa.gov/
import requests
url = 'https://analytics.usa.gov/data/live/realtime.json'
j = requests.get(url).json()
print(""Number of people visiting a U.S. government website-"")
print(""Active Users Right Now:"")
print(j['data'][0]['active_visitors'])
  ","import re

def get_language_names(url):
    language_names = []
    page = requests.get(url)
    soup = BeautifulSoup(page.content, 'html.parser')
    for link in soup.find_all('a', class_='wikitable'):
        language_names.append(link.text)
    return language_names

def get_number_of_related_articles(url):"
1511,"Write a NumPy program to count the number of dimensions, number of elements and number of bytes for each element in a given array. ","import numpy as np    
print(""\nOriginal arrays:"")
x = np.array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])
print(x)
print(""\nNumber of dimensions:"")
print(x.ndim)
print(""Number of elements:"")
print(x.size)
print(""Number of bytes for each element in the said array:"")
print(x.itemsize) 
","import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(arr.ndim)
print(arr.size)
print(arr.itemsize)

# Solution:

# arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
# print(arr."
1512,Write a Pandas program to find the all the business quarterly begin and end dates of a specified year. ,"import pandas as pd
q_start_dates = pd.date_range('2020-01-01', '2020-12-31', freq='BQS-JUN')
q_end_dates = pd.date_range('2020-01-01', '2020-12-31', freq='BQ-JUN')
print(""All the business quarterly begin dates of 2020:"")
print(q_start_dates.values)
print(""\nAll the business quarterly end dates of 2020:"")
print(q_end_dates.values)
","import pandas as pd

# Read the data from the csv file
df = pd.read_csv('business_quaterly_data.csv')

# Create a new dataframe with the business quarter dates
business_quarter_dates = df[['Business quarter', 'Business quarter date']]

# Create a new dataframe with the business quarter dates
business_quarter_dates_new = business_quarter_dates.groupby(['Business quarter']).agg"
1513,Write a Python program to replace dictionary values with their average. ,"def sum_math_v_vi_average(list_of_dicts):
    for d in list_of_dicts:
        n1 = d.pop('V')
        n2 = d.pop('VI')
        d['V+VI'] = (n1 + n2)/2
    return list_of_dicts 
student_details= [
  {'id' : 1, 'subject' : 'math', 'V' : 70, 'VI' : 82},
  {'id' : 2, 'subject' : 'math', 'V' : 73, 'VI' : 74},
  {'id' : 3, 'subject' : 'math', 'V' : 75, 'VI' : 86}
]
print(sum_math_v_vi_average(student_details))
","def solution(d):
    return sum(d.values()) / len(d)

""""""

def solution(d):
    return sum(d.values()) / len(d)

d = {'a': 1, 'b': 2, 'c': 3}
print(solution(d))"
1514,"Write a Python program to convert string values of a given dictionary, into integer/float datatypes. ","def convert_to_int(lst):
    result = [dict([a, int(x)] for a, x in b.items()) for b in lst]
    return result

def convert_to_float(lst):
    result = [dict([a, float(x)] for a, x in b.items()) for b in lst]
    return result

nums =[{ 'x':'10' , 'y':'20' , 'z':'30' }, { 'p':'40', 'q':'50', 'r':'60'}]
print(""Original list:"")
print(nums)
print(""\nString values of a given dictionary, into integer types:"")
print(convert_to_int(nums))
nums =[{ 'x':'10.12', 'y':'20.23', 'z':'30'}, { 'p':'40.00', 'q':'50.19', 'r':'60.99'}]
print(""\nOriginal list:"")
print(nums)
print(""\nString values of a given dictionary, into float types:"")
print(convert_to_float(nums))
","def convert_dict(d):
    for key, value in d.items():
        if isinstance(value, dict):
            d[key] = convert_dict(value)
        elif isinstance(value, list):
            d[key] = [convert_dict(i) for i in value]
    return d

d = {'a': 1, 'b': 2, 'c': 3}
print(convert_dict(d))"
1515,Write a Python program to remove specific words from a given list. ,"def remove_words(list1, remove_words):
    for word in list(list1):
        if word in remove_words:
            list1.remove(word)
    return list1        
colors = ['red', 'green', 'blue', 'white', 'black', 'orange']
remove_colors = ['white', 'orange']
print(""Original list:"")
print(colors)
print(""\nRemove words:"")
print(remove_colors)
print(""\nAfter removing the specified words from the said list:"")
print(remove_words(colors, remove_colors))
","def remove_words(words, words_to_remove):
    for word in words:
        if word in words_to_remove:
            words.remove(word)
    return words

print(remove_words(['apple', 'banana', 'orange', 'grape', 'pear'], ['banana', 'apple']))

""""""

def remove_words(words, words_to_remove):
    for word in words:
        if word in words_to_remove:"
1516,"Write a NumPy program to test equal, not equal, greater equal, greater and less test of all the elements of two given arrays. ","import numpy as np
x1 = np.array(['Hello', 'PHP', 'JS', 'examples', 'html'], dtype=np.str)
x2 = np.array(['Hello', 'php', 'Java', 'examples', 'html'], dtype=np.str)
print(""\nArray1:"")
print(x1)
print(""Array2:"")
print(x2)
print(""\nEqual test:"")
r = np.char.equal(x1, x2)
print(r)
print(""\nNot equal test:"")
r = np.char.not_equal(x1, x2)
print(r)
print(""\nLess equal test:"")
r = np.char.less_equal(x1, x2)
print(r)
print(""\nGreater equal test:"")
r = np.char.greater_equal(x1, x2)
print(r)
print(""\nLess test:"")
r = np.char.less(x1, x2)
print(r)
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([1, 2, 3, 4, 5])

print(a == b)
print(a!= b)
print(a >= b)
print(a <= b)
print(a > b)
print(a < b)

# Output:
# True
# True
# True
#"
1517,Write a Python program to reverse each list in a given list of lists. ,"def reverse_list_lists(nums):
    for l in nums:
        l.sort(reverse = True)
    return nums    
nums = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
print(""Original list of lists:"")
print(nums)
print(""\nReverse each list in the said list of lists:"")
print(reverse_list_lists(nums))
","def reverse_list(lst):
    for i in range(len(lst)):
        lst[i] = lst[i][::-1]
    return lst

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(reverse_list(lst))

""""""

# Solution 1

def reverse_list(lst):
    for i in range(len(lst)):"
1518,Write a Pandas program to compute the autocorrelations of a given numeric series. ,"import pandas as pd
import numpy as np
num_series = pd.Series(np.arange(15) + np.random.normal(1, 10, 15))
print(""Original series:"")
print(num_series)
autocorrelations = [num_series.autocorr(i).round(2) for i in range(11)]
print(""\nAutocorrelations of the said series:"")
print(autocorrelations[1:])
","import pandas as pd

# Read the data
df = pd.read_csv('../data/data.csv')

# Create a new dataframe with the autocorrelation of the numeric columns
autocorr = df.corr()

# Print the first 5 rows of the dataframe
autocorr.head()

# Create a new dataframe with the autocorrelation of the numeric columns
autocorr = df.corr()

# Print the"
1519,Write a NumPy program to split the element of a given array to multiple lines. ,"import numpy as np
x = np.array(['Python\Exercises, Practice, Solution'], dtype=np.str)
print(""Original Array:"")
print(x)
r = np.char.splitlines(x)
print(r)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr)

# Solution:

# arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
# print(arr)
# print(arr.shape)
# print(arr.ndim)
# print(arr.size)
# print(arr."
1520,Write a Python program to find the text of the first <a> tag of a given html text. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc, 'html.parser')
print(""Text of the first <a> tag:"")
print(soup.find('a').text)

","import re

html = '''
<html>
<head>
<title>First Title</title>
</head>
<body>
<p>First paragraph.</p>
<p>Second paragraph.</p>
<p>Third paragraph.</p>
</body>
</html>
'''

# Solution:

# Solution 1:
# regex = re.compile(r'<a.*?>')
# result = regex.find"
1521,Write a Python program to combine two dictionary adding values for common keys. ,"from collections import Counter
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 300, 'b': 200, 'd':400}
d = Counter(d1) + Counter(d2)
print(d)
","def solution(d1, d2):
    d1.update(d2)
    return d1

""""""

def solution(d1, d2):
    d1.update(d2)
    return d1

d1 = {'a': 1, 'b': 2, 'c': 3}
d2 = {'a': 1, 'b': 2, 'd': 4}

print(solution(d1, d2))"
1522,Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and to sort the records by the hire_date column. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx')
result = df.sort_values('hire_date')
result
","import pandas as pd

# Read the data into a pandas dataframe
df = pd.read_excel('employee.xlsx')

# Sort the dataframe by the hire_date column
df.sort_values(by='hire_date', inplace=True)

# Print the dataframe
print(df)

# Create a Pandas dataframe from the dataframe"
1523,Write a NumPy program to create a one dimensional array of forty pseudo-randomly generated values. Select random numbers from a uniform distribution between 0 and 1. ,"import numpy as np  
np.random.seed(10)
print(np.random.rand(40))
","import numpy as np

# Create an array of random numbers between 0 and 1
np.random.seed(0)
x = np.random.uniform(0, 1, size=40)

# Create a one dimensional array of forty pseudo-randomly generated values
y = np.zeros(40)
for i in range(40):
    y[i] = x[i]

# Display the"
1524,Write a NumPy program to convert numpy dtypes to native python types. ,"import numpy as np
print(""numpy.float32 to python float"")
x = np.float32(0)
print(type(x))
pyval = x.item()
print(type(pyval))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
print(a.dtype)

b = np.array([1, 2, 3, 4, 5], dtype=np.int64)
print(b.dtype)

c = np.array([1, 2, 3, 4, 5], dtype=np.float64)
print(c.dtype)

d = np.array([1, 2,"
1525,Write a Python program to get the every nth element in a given list. ,"def every_nth(nums, nth):
  return nums[nth - 1::nth]
print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))
print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))
print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))
print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))
","def get_nth_element(lst, n):
    return lst[n]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
print(get_nth_element(lst, n))

""""""

def get_nth_element(lst, n):
    return lst[n]

lst = [1, 2, 3, 4, 5, 6, 7"
1526,Write a NumPy program to find the number of weekdays in March 2017. ,"import numpy as np
print(""Number of weekdays in March 2017:"")
print(np.busday_count('2017-03', '2017-04'))
","import numpy as np

# Input:
#   data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
#                    [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
#                    [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]])
# Output:
#   weekdays = np.array([[1, 2, 3, 4"
1527,Write a Python program to sort a given mixed list of integers and strings. Numbers must be sorted before strings. ,"def sort_mixed_list(mixed_list):
    int_part = sorted([i for i in mixed_list if type(i) is int])
    str_part = sorted([i for i in mixed_list if type(i) is str])
    return int_part + str_part
mixed_list = [19,'red',12,'green','blue', 10,'white','green',1]
print(""Original list:"")
print(mixed_list)
print(""\nSort the said  mixed list of integers and strings:"")
print(sort_mixed_list(mixed_list))
","import random

def sort_mixed_list(mixed_list):
    # your code goes here
    mixed_list.sort()
    return mixed_list

# keep this function call here 
print(sort_mixed_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(sort_mixed_list([1, 2, 3, 'a', 'b', 'c', '"
1528,Write a Python program to reverse a string. ,"def reverse_string(str1):
    return ''.join(reversed(str1))
print()
print(reverse_string(""abcdef""))
print(reverse_string(""Python Exercises.""))
print()
","def reverse_string(string):
    return string[::-1]

print(reverse_string(""hello""))

""""""

def reverse_string(string):
    return string[::-1]

print(reverse_string(""hello""))"
1529,Write a Python program to insert an element before each element of a list. ,"color = ['Red', 'Green', 'Black']
print(""Original List: "",color)
color = [v for elt in color for v in ('c', elt)]
print(""Original List: "",color)
","def insert_before(list, element):
    for i in range(len(list)):
        list[i] = list[i] + element
    return list

print(insert_before([1, 2, 3, 4, 5], 6))

""""""

def insert_before(list, element):
    for i in range(len(list)):
        list[i] = list[i] + element
    return list

print(insert_before([1, 2"
1530,Write a NumPy program to get the row numbers in given array where at least one item is larger than a specified value. ,"import numpy as np
num = np.arange(36)
arr1 = np.reshape(num, [4, 9])
print(""Original array:"")
print(arr1)
result  = np.where(np.any(arr1>10, axis=1))
print(""\nRow numbers where at least one item is larger than 10:"")
print(result)
","import numpy as np

arr = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]])

print(arr[arr > 5])

# Output:
# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# [10, 9"
1531,Write a NumPy program to get the indices of the sorted elements of a given array. ,"import numpy as np
student_id = np.array([1023, 5202, 6230, 1671, 1682, 5241, 4532])
print(""Original array:"")
print(student_id)
i = np.argsort(student_id)
print(""Indices of the sorted elements of a given array:"")
print(i)
","python solution.py

""""""

import numpy as np

def get_indices(arr, key):
    """"""
    Returns the indices of the elements of arr that match the key.
    
    Parameters
    ----------
    arr : ndarray
        The array to search.
    key : function
        The key function to use to compare the elements.
    
    Returns
    -------
    indices : ndarray
        The indices of the elements of arr that"
1532,Write a Python program to remove all strings from a given list of tuples. ,"def test(list1):
    result =   [tuple(v for v in i if not isinstance(v, str)) for i in list1]
    return list(result)

marks = [(100, 'Math'), (80, 'Math'), (90, 'Math'), (88, 'Science', 89), (90, 'Science', 92)]
print(""\nOriginal list:"")
print(marks)
print(""\nRemove all strings from the said list of tuples:"")
print(test(marks))
","def remove_strings(lst):
    for i in lst:
        lst.remove(i)
    return lst

lst = [('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i')]
print(remove_strings(lst))

""""""

def remove_strings(lst):
    for i in lst:
        lst.remove(i)
    return lst"
1533,Write a Python program to sort Counter by value. ,"from collections import Counter
x = Counter({'Math':81, 'Physics':83, 'Chemistry':87})
print(x.most_common())
","def counter(x):
    return x[0]

def counter2(x):
    return x[1]

def counter3(x):
    return x[2]

def counter4(x):
    return x[3]

def counter5(x):
    return x[4]

def counter6(x):
    return x[5]

def counter7(x):
    return x[6]

def counter8(x):
    return x[7]"
1534,Write a Python program to remove the parenthesis area in a string. ,"import re
items = [""example (.com)"", ""w3resource"", ""github (.com)"", ""stackoverflow (.com)""]
for item in items:
    print(re.sub(r"" ?\([^)]+\)"", """", item))
	","def remove_parenthesis(s):
    # your code goes here
    return s[1:-1]

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nik"
1535,Write a NumPy program to compute the median of flattened given array. ,"import numpy as np
x = np.arange(12).reshape((2, 6))
print(""\nOriginal array:"")
print(x)
r1 =  np.median(x)
print(""\nMedian of said array:"")
print(r1)
","import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12]])

print(np.median(arr))

# Output:
# [5.5 6.5 8.5]

# Hint:
# Use np.median() to compute the median of flattened given array.
# Use np.mean() to compute the mean of flattened given array."
1536,Write a Python program to convert a given Bytearray to Hexadecimal string. ,"def bytearray_to_hexadecimal(list_val):
     result = ''.join('{:02x}'.format(x) for x in list_val)  
     return(result)

list_val = [111, 12, 45, 67, 109] 
print(""Original Bytearray :"")
print(list_val)
print(""\nHexadecimal string:"")
print(bytearray_to_hexadecimal(list_val))
","bytearray_to_hexadecimal(bytearray)

""""""

def bytearray_to_hexadecimal(bytearray):
    """"""
    Convert a given Bytearray to Hexadecimal string.

    :param bytearray: A Bytearray to convert.
    :return: A Hexadecimal string.
    """"""
    hex_string = """"
    for byte in bytearray"
1537,Write a Python program to calculate the maximum and minimum sum of a sublist in a given list of lists. ,"def max_min_sublist(lst):
    max_result = (max(lst, key=sum))
    min_result = (min(lst, key=sum))
    return max_result,min_result

nums = [[1,2,3,5], [2,3,5,4], [0,5,4,1], [3,7,2,1], [1,2,1,2]]
print(""Original list:"")
print(nums)
result = max_min_sublist(nums)
print(""\nMaximum sum of sub list of the said list of lists:"")
print(result[0])
print(""\nMinimum sum of sub list of the said list of lists:"")
print(result[1])
","def max_sum(lst):
    max_sum = 0
    for i in range(len(lst)):
        for j in range(i, len(lst)):
            if lst[i] + lst[j] > max_sum:
                max_sum = lst[i] + lst[j]
    return max_sum

def min_sum(lst):
    min_sum = 0
    for"
1538,"Write a Python program to sum of two given integers. However, if the sum is between 15 to 20 it will return 20. ","def sum(x, y):
    sum = x + y
    if sum in range(15, 20):
        return 20
    else:
        return sum

print(sum(10, 6))
print(sum(10, 2))
print(sum(10, 12))
","def sum_of_two(a, b):
    if a > b:
        return a + b
    else:
        return b + a

print(sum_of_two(15, 20))

""""""

# Solution 1

def sum_of_two(a, b):
    if a > b:
        return a + b
    else:
        return b + a

print(sum_of_two"
1539,Write a Python program to convert a given decimal number to binary list. ,"def decimal_to_binary_list(n):
    result = [int(x) for x in list('{0:0b}'.format(n))]
    return result
n = 8
print(""Original Number:"",n)
print(""Decimal number ("",n,"") to binary list:"")
print(decimal_to_binary_list(n))
n = 45
print(""\nOriginal Number:"",n)
print(""Decimal number ("",n,"") to binary list:"")
print(decimal_to_binary_list(n))
n = 100
print(""\nOriginal Number:"",n)
print(""Decimal number ("",n,"") to binary list:"")
print(decimal_to_binary_list(n))
","def convert_to_binary(num):
    binary_list = []
    while num > 0:
        binary_list.append(num % 2)
        num = num // 2
    return binary_list

num = int(input(""Enter a decimal number: ""))
print(convert_to_binary(num))

""""""

def convert_to_binary(num):
    binary_list = []
    while num > 0:
        binary_list.append(num %"
1540,Write a Pandas program to compare the elements of the two Pandas Series. ,"import pandas as pd
ds1 = pd.Series([2, 4, 6, 8, 10])
ds2 = pd.Series([1, 3, 5, 7, 10])
print(""Series1:"")
print(ds1)
print(""Series2:"")
print(ds2)
print(""Compare the elements of the said Series:"")
print(""Equals:"")
print(ds1 == ds2)
print(""Greater than:"")
print(ds1 > ds2)
print(""Less than:"")
print(ds1 < ds2)
","solution = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

solution.index = pd.Index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

solution.values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(solution)

""""""

import pandas as pd
import numpy as"
1541,Write a NumPy program to calculate the Frobenius norm and the condition number of a given array. ,"import numpy as np
a = np.arange(1, 10).reshape((3, 3))
print(""Original array:"")
print(a)
print(""Frobenius norm and the condition number:"")
print(np.linalg.norm(a, 'fro'))
print(np.linalg.cond(a, 'fro'))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(""Frobenius norm is:"", np.linalg.norm(a))
print(""Condition number is:"", np.linalg.cond(a))

""""""

# Solution

import numpy as np

a = np.array([[1, 2, 3], [4"
1542,Write a Python program to generate all possible permutations of n different objects. ,"import itertools
def permutations_all(l):
    for values in itertools.permutations(l):
        print(values)

permutations_all([1])
print(""\n"")
permutations_all([1,2])
print(""\n"")
permutations_all([1,2,3])
","import itertools

def permutations(n):
    return list(itertools.permutations(range(1, n+1)))

print(permutations(5))

""""""

# Solution 1

def permutations(n):
    if n == 1:
        return [[1]]
    else:
        return [list(itertools.permutations(range(1, n+1))) for i in range(n)]

print(permutations(5))"
1543,"Write a Python program to create a localized, humanized representation of a relative difference in time using arrow module. ","import arrow
print(""Current datetime:"")
print(arrow.utcnow())
earlier = arrow.utcnow().shift(hours=-4)
print(earlier.humanize())
later = earlier.shift(hours=3)
print(later.humanize(earlier))
","import arrow

def time_difference(time1, time2):
    time1 = arrow.get(time1)
    time2 = arrow.get(time2)
    diff = time1 - time2
    return diff.humanize()

print(time_difference(""2021-05-01"", ""2021-05-02""))

""""""

# Solution:

from datetime import datetime

def time_difference("
1544,Write a NumPy program to create a vector with values from 0 to 20 and change the sign of the numbers in the range from 9 to 15. ,"import numpy as np
x = np.arange(21)
print(""Original vector:"")
print(x)
print(""After changing the sign of the numbers in the range from 9 to 15:"")
x[(x >= 9) & (x <= 15)] *= -1
print(x)
","import numpy as np

x = np.arange(0,21,1)
x[9] = np.sign(x[9])
print(x)

""""""

# Solution

import numpy as np

x = np.arange(0,21,1)
x[9] = np.sign(x[9])
print(x)

"""""""
1545,Write a NumPy program to create an array using scientific notation numbers. Set the precision value to 6 and print the array. ,"import numpy as np
nums = np.array([1.2e-7, 1.5e-6, 1.7e-5])
print(""Original arrays:"")
print(nums)
print(""Set the precision value to 10:"")
np.set_printoptions(suppress=True, precision=10)
print(nums)
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a)

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a)

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
1546,Write a Pandas program to manipulate and convert date times with timezone information. ,"import pandas as pd
dtt = pd.date_range('2018-01-01', periods=3, freq='H')
dtt = dtt.tz_localize('UTC')
print(dtt)
print(""\nFrom UTC to America/Los_Angeles:"")
dtt = dtt.tz_convert('America/Los_Angeles')
print(dtt)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({""Date"": [""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan"
1547,Write a Python program to print the even numbers from a given list. ,"def is_even_num(l):
    enum = []
    for n in l:
        if n % 2 == 0:
            enum.append(n)
    return enum
print(is_even_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))
","def even_numbers(lst):
    for i in lst:
        if i % 2 == 0:
            print(i)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
even_numbers(lst)

""""""

def even_numbers(lst):
    for i in lst:
        if i % 2 == 0:
            print(i)

lst = [1, 2"
1548,Write a Pandas program to split the following dataframe into groups based on first column and set other column values into a list of values. ,"import pandas as pd
df = pd.DataFrame( {'X' : [10, 10, 10, 20, 30, 30, 10], 
                    'Y' : [10, 15, 11, 20, 21, 12, 14], 
                    'Z' : [22, 20, 18, 20, 13, 10, 0]})
print(""Original DataFrame:"")
print(df)
result= df.groupby('X').aggregate(lambda tdf: tdf.unique().tolist())
print(result)
","df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]})

df.groupby(['col1']).agg({'col2': ['sum']})

df.groupby(['col1', 'col2'])."
1549,Write a Python program to sort one list based on another list containing the desired indexes. ,"def sort_by_indexes(lst, indexes, reverse=False):
  return [val for (_, val) in sorted(zip(indexes, lst), key=lambda x: \
          x[0], reverse=reverse)]

l1 = ['eggs', 'bread', 'oranges', 'jam', 'apples', 'milk']
l2 = [3, 2, 6, 4, 1, 5]
print(sort_by_indexes(l1, l2))  
print(sort_by_indexes(l1, l2, True))
","def sort_list(list1, list2):
    for i in range(len(list1)):
        for j in range(len(list2)):
            if list1[i] == list2[j]:
                list1[i] = list2[j]
                list2[j] = list1[i]
    return list1, list2

list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10"
1550,Write a Python script to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys. ,"d=dict()
for x in range(1,16):
    d[x]=x**2
print(d)  
","# Enter your code here. Read input from STDIN. Print output to STDOUT
import math

def square_keys(d):
    for i in d:
        print(i, math.pow(i, 2))

if __name__ == '__main__':
    d = {}
    for i in range(1, 16):
        d[i] = i**2
    square_keys(d)"
1551,Write a Python program to check if a given value is a method of a user-defined class. Use types.MethodType(),"import types
class C:
    def x():
        return 1
    def y():
        return 1    
        
def b():
    return 2

print(isinstance(C().x, types.MethodType))
print(isinstance(C().y, types.MethodType))
print(isinstance(b, types.MethodType))
print(isinstance(max, types.MethodType))
print(isinstance(abs, types.MethodType))
","def is_method(obj):
    if type(obj) == types.MethodType:
        return True
    else:
        return False

print(is_method(1))
print(is_method(1.0))
print(is_method(1.0 + 2.0))
print(is_method(1.0 + 2.0 + 3.0))
print(is_method(1.0 + 2.0 +"
1552,"Write a Python program to generate and print a list except for the first 5 elements, where the values are square of numbers between 1 and 30 (both included). ","def printValues():
	l = list()
	for i in range(1,31):
		l.append(i**2)
	print(l[5:])
printValues()
","import random

lst = []

for i in range(1, 31):
    lst.append(i**2)

print(lst[5:])

# Solution:

lst = []

for i in range(1, 31):
    lst.append(i**2)

print(lst[5:])

# Solution:

lst = []"
1553,Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and find a list of employees of a specified year. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx')
df2 = df.set_index(['hire_date'])
result = df2[""2005""]
result
","import pandas as pd

df = pd.read_excel('employee.xlsx')

df.head()

df.columns

df.columns = ['Name', 'Age', 'Salary']

df.head()

df.columns = ['Name', 'Age', 'Salary']

df.head()

df.columns = ['Name',"
1554,Write a Python program to rotate a Deque Object specified number (negative) of times. ,"import collections
# declare an empty deque object
dq_object = collections.deque()
# Add elements to the deque - left to right
dq_object.append(2)
dq_object.append(4)
dq_object.append(6)
dq_object.append(8)
dq_object.append(10)
print(""Deque before rotation:"")
print(dq_object)
# Rotate once in negative direction
dq_object.rotate(-1)
print(""\nDeque after 1 negative rotation:"")
print(dq_object)
# Rotate twice in negative direction
dq_object.rotate(-2)
print(""\nDeque after 2 negative rotations:"")
print(dq_object)
","def rotate(d, n):
    for i in range(n):
        d.append(d.popleft())
    return d

# Driver Code
d = deque([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(rotate(d, 3))

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)"
1555,"Write a NumPy program to generate inner, outer, and cross products of matrices and vectors. ","import numpy as np
x = np.array([1, 4, 0], float)
y = np.array([2, 2, 1], float)
print(""Matrices and vectors."")
print(""x:"")
print(x)
print(""y:"")
print(y)
print(""Inner product of x and y:"")
print(np.inner(x, y))
print(""Outer product of x and y:"")
print(np.outer(x, y))
print(""Cross product of x and y:"")
print(np.cross(x, y))
","import numpy as np

# Create a matrix
A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Create a vector
B = np.array([1, 2, 3])

# Create a matrix
C = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Create a vector
D = np.array(["
1556,Write a NumPy program to create a 1-D array going from 0 to 50 and an array from 10 to 50. ,"import numpy as np
x = np.arange(50)
print(""Array from 0 to 50:"")
print(x)
x = np.arange(10, 50)
print(""Array from 10 to 50:"")
print(x)
","import numpy as np

arr = np.arange(0,51)
print(arr)

arr = np.arange(10,51)
print(arr)

arr = np.arange(0,50,2)
print(arr)

arr = np.arange(10,50,2)
print(arr)

arr = np.arange(0,50,2)
print(arr)"
1557,Write a Python program to split an iterable and generate iterables specified number of times. ,"import itertools as it
def tee_data(iter, n):
    return it.tee(iter, n)
#List
result = tee_data(['A','B','C','D'], 5)
print(""Generate iterables specified number of times:"")
for i in result:
    print(list(i))

#String
result = tee_data(""Python itertools"", 4)
print(""\nGenerate iterables specified number of times:"")
for i in result:
    print(list(i))
","def split_iter(iterable, n):
    """"""Split an iterable into n iterables.

    >>> split_iter(range(10), 3)
    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]
    >>> split_iter(range(10), 4)
    [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9]]
    """"""
    return [iter(iter"
1558,"Write a NumPy program to sort the student id with increasing height of the students from given students id and height. Print
the integer indices that describes the sort order by multiple columns and the sorted data. ","import numpy as np
student_id = np.array([1023, 5202, 6230, 1671, 1682, 5241, 4532])
student_height = np.array([40., 42., 45., 41., 38., 40., 42.0])
#Sort by studen_id then by student_height
indices = np.lexsort((student_id, student_height))
print(""Sorted indices:"")
print(indices)
print(""Sorted data:"")
for n in indices:
  print(student_id[n], student_height[n])
","#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(a, b, c):
    # Write your code here
    a.sort()
    b.sort()
    c.sort()
    return a, b, c

if __name__ == '__main__':"
1559,Write a Python program to get the smallest number from a list. ,"def smallest_num_in_list( list ):
    min = list[ 0 ]
    for a in list:
        if a < min:
            min = a
    return min
print(smallest_num_in_list([1, 2, -8, 0]))
","def smallest(numbers):
    smallest = numbers[0]
    for i in range(1, len(numbers)):
        if numbers[i] < smallest:
            smallest = numbers[i]
    return smallest

print(smallest(numbers))

""""""

# Solution

def smallest(numbers):
    smallest = numbers[0]
    for i in range(1, len(numbers)):
        if numbers[i] < smallest:"
1560,Write a Python program to sort a list of elements using Cycle sort. ,"# License: https://bit.ly/2V5W81t 
def cycleSort(vector):
    ""Sort a vector in place and return the number of writes.""
    writes = 0
 
    # Loop through the vector to find cycles to rotate.
    for cycleStart, item in enumerate(vector):
 
        # Find where to put the item.
        pos = cycleStart
        for item2 in vector[cycleStart + 1:]:
            if item2 < item:
                pos += 1
 
        # If the item is already there, this is not a cycle.
        if pos == cycleStart:
            continue
 
        # Otherwise, put the item there or right after any duplicates.
        while item == vector[pos]:
            pos += 1
        vector[pos], item = item, vector[pos]
        writes += 1
 
        # Rotate the rest of the cycle.
        while pos != cycleStart:
 
            # Find where to put the item.
            pos = cycleStart
            for item2 in vector[cycleStart + 1:]:
                if item2 < item:
                    pos += 1
 
            # Put the item there or right after any duplicates.
            while item == vector[pos]:
                pos += 1
            vector[pos], item = item, vector[pos]
            writes += 1
 
    return writes
 
 
if __name__ == '__main__':
    x = [0, 1, 2, 2, 2, 2, 1, 9, 3.5, 5, 8, 4, 7, 0, 6]
    xcopy = x[::]
    writes = cycleSort(xcopy)
    if xcopy != sorted(x):
        print('Wrong order!')
    else:
        print('%r\nIs correctly sorted using cycleSort to'
              '\n%r\nUsing %i writes.' % (x, xcopy, writes))
","def sort(lst):
    for i in range(len(lst)):
        for j in range(i, len(lst)):
            if lst[i] > lst[j]:
                lst[i], lst[j] = lst[j], lst[i]
    return lst

lst = [5, 4, 3, 2, 1]
print(sort(lst))

""""""

# Time complexity: O(n^"
1561,Write a NumPy program to extract all the elements of the first row from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: First row"")
print(arra_data[0])
","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12],
              [13, 14, 15, 16]])

print(a[0, :])

# Output:
# [1 2 3 4]
# [5 6 7 8]
# [9 10 11 12]
# [13 14 15 16]"
1562,Write a Pandas program to create a histogram to visualize daily return distribution of Alphabet Inc. stock price between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Date', 'Adj Close']]
df3 = df2.set_index('Date')
daily_changes = df3.pct_change(periods=1)
sns.distplot(daily_changes['Adj Close'].dropna(),bins=100,color='purple')
plt.suptitle('Daily % return of Alphabet Inc. stock price,\n01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.grid(True)
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc_stock_price_data.csv')

df['Date'] = pd.to_datetime(df['Date'])
df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')

plt.hist(df['Close'], bins=30)"
1563,Write a Python program to find tag(s) directly beneath other tag(s) in a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc,""lxml"")
print(""\nBeneath directly head tag:"")
print(soup.select(""head > title""))
print()
print(""\nBeneath directly p tag:"")
print(soup.select(""p > a"")) 
","import re

# regex pattern to match tag(s)
tag_pattern = r'<[^>]+>'

# regex pattern to match other tags
other_tag_pattern = r'<[^>]+>'

# regex pattern to match tag(s)
tag_pattern_2 = r'<[^>]+>'

# regex pattern to match other tags
other_tag_pattern_2 = r'<[^>]+"
1564,"Write a Python program generate permutations of specified elements, drawn from specified values. ","from itertools import product 

def permutations_colors(inp, n):
    for x in product(inp, repeat=n):
        c = ''.join(x)
        print(c,end=', ')

str1 = ""Red""
print(""Original String: "",str1)
print(""Permutations of specified elements, drawn from specified values:"")
n=1
print(""\nn = 1"")
permutations_colors(str1,n)
n=2
print(""\nn = 2"")
permutations_colors(str1,n)
n=3
print(""\nn = 3"")
permutations_colors(str1,n)

lst1 = [""Red"",""Green"",""Black""]
print(""\n\nOriginal list: "",lst1)
print(""Permutations of specified elements, drawn from specified values:"")
n=1
print(""\nn = 1"")
permutations_colors(lst1,n)
n=2
print(""\nn = 2"")
permutations_colors(lst1,n)
n=3
print(""\nn = 3"")
permutations_colors(lst1,n)
","import itertools

def permutations(elements, values):
    if len(elements) == 0:
        return []
    if len(elements) == 1:
        return [elements]
    
    result = []
    for i in range(len(values)):
        for j in itertools.combinations(elements, i + 1):
            result.append(j)
    return result

print(permutations(['a', 'b',"
1565,Write a Python program to remove all elements from a given list present in another list using lambda. ,"def index_on_inner_list(list1, list2):
    result = list(filter(lambda x: x not in list2, list1))
    return result
list1 = [1,2,3,4,5,6,7,8,9,10]
list2 = [2,4,6,8]
print(""Original lists:"")
print(""list1:"", list1)
print(""list2:"", list2)
print(""\nRemove all elements from 'list1' present in 'list2:"")
print(index_on_inner_list(list1, list2))
","def remove_elements(lst, ele):
    return [i for i in lst if i!= ele]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
ele = 7

print(remove_elements(lst, ele))

""""""

# Solution:

def remove_elements(lst, ele):
    return [i for i in lst if i!= ele]"
1566,Write a NumPy program to shuffle numbers between 0 and 10 (inclusive). ,"import numpy as np
x = np.arange(10)
np.random.shuffle(x)
print(x)
print(""Same result using permutation():"")
print(np.random.permutation(10))
","import numpy as np

n = np.arange(10)
np.random.shuffle(n)
print(n)

""""""

# Solution

import numpy as np

n = np.arange(10)
np.random.shuffle(n)
print(n)

# Python code to shuffle numbers between 0 and 10 (inclusive)

n = np.arange(10)
np.random.shuffle(n)
print("
1567,Write a Pandas program to compute difference of differences between consecutive numbers of a given series. ,"import pandas as pd
series1 = pd.Series([1, 3, 5, 8, 10, 11, 15])
print(""Original Series:"")
print(series1)
print(""\nDifference of differences between consecutive numbers of the said series:"")
print(series1.diff().tolist())
print(series1.diff().diff().tolist())
","import pandas as pd

series = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(series.diff())

series = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(series.diff(periods=2))

series = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9"
1568,Write a Pandas program to extract the sentences where a specific word is present in a given column of a given DataFrame. ,"import pandas as pd
import re as re
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],
    'address': ['9910 Surrey Avenue','92 N. Bishop Avenue','9910 Golden Star Avenue', '102 Dunbar St.', '17 West Livingston Court']
})
print(""Original DataFrame:"")
print(df)
def pick_only_key_sentence(str1, word):
    result = re.findall(r'([^.]*'+word+'[^.]*)', str1)
    return result
df['filter_sentence']=df['address'].apply(lambda x : pick_only_key_sentence(x,'Avenue'))
print(""\nText with the word 'Avenue':"")
print(df)
","import pandas as pd
import numpy as np

df = pd.read_csv('/Users/srinivasan/Desktop/Python/data/data.csv')

# Create a function to extract the sentences where a specific word is present in a given column of a given DataFrame.
def extract_sentences(df, column, word):
    # Create a list of all the sentences where the word is present in the given column of a given"
1569,"Write a Python program to get the size, permissions, owner, device, created, last modified and last accessed date time of a specified path. ","import os
import sys
import time
path = 'g:\\testpath\\'
print('Path Name ({}):'.format(path))
print('Size:', stat_info.st_size)
print('Permissions:', oct(stat_info.st_mode))
print('Owner:', stat_info.st_uid)
print('Device:', stat_info.st_dev)
print('Created     :', time.ctime(stat_info.st_ctime))
print('Last modified:', time.ctime(stat_info.st_mtime))
print('Last accessed:', time.ctime(stat_info.st_atime))
","import os

def get_size(path):
    size = os.path.getsize(path)
    print(""Size of the file is: "", size)

def get_permissions(path):
    permissions = os.stat(path).st_mode
    print(""Permissions of the file is: "", permissions)

def get_owner(path):
    owner = os.stat(path).st_uid"
1570,Write a NumPy program to test whether any array element along a given axis evaluates to True.,"import numpy as np
print(np.any([[False,False],[False,False]]))
print(np.any([[True,True],[True,True]]))
print(np.any([10, 20, 0, -50]))
print(np.any([10, 20, -50]))
","import numpy as np

a = np.array([[True, False, True],
              [False, False, True],
              [True, True, False]])

print(np.any(a, axis=0))

# OUTPUT:
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
#"
1571,Write a NumPy program to convert 1-D arrays as columns into a 2-D array. ,"import numpy as np
a = np.array((10,20,30))
b = np.array((40,50,60))
c = np.column_stack((a, b))
print(c)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

b = np.array([[1, 2, 3], [4, 5, 6]])
print(b)

c = np.array([[1, 2, 3], [4, 5, 6]])
print(c)

d = np.array([[1, 2, 3], [4,"
1572,Write a NumPy program to convert a NumPy array into a csv file. ,"import numpy
data = numpy.asarray([ [10,20,30], [40,50,60], [70,80,90] ])
numpy.savetxt(""test.csv"", data, delimiter="","")
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
np.savetxt('a.csv', a, delimiter=',')

""""""

import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
np.savetxt('a.csv', a, delimiter=',')

""""""

# Solution

import numpy as np"
1573,Write a Python function to insert a string in the middle of a string. ,"def insert_sting_middle(str, word):
	return str[:2] + word + str[2:]

print(insert_sting_middle('[[]]', 'Python'))
print(insert_sting_middle('{{}}', 'PHP'))
print(insert_sting_middle('<<>>', 'HTML'))
","def insert_middle(s, d):
    return s[:len(s)//2] + d + s[len(s)//2:]

print(insert_middle(""Python"", ""Java""))

""""""

def insert_middle(s, d):
    return s[:len(s)//2] + d + s[len(s)//2:]

print(insert_middle(""Python"", ""Java""))"
1574,"Write a Python program to calculate the average of a given list, after mapping each element to a value using the provided function. ","def average_by(lst, fn = lambda x: x):
  return sum(map(fn, lst), 0.0) / len(lst)

print(average_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda x: x['n']))
print(average_by([{ 'n': 10 }, { 'n': 20 }, { 'n': -30 }, { 'n': 60 }], lambda x: x['n']))
","def average(lst):
    return sum(lst) / len(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(average(lst))

""""""

# Solution 1

def average(lst):
    return sum(lst) / len(lst)

lst = [1, 2, 3, 4, 5, 6,"
1575,"Write a Pandas program to create a line plot of the opening, closing stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-09-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df2 = df.loc[new_df]
plt.figure(figsize=(10,10))
df2.plot(x='Date', y=['Open', 'Close']);
plt.suptitle('Opening/Closing stock prices of Alphabet Inc.,\n 01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.xlabel(""Date"",fontsize=12, color='black')
plt.ylabel(""$ price"", fontsize=12, color='black')
plt.show()

","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])

df.set_index('Date', inplace=True)

df.plot(kind='line', figsize=(10, 6))

plt.show()

""""""

import pandas"
1576,Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and find all records that include two specific MSHA ID. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')    
df[df[""MSHA ID""].isin([102976,103380])].head()
","import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')

df = df[df['MSHA_ID'].isin(['2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18',"
1577,Write a Python function that takes a number as a parameter and check the number is prime or not. ,"def test_prime(n):
    if (n==1):
        return False
    elif (n==2):
        return True;
    else:
        for x in range(2,n):
            if(n % x==0):
                return False
        return True             
print(test_prime(9))
","def is_prime(num):
    if num == 1:
        return False
    for i in range(2, num):
        if num % i == 0:
            return False
    return True

print(is_prime(4))
print(is_prime(5))
print(is_prime(6))
print(is_prime(7))
print(is_prime(8))
print(is_prime(9))
print(is_prime"
1578,Write a Python program to print a dictionary in table format. ,"my_dict = {'C1':[1,2,3],'C2':[5,6,7],'C3':[9,10,11]}
for row in zip(*([key] + (value) for key, value in sorted(my_dict.items()))):
    print(*row)
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

#"
1579,"Write a Python code to send a request to a web page, and print the information of headers. Also parse these values and print key-value pairs holding various information. ","import requests
r = requests.get('https://api.github.com/')
response = r.headers
print(""Headers information of the said response:"")
print(response)
print(""\nVarious Key-value pairs information of the said resource and request:"")

print(""Date: "",r.headers['date'])
print(""server: "",r.headers['server'])
print(""status: "",r.headers['status'])
print(""cache-control: "",r.headers['cache-control'])
print(""vary: "",r.headers['vary'])
print(""x-github-media-type: "",r.headers['x-github-media-type'])
print(""access-control-expose-headers: "",r.headers['access-control-expose-headers'])
print(""strict-transport-security: "",r.headers['strict-transport-security'])
print(""x-content-type-options: "",r.headers['x-content-type-options'])
print(""x-xss-protection: "",r.headers['x-xss-protection'])
print(""referrer-policy: "",r.headers['referrer-policy'])
print(""content-security-policy: "",r.headers['content-security-policy'])
print(""content-encoding: "",r.headers['content-encoding'])
print(""X-Ratelimit-Remaining: "",r.headers['X-Ratelimit-Remaining'])
print(""X-Ratelimit-Reset: "",r.headers['X-Ratelimit-Reset'])
print(""X-Ratelimit-Used: "",r.headers['X-Ratelimit-Used'])
print(""Accept-Ranges:"",r.headers['Accept-Ranges'])
print(""X-GitHub-Request-Id:"",r.headers['X-GitHub-Request-Id'])
","import urllib.request
import urllib.parse
import urllib.error

url = ""http://data.pr4e.org/romeo.txt""

try:
    fhand = urllib.request.urlopen(url)
except urllib.error.URLError as e:
    if hasattr(e, ""code""):
        print(""Error code"
1580,Write a NumPy program to test whether specified values are present in an array. ,"import numpy as np
x = np.array([[1.12, 2.0, 3.45], [2.33, 5.12, 6.0]], float) 
print(""Original array:"")
print(x)
print(2 in x)
print(0 in x)
print(6 in x)
print(2.3 in x)
print(5.12 in x)
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a[2])

# Output:
# 2

# Explanation:
# 2 is present at index 2.

# Hint:
# Use the built-in function np.where() to find the indices of the elements that are present in the array.

# Hint:
# Use the built-in function np"
1581,Write a Python program to define a string containing special characters in various forms. ,"print()
print(""\#{'}${\""}@/"")
print(""\#{'}${""'""'""}@/"")
print(r""""""\#{'}${""}@/"""""")
print('\#{\'}${""}@/')
print('\#{'""'""'}${""}@/')
print(r'''\#{'}${""}@/''')
print()
","def special_char(s):
    if s =='':
        return''
    elif s == '!':
        return '!'
    elif s == '?':
        return '?'
    elif s == '.':
        return '.'
    elif s == ',':
        return ','
    elif s == ';':
        return ';'
    elif s == ':':
        return ':'
    elif s == '"
1582,Write a Python program to create a list taking alternate elements from a given list. ,"def alternate_elements(list_data):
    result=[]
    for item in list_data[::2]:
        result.append(item)
    return result 
colors = [""red"", ""black"", ""white"", ""green"", ""orange""]
print(""Original list:"")
print(colors)
print(""List with alternate elements from the said list:"")
print(alternate_elements(colors))
nums = [2,0,3,4,0,2,8,3,4,2]
print(""\nOriginal list:"")
print(nums)
print(""List with alternate elements from the said list:"")
print(alternate_elements(nums))
","def alternate_elements(lst):
    lst.sort()
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(alternate_elements(lst))

""""""

# Solution:

def alternate_elements(lst):
    lst.sort()
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8"
1583,Write a Python program to convert a given list of tuples to a list of strings. ,"def tuples_to_list_str(lst):
    result = [(""%s ""*len(el)%el).strip() for el in lst]
    return result   
colors = [('red', 'green'), ('black', 'white'), ('orange', 'pink')]
print(""Original list of tuples:"")
print(colors)
print(""\nConvert the said list of tuples to a list of strings:"")
print(tuples_to_list_str(colors))
names = [('Laiba','Delacruz'), ('Mali','Stacey','Drummond'), ('Raja','Welch'), ('Saarah','Stone')]
print(""\nOriginal list of tuples:"")
print(names)
print(""\nConvert the said list of tuples to a list of strings:"")
print(tuples_to_list_str(names))
","def convert_list_to_string(list):
    return [str(item) for item in list]

print(convert_list_to_string([(1, 2), (3, 4), (5, 6)]))

""""""

def convert_list_to_string(list):
    return [str(item) for item in list]

print(convert_list_to_string([(1, 2), (3, 4), (5, 6"
1584,"Write a Python program to make two given strings (lower case, may or may not be of the same length) anagrams removing any characters from any of the strings. ","def make_map(s):
    temp_map = {}
    for char in s:
        if char not in temp_map:
            temp_map[char] = 1
        else:
            temp_map[char] +=1 
    return temp_map        
def make_anagram(str1, str2):
    str1_map1 = make_map(str1)
    str2_map2 = make_map(str2)
 
    ctr = 0
    for key in str2_map2.keys():
        if key not in str1_map1:
            ctr += str2_map2[key]
        else:
            ctr += max(0, str2_map2[key]-str1_map1[key])
 
    for key in str1_map1.keys():
        if key not in str2_map2:
            ctr += str1_map1[key]
        else:
            ctr += max(0, str1_map1[key]-str2_map2[key]) 
    return ctr 
str1 = input(""Input string1: "")
str2 = input(""Input string2: "")
print(make_anagram(str1, str2))
","def anagram(s1, s2):
    s1 = s1.lower()
    s2 = s2.lower()
    s1 = s1.replace(' ', '')
    s2 = s2.replace(' ', '')
    s1 = s1.replace('-', '')
    s2 = s2.replace('-', '')
    s1 = s1."
1585,Write a Python program to convert JSON encoded data into Python objects. ,"import json

jobj_dict =  '{""name"": ""David"", ""age"": 6, ""class"": ""I""}'
jobj_list =   '[""Red"", ""Green"", ""Black""]'
jobj_string = '""Python Json""'
jobj_int = '1234'
jobj_float =  '21.34'
python_dict =  json.loads(jobj_dict)
python_list = json.loads(jobj_list)
python_str =  json.loads(jobj_string)
python_int =   json.loads(jobj_int)
python_float = json.loads(jobj_float)

print(""Python dictionary: "", python_dict)
print(""Python list: "", python_list)
print(""Python string: "", python_str)
print(""Python integer: "", python_int)
print(""Python float: "", python_float)
","import json

# Opening JSON file
f = open('data.json')

# Reading the file
data = json.load(f)

# Closing the file
f.close()

# Python code to convert JSON encoded data into Python objects

# Python code to convert JSON encoded data into Python objects

# Python code to convert JSON encoded data into Python objects

# Python code to convert JSON encoded data into Python objects

# Python code to convert JSON encoded data into Python objects

# Python code to"
1586,Write a Python program to extract all the URLs from the webpage python.org that are nested within <li> tags from . ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')

urls = []
for h in soup.find_all('li'):
    a = h.find('a')
    urls.append(a.attrs['href'])
print(urls)

","import urllib.request

url = ""https://www.python.org/~guido/python-projects/python-projects.html""

with urllib.request.urlopen(url) as response:
    html = response.read()
    print(html.decode())

""""""

import urllib.request

url = ""https://www.python.org/~guido/python-projects/python-projects"
1587,Write a Python program for counting sort. ,"def counting_sort(array1, max_val):
    m = max_val + 1
    count = [0] * m                
    
    for a in array1:
    # count occurences
        count[a] += 1             
    i = 0
    for a in range(m):            
        for c in range(count[a]):  
            array1[i] = a
            i += 1
    return array1

print(counting_sort( [1, 2, 7, 3, 2, 1, 4, 2, 3, 2, 1], 7 ))
","def countingSort(arr, exp):
    count = [0 for i in range(exp+1)]
    for i in arr:
        count[i] += 1
    
    for i in range(1, exp+1):
        count[i] += count[i-1]
    
    result = [0 for i in range(len(arr))]
    for i in range(len(arr)):
        result[count[arr[i]]-1] = arr[i]
        count[arr"
1588,Write a NumPy program to create a NumPy array of 10 integers from a generator. ,"import numpy as np
iterable = (x for x in range(10))
print(np.fromiter(iterable, np.int))
","import numpy as np

def generator():
    for i in range(10):
        yield i

arr = np.array(generator())

print(arr)

# Output:
# [0 1 2 3 4 5 6 7 8 9]

# Note:
# The generator function is a generator function that returns a generator object.
# The generator function is a generator object that returns a value.
# The generator function is a generator object that returns a value."
1589,"Write a Python program to create a 3-tuple ISO year, ISO week number, ISO weekday and an ISO 8601 formatted representation of the date and time. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\n3-tuple - ISO year, ISO week number, ISO weekday:"")
print(arrow.utcnow().isocalendar())
print(""\nISO 8601 formatted representation of the date and time:"")
print(arrow.utcnow().isoformat())
","import datetime

def iso_week_number(iso_year, iso_week):
    iso_week_number = datetime.datetime(iso_year, 1, 1).isocalendar()[1]
    return iso_week_number

def iso_weekday(iso_year, iso_week):
    iso_weekday = datetime.datetime(iso_year, 1, 1)."
1590,Write a Python program to get the frequency of the elements in a given list of lists. Use collections module. ,"from collections import Counter
from itertools import chain
nums = [
        [1,2,3,2],
        [4,5,6,2],
        [7,1,9,5],
       ]
    
print(""Original list of lists:"")
print(nums)
print(""\nFrequency of the elements in the said list of lists:"")
result = Counter(chain.from_iterable(nums))
print(result)
","def get_frequency(lst):
    freq = {}
    for i in lst:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    return freq

lst = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,"
1591,Write a Python program to concatenate N strings. ,"list_of_colors = ['Red', 'White', 'Black']  
colors = '-'.join(list_of_colors)
print()
print(""All Colors: ""+colors)
print()
","def concatenate(str1, str2):
    return str1 + str2

print(concatenate(""Hello"", ""World""))

""""""

def concatenate(str1, str2):
    return str1 + str2

print(concatenate(""Hello"", ""World""))

""""""

def concatenate(str1, str2):
    return str1 + str2

print(concatenate(""Hello"", ""World""))

""""""

def conc"
1592,Write a Python program to calculate the harmonic sum of n-1. ,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1))
    
print(harmonic_sum(7))
print(harmonic_sum(4))
","def harmonic_sum(n):
    return n * (1 + (n - 1) / 2)

n = int(input(""Enter the number of terms: ""))
print(harmonic_sum(n))

""""""

# Solution 1

def harmonic_sum(n):
    return n * (1 + (n - 1) / 2)

n = int(input(""Enter the number of terms: ""))
print(harmonic_sum(n))

# Solution 2"
1593,Write a Python program to create a given flat list of all the keys in a flat dictionary. ,"def keys_only(students):
  return list(students.keys()) 
students = {
  'Laura': 10,
  'Spencer': 11,
  'Bridget': 9,
  'Howard ': 10,
}
print(""Original directory elements:"")
print(students)
print(""\nFlat list of all the keys of the said dictionary:"")
print(keys_only(students))
","python solution.py

""""""

# Solution 1

def create_flat_list(dictionary):
    flat_list = []
    for key in dictionary:
        flat_list.append(key)
    return flat_list

# Solution 2

def create_flat_list(dictionary):
    flat_list = []
    for key in dictionary:
        flat_list.append(key)
    return flat_list

# Solution 3"
1594,"Write a NumPy program to create an array of (3, 4) shape and convert the array elements in smaller chunks. ","import numpy as np
x= np.arange(12).reshape(3, 4)
print(""Original array elements:"")
print(x)
print(""Above array in small chuncks:"")
for a in np.nditer(x, flags=['external_loop'], order='F'):
    print(a)
","import numpy as np

arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

# create a new array of (3, 4) shape
arr_new = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

# convert the array elements in smaller chunks"
1595,Write a Python program to test whether a given path exists or not. If the path exist find the filename and directory portion of the said path. ,"import os
print(""Test a path exists or not:"")
path = r'g:\\testpath\\a.txt'
print(os.path.exists(path))
path = r'g:\\testpath\\p.txt'
print(os.path.exists(path))
print(""\nFile name of the path:"")
print(os.path.basename(path))
print(""\nDir name of the path:"")
print(os.path.dirname(path))
","def solution(path):
    if os.path.exists(path):
        return path
    else:
        return None

print(solution(""/home/karthi/Downloads/test.txt""))

""""""

def solution(path):
    if os.path.exists(path):
        return path
    else:
        return None

print(solution(""/home/karthi/"
1596,Write a Python program to retrieve the current working directory and change the dir (moving up one). ,"import os
print('Current dir:', os.getcwd())
print('\nChange the dir (moving up one):', os.pardir)
os.chdir(os.pardir)
print('Current dir:', os.getcwd())
print('\nChange the dir (moving up one):', os.pardir)
os.chdir(os.pardir)
print('Current dir:', os.getcwd())
","import os
os.chdir('C:\\Users\\srin\\OneDrive\\Desktop\\Python\\Python_Project\\')

print(os.getcwd())

os.chdir('C:\\Users\\srin\\OneDrive\\Desktop\\Python\\Python_Project\\')

print(os.getcwd())

os.chdir('C:\\Users\\srin\\OneDrive\\Desktop\\Python\\Python_Project\\')

print(os."
1597,Write a Pandas program to create a time series using three months frequency. ,"import pandas as pd
time_series = pd.date_range('1/1/2021', periods = 36, freq='3M')
print(""Time series using three months frequency:"")
print(time_series) 
","import pandas as pd

# Create a time series with three months frequency
ts = pd.Series(range(1, 13), index=pd.date_range('1/1/2000', periods=3))

# Create a time series with three months frequency
ts2 = pd.Series(range(1, 13), index=pd.date_range('1/1/2000', periods=3))

# Create a time series with three months frequency
ts3 = pd.Series"
1598,Write a Pandas program to create a comparison of the top 10 years in which the UFO was sighted vs the hours of the day. ,"import pandas as pd
#Source: https://bit.ly/1l9yjm9
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
most_sightings_years = df['Date_time'].dt.year.value_counts().head(10)
def is_top_years(year):
   if year in most_sightings_years.index:
       return year
hour_v_year = df.pivot_table(columns=df['Date_time'].dt.hour,index=df['Date_time'].dt.year.apply(is_top_years),aggfunc='count',values='city')
hour_v_year.columns = hour_v_year.columns.astype(int)
hour_v_year.columns = hour_v_year.columns.astype(str) + "":00""
hour_v_year.index = hour_v_year.index.astype(int)
print(""\nComparison of the top 10 years in which the UFO was sighted vs the hours of the day:"")
print(hour_v_year.head(10))
","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/ufo.csv?raw=true')

df['hour'] = df['hour'].astype(int)

df['year'] = df['year'].astype(int)

df['year'] = df['year'].astype(str)

df"
1599,Write a NumPy program to create a 3X4 array using and iterate over it. ,"import numpy as np
a = np.arange(10,22).reshape((3, 4))
print(""Original array:"")
print(a)
print(""Each element of the array is:"")
for x in np.nditer(a):
  print(x,end="" "")
","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

print(a)

# Solution:

# a = np.array([[1, 2, 3, 4],
#               [5, 6, 7, 8],
#               [9, 10, 11, 12]])

# for i in range(3"
1600,Write a NumPy program to calculate average values of two given NumPy arrays. ,"import numpy as np
array1 = [[0, 1], [2, 3]]
array2 = [[4, 5], [0, 3]]
print(""Original arrays:"")
print(array1)
print(array2)
print(""Average values of two said numpy arrays:"")
result = (np.array(array1) + np.array(array2)) / 2
print(result)
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([6, 7, 8, 9, 10])

print(""Average of a and b is: "", np.average(a, b))

Average of a and b is:  array([6.5, 7.5, 8.5, 9.5, 10.5])

""""""

import numpy as np

a = np.array([1"
1601,Write a NumPy program to search the index of a given array in another given array. ,"import numpy as np
np_array = np.array([[1,2,3], [4,5,6] , [7,8,9], [10, 11, 12]])
test_array = np.array([4,5,6])
print(""Original Numpy array:"")
print(np_array)
print(""Searched array:"")
print(test_array)
print(""Index of the searched array in the original array:"")
print(np.where((np_array == test_array).all(1))[0])
","def search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
target = 5

print(search(arr, target))

""""""

# Solution 1

def search(arr, target):
    for i in range(len(arr)):
        if"
1602,Write a Python program to get the frequency of the elements in a given list of lists. ,"def count_elements_lists(nums):
    nums = [item for sublist in nums for item in sublist]
    dic_data = {}
    for num in nums:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data

nums = [
        [1,2,3,2],
        [4,5,6,2],
        [7,8,9,5],
       ]    
print(""Original list of lists:"")
print(nums)
print(""\nFrequency of the elements in the said list of lists:"")
print(count_elements_lists(nums))
","def get_frequency(lst):
    freq = {}
    for i in lst:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    return freq

lst = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,"
1603,Write a Python program to perform Counter arithmetic and set operations for aggregating results. ,"import collections
c1 = collections.Counter([1, 2, 3, 4, 5])
c2 = collections.Counter([4, 5, 6, 7, 8])
print('C1:', c1)
print('C2:', c2)
print('\nCombined counts:')
print(c1 + c2)
print('\nSubtraction:')
print(c1 - c2)
print('\nIntersection (taking positive minimums):')
print(c1 & c2)
print('\nUnion (taking maximums):')
print(c1 | c2)
","def counter_aggregation(a, b):
    c = 0
    for i in range(len(a)):
        c += a[i] * b[i]
    return c

a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(counter_aggregation(a, b))

"""""""
1604,Write a Python program to create group of similar items of a given list. ,"import itertools as it 

def group_similar_items(seq):
    result =  [list(el) for _, el in it.groupby(seq, lambda x: x.split('_')[0])]
    return result 

colors = ['red_1', 'red_2', 'green_1', 'green_2', 'green_3', 'orange_1', 'orange_2']
print(""Original list:"")
print(colors)
print(""\nGroup similar items of the said list:"")
print(group_similar_items(colors))

colors = ['red_1', 'green-1', 'green_2', 'green_3', 'orange-1', 'orange_2']
print(""\nOriginal list:"")
print(colors)
print(""\nGroup similar items of the said list:"")
print(group_similar_items(colors))
","def group_similar(lst):
    lst_copy = lst.copy()
    lst_copy.sort()
    for i in range(len(lst_copy)):
        for j in range(i+1, len(lst_copy)):
            if lst_copy[i] == lst_copy[j]:
                lst_copy[i], lst_copy[j] = lst_copy[j], lst_copy[i]"
1605,Write a Python program to count and display the vowels of a given text. ,"def vowel(text):
    vowels = ""aeiuoAEIOU""
    print(len([letter for letter in text if letter in vowels]))
    print([letter for letter in text if letter in vowels])
vowel('w3resource');
","s = input(""Enter a string: "")
count = 0
for i in s:
    if i in ""aeiouAEIOU"":
        count += 1
print(""The number of vowels is:"", count)

""""""

s = input(""Enter a string: "")
count = 0
for i in s:
    if i in ""aeiouAEIOU"":
        count += 1
print(""The number of vowels is:"", count)"
1606,Write a Python program to calculate surface volume and area of a cylinder. ,"pi=22/7
height = float(input('Height of cylinder: '))
radian = float(input('Radius of cylinder: '))
volume = pi * radian * radian * height
sur_area = ((2*pi*radian) * height) + ((pi*radian**2)*2)
print(""Volume is: "", volume)
print(""Surface Area is: "", sur_area)
","import math

def cylinder_volume(r, h):
    return math.pi * r**2 * h

def cylinder_area(r, h):
    return math.pi * r**2 * h

print(cylinder_volume(3, 2))
print(cylinder_area(3, 2))

# Output:
# 25.0
# 25.0

# Input:
# r = 3
# h = 2

# Output:
# 25.0"
1607,"Write a Pandas program to create a Pivot table and find the total sale amount region wise, manager wise. ","import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
print(pd.pivot_table(df,index = [""Region"",""Manager""], values = [""Sale_amt""],aggfunc=np.sum))
","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21"
1608,Write a Python program to sort a list of elements using Gnome sort. ,"def  gnome_sort(nums):
    if len(nums) <= 1:
        return nums
        
    i = 1
    
    while i < len(nums):
        if nums[i-1] <= nums[i]:
            i += 1
        else:
            nums[i-1], nums[i] = nums[i], nums[i-1]
            i -= 1
            if (i == 0):
                i = 1
           
user_input = input(""Input numbers separated by a comma:\n"").strip()
nums = [int(item) for item in user_input.split(',')]
gnome_sort(nums)
print(nums)
","def gnome_sort(lst):
    for i in range(len(lst)):
        for j in range(i, len(lst)):
            if lst[j] < lst[i]:
                lst[j], lst[i] = lst[i], lst[j]
    return lst

lst = [10, 5, 2, 3, 1, 7, 4, 6, 8, 9]
print(gnome_sort"
1609,Write a Pandas program to split a given dataframe into groups and list all the keys from the GroupBy object. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])
print(""Original DataFrame:"")
print(df)
print(""\nSplit the data on school_code:"");
gp = df.groupby('school_code')
print(""\nList of all the keys:"")
print(gp.groups.keys())
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

df.groupby('col1').size()

df.groupby('col1').size().sort_values(ascending=False)

df.groupby('col1').size().sort_values(ascending=False).head("
1610,Write a Pandas program to join the two dataframes using the common column of both dataframes. ,"import pandas as pd
student_data1 = pd.DataFrame({
        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5'],
         'name': ['Danniella Fenton', 'Ryder Storey', 'Bryce Jensen', 'Ed Bernal', 'Kwame Morin'], 
        'marks': [200, 210, 190, 222, 199]})

student_data2 = pd.DataFrame({
        'student_id': ['S4', 'S5', 'S6', 'S7', 'S8'],
        'name': ['Scarlette Fisher', 'Carla Williamson', 'Dante Morse', 'Kaiser William', 'Madeeha Preston'], 
        'marks': [201, 200, 198, 219, 201]})

print(""Original DataFrames:"")
print(student_data1)
print(student_data2)
merged_data = pd.merge(student_data1, student_data2, on='student_id', how='inner')
print(""Merged data (inner join):"")
print(merged_data)
","import pandas as pd
import numpy as np

df1 = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})
df2 = pd.DataFrame({'col1': [7, 8, 9], 'col2': [10, 11, 12]})

df = pd.concat([df1, df2])
print(df)

# Solution:"
1611,Write a NumPy program to count a given word in each row of a given array of string values. ,"import numpy as np 

str1 = np.array([['Python','NumPy','Exercises'],
                 ['Python','Pandas','Exercises'],
                 ['Python','Machine learning','Python']])
print(""Original array of string values:"") 
print(str1)
print(""\nCount 'Python' row wise in the above array of string values:"")
print(np.char.count(str1, 'Python'))
","def count_words(values, word):
    count = 0
    for i in range(len(values)):
        if values[i] == word:
            count += 1
    return count

values = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s',"
1612,Write a NumPy program to create an array of 10's with the same shape and type of a given array. ,"import numpy as np
x = np.arange(4, dtype=np.int64)
y = np.full_like(x, 10)
print(y)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], dtype=np.int64)

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], dtype=np.float64"
1613,Write a NumPy program to find and store non-zero unique rows in an array after comparing each row with other row in a given matrix. ,"import numpy as np
arra = np.array([[ 1,  1,  0],
                 [ 0,  0,  0],
                 [ 0,  2,  3],
                 [ 0,  0,  0],
                 [ 0, -1,  1],
                 [ 0,  0,  0]])

print(""Original array:"")
print(arra)
temp = {(0, 0, 0)}
result = []
for idx, row in enumerate(map(tuple, arra)):
    if row not in temp:
        result.append(idx)
print(""\nNon-zero unique rows:"")
print(arra[result])
","import numpy as np

# Create an array of zeros
a = np.zeros((3,3))

# Create an array of ones
b = np.ones((3,3))

# Create an array of random numbers
c = np.random.randint(0,10,(3,3))

# Create a boolean array
d = np.array([[True,False,True],[False,True,"
1614,Write a Python program to print a list of space-separated elements. ,"num = [1, 2, 3, 4, 5]
print(*num)
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21"
1615,Write a Python program to get the top three items in a shop. ,"from heapq import nlargest
from operator import itemgetter
items = {'item1': 45.50, 'item2':35, 'item3': 41.30, 'item4':55, 'item5': 24}
for name, value in nlargest(3, items.items(), key=itemgetter(1)):
    print(name, value)
	","def get_top_three(shop):
    return shop[:3]

print(get_top_three(['apple', 'banana', 'orange']))

""""""

def get_top_three(shop):
    return shop[:3]

print(get_top_three(['apple', 'banana', 'orange']))

""""""

def get_top_three(shop):
    return shop[:3]

print(get_top_three("
1616,Write a Python program to insert an element at a specified position into a given list. ,"def insert_spec_position(x, n_list, pos):
    return n_list[:pos-1]+[x]+n_list[pos-1:]
n_list = [1,1,2,3,4,4,5,1]
print(""Original list:"") 
print(n_list)
kth_position = 3
x = 12
result = insert_spec_position(x, n_list, kth_position)
print(""\nAfter inserting an element at kth position in the said list:"")
print(result)
","def insert_at_position(list, element, position):
    list.insert(position, element)

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
insert_at_position(list, 10, 2)
print(list)

""""""

def insert_at_position(list, element, position):
    list.insert(position, element)

list = [1, 2, 3, 4, 5, 6"
1617,Write a Python program to check if a given function returns True for every element in a list. ,"def every(lst, fn = lambda x: x):
  return all(map(fn, lst))
print(every([4, 2, 3], lambda x: x > 1))
print(every([4, 2, 3], lambda x: x < 1))
print(every([4, 2, 3], lambda x: x == 1))
","def is_prime(n):
    if n == 2 or n == 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(math.sqrt(n)) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True

print(is_prime(2))
print(is_prime("
1618,Write a Pandas program to calculate the frequency counts of each unique value of a given series. ,"import pandas as pd
import numpy as np
num_series = pd.Series(np.take(list('0123456789'), np.random.randint(10, size=40)))
print(""Original Series:"")
print(num_series)
print(""Frequency of each unique value of the said series."")
result = num_series.value_counts()
print(result)
","import pandas as pd

# Create a dataframe from the given data
df = pd.DataFrame({""A"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], ""B"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

# Create a new column in the dataframe called ""Frequency""
df[""Frequency""] = df[""A""].apply(lambda x:"
1619,"Write a NumPy program to sort pairs of first name and last name return their indices. (first by last name, then by first name). ","import numpy as np
first_names =    ('Margery', 'Betsey', 'Shelley', 'Lanell', 'Genesis')
last_names = ('Woolum', 'Battle', 'Plotner', 'Brien', 'Stahl')
x = np.lexsort((first_names, last_names))
print(x)
","import numpy as np

first_name = np.array(['John', 'Jane', 'Jack', 'Jill', 'Jasmine'])
last_name = np.array(['Smith', 'Brown', 'Davis', 'Rodriguez', 'Wilson'])

first_name.sort()
last_name.sort()

print(first_name)
print(last_name)

# Output:
#"
1620,"Write a Pandas program to split the following datasets into groups on customer id and calculate the number of customers starting with 'C', the list of all products and the difference of maximum purchase amount and minimum purchase amount. ","import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'ord_date': ['05-10-2012','09-10-2012','05-10-2012','08-17-2012','10-09-2012','07-27-2012','10-09-2012','10-10-2012','10-10-2012','06-17-2012','07-08-2012','04-25-2012'],
'customer_id':['C3001','C3001','D3005','D3001','C3005','D3001','C3005','D3001','D3005','C3001','D3005','D3005'],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
def customer_id_C(x):
    return (x.str[0] == 'C').sum()
result = df.groupby(['salesman_id'])\
  .agg(customer_id_start_C = ('customer_id', customer_id_C),
       customer_id_list = ('customer_id', lambda x: ', '.join(x)),
       purchase_amt_gap   = ('purch_amt', lambda x: x.max()-x.min())
      )
print(""\nNumber of customers  starting with C, the list of all products and the difference of maximum purchase amount and minimum purchase amount:"")
print(result)
","import pandas as pd
import numpy as np

df = pd.read_csv(""C:\\Users\\DELL\\Desktop\\Python\\Data_Science\\Assignment_2\\Customer_Data.csv"")

df.head()

df.columns

df.shape

df.info()

df.describe()

df."
1621,Write a Python program to read a given CSV file as a dictionary. ,"import csv
data = csv.DictReader(open(""departments.csv""))
print(""CSV file as a dictionary:\n"")
for row in data:
   print(row)
","import csv

with open('data.csv', 'r') as f:
    csv_dict = csv.DictReader(f)
    for row in csv_dict:
        print(row)

""""""

import csv

with open('data.csv', 'r') as f:
    csv_dict = csv.DictReader(f)
    for row in csv_dict:
        print(row)

""""""

import csv"
1622,Write a Pandas program create a series with a PeriodIndex which represents all the calendar month periods in 2029 and 2031. Also print the values for all periods in 2030. ,"import pandas as pd
import numpy as np
pi = pd.Series(np.random.randn(36), 
               pd.period_range('1/1/2029', 
                               '12/31/2031', freq='M'))
print(""PeriodIndex which represents all the calendar month periods in 2029 and 2030:"")
print(pi)
print(""\nValues for all periods in 2030:"")
print(pi['2030'])
","import pandas as pd

# Create a dataframe with the following columns:
# Period Index
# Period
# Year
# Month
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday"
1623,Write a Python program to sort a given list of strings(numbers) numerically using lambda. ,"def sort_numeric_strings(nums_str):
    result = sorted(nums_str, key=lambda el: int(el))
    return result
nums_str = ['4','12','45','7','0','100','200','-12','-500']
print(""Original list:"")
print(nums_str)
print(""\nSort the said list of strings(numbers) numerically:"")
print(sort_numeric_strings(nums_str))
","def sort_numbers(numbers):
    numbers.sort(key=lambda x: x*x)

print(sort_numbers([1, 2, 3, 4, 5]))

""""""

def sort_numbers(numbers):
    numbers.sort(key=lambda x: x*x)

print(sort_numbers([1, 2, 3, 4, 5]))"
1624,Write a Python program to count number of lists in a given list of lists. ,"def count_list(input_list): 
    return len(input_list) 
      
list1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] 
list2 = [[2, 4], [[6,8], [4,5,8]], [10, 12, 14]]   
print(""Original list:"")
print(list1)
print(""\nNumber of lists in said list of lists:"")
print(count_list(list1))
print(""\nOriginal list:"")
print(list2)
print(""\nNumber of lists in said list of lists:"")
print(count_list(list2))
","def count_lists(lst):
    count = 0
    for i in range(len(lst)):
        for j in range(len(lst[i])):
            if lst[i][j] == 'L':
                count += 1
    return count

lst = [['L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L"
1625,"Write a Python program to create a datetime object, converted to the specified timezone using arrow module. ","import arrow
utc = arrow.utcnow()
pacific=arrow.now('US/Pacific')
nyc=arrow.now('America/Chicago').tzinfo
print(pacific.astimezone(nyc))
","import datetime

# Convert the datetime object to a string
print(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))

# Convert the string to a datetime object
print(datetime.datetime.strptime('2021-10-10 12:12:12', '%Y-%m-%d %H:%M:%S'))

# Convert the"
1626,Write a Python program to sort each sublist of strings in a given list of lists. ,"def sort_sublists(input_list):
    result = list(map(sorted, input_list)) 
    return result
color1 = [[""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]]
print(""\nOriginal list:"")
print(color1)  
print(""\nAfter sorting each sublist of the said list of lists:"")
print(sort_sublists(color1))
","def sort_sublists(lst):
    lst.sort()
    return lst

lst = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]
print(sort_sublists(lst))

""""""

def sort_sublists(lst):
    lst.sort()
    return lst

lst = [['a', 'b', 'c'"
1627,"Write a Pandas program to create a Pivot table and find the region wise, item wise unit sold. ","import numpy as np
import pandas as pd
df = pd.read_excel('E:\SaleData.xlsx')
print(pd.pivot_table(df,index=[""Region"", ""Item""], values=""Units"", aggfunc=np.sum))
","import pandas as pd
import numpy as np

df = pd.read_csv(""https://github.com/jbrownlee/Datasets/blob/master/pivot_table.csv?raw=true"")

df.head()

df.columns = ['Region', 'Item', 'Unit Sold']

df.head()

df.head(5)

df.head(5).Region

df.head("
1628,Write a Python program to group the elements of a list based on the given function and returns the count of elements in each group. ,"from collections import defaultdict
def count_by(lst, fn = lambda x: x):
  count = defaultdict(int)
  for val in map(fn, lst):
    count[val] += 1
  return dict(count)
from math import floor
print(count_by([6.1, 4.2, 6.3], floor)) 
print(count_by(['one', 'two', 'three'], len))
","def group_elements(lst, func):
    return len(list(filter(func, lst)))

print(group_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], lambda x: x % 2))

""""""

def group_elements(lst, func):
    return len(list(filter(func, lst)))

print(group_elements([1"
1629,Write a Python program to find tag(s) beneath other tag(s) in a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc,""lxml"")
print(""\na tag(s) Beneath body tag:"")
print(soup.select(""body a""))
print(""\nBeneath html head:"")
print(soup.select(""html head title""))
","import re

# regex pattern to match tag(s)
tag_pattern = r'<[^>]+>'

# regex pattern to match other tags
other_tag_pattern = r'<[^>]+>'

# regex pattern to match tag(s)
tag_pattern_2 = r'<[^>]+>'

# regex pattern to match other tags
other_tag_pattern_2 = r'<[^>]+>"
1630,Write a Python program to sort a given mixed list of integers and strings using lambda. Numbers must be sorted before strings. ,"def sort_mixed_list(mixed_list):
    mixed_list.sort(key=lambda e: (isinstance(e, str), e))
    return mixed_list
mixed_list = [19,'red',12,'green','blue', 10,'white','green',1]
print(""Original list:"")
print(mixed_list)
print(""\nSort the said  mixed list of integers and strings:"")
print(sort_mixed_list(mixed_list))
","def sort_mixed_list(mixed_list):
    mixed_list.sort(key=lambda x: x[0])
    mixed_list.sort(key=lambda x: x[1])
    mixed_list.sort(key=lambda x: x[2])
    mixed_list.sort(key=lambda x: x[3])
    return mixed_list

print(sort_mixed_list([["
1631,Write a Python program to decode a run-length encoded given list. ,"def decode(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]
n_list = [[2, 1], 2, 3, [2, 4], 5, 1]
print(""Original encoded list:"") 
print(n_list)
print(""\nDecode a run-length encoded said list:"")
print(decode(n_list))
","def decode(l):
    # Your code here
    return l

l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47"
1632,Write a Pandas program to convert given datetime to timestamp. ,"import pandas as pd
import datetime as dt
import numpy as np
df = pd.DataFrame(index=pd.DatetimeIndex(start=dt.datetime(2019,1,1,0,0,1),
   end=dt.datetime(2019,1,1,10,0,1), freq='H'))\
   .reset_index().rename(columns={'index':'datetime'})
print(""Sample datetime data:"")
print(df.head(10))
df['ts'] = df.datetime.values.astype(np.int64) // 10 ** 9
print(""\nConvert datetime to timestamp:"")
print (df)
","import datetime

def convert_timestamp(timestamp):
    return datetime.datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')

print(convert_timestamp(1554686400))

""""""

# Solution 1

import datetime

def convert_timestamp(timestamp):
    return datetime.datetime.fromtimestamp(timestamp).strftime('%Y-%m"
1633,"Write a NumPy program to compute the mean, standard deviation, and variance of a given array along the second axis. ","import numpy as np
x = np.arange(6)
print(""\nOriginal array:"")
print(x)
r1 = np.mean(x)
r2 = np.average(x)
assert np.allclose(r1, r2)
print(""\nMean: "", r1)
r1 = np.std(x)
r2 = np.sqrt(np.mean((x - np.mean(x)) ** 2 ))
assert np.allclose(r1, r2)
print(""\nstd: "", 1)
r1= np.var(x)
r2 = np.mean((x - np.mean(x)) ** 2 )
assert np.allclose(r1, r2)
print(""\nvariance: "", r1)
","import numpy as np

arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(arr.mean())
print(arr.std())
print(arr.var())

# Output:
# [2.5 3.5 4.5]
# [5.0 6.0 7.0 8.0]
# [9.0 10"
1634,Write a Pandas program to drop the rows where at least one element is missing in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})

print(""Original Orders DataFrame:"")
print(df)
print(""\nDrop the rows where at least one element is missing:"")
result = df.dropna()
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

df.dropna(axis=0, inplace=True)

df.dropna(axis=1, inplace=True)

df.dropna(axis=1, how='all')

df.dropna(axis=1,"
1635,Write a NumPy program to find the position of the index of a specified value greater than existing value in NumPy array. ,"import numpy as np    
n= 4
nums = np.arange(-6, 6)
print(""\nOriginal array:"")
print(nums)
print(""\nPosition of the index:"")
print(np.argmax(nums>n/2))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Solution:
print(arr.argmax())

# Output:
# 3

# Explanation:
# The index of the 3rd element is 3.

# Solution:
print(arr.argmax())

# Output:
# 3

# Explanation:
# The"
1636,"Write a Python program to get a list of elements that exist in both lists, after applying the provided function to each list element of both. ","def intersection_by(a, b, fn):
  _b = set(map(fn, b))
  return [item for item in a if fn(item) in _b]
from math import floor
print(intersection_by([2.1, 1.2], [2.3, 3.4], floor))
","def get_elements(list1, list2):
    return list1 + list2

print(get_elements([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))

""""""

def get_elements(list1, list2):
    return list1 + list2

print(get_elements([1, 2, 3, 4, 5], [2, 3"
1637,"Write a Python program to create datetime from integers, floats and strings timestamps using arrow module. ","import arrow
i = arrow.get(1857900545)
print(""Date from integers: "")
print(i)
f = arrow.get(1857900545.234323)
print(""\nDate from floats: "")
print(f)
s = arrow.get('1857900545')
print(""\nDate from Strings: "")
print(s)
","import arrow

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp"
1638,Write a Python program to insert an item in front of a given doubly linked list. ,"class Node(object):
    # Singly linked node
    def __init__(self, data=None, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev

class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, data):
        # Append an item 
        new_item = Node(data, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item
        self.count += 1
    
    def iter(self):
        # Iterate the list
        current = self.head
        while current:
            item_val = current.data
            current = current.next
            yield item_val

    def print_foward(self):
        for node in self.iter():
            print(node)   
        
    def insert_start(self, data):        
        if self.head is not None:
            new_node = Node(data, None, None)
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node
            self.count += 1

items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')
items.append_item('SQL')

print(""Original list:"")
items.print_foward()
print(""\nAppend item in front of the list:"")
items.insert_start(""Perl"")
items.print_foward()
","def insertFront(doublyLinkedList, data):
    doublyLinkedList.insert_front(data)

def insertBack(doublyLinkedList, data):
    doublyLinkedList.insert_back(data)

def getFront(doublyLinkedList):
    return doublyLinkedList.get_front()

def getBack(doublyLinkedList):
    return doublyLinkedList.get_back"
1639,Write a Python program to select the odd items of a list. ,"x = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(x[::2])
","def odd_items(lst):
    odd_items = []
    for i in lst:
        if i % 2!= 0:
            odd_items.append(i)
    return odd_items

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(odd_items(lst))

""""""

# Solution:

def odd_items(lst):
    odd_items = []
    for i in"
1640,Write a NumPy program to create an array that represents the rank of each item of a given array. ,"import numpy as numpy
array = numpy.array([24, 27, 30, 29, 18, 14])
print(""Original array:"")
print(array)
argsort_array = array.argsort()
ranks_array = numpy.empty_like(argsort_array)
ranks_array[argsort_array] = numpy.arange(len(array))
print(""\nRank of each item of the said array:"")
print(ranks_array)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.shape)

# rank of each item of arr
print(arr.ndim)

# rank of each item of arr
print(arr.size)

# rank of each item of arr
print(arr.max())

# rank of each item of arr
print(arr.min())"
1641,Write a Pandas program to split a dataset to group by two columns and count by each row. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
orders_data = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3005,3001,3002,3009,3005,3007,3002,3004,3009,3008,3003,3002],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(orders_data)
print(""\nGroup by two columns and count by each row:"")
result = orders_data.groupby(['salesman_id','customer_id']).size().reset_index().groupby(['salesman_id','customer_id'])[[0]].max()
print(result)
","import pandas as pd

# Read the data
df = pd.read_csv(""data/height-weight.csv"")

# Create a groupby object
groupby_object = df.groupby(['Height', 'Weight'])

# Count the rows
print(groupby_object.size())

# Create a dictionary to store the result
result = {}

# Iterate over the groupby object
for name, group in groupby_object:"
1642,Write a NumPy program to encode all the elements of a given array in cp500 and decode it again. ,"import numpy as np
x = np.array(['python exercises', 'PHP', 'java', 'C++'], dtype=np.str)
print(""Original Array:"")
print(x)
encoded_char = np.char.encode(x, 'cp500')
decoded_char = np.char.decode(encoded_char,'cp500')
print(""\nencoded ="", encoded_char)
print(""decoded ="", decoded_char)
","import numpy as np

def encode(arr):
    encoded = np.zeros(len(arr), dtype=int)
    for i in range(len(arr)):
        encoded[i] = arr[i]
    return encoded

def decode(arr):
    decoded = np.zeros(len(arr), dtype=int)
    for i in range(len(arr)):
        decoded[i] ="
1643,"Write a Python program to find the parent's process id, real user ID of the current process and change real user ID. ","import os
print(""Parents process id:"",os.getppid())
uid = os.getuid()
print(""\nUser ID of the current process:"", uid)
uid = 1400
os.setuid(uid)
print(""\nUser ID changed"")
print(""User ID of the current process:"", os.getuid())
","import os
import sys

def get_pid(process_name):
    pid = os.getpid()
    if process_name == ""python"":
        pid = os.getppid()
    return pid

def change_user_id(process_name, user_id):
    pid = get_pid(process_name)
    os.setpgrp(pid, user_id)

if __name__ == ""__"
1644,Write a Python program to valid a IP address. ,"import socket
addr = '127.0.0.2561'
try:
    socket.inet_aton(addr)
    print(""Valid IP"")
except socket.error:
    print(""Invalid IP"")
","def valid_ip(ip):
    if len(ip)!= 8:
        return False
    for i in range(0, len(ip)):
        if not ip[i].isdigit():
            return False
        if not ip[i].isalpha():
            return False
        if not ip[i].isupper():
            return False
        if not ip[i].islower():
            return False
        if not ip[i].isnumeric():
            return False
        if not ip"
1645,Write a Python program to split a list every Nth element. ,"C = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']
def list_slice(S, step):
    return [S[i::step] for i in range(step)]
print(list_slice(C,3))
","def split_every_nth(lst, n):
    return [lst[i:i+n] for i in range(0, len(lst), n)]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
print(split_every_nth(lst, n))

""""""

def split_every_nth(lst, n):
    return [lst[i:i+"
1646,"Write a Python program to add two given lists of different lengths, start from left , using itertools module. ","from itertools import zip_longest

def elementswise_left_join(l1, l2):
    result = [a + b for a,b in zip_longest(l1, l2, fillvalue=0)][::1]
    return result

nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [3, 3, -1, 7]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""\nAdd said two lists from left:"")
print(elementswise_left_join(nums1, nums2))

nums3 = [1, 2, 3, 4, 5, 6]
nums4 = [2, 4, -3]
print(""\nOriginal lists:"")
print(nums3)
print(nums4)
print(""\nAdd said two lists from left:"")
print(elementswise_left_join(nums3, nums4))
","def add_two_lists(list1, list2):
    result = []
    for i in range(len(list1)):
        result.append(list1[i] + list2[i])
    return result

print(add_two_lists([1, 2, 3], [4, 5, 6]))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
1647,Write a Python program to write a list to a file. ,"color = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']
with open('abc.txt', ""w"") as myfile:
        for c in color:
                myfile.write(""%s\n"" % c)

content = open('abc.txt')
print(content.read())
","import os

def write_list_to_file(list, filename):
    with open(filename, 'w') as file:
        for item in list:
            file.write(str(item) + '\n')

def main():
    filename = 'list.txt'
    write_list_to_file(['Python', 'is', 'awesome'], filename)
    print('File {} created.'.format(filename))

if __name__ == '__main__':"
1648,Write a Python program to find the item with maximum occurrences in a given list. ,"def max_occurrences(nums):
    max_val = 0
    result = nums[0] 
    for i in nums:
        occu = nums.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result

nums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]
print (""Original list:"")
print(nums)
print(""\nItem with maximum occurrences of the said list:"")
print(max_occurrences(nums)) 
","def max_occurrences(lst, item):
    max_occurrences = 0
    for i in lst:
        if i == item:
            max_occurrences += 1
    return max_occurrences

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
item = 9
print(max_occurrences(lst, item))

""""""

def max_occurrences(lst"
1649,Write a NumPy program to compute the covariance matrix of two given arrays. ,"import numpy as np
x = np.array([0, 1, 2])
y = np.array([2, 1, 0])
print(""\nOriginal array1:"")
print(x)
print(""\nOriginal array1:"")
print(y)
print(""\nCovariance matrix of the said arrays:\n"",np.cov(x, y))
","import numpy as np

a = np.array([1, 2, 3, 4])
b = np.array([5, 6, 7, 8])

c = np.cov(a, b)
print(c)

# Output:
[[1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0."
1650,Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a Pandas dataframe and display the last ten rows. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')
df.tail(n=10)
","import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')
df.head(10)

""""""

# Solution 1

import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')
df.head(10)

# Solution 2

import pandas as pd

df = pd."
1651,Write a NumPy program to save a NumPy array to a text file. ,"import numpy as np
a = np.arange(1.0, 2.0, 36.2)
np.savetxt('file.out', a, delimiter=',')
","import numpy as np

arr = np.array([1, 2, 3, 4, 5])

np.savetxt('arr.txt', arr)

arr = np.loadtxt('arr.txt')

arr = np.array([1, 2, 3, 4, 5])

np.savetxt('arr.txt', arr)

arr = np.loadtxt('arr.txt')

arr = np.array([1, 2, 3, 4, 5])"
1652,Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and convert the data to use the hire_date as the index. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx')
result = df.set_index(['hire_date'])
result
","import pandas as pd

employee = pd.read_excel('employee.xlsx')

employee.index = pd.to_datetime(employee.hire_date)

employee.index.name = 'Date'

print(employee)

# Solution:

# import pandas as pd
# import datetime as dt"
1653,Write a Python program to create a datetime from a given timezone-aware datetime using arrow module. ,"import arrow
from datetime import datetime
from dateutil import tz
print(""\nCreate a date from a given date and a given time zone:"")
d1 = arrow.get(datetime(2018, 7, 5), 'US/Pacific')
print(d1)
print(""\nCreate a date from a given date and a time zone object from a string representation:"")
d2 = arrow.get(datetime(2017, 7, 5), tz.gettz('America/Chicago'))
print(d2)
d3 = arrow.get(datetime.now(tz.gettz('US/Pacific')))
print(""\nCreate a date using current datetime and a specified time zone:"")
print(d3)
","import datetime

def datetime_to_arrow(dt):
    return dt.replace(tzinfo=datetime.timezone.utc).astimezone(datetime.timezone.utc)

dt = datetime.datetime(2021, 1, 1, 12, 30, 0, tzinfo=datetime.timezone.utc)
print(datetime_to_arrow(dt))

""""""

# Solution:"
1654,Write a NumPy program to extract all the rows to compute the student weight from a given array (student information) where a specific column starts with a given character. ,"import numpy as np
np.set_printoptions(linewidth=100)
student =  np.array([['01', 'V', 'Debby Pramod', 30.21],
 ['02', 'V', 'Artemiy Ellie', 29.32],
 ['03', 'V', 'Baptist Kamal', 31.00],
 ['04', 'V', 'Lavanya Davide', 30.22],
 ['05', 'V', 'Fulton Antwan', 30.21],
 ['06', 'V', 'Euanthe Sandeep', 31.00],
 ['07', 'V', 'Endzela Sanda', 32.00],
 ['08', 'V', 'Victoire Waman', 29.21],
 ['09', 'V', 'Briar Nur', 30.00],
 ['10', 'V', 'Rose Lykos', 32.00]])
print(""Original array:"")
print(student)
char='E'
result = student[np.char.startswith(student[:,2], char)]
print(""\nTotal weight, where student name starting with"",char)
print(np.round(result[:, 3].astype(float).sum(), 2))
char='D'
result = student[np.char.startswith(student[:,2], char)]
print(""\nTotal weight, where student name starting with"",char)
print(np.round(result[:, 3].astype(float).sum(), 2))
","import numpy as np

arr = np.array([[1,2,3,4,5,6,7,8,9,10],
                [11,12,13,14,15,16,17,18,19,20],
                [21,22,23,24,25,26,27,28,29,30]])

print(arr[:,0])

# Solution"
1655,Write a NumPy program to find the memory size of a NumPy array. ,"import numpy as np
n = np.zeros((4,4))
print(""%d bytes"" % (n.size * n.itemsize))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(arr.nbytes)

# Solution:
# arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
# print(arr.nbytes)

# Solution:
# arr = np.array([1, 2, 3, 4, 5, 6, 7, 8"
1656,Write a Python program to check whether an instance is complex or not. ,"import json

def encode_complex(object):
    # check using isinstance method
    if isinstance(object, complex):
        return [object.real, object.imag]
    # raised error if object is not complex
    raise TypeError(repr(object) + "" is not JSON serialized"")

complex_obj = json.dumps(2 + 3j, default=encode_complex)
print(complex_obj) 
","def is_complex(obj):
    if type(obj) == complex:
        return True
    else:
        return False

print(is_complex(1+2j))

""""""

# Solution:

def is_complex(obj):
    if type(obj) == complex:
        return True
    else:
        return False

print(is_complex(1+2j))"
1657,Write a Python program to print the numbers of a specified list after removing even numbers from it. ,"num = [7,8, 120, 25, 44, 20, 27]
num = [x for x in num if x%2!=0]
print(num)
","import math

def remove_even(lst):
    for i in range(len(lst)):
        if lst[i] % 2 == 0:
            lst.remove(lst[i])
    return lst

print(remove_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

# Output: [1, 3, 5, 7, 9]

# Time complexity: O("
1658,Write a Python program to insert tags or strings immediately before specified tags or strings. ,"from bs4 import BeautifulSoup
soup = BeautifulSoup(""<b>w3resource.com</b>"", ""lxml"")
print(""Original Markup:"")
print(soup.b)
tag = soup.new_tag(""i"")
tag.string = ""Python""
print(""\nNew Markup, before inserting the text:"")
soup.b.string.insert_before(tag)
print(soup.b)
","def insert_tags(s, tags):
    return s.replace(tags, '<{}>'.format(tags))

print(insert_tags('<b>Hello</b>', 'bold'))

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

''"
1659,Write a Python program to convert an array to an ordinary list with the same items. ,"from array import *
array_num = array('i', [1, 3, 5, 3, 7, 1, 9, 3])
print(""Original array: ""+str(array_num))
num_list = array_num.tolist()
print(""Convert the said array to an ordinary list with the same items:"")
print(num_list)
","arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

arr = list(arr)

arr[0] = 100

arr[1:4] = [100, 200, 300]

arr[4:7] = [100, 200, 300, 400]

arr[7:9] = [100, 200, 300, 400, 500, 600, 700]

arr[9:11] = [100, 200"
1660,Write a Python function to check whether a string is a pangram or not. ,"import string, sys
def ispangram(str1, alphabet=string.ascii_lowercase):
    alphaset = set(alphabet)
    return alphaset <= set(str1.lower())
 
print ( ispangram('The quick brown fox jumps over the lazy dog')) 
","def is_pangram(string):
    for i in range(len(string)):
        if string[i] not in alphabet:
            return False
    return True

print(is_pangram(""The quick brown fox jumps over the lazy dog""))

""""""

def is_pangram(string):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    for i in range(len(string)):
        if"
1661,Write a Python program to create a new deque with three items and iterate over the deque's elements. ,"from collections import deque
dq = deque('aeiou')
for element in dq:
   print(element)
","def deque(items):
    new_deque = deque()
    for i in items:
        new_deque.append(i)
    return new_deque

items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(deque(items))

""""""

# Solution 1

def deque(items):
    new_deque = deque()
    for i"
1662,Write a NumPy program to convert a PIL Image into a NumPy array. ,"import numpy as np
import PIL
img_data = PIL.Image.open('w3resource-logo.png' )
img_arr = np.array(img_data) 
print(img_arr)
","import numpy as np

img = Image.open('lena.png')
arr = np.array(img)

arr.shape

arr.dtype

arr.size

arr.ndim

arr.shape[0]

arr.shape[1]

arr.shape[2]

arr.size

arr.size

arr.size

arr.size

arr.size

arr.size

arr.size"
1663,Write a Pandas program to create a Timewheel of Hour Vs Year comparison of the top 10 years in which the UFO was sighted. ,"import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.cm as cm
#Source: https://bit.ly/2XDY2XN
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
most_sightings_years = df['Date_time'].dt.year.value_counts().head(10)
def is_top_years(year):
   if year in most_sightings_years.index:
       return year
month_vs_year = df.pivot_table(columns=df['Date_time'].dt.month,index=df['Date_time'].dt.year.apply(is_top_years),aggfunc='count',values='city')
month_vs_year.index = month_vs_year.index.astype(int)
month_vs_year.columns = month_vs_year.columns.astype(int)
print(""\nComparison of the top 10 years in which the UFO was sighted vs each month:"")
def pie_heatmap(table, cmap='coolwarm_r', vmin=None, vmax=None,inner_r=0.25, pie_args={}):
   n, m = table.shape
   vmin= table.min().min() if vmin is None else vmin
   vmax= table.max().max() if vmax is None else vmax

   centre_circle = plt.Circle((0,0),inner_r,edgecolor='black',facecolor='white',fill=True,linewidth=0.25)
   plt.gcf().gca().add_artist(centre_circle)
   norm = mpl.colors.Normalize(vmin=vmin, vmax=vmax)
   cmapper = cm.ScalarMappable(norm=norm, cmap=cmap)

   for i, (row_name, row) in enumerate(table.iterrows()):
       labels = None if i > 0 else table.columns
       wedges = plt.pie([1] * m,radius=inner_r+float(n-i)/n, colors=[cmapper.to_rgba(x) for x in row.values],
           labels=labels, startangle=90, counterclock=False, wedgeprops={'linewidth':-1}, **pie_args)
       plt.setp(wedges[0], edgecolor='grey',linewidth=1.5)
       wedges = plt.pie([1], radius=inner_r+float(n-i-1)/n, colors=['w'], labels=[row_name], startangle=-90, wedgeprops={'linewidth':0})
       plt.setp(wedges[0], edgecolor='grey',linewidth=1.5)
plt.figure(figsize=(8,8))
plt.title(""Timewheel of Hour Vs Year"",y=1.08,fontsize=30)
pie_heatmap(month_vs_year, vmin=-20,vmax=80,inner_r=0.2)
","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/UFO%20Visits.csv?raw=true')

df['Year'] = df['Year'].astype(str)
df['Year'] = df['Year'].str.replace('[^0-9]', '')
df['Year'] = df"
1664,Write a NumPy program to check whether two arrays are equal (element wise) or not. ,"import numpy as np
nums1 = np.array([0.5, 1.5, 0.2])
nums2 = np.array([0.4999999999, 1.500000000, 0.2])
np.set_printoptions(precision=15)
print(""Original arrays:"")
print(nums1)
print(nums2)
print(""\nTest said two arrays are equal (element wise) or not:?"")
print(nums1 == nums2)
nums1 = np.array([0.5, 1.5, 0.23])
nums2 = np.array([0.4999999999, 1.5000000001, 0.23])
print(""\nOriginal arrays:"")
np.set_printoptions(precision=15)
print(nums1)
print(nums2)
print(""\nTest said two arrays are equal (element wise) or not:?"")
print(np.equal(nums1, nums2))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([1, 2, 3, 4, 5])

print(a == b)

# Output:
# True
# True
# True
# True

# Hint: You can use the built-in function np.array_equal to check whether two arrays are equal.

# Hint: You can use the built-in function np."
1665,"Write a Python program to add two given lists of different lengths, start from right. ","def elementswise_right_join(l1, l2):
    f_len = len(l1)-(len(l2) - 1)
    for i in range(len(l1), 0, -1):
        if i-f_len < 0:
            break
        else:
            l1[i-1] = l1[i-1] + l2[i-f_len]
    return l1

nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [3, 3, -1, 7]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""\nAdd said two lists from left:"")
print(elementswise_right_join(nums1, nums2))

nums3 = [1, 2, 3, 4, 5, 6]
nums4 = [2, 4, -3]
print(""\nOriginal lists:"")
print(nums3)
print(nums4)
print(""\nAdd said two lists from left:"")
print(elementswise_right_join(nums3, nums4))
","def add_two_lists(list1, list2):
    list1.append(list2[0])
    list1.append(list2[1])
    return list1

print(add_two_lists([1, 2, 3], [4, 5, 6]))

""""""

def add_two_lists(list1, list2):
    list1.append(list2[0])
    list1.append(list2[1])"
1666,Write a Python program find the sorted sequence from a set of permutations of a given input. ,"from itertools import permutations
from more_itertools import windowed 
def is_seq_sorted(lst):
  print(lst)  
  return all(
    x <= y
    for x, y in windowed(lst, 2)
  )
def permutation_sort(lst):
  return next(
    permutation_seq
    for permutation_seq in permutations(lst)
    if is_seq_sorted(permutation_seq)
  )
print(""All the sequences:"")
print(""\nSorted sequence: "",permutation_sort([12, 10, 9]))

print(""\n\nAll the sequences:"")
print(""\nSorted sequence: "",permutation_sort([2, 3, 1, 0]))
","import sys

def find_permutation(permutation, input_list):
    for i in range(len(permutation)):
        if permutation[i] in input_list:
            return permutation[i]
    return -1

def main():
    input_list = []
    input_list = sys.stdin.readline().strip().split()
    input_list = list(map(int, input_list))
    permutation = []"
1667,Write a Pandas program to calculate all the sighting days of the unidentified flying object (ufo) from current date. ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
now = pd.to_datetime('today')
print(""Original Dataframe:"")
print(df.head())
print(""\nCurrent date:"")
print(now)
","# Solution:

# Input:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date"
1668,"Write a Python program to add two given lists of different lengths, start from right , using itertools module. ","from itertools import zip_longest

def elementswise_right_join(l1, l2):
    result = [a + b for a,b in zip_longest(reversed(l1), reversed(l2), fillvalue=0)][::-1]
    return result

nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [3, 3, -1, 7]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""\nAdd said two lists from right:"")
print(elementswise_right_join(nums1, nums2))

nums3 = [1, 2, 3, 4, 5, 6]
nums4 = [2, 4, -3]
print(""\nOriginal lists:"")
print(nums3)
print(nums4)
print(""\nAdd said two lists from right:"")
print(elementswise_right_join(nums3, nums4))
","def add_two_lists(list1, list2):
    for i in range(len(list1)):
        list1[i] += list2[i]
    return list1

print(add_two_lists([1, 2, 3], [4, 5, 6]))

""""""

def add_two_lists(list1, list2):
    for i in range(len(list1)):
        list1["
1669,Write a Pandas program to replace NaNs with median or mean of the specified columns in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""Using median in purch_amt to replace NaN:"")
df['purch_amt'].fillna(df['purch_amt'].median(), inplace=True)
print(df)
print(""Using mean to replace NaN:"")
df['sale_amt'].fillna(int(df['sale_amt'].mean()), inplace=True)
print(df)
","import pandas as pd

# Read the data
df = pd.read_csv(""data/data.csv"")

# Replace NaNs with median or mean of the specified columns
df.fillna(df.median(), inplace=True)

# Print the dataframe
print(df)

# Create a new dataframe with the median or mean of the specified columns
df_median = df.copy()
df_median.fill"
1670,Write a Python program to change the tag's contents and replace with the given string. ,"from bs4 import BeautifulSoup
html_doc = '<a href=""http://example.com/"">HTML<i>example.com</i></a>'
soup = BeautifulSoup(html_doc, ""lxml"")
tag = soup.a
print(""\nOriginal Markup:"")
print(tag)
print(""\nOriginal Markup with new text:"")
tag.string = ""CSS""
print(tag)
","import re

def solution(s):
    s = re.sub(r'<[^<>]+>', '', s)
    s = re.sub(r'<[^<>]+>', '', s)
    s = re.sub(r'<[^<>]+>', '', s)
    s = re.sub(r'<[^<>]+>', '', s)
    s = re.sub(r'<[^"
1671,"Write a Python program to get the symmetric difference between two lists, after applying the provided function to each list element of both. ","def symmetric_difference_by(a, b, fn):
  (_a, _b) = (set(map(fn, a)), set(map(fn, b)))
  return [item for item in a if fn(item) not in _b] + [item
          for item in b if fn(item) not in _a]
from math import floor
print(symmetric_difference_by([2.1, 1.2], [2.3, 3.4], floor))
","def symmetricDifference(list1, list2):
    list1.sort()
    list2.sort()
    return list1[0] - list2[0]

print(symmetricDifference([1, 2, 3], [2, 3, 4]))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
1672,Write a NumPy program to collapse a 3-D array into one dimension array. ,"import numpy as np
x = np.eye(3)
print(""3-D array:"")
print(x)
f = np.ravel(x, order='F')
print(""One dimension array:"")
print(f)
","import numpy as np

x = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(x)

# Solution:
x = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(x.reshape(3, -1))

# Solution:
x = np.array([[1, 2, 3], [4, 5"
1673,"Write a Python script to generate and print a dictionary that contains a number (between 1 and n) in the form (x, x*x). ","n=int(input(""Input a number ""))
d = dict()

for x in range(1,n+1):
    d[x]=x*x

print(d) 
","# Solution:

# Sample Input:

# 5

# Sample Output:

# {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

# Expected Output:

# {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

# Solution:

# Solution:

# Sample Input:

# 3

#"
1674,Write a Pandas program to find out the records where consumption of beverages per person average >=5 and Beverage Types is Beer from world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details: average consumption of \nbeverages per person >=5 and Beverage Types is Beer:"")
print(w_a_con[(w_a_con['Display Value'] >= 5) & (w_a_con['Beverage Types'] == 'Beer')].head(10))
","import pandas as pd

# Read the data
df = pd.read_csv('world_beverages.csv')

# Create a new column 'Beer'
df['Beer'] = df['World_Beverages'].apply(lambda x: 'Beer' if x >= 5 else 'Not Beer')

# Create a new column 'Beer_Types'
df['Beer_Types'] = df['Beer'"
1675,"Write a Python program to a list of all the h1, h2, h3 tags from the webpage python.org. ","import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""List of all the h1, h2, h3 :"")
for heading in soup.find_all([""h1"", ""h2"", ""h3""]):
    print(heading.name + ' ' + heading.text.strip())

","python solution.py

""""""

import requests
import bs4

def get_html(url):
    r = requests.get(url)
    return r.text

def get_soup(html):
    soup = bs4.BeautifulSoup(html, 'html.parser')
    return soup

def get_h1_tags(soup):
    h1_tags = soup.find_all"
1676,Write a Python program to print a given doubly linked list in reverse order. ,"class Node(object):
    # Singly linked node
    def __init__(self, data=None, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev

class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, data):
        # Append an item 
        new_item = Node(data, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item
        self.count += 1
    
    def iter(self):
        # Iterate the list
        current = self.head
        while current:
            item_val = current.data
            current = current.next
            yield item_val

    def print_foward(self):
        for node in self.iter():
            print(node)   
        
    def reverse(self):
        """""" Reverse linked list. """"""
        current = self.head
        while current:
            temp = current.next
            current.next = current.prev
            current.prev = temp
            current = current.prev
        temp = self.head
        self.head = self.tail
        self.tail = temp

items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')
items.append_item('SQL')

print(""Reverse list "")
items.reverse()
items.print_foward()
","# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None, prev=None):
#         self.val = val
#         self.next = next
#         self.prev = prev
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if head is None:
            return head
        
        prev = None
        curr = head
        
        while"
1677,"Write a NumPy program to replace ""PHP"" with ""Python"" in the element of a given array. ","import numpy as np
x = np.array(['PHP Exercises, Practice, Solution'], dtype=np.str)
print(""\nOriginal Array:"")
print(x)
r = np.char.replace(x, ""PHP"", ""Python"")
print(""\nNew array:"")
print(r)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr[arr == ""PHP""] = ""Python""

print(arr)

""""""

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr[arr == ""PHP""] = ""Python""

print(arr)"
1678,Write a Python program to create multiple lists. ,"obj = {}
for i in range(1, 21):
    obj[str(i)] = []
print(obj)
","def create_list(n):
    lst = []
    for i in range(n):
        lst.append(i)
    return lst

n = int(input(""Enter the number of elements: ""))
print(create_list(n))

""""""

# Solution 1

def create_list(n):
    lst = []
    for i in range(n):
        lst.append(i)
    return lst

n = int(input(""Enter the number"
1679,Write a Python program to remove duplicate words from a given list of strings. ,"def unique_list(l):
    temp = []
    for x in l:
        if x not in temp:
            temp.append(x)
    return temp

text_str = [""Python"", ""Exercises"", ""Practice"", ""Solution"", ""Exercises""]
print(""Original String:"")
print(text_str)
print(""\nAfter removing duplicate words from the said list of strings:"")
print(unique_list(text_str))
","def remove_duplicate_words(words):
    words_set = set(words)
    return list(words_set)

print(remove_duplicate_words([""apple"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", """
1680,Write a Python program to split a variable length string into variables. ,"var_list = ['a', 'b', 'c']
x, y, z = (var_list + [None] * 3)[:3]
print(x, y, z)
var_list = [100, 20.25]
x, y = (var_list + [None] * 2)[:2]
print(x, y)
","def split_string(string):
    return string.split()

print(split_string(""This is a string with spaces""))

""""""

def split_string(string):
    return string.split()

print(split_string(""This is a string with spaces""))

""""""

def split_string(string):
    return string.split()

print(split_string(""This is a string with spaces""))

""""""

def split_string(string):
    return string."
1681,br/>,"row_num = int(input(""Input number of rows: ""))
col_num = int(input(""Input number of columns: ""))
multi_list = [[0 for col in range(col_num)] for row in range(row_num)]

for row in range(row_num):
    for col in range(col_num):
        multi_list[row][col]= row*col

print(multi_list)
","def solution(n):
    if n == 1:
        return 1
    else:
        return n * solution(n-1)

print(solution(5))

# Output:
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1"
1682,Difference between List comprehension and Lambda in Python,"lst = [x ** 2 for x in range (1, 11) if x % 2 == 1]
print(lst)","def solution(A):
    return [A[i] for i in range(len(A)) if A[i] % 2 == 0]

""""""

def solution(A):
    return [A[i] for i in range(len(A)) if A[i] % 2 == 0]

print(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(solution([1, 2, 3, 4, 5, 6, 7, 8"
1683,Write a Python program to Convert Snake case to Pascal case,"# Python3 code to demonstrate working of
# Convert Snake case to Pascal case
# Using title() + replace()

# initializing string
test_str = 'geeksforgeeks_is_best'

# printing original string
print(""The original string is : "" + test_str)

# Convert Snake case to Pascal case
# Using title() + replace()
res = test_str.replace(""_"", "" "").title().replace("" "", """")

# printing result
print(""The String after changing case : "" + str(res))","def convert_snake_case(s):
    return s.title()

print(convert_snake_case(""SNAKE_CASE""))

""""""

# Solution 1

def convert_snake_case(s):
    return s.title()

print(convert_snake_case(""SNAKE_CASE""))

# Solution 2

def convert_snake_case(s):
    return s.title().replace(""_"", "" "").replace(""-"","
1684,Check whether a Numpy array contains a specified row in Python,"# importing package
import numpy

# create numpy array
arr = numpy.array([[1, 2, 3, 4, 5],
[6, 7, 8, 9, 10],
[11, 12, 13, 14, 15],
[16, 17, 18, 19, 20]
])

# view array
print(arr)

# check for some lists
print([1, 2, 3, 4, 5] in arr.tolist())
print([16, 17, 20, 19, 18] in arr.tolist())
print([3, 2, 5, -4, 5] in arr.tolist())
print([11, 12, 13, 14, 15] in arr.tolist())","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])

if a[0, 0] == 1:
    print(""Row 0 contains 1"")
else:
    print(""Row 0 does not contain 1"")

if a[1, 0] == 2:
    print(""Row 1 contains 2"")
else:
    print(""Row 1 does not contain 2"")

if a[0, 1] == 3:
    print(""Row 0"
1685,Write a Python program to convert Set into Tuple and Tuple into Set,"# program to convert set to tuple
# create set
s = {'a', 'b', 'c', 'd', 'e'}

# print set
print(type(s), "" "", s)

# call tuple() method
# this method convert set to tuple
t = tuple(s)

# print tuple
print(type(t), "" "", t)","def set_tuple(set_tuple):
    return tuple(set_tuple)

def set_tuple_into_set(set_tuple):
    return set(set_tuple)

def set_tuple_into_tuple(set_tuple):
    return tuple(set_tuple)

def set_tuple_into_set_into_set(set_tuple):
    return set(set_tuple)

def set_t"
1686,Write a Python datetime to integer timestamp,"from datetime import datetime
curr_dt = datetime.now()


print(""Current datetime: "", curr_dt)
timestamp = int(round(curr_dt.timestamp()))


print(""Integer timestamp of current datetime: "",
timestamp)","import datetime

def datetime_to_timestamp(dt):
    return int(dt.timestamp())

def timestamp_to_datetime(ts):
    return datetime.datetime.fromtimestamp(ts)

def timestamp_to_datetime_str(ts):
    return datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')

def timestamp_to_datetime_str_with_tz(ts):"
1687,Different ways to iterate over rows in Pandas Dataframe in Python,"# import pandas package as pd
import pandas as pd

# Define a dictionary containing students data
data = {'Name': ['Ankit', 'Amit', 'Aishwarya', 'Priyanka'],
'Age': [21, 19, 20, 18],
'Stream': ['Math', 'Commerce', 'Arts', 'Biology'],
'Percentage': [88, 92, 95, 70]}

# Convert the dictionary into DataFrame
df = pd.DataFrame(data, columns = ['Name', 'Age', 'Stream', 'Percentage'])

print(""Given Dataframe :\n"", df)

print(""\nIterating over rows using index attribute :\n"")

# iterate through each row and select
# 'Name' and 'Stream' column respectively.
for ind in df.index:
print(df['Name'][ind], df['Stream'][ind])","df = pd.DataFrame({'A': [1, 2, 3, 4, 5],
                   'B': [10, 20, 30, 40, 50]})

# Iterate over rows in the Dataframe
for row in df.iterrows():
    print(row)

# Iterate over columns in the Dataframe
for col in df.columns:
    print(col)

# Iterate over rows and columns in the Dataframe
for row, col in df.iterrows"
1688,Write a Python program to Sort Nested keys by Value,"# Python3 code to demonstrate working of
# Sort Nested keys by Value
# Using sorted() + generator expression + lamda

# initializing dictionary
test_dict = {'Nikhil' : {'English' : 5, 'Maths' : 2, 'Science' : 14},
'Akash' : {'English' : 15, 'Maths' : 7, 'Science' : 2},
'Akshat' : {'English' : 5, 'Maths' : 50, 'Science' : 20}}

# printing original dictionary
print(""The original dictionary : "" + str(test_dict))

# Sort Nested keys by Value
# Using sorted() + generator expression + lamda
res = {key : dict(sorted(val.items(), key = lambda ele: ele[1]))
for key, val in test_dict.items()}

# printing result
print(""The sorted dictionary : "" + str(res))","def sort_nested_keys(dictionary):
    for key, value in dictionary.items():
        if isinstance(value, dict):
            sort_nested_keys(value)
        else:
            dictionary[key] = value
    return dictionary

dictionary = {'a': 1, 'b': 2, 'c': 3}
print(sort_nested_keys(dictionary))

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
1689,Download Google Image Using Python and Selenium,"from selenium import webdriver
from selenium.webdriver.common.keys import Keys
import time

# What you enter here will be searched for in
# Google Images
query = ""dogs""

# Creating a webdriver instance
driver = webdriver.Chrome('Enter-Location-Of-Your-Webdriver')

# Maximize the screen
driver.maximize_window()

# Open Google Images in the browser
driver.get('https://images.google.com/')

# Finding the search box
box = driver.find_element_by_xpath('//*[@id=""sbtc""]/div/div[2]/input')

# Type the search query in the search box
box.send_keys(query)

# Pressing enter
box.send_keys(Keys.ENTER)

# Fumction for scrolling to the bottom of Google
# Images results
def scroll_to_bottom():

last_height = driver.execute_script('\
return document.body.scrollHeight')

while True:
driver.execute_script('\
window.scrollTo(0,document.body.scrollHeight)')

# waiting for the results to load
# Increase the sleep time if your internet is slow
time.sleep(3)

new_height = driver.execute_script('\
return document.body.scrollHeight')

# click on ""Show more results"" (if exists)
try:
driver.find_element_by_css_selector("".YstHxe input"").click()

# waiting for the results to load
# Increase the sleep time if your internet is slow
time.sleep(3)

except:
pass

# checking if we have reached the bottom of the page
if new_height == last_height:
break

last_height = new_height


# Calling the function

# NOTE: If you only want to capture a few images,
# there is no need to use the scroll_to_bottom() function.
scroll_to_bottom()


# Loop to capture and save each image
for i in range(1, 50):

# range(1, 50) will capture images 1 to 49 of the search results
# You can change the range as per your need.
try:

# XPath of each image
img = driver.find_element_by_xpath(
'//*[@id=""islrg""]/div[1]/div[' +
str(i) + ']/a[1]/div[1]/img')

# Enter the location of folder in which
# the images will be saved
img.screenshot('Download-Location' +
query + ' (' + str(i) + ').png')
# Each new screenshot will automatically
# have its name updated

# Just to avoid unwanted errors
time.sleep(0.2)

except:

# if we can't find the XPath of an image,
# we skip to the next image
continue

# Finally, we close the driver
driver.close()","import requests
from bs4 import BeautifulSoup

url = ""https://www.google.com/search?q=python+image+download&sxsrf=ALeKk00ZWxkKFk0KVQqYTJKVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV"
1690,How to compare two NumPy arrays in Python,"import numpy as np

an_array = np.array([[1, 2], [3, 4]])
another_array = np.array([[1, 2], [3, 4]])

comparison = an_array == another_array
equal_arrays = comparison.all()

print(equal_arrays)","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([6, 7, 8, 9, 10])

print(a == b)

# Output:
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True"
1691,Write a Python program to Avoid Last occurrence of delimitter,"# Python3 code to demonstrate working of
# Avoid Last occurrence of delimitter
# Using map() + join() + str()

# initializing list
test_list = [4, 7, 8, 3, 2, 1, 9]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing delim
delim = ""$""

# appending delim to join
# will leave stray ""$"" at end
res = ''
for ele in test_list:
res += str(ele) + ""$""

# removing last using slicing
res = res[:len(res) - 1]

# printing result
print(""The joined string : "" + str(res))","def solution(delimiter, source):
    # your code goes here
    return source.replace(delimiter, "" "")

print(solution(""."", ""Hello World!""))

""""""

def solution(delimiter, source):
    # your code goes here
    return source.replace(delimiter, "" "")

print(solution(""."", ""Hello World!""))

""""""

def solution(delimiter, source):
    # your code goes here
    return source."
1692,Get unique values from a column in Pandas DataFrame in Python,"# Import pandas package
import pandas as pd

# create a dictionary with five fields each
data = {
'A':['A1', 'A2', 'A3', 'A4', 'A5'],
'B':['B1', 'B2', 'B3', 'B4', 'B4'],
'C':['C1', 'C2', 'C3', 'C3', 'C3'],
'D':['D1', 'D2', 'D2', 'D2', 'D2'],
'E':['E1', 'E1', 'E1', 'E1', 'E1'] }

# Convert the dictionary into DataFrame
df = pd.DataFrame(data)

# Get the unique values of 'B' column
df.B.unique()","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})
print(df)

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})
# print(df)
# unique_values = df.col1"
1693,GUI to generate and store passwords in SQLite using Python,"import random
import webbrowser
from tkinter import *
from tkinter import ttk
from tkinter import messagebox
import back
import csv
from ttkbootstrap import *




class window:
# these are lists of initialized characters
digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']


lc = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
'm', 'n', 'o', 'p', 'q',
'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

uc = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
'I', 'J', 'K', 'M', 'N', 'O', 'p', 'Q',
'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

sym = ['@', '#', '$', '%', '=', ':', '?', '.', '/', '|',
'~', '>', '*', '<']

def __init__(self, root, geo, title) -> None:
self.root = root
self.root.title(title)
self.root.geometry(geo)
self.root.resizable(width=False, height=False)


Label(self.root, text='Your Password').grid(
row=0, column=0, padx=10, pady=10)
Label(self.root, text='Corresponding User_id').grid(
row=1, column=0, padx=10, pady=10)
Label(self.root, text='Of').grid(row=2, column=0, padx=10, pady=10)
self.pa = StringVar()
self.user_id = StringVar()
self.site = StringVar()
ttk.Entry(self.root, width=30, textvariable=self.pa
).grid(row=0, column=1, padx=10, pady=10)
ttk.Entry(self.root, width=30, textvariable=self.user_id
).grid(row=1, column=1, padx=10, pady=10)
ttk.Entry(self.root, width=30, textvariable=self.site
).grid(row=2, column=1, padx=10, pady=10)
self.length = StringVar()


e = ttk.Combobox(self.root, values=['4', '8', '12', '16', '20', '24'],
textvariable=self.length)
e.grid(row=0, column=2)
e['state'] = 'readonly'
self.length.set('Set password length')


ttk.Button(self.root, text='Generate', padding=5,
style='success.Outline.TButton', width=20,
command=self.generate).grid(row=1, column=2)

ttk.Button(self.root, text='Save to Database', style='success.TButton',
width=20, padding=5, command=self.save).grid(row=3, column=2)

ttk.Button(self.root, text='Delete', width=20, style='danger.TButton',
padding=5, command=self.erase).grid(row=2, column=2)

ttk.Button(self.root, text='Show All', width=20, padding=5,
command=self.view).grid(row=3, column=0)

ttk.Button(self.root, text='Update', width=20, padding=5,
command=self.update).grid(row=3, column=1)


# ========self.tree view=============
self.tree = ttk.Treeview(self.root, height=5)
self.tree['columns'] = ('site', 'user', 'pas')
self.tree.column('#0', width=0, stretch=NO)
self.tree.column('site', width=160, anchor=W)
self.tree.column('user', width=140, anchor=W)
self.tree.column('pas', width=180, anchor=W)
self.tree.heading('#0', text='')
self.tree.heading('site', text='Site name')
self.tree.heading('user', text='User Id')
self.tree.heading('pas', text='Password')
self.tree.grid(row=4, column=0, columnspan=3, pady=10)
self.tree.bind(""<ButtonRelease-1>"", self.catch)
# this command will call the catch function


# this is right click pop-up menu
self.menu = Menu(self.root, tearoff=False)
self.menu.add_command(label='Refresh', command=self.refresh)
self.menu.add_command(label='Insert', command=self.save)
self.menu.add_command(label='Update', command=self.update)
self.menu.add_separator()
self.menu.add_command(label='Show All', command=self.view)
self.menu.add_command(label='Clear Fields', command=self.clear)
self.menu.add_command(label='Clear Table', command=self.table)
self.menu.add_command(label='Export', command=self.export)
self.menu.add_separator()
self.menu.add_command(label='Delete', command=self.erase)
self.menu.add_command(label='Help', command=self.help)
self.menu.add_separator()
self.menu.add_command(label='Exit', command=self.root.quit)
# this binds the button 3 of the mouse with
self.root.bind(""<Button-3>"", self.poppin)
# poppin function


def help(self):
# this function will open the help.txt in
# notepad when called
webbrowser.open('help.txt')


def refresh(self):
# this function basically refreshes the table
# or tree view
self.table()
self.view()


def table(self):
# this function will clear all the values
# displayed in the table
for r in self.tree.get_children():
self.tree.delete(r)


def clear(self):
# this function will clear all the entry
# fields
self.pa.set('')
self.user_id.set('')
self.site.set('')


def poppin(self, e):
# it triggers the right click pop-up menu
self.menu.tk_popup(e.x_root, e.y_root)


def catch(self, event):
# this function will take all the selected data
# from the table/ tree view and will fill up the
# respective entry fields
self.pa.set('')
self.user_id.set('')
self.site.set('')
selected = self.tree.focus()
value = self.tree.item(selected, 'value')
self.site.set(value[0])
self.user_id.set(value[1])
self.pa.set(value[2])


def update(self):
# this function will update database with new
# values given by the user
selected = self.tree.focus()
value = self.tree.item(selected, 'value')
back.edit(self.site.get(), self.user_id.get(), self.pa.get())
self.refresh()


def view(self):
# this will show all the data from the database
# this is similar to ""SELECT * FROM TABLE"" sql
# command
if back.check() is False:
messagebox.showerror('Attention Amigo!', 'Database is EMPTY!')
else:
for row in back.show():
self.tree.insert(parent='', text='', index='end',
values=(row[0], row[1], row[2]))


def erase(self):
# this will delete or remove the selected tuple or
# row from the database
selected = self.tree.focus()
value = self.tree.item(selected, 'value')
back.Del(value[2])
self.refresh()


def save(self):
# this function will insert all the data into the
# database
back.enter(self.site.get(), self.user_id.get(), self.pa.get())
self.tree.insert(parent='', index='end', text='',
values=(self.site.get(), self.user_id.get(), self.pa.get()))


def generate(self):
# this function will produce a random string which
# will be used as password
if self.length.get() == 'Set password length':
messagebox.showerror('Attention!', ""You forgot to SELECT"")
else:
a = ''
for x in range(int(int(self.length.get())/4)):
a0 = random.choice(self.uc)
a1 = random.choice(self.lc)
a2 = random.choice(self.sym)
a3 = random.choice(self.digits)
a = a0+a1+a2+a3+a
self.pa.set(a)


def export(self):
# this function will save all the data from the
# database in a csv format which can be opened
# in excel
pop = Toplevel(self.root)
pop.geometry('300x100')
self.v = StringVar()
Label(pop, text='Save File Name as').pack()
ttk.Entry(pop, textvariable=self.v).pack()
ttk.Button(pop, text='Save', width=18,
command=lambda: exp(self.v.get())).pack(pady=5)


def exp(x):
with open(x + '.csv', 'w', newline='') as f:
chompa = csv.writer(f, dialect='excel')
for r in back.show():
chompa.writerow(r)
messagebox.showinfo(""File Saved"", ""Saved as "" + x + "".csv"")




if __name__ == '__main__':
win = Style(theme='darkly').master
name = 'Password Generator'
dimension = '565x320'


app = window(win, dimension, name)
win.mainloop()","import sqlite3

def create_connection(db_file):
    conn = None
    try:
        conn = sqlite3.connect(db_file)
    except Error as e:
        print(e)
    return conn

def create_table(conn, create_table_sql):
    try:
        c = conn.cursor()
        c.execute(create_table_sql)
    except Error as e:
        print(e)

def main():
    db_"
1694,Write a Python program to How to Concatenate tuples to nested tuples,"# Python3 code to demonstrate working of
# Concatenating tuples to nested tuples
# using + operator + "", "" operator during initialization

# initialize tuples
test_tup1 = (3, 4),
test_tup2 = (5, 6),

# printing original tuples
print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))

# Concatenating tuples to nested tuples
# using + operator + "", "" operator during initialization
res = test_tup1 + test_tup2

# printing result
print(""Tuples after Concatenating : "" + str(res))","def concatenate_tuples(tuple1, tuple2):
    return tuple1 + tuple2

print(concatenate_tuples(('a', 'b'), ('c', 'd')))

""""""

def concatenate_tuples(tuple1, tuple2):
    return tuple1 + tuple2

print(concatenate_tuples(('a', 'b'), ('c', 'd')))

""""""

def concatenate_"
1695,How to change background color of Tkinter OptionMenu widget in Python,"# Python program to change menu background
# color of Tkinter's Option Menu

# Import the library tkinter
from tkinter import *

# Create a GUI app
app = Tk()

# Give title to your GUI app
app.title(""Vinayak App"")

# Construct the label in your app
l1 = Label(app, text=""Choose the the week day here"")

# Display the label l1
l1.grid()

# Construct the Options Menu widget in your app
text1 = StringVar()

# Set the value you wish to see by default
text1.set(""Choose here"")

# Create options from the Option Menu
w = OptionMenu(app, text1, ""Sunday"", ""Monday"", ""Tuesday"",
""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"")

# Se the background color of Options Menu to green
w.config(bg=""GREEN"", fg=""WHITE"")

# Set the background color of Displayed Options to Red
w[""menu""].config(bg=""RED"")

# Display the Options Menu
w.grid(pady=20)

# Make the loop for displaying app
app.mainloop()","import tkinter as tk

def change_bg_color(event):
    print(""Background color changed"")
    color_var.set(color_var.get() + 1)
    color_var.trace(""w"", change_bg_color)

color_var = tk.IntVar()
color_var.set(0)
color_label = tk.Label(text=""Background color:"", font=(""Arial"", 12))
color_label.pack()
color_"
1696,Write a Python program to find common elements in three lists using sets,"# Python3 program to find common elements
# in three lists using sets

def IntersecOfSets(arr1, arr2, arr3):
# Converting the arrays into sets
s1 = set(arr1)
s2 = set(arr2)
s3 = set(arr3)

# Calculates intersection of
# sets on s1 and s2
set1 = s1.intersection(s2) #[80, 20, 100]

# Calculates intersection of sets
# on set1 and s3
result_set = set1.intersection(s3)

# Converts resulting set to list
final_list = list(result_set)
print(final_list)

# Driver Code
if __name__ == '__main__' :

# Elements in Array1
arr1 = [1, 5, 10, 20, 40, 80, 100]

# Elements in Array2
arr2 = [6, 7, 20, 80, 100]

# Elements in Array3
arr3 = [3, 4, 15, 20, 30, 70, 80, 120]

# Calling Function
IntersecOfSets(arr1, arr2, arr3)","l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
l3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

l1 = set(l1)
l2 = set(l2)
l3 = set(l3)

print(l1)
print(l2)"
1697,Write a Python program to Dictionary with maximum count of pairs,"# Python3 code to demonstrate working of
# Dictionary with maximum keys
# Using loop + len()

# initializing list
test_list = [{""gfg"": 2, ""best"" : 4},
{""gfg"": 2, ""is"" : 3, ""best"" : 4},
{""gfg"": 2}]

# printing original list
print(""The original list is : "" + str(test_list))

res = {}
max_len = 0
for ele in test_list:

# checking for lengths
if len(ele) > max_len:
res = ele
max_len = len(ele)

# printing results
print(""Maximum keys Dictionary : "" + str(res))","def max_count(d):
    max_count = 0
    for key in d:
        count = d[key]
        if count > max_count:
            max_count = count
    return max_count

d = {'a': 1, 'b': 2, 'c': 3}
print(max_count(d))

""""""

def max_count(d):
    max_count = 0
    for key in d:
        count = d[key]
        if"
1698,Write a Python program to print the Inverted heart pattern,"# determining the size of the heart
size = 15


# printing the inverted triangle
for a in range(0, size):
for b in range(a, size):
print("" "", end = """")
for b in range(1, (a * 2)):
print(""*"", end = """")
print("""")


# printing rest of the heart
for a in range(size, int(size / 2) - 1 , -2):


# printing the white space right-triangle
for b in range(1, size - a, 2):
print("" "", end = """")


# printing the first trapezium
for b in range(1, a + 1):
print(""*"", end = """")


# printing the white space triangle
for b in range(1, (size - a) + 1):
print("" "", end = """")


# printing the second trapezium
for b in range(1, a):
print(""*"", end = """")


# new line
print("""")","def invert_heart_pattern(heart_pattern):
    # Your code here
    pass

""""""

# Solution 1

def invert_heart_pattern(heart_pattern):
    # Your code here
    pass

# Solution 2

def invert_heart_pattern(heart_pattern):
    # Your code here
    pass

# Solution 3

def invert_heart_pattern(heart_pattern):
    # Your code here
    pass

# Solution 4

def in"
1699,Kth Non-repeating Character in Python using List Comprehension and OrderedDict,"# Function to find k'th non repeating character
# in string
from collections import OrderedDict

def kthRepeating(input,k):

# OrderedDict returns a dictionary data
# structure having characters of input
# string as keys in the same order they
# were inserted and 0 as their default value
dict=OrderedDict.fromkeys(input,0)

# now traverse input string to calculate
# frequency of each character
for ch in input:
dict[ch]+=1

# now extract list of all keys whose value
# is 1 from dict Ordered Dictionary
nonRepeatDict = [key for (key,value) in dict.items() if value==1]

# now return (k-1)th character from above list
if len(nonRepeatDict) < k:
return 'Less than k non-repeating characters in input.'
else:
return nonRepeatDict[k-1]

# Driver function
if __name__ == ""__main__"":
input = ""geeksforgeeks""
k = 3
print (kthRepeating(input, k))","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22"
1700,Write a Python Set difference to find lost element from a duplicated array,"# Function to find lost element from a duplicate
# array

def lostElement(A,B):

# convert lists into set
A = set(A)
B = set(B)

# take difference of greater set with smaller
if len(A) > len(B):
print (list(A-B))
else:
print (list(B-A))

# Driver program
if __name__ == ""__main__"":
A = [1, 4, 5, 7, 9]
B = [4, 5, 7, 9]
lostElement(A,B)","def solution(arr):
    # Write your code here
    return arr[0]

# Test your solution
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(arr))

# Test your solution
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(arr))

# Test your solution
arr = [1, 2, 3, 4, 5"
1701,Split a String into columns using regex in pandas DataFrame in Python,"# import the regex library
import pandas as pd
import re

# Create a list with all the strings
movie_data = [""Name: The_Godfather Year: 1972 Rating: 9.2"",
""Name: Bird_Box Year: 2018 Rating: 6.8"",
""Name: Fight_Club Year: 1999 Rating: 8.8""]

# Create a dictionary with the required columns
# Used later to convert to DataFrame
movies = {""Name"":[], ""Year"":[], ""Rating"":[]}

for item in movie_data:

# For Name field
name_field = re.search(""Name: .*"",item)

if name_field is not None:
name = re.search('\w*\s\w*',name_field.group())
else:
name = None
movies[""Name""].append(name.group())

# For Year field
year_field = re.search(""Year: .*"",item)
if year_field is not None:
year = re.search('\s\d\d\d\d',year_field.group())
else:
year = None
movies[""Year""].append(year.group().strip())

# For rating field
rating_field = re.search(""Rating: .*"",item)
if rating_field is not None:
rating = re.search('\s\d.\d',rating_field.group())
else:
rating - None
movies[""Rating""].append(rating.group().strip())

# Creating DataFrame
df = pd.DataFrame(movies)
print(df)","import re

def solution(s):
    # Solution 1:
    # s = re.sub(r'\s+','', s)
    # s = re.sub(r'\s+','', s)
    # s = re.sub(r'\s+','', s)
    # s = re.sub(r'\s+','', s)
    # s = re.sub(r'\s+','', s)
    # s"
1702,Program to check if a string contains any special character in Python,"// C++ program to check if a string
// contains any special character

// import required packages
#include <iostream>
#include <regex>
using namespace std;

// Function checks if the string
// contains any special character
void run(string str)
{

// Make own character set
regex regx(""[@_!#$%^&*()<>?/|}{~:]"");

// Pass the string in regex_search
// method
if(regex_search(str, regx) == 0)
cout << ""String is accepted"";
else
cout << ""String is not accepted."";
}

// Driver Code
int main()
{

// Enter the string
string str = ""Geeks$For$Geeks"";

// Calling run function
run(str);

return 0;
}

// This code is contributed by Yash_R","s = ""abcdefghijklmnopqrstuvwxyz""

def is_special_char(s):
    for i in s:
        if i in ""!@#$%^&*()_+-=[]{}|"":
            return True
    return False

print(is_special_char(s))

""""""

# Solution:

def is_special_char(s):
    for i in s:
        if i in ""!@#$%^"
1703,Write a Python program to Tuple XOR operation,"# Python3 code to demonstrate working of
# Tuple XOR operation
# using zip() + generator expression

# initialize tuples
test_tup1 = (10, 4, 6, 9)
test_tup2 = (5, 2, 3, 3)

# printing original tuples
print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))

# Tuple XOR operation
# using zip() + generator expression
res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))

# printing result
print(""The XOR tuple : "" + str(res))","x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
y = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
y = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

x = (1, 2, 3, 4, 5, 6, 7, 8, 9"
1704,Calculate the mean across dimension in a 2D NumPy array in Python,"# Importing Library
import numpy as np

# creating 2d array
arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Calculating mean across Rows
row_mean = np.mean(arr, axis=1)

row1_mean = row_mean[0]
print(""Mean of Row 1 is"", row1_mean)

row2_mean = row_mean[1]
print(""Mean of Row 2 is"", row2_mean)

row3_mean = row_mean[2]
print(""Mean of Row 3 is"", row3_mean)


# Calculating mean across Columns
column_mean = np.mean(arr, axis=0)

column1_mean = column_mean[0]
print(""Mean of column 1 is"", column1_mean)

column2_mean = column_mean[1]
print(""Mean of column 2 is"", column2_mean)

column3_mean = column_mean[2]
print(""Mean of column 3 is"", column3_mean)","import numpy as np

# Create a 2D NumPy array
arr = np.array([[1, 2, 3, 4, 5],
                [6, 7, 8, 9, 10],
                [11, 12, 13, 14, 15],
                [16, 17, 18, 19, 20]])

# Calculate the mean across dimension in arr
print(arr.mean(axis=0))

# Calculate the mean across dimension in arr
print(arr.mean"
1705,How to Build Web scraping bot in Python,"# These are the imports to be made
import time
from selenium import webdriver
from datetime import datetime","import requests
from bs4 import BeautifulSoup

url = ""https://www.amazon.in/Apple-iPhone-11-GB-2TB-8GB-Graphics-Display/dp/B08KLKGZG8/ref=sr_1_1?__mk_de_DE=%C3%85M%C3%85%C5%BD%C3%95%C3%A7%C3%B3%C3%B5%C3%B8&__mk_fr_"
1706,Sorting rows in pandas DataFrame in Python,"# import modules
import pandas as pd

# create dataframe
data = {'name': ['Simon', 'Marsh', 'Gaurav', 'Alex', 'Selena'],
'Maths': [8, 5, 6, 9, 7],
'Science': [7, 9, 5, 4, 7],
'English': [7, 4, 7, 6, 8]}

df = pd.DataFrame(data)

# Sort the dataframes rows by Science,
# in descending order
a = df.sort_values(by ='Science', ascending = 0)
print(""Sorting rows by Science:\n \n"", a)","# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

# Solution 11:

# Solution 12:

# Solution 13:

# Solution 14:

# Solution 15:

# Solution 16:

# Solution 17:

# Solution 18:

# Solution 19:

# Solution 20:"
1707,How to get the indices of the sorted array using NumPy in Python,"import numpy as np


# Original array
array = np.array([10, 52, 62, 16, 16, 54, 453])
print(array)

# Indices of the sorted elements of a
# given array
indices = np.argsort(array)
print(indices)","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Print the indices of the array
print(arr.argsort())

# Print the indices of the array
print(arr.argsort(kind='mergesort'))

# Print the indices of the array
print(arr.argsort(kind='quicksort'))

# Print the indices of the array
print(arr.argsort"
1708,Write a Python program to Get file id of windows file,"# importing popen from the os library
from os import popen


# Path to the file whose id we would
# be obtaining (relative / absolute)
file = r""C:\Users\Grandmaster\Desktop\testing.py""


# Running the command for obtaining the fileid,
# and saving the output of the command
output = popen(fr""fsutil file queryfileid {file}"").read()


# printing the output of the previous command
print(output)","import os

def get_file_id(file_name):
    # Open the file
    with open(file_name, 'r') as f:
        # Read the file
        data = f.read()
        # Return the file id
        return data.split()[0]

# Call the function
print(get_file_id('C:\\Users\\srin\\Desktop\\Python\\Python_Project\\file_id.txt'))

""""""

""""""

""""""

"""""""
1709,Write a Python program to Convert Matrix to dictionary,"# Python3 code to demonstrate working of
# Convert Matrix to dictionary
# Using dictionary comprehension + range()

# initializing list
test_list = [[5, 6, 7], [8, 3, 2], [8, 2, 1]]

# printing original list
print(""The original list is : "" + str(test_list))

# using dictionary comprehension for iteration
res = {idx + 1 : test_list[idx] for idx in range(len(test_list))}

# printing result
print(""The constructed dictionary : "" + str(res))","def matrix_to_dict(matrix):
    dictionary = {}
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            dictionary[matrix[i][j]] = matrix[i][j]
    return dictionary

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(matrix_to_dict(matrix))

""""""

def matrix_to_dict(mat"
1710,Write a Python program to Convert a set into dictionary,"# Python code to demonstrate
# converting set into dictionary
# using fromkeys()


# initializing set
ini_set = {1, 2, 3, 4, 5}


# printing initialized set
print (""initial string"", ini_set)
print (type(ini_set))


# Converting set to dictionary
res = dict.fromkeys(ini_set, 0)


# printing final result and its type
print (""final list"", res)
print (type(res))","def solution(s):
    d = {}
    for i in s:
        d[i] = s.count(i)
    return d

print(solution(set(""abcd"")))

""""""

def solution(s):
    d = {}
    for i in s:
        d[i] = s.count(i)
    return d

print(solution(set(""abcd"")))"
1711,Write a Python program to Pair elements with Rear element in Matrix Row,"# Python3 code to demonstrate
# Pair elements with Rear element in Matrix Row
# using list comprehension

# Initializing list
test_list = [[4, 5, 6], [2, 4, 5], [6, 7, 5]]

# printing original list
print(""The original list is : "" + str(test_list))

# Pair elements with Rear element in Matrix Row
# using list comprehension
res = []
for sub in test_list:
res.append([[ele, sub[-1]] for ele in sub[:-1]])

# printing result
print (""The list after pairing is : "" + str(res))","def pair_elements(matrix):
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            if matrix[i][j] == 1:
                matrix[i][j] = 0
            else:
                matrix[i][j] = 1
    return matrix

matrix = [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
1712,Write a Python program to Uppercase Half String,"# Python3 code to demonstrate working of
# Uppercase Half String
# Using upper() + loop + len()

# initializing string
test_str = 'geeksforgeeks'

# printing original string
print(""The original string is : "" + str(test_str))

# computing half index
hlf_idx = len(test_str) // 2

res = ''
for idx in range(len(test_str)):

# uppercasing later half
if idx >= hlf_idx:
res += test_str[idx].upper()
else :
res += test_str[idx]

# printing result
print(""The resultant string : "" + str(res))","def upper_half_string(s):
    return s.upper()

print(upper_half_string(""Python""))

""""""

# Solution:

def upper_half_string(s):
    return s.upper()

print(upper_half_string(""Python""))"
1713,"Reshape a pandas DataFrame using stack,unstack and melt method in Python","# import pandas module
import pandas as pd

# making dataframe
df = pd.read_csv(""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv"")

# it was print the first 5-rows
print(df.head())","import pandas as pd

df = pd.DataFrame({""A"": [1, 2, 3, 4, 5],
                  ""B"": [10, 20, 30, 40, 50],
                  ""C"": [100, 200, 300, 400, 500]})

df.stack()
df.unstack()
df.melt()

# Solution:

import pandas as pd

df = pd.DataFrame({""A"": [1,"
1714,Write a Python program to Remove keys with Values Greater than K ( Including mixed values ),"# Python3 code to demonstrate working of
# Remove keys with Values Greater than K ( Including mixed values )
# Using loop + isinstance()

# initializing dictionary
test_dict = {'Gfg' : 3, 'is' : 7, 'best' : 10, 'for' : 6, 'geeks' : 'CS'}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# initializing K
K = 6

# using loop to iterate keys of dictionary
res = {}
for key in test_dict:

# testing for data type and then condition, order is imp.
if not (isinstance(test_dict[key], int) and test_dict[key] > K):
res[key] = test_dict[key]

# printing result
print(""The constructed dictionary : "" + str(res))","def remove_keys_with_values_greater_than_k(dict, k):
    for key, value in dict.items():
        if value >= k:
            dict.pop(key)
    return dict

print(remove_keys_with_values_greater_than_k({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 2))

""""""

def remove_keys_with_values_great"
1715,Write a Python program to Replace duplicate Occurrence in String,"# Python3 code to demonstrate working of
# Replace duplicate Occurrence in String
# Using split() + enumerate() + loop

# initializing string
test_str = 'Gfg is best . Gfg also has Classes now. \
Classes help understand better . '

# printing original string
print(""The original string is : "" + str(test_str))

# initializing replace mapping
repl_dict = {'Gfg' : 'It', 'Classes' : 'They' }

# Replace duplicate Occurrence in String
# Using split() + enumerate() + loop
test_list = test_str.split(' ')
res = set()
for idx, ele in enumerate(test_list):
if ele in repl_dict:
if ele in res:
test_list[idx] = repl_dict[ele]
else:
res.add(ele)
res = ' '.join(test_list)

# printing result
print(""The string after replacing : "" + str(res))","def replace_duplicate(string):
    # your code goes here
    return string

# read the file
f = open(""string.txt"", ""r"")

# read the file
string = f.read()

# replace the duplicate occurrence
string = replace_duplicate(string)

# write the file
f.close()

# print the result
print(string)

# print the result
print(string)"
1716,Write a Python program to find all the Combinations in the list with the given condition,"# Python3 code to demonstrate working of
# Optional Elements Combinations
# Using loop

# initializing list
test_list = [""geekforgeeks"", [5, 4, 3, 4], ""is"",
[""best"", ""good"", ""better"", ""average""]]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing size of inner Optional list
K = 4

res = []
cnt = 0
while cnt <= K - 1:
temp = []

# inner elements selections
for idx in test_list:

# checks for type of Elements
if not isinstance(idx, list):
temp.append(idx)
else:
temp.append(idx[cnt])
cnt += 1
res.append(temp)

# printing result
print(""All index Combinations : "" + str(res))","def combinations(lst, condition):
    if condition == 0:
        return [''.join(i) for i in itertools.permutations(lst)]
    elif condition == 1:
        return [''.join(i) for i in itertools.combinations(lst, 2)]
    elif condition == 2:
        return [''.join(i) for i in itertools.combinations(lst, 3)]
    elif condition == 3:"
1717,numpy.inner() in python,"# Python Program illustrating
# numpy.inner() method

import numpy as geek

# Scalars
product = geek.inner(5, 4)
print(""inner Product of scalar values : "", product)

# 1D array
vector_a = 2 + 3j
vector_b = 4 + 5j

product = geek.inner(vector_a, vector_b)
print(""inner Product : "", product)","def inner(a, b):
    return a*b

print(inner(2, 3))

""""""

# Solution:

def inner(a, b):
    return a*b

print(inner(2, 3))"
1718,How to set the tab size in Text widget in Tkinter in Python,"# Import Module
from tkinter import *

# Create Object
root = Tk()

# Set Geometry
root.geometry(""400x400"")

# Execute Tkinter
root.mainloop()","import tkinter as tk

def main():
    root = tk.Tk()
    root.geometry(""300x300"")
    root.title(""Python Code"")
    root.configure(background=""white"")
    label = tk.Label(root, text=""Enter the tab size"", bg=""white"", fg=""black"")
    label.pack()
    label.configure(font=(""Courier"", 20))
    label.configure(width=20"
1719,Write a Python Program for Comb Sort,"# Python program for implementation of CombSort

# To find next gap from current
def getNextGap(gap):

# Shrink gap by Shrink factor
gap = (gap * 10)/13
if gap < 1:
return 1
return gap

# Function to sort arr[] using Comb Sort
def combSort(arr):
n = len(arr)

# Initialize gap
gap = n

# Initialize swapped as true to make sure that
# loop runs
swapped = True

# Keep running while gap is more than 1 and last
# iteration caused a swap
while gap !=1 or swapped == 1:

# Find next gap
gap = getNextGap(gap)

# Initialize swapped as false so that we can
# check if swap happened or not
swapped = False

# Compare all elements with current gap
for i in range(0, n-gap):
if arr[i] > arr[i + gap]:
arr[i], arr[i + gap]=arr[i + gap], arr[i]
swapped = True


# Driver code to test above
arr = [ 8, 4, 1, 3, -44, 23, -6, 28, 0]
combSort(arr)

print (""Sorted array:"")
for i in range(len(arr)):
print (arr[i]),


# This code is contributed by Mohit Kumra","def combSort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(combSort(arr))

""""""

def combSort(arr):
    n = len(arr)"
1720,Mapping external values to dataframe values in Pandas in Python,"# Creating new dataframe
import pandas as pd

initial_data = {'First_name': ['Ram', 'Mohan', 'Tina', 'Jeetu', 'Meera'],
'Last_name': ['Kumar', 'Sharma', 'Ali', 'Gandhi', 'Kumari'],
'Age': [42, 52, 36, 21, 23],
'City': ['Mumbai', 'Noida', 'Pune', 'Delhi', 'Bihar']}

df = pd.DataFrame(initial_data, columns = ['First_name', 'Last_name',
'Age', 'City'])

# Create new column using dictionary
new_data = { ""Ram"":""B.Com"",
""Mohan"":""IAS"",
""Tina"":""LLB"",
""Jeetu"":""B.Tech"",
""Meera"":""MBBS"" }

# combine this new data with existing DataFrame
df[""Qualification""] = df[""First_name""].map(new_data)

print(df)","# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

# Solution 11:

# Solution 12:

# Solution 13:

# Solution 14:

# Solution 15:

# Solution 16:

# Solution 17:

# Solution 18:

# Solution 19:

#"
1721,Write a Python program to Filter dictionary values in heterogeneous dictionary,"# Python3 code to demonstrate working of
# Filter dictionary values in heterogeneous dictionary
# Using type() + dictionary comprehension

# initializing dictionary
test_dict = {'Gfg' : 4, 'is' : 2, 'best' : 3, 'for' : 'geeks'}

# printing original dictionary
print(""The original dictionary : "" + str(test_dict))

# initializing K
K = 3

# Filter dictionary values in heterogeneous dictionary
# Using type() + dictionary comprehension
res = {key : val for key, val in test_dict.items()
if type(val) != int or val > K}

# printing result
print(""Values greater than K : "" + str(res))","def filter_dict(d, key):
    return d[key]

d = {'a': 1, 'b': 2, 'c': 3}
print(filter_dict(d, 'a'))

""""""

# Solution:

def filter_dict(d, key):
    return d[key]

d = {'a': 1, 'b': 2, 'c': 3}
print(filter_dict(d, 'a'))"
1722,Write a Python program to Split Strings on Prefix Occurrence,"# Python3 code to demonstrate working of
# Split Strings on Prefix Occurrence
# Using loop + startswith()


# initializing list
test_list = [""geeksforgeeks"", ""best"", ""geeks"", ""and"", ""geeks"", ""love"", ""CS""]


# printing original list
print(""The original list is : "" + str(test_list))


# initializing prefix
pref = ""geek""




res = []
for val in test_list:

# checking for prefix
if val.startswith(pref):

# if pref found, start new list
res.append([val])
else:

# else append in current list
res[-1].append(val)


# printing result
print(""Prefix Split List : "" + str(res))","def split_string(string):
    # your code goes here
    return string.split(' ')

# driver code
string = 'hello world'
print(split_string(string))

# Output: ['hello', 'world']

# driver code
string = 'hello world'
print(split_string(string))

# Output: ['hello', 'world']

# driver code
string = 'hello world'
print(split_string(string))

# Output: ['hello"
1723,Write a Python program to Group dates in K ranges,"# Python3 code to demonstrate working of
# Group dates in K ranges
# Using groupby() + sort()
from itertools import groupby
from datetime import datetime

# initializing list
test_list = [datetime(2020, 1, 4),
datetime(2019, 12, 30),
datetime(2020, 1, 7),
datetime(2019, 12, 27),
datetime(2020, 1, 20),
datetime(2020, 1, 10)]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing K
K = 7

# initializing start date
min_date = min(test_list)

# utility fnc to form groupings
def group_util(date):
return (date-min_date).days // K

# sorting before grouping
test_list.sort()

temp = []
# grouping by utility function to group by K days
for key, val in groupby(test_list , key = lambda date : group_util(date)):
temp.append((key, list(val)))

# using strftime to convert to userfriendly
# format
res = []
for sub in temp:
intr = []
for ele in sub[1]:
intr.append(ele.strftime(""%Y/%m/%d""))
res.append((sub[0], intr))

# printing result
print(""Grouped Digits : "" + str(res))","import datetime

def group_dates(start, end, k):
    start_date = datetime.datetime.strptime(start, '%Y-%m-%d')
    end_date = datetime.datetime.strptime(end, '%Y-%m-%d')
    for i in range(k):
        yield start_date + datetime.timedelta(days=i)

print(list(group_dates('2021-01-01', '"
1724,Write a Python program to Combinations of sum with tuples in tuple list,"# Python3 code to demonstrate working of
# Summation combination in tuple lists
# Using list comprehension + combinations
from itertools import combinations

# initialize list
test_list = [(2, 4), (6, 7), (5, 1), (6, 10)]

# printing original list
print(""The original list : "" + str(test_list))

# Summation combination in tuple lists
# Using list comprehension + combinations
res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]

# printing result
print(""The Summation combinations are : "" + str(res))","def combinations(n, k):
    if k == 0:
        return [[]]
    else:
        return combinations(n, k-1) + [[n, k]]

n = int(input())
k = int(input())
print(combinations(n, k))

# Solution:

def combinations(n, k):
    if k == 0:
        return [[]]
    else:
        return [[n] + list(combinations(n, k-1))"
1725,Plot line graph from NumPy array in Python,"# importing the modules
import numpy as np
import matplotlib.pyplot as plt


# data to be plotted
x = np.arrange(1, 11)
y = x * x


# plotting
plt.title(""Line graph"")
plt.xlabel(""X axis"")
plt.ylabel(""Y axis"")
plt.plot(x, y, color =""red"")
plt.show()","import numpy as np

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
y = np.array([1, 4, 9, 16, 25, 36, 49, 64, 81, 100])

# Plot line graph from NumPy array in Python

# Plot line graph from Python

# Plot line graph from Python

# Plot line graph from Python

# Plot line graph from Python

# Plot line graph from Python

# Plot line graph from"
1726,Write a Python program to Count the Number of matching characters in a pair of string,"# Python code to count number of matching
# characters in a pair of strings

# count function
def count(str1, str2):
c, j = 0, 0

# loop executes till length of str1 and
# stores value of str1 character by character
# and stores in i at each iteration.
for i in str1:

# this will check if character extracted from
# str1 is present in str2 or not(str2.find(i)
# return -1 if not found otherwise return the
# starting occurrence index of that character
# in str2) and j == str1.find(i) is used to
# avoid the counting of the duplicate characters
# present in str1 found in str2
if str2.find(i)>= 0 and j == str1.find(i):
c += 1
j += 1
print ('No. of matching characters are : ', c)

# Main function
def main():
str1 ='aabcddekll12@' # first string
str2 ='bb2211@55k' # second string
count(str1, str2) # calling count function

# Driver Code
if __name__==""__main__"":
main()","def count_matching_char(s1, s2):
    count = 0
    for i in range(len(s1)):
        if s1[i] == s2[i]:
            count += 1
    return count

print(count_matching_char('abcd', 'abcd'))

""""""

def count_matching_char(s1, s2):
    count = 0
    for i in range(len(s1)):"
1727,Write a Python program to Extract digits from Tuple list,"# Python3 code to demonstrate working of
# Extract digits from Tuple list
# Using map() + chain.from_iterable() + set() + loop
from itertools import chain


# initializing list
test_list = [(15, 3), (3, 9), (1, 10), (99, 2)]


# printing original list
print(""The original list is : "" + str(test_list))


# Extract digits from Tuple list
# Using map() + chain.from_iterable() + set() + loop
temp = map(lambda ele: str(ele), chain.from_iterable(test_list))
res = set()
for sub in temp:
for ele in sub:
res.add(ele)


# printing result
print(""The extracted digits : "" + str(res))","def extract_digits(tuple_list):
    return tuple_list[0]

tuple_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(extract_digits(tuple_list))

""""""

# Solution

def extract_digits(tuple_list):
    return tuple_list[0]

tuple_list = [1, 2, 3, 4, 5, 6, 7, 8, 9,"
1728,Write a Python program to Count tuples occurrence in list of tuples,"# Python code to count unique
# tuples in list of list

import collections
Output = collections.defaultdict(int)

# List initialization
Input = [[('hi', 'bye')], [('Geeks', 'forGeeks')],
[('a', 'b')], [('hi', 'bye')], [('a', 'b')]]

# Using iteration
for elem in Input:
Output[elem[0]] += 1

# Printing output
print(Output)","def count_tuple(tup):
    return tup.count(tup)

tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

print(count_tuple(tup))

""""""

def count_tuple(tup):
    return tup.count(tup)

tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

print(count"
1729,Change data type of given numpy array in Python,"# importing the numpy library as np
import numpy as np

# Create a numpy array
arr = np.array([10, 20, 30, 40, 50])

# Print the array
print(arr)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)
a = a.astype(np.int64)
print(a)

""""""

# Solution

import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)
a = a.astype(np.int64)
print(a)

# Solution

import"
1730,Write a Python program to Sort Tuples by their Maximum element,"# Python3 code to demonstrate working of
# Sort Tuples by Maximum element
# Using max() + sort()

# helper function
def get_max(sub):
return max(sub)

# initializing list
test_list = [(4, 5, 5, 7), (1, 3, 7, 4), (19, 4, 5, 3), (1, 2)]

# printing original list
print(""The original list is : "" + str(test_list))

# sort() is used to get sorted result
# reverse for sorting by max - first element's tuples
test_list.sort(key = get_max, reverse = True)

# printing result
print(""Sorted Tuples : "" + str(test_list))","def sort_tuples(tuples):
    for i in range(len(tuples)):
        for j in range(i+1, len(tuples)):
            if tuples[i][1] > tuples[j][1]:
                tuples[i], tuples[j] = tuples[j], tuples[i]
    return tuples

print(sort_tuples([(1, 5), (2, 4), (3, 2), (4, 1)]))"
1731,Binary Search (bisect) in Python,"# Python code to demonstrate working
# of binary search in library
from bisect import bisect_left

def BinarySearch(a, x):
i = bisect_left(a, x)
if i != len(a) and a[i] == x:
return i
else:
return -1

a = [1, 2, 4, 4, 8]
x = int(4)
res = BinarySearch(a, x)
if res == -1:
print(x, ""is absent"")
else:
print(""First occurrence of"", x, ""is present at"", res)","def binary_search(arr, target):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
target = 10"
1732,Student management system in Python,"# This is simplest Student data management program in python
# Create class ""Student""
class Student:
# Constructor
def __init__(self, name, rollno, m1, m2):
self.name = name
self.rollno = rollno
self.m1 = m1
self.m2 = m2

# Function to create and append new student
def accept(self, Name, Rollno, marks1, marks2 ):
# use ' int(input()) ' method to take input from user
ob = Student(Name, Rollno, marks1, marks2 )
ls.append(ob)

# Function to display student details
def display(self, ob):
print(""Name : "", ob.name)
print(""RollNo : "", ob.rollno)
print(""Marks1 : "", ob.m1)
print(""Marks2 : "", ob.m2)
print(""\n"")

# Search Function
def search(self, rn):
for i in range(ls.__len__()):
if(ls[i].rollno == rn):
return i

# Delete Function
def delete(self, rn):
i = obj.search(rn)
del ls[i]

# Update Function
def update(self, rn, No):
i = obj.search(rn)
roll = No
ls[i].rollno = roll;

# Create a list to add Students
ls =[]
# an object of Student class
obj = Student('', 0, 0, 0)

print(""\nOperations used, "")
print(""\n1.Accept Student details\n2.Display Student Details\n"" /
/ ""3.Search Details of a Student\n4.Delete Details of Student"" /
/ ""\n5.Update Student Details\n6.Exit"")

# ch = int(input(""Enter choice:""))
# if(ch == 1):
obj.accept(""A"", 1, 100, 100)
obj.accept(""B"", 2, 90, 90)
obj.accept(""C"", 3, 80, 80)

# elif(ch == 2):
print(""\n"")
print(""\nList of Students\n"")
for i in range(ls.__len__()):
obj.display(ls[i])

# elif(ch == 3):
print(""\n Student Found, "")
s = obj.search(2)
obj.display(ls[s])

# elif(ch == 4):
obj.delete(2)
print(ls.__len__())
print(""List after deletion"")
for i in range(ls.__len__()):
obj.display(ls[i])

# elif(ch == 5):
obj.update(3, 2)
print(ls.__len__())
print(""List after updation"")
for i in range(ls.__len__()):
obj.display(ls[i])

# else:
print(""Thank You !"")
","1. Create a function called solution() that takes two parameters:
    - a string of the student's name
    - a string of the student's surname
    - a string of the student's age
    - a string of the student's gender
    - a string of the student's address
    - a string of the student's phone number
    - a string of the student's email
    - a string of the student's password
    - a string of the student's password hash
    - a string of the student's password hash
    - a string of the"
1733,Priority Queue using Queue and Heapdict module in Python,"from queue import PriorityQueue

q = PriorityQueue()

# insert into queue
q.put((2, 'g'))
q.put((3, 'e'))
q.put((4, 'k'))
q.put((5, 's'))
q.put((1, 'e'))

# remove and return
# lowest priority item
print(q.get())
print(q.get())

# check queue size
print('Items in queue :', q.qsize())

# check if queue is empty
print('Is queue empty :', q.empty())

# check if queue is full
print('Is queue full :', q.full())","def solution(priorities, location):
    heap = []
    for i in range(len(priorities)):
        heapq.heappush(heap, priorities[i])
    
    for i in range(location, len(priorities)):
        if heapq.heappop(heap) > heapq.heappop(priorities):
            return i
    return -1

# Test
print(solution([1, 1, 9,"
1734,How To Convert Python Dictionary To JSON,"import json

# Data to be written
dictionary ={
""id"": ""04"",
""name"": ""sunil"",
""department"": ""HR""
}

# Serializing json
json_object = json.dumps(dictionary, indent = 4)
print(json_object)","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution"
1735,Write a Python program to find Indices of Overlapping Substrings,"# Import required module
import re


# Function to depict use of finditer() method
def CntSubstr(pattern, string):

# Array storing the indices
a = [m.start() for m in re.finditer(pattern, string)]
return a


# Driver Code
string = 'geeksforgeeksforgeeks'
pattern = 'geeksforgeeks'

# Printing index values of non-overlapping pattern
print(CntSubstr(pattern, string))","def find_overlapping_substrings(s, t):
    # Write your code here
    # return [i for i in range(len(s)) if s[i:i+len(t)] == t]
    return [i for i in range(len(s)) if s[i:i+len(t)] == t]

if __name__ == '__main__':
    print(find_overlapping_substrings('abc', 'ab'))
    print(find"
1736,Find the most frequent value in a NumPy array in Python,"import numpy as np


# create array
x = np.array([1,2,3,4,5,1,2,1,1,1])
print(""Original array:"")
print(x)

print(""Most frequent value in the above array:"")
print(np.bincount(x).argmax())","import numpy as np

# Create a NumPy array with the following data:
a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a NumPy array with the following data:
b = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a NumPy array with the following data:
c = np.array([1, 2, 3, 4, 5, 6"
1737,How to add a border color to a button in Tkinter in Python,"import tkinter as tk

root = tk.Tk()
root.geometry('250x150')
root.title(""Button Border"")

# Label
l = tk.Label(root, text = ""Enter your Roll No. :"",
font = ((""Times New Roman""), 15))
l.pack()

# Entry Widget
tk.Entry(root).pack()

# for space between widgets
tk.Label(root, text="" "").pack()

# Frame for button border with black border color
button_border = tk.Frame(root, highlightbackground = ""black"",
highlightthickness = 2, bd=0)
bttn = tk.Button(button_border, text = 'Submit', fg = 'black',
bg = 'yellow',font = ((""Times New Roman""),15))
bttn.pack()
button_border.pack()

root.mainloop()","import tkinter as tk

def add_border(button, color):
    button.config(bg=color)

def main():
    root = tk.Tk()
    root.title(""Add Border"")
    root.geometry(""300x300"")
    button = tk.Button(root, text=""Add Border"", command=add_border)
    button.pack()
    root.mainloop()

if __name__ == ""__main__"":
    main"
1738,Write a Python program to Convert Key-Value list Dictionary to List of Lists,"# Python3 code to demonstrate working of
# Convert Key-Value list Dictionary to Lists of List
# Using loop + items()

# initializing Dictionary
test_dict = {'gfg' : [1, 3, 4], 'is' : [7, 6], 'best' : [4, 5]}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# Convert Key-Value list Dictionary to Lists of List
# Using loop + items()
res = []
for key, val in test_dict.items():
res.append([key] + val)

# printing result
print(""The converted list is : "" + str(res))","def convert_dict_to_list(dictionary):
    list_of_lists = []
    for key, value in dictionary.items():
        list_of_lists.append([key, value])
    return list_of_lists

dictionary = {
    ""a"": 1,
    ""b"": 2,
    ""c"": 3,
    ""d"": 4,
    ""e"": 5,
    ""f"": 6,
    ""g"": 7,
    ""h"
1739,How to move Files and Directories in Python,"# Python program to move
# files and directories


import shutil

# Source path
source = ""D:\Pycharm projects\gfg\Test\B""

# Destination path
destination = ""D:\Pycharm projects\gfg\Test\A""

# Move the content of
# source to destination
dest = shutil.move(source, destination)

# print(dest) prints the
# Destination of moved directory","1. Create a file named ""myfile.txt""
2. Create a directory named ""mydir""
3. Create a file named ""myfile.txt""
4. Move the file ""myfile.txt"" to the directory ""mydir""
5. Move the file ""myfile.txt"" to the directory ""mydir""
6. Move the file ""myfile.txt"" to the directory ""mydir""
7. Move the file ""myfile.txt"" to the directory ""mydir""
8. Move the file """
1740,How to get file creation and modification date or time in Python,"import os
import time

# Path to the file/directory
path = r""C:\Program Files (x86)\Google\pivpT.png""

# Both the variables would contain time
# elapsed since EPOCH in float
ti_c = os.path.getctime(path)
ti_m = os.path.getmtime(path)

# Converting the time in seconds to a timestamp
c_ti = time.ctime(ti_c)
m_ti = time.ctime(ti_m)

print(
f""The file located at the path {path}
was created at {c_ti} and was last modified at {m_ti}"")","import os

def get_file_creation_date(file_name):
    """"""
    Returns the creation date of the file.
    """"""
    try:
        f = open(file_name, 'r')
        return f.read()
    except IOError:
        return None

def get_file_modification_date(file_name):
    """"""
    Returns the modification date of the file.
    """"""
    try:
        f = open(file_name, 'r')"
1741,Write a Python program to convert unix timestamp string to readable date,"# Python program to illustrate the
# convertion of unix timestamp string
# to its readable date


# Importing datetime module
import datetime


# Calling the fromtimestamp() function to
# extract datetime from the given timestamp


# Calling the strftime() function to convert
# the extracted datetime into its string format
print(datetime.datetime.fromtimestamp(int(""1294113662""))
.strftime('%Y-%m-%d %H:%M:%S'))","import time

def unix_to_date(unix_time):
    return time.strftime(""%Y-%m-%d %H:%M:%S"", time.localtime(unix_time))

print(unix_to_date(1568692800))

""""""

# Solution 1

import time

def unix_to_date(unix_time):
    return time.strftime(""%Y-%m-%d %H:"
1742,Write a Python program to Keys associated with Values in Dictionary,"# Python3 code to demonstrate working of
# Values Associated Keys
# Using defaultdict() + loop
from collections import defaultdict

# initializing dictionary
test_dict = {'gfg' : [1, 2, 3], 'is' : [1, 4], 'best' : [4, 2]}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# Values Associated Keys
# Using defaultdict() + loop
res = defaultdict(list)
for key, val in test_dict.items():
for ele in val:
res[ele].append(key)

# printing result
print(""The values associated dictionary : "" + str(dict(res)))","def solution(d, v):
    answer = []
    for i in d:
        if d[i] == v:
            answer.append(i)
    return answer

d = {'a': 1, 'b': 2, 'c': 3}
v = 'a'
print(solution(d, v))

""""""

def solution(d, v):
    answer = []
    for i in d:
        if d[i] == v:
            answer.append("
1743,Controlling the Web Browser with Python,"# Import the required modules
from selenium import webdriver
import time

# Main Function
if __name__ == '__main__':

# Provide the email and password
email = 'example@example.com'
password = 'password'

options = webdriver.ChromeOptions()
options.add_argument(""--start-maximized"")
options.add_argument('--log-level=3')

# Provide the path of chromedriver present on your system.
driver = webdriver.Chrome(executable_path=""C:/chromedriver/chromedriver.exe"",
chrome_options=options)
driver.set_window_size(1920,1080)

# Send a get request to the url
driver.get('https://auth.geeksforgeeks.org/')
time.sleep(5)

# Finds the input box by name in DOM tree to send both
# the provided email and password in it.
driver.find_element_by_name('user').send_keys(email)
driver.find_element_by_name('pass').send_keys(password)

# Find the signin button and click on it.
driver.find_element_by_css_selector(
'button.btn.btn-green.signin-button').click()
time.sleep(5)

# Returns the list of elements
# having the following css selector.
container = driver.find_elements_by_css_selector(
'div.mdl-cell.mdl-cell--9-col.mdl-cell--12-col-phone.textBold')

# Extracts the text from name,
# institution, email_id css selector.
name = container[0].text
try:
institution = container[1].find_element_by_css_selector('a').text
except:
institution = container[1].text
email_id = container[2].text

# Output Example 1
print(""Basic Info"")
print({""Name"": name,
""Institution"": institution,
""Email ID"": email})

# Clicks on Practice Tab
driver.find_elements_by_css_selector(
'a.mdl-navigation__link')[1].click()
time.sleep(5)

# Selected the Container containing information
container = driver.find_element_by_css_selector(
'div.mdl-cell.mdl-cell--7-col.mdl-cell--12-col-phone.\
whiteBgColor.mdl-shadow--2dp.userMainDiv')

# Selected the tags from the container
grids = container.find_elements_by_css_selector(
'div.mdl-grid')

# Iterate each tag and append the text extracted from it.
res = set()
for grid in grids:
res.add(grid.text.replace('\n',':'))

# Output Example 2
print(""Practice Info"")
print(res)

# Quits the driver
driver.close()
driver.quit()","1. Create a variable called'solution' and set it equal to the string 'Python is awesome!'
2. Create a variable called'solution_length' and set it equal to the length of the solution variable.
3. Create a variable called'solution_index' and set it equal to the index of the solution variable.
4. Create a variable called'solution_index_length' and set it equal to the length of the solution_index variable.
5. Create a variable called'solution_index_string' and set it equal to"
1744,Write a Python program to All pair combinations of 2 tuples,"# Python3 code to demonstrate working of
# All pair combinations of 2 tuples
# Using list comprehension

# initializing tuples
test_tuple1 = (4, 5)
test_tuple2 = (7, 8)

# printing original tuples
print(""The original tuple 1 : "" + str(test_tuple1))
print(""The original tuple 2 : "" + str(test_tuple2))

# All pair combinations of 2 tuples
# Using list comprehension
res = [(a, b) for a in test_tuple1 for b in test_tuple2]
res = res + [(a, b) for a in test_tuple2 for b in test_tuple1]

# printing result
print(""The filtered tuple : "" + str(res))","def all_pairs(tup):
    return tuple(tup)

print(all_pairs((1, 2, 3)))

""""""

def all_pairs(tup):
    return tuple(tup)

print(all_pairs((1, 2, 3)))

""""""

def all_pairs(tup):
    return tuple(tup)

print(all_pairs((1, 2, 3)))

""""""

def all_pairs"
1745,Write a Python program to Avoid Spaces in string length,"# Python3 code to demonstrate working of
# Avoid Spaces in Characters Frequency
# Using isspace() + sum()

# initializing string
test_str = 'geeksforgeeks 33 is best'

# printing original string
print(""The original string is : "" + str(test_str))

# isspace() checks for space
# sum checks count
res = sum(not chr.isspace() for chr in test_str)

# printing result
print(""The Characters Frequency avoiding spaces : "" + str(res))","def solution(s):
    return s.replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ',"
1746,How to create an empty class in Python,"# Incorrect empty class in
# Python

class Geeks:","class Empty:
    pass

# Create an empty class called 'MyClass'
class MyClass:
    pass

# Create an instance of the class 'MyClass'
my_class = MyClass()

# Create an instance of the class 'MyClass'
my_class = MyClass()

# Create an instance of the class 'MyClass'
my_class = MyClass()

# Create an instance of the class 'MyClass'
my_class = MyClass()

# Create an instance of the class '"
1747,Write a Python program to Generate k random dates between two other dates,"# Python3 code to demonstrate working of
# Random K dates in Range
# Using choices() + timedelta() + loop
from datetime import date, timedelta
from random import choices

# initializing dates ranges
test_date1, test_date2 = date(2015, 6, 3), date(2015, 7, 1)

# printing dates
print(""The original range : "" + str(test_date1) + "" "" + str(test_date2))

# initializing K
K = 7

res_dates = [test_date1]

# loop to get each date till end date
while test_date1 != test_date2:
test_date1 += timedelta(days=1)
res_dates.append(test_date1)

# random K dates from pack
res = choices(res_dates, k=K)

# printing
print(""K random dates in range : "" + str(res))","import random

def generate_dates(start, end, k):
    """"""
    Generate dates between two other dates
    """"""
    dates = []
    for i in range(k):
        date = random.randint(start, end)
        dates.append(date)
    return dates

def main():
    """"""
    Main function to generate dates between two other dates
    """"""
    start = int(input(""Enter the start date: ""))
    end = int(input("""
1748,Write a Python program to Convert List to List of dictionaries,"# Python3 code to demonstrate working of
# Convert List to List of dictionaries
# Using dictionary comprehension + loop

# initializing lists
test_list = [""Gfg"", 3, ""is"", 8, ""Best"", 10, ""for"", 18, ""Geeks"", 33]

# printing original list
print(""The original list : "" + str(test_list))

# initializing key list
key_list = [""name"", ""number""]

# loop to iterate through elements
# using dictionary comprehension
# for dictionary construction
n = len(test_list)
res = []
for idx in range(0, n, 2):
res.append({key_list[0]: test_list[idx], key_list[1] : test_list[idx + 1]})

# printing result
print(""The constructed dictionary list : "" + str(res))","def list_to_dict(l):
    d = {}
    for i in l:
        d[i] = l.count(i)
    return d

l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(list_to_dict(l))

""""""

# Solution 1

def list_to_dict(l):
    d = {}
    for i in l:
        d[i] = l.count("
1749,Building an undirected graph and finding shortest path using Dictionaries in Python,"# Python3 implementation to build a
# graph using Dictonaries


from collections import defaultdict


# Function to build the graph
def build_graph():
edges = [
[""A"", ""B""], [""A"", ""E""],
[""A"", ""C""], [""B"", ""D""],
[""B"", ""E""], [""C"", ""F""],
[""C"", ""G""], [""D"", ""E""]
]
graph = defaultdict(list)

# Loop to iterate over every
# edge of the graph
for edge in edges:
a, b = edge[0], edge[1]

# Creating the graph
# as adjacency list
graph[a].append(b)
graph[b].append(a)
return graph


if __name__ == ""__main__"":
graph = build_graph()

print(graph)","def shortest_path(graph, start, end):
    # Write your code here
    path = {}
    visited = {}
    for node in graph:
        path[node] = []
        visited[node] = False
    path[start] = []
    visited[start] = True
    while len(path[start])!= 0:
        current = path[start].pop(0)
        for node in graph[current]:
            if not visited[node]:"
1750,Write a Python program to Prefix frequency in string List,"# Python3 code to demonstrate
# Prefix frequency in List
# using loop + startswith()

# Initializing list
test_list = ['gfgisbest', 'geeks', 'gfgfreak', 'gfgCS', 'Gcourses']

# printing original list
print(""The original list is : "" + str(test_list))

# Initializing substring
test_sub = 'gfg'

# Prefix frequency in List
# using loop + startswith()
res = 0
for ele in test_list:
if ele.startswith(test_sub):
res = res + 1

# printing result
print (""Strings count with matching frequency : "" + str(res))","def prefix_frequency(string):
    freq = {}
    for char in string:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    return freq

def prefix_frequency_2(string):
    freq = {}
    for char in string:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    return freq

def"
1751,Write a Python program to Update each element in tuple list,"# Python3 code to demonstrate working of
# Update each element in tuple list
# Using list comprehension

# initialize list
test_list = [(1, 3, 4), (2, 4, 6), (3, 8, 1)]

# printing original list
print(""The original list : "" + str(test_list))

# initialize add element
add_ele = 4

# Update each element in tuple list
# Using list comprehension
res = [tuple(j + add_ele for j in sub ) for sub in test_list]

# printing result
print(""List after bulk update : "" + str(res))","def update_tuple(tuple):
    for i in range(len(tuple)):
        tuple[i] = tuple[i] + 1
    return tuple

tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print(update_tuple(tuple))

""""""

# Solution:

def update_tuple(tuple):
    for i in range(len(tuple)):
        tuple[i] ="
1752,How to Scrape Multiple Pages of a Website Using Python,"import requests
from bs4 import BeautifulSoup as bs

URL = 'https://www.geeksforgeeks.org/page/1/'

req = requests.get(URL)
soup = bs(req.text, 'html.parser')

titles = soup.find_all('div',attrs = {'class','head'})

print(titles[4].text)","import requests

url = ""https://www.python.org/blogs/python-dev/""

# Open the URL in a browser
browser = requests.get(url)

# Print the status code of the response
print(browser.status_code)

# Print the content of the response
print(browser.content)

# Print the headers of the response
print(browser.headers)

# Print the headers of the response
print(browser.headers)

# Print the content of the response
print"
1753,Test the given page is found or not on the server Using Python,"# import module
from urllib.request import urlopen
from urllib.error import *


# try block to read URL
try:
html = urlopen(""https://www.geeksforgeeks.org/"")

# except block to catch
# exception
# and identify error
except HTTPError as e:
print(""HTTP error"", e)

except URLError as e:
print(""Opps ! Page not found!"", e)


else:
print('Yeah ! found ')","import urllib.request
import urllib.parse
import urllib.error

def main():
    # Open the URL
    url = input('Enter - ')
    print('Retrieving', url)
    uh = urllib.request.urlopen(url)

    # Read the data from the URL and print it out.
    data = uh.read()
    print('Retrieved', len(data), 'characters')

    # Close the connection
    uh.close()"
1754,Write a Python program to Convert List of Lists to Tuple of Tuples,"# Python3 code to demonstrate working of
# Convert List of Lists to Tuple of Tuples
# Using tuple + list comprehension

# initializing list
test_list = [['Gfg', 'is', 'Best'], ['Gfg', 'is', 'love'],
['Gfg', 'is', 'for', 'Geeks']]

# printing original list
print(""The original list is : "" + str(test_list))

# Convert List of Lists to Tuple of Tuples
# Using tuple + list comprehension
res = tuple(tuple(sub) for sub in test_list)

# printing result
print(""The converted data : "" + str(res))","def convert_list_to_tuple(lst):
    tuple_list = []
    for i in lst:
        tuple_list.append(tuple(i))
    return tuple_list

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(convert_list_to_tuple(lst))

""""""

# Solution 1

def convert_list_to_tuple(lst"
1755,Write a Python program to Numpy dstack() method,"# import numpy
import numpy as np

gfg1 = np.array([1, 2, 3])
gfg2 = np.array([4, 5, 6])

# using numpy.dstack() method
print(np.dstack((gfg1, gfg2)))","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(np.dstack((a, b)))

""""""

# Solution

import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10,"
1756,Compute the covariance matrix of two given NumPy arrays in Python,"import numpy as np


array1 = np.array([0, 1, 1])
array2 = np.array([2, 2, 1])

# Original array1
print(array1)

# Original array2
print(array2)

# Covariance matrix
print(""\nCovariance matrix of the said arrays:\n"",
np.cov(array1, array2))","import numpy as np

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

c = np.cov(a, b)

print(c)

# Output:
[[1.25  0.        ]
 [0.666667  0.333333]
 [0.333333  0.666667]]

""""""

import numpy as np

a = np.array([1, 2, 3])"
1757,Extract punctuation from the specified column of Dataframe using Regex in Python,"# import required libraries
import pandas as pd
import re

# creating Dataframe with
# name and their comments
df = pd.DataFrame({
'Name' : ['Akash', 'Ashish', 'Ayush',
'Diksha' , 'Radhika'],

'Comments': ['Hey! Akash how r u' ,
'Why are you asking this to me?' ,
'Today, what we are going to do.' ,
'No plans for today why?' ,
'Wedding plans, what are you saying?']},

columns = ['Name', 'Comments']
)

# show the Dataframe
df","import re

df = pd.read_csv('../data/data.csv', sep=',')

# Extract the column of the Dataframe
df_column = df.columns

# Extract the column of the Dataframe
df_column = df.columns

# Extract the column of the Dataframe
df_column = df.columns

# Extract the column of the Dataframe
df_column = df.columns

# Extract the column of the Dataframe
df"
1758,How to add timestamp to excel file in Python,"# Import the required modules
import datetime
from openpyxl import Workbook
import time


# Main Function
if __name__ == '__main__':

# Create a worbook object
wb = Workbook()

# Select the active sheet
ws = wb.active

# Heading of Cell A1
ws.cell(row=1, column=1).value = ""Current Date and Time""

# Cell A2 containing the Current Date and Time
ws.cell(row=2, column=1).value = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

# Sleep of 2 seconds
time.sleep(2)

# Cell A3 containing the Current Date and Time
ws.cell(row=3, column=1).value = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
time.sleep(2)

# Cell A4 containing the Current Date and Time
ws.cell(row=4, column=1).value = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

# Save the workbook with a
# filename and close the object
wb.save('gfg.xlsx')
wb.close()","import datetime

def add_timestamp(filename):
    # Open the file in read mode
    with open(filename, 'r') as f:
        # Read the file content
        content = f.read()
        # Convert the content to a list of strings
        content = content.split('\n')
        # Iterate over the list of strings
        for line in content:
            # If the line is not empty
            if line:
                # Split the line into a list of words
                words = line"
1759,Defining a Python function at runtime,"# importing the module
from types import FunctionType

# functttion during run-time
f_code = compile('def gfg(): return ""GEEKSFORGEEKS""', ""<string>"", ""exec"")
f_func = FunctionType(f_code.co_consts[0], globals(), ""gfg"")

# calling the function
print(f_func())","def solution(n):
    return n % 2 == 0

The solution function should return True if the number is even, and False if it is odd.

For example, if n = 12, the function should return True.

If n = 13, the function should return False.

If n = 14, the function should return True.

If n = 15, the function should return False.

If n = 16, the function should return True.

If n = 17, the function should return False.

If n = 18"
1760,Find indices of elements equal to zero in a NumPy array in Python,"# importing Numpy package
import numpy as np

# creating a 1-D Numpy array
n_array = np.array([1, 0, 2, 0, 3, 0, 0, 5,
6, 7, 5, 0, 8])

print(""Original array:"")
print(n_array)

# finding indices of null elements using np.where()
print(""\nIndices of elements equal to zero of the \
given 1-D array:"")

res = np.where(n_array == 0)[0]
print(res)","a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

a[a == 0] = np.nan

a[a == 0] = np.nan

a[a == 0] = np.nan

a[a == 0] = np.nan

a[a == 0] = np.nan

a[a == 0] = np.nan

a[a == 0] = np.nan

a["
1761,Getting all CSV files from a directory using Python,"# importing the required modules
import glob
import pandas as pd

# specifying the path to csv files
path = ""csvfoldergfg""

# csv files in the path
files = glob.glob(path + ""/*.csv"")

# defining an empty list to store
# content
data_frame = pd.DataFrame()
content = []

# checking all the csv files in the
# specified path
for filename in files:

# reading content of csv file
# content.append(filename)
df = pd.read_csv(filename, index_col=None)
content.append(df)

# converting content to data frame
data_frame = pd.concat(content)
print(data_frame)","import os
import csv

csvpath = os.path.join('.', 'Resources', 'election_data.csv')

with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    total_votes = 0
    candidate_votes = {}
    candidate_votes_list = []
    candidate_votes_percentage = {}
    candidate_votes_percentage"
1762,numpy.where() in Python,"# Python program explaining
# where() function

import numpy as np

np.where([[True, False], [True, True]],
[[1, 2], [3, 4]], [[5, 6], [7, 8]])","import numpy as np

x = np.array([[1, 2, 3], [4, 5, 6]])
y = np.array([[7, 8, 9], [10, 11, 12]])

print(np.where(x > 5))

# Output:
# [[1 3]
#  [4 5]]

print(np.where(x > 5, y, x))

# Output:
# [[1 2 3]
#  [4 5 6]]

print(np"
1763,Write a Python program to Multiple indices Replace in String,"# Python3 code to demonstrate working of
# Multiple indices Replace in String
# Using loop + join()

# initializing string
test_str = 'geeksforgeeks is best'

# printing original string
print(""The original string is : "" + test_str)

# initializing list
test_list = [2, 4, 7, 10]

# initializing repl char
repl_char = '*'

# Multiple indices Replace in String
# Using loop + join()
temp = list(test_str)
for idx in test_list:
temp[idx] = repl_char
res = ''.join(temp)

# printing result
print(""The String after performing replace : "" + str(res))","def multiple_index_replace(string, index, replacement):
    return string[:index] + replacement + string[index + len(replacement):]

print(multiple_index_replace('abcdef', 2, 'b'))
print(multiple_index_replace('abcdef', 2, 'b'))
print(multiple_index_replace('abcdef', 2, 'b'))
print(multiple_index_replace('abcdef', 2, 'b'))
print(multiple_index_replace('abcdef"
1764,Automate Youtube with Python,"from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import speech_recognition as sr
import pyttsx3
import time


def automateYoutube(searchtext):

# giving the path of chromedriver to selenium websriver
path = ""C:\\Users\\hp\\Downloads\\chromedriver""

url = ""https://www.youtube.com/""

# opening the youtube in chromedriver
driver = webdriver.Chrome(path)
driver.get(url)

# find the search bar using selenium find_element function
driver.find_element_by_name(""search_query"").send_keys(searchtext)

# clicking on the search button
driver.find_element_by_css_selector(
""#search-icon-legacy.ytd-searchbox"").click()

# For findding the right match search
WebDriverWait(driver, 0).until(expected_conditions.title_contains(MyText))

# clicking on the match search having same as in searched query
WebDriverWait(driver, 30).until(
expected_conditions.element_to_be_clickable((By.ID, ""img""))).click()

# while(True):
# pass


speak = sr.Recognizer()
try:
with sr.Microphone() as speaky:

# adjust the energy threshold based on
# the surrounding noise level
speak.adjust_for_ambient_noise(speaky, duration=0.2)
print(""listening..."")

# listens for the user's input
searchquery = speak.listen(speaky)

# Using ggogle to recognize audio
MyText = speak.recognize_google(searchquery)
MyText = MyText.lower()

except sr.RequestError as e:
print(""Could not request results; {0}"".format(e))

except sr.UnknownValueError:
print(""unknown error occured"")

# Calling thr function
automateYoutube(MyText)","def solution(n):
    if n == 1:
        return 1
    else:
        return n * solution(n-1)

""""""

def solution(n):
    if n == 1:
        return 1
    else:
        return n * solution(n-1)

print(solution(5))"
1765,Write a Python program to Intersection in Tuple Records Data,"# Python3 code to demonstrate working of
# Intersection in Tuple Records Data
# Using list comprehension

# Initializing lists
test_list1 = [('gfg', 1), ('is', 2), ('best', 3)]
test_list2 = [('i', 3), ('love', 4), ('gfg', 1)]

# printing original lists
print(""The original list 1 is : "" + str(test_list1))
print(""The original list 2 is : "" + str(test_list2))

# Intersection in Tuple Records Data
# Using list comprehension
res = [ele1 for ele1 in test_list1
for ele2 in test_list2 if ele1 == ele2]

# printing result
print(""The Intersection of data records is : "" + str(res))","def intersection(t1, t2):
    return t1[0]

t1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
t2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

print(intersection(t1, t2))

""""""

# Solution:

def intersection(t1, t2):
    return t1[0]

t1 = (1,"
1766,Create a pandas column using for loop in Python,"# importing libraries
import pandas as pd
import numpy as np

raw_Data = {'Voter_name': ['Geek1', 'Geek2', 'Geek3', 'Geek4',
'Geek5', 'Geek6', 'Geek7', 'Geek8'],
'Voter_age': [15, 23, 25, 9, 67, 54, 42, np.NaN]}

df = pd.DataFrame(raw_Data, columns = ['Voter_name', 'Voter_age'])
# //DataFrame will look like
#
# Voter_name Voter_age
# Geek1 15
# Geek2 23
# Geek3 25
# Geek4 09
# Geek5 67
# Geek6 54
# Geek7 42
# Geek8 not a number

eligible = []

# For each row in the column
for age in df['Voter_age']:
if age >= 18: # if Voter eligible
eligible.append('Yes')
elif age < 18: # if voter is not eligible
eligible.append(""No"")
else:
eligible.append(""Not Sure"")

# Create a column from the list
df['Voter'] = eligible

print(df)","import pandas as pd

# Create a dataframe
df = pd.DataFrame({""Name"": [""John"", ""Jane"", ""John"", ""Jane"", ""John"", ""Jane"", ""Jane"", ""Jane"", ""Jane""],
                   ""Age"": [30, 32, 33, 34, 35, 36, 37, 38, 39],
                   ""Class"": [""First"", ""Second"", ""First"", ""Second"", ""First"", ""Second"", ""First"", ""Second"", ""First""]})

# Create a new column
df"
1767,Create a Pandas DataFrame from List of Dicts in Python,"# Python code demonstrate how to create
# Pandas DataFrame by lists of dicts.
import pandas as pd

# Initialise data to lists.
data = [{'Geeks': 'dataframe', 'For': 'using', 'geeks': 'list'},
{'Geeks':10, 'For': 20, 'geeks': 30}]

# Creates DataFrame.
df = pd.DataFrame(data)

# Print the data
df","import pandas as pd

data = [
    {'name': 'John', 'age': 30, 'city': 'San Francisco'},
    {'name': 'Anna', 'age': 35, 'city': 'Los Angeles'},
    {'name': 'Peter', 'age': 25, 'city': 'Boston'},
    {'name': 'George', 'age': 35, 'city': 'Atlanta'}
]

df = pd.DataFrame(data)

print("
1768,How to keep old content when Writing to Files in Python,"# Python program to keep the old content of the file
# when using write.

# Opening the file with append mode
file = open(""gfg input file.txt"", ""a"")

# Content to be added
content = ""\n\n# This Content is added through the program #""

# Writing the file
file.write(content)

# Closing the opened file
file.close()","def solution(files):
    answer = []
    for file in files:
        with open(file, 'r') as f:
            content = f.read()
        answer.append(content)
    return answer

print(solution([""a.txt"", ""b.txt"", ""c.txt""]))

""""""

def solution(files):
    answer = []
    for file in files:
        with open(file, 'r') as f:
            content = f.read()"
1769,Convert String to Set in Python,"# create a string str
string = ""geeks""
print(""Initially"")
print(""The datatype of string : "" + str(type(string)))
print(""Contents of string : "" + string)

# convert String to Set
string = set(string)
print(""\nAfter the conversion"")
print(""The datatype of string : "" + str(type(string)))
print(""Contents of string : "", string)","def convert_string_to_set(string):
    return set(string.split())

print(convert_string_to_set(""1 2 3 4 5 6 7 8 9 10""))

""""""

def convert_string_to_set(string):
    return set(string.split())

print(convert_string_to_set(""1 2 3 4 5 6 7 8 9 10""))

""""""

def convert_string_to_set(string):
    return set(string.split())

print"
1770,Create a Numpy array filled with all zeros | Python,"# Python Program to create array with all zeros
import numpy as geek

a = geek.zeros(3, dtype = int)
print(""Matrix a : \n"", a)

b = geek.zeros([3, 3], dtype = int)
print(""\nMatrix b : \n"", b)","import numpy as np

a = np.zeros((3,4))
print(a)

# Create a Numpy array filled with all zeros | Python

# Create a Numpy array filled with all zeros | Python

# Create a Numpy array filled with all zeros | Python

# Create a Numpy array filled with all zeros | Python

# Create a Numpy array filled with all zeros | Python

# Create a Numpy array filled with all zeros | Python

#"
1771,Write a Python program to Replace words from Dictionary,"# Python3 code to demonstrate working of
# Replace words from Dictionary
# Using split() + join() + get()

# initializing string
test_str = 'geekforgeeks best for geeks'

# printing original string
print(""The original string is : "" + str(test_str))

# lookup Dictionary
lookp_dict = {""best"" : ""good and better"", ""geeks"" : ""all CS aspirants""}

# performing split()
temp = test_str.split()
res = []
for wrd in temp:

# searching from lookp_dict
res.append(lookp_dict.get(wrd, wrd))

res = ' '.join(res)

# printing result
print(""Replaced Strings : "" + str(res))","def replace_words(dictionary, words):
    for word in words:
        dictionary[word] = dictionary.get(word, 0) + 1
    return dictionary

dictionary = {'apple': 2, 'banana': 1, 'orange': 1, 'grape': 1}
print(replace_words(dictionary, ['apple', 'banana', 'orange']))

""""""

def replace_words(dictionary, words):
    for word in words:
        dictionary[word] = dictionary"
1772,Write a Python program to print negative numbers in a list,"# Python program to print negative Numbers in a List

# list of numbers
list1 = [11, -21, 0, 45, 66, -93]

# iterating each number in list
for num in list1:

# checking condition
if num < 0:
print(num, end = "" "")","def negative_numbers(lst):
    for i in lst:
        if i < 0:
            print(i)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
negative_numbers(lst)

""""""

def negative_numbers(lst):
    for i in lst:
        if i < 0:
            print(i)

lst = [1, 2, 3, 4, 5, 6"
1773,Write a Python program to Find all duplicate characters in string,"from collections import Counter

def find_dup_char(input):

# now create dictionary using counter method
# which will have strings as key and their
# frequencies as value
WC = Counter(input)
j = -1


# Finding no. of occurrence of a character
# and get the index of it.
for i in WC.values():
j = j + 1
if( i > 1 ):
print WC.keys()[j],

# Driver program
if __name__ == ""__main__"":
input = 'geeksforgeeks'
find_dup_char(input)","def find_duplicate(string):
    duplicate = []
    for i in string:
        if i in duplicate:
            duplicate.remove(i)
        else:
            duplicate.append(i)
    return duplicate

print(find_duplicate(""abcdefg""))

""""""

def find_duplicate(string):
    duplicate = []
    for i in string:
        if i in duplicate:
            duplicate.remove(i)"
1774,Write a Python program to Records with Value at K index,"# Python3 code to demonstrate working of
# Records with Value at K index
# Using loop

# initialize list
test_list = [(3, 1, 5), (1, 3, 6), (2, 5, 7), (5, 2, 8), (6, 3, 0)]

# printing original list
print(""The original list is : "" + str(test_list))

# initialize ele
ele = 3

# initialize K
K = 1

# Records with Value at K index
# Using loop
# using y for K = 1
res = []
for x, y, z in test_list:
if y == ele:
res.append((x, y, z))

# printing result
print(""The tuples of element at Kth position : "" + str(res))","def solution(arr, k):
    for i in range(len(arr)):
        if arr[i] == k:
            return i
    return -1

""""""

def solution(arr, k):
    for i in range(len(arr)):
        if arr[i] == k:
            return i
    return -1

""""""

def solution(arr, k):
    for i in range(len(arr)):
        if arr[i] == k:"
1775,Write a Python program to convert tuple into list by adding the given string after every element,"# Python3 code to demonstrate working of
# Convert tuple to List with succeeding element
# Using list comprehension


# initializing tuple
test_tup = (5, 6, 7, 4, 9)


# printing original tuple
print(""The original tuple is : "", test_tup)


# initializing K
K = ""Gfg""


# list comprehension for nested loop for flatten
res = [ele for sub in test_tup for ele in (sub, K)]


# printing result
print(""Converted Tuple with K : "", res)","def solution(t):
    return list(t) + [t[0] + t[1]]

""""""

def solution(t):
    return list(t) + [t[0] + t[1]]

def solution(t):
    return list(t) + [t[0] + t[1]] + [t[0] + t[2]]

def solution(t):
    return list(t) + [t[0] + t[1"
1776,numpy matrix operations | randn() function in Python,"# Python program explaining
# numpy.matlib.randn() function

# importing matrix library from numpy
import numpy as geek
import numpy.matlib

# desired 3 x 4 random output matrix
out_mat = geek.matlib.randn((3, 4))
print (""Output matrix : "", out_mat)","import numpy as np

A = np.random.randn(3,3)
B = np.random.randn(3,3)

print(A+B)
print(A-B)
print(A*B)
print(A/B)
print(A.dot(B))
print(A.T.dot(B))
print(A.T.dot(A))
print(A.T.dot(A.T))
print(A.T.dot(A"
1777,How to scroll down followers popup in Instagram  in Python,"import selenium
print(selenium.__version__)","import webbrowser
webbrowser.open('https://www.instagram.com/p/C9WZVJZVV/')

""""""

import webbrowser
import os
import time

def open_browser():
    webbrowser.open('https://www.instagram.com/p/C9WZVJZVV/')

def open_instagram():
    os.system('python insta.py')

def main():
    print("""""""
1778,Write a Python program to Tuple List intersection (Order irrespective),"# Python3 code to demonstrate working of
# Tuple List intersection [ Order irrespective ]
# Using sorted() + set() + & operator + list comprehension

# initializing lists
test_list1 = [(3, 4), (5, 6), (9, 10), (4, 5)]
test_list2 = [(5, 4), (3, 4), (6, 5), (9, 11)]

# printing original list
print(""The original list 1 is : "" + str(test_list1))
print(""The original list 2 is : "" + str(test_list2))

# Using sorted() + set() + & operator + list comprehension
# Using & operator to intersect, sorting before performing intersection
res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])

# printing result
print(""List after intersection : "" + str(res))","""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution"
1779,Write a Python Library for Linked List,"# importing module
import collections


# initialising a deque() of arbitary length
linked_lst = collections.deque()


# filling deque() with elements
linked_lst.append('first')
linked_lst.append('second')
linked_lst.append('third')


print(""elements in the linked_list:"")
print(linked_lst)


# adding element at an arbitary position
linked_lst.insert(1, 'fourth')


print(""elements in the linked_list:"")
print(linked_lst)


# deleting the last element
linked_lst.pop()


print(""elements in the linked_list:"")
print(linked_lst)


# removing a specific element
linked_lst.remove('fourth')


print(""elements in the linked_list:"")
print(linked_lst)","def solution(head):
    # Write your code here
    if head is None:
        return None
    
    slow = head
    fast = head
    
    while fast.next is not None and fast.next.next is not None:
        slow = slow.next
        fast = fast.next.next
    
    slow.next = None
    
    return slow

# This is the class of the input linked list.
# class ListNode:
#     def __init__(self, x):
#"
1780,Write a Python program to convert any base to decimal by using int() method,"# Python program to convert any base
# number to its corresponding decimal
# number

# Function to convert any base number
# to its corresponding decimal number
def any_base_to_decimal(number, base):

# calling the builtin function
# int(number, base) by passing
# two arguments in it number in
# string form and base and store
# the output value in temp
temp = int(number, base)

# printing the corresponding decimal
# number
print(temp)

# Driver's Code
if __name__ == '__main__' :
hexadecimal_number = '1A'
base = 16
any_base_to_decimal(hexadecimal_number, base)","def base_convert(base, num):
    if base == '1':
        return num
    else:
        return base_convert(base, num // base) + str(num % base)

print(base_convert('1', 5))

""""""

# Solution:

def base_convert(base, num):
    if base == '1':
        return num
    else:
        return base_convert(base, num // base) + str("
1781,How to create filename containing date or time in Python,"# import module
from datetime import datetime

# get current date and time
current_datetime = datetime.now()
print(""Current date & time : "", current_datetime)

# convert datetime obj to string
str_current_datetime = str(current_datetime)

# create a file object along with extension
file_name = str_current_datetime+"".txt""
file = open(file_name, 'w')

print(""File created : "", file.name)
file.close()","import datetime

def solution(files):
    answer = []
    for file in files:
        with open(file, 'r') as f:
            date = f.readline().split()
            time = f.readline().split()
            date = datetime.datetime.strptime(date[0], '%Y-%m-%d %H:%M:%S')
            time = datetime.datetime.strptime(time[0], '%H:%M:"
1782,Write a Python program to Replace NaN values with average of columns,"# Python code to demonstrate
# to replace nan values
# with an average of columns

import numpy as np

# Initialising numpy array
ini_array = np.array([[1.3, 2.5, 3.6, np.nan],
[2.6, 3.3, np.nan, 5.5],
[2.1, 3.2, 5.4, 6.5]])

# printing initial array
print (""initial array"", ini_array)

# column mean
col_mean = np.nanmean(ini_array, axis = 0)

# printing column mean
print (""columns mean"", str(col_mean))

# find indices where nan value is present
inds = np.where(np.isnan(ini_array))

# replace inds with avg of column
ini_array[inds] = np.take(col_mean, inds[1])

# printing final array
print (""final array"", ini_array)","import numpy as np
import pandas as pd

# Read the data
data = pd.read_csv('data.csv')

# Replace NaN values with average of columns
data.fillna(data.mean(), inplace=True)

# Print the data
print(data)

# Create a new dataframe
new_data = data.copy()

# Replace NaN values with average of columns
new_data.fillna(new_data.mean(), inplace=True"
1783,Write a Python program to String till Substring,"# Python3 code to demonstrate
# String till Substring
# using partition()


# initializing string
test_string = ""GeeksforGeeks is best for geeks""


# initializing split word
spl_word = 'best'


# printing original string
print(""The original string : "" + str(test_string))


# printing split string
print(""The split string : "" + str(spl_word))


# using partition()
# String till Substring
res = test_string.partition(spl_word)[0]


# print result
print(""String before the substring occurrence : "" + res)","""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution 23

#"
1784,Find the number of occurrences of a sequence in a NumPy array in Python,"# importing package
import numpy

# create numpy array
arr = numpy.array([[2, 8, 9, 4],
[9, 4, 9, 4],
[4, 5, 9, 7],
[2, 9, 4, 3]])

# Counting sequence
output = repr(arr).count(""9, 4"")

# view output
print(output)","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a.count(3))

# Output:
# 3

# Explanation:
# The array contains the following occurrences:
#
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9
# 10

# Solution:
#
# def count_occurrences"
1785,Write a Python program to Remove substring list from String,"# Python3 code to demonstrate working of
# Remove substring list from String
# Using loop + replace()

# initializing string
test_str = ""gfg is best for all geeks""

# printing original string
print(""The original string is : "" + test_str)

# initializing sub list
sub_list = [""best"", ""all""]

# Remove substring list from String
# Using loop + replace()
for sub in sub_list:
test_str = test_str.replace(' ' + sub + ' ', ' ')

# printing result
print(""The string after substring removal : "" + test_str)","def remove_substring(str, sub):
    return str.replace(sub, """")

print(remove_substring(""abcdefg"", ""e""))

""""""

def remove_substring(str, sub):
    return str.replace(sub, """")

print(remove_substring(""abcdefg"", ""e""))"
1786,numpy.random.geometric() in Python,"# import numpy and geometric
import numpy as np
import matplotlib.pyplot as plt

# Using geometric() method
gfg = np.random.geometric(0.65, 1000)

count, bins, ignored = plt.hist(gfg, 40, density = True)
plt.show()","import numpy as np

def geometric(n):
    """"""
    Returns the geometric sequence of n numbers.
    """"""
    if n == 0:
        return []
    elif n == 1:
        return [1]
    else:
        return [1 + geometric(n - 1)] + geometric(n - 1)

print(geometric(5))

""""""
Output:
[1, 1, 1, 2, 4, 9, 16, 25, 36, 49, 64, 81, 100"
1787,numpy.trim_zeros() in Python,"import numpy as geek

gfg = geek.array((0, 0, 0, 0, 1, 5, 7, 0, 6, 2, 9, 0, 10, 0, 0))

# without trim parameter
# returns an array without leading and trailing zeros

res = geek.trim_zeros(gfg)
print(res)","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

a.trim_zeros()

a.trim_zeros()

a.trim_zeros()

a.trim_zeros()

a.trim_zeros()

a.trim_zeros()

a.trim_zeros()

a.trim_zeros()

a."
1788,Write a Python program to Numpy matrix.take(),"# import the important module in python
import numpy as np

# make matrix with numpy
gfg = np.matrix('[4, 1, 12, 3, 4, 6, 7]')

# applying matrix.take() method
geek = gfg.take(2)

print(geek)","import numpy as np

matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(matrix.take([0, 1, 2], axis=0))

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11"
1789,"What is a clean, Pythonic way to have multiple constructors in Python","class example:

def __init__(self):
print(""One"")

def __init__(self):
print(""Two"")

def __init__(self):
print(""Three"")


e = example()","def solution(n):
    def is_prime(n):
        if n == 1:
            return False
        for i in range(2, n):
            if n % i == 0:
                return False
        return True

    def is_prime_recursive(n):
        if n == 1:
            return False
        if n == 2:
            return True
        if n % 2 == 0:
            return False
        for i in range(3, n, 2):"
1790,Implementation of XOR Linked List in Python,"# import required module
import ctypes



# create node class
class Node:
def __init__(self, value):
self.value = value
self.npx = 0



# create linked list class
class XorLinkedList:

# constructor
def __init__(self):
self.head = None
self.tail = None
self.__nodes = []

# method to insert node at beginning
def InsertAtStart(self, value):
node = Node(value)
if self.head is None: # If list is empty
self.head = node
self.tail = node
else:
self.head.npx = id(node) ^ self.head.npx
node.npx = id(self.head)
self.head = node
self.__nodes.append(node)

# method to insert node at end
def InsertAtEnd(self, value):
node = Node(value)
if self.head is None: # If list is empty
self.head = node
self.tail = node
else:
self.tail.npx = id(node) ^ self.tail.npx
node.npx = id(self.tail)
self.tail = node
self.__nodes.append(node)

# method to remove node at beginning
def DeleteAtStart(self):
if self.isEmpty(): # If list is empty
return ""List is empty !""
elif self.head == self.tail: # If list has 1 node
self.head = self.tail = None
elif (0 ^ self.head.npx) == id(self.tail): # If list has 2 nodes
self.head = self.tail
self.head.npx = self.tail.npx = 0
else: # If list has more than 2 nodes
res = self.head.value
x = self.__type_cast(0 ^ self.head.npx) # Address of next node
y = (id(self.head) ^ x.npx) # Address of next of next node
self.head = x
self.head.npx = 0 ^ y
return res

# method to remove node at end
def DeleteAtEnd(self):
if self.isEmpty(): # If list is empty
return ""List is empty !""
elif self.head == self.tail: # If list has 1 node
self.head = self.tail = None
elif self.__type_cast(0 ^ self.head.npx) == (self.tail): # If list has 2 nodes
self.tail = self.head
self.head.npx = self.tail.npx = 0
else: # If list has more than 2 nodes
prev_id = 0
node = self.head
next_id = 1
while next_id:
next_id = prev_id ^ node.npx
if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
res = node.value
x = self.__type_cast(prev_id).npx ^ id(node)
y = self.__type_cast(prev_id)
y.npx = x ^ 0
self.tail = y
return res

# method to traverse linked list
def Print(self):
""""""We are printing values rather than returning it bacause
for returning we have to append all values in a list
and it takes extra memory to save all values in a list.""""""

if self.head != None:
prev_id = 0
node = self.head
next_id = 1
print(node.value, end=' ')
while next_id:
next_id = prev_id ^ node.npx
if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
print(node.value, end=' ')
else:
return
else:
print(""List is empty !"")

# method to traverse linked list in reverse order
def ReversePrint(self):

# Print Values is reverse order.
""""""We are printing values rather than returning it bacause
for returning we have to append all values in a list
and it takes extra memory to save all values in a list.""""""

if self.head != None:
prev_id = 0
node = self.tail
next_id = 1
print(node.value, end=' ')
while next_id:
next_id = prev_id ^ node.npx
if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
print(node.value, end=' ')
else:
return
else:
print(""List is empty !"")

# method to get length of linked list
def Length(self):
if not self.isEmpty():
prev_id = 0
node = self.head
next_id = 1
count = 1
while next_id:
next_id = prev_id ^ node.npx
if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
count += 1
else:
return count
else:
return 0

# method to get node data value by index
def PrintByIndex(self, index):
prev_id = 0
node = self.head
for i in range(index):
next_id = prev_id ^ node.npx

if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
else:
return ""Value dosn't found index out of range.""
return node.value

# method to check if the liked list is empty or not
def isEmpty(self):
if self.head is None:
return True
return False

# method to return a new instance of type
def __type_cast(self, id):
return ctypes.cast(id, ctypes.py_object).value



# Driver Code

# create object
obj = XorLinkedList()

# insert nodes
obj.InsertAtEnd(2)
obj.InsertAtEnd(3)
obj.InsertAtEnd(4)
obj.InsertAtStart(0)
obj.InsertAtStart(6)
obj.InsertAtEnd(55)

# display length
print(""\nLength:"", obj.Length())

# traverse
print(""\nTraverse linked list:"")
obj.Print()

print(""\nTraverse in reverse order:"")
obj.ReversePrint()

# display data values by index
print('\nNodes:')
for i in range(obj.Length()):
print(""Data value at index"", i, 'is', obj.PrintByIndex(i))

# removing nodes
print(""\nDelete Last Node: "", obj.DeleteAtEnd())
print(""\nDelete First Node: "", obj.DeleteAtStart())

# new length
print(""\nUpdated length:"", obj.Length())

# display data values by index
print('\nNodes:')
for i in range(obj.Length()):
print(""Data value at index"", i, 'is', obj.PrintByIndex(i))

# traverse
print(""\nTraverse linked list:"")
obj.Print()

print(""\nTraverse in reverse order:"")
obj.ReversePrint()","def xor_linked_list(head, k):
    if head is None:
        return None
    if head.next is None:
        return head
    if head.next.next is None:
        return head
    if head.next.next.next is None:
        return head
    if head.next.next.next.next is None:
        return head
    if head.next.next.next.next.next is None:
        return head
    if head.next.next.next"
1791,Write a Python program to Check for URL in a String,"# Python code to find the URL from an input string
# Using the regular expression
import re

def Find(string):

# findall() has been used
# with valid conditions for urls in string
regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?]))""
url = re.findall(regex,string)
return [x[0] for x in url]

# Driver Code
string = 'My Profile: https://auth.geeksforgeeks.org/user/Chinmoy%20Lenka/articles in the portal of http://www.geeksforgeeks.org/'
print(""Urls: "", Find(string))","def check_url(url):
    if 'http' in url:
        return True
    else:
        return False

print(check_url('http://google.com'))
print(check_url('http://www.google.com'))
print(check_url('http://www.google.com'))
print(check_url('http://www.google.com'))
print(check_url('http://www.google.com'))
print(check_url('http://www"
1792,How to Calculate the determinant of a matrix using NumPy in Python,"# importing Numpy package
import numpy as np

# creating a 2X2 Numpy matrix
n_array = np.array([[50, 29], [30, 44]])

# Displaying the Matrix
print(""Numpy Matrix is:"")
print(n_array)

# calculating the determinant of matrix
det = np.linalg.det(n_array)

print(""\nDeterminant of given 2X2 matrix:"")
print(int(det))","import numpy as np

# Create a matrix
A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Calculate the determinant
det = np.linalg.det(A)

# Print the determinant
print(det)

# Create a matrix
A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Calculate"
1793,Replace values in Pandas dataframe using regex in Python,"# importing pandas as pd
import pandas as pd

# Let's create a Dataframe
df = pd.DataFrame({'City':['New York', 'Parague', 'New Delhi', 'Venice', 'new Orleans'],
'Event':['Music', 'Poetry', 'Theatre', 'Comedy', 'Tech_Summit'],
'Cost':[10000, 5000, 15000, 2000, 12000]})

# Let's create the index
index_ = [pd.Period('02-2018'), pd.Period('04-2018'),
pd.Period('06-2018'), pd.Period('10-2018'), pd.Period('12-2018')]

# Set the index
df.index = index_

# Let's print the dataframe
print(df)","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pima-indians-diabetes.csv?raw=true')

df['Gender'] = df['Sex'].map({'female': 0,'male': 1})
df['Age'] = df['Age'].fillna(df['Age'].median())
df['EstimatedSalary'] = df['Age'] * df['BMI']"
1794,Write a Python program to Factors Frequency Dictionary,"# Python3 code to demonstrate working of
# Factors Frequency Dictionary
# Using loop

# initializing list
test_list = [2, 4, 6, 8, 3, 9, 12, 15, 16, 18]

# printing original list
print(""The original list : "" + str(test_list))

res = dict()

# iterating till max element
for idx in range(1, max(test_list)):
res[idx] = 0
for key in test_list:

# checking for factor
if key % idx == 0:
res[idx] += 1

# printing result
print(""The constructed dictionary : "" + str(res))","def factors(n):
    factors = []
    for i in range(1, n + 1):
        if n % i == 0:
            factors.append(i)
    return factors

def FFD(n):
    factors = factors(n)
    F = {}
    for i in range(1, len(factors) + 1):
        F[i] = factors.count(i)
    return F

n = int(input(""Enter the number: ""))
print(FD"
1795,Write a Python program to Convert Integer Matrix to String Matrix,"# Python3 code to demonstrate working of
# Convert Integer Matrix to String Matrix
# Using str() + list comprehension

# initializing list
test_list = [[4, 5, 7], [10, 8, 3], [19, 4, 6], [9, 3, 6]]

# printing original list
print(""The original list : "" + str(test_list))

# using str() to convert each element to string
res = [[str(ele) for ele in sub] for sub in test_list]

# printing result
print(""The data type converted Matrix : "" + str(res))","def matrix_to_string(matrix):
    # your code goes here
    return matrix

# driver code
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(matrix_to_string(matrix))

# solution
def matrix_to_string(matrix):
    # your code goes here
    return '\n'.join([' '.join(map(str, row)) for row in matrix])

# driver code
mat"
1796,Write a Python program to find smallest number in a list,"# Python program to find smallest
# number in a list


# list of numbers
list1 = [10, 20, 4, 45, 99]


# sorting the list
list1.sort()


# printing the first element
print(""Smallest element is:"", *list1[:1])","def smallest(numbers):
    smallest = numbers[0]
    for i in range(1, len(numbers)):
        if numbers[i] < smallest:
            smallest = numbers[i]
    return smallest

print(smallest(numbers))

""""""

# Solution 1

def smallest(numbers):
    smallest = numbers[0]
    for i in range(1, len(numbers)):
        if numbers[i] < smallest:
            smallest"
1797,How to Change Tkinter LableFrame Border Color in Python,"# import tkinter
import tkinter as tk

# import ttk theme module for styling
import tkinter.ttk as ttk","import tkinter as tk

def change_border_color(event):
    color = event.widget.cget(""bg"")
    event.widget.config(bg=color)

root = tk.Tk()

frame = tk.Frame(root)
frame.pack()

frame.bind(""<Button-1>"", change_border_color)

frame.bind(""<Configure>"", change_border_color)

frame.bind(""<FocusIn>"","
1798,Write a Python program to Filter the List of String whose index in second List contaons the given Substring,"# Python3 code to demonstrate working of
# Extract elements filtered by substring
# from other list Using zip() + loop + in
# operator

# initializing list
test_list1 = [""Gfg"", ""is"", ""not"", ""best"", ""and"",
""not"", ""for"", ""CS""]
test_list2 = [""Its ok"", ""all ok"", ""wrong"", ""looks ok"",
""ok"", ""wrong"", ""ok"", ""thats ok""]

# printing original lists
print(""The original list 1 is : "" + str(test_list1))
print(""The original list 2 is : "" + str(test_list2))

# initializing substr
sub_str = ""ok""

res = []
# using zip() to map by index
for ele1, ele2 in zip(test_list1, test_list2):

# checking for substring
if sub_str in ele2:
res.append(ele1)

# printing result
print(""The extracted list : "" + str(res))","def filter_string(string, sub_string):
    return string[string.index(sub_string):]

print(filter_string(""abcdefg"", ""e""))

""""""

def filter_string(string, sub_string):
    return string[string.index(sub_string):]

print(filter_string(""abcdefg"", ""e""))

""""""

def filter_string(string, sub_string):
    return string["
1799,Write a Python program to count positive and negative numbers in a list,"# Python program to count positive and negative numbers in a List

# list of numbers
list1 = [10, -21, 4, -45, 66, -93, 1]

pos_count, neg_count = 0, 0

# iterating each number in list
for num in list1:

# checking condition
if num >= 0:
pos_count += 1

else:
neg_count += 1

print(""Positive numbers in the list: "", pos_count)
print(""Negative numbers in the list: "", neg_count)","def count_positive_negative(list):
    count = 0
    for i in list:
        if i > 0:
            count += 1
        elif i < 0:
            count += 1
    return count

print(count_positive_negative([-1, -2, -3, -4, -5]))

""""""

def count_positive_negative(list):
    count = 0
    for i in list:
        if i > 0:
            count += 1"
1800,How to count unique values inside a list in Python,"# taking an input list
input_list = [1, 2, 2, 5, 8, 4, 4, 8]

# taking an input list
l1 = []

# taking an counter
count = 0

# travesing the array
for item in input_list:
if item not in l1:
count += 1
l1.append(item)

# printing the output
print(""No of unique items are:"", count)","def unique_values(lst):
    # Your code here
    return len(set(lst))

lst = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15,"
1801,Find the length of each string element in the Numpy array in Python,"# importing the numpy library as np
import numpy as np

# Create a numpy array
arr = np.array(['New York', 'Lisbon', 'Beijing', 'Quebec'])

# Print the array
print(arr)","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(a.size)

# Python code to solve the following problem:

# import numpy as np

# a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
# print(a.size)

# Python code to solve the following problem:

# import numpy as"
1802,Write a Python dictionary with keys having multiple inputs,"# Python code to demonstrate a dictionary
# with multiple inputs in a key.
import random as rn


# creating an empty dictionary
dict = {}


# Insert first triplet in dictionary
x, y, z = 10, 20, 30
dict[x, y, z] = x + y - z;


# Insert second triplet in dictionary
x, y, z = 5, 2, 4
dict[x, y, z] = x + y - z;


# print the dictionary
print(dict)","def solution(input_list):
    # Your code here
    return input_list

""""""

def solution(input_list):
    # Your code here
    return input_list

""""""

def solution(input_list):
    # Your code here
    return input_list

""""""

def solution(input_list):
    # Your code here
    return input_list

""""""

def solution(input_list):
    # Your code here
    return input_list

"""""""
1803,How to choose elements from the list with different probability using NumPy in Python,"# import numpy library
import numpy as np

# create a list
num_list = [10, 20, 30, 40, 50]

# uniformly select any element
# from the list
number = np.random.choice(num_list)

print(number)","import numpy as np

# Create a list of 10 random numbers between 0 and 1
np.random.seed(0)
a = np.random.rand(10)

# Create a list of 10 random numbers between 0 and 1
np.random.seed(0)
b = np.random.rand(10)

# Create a list of 10 random numbers between 0 and 1
np.random.seed(0)
c = np.random.rand(10)

# Create a list"
1804,Write a Python program to Words Frequency in String Shorthands,"# Python3 code to demonstrate working of
# Words Frequency in String Shorthands
# Using dictionary comprehension + count() + split()

# initializing string
test_str = 'Gfg is best . Geeks are good and Geeks like Gfg'

# printing original string
print(""The original string is : "" + str(test_str))

# Words Frequency in String Shorthands
# Using dictionary comprehension + count() + split()
res = {key: test_str.count(key) for key in test_str.split()}

# printing result
print(""The words frequency : "" + str(res))","def words_frequency(string):
    word_list = string.split()
    word_dict = {}
    for word in word_list:
        if word in word_dict:
            word_dict[word] += 1
        else:
            word_dict[word] = 1
    return word_dict

print(words_frequency(""The quick brown fox jumps over the lazy dog""))

""""""

def words_frequency(string):
    word_list = string.split()
    word_"
1805,Write a Python program to Count the frequency of matrix row length,"# Python3 code to demonstrate working of
# Row lengths counts
# Using dictionary + loop

# initializing list
test_list = [[6, 3, 1], [8, 9], [2],
[10, 12, 7], [4, 11]]

# printing original list
print(""The original list is : "" + str(test_list))

res = dict()
for sub in test_list:

# initializing incase of new length
if len(sub) not in res:
res[len(sub)] = 1

# increment in case of length present
else:
res[len(sub)] += 1

# printing result
print(""Row length frequencies : "" + str(res))","def count_row_length(matrix):
    count = 0
    for i in range(len(matrix)):
        count += len(matrix[i])
    return count

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(count_row_length(matrix))

""""""

def count_row_length(matrix):
    count = 0
    for i in range(len(matrix)):"
1806,Find the average of an unknown number of inputs in Python,"

# function that takes arbitary
# number of inputs
def avgfun(*n):
sums = 0

for t in n:
sums = sums + t

avg = sums / len(n)
return avg


# Driver Code
result1 = avgfun(1, 2, 3)
result2 = avgfun(2, 6, 4, 8)

# Printing average of the list
print(round(result1, 2))
print(round(result2, 2))","def solution(n):
    return n*(n+1)/2

""""""

def solution(n):
    return n*(n+1)/2

print(solution(5))"
1807,Get row numbers of NumPy array having element larger than X in Python,"# importing library
import numpy

# create numpy array
arr = numpy.array([[1, 2, 3, 4, 5],
[10, -3, 30, 4, 5],
[3, 2, 5, -4, 5],
[9, 7, 3, 6, 5]
])

# declare specified value
X = 6

# view array
print(""Given Array:\n"", arr)

# finding out the row numbers
output = numpy.where(numpy.any(arr > X,
axis = 1))

# view output
print(""Result:\n"", output)","import numpy as np

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

if x[x > 5] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:
    print(""Yes"")
else:
    print(""No"")

""""""

# Solution

import numpy as np

x = np.array([1, 2, 3, 4, 5, 6, 7"
1808,Write a Python program to get all subsets of given size of a set,"# Python Program to Print
# all subsets of given size of a set


import itertools


def findsubsets(s, n):
return list(itertools.combinations(s, n))


# Driver Code
s = {1, 2, 3}
n = 2


print(findsubsets(s, n))","def get_subsets(set, size):
    if size == 0:
        return [[]]
    else:
        return [subset + [set[i]] for i in range(size)]

def get_subsets_recursive(set, size, subset):
    if size == 0:
        return [[]]
    else:
        if len(subset) == size:
            return [subset + [set[i]] for i in range(size)]
        else:"
1809,Write a Python program to find uncommon words from two Strings,"# Python3 program to find a list of uncommon words

# Function to return all uncommon words
def UncommonWords(A, B):

# count will contain all the word counts
count = {}

# insert words of string A to hash
for word in A.split():
count[word] = count.get(word, 0) + 1

# insert words of string B to hash
for word in B.split():
count[word] = count.get(word, 0) + 1

# return required list of words
return [word for word in count if count[word] == 1]

# Driver Code
A = ""Geeks for Geeks""
B = ""Learning from Geeks for Geeks""

# Print required answer
print(UncommonWords(A, B))","def uncommon_words(str1, str2):
    str1 = str1.lower()
    str2 = str2.lower()
    str1_set = set(str1.split())
    str2_set = set(str2.split())
    common_words = str1_set.intersection(str2_set)
    return common_words

print(uncommon_words(""hello world"", ""hello world""))

""""""

def uncommon_words(str1, str2):"
1810,Creating a Pandas dataframe using list of tuples in Python,"# import pandas to use pandas DataFrame
import pandas as pd

# data in the form of list of tuples
data = [('Peter', 18, 7),
('Riff', 15, 6),
('John', 17, 8),
('Michel', 18, 7),
('Sheli', 17, 5) ]


# create DataFrame using data
df = pd.DataFrame(data, columns =['Name', 'Age', 'Score'])

print(df)","import pandas as pd

# Create a dataframe from the list of tuples
df = pd.DataFrame(list(tuple), columns=['Name', 'Age', 'Job', 'Rating'])

# Print the dataframe
print(df)

# Create a dataframe from the list of tuples
df = pd.DataFrame(list(tuple), columns=['Name', 'Age', 'Job', 'Rating'])

# Print the dataframe
print(df)"
1811,"How to get the floor, ceiling and truncated values of the elements of a numpy array in Python","# Import the numpy library
import numpy as np


# Initialize numpy array
a = np.array([1.2])

# Get floor value
a = np.floor(a)
print(a)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)
print(a.shape)
print(a.dtype)
print(a.flatten())
print(a.flatten().shape)
print(a.flatten().dtype)
print(a.flatten().flatten())
print(a.flatten().flatten().shape)
print(a.fl"
1812,How to iterate over files in directory using Python,"# import required module
import os
# assign directory
directory = 'files'


# iterate over files in
# that directory
for filename in os.listdir(directory):
f = os.path.join(directory, filename)
# checking if it is a file
if os.path.isfile(f):
print(f)","import os

def iterate_directory(directory):
    """"""
    :type directory: str
    :rtype: int
    """"""
    for root, dirs, files in os.walk(directory):
        for file in files:
            print(os.path.join(root, file))

if __name__ == '__main__':
    iterate_directory('/home/richard/Documents/python/python_projects/')"
1813,Write a Python program to Elementwise AND in tuples,"# Python3 code to demonstrate working of
# Elementwise AND in tuples
# using zip() + generator expression

# initialize tuples
test_tup1 = (10, 4, 6, 9)
test_tup2 = (5, 2, 3, 3)

# printing original tuples
print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))

# Elementwise AND in tuples
# using zip() + generator expression
res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))

# printing result
print(""The AND tuple : "" + str(res))","import itertools

def elementwise_and(a, b):
    return tuple(itertools.chain.from_iterable(itertools.combinations(a, 2)))

print(elementwise_and([1, 2, 3], [4, 5, 6]))

""""""

# Solution

def elementwise_and(a, b):
    return tuple(itertools.chain.from_iterable(itertools.combinations(a, 2)))

print(element"
1814,Write a Python program to Remove Tuples from the List having every element as None,"# Python3 code to demonstrate working of
# Remove None Tuples from List
# Using all() + list comprehension

# initializing list
test_list = [(None, 2), (None, None), (3, 4), (12, 3), (None, )]

# printing original list
print(""The original list is : "" + str(test_list))

# negating result for discarding all None Tuples
res = [sub for sub in test_list if not all(ele == None for ele in sub)]

# printing result
print(""Removed None Tuples : "" + str(res))","import collections

def remove_tuples(lst):
    # create a new list with all None values removed
    new_lst = []
    for i in lst:
        if i is not None:
            new_lst.append(i)
    return new_lst

lst = [1, 2, 3, None, None, 4, 5, 6, 7, 8, 9, 10]
print(remove_tuples(lst))

# Solution"
1815,Convert nested JSON to CSV in Python,"import json


def read_json(filename: str) -> dict:

try:
with open(filename, ""r"") as f:
data = json.loads(f.read())
except:
raise Exception(f""Reading {filename} file encountered an error"")

return data


def normalize_json(data: dict) -> dict:

new_data = dict()
for key, value in data.items():
if not isinstance(value, dict):
new_data[key] = value
else:
for k, v in value.items():
new_data[key + ""_"" + k] = v

return new_data


def generate_csv_data(data: dict) -> str:

# Defining CSV columns in a list to maintain
# the order
csv_columns = data.keys()

# Generate the first row of CSV
csv_data = "","".join(csv_columns) + ""\n""

# Generate the single record present
new_row = list()
for col in csv_columns:
new_row.append(str(data[col]))

# Concatenate the record with the column information
# in CSV format
csv_data += "","".join(new_row) + ""\n""

return csv_data


def write_to_file(data: str, filepath: str) -> bool:

try:
with open(filepath, ""w+"") as f:
f.write(data)
except:
raise Exception(f""Saving data to {filepath} encountered an error"")


def main():
# Read the JSON file as python dictionary
data = read_json(filename=""article.json"")

# Normalize the nested python dict
new_data = normalize_json(data=data)

# Pretty print the new dict object
print(""New dict:"", new_data)

# Generate the desired CSV data
csv_data = generate_csv_data(data=new_data)

# Save the generated CSV data to a CSV file
write_to_file(data=csv_data, filepath=""data.csv"")


if __name__ == '__main__':
main()","import json
import csv

def main():
    # Open the JSON file
    with open('/Users/soumya/Desktop/Python/JSON_to_CSV.json') as file:
        data = json.load(file)
    # Iterate through the data and print each key and value
    for key, value in data.items():
        print(key, value)

if __name__ == '__main__':
    main()

# Output:
# 1
# 2
# 3"
1816,numpy.squeeze() in Python,"# Python program explaining
# numpy.squeeze function

import numpy as geek

in_arr = geek.array([[[2, 2, 2], [2, 2, 2]]])

print (""Input array : "", in_arr)
print(""Shape of input array : "", in_arr.shape)

out_arr = geek.squeeze(in_arr)

print (""output squeezed array : "", out_arr)
print(""Shape of output array : "", out_arr.shape)","import numpy as np

x = np.array([[1, 2, 3], [4, 5, 6]])
print(x.squeeze())

""""""

# Solution

# x = np.array([[1, 2, 3], [4, 5, 6]])
# print(x.squeeze())

# Solution

# x = np.array([[1, 2, 3], [4, 5, 6]])
# print(x.squeeze())

#"
1817,Write a Python program to Program to accept the strings which contains all vowels,"# Python program to accept the strings
# which contains all the vowels


# Function for check if string
# is accepted or not
def check(string) :


string = string.lower()


# set() function convert ""aeiou""
# string into set of characters
# i.e.vowels = {'a', 'e', 'i', 'o', 'u'}
vowels = set(""aeiou"")


# set() function convert empty
# dictionary into empty set
s = set({})


# looping through each
# character of the string
for char in string :


# Check for the character is present inside
# the vowels set or not. If present, then
# add into the set s by using add method
if char in vowels :
s.add(char)
else:
pass

# check the length of set s equal to length
# of vowels set or not. If equal, string is
# accepted otherwise not
if len(s) == len(vowels) :
print(""Accepted"")
else :
print(""Not Accepted"")




# Driver code
if __name__ == ""__main__"" :

string = ""SEEquoiaL""


# calling function
check(string)","def solution(s):
    vowels = ['a', 'e', 'i', 'o', 'u']
    for i in s:
        if i in vowels:
            print(i, end="""")

solution(""aAaEeIiOoUu"")

""""""

def solution(s):
    vowels = ['a', 'e', 'i', 'o', 'u']
    for i in s:
        if i in vowels:"
1818,Write a Python program to Extract Unique values dictionary values,"# Python3 code to demonstrate working of
# Extract Unique values dictionary values
# Using set comprehension + values() + sorted()

# initializing dictionary
test_dict = {'gfg' : [5, 6, 7, 8],
'is' : [10, 11, 7, 5],
'best' : [6, 12, 10, 8],
'for' : [1, 2, 5]}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# Extract Unique values dictionary values
# Using set comprehension + values() + sorted()
res = list(sorted({ele for val in test_dict.values() for ele in val}))

# printing result
print(""The unique values list is : "" + str(res))","import collections

def unique_values(d):
    return collections.Counter(d)

print(unique_values({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}))

"""""""
1819,Write a Python program to find Tuples with positive elements in List of tuples,"# Python3 code to demonstrate working of
# Positive Tuples in List
# Using list comprehension + all()

# initializing list
test_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)]

# printing original list
print(""The original list is : "" + str(test_list))

# all() to check each element
res = [sub for sub in test_list if all(ele >= 0 for ele in sub)]

# printing result
print(""Positive elements Tuples : "" + str(res))","def find_tuples(lst):
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            if lst[i][0] > lst[j][0]:
                lst[i], lst[j] = lst[j], lst[i]
    return lst

lst = [(1, 2), (3, 4), (5, 6), (7, 8), (9"
1820,Replace NumPy array elements that doesnt satisfy the given condition in Python,"# Importing Numpy module
import numpy as np

# Creating a 1-D Numpy array
n_arr = np.array([75.42436315, 42.48558583, 60.32924763])
print(""Given array:"")
print(n_arr)

print(""\nReplace all elements of array which are greater than 50. to 15.50"")
n_arr[n_arr > 50.] = 15.50

print(""New array :\n"")
print(n_arr)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])

b = np.array([[7, 8, 9], [10, 11, 12]])

c = np.array([[13, 14, 15], [16, 17, 18]])

d = np.array([[19, 20, 21], [22, 23, 24]])

e = np.array([[25, 26, 27], [28"
1821,Write a Python Program to Replace Specific Line in File,"with open('example.txt', 'r', encoding='utf-8') as file:
data = file.readlines()

print(data)
data[1] = ""Here is my modified Line 2\n""

with open('example.txt', 'w', encoding='utf-8') as file:
file.writelines(data)","#!/usr/bin/env python

import os
import sys
import re
import time
import datetime
import subprocess
import json
import requests
import urllib.request
import urllib.parse
import urllib.error
import urllib.request
import urllib.parse
import urllib.error
import urllib.request
import urllib.error
import urllib.parse
import urllib.error
import urllib.request
import urllib."
1822,Write a Python program to Least Frequent Character in String,"# Python 3 code to demonstrate
# Least Frequent Character in String
# naive method

# initializing string
test_str = ""GeeksforGeeks""

# printing original string
print (""The original string is : "" + test_str)

# using naive method to get
# Least Frequent Character in String
all_freq = {}
for i in test_str:
if i in all_freq:
all_freq[i] += 1
else:
all_freq[i] = 1
res = min(all_freq, key = all_freq.get)

# printing result
print (""The minimum of all characters in GeeksforGeeks is : "" + str(res))","def solution(s):
    freq = {}
    for i in s:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    
    freq = sorted(freq.items(), key=lambda x: x[1])
    return freq[0][0]

print(solution(""abcabcbb""))
print(solution(""bbbbb""))
print(solution(""pwwkew""))
print("
1823,Write a Python program to print positive numbers in a list,"# Python program to print positive Numbers in a List

# list of numbers
list1 = [11, -21, 0, 45, 66, -93]

# iterating each number in list
for num in list1:

# checking condition
if num >= 0:
print(num, end = "" "")","def positive_numbers(lst):
    for i in lst:
        if i > 0:
            print(i)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
positive_numbers(lst)

""""""

def positive_numbers(lst):
    for i in lst:
        if i > 0:
            print(i)

lst = [1, 2, 3, 4, 5, 6"
1824,How to convert CSV File to PDF File using Python,"import pandas as pd
import pdfkit

# SAVE CSV TO HTML USING PANDAS
csv = 'MyCSV.csv'
html_file = csv_file[:-3]+'html'

df = pd.read_csv(csv_file, sep=',')
df.to_html(html_file)

# INSTALL wkhtmltopdf AND SET PATH IN CONFIGURATION
# These two Steps could be eliminated By Installing wkhtmltopdf -
# - and setting it's path to Environment Variables
path_wkhtmltopdf = r'D:\Softwares\wkhtmltopdf\bin\wkhtmltopdf.exe'
config = pdfkit.configuration(wkhtmltopdf=path_wkhtmltopdf)

# CONVERT HTML FILE TO PDF WITH PDFKIT
pdfkit.from_url(""MyCSV.html"", ""FinalOutput.pdf"", configuration=config)","import csv
import os

def csv_to_pdf(csv_file):
    with open(csv_file, 'r') as csvfile:
        csv_reader = csv.reader(csvfile, delimiter=',')
        next(csv_reader)
        for row in csv_reader:
            pdf_file = row[0] + '.pdf'
            pdf_file = pdf_file.replace(' ', '_')
            pdf_file = pdf_file.replace('.csv"
1825,Write a Python program to How to search for a string in text files,"string1 = 'coding'

# opening a text file
file1 = open(""geeks.txt"", ""r"")

# setting flag and index to 0
flag = 0
index = 0

# Loop through the file line by line
for line in file1:
index + = 1

# checking string is present in line or not
if string1 in line:

flag = 1
break

# checking condition for string found or not
if flag == 0:
print('String', string1 , 'Not Found')
else:
print('String', string1, 'Found In Line', index)

# closing text file
file1.close()","import re

def search(text, pattern):
    """"""
    Search for a string in text files.
    """"""
    for line in text:
        if re.search(pattern, line):
            print(line)

search(open('textfiles/textfile1.txt'), 'python')
search(open('textfiles/textfile2.txt'), 'python')
search(open('textfiles/textfile3.txt'), 'python')
search(open('textfiles/textfile4"
1826,Write a Python program to swap two elements in a list,"# Python3 program to swap elements
# at given positions


# Swap function
def swapPositions(list, pos1, pos2):

list[pos1], list[pos2] = list[pos2], list[pos1]
return list


# Driver function
List = [23, 65, 19, 90]
pos1, pos2 = 1, 3


print(swapPositions(List, pos1-1, pos2-1))","def swap(a,b):
    a,b = b,a
    return a,b

a = [1,2,3,4,5]
b = [6,7,8,9,10]

print(swap(a,b))

""""""

def swap(a,b):
    a,b = b,a
    return a,b

a = [1,2,3,4,5]
b = [6,7,8,9,10"
1827,Write a Python Program for ShellSort,"# Python program for implementation of Shell Sort

def shellSort(arr):

# Start with a big gap, then reduce the gap
n = len(arr)
gap = n/2

# Do a gapped insertion sort for this gap size.
# The first gap elements a[0..gap-1] are already in gapped
# order keep adding one more element until the entire array
# is gap sorted
while gap > 0:

for i in range(gap,n):

# add a[i] to the elements that have been gap sorted
# save a[i] in temp and make a hole at position i
temp = arr[i]

# shift earlier gap-sorted elements up until the correct
# location for a[i] is found
j = i
while j >= gap and arr[j-gap] >temp:
arr[j] = arr[j-gap]
j -= gap

# put temp (the original a[i]) in its correct location
arr[j] = temp
gap /= 2


# Driver code to test above
arr = [ 12, 34, 54, 2, 3]

n = len(arr)
print (""Array before sorting:"")
for i in range(n):
print(arr[i]),

shellSort(arr)

print (""\nArray after sorting:"")
for i in range(n):
print(arr[i]),

# This code is contributed by Mohit Kumra","def shellSort(arr):
    n = len(arr)
    gap = n // 2
    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]
            j = i
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp
        gap //= 2
    return arr

arr = [12, 11, 13, 5, 6, 7]"
1828,Write a Python program to Convert tuple to float value,"# Python3 code to demonstrate working of
# Convert tuple to float
# using join() + float() + str() + generator expression

# initialize tuple
test_tup = (4, 56)

# printing original tuple
print(""The original tuple : "" + str(test_tup))

# Convert tuple to float
# using join() + float() + str() + generator expression
res = float('.'.join(str(ele) for ele in test_tup))

# printing result
print(""The float after conversion from tuple is : "" + str(res))","def convert_tuple(tup):
    return float(tup[0])

print(convert_tuple((1, 2, 3)))

""""""

def convert_tuple(tup):
    return float(tup[0])

print(convert_tuple((1, 2, 3)))

""""""

def convert_tuple(tup):
    return float(tup[0])

print(convert_tuple((1, 2, 3)))

"""""""
1829,Write a Python program to Remove empty tuples from a list,"# Python program to remove empty tuples from a
# list of tuples function to remove empty tuples
# using list comprehension
def Remove(tuples):
tuples = [t for t in tuples if t]
return tuples

# Driver Code
tuples = [(), ('ram','15','8'), (), ('laxman', 'sita'),
('krishna', 'akbar', '45'), ('',''),()]
print(Remove(tuples))","def remove_empty_tuples(lst):
    for i in range(len(lst)):
        if lst[i] == ():
            lst.pop(i)
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(remove_empty_tuples(lst))

""""""

def remove_empty_tuples(lst):
    for i in range(len(lst)"
1830,Write a Python program to Assign Frequency to Tuples,"# Python3 code to demonstrate working of
# Assign Frequency to Tuples
# Using Counter() + items() + * operator + list comprehension
from collections import Counter

# initializing list
test_list = [(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)]

# printing original list
print(""The original list is : "" + str(test_list))

# one-liner to solve problem
# assign Frequency as last element of tuple
res = [(*key, val) for key, val in Counter(test_list).items()]

# printing results
print(""Frequency Tuple list : "" + str(res))","def frequency(t):
    return t[1]

t = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

print(frequency(t))

""""""

# Solution:

def frequency(t):
    return t[1]

t = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

print(frequency(t))

""""""

# Solution:

def frequency(t):"
1831,Maximum of two numbers in Python,"# Python program to find the
# maximum of two numbers




def maximum(a, b):

if a >= b:
return a
else:
return b

# Driver code
a = 2
b = 4
print(maximum(a, b))","def max_of_two_numbers(a, b):
    if a > b:
        return a
    else:
        return b

print(max_of_two_numbers(2, 3))
print(max_of_two_numbers(3, 4))
print(max_of_two_numbers(4, 5))

""""""

def max_of_two_numbers(a, b):
    if a > b:
        return a
    else:
        return b"
1832,Simple Diamond Pattern in Python,"# define the size (no. of columns)
# must be odd to draw proper diamond shape
size = 8


# initialize the spaces
spaces = size


# loops for iterations to create worksheet
for i in range(size//2+2):
for j in range(size):

# condition to left space
# condition to right space
# condition for making diamond
# else print *
if j < i-1:
print(' ', end="" "")
elif j > spaces:
print(' ', end="" "")
elif (i == 0 and j == 0) | (i == 0 and j == size-1):
print(' ', end="" "")
else:
print('*', end="" "")

# increase space area by decreasing spaces
spaces -= 1

# for line change
print()","def solve(n):
    if n == 1:
        return 1
    else:
        return n * solve(n-1)

print(solve(5))

""""""

# Solution

def solve(n):
    if n == 1:
        return 1
    else:
        return n * solve(n-1)

print(solve(5))"
1833,Write a Python program to Maximum frequency character in String,"# Python 3 code to demonstrate
# Maximum frequency character in String
# naive method

# initializing string
test_str = ""GeeksforGeeks""

# printing original string
print (""The original string is : "" + test_str)

# using naive method to get
# Maximum frequency character in String
all_freq = {}
for i in test_str:
if i in all_freq:
all_freq[i] += 1
else:
all_freq[i] = 1
res = max(all_freq, key = all_freq.get)

# printing result
print (""The maximum of all characters in GeeksforGeeks is : "" + str(res))","def max_freq_char(string):
    freq = {}
    for char in string:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    max_freq = max(freq.values())
    return max_freq

print(max_freq_char('abcdefghijklmnopqrstuvwxyz'))

""""""

def max_freq_char(string):"
1834,Write a Python program to check if the list contains three consecutive common numbers in Python,"# creating the array
arr = [4, 5, 5, 5, 3, 8]

# size of the list
size = len(arr)

# looping till length - 2
for i in range(size - 2):

# checking the conditions
if arr[i] == arr[i + 1] and arr[i + 1] == arr[i + 2]:

# printing the element as the
# conditions are satisfied
print(arr[i])","def check_consecutive(lst):
    for i in range(len(lst)):
        if lst[i] == lst[i+1] and lst[i] == lst[i+2]:
            return True
    return False

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(check_consecutive(lst))

""""""

# Solution 1

def check_"
1835,Visualize data from CSV file in Python,"import matplotlib.pyplot as plt
import csv

x = []
y = []

with open('biostats.csv','r') as csvfile:
plots = csv.reader(csvfile, delimiter = ',')

for row in plots:
x.append(row[0])
y.append(int(row[2]))

plt.bar(x, y, color = 'g', width = 0.72, label = ""Age"")
plt.xlabel('Names')
plt.ylabel('Ages')
plt.title('Ages of different persons')
plt.legend()
plt.show()","import csv

with open('data.csv', newline='') as f:
    reader = csv.reader(f)
    file_data = list(reader)

# To Do: Complete the solution so that it returns a list of lists.
# Hint: Use the list function to create a list of lists.
# Hint: Create a new list called new_list that has the first row (headers) of the file_data list.
# Hint: Add a print statement at the end of the solution to print"
1836,Write a Python Dictionary to find mirror characters in a string,"# function to mirror characters of a string


def mirrorChars(input,k):


# create dictionary
original = 'abcdefghijklmnopqrstuvwxyz'
reverse = 'zyxwvutsrqponmlkjihgfedcba'
dictChars = dict(zip(original,reverse))


# separate out string after length k to change
# characters in mirror
prefix = input[0:k-1]
suffix = input[k-1:]
mirror = ''


# change into mirror
for i in range(0,len(suffix)):
mirror = mirror + dictChars[suffix[i]]


# concat prefix and mirrored part
print (prefix+mirror)

# Driver program
if __name__ == ""__main__"":
input = 'paradox'
k = 3
mirrorChars(input,k)","def mirror_characters(string):
    mirror_dict = {}
    for char in string:
        if char in mirror_dict:
            mirror_dict[char] += 1
        else:
            mirror_dict[char] = 1
    return mirror_dict

print(mirror_characters(""abcdefghijklmnopqrstuvwxyz""))

""""""

def mirror_characters(string):
    mirror_dict = {}
    for char in string:"
1837,Write a Python program to find middle of a linked list using one traversal,"# Python 3 program to find the middle of a
# given linked list

# Node class
class Node:

# Function to initialise the node object
def __init__(self, data):
self.data = data
self.next = None

class LinkedList:

def __init__(self):
self.head = None

def push(self, new_data):
new_node = Node(new_data)
new_node.next = self.head
self.head = new_node

# Function to get the middle of
# the linked list
def printMiddle(self):
slow_ptr = self.head
fast_ptr = self.head

if self.head is not None:
while (fast_ptr is not None and fast_ptr.next is not None):
fast_ptr = fast_ptr.next.next
slow_ptr = slow_ptr.next
print(""The middle element is: "", slow_ptr.data)

# Driver code
list1 = LinkedList()
list1.push(5)
list1.push(4)
list1.push(2)
list1.push(3)
list1.push(1)
list1.printMiddle()","def middle(head):
    slow = head
    fast = head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
    return slow

head = [1, 2, 3, 4, 5]

print(middle(head))

# Output:
# 5
# 2
# 3
# 4
# 5

# Explanation:
# The middle element is 2.
# The middle element is the middle element.
#"
1838,How to check if a string starts with a substring using regex in Python,"# import library
import re

# define a function
def find(string, sample) :

# check substring present
# in a string or not
if (sample in string):

y = ""^"" + sample

# check if string starts
# with the substring
x = re.search(y, string)

if x :
print(""string starts with the given substring"")

else :
print(""string doesn't start with the given substring"")

else :
print(""entered string isn't a substring"")


# Driver code
string = ""geeks for geeks makes learning fun""
sample = ""geeks""

# function call
find(string, sample)

sample = ""makes""

# function call
find(string, sample)","import re

def is_start_with_substring(str, sub):
    return re.search(sub, str)

print(is_start_with_substring(""Python is a programming language"", ""P""))
print(is_start_with_substring(""Python is a programming language"", ""P""))
print(is_start_with_substring(""Python is a programming language"", ""P""))
print(is_start_with_substring(""Python is a programming language"", ""P"
1839,Write a Python program to Replace index elements with elements in Other List,"# Python3 code to demonstrate
# Replace index elements with elements in Other List
# using list comprehension

# Initializing lists
test_list1 = ['Gfg', 'is', 'best']
test_list2 = [0, 1, 2, 1, 0, 0, 0, 2, 1, 1, 2, 0]

# printing original lists
print(""The original list 1 is : "" + str(test_list1))
print(""The original list 2 is : "" + str(test_list2))

# Replace index elements with elements in Other List
# using list comprehension
res = [test_list1[idx] for idx in test_list2]

# printing result
print (""The lists after index elements replacements is : "" + str(res))","import sys

def replace_index(list, index, value):
    list[index] = value

def main():
    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    replace_index(list, 2, 10)
    print(list)

if __name__ == ""__main__"":
    main()"
1840,Dumping queue into list or array in Python,"# Python program to
# demonstrate queue implementation
# using collections.dequeue

from collections import deque

# Initializing a queue
q = deque()

# Adding elements to a queue
q.append('a')
q.append('b')
q.append('c')

# display the queue
print(""Initial queue"")
print(q,""\n"")

# display the type
print(type(q))","def solution(q):
    answer = []
    for i in range(len(q)):
        answer.append(q[i][0])
    return answer

""""""

def solution(q):
    answer = []
    for i in range(len(q)):
        answer.append(q[i][0])
    return answer

def solution(q):
    answer = []
    for i in range(len(q)):
        answer.append(q[i][0])"
1841,Write a Python program to Exceptional Split in String,"# Python3 code to demonstrate working of
# Exceptional Split in String
# Using loop + split()

# initializing string
test_str = ""gfg, is, (best, for), geeks""

# printing original string
print(""The original string is : "" + test_str)

# Exceptional Split in String
# Using loop + split()
temp = ''
res = []
check = 0
for ele in test_str:
if ele == '(':
check += 1
elif ele == ')':
check -= 1
if ele == ', ' and check == 0:
if temp.strip():
res.append(temp)
temp = ''
else:
temp += ele
if temp.strip():
res.append(temp)

# printing result
print(""The string after exceptional split : "" + str(res))","def except_split(s):
    try:
        return s.split()
    except ValueError:
        return s

print(except_split(""abcdefghi""))

""""""

def except_split(s):
    try:
        return s.split()
    except ValueError:
        return s

print(except_split(""abcdefghi""))

""""""

def except_split(s):
    try:
        return s.split()
    except ValueError:"
1842,Write a Python Lambda Functions,"# Python program to demonstrate
# lambda functions




string ='GeeksforGeeks'


# lambda returns a function object
print(lambda string : string)","def solution(n):
    return n*n

Write a Python function that takes an integer n and returns the number of primes below n.

For example, if n = 2, it should return 2, since 2 is the only number for which the function returns true.

def solution(n):
    return sum(filter(lambda x: x%2==0, range(1, n+1)))

""""""

def solution(n):
    return sum(filter(lambda x: x%2==0, range(1, n"
1843,Getting Unique values from a column in Pandas dataframe in Python,"# import pandas as pd
import pandas as pd

gapminder_csv_url ='http://bit.ly/2cLzoxH'
# load the data with pd.read_csv
record = pd.read_csv(gapminder_csv_url)

record.head()","import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randn(5, 3), columns=['a', 'b', 'c'])
print(df)

# Solution:

# df = pd.DataFrame(np.random.randn(5, 3), columns=['a', 'b', 'c'])
# print(df)
#
# # Solution:
#
# df = pd.DataFrame(np"
1844,Write a Python program to Find all duplicate characters in string,"from collections import Counter

def find_dup_char(input):

# now create dictionary using counter method
# which will have strings as key and their
# frequencies as value
WC = Counter(input)
j = -1


# Finding no. of occurrence of a character
# and get the index of it.
for i in WC.values():
j = j + 1
if( i > 1 ):
print WC.keys()[j],

# Driver program
if __name__ == ""__main__"":
input = 'geeksforgeeks'
find_dup_char(input)","def find_duplicate(string):
    duplicate = []
    for i in string:
        if i in duplicate:
            duplicate.remove(i)
        else:
            duplicate.append(i)
    return duplicate

print(find_duplicate(""abcdefg""))

""""""

def find_duplicate(string):
    duplicate = []
    for i in string:
        if i in duplicate:
            duplicate.remove(i)"
1845,How to get the n-largest values of an array using NumPy in Python,"# import library
import numpy as np

# create numpy 1d-array
arr = np.array([2, 0, 1, 5,
4, 1, 9])

print(""Given array:"", arr)

# sort an array in
# ascending order

# np.argsort() return
# array of indices for
# sorted array
sorted_index_array = np.argsort(arr)

# sorted array
sorted_array = arr[sorted_index_array]

print(""Sorted array:"", sorted_array)

# we want 1 largest value
n = 1

# we are using negative
# indexing concept

# take n largest value
rslt = sorted_array[-n : ]

# show the output
print(""{} largest value:"".format(n),
rslt[0])","import numpy as np

# Create an array of size 10.
a = np.random.randint(0, 100, size=10)

# Create an array of size 5.
b = np.random.randint(0, 100, size=5)

# Create an array of size 10.
c = np.random.randint(0, 100, size=10)

# Create an array of size 5.
d = np.random.randint(0, 100"
1846,Scrape IMDB movie rating and details using Python,"from bs4 import BeautifulSoup
import requests
import re","import requests
from bs4 import BeautifulSoup

url = ""https://www.imdb.com/title/tt0149096/reviews""

r = requests.get(url)
soup = BeautifulSoup(r.text, 'html.parser')

# print(soup.prettify())

# print(soup.find('div', class_='lister-list'))

# print(soup.find('div', class_='lister-list'))"
1847,Write a Python program to Merging two Dictionaries,"# Python code to merge dict using update() method
def Merge(dict1, dict2):
return(dict2.update(dict1))

# Driver code
dict1 = {'a': 10, 'b': 8}
dict2 = {'d': 6, 'c': 4}


# This return None
print(Merge(dict1, dict2))


# changes made in dict2
print(dict2)","def merge_dict(dict1, dict2):
    dict1.update(dict2)
    return dict1

# Take two dictionaries as input and print the result
dict1 = {'a': 1, 'b': 2, 'c': 3}
dict2 = {'d': 4, 'e': 5, 'f': 6}
print(merge_dict(dict1, dict2))

# Take two dictionaries as input and print the result
dict1 = {'a': 1, '"
1848,Write a Python Selenium  Find element by text,"<!DOCTYPE html>
<html>
<body>
<button type= button >Geeks For Geeks</button>
</body>
<html>","import selenium
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import"
1849,Write a Python program to Key with maximum unique values,"# Python3 code to demonstrate working of
# Key with maximum unique values
# Using loop

# initializing dictionary
test_dict = {""Gfg"" : [5, 7, 5, 4, 5],
""is"" : [6, 7, 4, 3, 3],
""Best"" : [9, 9, 6, 5, 5]}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

max_val = 0
max_key = None
for sub in test_dict:

# test for length using len()
# converted to set for duplicates removal
if len(set(test_dict[sub])) > max_val:
max_val = len(set(test_dict[sub]))
max_key = sub

# printing result
print(""Key with maximum unique values : "" + str(max_key))","def max_unique(arr):
    max_val = 0
    for i in range(len(arr)):
        if arr[i] > max_val:
            max_val = arr[i]
    return max_val

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_unique(arr))

""""""

def max_unique(arr):
    max_val = 0
    for i in range(len(arr)"
1850,Convert covariance matrix to correlation matrix using Python,"import numpy as np
import pandas as pd


# loading in the iris dataset for demo purposes


dataset = pd.read_csv(""iris.csv"")


dataset.head()","import numpy as np
import matplotlib.pyplot as plt

# Load data
data = np.loadtxt('covariance.txt', delimiter=',')

# Create a correlation matrix
corr = np.corrcoef(data[0], data[1])

# Plot the correlation matrix
plt.imshow(corr, cmap='gray')
plt.colorbar()
plt.show()

# Create a correlation matrix
corr = np.corrco"
1851,How to Remove rows in Numpy array that contains non-numeric values in Python,"# Importing Numpy module
import numpy as np

# Creating 2X3 2-D Numpy array
n_arr = np.array([[10.5, 22.5, 3.8],
[41, np.nan, np.nan]])

print(""Given array:"")
print(n_arr)

print(""\nRemove all rows containing non-numeric elements"")
print(n_arr[~np.isnan(n_arr).any(axis=1)])","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

a.shape = (3, 4)

a.dtype = 'int64'

a.sum()

a.sum(axis=0)

a.sum(axis=1)

a.sum(axis=1, dtype='int64')"
1852,How to create filename containing date or time in Python,"# import module
from datetime import datetime

# get current date and time
current_datetime = datetime.now()
print(""Current date & time : "", current_datetime)

# convert datetime obj to string
str_current_datetime = str(current_datetime)

# create a file object along with extension
file_name = str_current_datetime+"".txt""
file = open(file_name, 'w')

print(""File created : "", file.name)
file.close()","import datetime

def solution(files):
    answer = []
    for file in files:
        with open(file, 'r') as f:
            date = f.readline().split()
            time = f.readline().split()
            date = datetime.datetime.strptime(date[0], '%Y-%m-%d %H:%M:%S')
            time = datetime.datetime.strptime(time[0], '%H:%M:"
1853,Write a Python program to Intersection of two lists,"# Python program to illustrate the intersection
# of two lists in most simple way
def intersection(lst1, lst2):
lst3 = [value for value in lst1 if value in lst2]
return lst3


# Driver Code
lst1 = [4, 9, 1, 17, 11, 26, 28, 54, 69]
lst2 = [9, 9, 74, 21, 45, 11, 63, 28, 26]
print(intersection(lst1, lst2))","def intersection(l1, l2):
    l1.sort()
    l2.sort()
    i = 0
    j = 0
    while i < len(l1) and j < len(l2):
        if l1[i] < l2[j]:
            i += 1
        elif l1[i] > l2[j]:
            j += 1
        else:
            return l1[i], l2[j]
    return l1[i], l2["
1854,Write a Python program to Convert Matrix to Custom Tuple Matrix,"# Python3 code to demonstrate working of
# Convert Matrix to Custom Tuple Matrix
# Using zip() + loop

# initializing lists
test_list = [[4, 5, 6], [6, 7, 3], [1, 3, 4]]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing List elements
add_list = ['Gfg', 'is', 'best']

# Convert Matrix to Custom Tuple Matrix
# Using zip() + loop
res = []
for idx, ele in zip(add_list, test_list):
for e in ele:
res.append((idx, e))

# printing result
print(""Matrix after conversion : "" + str(res))","def matrix_to_tuple(matrix):
    """"""Convert Matrix to tuple""""""
    rows = len(matrix)
    if rows == 0:
        raise ValueError(""matrix must have at least one row"")
    cols = len(matrix[0])
    if cols == 0:
        raise ValueError(""matrix must have at least one column"")
    result = []
    for row in range(rows):
        result.append([])
        for col in range(cols"
1855,How to convert a Python datetime.datetime to excel serial date number,"# Python3 code to illustrate the conversion of
# datetime.datetime to excel serial date number


# Importing datetime module
import datetime


# Calling the now() function to return
# current date and time
current_datetime = datetime.datetime.now()


# Calling the strftime() function to convert
# the above current datetime into excel serial date number
print(current_datetime.strftime('%x %X'))","import datetime

def convert_datetime(dt):
    return dt.strftime('%Y-%m-%d %H:%M:%S')

dt = datetime.datetime(2021, 1, 1, 12, 30, 0)
print(convert_datetime(dt))

""""""

# Solution 1

import datetime

def convert_datetime(dt):
    return dt.strftime('%Y-%m-%d"
1856,How to round elements of the NumPy array to the nearest integer in Python,"import numpy as n

# create array
y = n.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7])
print(""Original array:"", end="" "")
print(y)

# rount to nearest integer
y = n.rint(y)
print(""After rounding off:"", end="" "")
print(y)","import numpy as np

a = np.array([1, 2, 3, 4, 5])

rounded = np.around(a)

rounded[rounded == 5] = 5

rounded[rounded == 4] = 3

rounded[rounded == 3] = 2

rounded[rounded == 2] = 1

rounded[rounded == 1] = 0

print(rounded)

""""""

# Solution

import numpy as np

a = np.array([1,"
1857,numpy string operations | find() function in Python,"# Python program explaining
# numpy.char.find() method

# importing numpy as geek
import numpy as geek

# input arrays
in_arr = geek.array(['aAaAaA', 'baA', 'abBABba'])
print (""Input array : "", in_arr)

# output arrays
out_arr = geek.char.find(in_arr, sub ='A')
print (""Output array: "", out_arr)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)
print(a.ndim)
print(a.shape)
print(a.size)
print(a.dtype)
print(a.itemsize)
print(a.nbytes)

# a = np.array([[1, 2, 3], [4, 5, 6]])
# print(a)
# print(a.ndim)"
1858,numpy string operations | join() function in Python,"# Python program explaining
# numpy.core.defchararray.join() method

# importing numpy
import numpy as geek

# input array
in_arr = geek.array(['Python', 'Numpy', 'Pandas'])
print (""Input original array : "", in_arr)

# creating the separator
sep = geek.array(['-', '+', '*'])


out_arr = geek.core.defchararray.join(sep, in_arr)
print (""Output joined array: "", out_arr)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(np.concatenate((a, b), axis=1))

# Output:
# [[1 2 3 4 5 6 7 8 9 10 11 12]
#  [4 5 6 7 8 9 10 11 12]]

# Output:
# [[1 2 3 4 5 6"
1859,numpy.negative() in Python,"# Python program explaining
# numpy.negative() function

import numpy as geek
in_num = 10

print (""Input number : "", in_num)

out_num = geek.negative(in_num)
print (""negative of input number : "", out_num)","import numpy as np

x = np.array([[1, 2, 3], [4, 5, 6]])
y = np.array([[-1, 2, -3], [4, 5, 6]])

print(np.negative(x))
print(np.negative(y))

# Output:
[[-1 -1 -1]
 [-1 -1 -1]
 [-1 -1 -1]]

# Output:
[[-1 -1]
 [-1 -1]
 [-"
1860,Flatten a Matrix in Python using NumPy,"# importing numpy as np
import numpy as np

# declare matrix with np
gfg = np.array([[2, 3], [4, 5]])

# using array.flatten() method
flat_gfg = gfg.flatten()
print(flat_gfg)","import numpy as np

# Create a 2x2 matrix
A = np.array([[1, 2], [3, 4]])

# Flatten the matrix
print(A.flatten())

# Create a 3x3 matrix
B = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Flatten the matrix
print(B.flatten())

# Create a 4x4 matrix
C = np.array([[1,"
1861,Write a Python Program for Binary Search (Recursive and Iterative),"# Python 3 program for recursive binary search.
# Modifications needed for the older Python 2 are found in comments.


# Returns index of x in arr if present, else -1
def binary_search(arr, low, high, x):


# Check base case
if high >= low:


mid = (high + low) // 2


# If element is present at the middle itself
if arr[mid] == x:
return mid


# If element is smaller than mid, then it can only
# be present in left subarray
elif arr[mid] > x:
return binary_search(arr, low, mid - 1, x)


# Else the element can only be present in right subarray
else:
return binary_search(arr, mid + 1, high, x)


else:
# Element is not present in the array
return -1


# Test array
arr = [ 2, 3, 4, 10, 40 ]
x = 10


# Function call
result = binary_search(arr, 0, len(arr)-1, x)


if result != -1:
print(""Element is present at index"", str(result))
else:
print(""Element is not present in array"")","def binary_search(arr, target):
    if len(arr) == 0:
        return -1
    else:
        mid = len(arr) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] > target:
            return binary_search(arr[:mid], target)
        else:
            return binary_search(arr[mid + 1:], target)

arr = [1, 2, 3, 4, 5, 6,"
1862,Scraping Reddit with Python and BeautifulSoup,"# import module
import requests
from bs4 import BeautifulSoup","import requests
from bs4 import BeautifulSoup

url = ""https://www.reddit.com/r/Python/comments/2qjvx/python_solution_to_scrape_the_reddit_comments_in_python/""

r = requests.get(url)

soup = BeautifulSoup(r.text, 'html.parser')

comments = soup.find_all('div', class_='comments-list-item')

for comment in comments:
    print(comment"
1863,Write a Python program to get all unique combinations of two Lists,"# python program to demonstrate
# unique combination of two lists
# using zip() and permutation of itertools


# import itertools package
import itertools
from itertools import permutations


# initialize lists
list_1 = [""a"", ""b"", ""c"",""d""]
list_2 = [1,4,9]


# create empty list to store the
# combinations
unique_combinations = []


# Getting all permutations of list_1
# with length of list_2
permut = itertools.permutations(list_1, len(list_2))


# zip() is called to pair each permutation
# and shorter list element into combination
for comb in permut:
zipped = zip(comb, list_2)
unique_combinations.append(list(zipped))


# printing unique_combination list
print(unique_combinations)","def get_unique_combination(l1, l2):
    l1.sort()
    l2.sort()
    result = []
    for i in range(len(l1)):
        for j in range(len(l2)):
            if l1[i] == l2[j]:
                result.append([l1[i], l2[j]])
    return result

l1 = [1, 2, 3, 4, 5]
l2 = [1"
1864,Create a list from rows in Pandas dataframe in Python,"# importing pandas as pd
import pandas as pd

# Create the dataframe
df = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/11'],
'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],
'Cost':[10000, 5000, 15000, 2000]})

# Print the dataframe
print(df)","import pandas as pd

df = pd.read_csv(""C:/Users/DELL/Downloads/data/data.csv"")

# Create a list from rows in Pandas dataframe in Python

# Create a list from rows in Pandas dataframe in Python

# Create a list from rows in Pandas dataframe in Python

# Create a list from rows in Pandas dataframe in Python

# Create a list from rows in Pandas dataframe in Python

# Create a list from rows"
1865,Write a Python program to Word location in String,"# Python3 code to demonstrate working of
# Word location in String
# Using findall() + index()
import re

# initializing string
test_str = 'geeksforgeeks is best for geeks'

# printing original string
print(""The original string is : "" + test_str)

# initializing word
wrd = 'best'

# Word location in String
# Using findall() + index()
test_str = test_str.split()
res = -1
for idx in test_str:
if len(re.findall(wrd, idx)) > 0:
res = test_str.index(idx) + 1

# printing result
print(""The location of word is : "" + str(res))","def solution(word):
    word = word.lower()
    word = word.replace(' ', '')
    word = word.replace('.', '')
    word = word.replace(',', '')
    word = word.replace('!', '')
    word = word.replace('?', '')
    word = word.replace('-', '')
    word = word.replace('.', '')
    word = word.replace(':', '')
    word = word.replace(';', ''"
1866,How to count number of instances of a class in Python,"# code
class geeks:

# this is used to print the number
# of instances of a class
counter = 0

# constructor of geeks class
def __init__(self):

# increment
geeks.counter += 1


# object or instance of geeks class
g1 = geeks()
g2 = geeks()
g3 = geeks()
print(geeks.counter)","class Solution:
    def countInstance(self, arr, x):
        count = 0
        for i in arr:
            if i == x:
                count += 1
        return count

# { 
#  Driver Code Starts
# Initial Template for Python 3

# Contributed by : Nagendra Jha

# } Driver Code Ends
# User function Template for Python 3

# Function to check if x is present in arr
def isPresent(arr, x):
    for i in arr:"
1867,Write a Python program to check whether the string is Symmetrical or Palindrome,"# Python program to demonstrate
# symmetry and palindrome of the
# string




# Function to check whether the
# string is palindrome or not
def palindrome(a):

# finding the mid, start
# and last index of the string
mid = (len(a)-1)//2 #you can remove the -1 or you add <= sign in line 21
start = 0 #so that you can compare the middle elements also.
last = len(a)-1
flag = 0


# A loop till the mid of the
# string
while(start <= mid):

# comparing letters from right
# from the letters from left
if (a[start]== a[last]):

start += 1
last -= 1

else:
flag = 1
break;

# Checking the flag variable to
# check if the string is palindrome
# or not
if flag == 0:
print(""The entered string is palindrome"")
else:
print(""The entered string is not palindrome"")

# Function to check whether the
# string is symmetrical or not
def symmetry(a):

n = len(a)
flag = 0

# Check if the string's length
# is odd or even
if n%2:
mid = n//2 +1
else:
mid = n//2

start1 = 0
start2 = mid

while(start1 < mid and start2 < n):

if (a[start1]== a[start2]):
start1 = start1 + 1
start2 = start2 + 1
else:
flag = 1
break

# Checking the flag variable to
# check if the string is symmetrical
# or not
if flag == 0:
print(""The entered string is symmetrical"")
else:
print(""The entered string is not symmetrical"")

# Driver code
string = 'amaama'
palindrome(string)
symmetry(string)","def is_palindrome(s):
    if len(s) == 1:
        return True
    if s[0] == s[-1]:
        return True
    else:
        return False

print(is_palindrome(""A man, a plan, a canal: Panama""))
print(is_palindrome(""race a car""))

""""""

# Solution 1

def is_palindrome(s):
    if len(s) == 1:"
1868,LRU Cache in Python using OrderedDict,"from collections import OrderedDict


class LRUCache:


# initialising capacity
def __init__(self, capacity: int):
self.cache = OrderedDict()
self.capacity = capacity


# we return the value of the key
# that is queried in O(1) and return -1 if we
# don't find the key in out dict / cache.
# And also move the key to the end
# to show that it was recently used.
def get(self, key: int) -> int:
if key not in self.cache:
return -1
else:
self.cache.move_to_end(key)
return self.cache[key]


# first, we add / update the key by conventional methods.
# And also move the key to the end to show that it was recently used.
# But here we will also check whether the length of our
# ordered dictionary has exceeded our capacity,
# If so we remove the first key (least recently used)
def put(self, key: int, value: int) -> None:
self.cache[key] = value
self.cache.move_to_end(key)
if len(self.cache) > self.capacity:
self.cache.popitem(last = False)




# RUNNER
# initializing our cache with the capacity of 2
cache = LRUCache(2)




cache.put(1, 1)
print(cache.cache)
cache.put(2, 2)
print(cache.cache)
cache.get(1)
print(cache.cache)
cache.put(3, 3)
print(cache.cache)
cache.get(2)
print(cache.cache)
cache.put(4, 4)
print(cache.cache)
cache.get(1)
print(cache.cache)
cache.get(3)
print(cache.cache)
cache.get(4)
print(cache.cache)


#This code was contributed by Sachin Negi","def LRU(cache, capacity):
    if cache.get(capacity) is not None:
        return cache[capacity]
    else:
        return None

cache = OrderedDict()
cache[1] = 1
cache[2] = 2
cache[3] = 3
cache[4] = 4
cache[5] = 5
cache[6] = 6
cache[7] = 7
cache[8] = 8
cache[9] = 9
cache[10] = 10
cache["
1869,Write a Python Program to find minimum number of rotations to obtain actual string,"def findRotations(str1, str2):

# To count left rotations
# of string
x = 0

# To count right rotations
# of string
y = 0
m = str1

while True:

# left rotating the string
m = m[len(m)-1] + m[:len(m)-1]

# checking if rotated and
# actual string are equal.
if(m == str2):
x += 1
break

else:
x += 1
if x > len(str2) :
break

while True:

# right rotating the string
str1 = str1[1:len(str1)]+str1[0]

# checking if rotated and actual
# string are equal.
if(str1 == str2):
y += 1
break

else:
y += 1
if y > len(str2):
break

if x < len(str2):

# printing the minimum
# number of rotations.
print(min(x,y))

else:
print(""given strings are not of same kind"")

# Driver code
findRotations('sgeek', 'geeks')","def solution(s):
    rotations = 0
    for i in range(len(s)):
        rotations += s[i]
    return rotations

print(solution(""abcdefghijklmnopqrstuvwxyz""))

""""""

def solution(s):
    rotations = 0
    for i in range(len(s)):
        rotations += s[i]
    return rotations

print(solution(""abcdefghijkl"
1870,Write a Python program to Ways to remove multiple empty spaces from string List,"# Python3 code to demonstrate working of
# Remove multiple empty spaces from string List
# Using loop + strip()

# initializing list
test_list = ['gfg', ' ', ' ', 'is', ' ', 'best']

# printing original list
print(""The original list is : "" + str(test_list))

# Remove multiple empty spaces from string List
# Using loop + strip()
res = []
for ele in test_list:
if ele.strip():
res.append(ele)

# printing result
print(""List after filtering non-empty strings : "" + str(res))","def remove_multiple_empty_spaces(list):
    for i in range(len(list)):
        if list[i] == "" "":
            list.remove(list[i])
    return list

print(remove_multiple_empty_spaces([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def remove_multiple_empty_spaces(list):
    for i in range(len(list)):"
1871,How to Change a Dictionary Into a Class in Python,"# Turns a dictionary into a class
class Dict2Class(object):

def __init__(self, my_dict):

for key in my_dict:
setattr(self, key, my_dict[key])

# Driver Code
if __name__ == ""__main__"":

# Creating the dictionary
my_dict = {""Name"": ""Geeks"",
""Rank"": ""1223"",
""Subject"": ""Python""}

result = Dict2Class(my_dict)

# printing the result
print(""After Converting Dictionary to Class : "")
print(result.Name, result.Rank, result.Subject)
print(type(result))","def change_dict(d):
    for key, value in d.items():
        d[key] = value + 1
    return d

d = {'a': 1, 'b': 2, 'c': 3}
print(change_dict(d))

""""""

# Solution

def change_dict(d):
    for key, value in d.items():
        d[key] = value + 1
    return d

d = {'a': 1, 'b': 2, '"
1872,How to change border color in Tkinter widget in Python,"# import tkinter
from tkinter import *

# Create Tk object
window = Tk()

# Set the window title
window.title('GFG')

# Create a Frame for border
border_color = Frame(window, background=""red"")

# Label Widget inside the Frame
label = Label(border_color, text=""This is a Label widget"", bd=0)

# Place the widgets with border Frame
label.pack(padx=1, pady=1)
border_color.pack(padx=40, pady=40)

window.mainloop()","import tkinter as tk

def change_border(event):
    print(""Border changed"")
    
    # Create a Tkinter window
    window = tk.Tk()
    
    # Create a Tkinter canvas
    canvas = tk.Canvas(window, width=200, height=200)
    canvas.pack()
    
    # Create a Tkinter Label
    label = tk.Label(window, text=""Hello World"")
    label.pack()"
1873,Write a Python program to Remove after substring in String,"# Python3 code to demonstrate working of
# Remove after substring in String
# Using index() + len() + slicing

# initializing strings
test_str = 'geeksforgeeks is best for geeks'

# printing original string
print(""The original string is : "" + str(test_str))

# initializing sub string
sub_str = ""best""

# slicing off after length computation
res = test_str[:test_str.index(sub_str) + len(sub_str)]

# printing result
print(""The string after removal : "" + str(res))","def remove_after(s, substring):
    return s.replace(substring, """")

print(remove_after(""abcdefg"", ""e""))

""""""

def remove_after(s, substring):
    return s.replace(substring, """")

print(remove_after(""abcdefg"", ""e""))"
1874,Create Address Book in Write a Python program to Using Tkinter,"# Import Module
from tkinter import *

# Create Object
root = Tk()

# Set geometry
root.geometry('400x500')

# Add Buttons, Label, ListBox
Name = StringVar()
Number = StringVar()

frame = Frame()
frame.pack(pady=10)

frame1 = Frame()
frame1.pack()

frame2 = Frame()
frame2.pack(pady=10)

Label(frame, text = 'Name', font='arial 12 bold').pack(side=LEFT)
Entry(frame, textvariable = Name,width=50).pack()

Label(frame1, text = 'Phone No.', font='arial 12 bold').pack(side=LEFT)
Entry(frame1, textvariable = Number,width=50).pack()

Label(frame2, text = 'Address', font='arial 12 bold').pack(side=LEFT)
address = Text(frame2,width=37,height=10)
address.pack()

Button(root,text=""Add"",font=""arial 12 bold"").place(x= 100, y=270)
Button(root,text=""View"",font=""arial 12 bold"").place(x= 100, y=310)
Button(root,text=""Delete"",font=""arial 12 bold"").place(x= 100, y=350)
Button(root,text=""Reset"",font=""arial 12 bold"").place(x= 100, y=390)

scroll_bar = Scrollbar(root, orient=VERTICAL)
select = Listbox(root, yscrollcommand=scroll_bar.set, height=12)
scroll_bar.config (command=select.yview)
scroll_bar.pack(side=RIGHT, fill=Y)
select.place(x=200,y=260)

# Execute Tkinter
root.mainloop()","1. Create a GUI window
2. Create a Tkinter window
3. Create a Label widget to display the address
4. Create a Entry widget to enter the address
5. Create a Button widget to enter the address
6. Create a Label widget to display the name
7. Create a Entry widget to enter the name
8. Create a Button widget to enter the name
9. Create a Label widget to display the phone number
10. Create a Entry widget to enter the phone number
11. Create a Button widget to enter the"
1875,Write a Python program to Remove Consecutive K element records,"# Python3 code to demonstrate working of
# Remove Consecutive K element records
# Using zip() + list comprehension

# initializing list
test_list = [(4, 5, 6, 3), (5, 6, 6, 9), (1, 3, 5, 6), (6, 6, 7, 8)]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing K
K = 6

# Remove Consecutive K element records
# Using zip() + list comprehension
res = [idx for idx in test_list if (K, K) not in zip(idx, idx[1:])]

# printing result
print(""The records after removal : "" + str(res))","def remove_consecutive_k_elements(arr, k):
    # Write your code here
    if len(arr) < k:
        return arr
    else:
        return remove_consecutive_k_elements(arr[1:], k) + [arr[0]] + remove_consecutive_k_elements(arr[1:], k)

# Driver Code
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
1876,Find the size of a Set in Python,"import sys

# sample Sets
Set1 = {""A"", 1, ""B"", 2, ""C"", 3}
Set2 = {""Geek1"", ""Raju"", ""Geek2"", ""Nikhil"", ""Geek3"", ""Deepanshu""}
Set3 = {(1, ""Lion""), ( 2, ""Tiger""), (3, ""Fox"")}

# print the sizes of sample Sets
print(""Size of Set1: "" + str(sys.getsizeof(Set1)) + ""bytes"")
print(""Size of Set2: "" + str(sys.getsizeof(Set2)) + ""bytes"")
print(""Size of Set3: "" + str(sys.getsizeof(Set3)) + ""bytes"")","def size(s):
    return len(s)

print(size('abcde'))

""""""

# Solution 1

def size(s):
    return len(s)

print(size('abcde'))

# Solution 2

def size(s):
    return len(s)

print(size('abcde'))

# Solution 3

def size(s):
    return len(s)

print(size('abcde'))

# Solution 4

def"
1877,Adding and Subtracting Matrices in Python,"# importing numpy as np
import numpy as np


# creating first matrix
A = np.array([[1, 2], [3, 4]])

# creating second matrix
B = np.array([[4, 5], [6, 7]])

print(""Printing elements of first matrix"")
print(A)
print(""Printing elements of second matrix"")
print(B)

# adding two matrix
print(""Addition of two matrix"")
print(np.add(A, B))","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
B = np.array([[10, 11, 12], [13, 14, 15], [16, 17, 18]])

print(A)
print(B)

print(A-B)
print(A+B)

# Output:
# [[1 2 3]
#  [4 5 6]
#  [7 8 9]]"
1878,Set update() in Python to do union of n arrays,"# Function to combine n arrays

def combineAll(input):

# cast first array as set and assign it
# to variable named as result
result = set(input[0])

# now traverse remaining list of arrays
# and take it's update with result variable
for array in input[1:]:
result.update(array)

return list(result)

# Driver program
if __name__ == ""__main__"":
input = [[1, 2, 2, 4, 3, 6],
[5, 1, 3, 4],
[9, 5, 7, 1],
[2, 4, 1, 3]]
print (combineAll(input))","def union(a, b):
    return [a[0] + b[0], a[1] + b[1]]

def intersection(a, b):
    return [min(a[0], b[0]), max(a[1], b[1])]

def difference(a, b):
    return [a[0] - b[0], a[1] - b[1]]

def main():
    n = int(input())
    arr = []
    for i in"
1879,Compute pearson product-moment correlation coefficients of two given NumPy arrays in Python,"# import library
import numpy as np

# create numpy 1d-array
array1 = np.array([0, 1, 2])
array2 = np.array([3, 4, 5])

# pearson product-moment correlation
# coefficients of the arrays
rslt = np.corrcoef(array1, array2)

print(rslt)","import numpy as np

a = np.array([1, 2, 3, 4])
b = np.array([1, 2, 3, 4])

print(np.corrcoef(a, b))

""""""

# %%
""""""

# %%
""""""

# %%
""""""

# %%
""""""

# %%
""""""

# %%
""""""

# %%
""""""

# %%
""""""

# %%
"""""""
1880,Write a Python program to Remove all duplicates words from a given sentence,"from collections import Counter


def remov_duplicates(input):


# split input string separated by space
input = input.split("" "")


# joins two adjacent elements in iterable way
for i in range(0, len(input)):
input[i] = """".join(input[i])


# now create dictionary using counter method
# which will have strings as key and their
# frequencies as value
UniqW = Counter(input)


# joins two adjacent elements in iterable way
s = "" "".join(UniqW.keys())
print (s)


# Driver program
if __name__ == ""__main__"":
input = 'Python is great and Java is also great'
remov_duplicates(input)","s = ""this is a sentence""

s = ""this is a sentence""

s = ""this is a sentence""

s = ""this is a sentence""

s = ""this is a sentence""

s = ""this is a sentence""

s = ""this is a sentence""

s = ""this is a sentence""

s = ""this is a sentence""

s = ""this is a sentence""

s = ""this is a sentence""

s = ""this"
1881,Ranking Rows of Pandas DataFrame in Python,"# import the required packages
import pandas as pd

# Define the dictionary for converting to dataframe
movies = {'Name': ['The Godfather', 'Bird Box', 'Fight Club'],
'Year': ['1972', '2018', '1999'],
'Rating': ['9.2', '6.8', '8.8']}

df = pd.DataFrame(movies)
print(df)","import pandas as pd

df = pd.DataFrame({'Name': ['John', 'Jane', 'John', 'Jane', 'John', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane"
1882,Write a Python program to Convert key-values list to flat dictionary,"# Python3 code to demonstrate working of
# Convert key-values list to flat dictionary
# Using dict() + zip()
from itertools import product

# initializing dictionary
test_dict = {'month' : [1, 2, 3],
'name' : ['Jan', 'Feb', 'March']}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# Convert key-values list to flat dictionary
# Using dict() + zip()
res = dict(zip(test_dict['month'], test_dict['name']))

# printing result
print(""Flattened dictionary : "" + str(res))","import json

def dict_to_json(d):
    return json.dumps(d)

def json_to_dict(s):
    return json.loads(s)

def main():
    d = {'a': 1, 'b': 2, 'c': 3}
    print(dict_to_json(d))
    print(json_to_dict(dict_to_json(d)))

if __name__ == '__main__':
    main()"
1883,Write a Python program to Convert Tuple Matrix to Tuple List,"# Python3 code to demonstrate working of
# Convert Tuple Matrix to Tuple List
# Using list comprehension + zip()

# initializing list
test_list = [[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]

# printing original list
print(""The original list is : "" + str(test_list))

# flattening
temp = [ele for sub in test_list for ele in sub]

# joining to form column pairs
res = list(zip(*temp))

# printing result
print(""The converted tuple list : "" + str(res))","def convert_tuple_to_tuple_list(tuple_list):
    return tuple_list

def convert_tuple_to_tuple_list_2(tuple_list):
    return tuple_list

def convert_tuple_to_tuple_list_3(tuple_list):
    return tuple_list

def convert_tuple_to_tuple_list_4(tuple_list):
    return tuple_list

def convert_tuple"
1884,Write a Python program to Inversion in nested dictionary,"# Python3 code to demonstrate working of
# Inversion in nested dictionary
# Using loop + recursion

# utility function to get all paths till end
def extract_path(test_dict, path_way):
if not test_dict:
return [path_way]
temp = []
for key in test_dict:
temp.extend(extract_path(test_dict[key], path_way + [key]))
return temp

# function to compute inversion
def hlper_fnc(test_dict):
all_paths = extract_path(test_dict, [])
res = {}
for path in all_paths:
front = res
for ele in path[::-1]:
if ele not in front :
front[ele] = {}
front = front[ele]
return res

# initializing dictionary
test_dict = {""a"" : {""b"" : {""c"" : {}}},
""d"" : {""e"" : {}},
""f"" : {""g"" : {""h"" : {}}}}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# calling helper function for task
res = hlper_fnc(test_dict)

# printing result
print(""The inverted dictionary : "" + str(res))","def invert_dict(d):
    for k, v in d.items():
        d[v] = k
    return d

d = {'a': 1, 'b': 2, 'c': 3}
print(invert_dict(d))

""""""

# Solution:

def invert_dict(d):
    for k, v in d.items():
        d[v] = k
    return d

d = {'a': 1, 'b': 2, '"
1885,Write a Python program to Change column names and row indexes in Pandas DataFrame,"# first import the libraries
import pandas as pd

# Create a dataFrame using dictionary
df=pd.DataFrame({""Name"":['Tom','Nick','John','Peter'],
""Age"":[15,26,17,28]})

# Creates a dataFrame with
# 2 columns and 4 rows
df","import pandas as pd

df = pd.DataFrame({""A"": [1, 2, 3], ""B"": [4, 5, 6], ""C"": [7, 8, 9]})

df.columns = [""A"", ""B"", ""C""]
df.index = [""Row 1"", ""Row 2"", ""Row 3""]

print(df)

# Solution:

df.columns = [""A"", ""B"", ""C""]
df.index ="
1886,How to get size of folder using Python,"# import module
import os


# assign size
size = 0


# assign folder path
Folderpath = 'C:/Users/Geetansh Sahni/Documents/R'


# get size
for path, dirs, files in os.walk(Folderpath):
for f in files:
fp = os.path.join(path, f)
size += os.path.getsize(fp)


# display size
print(""Folder size: "" + str(size))","import os

def get_size(path):
    size = 0
    for dirpath, dirnames, filenames in os.walk(path):
        for f in filenames:
            fp = os.path.join(dirpath, f)
            if os.path.isfile(fp):
                size += os.path.getsize(fp)
    return size

print(get_size('C:\\Users\\srin\\Desktop\\Python\\Python_Projects\\'))

"""""""
1887,Intersection of two arrays in Python ( Lambda expression and filter function ),"# Function to find intersection of two arrays

def interSection(arr1,arr2):

# filter(lambda x: x in arr1, arr2) -->
# filter element x from list arr2 where x
# also lies in arr1
result = list(filter(lambda x: x in arr1, arr2))
print (""Intersection : "",result)

# Driver program
if __name__ == ""__main__"":
arr1 = [1, 3, 4, 5, 7]
arr2 = [2, 3, 5, 6]
interSection(arr1,arr2)","def intersection(arr1, arr2):
    return list(set(arr1) & set(arr2))

print(intersection([1, 2, 3, 4, 5], [2, 3, 5, 6, 7]))

""""""

def intersection(arr1, arr2):
    return list(set(arr1) & set(arr2))

print(intersection([1, 2, 3, 4, 5], [2, 3, 5, 6, 7]))"
1888,Write a Python program to Convert set into a list,"# Python3 program to convert a
# set into a list
my_set = {'Geeks', 'for', 'geeks'}

s = list(my_set)
print(s)","def solution(set):
    return list(set)

def solution(set):
    return list(set)

def solution(set):
    return list(set)

def solution(set):
    return list(set)

def solution(set):
    return list(set)

def solution(set):
    return list(set)

def solution(set):
    return list(set)

def solution(set):
    return list(set)

def solution(set):"
1889,Write a Python program to Creating a Pandas dataframe column based on a given condition,"# importing pandas as pd
import pandas as pd

# Creating the dataframe
df = pd.DataFrame({'Date' : ['11/8/2011', '11/9/2011', '11/10/2011',
'11/11/2011', '11/12/2011'],
'Event' : ['Music', 'Poetry', 'Music', 'Music', 'Poetry']})

# Print the dataframe
print(df)","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Score': [85, 90, 95, 100, 95, 90]})

# Create a column based on the condition
df['Score'] = df['Score'].apply(lambda x: x if x >= 90 else x - 10)

# Display the dataframe
print("
1890,How to insert a space between characters of all the elements of a given NumPy array in Python,"# importing numpy as np
import numpy as np


# creating array of string
x = np.array([""geeks"", ""for"", ""geeks""],
dtype=np.str)
print(""Printing the Original Array:"")
print(x)

# inserting space using np.char.join()
r = np.char.join("" "", x)
print(""Printing the array after inserting space\
between the elements"")
print(r)","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a)

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a.dtype)

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a"
1891,Write a Python program to Test substring order,"# Python3 code to demonstrate working of
# Test substring order
# Using join() + in operator + generator expression

# initializing string
test_str = 'geeksforgeeks'

# printing original string
print(""The original string is : "" + str(test_str))

# initializing substring
K = 'seek'

# concatenating required characters
temp = lambda sub: ''.join(chr for chr in sub if chr in set(K))

# checking in order
res = K in temp(test_str)

# printing result
print(""Is substring in order : "" + str(res))","def test_substring_order(s):
    if len(s) == 0:
        return True
    if len(s) == 1:
        return False
    if s[0] == s[1]:
        return test_substring_order(s[2:])
    else:
        return test_substring_order(s[1:])

print(test_substring_order(""abababababababababababababababababababababababab"
1892,String slicing in Python to check if a string can become empty by recursive deletion,"def checkEmpty(input, pattern):

# If both are empty
if len(input)== 0 and len(pattern)== 0:
return 'true'

# If only pattern is empty
if len(pattern)== 0:
return 'true'

while (len(input) != 0):

# find sub-string in main string
index = input.find(pattern)

# check if sub-string founded or not
if (index ==(-1)):
return 'false'

# slice input string in two parts and concatenate
input = input[0:index] + input[index + len(pattern):]

return 'true'

# Driver program
if __name__ == ""__main__"":
input ='GEEGEEKSKS'
pattern ='GEEKS'
print (checkEmpty(input, pattern))","def is_empty(s):
    if len(s) == 0:
        return True
    else:
        return False

print(is_empty(""""))
print(is_empty(""a""))
print(is_empty(""""))
print(is_empty(""a""))
print(is_empty(""a""))
print(is_empty(""a""))
print(is_empty(""a""))
print(is_empty(""a""))
print(is_empty(""a""))
print(is"
1893,Write a Python program to How to get unique elements in nested tuple,"# Python3 code to demonstrate working of
# Unique elements in nested tuple
# Using nested loop + set()

# initialize list
test_list = [(3, 4, 5), (4, 5, 7), (1, 4)]

# printing original list
print(""The original list : "" + str(test_list))

# Unique elements in nested tuple
# Using nested loop + set()
res = []
temp = set()
for inner in test_list:
for ele in inner:
if not ele in temp:
temp.add(ele)
res.append(ele)

# printing result
print(""Unique elements in nested tuples are : "" + str(res))","def get_unique_elements(t):
    return list(set(t))

print(get_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def get_unique_elements(t):
    return list(set(t))

print(get_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
1894,How to count the frequency of unique values in NumPy array in Python,"# import library
import numpy as np

ini_array = np.array([10, 20, 5,
10, 8, 20,
8, 9])

# Get a tuple of unique values
# and their frequency in
# numpy array
unique, frequency = np.unique(ini_array,
return_counts = True)
# print unique values array
print(""Unique Values:"",
unique)

# print frequency array
print(""Frequency Values:"",
frequency)","import numpy as np

# Create a NumPy array with the following data:
a = np.array([1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a Python code snippet to print the frequency of unique values in NumPy array:
print(a.size)

# Create a Python code snippet to print the frequency of unique values in NumPy array:
print(a.shape)

# Create a Python code snippet to"
1895,How to calculate the element-wise absolute value of NumPy array in Python,"# import library
import numpy as np

# create a numpy 1d-array
array = np.array([1, -2, 3])

print(""Given array:\n"", array)

# find element-wise
# absolute value
rslt = np.absolute(array)

print(""Absolute array:\n"", rslt)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(np.abs(a))

""""""

# Solution

# a = np.array([[1, 2, 3], [4, 5, 6]])
# print(np.abs(a))

# a = np.array([[1, 2, 3], [4, 5, 6]])
# print(np.abs(a))"
1896,Write a Python program to Remove nested records from tuple,"# Python3 code to demonstrate working of
# Remove nested records
# using isinstance() + enumerate() + loop

# initialize tuple
test_tup = (1, 5, 7, (4, 6), 10)

# printing original tuple
print(""The original tuple : "" + str(test_tup))

# Remove nested records
# using isinstance() + enumerate() + loop
res = tuple()
for count, ele in enumerate(test_tup):
if not isinstance(ele, tuple):
res = res + (ele, )

# printing result
print(""Elements after removal of nested records : "" + str(res))","def remove_nested_tuple(tuple):
    return tuple[0], tuple[1], tuple[2]

tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

print(remove_nested_tuple(tuple))

""""""

def remove_nested_tuple(tuple):
    return tuple[0], tuple[1], tuple[2]

tuple = (1, 2, 3, 4, 5, 6,"
1897,Write a Python program to Reverse a numpy array,"# Python code to demonstrate
# how to reverse numpy array
# using shortcut method

import numpy as np

# initialising numpy array
ini_array = np.array([1, 2, 3, 6, 4, 5])

# printing initial ini_array
print(""initial array"", str(ini_array))

# printing type of ini_array
print(""type of ini_array"", type(ini_array))

# using shortcut method to reverse
res = ini_array[::-1]

# printing result
print(""final array"", str(res))","import numpy as np

arr = np.array([1, 2, 3, 4, 5])
print(arr)
arr = arr[::-1]
print(arr)

arr = np.array([1, 2, 3, 4, 5])
print(arr)
arr = arr[::-1]
print(arr)

arr = np.array([1, 2, 3, 4, 5])
print(arr)
arr = arr[::-1]
print(arr)"
1898,Write a Python program to display half diamond pattern of numbers with star border,"# function to display the pattern up to n
def display(n):

print(""*"")

for i in range(1, n+1):
print(""*"", end="""")

# for loop to display number up to i
for j in range(1, i+1):
print(j, end="""")

# for loop to display number in reverse direction
for j in range(i-1, 0, -1):
print(j, end="""")

print(""*"", end="""")
print()

# for loop to display i in reverse direction
for i in range(n-1, 0, -1):
print(""*"", end="""")
for j in range(1, i+1):
print(j, end="""")

for j in range(i-1, 0, -1):
print(j, end="""")

print(""*"", end="""")
print()

print(""*"")


# driver code
n = 5
print('\nFor n =', n)
display(n)

n = 3
print('\nFor n =', n)
display(n)","import turtle

t = turtle.Turtle()
t.speed(0)
t.pensize(3)
t.penup()
t.goto(-200, -200)
t.pendown()
t.circle(200)
t.penup()
t.goto(-200, 200)
t.pendown()
t.circle(200)
t.penup()
t.goto(-200, -200)
t.pendown()
t.circle("
1899,Collapse multiple Columns in Pandas in Python,"# Python program to collapse
# multiple Columns using Pandas
import pandas as pd

# sample data
n = 3
Sample_1 = [57, 51, 6]
Sample_2 = [92, 16, 19]
Sample_3 = [15, 93, 71]
Sample_4 = [28, 73, 31]

sample_id = zip([""S""]*n, list(range(1, n + 1)))

s_names = [''.join([w[0], str(w[1])]) for w in sample_id]

d = {'s_names': s_names, 'Sample_1': Sample_1,
'Sample_2': Sample_2, 'Sample_3': Sample_3,
'Sample_4': Sample_4}

df_1 = pd.DataFrame(d)

mapping = {'Sample_1': 'Result_1',
'Sample_2': 'Result_1',
'Sample_3': 'Result_2',
'Sample_4': 'Result_2'}

df = df_1.set_index('s_names').groupby(mapping, axis = 1).sum()

df.reset_index(level = 0)","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution 23

# Solution 24"
1900,Write a Python program to Insertion at the beginning in OrderedDict,"# Python code to demonstrate
# insertion of items in beginning of ordered dict
from collections import OrderedDict

# initialising ordered_dict
iniordered_dict = OrderedDict([('akshat', '1'), ('nikhil', '2')])

# inserting items in starting of dict
iniordered_dict.update({'manjeet':'3'})
iniordered_dict.move_to_end('manjeet', last = False)

# print result
print (""Resultant Dictionary : ""+str(iniordered_dict))","def insertion_sort(d):
    for i in range(1, len(d)):
        key = d[i]
        j = i - 1
        while j >= 0 and key < d[j]:
            d[j + 1] = d[j]
            j -= 1
        d[j + 1] = key
    return d

d = {1: 'A', 2: 'B', 3: 'C', 4: 'D', 5: 'E', 6:"
1901,Using Timedelta and Period to create DateTime based indexes in Pandas in Python,"# importing pandas as pd
import pandas as pd

# Creating the timestamp
ts = pd.Timestamp('02-06-2018')

# Print the timestamp
print(ts)","import pandas as pd

# Create a Timedelta Index
tdi = pd.date_range('1/1/2000', periods=4, freq='D')

# Create a Period Index
pi = pd.period_range('2000-01-01', periods=4, freq='D')

# Create a DateTime Index
dt = pd.date_range('2000-01-01', periods=4, freq='D')

# Create a"
1902,Write a Python program to Sort Tuples by Total digits,"# Python3 code to demonstrate working of
# Sort Tuples by Total digits
# Using sort() + len() + sum()

def count_digs(tup):

# gets total digits in tuples
return sum([len(str(ele)) for ele in tup ])

# initializing list
test_list = [(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)]

# printing original list
print(""The original list is : "" + str(test_list))

# performing sort
test_list.sort(key = count_digs)

# printing result
print(""Sorted tuples : "" + str(test_list))","def sort_tuple(tup):
    return tup[0]

tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print(sorted(tup, key=sort_tuple))

""""""

# Solution 1

def sort_tuple(tup):
    return tup[0]

tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print(sorted"
1903,Write a Python program to reverse a stack,"# create class for stack
class Stack:


# create empty list
def __init__(self):
self.Elements = []

# push() for insert an element
def push(self, value):
self.Elements.append(value)

# pop() for remove an element
def pop(self):
return self.Elements.pop()

# empty() check the stack is empty of not
def empty(self):
return self.Elements == []

# show() display stack
def show(self):
for value in reversed(self.Elements):
print(value)


# Insert_Bottom() insert value at bottom
def BottomInsert(s, value):

# check the stack is empty or not
if s.empty():

# if stack is empty then call
# push() method.
s.push(value)

# if stack is not empty then execute
# else block
else:
popped = s.pop()
BottomInsert(s, value)
s.push(popped)


# Reverse() reverse the stack
def Reverse(s):
if s.empty():
pass
else:
popped = s.pop()
Reverse(s)
BottomInsert(s, popped)




# create object of stack class
stk = Stack()


stk.push(1)
stk.push(2)
stk.push(3)
stk.push(4)
stk.push(5)


print(""Original Stack"")
stk.show()


print(""\nStack after Reversing"")
Reverse(stk)
stk.show()","def reverseStack(stack):
    # Your code here
    return stack[::-1]

stack = [1, 2, 3, 4, 5]
print(reverseStack(stack))

stack = [1, 2, 3, 4, 5]
print(reverseStack(stack))

stack = [1, 2, 3, 4, 5]
print(reverseStack(stack))

stack = [1, 2, 3, 4, 5]
print(reverseStack(stack))

stack = [1,"
1904,Explicitly define datatype in a Python function,"# function definition
def add(num1, num2):
print(""Datatype of num1 is "", type(num1))
print(""Datatype of num2 is "", type(num2))
return num1 + num2

# calling the function without
# explicitly declaring the datatypes
print(add(2, 3))

# calling the function by explicitly
# defining the datatype as float
print(add(float(2), float(3)))","def solution(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return solution(n-1) + solution(n-2)

print(solution(5))

""""""

def solution(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return solution(n-1) + solution(n-2)

print(solution("
1905,Numpy count_nonzero method | Python,"# Python program explaining
# numpy.count_nonzero() function

# importing numpy as geek
import numpy as geek

arr = [[0, 1, 2, 3, 0], [0, 5, 6, 0, 7]]

gfg = geek.count_nonzero(arr)

print (gfg)","import numpy as np

# Create a numpy array with the following data:
a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a numpy array with the following data:
b = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a numpy array with the following data:
c = np.array([1, 2, 3, 4, 5, 6, 7,"
1906,Getting frequency counts of a columns in Pandas DataFrame in Python,"# importing pandas as pd
import pandas as pd

# sample dataframe
df = pd.DataFrame({'A': ['foo', 'bar', 'g2g', 'g2g', 'g2g',
'bar', 'bar', 'foo', 'bar'],
'B': ['a', 'b', 'a', 'b', 'b', 'b', 'a', 'a', 'b'] })

# frequency count of column A
count = df['A'].value_counts()
print(count)","import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

# Create a Series
s = pd.Series([1, 2, 3, 4, 5])

# Create a DataFrame from a Series
df2 = pd.DataFrame(s)

# Create a Series from a DataFrame
s2 = pd"
1907,Write a Python program to reverse the content of a file and store it in another file,"# Open the file in write mode
f1 = open(""output1.txt"", ""w"")

# Open the input file and get
# the content into a variable data
with open(""file.txt"", ""r"") as myfile:
data = myfile.read()

# For Full Reversing we will store the
# value of data into new variable data_1
# in a reverse order using [start: end: step],
# where step when passed -1 will reverse
# the string
data_1 = data[::-1]

# Now we will write the fully reverse
# data in the output1 file using
# following command
f1.write(data_1)

f1.close()","python solution.py

""""""

import os
import sys

# Complete the reverse function below.
def reverse(s):
    return s[::-1]

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = reverse(s)

    fptr.write(result + '\n')

    fptr.close()"
1908,Write a Python program to sort a list of tuples by second Item,"# Python program to sort a list of tuples by the second Item

# Function to sort the list of tuples by its second item
def Sort_Tuple(tup):

# getting length of list of tuples
lst = len(tup)
for i in range(0, lst):

for j in range(0, lst-i-1):
if (tup[j][1] > tup[j + 1][1]):
temp = tup[j]
tup[j]= tup[j + 1]
tup[j + 1]= temp
return tup

# Driver Code
tup =[('for', 24), ('is', 10), ('Geeks', 28),
('Geeksforgeeks', 5), ('portal', 20), ('a', 15)]

print(Sort_Tuple(tup))","""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

#"
1909,Write a Python program to Group similar elements into Matrix,"# Python3 code to demonstrate working of
# Group similar elements into Matrix
# Using list comprehension + groupby()
from itertools import groupby

# initializing list
test_list = [1, 3, 5, 1, 3, 2, 5, 4, 2]

# printing original list
print(""The original list : "" + str(test_list))

# Group similar elements into Matrix
# Using list comprehension + groupby()
res = [list(val) for key, val in groupby(sorted(test_list))]

# printing result
print(""Matrix after grouping : "" + str(res))","def group_similar(matrix, n):
    # Write your code here
    matrix = [[0 for i in range(n)] for j in range(n)]
    for i in range(n):
        for j in range(n):
            if i == j:
                matrix[i][j] = 1
            else:
                matrix[i][j] = matrix[i][j] + matrix[i][j-1]
    return matrix

matrix = [[1, 2, 3"
1910,Scrape LinkedIn Using Selenium And Beautiful Soup in Python,"from selenium import webdriver
from bs4 import BeautifulSoup
import time

# Creating a webdriver instance
driver = webdriver.Chrome(""Enter-Location-Of-Your-Web-Driver"")
# This instance will be used to log into LinkedIn

# Opening linkedIn's login page
driver.get(""https://linkedin.com/uas/login"")

# waiting for the page to load
time.sleep(5)

# entering username
username = driver.find_element_by_id(""username"")

# In case of an error, try changing the element
# tag used here.

# Enter Your Email Address
username.send_keys(""User_email"")

# entering password
pword = driver.find_element_by_id(""password"")
# In case of an error, try changing the element
# tag used here.

# Enter Your Password
pword.send_keys(""User_pass"")

# Clicking on the log in button
# Format (syntax) of writing XPath -->
# //tagname[@attribute='value']
driver.find_element_by_xpath(""//button[@type='submit']"").click()
# In case of an error, try changing the
# XPath used here.","import requests
from bs4 import BeautifulSoup

url = ""https://www.linkedin.com/jobs/search/?f_LF=f_AL&f_LS=f_AL&f_LK=f_AL&f_JSEARCH=f_AL&f_JSCENTER=f_AL&f_JSCORE_MIN=0&f_JSCORE_MAX=100&f_JSCORE_SORT=1&f_JSCORE_SORT_DIR"
1911,How to randomly select rows from Pandas DataFrame in Python,"# Import pandas package
import pandas as pd

# Define a dictionary containing employee data
data = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj', 'Geeku'],
'Age':[27, 24, 22, 32, 15],
'Address':['Delhi', 'Kanpur', 'Allahabad', 'Kannauj', 'Noida'],
'Qualification':['Msc', 'MA', 'MCA', 'Phd', '10th']}


# Convert the dictionary into DataFrame
df = pd.DataFrame(data)


# select all columns
df","import random

df = pd.DataFrame(random.randint(0,100,size=(10,5)),columns=['a','b','c','d','e'])
print(df)

# Solution:

# df = pd.DataFrame(random.randint(0,100,size=(10,5)),columns=['a','b','c','d','e'])
# print(df)

# Solution:

# df = pd.DataFrame(random"
1912,How to divide a polynomial to another using NumPy in Python,"# importing package
import numpy

# define the polynomials
# p(x) = 5(x**2) + (-2)x +5
px = (5, -2, 5)

# g(x) = x +2
gx = (2, 1, 0)

# divide the polynomials
qx, rx = numpy.polynomial.polynomial.polydiv(px, gx)

# print the result
# quotiient
print(qx)

# remainder
print(rx)","import numpy as np

def solve(p, q, r):
    # p is the polynomial
    # q is the quotient
    # r is the remainder
    # return the solution
    #
    # Note:
    #
    # The solution is a list of coefficients
    #
    # The coefficients are in the order of the
    # polynomial
    #
    # The remainder is a list of coefficients
    #
    # The coefficients are in the order of the"
1913,Write a Python program to Numpy matrix.sum(),"# import the important module in python
import numpy as np

# make matrix with numpy
gfg = np.matrix('[4, 1; 12, 3]')

# applying matrix.sum() method
geek = gfg.sum()

print(geek)","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(A.sum())

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

#"
1914,Execute a String of Code in Python,"# Python program to illustrate use of exec to
# execute a given code as string.


# function illustrating how exec() functions.
def exec_code():
LOC = """"""
def factorial(num):
fact=1
for i in range(1,num+1):
fact = fact*i
return fact
print(factorial(5))
""""""
exec(LOC)

# Driver Code
exec_code()","def solution(s):
    # Write your code here
    return s.replace(' ', '').replace('\n', '').replace(' ', '').replace('\t', '')

print(solution('Python'))

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''"
1915,Write a Python program to Remove suffix from string list,"# Python3 code to demonstrate working of
# Suffix removal from String list
# using loop + remove() + endswith()

# initialize list
test_list = ['allx', 'lovex', 'gfg', 'xit', 'is', 'bestx']

# printing original list
print(""The original list : "" + str(test_list))

# initialize suffix
suff = 'x'

# Suffix removal from String list
# using loop + remove() + endswith()
for word in test_list[:]:
if word.endswith(suff):
test_list.remove(word)

# printing result
print(""List after removal of suffix elements : "" + str(test_list))","def remove_suffix(string, suffix):
    return string[string.find(suffix) + len(suffix):]

print(remove_suffix(""python"", ""o""))

""""""

def remove_suffix(string, suffix):
    return string[string.find(suffix) + len(suffix):]

print(remove_suffix(""python"", ""o""))

""""""

def remove_suffix(string, suffix):
    return string[string.find(suffix)"
1916,numpy.poly1d() in Python,"# Python code explaining
# numpy.poly1d()

# importing libraries
import numpy as np

# Constructing polynomial
p1 = np.poly1d([1, 2])
p2 = np.poly1d([4, 9, 5, 4])

print (""P1 : "", p1)
print (""\n p2 : \n"", p2)

# Solve for x = 2
print (""\n\np1 at x = 2 : "", p1(2))
print (""p2 at x = 2 : "", p2(2))

# Finding Roots
print (""\n\nRoots of P1 : "", p1.r)
print (""Roots of P2 : "", p2.r)

# Finding Coefficients
print (""\n\nCoefficients of P1 : "", p1.c)
print (""Coefficients of P2 : "", p2.coeffs)

# Finding Order
print (""\n\nOrder / Degree of P1 : "", p1.o)
print (""Order / Degree of P2 : "", p2.order)","import numpy as np

def f(x):
    return np.sin(x)

x = np.linspace(0, 2*np.pi, 100)
y = f(x)

# Plot the function
plt.plot(x, y)

# Create a new figure
plt.figure()

# Create a new axes
ax = plt.axes()

# Plot the function
ax.plot(x, y)

# Create a new figure
plt.figure"
1917,Write a Python Code for time Complexity plot of Heap Sort,"# Python Code for Implementation and running time Algorithm
# Complexity plot of Heap Sort
# by Ashok Kajal
# This python code intends to implement Heap Sort Algorithm
# Plots its time Complexity on list of different sizes


# ---------------------Important Note -------------------
# numpy, time and matplotlib.pyplot are required to run this code
import time
from numpy.random import seed
from numpy.random import randint
import matplotlib.pyplot as plt




# find left child of node i
def left(i):
return 2 * i + 1


# find right child of node i
def right(i):
return 2 * i + 2


# calculate and return array size
def heapSize(A):
return len(A)-1




# This function takes an array and Heapyfies
# the at node i
def MaxHeapify(A, i):
# print(""in heapy"", i)
l = left(i)
r = right(i)

# heapSize = len(A)
# print(""left"", l, ""Rightt"", r, ""Size"", heapSize)
if l<= heapSize(A) and A[l] > A[i] :
largest = l
else:
largest = i
if r<= heapSize(A) and A[r] > A[largest]:
largest = r
if largest != i:
# print(""Largest"", largest)
A[i], A[largest]= A[largest], A[i]
# print(""List"", A)
MaxHeapify(A, largest)

# this function makes a heapified array
def BuildMaxHeap(A):
for i in range(int(heapSize(A)/2)-1, -1, -1):
MaxHeapify(A, i)

# Sorting is done using heap of array
def HeapSort(A):
BuildMaxHeap(A)
B = list()
heapSize1 = heapSize(A)
for i in range(heapSize(A), 0, -1):
A[0], A[i]= A[i], A[0]
B.append(A[heapSize1])
A = A[:-1]
heapSize1 = heapSize1-1
MaxHeapify(A, 0)



# randomly generates list of different
# sizes and call HeapSort function
elements = list()
times = list()
for i in range(1, 10):


# generate some integers
a = randint(0, 1000 * i, 1000 * i)
# print(i)
start = time.clock()
HeapSort(a)
end = time.clock()


# print(""Sorted list is "", a)
print(len(a), ""Elements Sorted by HeapSort in "", end-start)
elements.append(len(a))
times.append(end-start)


plt.xlabel('List Length')
plt.ylabel('Time Complexity')
plt.plot(elements, times, label ='Heap Sort')
plt.grid()
plt.legend()
plt.show()
# This code is contributed by Ashok Kajal","def heap_sort(arr):
    for i in range(len(arr)//2, -1, -1):
        heapify(arr, i, len(arr))
    for i in range(len(arr) - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, 0, i)

def heapify(arr, i, n):
    l = 2 * i + 1
    r"
1918,Convert JSON data Into a Custom Python Object,"# importing the module
import json
from collections import namedtuple

# creating the data
data = '{""name"" : ""Geek"", ""id"" : 1, ""location"" : ""Mumbai""}'

# making the object
x = json.loads(data, object_hook =
lambda d : namedtuple('X', d.keys())
(*d.values()))

# accessing the JSON data as an object
print(x.name, x.id, x.location)","import json

with open('data.json') as f:
    data = json.load(f)

# Solution 1:
# print(type(data))
# print(data)

# Solution 2:
# print(type(data['data']))
# print(data['data'])

# Solution 3:
# print(type(data['data']['data']))
# print(data['data']['data'])

# Solution 4:
# print(type(data['data"
1919,Write a Python counter and dictionary intersection example (Make a string using deletion and rearrangement),"# Python code to find if we can make first string
# from second by deleting some characters from
# second and rearranging remaining characters.
from collections import Counter

def makeString(str1,str2):

# convert both strings into dictionaries
# output will be like str1=""aabbcc"",
# dict1={'a':2,'b':2,'c':2}
# str2 = 'abbbcc', dict2={'a':1,'b':3,'c':2}
dict1 = Counter(str1)
dict2 = Counter(str2)

# take intersection of two dictionries
# output will be result = {'a':1,'b':2,'c':2}
result = dict1 & dict2

# compare resultant dictionary with first
# dictionary comparison first compares keys
# and then compares their corresponding values
return result == dict1

# Driver program
if __name__ == ""__main__"":
str1 = 'ABHISHEKsinGH'
str2 = 'gfhfBHkooIHnfndSHEKsiAnG'
if (makeString(str1,str2)==True):
print(""Possible"")
else:
print(""Not Possible"")","def solution(s):
    # Write your code here
    # Create a dictionary to store the number of times each character appears in the string
    d = {}
    # Create a list to store the characters in the string
    l = []
    # Create a list to store the number of times each character appears in the string
    n = []
    # Create a for loop to iterate through the string
    for i in s:
        # Add the number of times the character appears to the"
1920,Selecting rows in pandas DataFrame based on conditions in Python,"# importing pandas
import pandas as pd

record = {

'Name': ['Ankit', 'Amit', 'Aishwarya', 'Priyanka', 'Priya', 'Shaurya' ],
'Age': [21, 19, 20, 18, 17, 21],
'Stream': ['Math', 'Commerce', 'Science', 'Math', 'Math', 'Science'],
'Percentage': [88, 92, 95, 70, 65, 78] }

# create a dataframe
dataframe = pd.DataFrame(record, columns = ['Name', 'Age', 'Stream', 'Percentage'])

print(""Given Dataframe :\n"", dataframe)

# selecting rows based on condition
rslt_df = dataframe[dataframe['Percentage'] > 80]

print('\nResult dataframe :\n', rslt_df)","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution 23"
1921,Write a Python program to find the power of a number using recursion,"def power(N, P):

# if power is 0 then return 1
if P == 0:
return 1

# if power is 1 then number is
# returned
elif P == 1:
return N

else:
return (N*power(N, P-1))

# Driver program
N = 5
P = 2

print(power(N, P))","def power(x, y):
    if y == 0:
        return 1
    elif y % 2 == 0:
        return x * power(x, y // 2)
    else:
        return x * power(x, y // 2) * x

print(power(2, 4))

""""""

def power(x, y):
    if y == 0:
        return 1
    elif y % 2 == 0:
        return x * power(x, y //"
1922,Write a Python program to Stack and StackSwitcher in GTK+ 3,"import gi
# Since a system can have multiple versions
# of GTK + installed, we want to make
# sure that we are importing GTK + 3.
gi.require_version(""Gtk"", ""3.0"")
from gi.repository import Gtk


class StackWindow(Gtk.Window):
def __init__(self):
Gtk.Window.__init__(self, title =""Geeks for Geeks"")
self.set_border_width(10)

# Creating a box vertically oriented with a space of 100 pixel.
vbox = Gtk.Box(orientation = Gtk.Orientation.VERTICAL, spacing = 100)
self.add(vbox)

# Creating stack, transition type and transition duration.
stack = Gtk.Stack()
stack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
stack.set_transition_duration(1000)

# Creating the check button.
checkbutton = Gtk.CheckButton(""Yes"")
stack.add_titled(checkbutton, ""check"", ""Check Button"")

# Creating label .
label = Gtk.Label()
label.set_markup(""<big>Hello World</big>"")
stack.add_titled(label, ""label"", ""Label"")

# Implementation of stack switcher.
stack_switcher = Gtk.StackSwitcher()
stack_switcher.set_stack(stack)
vbox.pack_start(stack_switcher, True, True, 0)
vbox.pack_start(stack, True, True, 0)


win = StackWindow()
win.connect(""destroy"", Gtk.main_quit)
win.show_all()
Gtk.main()","import sys

def stack_solver(stack, stack_switcher):
    while stack:
        print(stack.pop())
    print(stack_switcher)

if __name__ == '__main__':
    stack_solver(stack, stack_switcher)

""""""

# Solution

import sys

def stack_solver(stack, stack_switcher):
    while stack:
        print(stack.pop())
    print(stack_switcher)"
1923,Assign Function to a Variable in Python,"def a():
print(""GFG"")

# assigning function to a variable
var=a


# calling the variable
var()","def solution(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return solution(n-1) + solution(n-2)

print(solution(5))

""""""

def solution(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return solution(n-1) + solution(n-2)

print(solution(5))"
1924,Looping through buttons in Tkinter in Python,"# Import package and it's modules
from tkinter import *

# create root window
root = Tk()

# root window title and dimension
root.title(""GeekForGeeks"")

# Set geometry (widthxheight)
root.geometry('400x400')

# Execute Tkinter
root.mainloop()","import tkinter as tk
from tkinter import ttk

def button_click(number):
    print(f""Button {number} was clicked."")

def button_clear():
    print(""Button 1 was clicked."")
    button_number1.configure(state=""normal"")
    button_number1.delete(0, tk.END)
    button_number1.configure(state=""disabled"")

def button_equal():
    print(""Button 2 was clicked."")
    button_number"
1925,How to Remove columns in Numpy array that contains non-numeric values in Python,"# Importing Numpy module
import numpy as np

# Creating 2X3 2-D Numpy array
n_arr = np.array([[10.5, 22.5, np.nan],
[41, 52.5, np.nan]])

print(""Given array:"")
print(n_arr)

print(""\nRemove all columns containing non-numeric elements "")
print(n_arr[:, ~np.isnan(n_arr).any(axis=0)])","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

a.dtype

a.dtype.kind

a.dtype.names

a.dtype.names[0]

a.dtype.names[0][0]

a.dtype.names[0][0] = 'a'

a.dtype.names[0][0]"
1926,Write a Python program to interchange first and last elements in a list,"# Python3 program to swap first
# and last element of a list


# Swap function
def swapList(newList):
size = len(newList)

# Swapping
temp = newList[0]
newList[0] = newList[size - 1]
newList[size - 1] = temp

return newList

# Driver code
newList = [12, 35, 9, 56, 24]


print(swapList(newList))","def interchange(lst):
    lst.sort()
    lst.reverse()
    return lst

lst = [1, 2, 3, 4, 5]
print(interchange(lst))

""""""

def interchange(lst):
    lst.sort()
    lst.reverse()
    return lst

lst = [1, 2, 3, 4, 5]
print(interchange(lst))"
1927,How to Sort data by Column in a CSV File in Python ,"# importing pandas package
import pandas as pandasForSortingCSV

# assign dataset
csvData = pandasForSortingCSV.read_csv(""sample.csv"")

# displaying unsorted data frame
print(""\nBefore sorting:"")
print(csvData)

# sort data frame
csvData.sort_values([""Salary""],
axis=0,
ascending=[False],
inplace=True)

# displaying sorted data frame
print(""\nAfter sorting:"")
print(csvData)","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    data = list(csv_reader)

data.sort(key=lambda x: int(x[0]))

with open('sorted_data.csv', 'w') as f:
    csv_writer = csv.writer(f)
    csv_writer.writerows(data)

""""""

import csv

with open('data"
1928,Write a Python program to Reverse Sort a String,"# Python3 code to demonstrate
# Reverse Sort a String
# using join() + sorted() + reverse

# initializing string
test_string = ""geekforgeeks""

# printing original string
print(""The original string : "" + str(test_string))

# using join() + sorted() + reverse
# Sorting a string
res = ''.join(sorted(test_string, reverse = True))

# print result
print(""String after reverse sorting : "" + str(res))","def reverse_string(string):
    # your code goes here
    return string[::-1]

# driver code
string = ""hello""
print(reverse_string(string))

# solution
def reverse_string(string):
    # your code goes here
    return string[::-1]

# driver code
string = ""hello""
print(reverse_string(string))

# solution
def reverse_string(string):
    # your code goes here
    return string[::-1]"
1929,How to Scrape all PDF files in a Website in Python,"# for get the pdf files or url
import requests


# for tree traversal scraping in webpage
from bs4 import BeautifulSoup


# for input and output operations
import io


# For getting information about the pdfs
from PyPDF2 import PdfFileReader","import urllib.request
import os

# Create a function named get_pdf_urls()
# which takes one parameter: url
# and returns a list of all the URLs in the given website.
#
# For example, if the url is ""http://www.python.org""
# and the website is ""http://www.python.org/index.html"",
# the function should return the list [""http://www.python.org/index.html"",
# ""http://www.python.org"
1930,Multiply matrices of complex numbers using NumPy in Python,"# importing numpy as library
import numpy as np


# creating matrix of complex number
x = np.array([2+3j, 4+5j])
print(""Printing First matrix:"")
print(x)

y = np.array([8+7j, 5+6j])
print(""Printing Second matrix:"")
print(y)

# vector dot product of two matrices
z = np.vdot(x, y)
print(""Product of first and second matrices are:"")
print(z)",">>> import numpy as np
>>> A = np.array([[1, 2, 3], [4, 5, 6]])
>>> B = np.array([[7, 8, 9], [10, 11, 12]])
>>> C = np.array([[13, 14, 15], [16, 17, 18]])
>>> A_mul = np.dot(A, B)
>>> A_mul
array([[14, 22, 34],
       [28, 46, 60]]"
1931,Calculate the Euclidean distance using NumPy in Python,"# Python code to find Euclidean distance
# using linalg.norm()


import numpy as np


# initializing points in
# numpy arrays
point1 = np.array((1, 2, 3))
point2 = np.array((1, 1, 1))


# calculating Euclidean distance
# using linalg.norm()
dist = np.linalg.norm(point1 - point2)


# printing Euclidean distance
print(dist)","import numpy as np

# Create a 2D array
x = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
              [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
              [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
              [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
              [1,"
1932,Write a Python program to Swap elements in String list,"# Python3 code to demonstrate
# Swap elements in String list
# using replace() + list comprehension

# Initializing list
test_list = ['Gfg', 'is', 'best', 'for', 'Geeks']

# printing original lists
print(""The original list is : "" + str(test_list))

# Swap elements in String list
# using replace() + list comprehension
res = [sub.replace('G', '-').replace('e', 'G').replace('-', 'e') for sub in test_list]

# printing result
print (""List after performing character swaps : "" + str(res))","def swap_elements(list1, list2):
    list1[0], list1[1] = list1[1], list1[0]
    list2[0], list2[1] = list2[1], list2[0]
    return list1, list2

list1 = [""a"", ""b"", ""c""]
list2 = [""d"", ""e"", ""f""]

print(swap_elements(list1, list2))

""""""

def swap_e"
1933,Write a Python program to Kth Column Product in Tuple List,"# Python3 code to demonstrate working of
# Tuple List Kth Column Product
# using list comprehension + loop

# getting Product
def prod(val) :
res = 1
for ele in val:
res *= ele
return res

# initialize list
test_list = [(5, 6, 7), (1, 3, 5), (8, 9, 19)]

# printing original list
print(""The original list is : "" + str(test_list))

# initialize K
K = 2

# Tuple List Kth Column Product
# using list comprehension + loop
res = prod([sub[K] for sub in test_list])

# printing result
print(""Product of Kth Column of Tuple List : "" + str(res))","def kth_column_product(a, b, c, d, e, f, g, h, i, j, k):
    if i == 0:
        return (a[0] * b[0] * c[0] * d[0] * e[0] * f[0] * g[0] * h[0] * i[0] * j[0] * k[0])
    elif i == 1:
        return (a[0] * b[0"
1934,Write a Python program to create a list of tuples from given list having number and its cube in each tuple,"# Python program to create a list of tuples
# from given list having number and
# its cube in each tuple

# creating a list
list1 = [1, 2, 5, 6]

# using list comprehension to iterate each
# values in list and create a tuple as specified
res = [(val, pow(val, 3)) for val in list1]

# print the result
print(res)","import math

def cube(n):
    return math.pow(n,3)

def main():
    n = int(input(""Enter the number of elements in the list: ""))
    l = []
    for i in range(n):
        t = (int(input(""Enter the element: "")),cube(i))
        l.append(t)
    print(l)

if __name__ == ""__main__"":"
1935,Change current working directory with Python,"# Python program to change the
# current working directory




import os


# Function to Get the current
# working directory
def current_path():
print(""Current working directory before"")
print(os.getcwd())
print()




# Driver's code
# Printing CWD before
current_path()


# Changing the CWD
os.chdir('../')


# Printing CWD after
current_path()","import os
os.chdir('C:\\Users\\srin\\OneDrive\\Desktop\\Python\\')

# Solution:

# import os
# os.chdir('C:\\Users\\srin\\OneDrive\\Desktop\\Python\\')

# Solution:

# import os
# os.chdir('C:\\Users\\srin\\OneDrive\\Desktop\\Python\\')

# Solution:

# import os
# os.chdir('C:\\Users\\srin\\OneDrive\\Desktop\\Python\\"
1936,Write a Python program to Find all close matches of input string from a list,"# Function to find all close matches of
# input string in given list of possible strings
from difflib import get_close_matches

def closeMatches(patterns, word):
print(get_close_matches(word, patterns))

# Driver program
if __name__ == ""__main__"":
word = 'appel'
patterns = ['ape', 'apple', 'peach', 'puppy']
closeMatches(patterns, word)","def find_close_matches(input_string, possibilities, n=3, cutoff=0.7):
    """"""
    :param input_string: str, the input string
    :param possibilities: list, a list of strings
    :param n: int, the number of strings to find
    :param cutoff: float, the minimum length of a match
    :return: list, a list of strings
    """"""
    if len(input_string) < n:
        return []
    if"
1937,Write a Python program to Find fibonacci series upto n using lambda,"from functools import reduce

fib = lambda n: reduce(lambda x, _: x+[x[-1]+x[-2]],
range(n-2), [0, 1])

print(fib(5))","def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

n = int(input(""Enter the number of terms: ""))
print(fib(n))

""""""

# Solution

def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:"
1938,Sorting a CSV object by dates in Python,import pandas as pd,"import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    file_data = list(csv_reader)

file_data.pop(0)

new_data = []
for i in range(len(file_data)):
    n_num = file_data[i][1]
    new_data.append(float(n_num))

new_data.sort()

print(new_data)"
1939,Overuse of lambda expressions in Python,"# Python program showing a use
# lambda function


# performing a addition of three number
x1 = (lambda x, y, z: (x + y) * z)(1, 2, 3)
print(x1)


# function using a lambda function
x2 = (lambda x, y, z: (x + y) if (z == 0) else (x * y))(1, 2, 3)
print(x2)","def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):"
1940,Difference of two columns in Pandas dataframe in Python,"import pandas as pd

# Create a DataFrame
df1 = { 'Name':['George','Andrea','micheal',
'maggie','Ravi','Xien','Jalpa'],
'score1':[62,47,55,74,32,77,86],
'score2':[45,78,44,89,66,49,72]}

df1 = pd.DataFrame(df1,columns= ['Name','score1','score2'])

print(""Given Dataframe :\n"", df1)

# getting Difference
df1['Score_diff'] = df1['score1'] - df1['score2']
print(""\nDifference of score1 and score2 :\n"", df1)","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pima-indians-diabetes.csv')

# print(df.head())

# print(df.columns)

# print(df.shape)

# print(df.info())

# print(df.describe())

# print(df.isnull().sum())

# print(df.isnull()."
1941,"Open computer drives like C, D or E using Python","# import library
import os

# take Input from the user
query = input(""Which drive you have to open ? C , D or E: \n"")

# Check the condition for
# opening the C drive
if ""C"" in query or ""c"" in query:
os.startfile(""C:"")

# Check the condition for
# opening the D drive
elif ""D"" in query or ""d"" in query:
os.startfile(""D:"")

# Check the condition for
# opening the D drive
elif ""E"" in query or ""e"" in query:
os.startfile(""E:"")

else:
print(""Wrong Input"")","def drive_solution(drive_name):
    if drive_name == ""C"":
        print(""C is the drive"")
    elif drive_name == ""D"":
        print(""D is the drive"")
    elif drive_name == ""E"":
        print(""E is the drive"")
    else:
        print(""Invalid drive name"")

drive_name = input(""Enter drive name: "")
drive_solution(drive_name)

""""""

# Solution

def drive_"
1942,Write a Python Dictionary | Check if binary representations of two numbers are anagram,"# function to Check if binary representations
# of two numbers are anagram
from collections import Counter

def checkAnagram(num1,num2):

# convert numbers into in binary
# and remove first two characters of
# output string because bin function
# '0b' as prefix in output string
bin1 = bin(num1)[2:]
bin2 = bin(num2)[2:]

# append zeros in shorter string
zeros = abs(len(bin1)-len(bin2))
if (len(bin1)>len(bin2)):
bin2 = zeros * '0' + bin2
else:
bin1 = zeros * '0' + bin1

# convert binary representations
# into dictionary
dict1 = Counter(bin1)
dict2 = Counter(bin2)

# compare both dictionaries
if dict1 == dict2:
print('Yes')
else:
print('No')

# Driver program
if __name__ == ""__main__"":
num1 = 8
num2 = 4
checkAnagram(num1,num2)
","def solution(a, b):
    if len(a)!= len(b):
        return False
    for i in range(len(a)):
        if a[i]!= b[i]:
            return False
    return True

print(solution(""abcd"", ""abcd""))
print(solution(""abcd"", ""abcdabcd""))
print(solution(""abcd"", ""abcdabcdabcd""))
print(solution(""abcd"", ""abcd"
1943,Write a Python Program to Print Lines Containing Given String in File,"# Python Program to Print Lines
# Containing Given String in File

# input file name with extension
file_name = input(""Enter The File's Name: "")

# using try catch except to
# handle file not found error.

# entering try block
try:

# opening and reading the file
file_read = open(file_name, ""r"")

# asking the user to enter the string to be
# searched
text = input(""Enter the String: "")

# reading file content line by line.
lines = file_read.readlines()

new_list = []
idx = 0

# looping through each line in the file
for line in lines:

# if line have the input string, get the index
# of that line and put the
# line into newly created list
if text in line:
new_list.insert(idx, line)
idx += 1

# closing file after reading
file_read.close()

# if length of new list is 0 that means
# the input string doesn't
# found in the text file
if len(new_list)==0:
print(""\n\"""" +text+ ""\"" is not found in \"""" +file_name+ ""\""!"")
else:

# displaying the lines
# containing given string
lineLen = len(new_list)
print(""\n**** Lines containing \"""" +text+ ""\"" ****\n"")
for i in range(lineLen):
print(end=new_list[i])
print()

# entering except block
# if input file doesn't exist
except :
print(""\nThe file doesn't exist!"")","import re

def solution(s):
    s = re.sub(r'\s+','', s)
    s = s.lower()
    s = s.split()
    s = [x for x in s if x not in set(string.punctuation)]
    s =''.join(s)
    s = s.split()
    s = [x for x in s if x not in set(string.punctuation)]
    s =''.join(s)"
1944,NumPy.histogram() Method in Python,"# Import libraries
import numpy as np


# Creating dataset
a = np.random.randint(100, size =(50))

# Creating histogram
np.histogram(a, bins = [0, 10, 20, 30, 40,
50, 60, 70, 80, 90,
100])

hist, bins = np.histogram(a, bins = [0, 10,
20, 30,
40, 50,
60, 70,
80, 90,
100])

# printing histogram
print()
print (hist)
print (bins)
print()","import numpy as np

# Create a histogram with the number of occurences of each value
# in the array
x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a histogram with the number of occurences of each value
# in the array
x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a histogram with the number of occurences of each"
1945,Write a Python program to find files having a particular extension using RegEx,"# import library
import re

# list of different types of file
filenames = [""gfg.html"", ""geeks.xml"",
""computer.txt"", ""geeksforgeeks.jpg""]

for file in filenames:
# search given pattern in the line
match = re.search(""\.xml$"", file)

# if match is found
if match:
print(""The file ending with .xml is:"",
file)","import re

def find_files(extension):
    files = []
    for file in os.listdir('.'):
        if file.endswith(extension):
            files.append(file)
    return files

print(find_files('.py'))

""""""

import re

def find_files(extension):
    files = []
    for file in os.listdir('.'):
        if file.endswith(extension):
            files"
1946,Write a Python program to Dictionary Values Mean,"# Python3 code to demonstrate working of
# Dictionary Values Mean
# Using loop + len()

# initializing dictionary
test_dict = {""Gfg"" : 4, ""is"" : 7, ""Best"" : 8, ""for"" : 6, ""Geeks"" : 10}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# loop to sum all values
res = 0
for val in test_dict.values():
res += val

# using len() to get total keys for mean computation
res = res / len(test_dict)

# printing result
print(""The computed mean : "" + str(res))","def mean(numbers):
    total = 0
    for i in numbers:
        total += i
    return total / len(numbers)

print(mean([1, 2, 3, 4, 5]))

""""""

def mean(numbers):
    total = 0
    for i in numbers:
        total += i
    return total / len(numbers)

print(mean([1, 2, 3, 4, 5]))

""""""

def mean(numbers):
    total ="
1947,How to iterate over rows in Pandas Dataframe in Python,"# importing pandas
import pandas as pd

# list of dicts
input_df = [{'name':'Sujeet', 'age':10},
{'name':'Sameer', 'age':11},
{'name':'Sumit', 'age':12}]

df = pd.DataFrame(input_df)
print('Original DataFrame: \n', df)


print('\nRows iterated using iterrows() : ')
for index, row in df.iterrows():
print(row['name'], row['age'])","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution 23"
1948,Write a Python program to right rotate n-numbers by 1,"def print_pattern(n):
for i in range(1, n+1, 1):
for j in range(1, n+1, 1):
# check that if index i is
# equal to j
if i == j:


print(j, end="" "")
# if index i is less than j
if i <= j:


for k in range(j+1, n+1, 1):
print(k, end="" "")


for p in range(1, j, 1):
print(p, end="" "")


# print new line
print()




# Driver's code
print_pattern(3)","def rotate(n,k):
    return n%k

n = int(input(""Enter the number to be rotated: ""))
k = int(input(""Enter the number of steps to be rotated: ""))

print(rotate(n,k))

""""""

def rotate(n,k):
    return n%k

n = int(input(""Enter the number to be rotated: ""))
k = int(input(""Enter the number of steps to be rotated: ""))

print"
1949,How to create filename containing date or time in Python,"# import module
from datetime import datetime

# get current date and time
current_datetime = datetime.now()
print(""Current date & time : "", current_datetime)

# convert datetime obj to string
str_current_datetime = str(current_datetime)

# create a file object along with extension
file_name = str_current_datetime+"".txt""
file = open(file_name, 'w')

print(""File created : "", file.name)
file.close()","import datetime

def solution(files):
    answer = []
    for file in files:
        with open(file, 'r') as f:
            date = f.readline().split()
            time = f.readline().split()
            date = datetime.datetime.strptime(date[0], '%Y-%m-%d %H:%M:%S')
            time = datetime.datetime.strptime(time[0], '%H:%M:"
1950,numpy.swapaxes() function | Python,"# Python program explaining
# numpy.swapaxes() function

# importing numpy as geek
import numpy as geek

arr = geek.array([[2, 4, 6]])

gfg = geek.swapaxes(arr, 0, 1)

print (gfg)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

a.swapaxes(0, 1)
b.swapaxes(0, 1)

a.swapaxes(1, 2)
b.swapaxes(1, 2)

a.swapaxes(2, 0)
b.sw"
1951,Convert JSON to dictionary in Python,"# Python program to demonstrate
# Conversion of JSON data to
# dictionary


# importing the module
import json

# Opening JSON file
with open('data.json') as json_file:
data = json.load(json_file)

# Print the type of data variable
print(""Type:"", type(data))

# Print the data of dictionary
print(""\nPeople1:"", data['people1'])
print(""\nPeople2:"", data['people2'])","import json

with open('/Users/srinivasan/Desktop/Python/json_to_dict.json') as f:
    data = json.load(f)

print(type(data))

print(data['a'])

print(data['a']['b'])

print(data['a']['b']['c'])

print(data['a']['b']['c']['d'])

print(data['a']['b']["
1952,Write a Python program to Convert Lists of List to Dictionary,"# Python3 code to demonstrate working of
# Convert Lists of List to Dictionary
# Using loop

# initializing list
test_list = [['a', 'b', 1, 2], ['c', 'd', 3, 4], ['e', 'f', 5, 6]]

# printing original list
print(""The original list is : "" + str(test_list))

# Convert Lists of List to Dictionary
# Using loop
res = dict()
for sub in test_list:
res[tuple(sub[:2])] = tuple(sub[2:])

# printing result
print(""The mapped Dictionary : "" + str(res))","l1 = [1, 2, 3, 4, 5]
l2 = [1, 2, 3, 4, 5]
l3 = [1, 2, 3, 4, 5]
l4 = [1, 2, 3, 4, 5]
l5 = [1, 2, 3, 4, 5]
l6 = [1, 2, 3, 4, 5]
l7 = [1, 2, 3, 4, 5]
l8 = [1, 2, 3, 4,"
1953,Write a Python program to Ways to convert array of strings to array of floats,"# Python code to demonstrate converting
# array of strings to array of floats
# using astype


import numpy as np


# initialising array
ini_array = np.array([""1.1"", ""1.5"", ""2.7"", ""8.9""])


# printing initial array
print (""initial array"", str(ini_array))


# converting to array of floats
# using np.astype
res = ini_array.astype(np.float)


# printing final result
print (""final array"", str(res))","def convert_to_float(arr):
    arr = arr.split()
    arr = [float(i) for i in arr]
    return arr

arr = [""1.2"", ""1.3"", ""1.4"", ""1.5"", ""1.6"", ""1.7"", ""1.8"", ""1.9"", ""2.0"", ""2.1"", ""2.2"", ""2.3"", ""2.4"", ""2.5"", ""2.6"
1954,Scrape LinkedIn Using Selenium And Beautiful Soup in Python,"from selenium import webdriver
from bs4 import BeautifulSoup
import time

# Creating a webdriver instance
driver = webdriver.Chrome(""Enter-Location-Of-Your-Web-Driver"")
# This instance will be used to log into LinkedIn

# Opening linkedIn's login page
driver.get(""https://linkedin.com/uas/login"")

# waiting for the page to load
time.sleep(5)

# entering username
username = driver.find_element_by_id(""username"")

# In case of an error, try changing the element
# tag used here.

# Enter Your Email Address
username.send_keys(""User_email"")

# entering password
pword = driver.find_element_by_id(""password"")
# In case of an error, try changing the element
# tag used here.

# Enter Your Password
pword.send_keys(""User_pass"")

# Clicking on the log in button
# Format (syntax) of writing XPath -->
# //tagname[@attribute='value']
driver.find_element_by_xpath(""//button[@type='submit']"").click()
# In case of an error, try changing the
# XPath used here.","import requests
from bs4 import BeautifulSoup

url = ""https://www.linkedin.com/jobs/search/?f_LF=f_AL&f_LS=f_AL&f_LK=f_AL&f_JSEARCH=f_AL&f_JSCENTER=f_AL&f_JSCORE_MIN=0&f_JSCORE_MAX=100&f_JSCORE_SORT=1&f_JSCORE_SORT_DIR"
1955,Write a Python program to Closest Pair to Kth index element in Tuple,"# Python3 code to demonstrate working of
# Closest Pair to Kth index element in Tuple
# Using enumerate() + loop

# initializing list
test_list = [(3, 4), (78, 76), (2, 3), (9, 8), (19, 23)]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing tuple
tup = (17, 23)

# initializing K
K = 1

# Closest Pair to Kth index element in Tuple
# Using enumerate() + loop
min_dif, res = 999999999, None
for idx, val in enumerate(test_list):
dif = abs(tup[K - 1] - val[K - 1])
if dif < min_dif:
min_dif, res = dif, idx

# printing result
print(""The nearest tuple to Kth index element is : "" + str(test_list[res]))","def closest_pair(tup, k):
    """"""
    :type tup: tuple
    :type k: int
    :rtype: tuple
    """"""
    # Your code here
    return tup[k]
    #raise NotImplementedError

# This code is contributed by Neelam Yadav"
1956,Write a Python program to Substring presence in Strings List,"# Python3 code to demonstrate working of
# Substring presence in Strings List
# Using loop

# initializing lists
test_list1 = [""Gfg"", ""is"", ""Best""]
test_list2 = [""I love Gfg"", ""Its Best for Geeks"", ""Gfg means CS""]

# printing original lists
print(""The original list 1 : "" + str(test_list1))
print(""The original list 2 : "" + str(test_list2))

# using loop to iterate
res = []
for ele in test_list1 :
temp = False

# inner loop to check for
# presence of element in any list
for sub in test_list2 :
if ele in sub:
temp = True
break
res.append(temp)

# printing result
print(""The match list : "" + str(res))","def solution(str1, str2):
    # Write your code here
    if len(str1) > len(str2):
        return len(str1) - len(str2)
    else:
        return len(str2) - len(str1)

print(solution(""abc"", ""abc""))
print(solution(""abc"", ""abcd""))
print(solution(""abc"", ""abcdabcdabcd""))
print(solution(""abc"", ""abcabcabcabc""))"
1957,Write a Python Program to Delete Specific Line from File,"# deleting a line
# based on the position


# opening the file in
# reading mode


try:
with open('months.txt', 'r') as fr:
# reading line by line
lines = fr.readlines()

# pointer for position
ptr = 1

# opening in writing mode
with open('months.txt', 'w') as fw:
for line in lines:

# we want to remove 5th line
if ptr != 5:
fw.write(line)
ptr += 1
print(""Deleted"")

except:
print(""Oops! something error"")","#!/usr/bin/python3

import os
import sys
import re
import time
import datetime
import subprocess
import json
import requests
import urllib.request
import urllib.parse
import urllib.error
import urllib.request
import urllib.parse
import urllib.error
import urllib.request
import urllib.error
import urllib.parse
import urllib.error
import urllib.request
import urllib."
1958,Write a Python program to Append Dictionary Keys and Values ( In order ) in dictionary,"# Python3 code to demonstrate working of
# Append Dictionary Keys and Values ( In order ) in dictionary
# Using values() + keys() + list()

# initializing dictionary
test_dict = {""Gfg"" : 1, ""is"" : 3, ""Best"" : 2}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# + operator is used to perform adding keys and values
res = list(test_dict.keys()) + list(test_dict.values())

# printing result
print(""The ordered keys and values : "" + str(res))","def solution(d):
    for i in d:
        print(i, end="" "")
    print()
    for i in d:
        print(d[i], end="" "")
    print()

d = {'a': 1, 'b': 2, 'c': 3}
solution(d)

""""""

def solution(d):
    for i in d:
        print(i, end="" "")
    print()
    for i in"
1959,Write a Python program to Numpy np.polygrid2d() method,"# Python program explaining
# numpy.polygrid2d() method

# importing numpy as np

import numpy as np
from numpy.polynomial.polynomial import polygrid2d

# Input polynomial series coefficients
c = np.array([[1, 3, 5], [2, 4, 6]])

# using np.polygrid2d() method
ans = polygrid2d([7, 9], [8, 10], c)
print(ans)","import numpy as np

x = np.arange(0, 10, 0.1)
y = np.arange(0, 10, 0.1)

# Create a 2D grid
X, Y = np.meshgrid(x, y)

# Create a 2D array of coefficients
coefficients = np.array([[1, 2, 3], [4, 5, 6]])

# Create a 2D array of values
values = np.array([1,"
1960,Apply uppercase to a column in Pandas dataframe in Python,"# Import pandas package
import pandas as pd

# making data frame
data = pd.read_csv(""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv"")

# calling head() method
# storing in new variable
data_top = data.head(10)

# display
data_top","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution 23"
1961,Flattening JSON objects in Python,"# for a array value of a key
unflat_json = {'user' :
{'Rachel':
{'UserID':1717171717,
'Email': 'rachel1999@gmail.com',
'friends': ['John', 'Jeremy', 'Emily']
}
}
}

# Function for flattening
# json
def flatten_json(y):
out = {}

def flatten(x, name =''):

# If the Nested key-value
# pair is of dict type
if type(x) is dict:

for a in x:
flatten(x[a], name + a + '_')

# If the Nested key-value
# pair is of list type
elif type(x) is list:

i = 0

for a in x:
flatten(a, name + str(i) + '_')
i += 1
else:
out[name[:-1]] = x

flatten(y)
return out

# Driver code
print(flatten_json(unflat_json))","import json

# JSON object
# {
#   ""name"": ""John"",
#   ""age"": 30,
#   ""married"": True,
#   ""divorced"": False,
#   ""children"": [
#     {""name"": ""John"", ""age"": 30},
#     {""name"": ""Mary"", ""age"": 20}
#   ]
# }

# JSON object
# {
#   ""name"": ""John"",
#   ""age"": 30,
#   ""married"": True,"
1962,Finding the largest file in a directory using Python,"import os


# folder path input
print(""Enter folder path"")
path = os.path.abspath(input())

# for storing size of each
# file
size = 0

# for storing the size of
# the largest file
max_size = 0

# for storing the path to the
# largest file
max_file =""""

# walking through the entire folder,
# including subdirectories

for folder, subfolders, files in os.walk(path):

# checking the size of each file
for file in files:
size = os.stat(os.path.join( folder, file )).st_size

# updating maximum size
if size>max_size:
max_size = size
max_file = os.path.join( folder, file )

print(""The largest file is: ""+max_file)
print('Size: '+str(max_size)+' bytes')","import os

def largestFile(directory):
    # Open the file for reading
    f = open(directory, 'r')
    # Read the file line by line
    for line in f:
        # If the line is not empty
        if line:
            # Split the line into words
            words = line.split()
            # If the word is the first word
            if words[0] == 'File':
                # Open the file for writing
                w = open(words[1], 'w')"
1963,Write a Python program to Consecutive Kth column Difference in Tuple List,"# Python3 code to demonstrate working of
# Consecutive Kth column Difference in Tuple List
# Using loop

# initializing list
test_list = [(5, 4, 2), (1, 3, 4), (5, 7, 8), (7, 4, 3)]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing K
K = 1

res = []
for idx in range(0, len(test_list) - 1):

# getting difference using abs()
res.append(abs(test_list[idx][K] - test_list[idx + 1][K]))

# printing result
print(""Resultant tuple list : "" + str(res))","def consecutive_kth_column_difference(arr, k):
    # Write your code here
    return arr[k] - arr[k - 1]

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
k = 3
print(consecutive_kth_column_difference(arr, k))

""""""

def consecutive_kth_column_difference(arr, k):
    # Write your code here"
1964,"Calculate the average, variance and standard deviation in Python using NumPy","# Python program to get average of a list

# Importing the NumPy module
import numpy as np

# Taking a list of elements
list = [2, 4, 4, 4, 5, 5, 7, 9]

# Calculating average using average()
print(np.average(list))","import numpy as np

# Calculate the average, variance and standard deviation of a sequence of numbers
# Use np.mean() and np.var()
# Use np.std()

# Create a NumPy array of numbers
numbers = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Calculate the average, variance and standard deviation of the numbers in the array
avg = np.mean(numbers)
print(""The average"
1965,Write a Python Program for KMP Algorithm for Pattern Searching,"# Python program for KMP Algorithm
def KMPSearch(pat, txt):
M = len(pat)
N = len(txt)

# create lps[] that will hold the longest prefix suffix
# values for pattern
lps = [0]*M
j = 0 # index for pat[]

# Preprocess the pattern (calculate lps[] array)
computeLPSArray(pat, M, lps)

i = 0 # index for txt[]
while i < N:
if pat[j] == txt[i]:
i += 1
j += 1

if j == M:
print ""Found pattern at index "" + str(i-j)
j = lps[j-1]

# mismatch after j matches
elif i < N and pat[j] != txt[i]:
# Do not match lps[0..lps[j-1]] characters,
# they will match anyway
if j != 0:
j = lps[j-1]
else:
i += 1

def computeLPSArray(pat, M, lps):
len = 0 # length of the previous longest prefix suffix

lps[0] # lps[0] is always 0
i = 1

# the loop calculates lps[i] for i = 1 to M-1
while i < M:
if pat[i]== pat[len]:
len += 1
lps[i] = len
i += 1
else:
# This is tricky. Consider the example.
# AAACAAAA and i = 7. The idea is similar
# to search step.
if len != 0:
len = lps[len-1]

# Also, note that we do not increment i here
else:
lps[i] = 0
i += 1

txt = ""ABABDABACDABABCABAB""
pat = ""ABABCABAB""
KMPSearch(pat, txt)

# This code is contributed by Bhavya Jain","def kmp(pattern, text):
    #declare a variable to store the index of the pattern
    #declare a variable to store the index of the text
    #declare a variable to store the index of the pattern
    #declare a variable to store the index of the text
    #declare a variable to store the index of the pattern
    #declare a variable to store the index of the text
    #declare a variable to store the index of the pattern
    #declare a variable to store"
1966,Write a Python program to Check if two strings are Rotationally Equivalent,"# Python3 code to demonstrate working of
# Check if two strings are Rotationally Equivalent
# Using loop + string slicing

# initializing strings
test_str1 = 'geeks'
test_str2 = 'eksge'

# printing original strings
print(""The original string 1 is : "" + str(test_str1))
print(""The original string 2 is : "" + str(test_str2))

# Check if two strings are Rotationally Equivalent
# Using loop + string slicing
res = False
for idx in range(len(test_str1)):
if test_str1[idx: ] + test_str1[ :idx] == test_str2:
res = True
break

# printing result
print(""Are two strings Rotationally equal ? : "" + str(res))","def isRotation(s1, s2):
    if len(s1)!= len(s2):
        return False
    for i in range(len(s1)):
        if s1[i]!= s2[i]:
            return False
    return True

print(isRotation(""abcd"", ""dcba""))
print(isRotation(""abcd"", ""abcd""))
print(isRotation(""abcd"", ""abcd""))
print(isRotation"
1967,numpy.percentile() in python,"# Python Program illustrating
# numpy.percentile() method

import numpy as np

# 1D array
arr = [20, 2, 7, 1, 34]
print(""arr : "", arr)
print(""50th percentile of arr : "",
np.percentile(arr, 50))
print(""25th percentile of arr : "",
np.percentile(arr, 25))
print(""75th percentile of arr : "",
np.percentile(arr, 75))","import numpy as np

def percentile(arr, per):
    arr = np.asarray(arr)
    arr = arr.astype(np.float64)
    arr = np.sort(arr)
    arr = arr[::-1]
    arr = arr[:per]
    return arr

print(percentile([1,2,3,4,5,6,7,8,9,10], 10))

""""""

# %%"
1968,Write a Python program to Similar characters Strings comparison,"# Python3 code to demonstrate working of
# Similar characters Strings comparison
# Using split() + sorted()

# initializing strings
test_str1 = 'e:e:k:s:g'
test_str2 = 'g:e:e:k:s'

# printing original strings
print(""The original string 1 is : "" + str(test_str1))
print(""The original string 2 is : "" + str(test_str2))

# initializing delim
delim = ':'

# == operator is used for comparison
res = sorted(test_str1.split(':')) == sorted(test_str2.split(':'))

# printing result
print(""Are strings similar : "" + str(res))","def similar_char(s1, s2):
    if len(s1)!= len(s2):
        return False
    for i in range(len(s1)):
        if s1[i]!= s2[i]:
            return False
    return True

print(similar_char('abc', 'abc'))
print(similar_char('abc', 'abcd'))
print(similar_char('abc', 'ab'))
print(similar_char('abc', 'a'))"
1969,Write a Python program to print even length words in a string,"# Python3 program to print
# even length words in a string

def printWords(s):

# split the string
s = s.split(' ')

# iterate in words of string
for word in s:

# if length is even
if len(word)%2==0:
print(word)


# Driver Code
s = ""i am muskan""
printWords(s)","def even_length_words(s):
    for i in range(len(s)):
        if s[i] % 2 == 0:
            print(s[i])

s = input(""Enter a string: "")
even_length_words(s)

""""""

# Solution:

def even_length_words(s):
    for i in range(len(s)):
        if s[i] % 2 == 0:
            print(s[i])

s"
1970,Write a Python program to Reverse Dictionary Keys Order,"# Python3 code to demonstrate working of
# Reverse Dictionary Keys Order
# Using OrderedDict() + reversed() + items()
from collections import OrderedDict

# initializing dictionary
test_dict = {'gfg' : 4, 'is' : 2, 'best' : 5}

# printing original dictionary
print(""The original dictionary : "" + str(test_dict))

# Reverse Dictionary Keys Order
# Using OrderedDict() + reversed() + items()
res = OrderedDict(reversed(list(test_dict.items())))

# printing result
print(""The reversed order dictionary : "" + str(res))","def reverse_dict(d):
    for i in d:
        print(i, end="" "")
    print()

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}
reverse_dict(d)

""""""

def reverse_dict(d):
    for i in d:
        print(i, end="" "")
    print()

d = {'a': 1, 'b': 2, '"
1971,Write a Python program to Stack using Doubly Linked List,"# A complete working Python program to demonstrate all
# stack operations using a doubly linked list

# Node class
class Node:

# Function to initialise the node object
def __init__(self, data):
self.data = data # Assign data
self.next = None # Initialize next as null
self.prev = None # Initialize prev as null

# Stack class contains a Node object
class Stack:
# Function to initialize head
def __init__(self):
self.head = None

# Function to add an element data in the stack
def push(self, data):

if self.head is None:
self.head = Node(data)
else:
new_node = Node(data)
self.head.prev = new_node
new_node.next = self.head
new_node.prev = None
self.head = new_node


# Function to pop top element and return the element from the stack
def pop(self):

if self.head is None:
return None
elif self.head.next is None:
temp = self.head.data
self.head = None
return temp
else:
temp = self.head.data
self.head = self.head.next
self.head.prev = None
return temp




# Function to return top element in the stack
def top(self):

return self.head.data


# Function to return the size of the stack
def size(self):

temp = self.head
count = 0
while temp is not None:
count = count + 1
temp = temp.next
return count


# Function to check if the stack is empty or not
def isEmpty(self):

if self.head is None:
return True
else:
return False


# Function to print the stack
def printstack(self):

print(""stack elements are:"")
temp = self.head
while temp is not None:
print(temp.data, end =""->"")
temp = temp.next


# Code execution starts here
if __name__=='__main__':

# Start with the empty stack
stack = Stack()

# Insert 4 at the beginning. So stack becomes 4->None
print(""Stack operations using Doubly LinkedList"")
stack.push(4)

# Insert 5 at the beginning. So stack becomes 4->5->None
stack.push(5)

# Insert 6 at the beginning. So stack becomes 4->5->6->None
stack.push(6)

# Insert 7 at the beginning. So stack becomes 4->5->6->7->None
stack.push(7)

# Print the stack
stack.printstack()

# Print the top element
print(""\nTop element is "", stack.top())

# Print the stack size
print(""Size of the stack is "", stack.size())

# pop the top element
stack.pop()

# pop the top element
stack.pop()

# two elements are popped
# Print the stack
stack.printstack()

# Print True if the stack is empty else False
print(""\nstack is empty:"", stack.isEmpty())

#This code is added by Suparna Raut","def solve(self, head):
    if head is None:
        return head
    if head.next is None:
        return head
    slow = head
    fast = head.next
    while fast.next is not None:
        slow = slow.next
        fast = fast.next.next
    slow.next = None
    return slow"
1972,Write a Python Program to print a number diamond of any given size N in Rangoli Style,"def print_diamond(size):

# print the first triangle
# (the upper half)
for i in range (size):

# print from first row till
# middle row
rownum = i + 1
num_alphabet = 2 * rownum - 1
space_in_between_alphabets = num_alphabet - 1

total_spots = (2 * size - 1) * 2 - 1
total_space = total_spots - num_alphabet

space_leading_trailing = total_space - space_in_between_alphabets
lead_space = int(space_leading_trailing / 2)
trail_space = int(space_leading_trailing / 2)

# print the leading spaces
for j in range(lead_space):
print('-', end ='')

# determine the middle character
mid_char = (1 + size - 1) - int(num_alphabet / 2)

# start with the last character
k = 1 + size - 1
is_alphabet_printed = False
mid_char_reached = False

# print the numbers alternated by '-'
for j in range(num_alphabet + space_in_between_alphabets):

if not is_alphabet_printed:
print(str(k), end ='')
is_alphabet_printed = True

if k == mid_char:
mid_char_reached = True

if mid_char_reached == True:
k += 1

else:
k -= 1

else:
print('-', end ='')
is_alphabet_printed = False

# print the trailing spaces
for j in range(trail_space):
print('-', end ='')

# go to the next line
print('')

# print the rows after middle row
# till last row (the second triangle
# which is inverted, i.e., the lower half)
for i in range(size + 1, 2 * size):

rownum = i
num_alphabet = 2 * (2 * size - rownum) - 1
space_in_between_alphabets = num_alphabet - 1

total_spots = (2 * size - 1) * 2 - 1
total_space = total_spots - num_alphabet

space_leading_trailing = total_space - space_in_between_alphabets
lead_space = int(space_leading_trailing / 2)
trail_space = int(space_leading_trailing / 2)

# print the leading spaces
for j in range(lead_space):
print('-', end ='')

mid_char = (1 + size - 1) - int(num_alphabet / 2)

# start with the last char
k = 1 + size - 1
is_alphabet_printed = False
mid_char_reached = False

# print the numbers alternated by '-'
for j in range(num_alphabet + space_in_between_alphabets):

if not is_alphabet_printed:
print(str(k), end ='')
is_alphabet_printed = True

if k == mid_char:
mid_char_reached = True

if mid_char_reached == True:
k += 1

else:
k -= 1

else:
print('-', end ='')
is_alphabet_printed = False

# print the trailing spaces
for j in range(trail_space):
print('-', end ='')

# go to the next line
print('')

# Driver Code
if __name__ == '__main__':

n = 5
print_diamond(n)","def print_diamond(n):
    for i in range(n):
        for j in range(n-i):
            print('*', end='')
        for j in range(i+1):
            print('*', end='')
        print()

n = int(input(""Enter the size of the diamond: ""))
print_diamond(n)

""""""

# Solution:

def print_diamond(n):
    for"
1973,How To Automate Google Chrome Using Foxtrot and Python,"# Import the required modules
from selenium import webdriver
import time

# Main Function
if __name__ == '__main__':

# Provide the email and password
email = ''
password = ''

options = webdriver.ChromeOptions()
options.add_argument(""--start-maximized"")

# Provide the path of chromedriver
# present on your system.
driver = webdriver.Chrome(
executable_path=""C:/chromedriver/chromedriver.exe"",
chrome_options=options)
driver.set_window_size(1920, 1080)

# Send a get request to the url
driver.get('https://auth.geeksforgeeks.org/')
time.sleep(5)

# Finds the input box by name
# in DOM tree to send both
# the provided email and password in it.
driver.find_element_by_name('user').send_keys(email)
driver.find_element_by_name('pass').send_keys(password)

# Find the signin button and click on it.
driver.find_element_by_css_selector(
'button.btn.btn-green.signin-button').click()
time.sleep(5)

# Returns the list of elements
# having the following css selector.
container = driver.find_elements_by_css_selector(
'div.mdl-cell.mdl-cell--9-col.mdl-cell--12-col-phone.textBold')

# Extracts the text from name,
# institution, email_id css selector.
name = container[0].text
try:
institution = container[1].find_element_by_css_selector('a').text
except:
institution = container[1].text
email_id = container[2].text

# Output
print({""Name"": name, ""Institution"": institution,
""Email ID"": email})

# Quits the driver
driver.quit()","import webbrowser

webbrowser.open('https://www.google.com/')

""""""

import webbrowser

webbrowser.open('https://www.google.com/')"
1974,Program to Print K using Alphabets in Python,"// C++ Program to design the
// above pattern of K using alphabets
#include<bits/stdc++.h>
using namespace std;


// Function to print
// the above Pattern
void display(int n)
{
int v = n;


// This loop is used
// for rows and prints
// the alphabets in
// decreasing order
while (v >= 0)
{
int c = 65;


// This loop is used
// for columns
for(int j = 0; j < v + 1; j++)
{
// chr() function converts the
// number to alphabet
cout << char(c + j) << "" "";
}


v--;
cout << endl;
}


// This loop is again used
// to rows and prints the
// half remaining pattern in
// increasing order
for(int i = 0; i < n + 1; i++)
{
int c = 65;


for(int j = 0; j < i + 1; j++)
{
cout << char(c + j) << "" "";
}
cout << endl;
}
}


// Driver code
int main()
{
int n = 5;
display(n);
return 0;
}


// This code is contributed by divyeshrabadiya07","def print_k(n,k):
    for i in range(n):
        for j in range(k):
            print(chr(i+97),end="" "")
        print()

n = int(input(""Enter the number of elements in the array: ""))
k = int(input(""Enter the number of elements to print: ""))
print_k(n,k)

""""""

# Solution

def print_k(n,k):
    for i in range(n):"
1975,How to drop one or multiple columns in Pandas Dataframe in Python,"# Import pandas package
import pandas as pd

# create a dictionary with five fields each
data = {
'A':['A1', 'A2', 'A3', 'A4', 'A5'],
'B':['B1', 'B2', 'B3', 'B4', 'B5'],
'C':['C1', 'C2', 'C3', 'C4', 'C5'],
'D':['D1', 'D2', 'D3', 'D4', 'D5'],
'E':['E1', 'E2', 'E3', 'E4', 'E5'] }

# Convert the dictionary into DataFrame
df = pd.DataFrame(data)

df","import pandas as pd

df = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""B"": [10, 20, 30, 40, 50]})

df.drop(""B"", axis=1)

df.drop(""A"", axis=0)

df.drop(""B"", axis=1, inplace=True)

df.drop(""A"", axis=0, inplace=True)

df.drop(""B"", axis=1"
1976,Write a Python Program to Replace Text in a File,"# Python program to replace text in a file
s = input(""Enter text to replace the existing contents:"")
f = open(""file.txt"", ""r+"")


# file.txt is an example here,
# it should be replaced with the file name
# r+ mode opens the file in read and write mode
f.truncate(0)
f.write(s)
f.close()
print(""Text successfully replaced"")","import os

def replace_text(file_name, text, replacement_text):
    with open(file_name, 'r') as file:
        content = file.read()
        content = content.replace(replacement_text, text)
        with open(file_name, 'w') as file:
            file.write(content)

replace_text('sample.txt', 'Hello World', 'Hello World')

""""""

import os

def replace_text(file_name, text,"
1977,Remove multiple elements from a list in Python,"# Python program to remove multiple
# elements from a list


# creating a list
list1 = [11, 5, 17, 18, 23, 50]


# Iterate each element in list
# and add them in variable total
for ele in list1:
if ele % 2 == 0:
list1.remove(ele)


# printing modified list
print(""New list after removing all even numbers: "", list1)","def remove_multiple_elements(lst, element):
    lst.remove(element)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
remove_multiple_elements(lst, 5)
print(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
remove_multiple_elements(lst, 5)
print(lst)

lst = [1,"
1978,How to get column names in Pandas dataframe in Python,"# Import pandas package
import pandas as pd

# making data frame
data = pd.read_csv(""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv"")

# calling head() method
# storing in new variable
data_top = data.head()

# display
data_top","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/iris.csv')

df.columns

df.columns = ['sepal_length','sepal_width', 'petal_length', 'petal_width']

df.head()

df.columns

df.columns = ['sepal_length','sepal_width', 'petal_length', 'pet"
1979,Nested Lambda Function in Python,"# Python program to demonstrate
# nested lambda functions


f = lambda a = 2, b = 3:lambda c: a+b+c

o = f()
print(o(4))","def nested_lambda(x):
    def inner_lambda(y):
        return x * y
    return inner_lambda

# Solution:

# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

# Solution 11:

# Solution 12:

# Solution 13:

# Solution 14:

# Solution"
1980,Write a Python program to Sort Dictionary key and values List,"# Python3 code to demonstrate working of
# Sort Dictionary key and values List
# Using loop + dictionary comprehension

# initializing dictionary
test_dict = {'gfg': [7, 6, 3],
'is': [2, 10, 3],
'best': [19, 4]}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# Sort Dictionary key and values List
# Using loop + dictionary comprehension
res = dict()
for key in sorted(test_dict):
res[key] = sorted(test_dict[key])

# printing result
print(""The sorted dictionary : "" + str(res))","def sort_dict(dict):
    for i in dict:
        dict[i].sort()
    return dict

# Driver Code
dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}
print(sort_dict(dict))

""""""

""""""

def sort_dict(dict):
    for i in dict:
        dict[i].sort()
    return dict

# Driver Code
dict = {"
1981,Write a Python program to Remove punctuation from string,"# Python3 code to demonstrate working of
# Removing punctuations in string
# Using loop + punctuation string


# initializing string
test_str = ""Gfg, is best : for ! Geeks ;""


# printing original string
print(""The original string is : "" + test_str)


# initializing punctuations string
punc = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''


# Removing punctuations in string
# Using loop + punctuation string
for ele in test_str:
if ele in punc:
test_str = test_str.replace(ele, """")


# printing result
print(""The string after punctuation filter : "" + test_str)","def remove_punctuation(string):
    punctuation = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
    for char in string:
        if char not in punctuation:
            string = string.replace(char, '')
    return string

print(remove_punctuation('This is a string with at least one non-punctuation character'))

'''

'''

def remove_punctuation(string):"
1982,Reset Index in Pandas Dataframe in Python,"# Import pandas package
import pandas as pd

# Define a dictionary containing employee data
data = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj', 'Geeku'],
'Age':[27, 24, 22, 32, 15],
'Address':['Delhi', 'Kanpur', 'Allahabad', 'Kannauj', 'Noida'],
'Qualification':['Msc', 'MA', 'MCA', 'Phd', '10th'] }

# Convert the dictionary into DataFrame
df = pd.DataFrame(data)

df","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Score': [85, 90, 95, 100, 95, 90]})

df.reset_index(inplace=True)

df.reset_index(inplace=True, drop=True)

df.reset_index(inplace=True, drop=True)

df.reset_index(inplace=True"
1983,Write a Python program to numpy.nanmean() function,"# Python code to demonstrate the
# use of numpy.nanmean
import numpy as np

# create 2d array with nan value.
arr = np.array([[20, 15, 37], [47, 13, np.nan]])

print(""Shape of array is"", arr.shape)

print(""Mean of array without using nanmean function:"",
np.mean(arr))

print(""Using nanmean function:"", np.nanmean(arr))","import numpy as np

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
y = np.array([2, 4, 6, 8, 10, 12, 14, 16, 18, 20])

print(np.nanmean(x))
print(np.nanmean(y))

# Output:
# 3.0
# 3.0
# 3.0

# %%
# Solution:

import numpy as np"
1984,Write a Python program to Row-wise element Addition in Tuple Matrix,"# Python3 code to demonstrate working of
# Row-wise element Addition in Tuple Matrix
# Using enumerate() + list comprehension

# initializing list
test_list = [[('Gfg', 3), ('is', 3)], [('best', 1)], [('for', 5), ('geeks', 1)]]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing Custom eles
cus_eles = [6, 7, 8]

# Row-wise element Addition in Tuple Matrix
# Using enumerate() + list comprehension
res = [[sub + (cus_eles[idx], ) for sub in val] for idx, val in enumerate(test_list)]

# printing result
print(""The matrix after row elements addition : "" + str(res))","def add_tuple(tup1, tup2):
    return tuple(tup1[i] + tup2[i] for i in range(len(tup1)))

tup1 = (1, 2, 3, 4, 5)
tup2 = (6, 7, 8, 9, 10)

print(add_tuple(tup1, tup2))

""""""

def add_tuple(tup1, tup2):"
1985,Write a Python program to Assigning Subsequent Rows to Matrix first row elements,"# Python3 code to demonstrate working of
# Assigning Subsequent Rows to Matrix first row elements
# Using dictionary comprehension

# initializing list
test_list = [[5, 8, 9], [2, 0, 9], [5, 4, 2], [2, 3, 9]]

# printing original list
print(""The original list : "" + str(test_list))

# pairing each 1st col with next rows in Matrix
res = {test_list[0][ele] : test_list[ele + 1] for ele in range(len(test_list) - 1)}

# printing result
print(""The Assigned Matrix : "" + str(res))","def solve(matrix):
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j] == 0:
                matrix[i][j] = 1
            else:
                matrix[i][j] = 0
    return matrix

matrix = [[1, 2, 3, 4, 5],
          [6, 7, 8, 9, 10],
          [11, 12,"
1986,Write a Python program to Split by repeating substring,"# Python3 code to demonstrate working of
# Split by repeating substring
# Using * operator + len()

# initializing string
test_str = ""gfggfggfggfggfggfggfggfg""

# printing original string
print(""The original string is : "" + test_str)

# initializing target
K = 'gfg'

# Split by repeating substring
# Using * operator + len()
temp = len(test_str) // len(str(K))
res = [K] * temp

# printing result
print(""The split string is : "" + str(res))","def split_by_repeating_substring(string, substring):
    return string.split(substring)

""""""

def split_by_repeating_substring(string, substring):
    return string.split(substring)

print(split_by_repeating_substring(""abcdefg"", ""abc""))
print(split_by_repeating_substring(""abcdefg"", ""abc""))
print(split_by_repeating_substring(""abcdefg"", ""abc""))"
1987,Write a Python program to Ways to remove multiple empty spaces from string List,"# Python3 code to demonstrate working of
# Remove multiple empty spaces from string List
# Using loop + strip()

# initializing list
test_list = ['gfg', ' ', ' ', 'is', ' ', 'best']

# printing original list
print(""The original list is : "" + str(test_list))

# Remove multiple empty spaces from string List
# Using loop + strip()
res = []
for ele in test_list:
if ele.strip():
res.append(ele)

# printing result
print(""List after filtering non-empty strings : "" + str(res))","def remove_multiple_empty_spaces(list):
    for i in range(len(list)):
        if list[i] == "" "":
            list.remove(list[i])
    return list

print(remove_multiple_empty_spaces([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def remove_multiple_empty_spaces(list):
    for i in range(len(list)):"
1988,Ways to convert string to dictionary in Python,"# Python implementation of converting
# a string into a dictionary

# initialising string
str = "" Jan = January; Feb = February; Mar = March""

# At first the string will be splitted
# at the occurence of ';' to divide items
# for the dictionaryand then again splitting
# will be done at occurence of '=' which
# generates key:value pair for each item
dictionary = dict(subString.split(""="") for subString in str.split("";""))

# printing the generated dictionary
print(dictionary)","def solution(s):
    d = {}
    for i in s:
        if i not in d:
            d[i] = 1
        else:
            d[i] += 1
    return d

print(solution(""abcdefg""))
print(solution(""abcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdef"
1989,Write a Python program to Sum of number digits in List,"# Python3 code to demonstrate
# Sum of number digits in List
# using loop + str()


# Initializing list
test_list = [12, 67, 98, 34]


# printing original list
print(""The original list is : "" + str(test_list))


# Sum of number digits in List
# using loop + str()
res = []
for ele in test_list:
sum = 0
for digit in str(ele):
sum += int(digit)
res.append(sum)

# printing result
print (""List Integer Summation : "" + str(res))","def sum_digits(n):
    return sum(int(i) for i in str(n))

n = int(input(""Enter a number: ""))
print(sum_digits(n))

""""""

# Solution 1

def sum_digits(n):
    return sum(int(i) for i in str(n))

n = int(input(""Enter a number: ""))
print(sum_digits(n))

# Solution 2

def sum_dig"
1990,Get the index of maximum value in DataFrame column in Python,"# importing pandas module
import pandas as pd

# making data frame
df = pd.read_csv(""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv"")

df.head(10)","def max_value(df):
    max_value = df.max()
    return max_value

# Call max_value function
max_value = max_value(df)
print(max_value)

# Call max_value function
max_value = max_value(df)
print(max_value)

# Call max_value function
max_value = max_value(df)
print(max_value)

# Call max_value function
max_value = max_"
1991,Getting the time since OS startup using Python,"# for using os.popen()
import os


# sending the uptime command as an argument to popen()
# and saving the returned result (after truncating the trailing \n)
t = os.popen('uptime -p').read()[:-1]


print(t)","def time_since_startup(func):
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        print(f""Finished {func.__name__} in {end - start:.2f} seconds"")
        return result
    return wrapper

@time_since_startup
def display_hi():
    print(""Hello from the function"")

display_hi()

""""""

#"
1992,Write a Python program to Get Function Signature,"from inspect import signature


# declare a function gfg with some
# parameter
def gfg(x:str, y:int):
pass

# with the help of signature function
# store signature of the function in
# variable t
t = signature(gfg)

# print the signature of the function
print(t)

# print the annonation of the parameter
# of the function
print(t.parameters['x'])

# print the annonation of the parameter
# of the function
print(t.parameters['y'].annotation)","def get_signature(func):
    return inspect.signature(func).parameters

def get_signature(func):
    return inspect.signature(func).return_annotation

def get_signature(func):
    return inspect.signature(func).return_annotation

def get_signature(func):
    return inspect.signature(func).return_annotation

def get_signature(func):
    return inspect.signature(func).return_annotation

def get"
1993,numpy.diff() in Python,"# Python program explaining
# numpy.diff() method



# importing numpy
import numpy as geek


# input array
arr = geek.array([1, 3, 4, 7, 9])

print(""Input array : "", arr)
print(""First order difference : "", geek.diff(arr))
print(""Second order difference : "", geek.diff(arr, n = 2))
print(""Third order difference : "", geek.diff(arr, n = 3))","import numpy as np

x = np.array([1, 2, 3, 4, 5])
y = np.array([6, 7, 8, 9, 10])

print(np.diff(x))

# Output:
# [1, 2, 3, 4, 5]

print(np.diff(y))
# [6, 7, 8, 9, 10]

# Output:
# [1, 2, 3, 4, 5]

# Output:
# [1, 2,"
1994,Compute the Kronecker product of two multidimension NumPy arrays in Python,"# Importing required modules
import numpy


# Creating arrays
array1 = numpy.array([[1, 2], [3, 4]])
print('Array1:\n', array1)


array2 = numpy.array([[5, 6], [7, 8]])
print('\nArray2:\n', array2)


# Computing the Kronecker Product
kroneckerProduct = numpy.kron(array1, array2)
print('\nArray1  Array2:')
print(kroneckerProduct)",">>> import numpy as np
>>> import numpy.linalg as la
>>>
>>> A = np.array([[1, 2, 3], [4, 5, 6]])
>>> B = np.array([[7, 8, 9], [10, 11, 12]])
>>> C = np.array([[13, 14, 15], [16, 17, 18]])
>>>
>>> print(la.KroneckerProduct(A, B))
[[1 2 3"
1995,Menu driven Python program to execute Linux commands,"# importing the module
import os

# sets the text colour to green
os.system(""tput setaf 2"")

print(""Launching Terminal User Interface"")

# sets the text color to red
os.system(""tput setaf 1"")

print(""\t\tWELCOME TO Terminal User Interface\t\t\t"")

# sets the text color to white
os.system(""tput setaf 7"")

print(""\t-------------------------------------------------"")
print(""Entering local device"")
while True:
print(""""""
1.Print date
2.Print cal
3.Configure web
4.Configure docker
5.Add user
6.Delete user
7.Create a file
8.Create a folder
9.Exit"""""")

ch=int(input(""Enter your choice: ""))

if(ch == 1):
os.system(""date"")

elif ch == 2:
os.system(""cal"")

elif ch == 3:
os.system(""yum install httpd -y"")
os.system(""systemctl start httpd"")
os.system(""systemctl status httpd"")

elif ch == 4:
os.system(""yum install docker-ce -y"")
os.system(""systemctl start docker"")
os.system(""systemctl status docker"")


elif ch == 5:
new_user=input(""Enter the name of new user: "")
os.system(""sudo useradd {}"".format(new_user))
os.system(""id -u {}"".format(new_user) )

elif ch == 6:
del_user=input(""Enter the name of the user to delete: "")
os.system(""sudo userdel {}"".format(del_user))

elif ch == 7:
filename=input(""Enter the filename: "")
f=os.system(""sudo touch {}"".format(filename))
if f!=0:
print(""Some error occurred"")
else:
print(""File created successfully"")

elif ch == 8:
foldername=input(""Enter the foldername: "")
f=os.system(""sudo mkdir {}"".format(foldername))
if f!=0:
print(""Some error occurred"")
else:
print(""Folder created successfully"")

elif ch == 9:
print(""Exiting application"")
exit()
else:
print(""Invalid entry"")

input(""Press enter to continue"")
os.system(""clear"")","1. Create a program that reads the command line arguments from the user.
2. Execute the command line arguments.
3. Display the output.

""""""

import sys
import os
import subprocess

def main():
    """"""
    Main function to execute the program.
    """"""
    # Get the command line arguments from the user.
    command_line_arguments = sys.argv[1:]
    # Execute the command line arguments.
    subprocess.call(command_line_arguments)"
1996,Calculate average values of two given NumPy arrays in Python,"# import library
import numpy as np

# create a numpy 1d-arrays
arr1 = np.array([3, 4])
arr2 = np.array([1, 0])

# find average of NumPy arrays
avg = (arr1 + arr2) / 2

print(""Average of NumPy arrays:\n"",
avg)","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([6, 7, 8, 9, 10])

# calculate average
avg = np.average(a, b)
print(avg)

# calculate sum
sum = np.sum(a)
print(sum)

# calculate product
product = np.prod(a)
print(product)

# calculate standard deviation
std = np.std("
1997,Write a Python program to Extract elements with Frequency greater than K,"# Python3 code to demonstrate working of
# Extract elements with Frequency greater than K
# Using count() + loop

# initializing list
test_list = [4, 6, 4, 3, 3, 4, 3, 7, 8, 8]

# printing string
print(""The original list : "" + str(test_list))

# initializing K
K = 2

res = []
for i in test_list:

# using count() to get count of elements
freq = test_list.count(i)

# checking if not already entered in results
if freq > K and i not in res:
res.append(i)

# printing results
print(""The required elements : "" + str(res))","import collections

def solution(arr, k):
    freq = collections.Counter(arr)
    freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)
    return freq[:k]

# Time complexity: O(n)
# Space Complexity: O(n)

# Runtime: 32 ms (96.21%)
# Memory Usage: 14.2 MB (95.74%)

# Runtime: 32 ms (95.74%)
#"
1998,Write a Python program to Maximum Consecutive Substring Occurrence,"# Python3 code to demonstrate working of
# Maximum Consecutive Substring Occurrence
# Using max() + re.findall()
import re

# initializing string
test_str = 'geeksgeeks are geeks for all geeksgeeksgeeks'

# printing original string
print(""The original string is : "" + str(test_str))

# initializing subs
sub_str = 'geeks'

# Maximum Consecutive Substring Occurrence
# Using max() + re.findall()
res = max(re.findall('((?:' + re.escape(sub_str) + ')*)', test_str), key = len)

# printing result
print(""The maximum run of Substring : "" + res)","def max_consecutive_substring(string):
    max_consecutive_substring = 0
    for i in range(len(string)):
        if string[i] == string[i+1]:
            max_consecutive_substring += 1
        else:
            max_consecutive_substring = max(max_consecutive_substring, i+2)
    return max_consecutive_substring

print(max_consecutive_substring"
1999,Write a Python program to Convert List to List of dictionaries,"# Python3 code to demonstrate working of
# Convert List to List of dictionaries
# Using dictionary comprehension + loop

# initializing lists
test_list = [""Gfg"", 3, ""is"", 8, ""Best"", 10, ""for"", 18, ""Geeks"", 33]

# printing original list
print(""The original list : "" + str(test_list))

# initializing key list
key_list = [""name"", ""number""]

# loop to iterate through elements
# using dictionary comprehension
# for dictionary construction
n = len(test_list)
res = []
for idx in range(0, n, 2):
res.append({key_list[0]: test_list[idx], key_list[1] : test_list[idx + 1]})

# printing result
print(""The constructed dictionary list : "" + str(res))","def list_to_dict(l):
    d = {}
    for i in l:
        d[i] = l.count(i)
    return d

l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(list_to_dict(l))

""""""

# Solution 1

def list_to_dict(l):
    d = {}
    for i in l:
        d[i] = l.count("
2001,How to read multiple text files from folder in Python,"# Import Module
import os

# Folder Path
path = ""Enter Folder Path""

# Change the directory
os.chdir(path)

# Read text File


def read_text_file(file_path):
with open(file_path, 'r') as f:
print(f.read())


# iterate through all file
for file in os.listdir():
# Check whether file is in text format or not
if file.endswith("".txt""):
file_path = f""{path}\{file}""

# call read text file function
read_text_file(file_path)","import os

def read_file(filename):
    """"""
    Read a file and return a list of lines
    """"""
    with open(filename, 'r', encoding='utf-8') as f:
        return f.readlines()

def solve(files):
    """"""
    Solve the following problem:
    How to read multiple text files from folder in Python
    """"""
    # TODO: Complete the solve function below.
    # Hint: You can use the functions below to solve the problem."
2002,Write a Python program to Remove items from Set,"# Python program to remove elements from set
# Using the pop() method
def Remove(initial_set):
while initial_set:
initial_set.pop()
print(initial_set)

# Driver Code
initial_set = set([12, 10, 13, 15, 8, 9])
Remove(initial_set)","def remove_item(set, item):
    set.remove(item)

set = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
remove_item(set, 6)
print(set)

""""""

def remove_item(set, item):
    set.remove(item)

set = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
remove_item(set, 6)
print(set)"
2003,Write a Python program to Last business day of every month in year,"# Python3 code to demonstrate working of
# Last weekday of every month in year
# Using loop + max() + calendar.monthcalendar
import calendar

# initializing year
year = 1997

# printing Year
print(""The original year : "" + str(year))

# initializing weekday
weekdy = 5

# iterating for all months
res = []
for month in range(1, 13):

# max gets last friday of each month of 1997
res.append(str(max(week[weekdy]
for week in calendar.monthcalendar(year, month))) +
""/"" + str(month)+ ""/"" + str(year))

# printing
print(""Last weekdays of year : "" + str(res))","def Last_business_day(year, month):
    """"""
    This function returns the last business day of the given month.
    """"""
    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:
        return 31
    elif month == 2:
        if year % 4 == 0:
            if year % 100 == 0:
                if year % 400 == 0:
                    return 29
                else:
                    return 28"
2004,Converting a 10 digit phone number to US format using Regex in Python,"import re

def convert_phone_number(phone):

# actual pattern which only change this line
num = re.sub(r'(?<!\S)(\d{3})-', r'(\1) ', phone)
return num

# Driver code
print(convert_phone_number(""Call geek 321-963-0612""))","phone_number = input(""Enter a 10 digit phone number: "")

# Solution:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
#"
2005,Write a Python program to Add Space between Potential Words,"# Python3 code to demonstrate working of
# Add Space between Potential Words
# Using loop + join()


# initializing list
test_list = [""gfgBest"", ""forGeeks"", ""andComputerScience""]


# printing original list
print(""The original list : "" + str(test_list))


res = []


# loop to iterate all strings
for ele in test_list:
temp = [[]]
for char in ele:

# checking for upper case character
if char.isupper():
temp.append([])

# appending character at latest list
temp[-1].append(char)

# joining lists after adding space
res.append(' '.join(''.join(ele) for ele in temp))


# printing result
print(""The space added list of strings : "" + str(res))","def solution(word):
    return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8] + word[9] + word[10] + word[11] + word[12] + word[13] + word[14] + word[15] + word[16] + word[17] + word[18] + word[19] + word[20] + word[21] +"
2006,Convert string to datetime in Python with timezone,"# Python3 code to demonstrate
# Getting datetime object using a date_string

# importing datetime module
import datetime

# datestring for which datetime_obj required
date_string = '2021-09-01 15:27:05.004573 +0530'
print(""string datetime: "")
print(date_string)
print(""datestring class is :"", type(date_string))

# using strptime() to get datetime object
datetime_obj = datetime.datetime.strptime(
date_string, '%Y-%m-%d %H:%M:%S.%f %z')

print(""converted to datetime:"")

# Printing datetime
print(datetime_obj)

# Checking class of datetime_obj.
print(""datetime_obj class is :"", type(datetime_obj))","def convert_string_to_datetime(string):
    # Your code here
    return datetime.strptime(string, '%Y-%m-%d %H:%M:%S')

print(convert_string_to_datetime('2021-05-23 12:34:56'))

""""""

def convert_string_to_datetime(string):
    # Your code here
    return datetime.strptime(string, '%Y-%m-"
2007,Program to print half Diamond star pattern in Python,"// C++ implementation to print the
// half diamond star pattern

#include <iostream>

using namespace std;

// Function to print the
// half diamond star pattern
void halfDiamondStar(int N)
{
int i, j;

// Loop to print the upper half
// diamond pattern
for (i = 0; i < N; i++) {
for (j = 0; j < i + 1; j++)
cout << ""*"";
cout << ""\n"";
}

// Loop to print the lower half
// diamond pattern
for (i = 1; i < N; i++) {
for (j = i; j < N; j++)
cout << ""*"";
cout << ""\n"";
}
}

// Driver Code
int main()
{
int N = 5;

// Function Call
halfDiamondStar(N);
}","def print_diamond_star(n):
    for i in range(n):
        for j in range(n):
            print(i*2, end="" "")
        print()

n = int(input(""Enter the number of rows: ""))
print_diamond_star(n)

""""""

# Solution

def print_diamond_star(n):
    for i in range(n):
        for j in range(n):
            print(i*2, end="" "")"
2008,Scrape Table from Website using Write a Python program to Selenium,"<!DOCTYPE html>
<html>
<head>
<title>Selenium Table</title>
</head>
<body>
<table border=""1"">
<thead>
<tr>
<th>Name</th>
<th>Class</th>
</tr>
</thead>
<tbody>
<tr>
<td>Vinayak</td>
<td>12</td>
</tr>
<tr>
<td>Ishita</td>
<td>10</td>
</tr>
</tbody>
</table>
</body>
</html>","import selenium
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.common"
2009,Write a Python program to Cross Pairing in Tuple List,"# Python3 code to demonstrate working of
# Cross Pairing in Tuple List
# Using list comprehension

# initializing lists
test_list1 = [(1, 7), (6, 7), (9, 100), (4, 21)]
test_list2 = [(1, 3), (2, 1), (9, 7), (2, 17)]

# printing original lists
print(""The original list 1 : "" + str(test_list1))
print(""The original list 2 : "" + str(test_list2))

# corresponding loop in list comprehension
res = [(sub1[1], sub2[1]) for sub2 in test_list2 for sub1 in test_list1 if sub1[0] == sub2[0]]

# printing result
print(""The mapped tuples : "" + str(res))","def cross_pairing(tup1, tup2):
    if len(tup1)!= len(tup2):
        return False
    for i in range(len(tup1)):
        if tup1[i]!= tup2[i]:
            return False
    return True

print(cross_pairing([1, 2, 3], [2, 3, 4]))
print(cross_pairing([1, 2, 3], [3, 4, 5]"
2010,Write a Python program to Convert dictionary to K sized dictionaries,"# Python3 code to demonstrate working of
# Convert dictionary to K Keys dictionaries
# Using loop

# initializing dictionary
test_dict = {'Gfg' : 1, 'is' : 2, 'best' : 3, 'for' : 4, 'geeks' : 5, 'CS' : 6}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# initializing K
K = 2

res = []
count = 0
flag = 0
indict = dict()
for key in test_dict:
indict[key] = test_dict[key]
count += 1

# checking for K size and avoiding empty dict using flag
if count % K == 0 and flag:
res.append(indict)

# reinitializing dictionary
indict = dict()
count = 0
flag = 1


# printing result
print(""The converted list : "" + str(res))","d = {'a': 1, 'b': 2, 'c': 3}

d = dict(a=1, b=2, c=3)

d = dict(a=1, b=2, c=3)

d = dict(a=1, b=2, c=3)

d = dict(a=1, b=2, c=3)

d = dict(a=1, b=2, c=3)

d = dict(a="
2011,Write a Python program to Numpy matrix.max(),"# import the important module in python
import numpy as np

# make matrix with numpy
gfg = np.matrix('[64, 1; 12, 3]')

# applying matrix.max() method
geeks = gfg.max()

print(geeks)","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(A.max())

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

#"
2012,Find words which are greater than given length k in Python,"// C++ program to find all string
// which are greater than given length k


#include <bits/stdc++.h>
using namespace std;


// function find string greater than
// length k
void string_k(string s, int k)
{
// create the empty string
string w = """";
// iterate the loop till every space
for(int i = 0; i < s.size(); i++)
{
if(s[i] != ' ')

// append this sub string in
// string w
w = w + s[i];
else {

// if length of current sub
// string w is greater than
// k then print
if(w.size() > k)
cout << w << "" "";
w = """";
}
}
}


// Driver code
int main()
{
string s = ""geek for geeks"";
int k = 3;
s = s + "" "";
string_k(s, k);
return 0;
}


// This code is contributed by
// Manish Shaw (manishshaw1)","def solution(k, words):
    answer = []
    for word in words:
        if len(word) > k:
            answer.append(word)
    return answer

print(solution(3, [""tank"", ""kick"", ""know"", ""wheel"", ""land"", ""dream"", ""mother"", ""robot"", ""tank""]))

""""""

def solution(k, words):
    answer = []
    for word in words:
        if len(word) > k:
            answer."
2013,Creating Pandas dataframe using list of lists in Python,"# Import pandas library
import pandas as pd


# initialize list of lists
data = [['Geeks', 10], ['for', 15], ['geeks', 20]]


# Create the pandas DataFrame
df = pd.DataFrame(data, columns = ['Name', 'Age'])


# print dataframe.
print(df )","import pandas as pd

# Create a dataframe from the list of lists
df = pd.DataFrame(list(zip(x, y)), columns=['x', 'y'])

# Print the dataframe
print(df)

# Create a dataframe from the list of lists
df = pd.DataFrame(list(zip(x, y)), columns=['x', 'y'])

# Print the dataframe
print(df)

# Create a dataframe from the list of"
2014,Write a Python program to Convert Tuple Matrix to Tuple List,"# Python3 code to demonstrate working of
# Convert Tuple Matrix to Tuple List
# Using list comprehension + zip()

# initializing list
test_list = [[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]

# printing original list
print(""The original list is : "" + str(test_list))

# flattening
temp = [ele for sub in test_list for ele in sub]

# joining to form column pairs
res = list(zip(*temp))

# printing result
print(""The converted tuple list : "" + str(res))","def convert_tuple_to_tuple_list(tuple_list):
    return tuple_list

def convert_tuple_to_tuple_list_2(tuple_list):
    return tuple_list

def convert_tuple_to_tuple_list_3(tuple_list):
    return tuple_list

def convert_tuple_to_tuple_list_4(tuple_list):
    return tuple_list

def convert_tuple"
2015,Write a Python Program to Reverse a linked list,"# Python program to reverse a linked list
# Time Complexity : O(n)
# Space Complexity : O(n) as 'next'
#variable is getting created in each loop.


# Node class




class Node:


# Constructor to initialize the node object
def __init__(self, data):
self.data = data
self.next = None




class LinkedList:


# Function to initialize head
def __init__(self):
self.head = None


# Function to reverse the linked list
def reverse(self):
prev = None
current = self.head
while(current is not None):
next = current.next
current.next = prev
prev = current
current = next
self.head = prev


# Function to insert a new node at the beginning
def push(self, new_data):
new_node = Node(new_data)
new_node.next = self.head
self.head = new_node


# Utility function to print the linked LinkedList
def printList(self):
temp = self.head
while(temp):
print temp.data,
temp = temp.next




# Driver program to test above functions
llist = LinkedList()
llist.push(20)
llist.push(4)
llist.push(15)
llist.push(85)


print ""Given Linked List""
llist.printList()
llist.reverse()
print ""\nReversed Linked List""
llist.printList()


# This code is contributed by Nikhil Kumar Singh(nickzuck_007)","def reverse_list(head):
    if head is None:
        return None
    
    prev = None
    curr = head
    while curr is not None:
        next = curr.next
        curr.next = prev
        prev = curr
        curr = next
    return prev

# Code to test the above function
# head = [1, 2, 3, 4, 5]
# head = reverse_list(head)
# print(head.val)

# Solution 2"
2016,numpy.sqrt() in Python,"# Python program explaining
# numpy.sqrt() method

# importing numpy
import numpy as geek

# applying sqrt() method on integer numbers
arr1 = geek.sqrt([1, 4, 9, 16])
arr2 = geek.sqrt([6, 10, 18])

print(""square-root of an array1 : "", arr1)
print(""square-root of an array2 : "", arr2)","import numpy as np

def sqrt(x):
    return np.sqrt(x)

print(sqrt(3))

""""""

# Solution

def sqrt(x):
    return np.sqrt(x)

print(sqrt(3))

""""""

# Solution

def sqrt(x):
    return np.sqrt(x)

print(sqrt(3))

""""""

# Solution

def sqrt(x):
    return np."
2017,How to Remove repetitive characters from words of the given Pandas DataFrame using Regex in Python,"# importing required libraries
import pandas as pd
import re


# creating Dataframe with column
# as name and common_comments
df = pd.DataFrame(
{
'name' : ['Akash', 'Ayush', 'Diksha',
'Priyanka', 'Radhika'],

'common_comments' : ['hey buddy meet me today ',
'sorry bro i cant meet',
'hey akash i love geeksforgeeks',
'twiiter is the best way to comment',
'geeksforgeeks is good for learners']
},

columns = ['name', 'common_comments']
)
# printing Dataframe
df","import re

df = pd.DataFrame({'text': ['This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a"
2018,Convert a column to row name/index in Pandas in Python,"# importing pandas as pd
import pandas as pd


# Creating a dict of lists
data = {'Name':[""Akash"", ""Geeku"", ""Pankaj"", ""Sumitra"",""Ramlal""],
'Branch':[""B.Tech"", ""MBA"", ""BCA"", ""B.Tech"", ""BCA""],
'Score':[""80"",""90"",""60"", ""30"", ""50""],
'Result': [""Pass"",""Pass"",""Pass"",""Fail"",""Fail""]}


# creating a dataframe
df = pd.DataFrame(data)

df","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/iris.csv?raw=true')

df.columns = ['sepal_length','sepal_width', 'petal_length', 'petal_width']

df.head()

df.columns = ['sepal_length','sepal_width', 'petal_length', 'petal_width']"
2019,Write a Python program to count number of vowels using sets in given string,"# Python3 code to count vowel in
# a string using set

# Function to count vowel
def vowel_count(str):

# Initializing count variable to 0
count = 0

# Creating a set of vowels
vowel = set(""aeiouAEIOU"")

# Loop to traverse the alphabet
# in the given string
for alphabet in str:

# If alphabet is present
# in set vowel
if alphabet in vowel:
count = count + 1

print(""No. of vowels :"", count)

# Driver code
str = ""GeeksforGeeks""

# Function Call
vowel_count(str)","def count_vowels(string):
    vowels = set(['a', 'e', 'i', 'o', 'u'])
    count = 0
    for i in string:
        if i in vowels:
            count += 1
    return count

print(count_vowels(""Python is a high-level general-purpose programming language"")
print(count_vowels(""The quick brown fox jumps over the lazy dog""))
print(count_vowels(""The"
2020,How to extract date from Excel file using Pandas in Python,"# import required module
import pandas as pd;
import re;

# Read excel file and store in to DataFrame
data = pd.read_excel(""date_sample_data.xlsx"");

print(""Original DataFrame"")
data","import pandas as pd

# Read the Excel file
df = pd.read_excel('C:\\Users\\srin\\OneDrive\\Desktop\\Python\\Excel_File.xlsx', sheet_name='Sheet1')

# Extract the date from the Excel file
df['Date'] = pd.to_datetime(df['Date'])

# Print the date
print(df['Date'])

# Print the date in a specific format
print(df['Date'"
2021,Write a Python program to AND operation between Tuples,"# Python3 code to demonstrate working of
# Cross Tuple AND operation
# using map() + lambda

# initialize tuples
test_tup1 = (10, 4, 5)
test_tup2 = (2, 5, 18)

# printing original tuples
print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))

# Cross Tuple AND operation
# using map() + lambda
res = tuple(map(lambda i, j: i & j, test_tup1, test_tup2))

# printing result
print(""Resultant tuple after AND operation : "" + str(res))","def AND(t1, t2):
    return t1 and t2

t1 = (1, 2, 3)
t2 = (4, 5, 6)

print(AND(t1, t2))

""""""

# Solution:

def AND(t1, t2):
    return t1 and t2

t1 = (1, 2, 3)
t2 = (4, 5, 6)

print(AND(t1, t2))"
2022,Write a Python program to Search an Element in a Circular Linked List,"# Python program to Search an Element
# in a Circular Linked List

# Class to define node of the linked list
class Node:
def __init__(self,data):
self.data = data;
self.next = None;

class CircularLinkedList:

# Declaring Circular Linked List
def __init__(self):
self.head = Node(None);
self.tail = Node(None);
self.head.next = self.tail;
self.tail.next = self.head;


# Adds new nodes to the Circular Linked List
def add(self,data):

# Declares a new node to be added
newNode = Node(data);

# Checks if the Circular
# Linked List is empty
if self.head.data is None:

# If list is empty then new node
# will be the first node
# to be added in the Circular Linked List
self.head = newNode;
self.tail = newNode;
newNode.next = self.head;

else:
# If a node is already present then
# tail of the last node will point to
# new node
self.tail.next = newNode;

# New node will become new tail
self.tail = newNode;

# New Tail will point to the head
self.tail.next = self.head;

# Function to search the element in the
# Circular Linked List
def findNode(self,element):

# Pointing the head to start the search
current = self.head;
i = 1;

# Declaring f = 0
f = 0;
# Check if the list is empty or not
if(self.head == None):
print(""Empty list"");
else:
while(True):
# Comparing the elements
# of each node to the
# element to be searched
if(current.data == element):

# If the element is present
# then incrementing f
f += 1;
break;

# Jumping to next node
current = current.next;
i = i + 1;

# If we reach the head
# again then element is not
# present in the list so
# we will break the loop
if(current == self.head):
break;

# Checking the value of f
if(f > 0):
print(""element is present"");
else:
print(""element is not present"");

# Driver Code
if __name__ == '__main__':

# Creating a Circular Linked List
'''
Circular Linked List we will be working on:
1 -> 2 -> 3 -> 4 -> 5 -> 6
'''
circularLinkedList = CircularLinkedList();

#Adding nodes to the list
circularLinkedList.add(1);
circularLinkedList.add(2);
circularLinkedList.add(3);
circularLinkedList.add(4);
circularLinkedList.add(5);
circularLinkedList.add(6);

# Searching for node 2 in the list
circularLinkedList.findNode(2);

#Searching for node in the list
circularLinkedList.findNode(7);","def search(head, x):
    if head is None:
        return False
    if head.data == x:
        return True
    if head.data > x:
        return search(head.next, x)
    return search(head.next, x)

# Driver Code
if __name__ == '__main__':
    head = CircularLinkedList()
    head.append(1)
    head.append(2)
    head.append(3)"
2023,Write a Python program to Odd Frequency Characters,"# Python3 code to demonstrate working of
# Odd Frequency Characters
# Using list comprehension + defaultdict()
from collections import defaultdict

# helper_function
def hlper_fnc(test_str):
cntr = defaultdict(int)
for ele in test_str:
cntr[ele] += 1
return [val for val, chr in cntr.items() if chr % 2 != 0]

# initializing string
test_str = 'geekforgeeks is best for geeks'

# printing original string
print(""The original string is : "" + str(test_str))

# Odd Frequency Characters
# Using list comprehension + defaultdict()
res = hlper_fnc(test_str)

# printing result
print(""The Odd Frequency Characters are : "" + str(res))","def odd_frequency_characters(string):
    odd_characters = []
    for char in string:
        if char.isalpha():
            odd_characters.append(char)
    return ''.join(odd_characters)

print(odd_frequency_characters('Python'))

""""""

def odd_frequency_characters(string):
    odd_characters = []
    for char in string:
        if char.isalpha():
            odd_characters.append(char)"
2024,Write a Python program to Program to print duplicates from a list of integers,"# Python program to print
# duplicates from a list
# of integers
def Repeat(x):
_size = len(x)
repeated = []
for i in range(_size):
k = i + 1
for j in range(k, _size):
if x[i] == x[j] and x[i] not in repeated:
repeated.append(x[i])
return repeated


# Driver Code
list1 = [10, 20, 30, 20, 20, 30, 40,
50, -20, 60, 60, -20, -20]
print (Repeat(list1))

# This code is contributed
# by Sandeep_anand","def duplicate_finder(list):
    duplicate_list = []
    for i in list:
        if list.count(i) > 1:
            duplicate_list.append(i)
    return duplicate_list

print(duplicate_finder([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,"
2025,Write a Python set to check if string is panagram,"# import from string all ascii_lowercase and asc_lower
from string import ascii_lowercase as asc_lower


# function to check if all elements are present or not
def check(s):
return set(asc_lower) - set(s.lower()) == set([])

# driver code
string =""The quick brown fox jumps over the lazy dog""
if(check(string)== True):
print(""The string is a pangram"")
else:
print(""The string isn't a pangram"")","def is_panagram(string):
    return string == string[::-1]

print(is_panagram('abba'))
print(is_panagram('abc'))
print(is_panagram('abcdef'))
print(is_panagram('abcdefghijklmnop'))
print(is_panagram('abcdefghijklmnopqrstuvwxyz'))
print(is_panagram('abcdefghijklmnopqrstuvwxyz"
2026,Write a Python program to Split String of list on K character,"# Python3 code to demonstrate
# Split String of list on K character
# using loop + split()

# Initializing list
test_list = ['Gfg is best', 'for Geeks', 'Preparing']

# printing original list
print(""The original list is : "" + str(test_list))

K = ' '

# Split String of list on K character
# using loop + split()
res = []
for ele in test_list:
sub = ele.split(K)
res.extend(sub)

# printing result
print (""The extended list after split strings : "" + str(res))","def split_string(string, k):
    return string[:k]

print(split_string(""abcdefghijklmnopqrstuvwxyz"", 3))

""""""

def split_string(string, k):
    return string[:k]

print(split_string(""abcdefghijklmnopqrstuvwxyz"", 3))

""""""

def split_string(string, k):
    return string[:k].split()

print"
2027,Write a Python program to Test if string is subset of another,"# Python3 code to demonstrate working of
# Test if string is subset of another
# Using all()

# initializing strings
test_str1 = ""geeksforgeeks""
test_str2 = ""gfks""

# printing original string
print(""The original string is : "" + test_str1)

# Test if string is subset of another
# Using all()
res = all(ele in test_str1 for ele in test_str2)

# printing result
print(""Does string contains all the characters of other list? : "" + str(res))","def isSubset(s,t):
    if len(s)<len(t):
        return False
    for i in range(len(s)):
        if s[i] not in t:
            return False
    return True

print(isSubset(""abc"",""abc""))
print(isSubset(""abc"",""a""))
print(isSubset(""abc"",""a"",0,0))
print(isSubset(""abc"",""a"",0,1))
print(isSubset("""
2028,Write a Python program to Remove Reduntant Substrings from Strings List,"# Python3 code to demonstrate working of
# Remove Reduntant Substrings from Strings List
# Using enumerate() + join() + sort()


# initializing list
test_list = [""Gfg"", ""Gfg is best"", ""Geeks"", ""Gfg is for Geeks""]


# printing original list
print(""The original list : "" + str(test_list))


# using loop to iterate for each string
test_list.sort(key = len)
res = []
for idx, val in enumerate(test_list):

# concatenating all next values and checking for existence
if val not in ', '.join(test_list[idx + 1:]):
res.append(val)


# printing result
print(""The filtered list : "" + str(res))","def remove_redundant_substrings(str1, str2):
    # Write your code here
    str1 = str1.replace(' ', '')
    str2 = str2.replace(' ', '')
    str1 = str1.replace(' ', '')
    str2 = str2.replace(' ', '')
    str1 = str1.replace(' ', '')
    str2 = str2.replace(' ', '')
    str1 = str1.replace(' ', ''"
2029,Extract time from datetime in Python,"# import important module
import datetime
from datetime import datetime

# Create datetime string
datetime_str = ""24AUG2001101010""

# call datetime.strptime to convert
# it into datetime datatype
datetime_obj = datetime.strptime(datetime_str,
""%d%b%Y%H%M%S"")

# It will print the datetime object
print(datetime_obj)

# extract the time from datetime_obj
time = datetime_obj.time()


# it will print time that
# we have extracted from datetime obj
print(time)","import datetime

def solution(start, end):
    start = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
    end = datetime.datetime.strptime(end, '%Y-%m-%d %H:%M:%S')
    start_time = start.strftime('%H:%M:%S')
    end_time = end.strftime('%H:%M:%S')"
2030,How to lowercase column names in Pandas dataframe in Python,"# Create a simple dataframe

# importing pandas as pd
import pandas as pd

# creating a dataframe
df = pd.DataFrame({'A': ['John', 'bODAY', 'MinA', 'Peter', 'nicky'],
'B': ['masters', 'graduate', 'graduate',
'Masters', 'Graduate'],
'C': [27, 23, 21, 23, 24]})

df","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/iris.csv?raw=true')

df.columns = ['sepal_length','sepal_width', 'petal_length', 'petal_width']

df.head()

df.columns = ['sepal_length','sepal_width', 'petal_length', 'petal_width']

df"
2031,Convert the column type from string to datetime format in Pandas dataframe in Python,"# importing pandas as pd
import pandas as pd


# Creating the dataframe
df = pd.DataFrame({'Date':['11/8/2011', '04/23/2008', '10/2/2019'],
'Event':['Music', 'Poetry', 'Theatre'],
'Cost':[10000, 5000, 15000]})


# Print the dataframe
print(df)


# Now we will check the data type
# of the 'Date' column
df.info()","import pandas as pd

df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data', header=None)

df.columns = ['sepal_length','sepal_width', 'petal_length', 'petal_width']

df['species'] = df['species'].map({'setosa': 0,'versicolor': 1, 'virginica': 2"
2032,Write a Python program to find the character position of Kth word from a list of strings,"# Python3 code to demonstrate working of
# Word Index for K position in Strings List
# Using enumerate() + list comprehension

# initializing list
test_list = [""geekforgeeks"", ""is"", ""best"", ""for"", ""geeks""]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing K
K = 20

# enumerate to get indices of all inner and outer list
res = [ele[0] for sub in enumerate(test_list) for ele in enumerate(sub[1])]

# getting index of word
res = res[K]

# printing result
print(""Index of character at Kth position word : "" + str(res))","def find_word(word, word_list):
    for i in range(len(word_list)):
        if word_list[i] == word:
            return i
    return -1

word = ""python""
word_list = [""python"", ""java"", ""kotlin"", ""javascript""]

print(find_word(word, word_list))

""""""

# Solution 1

def find_word(word, word_list):
    for"
2033,How to access different rows of a multidimensional NumPy array in Python,"# Importing Numpy module
import numpy as np

# Creating a 3X3 2-D Numpy array
arr = np.array([[10, 20, 30],
[40, 5, 66],
[70, 88, 94]])

print(""Given Array :"")
print(arr)

# Access the First and Last rows of array
res_arr = arr[[0,2]]
print(""\nAccessed Rows :"")
print(res_arr)","import numpy as np

# Create a NumPy array with the following data:
x = np.array([[1, 2, 3], [4, 5, 6]])

# Create a NumPy array with the following data:
y = np.array([[7, 8, 9], [10, 11, 12]])

# Create a NumPy array with the following data:
z = np.array([[13, 14, 15], [16, 17, 18]])

#"
2034,Scientific GUI Calculator using Tkinter in Python,"from tkinter import *
import math
import tkinter.messagebox","import tkinter as tk
from tkinter import ttk

def main():
    root = tk.Tk()
    root.title(""Scientific Calculator"")
    root.geometry(""300x300"")
    root.resizable(False, False)
    root.configure(bg=""white"")
    
    # Create a label widget
    label = ttk.Label(root, text=""Scientific Calculator"", font=(""Arial"", 20))
    label.pack(pady=20)"
2035,Matrix Multiplication in NumPy in Python,"# importing the module
import numpy as np

# creating two matrices
p = [[1, 2], [2, 3]]
q = [[4, 5], [6, 7]]
print(""Matrix p :"")
print(p)
print(""Matrix q :"")
print(q)

# computing product
result = np.dot(p, q)

# printing the result
print(""The matrix multiplication is :"")
print(result)","import numpy as np

def matrix_multiply(A, B):
    """"""
    A : n x m matrix
    B : m x n matrix
    
    Returns the result of A A'B
    """"""
    # initialize result
    result = np.zeros(A.shape)
    
    # iterate over rows
    for i in range(A.shape[0]):
        # iterate over columns
        for j in range(B.shape[1]):
            # iterate"
2036,Scraping And Finding Ordered Words In A Dictionary using Python,"# Python program to find ordered words
import requests

# Scrapes the words from the URL below and stores
# them in a list
def getWords():

# contains about 2500 words
url = ""http://www.puzzlers.org/pub/wordlists/unixdict.txt""
fetchData = requests.get(url)

# extracts the content of the webpage
wordList = fetchData.content

# decodes the UTF-8 encoded text and splits the
# string to turn it into a list of words
wordList = wordList.decode(""utf-8"").split()

return wordList


# function to determine whether a word is ordered or not
def isOrdered():

# fetching the wordList
collection = getWords()

# since the first few of the elements of the
# dictionary are numbers, getting rid of those
# numbers by slicing off the first 17 elements
collection = collection[16:]
word = ''

for word in collection:
result = 'Word is ordered'
i = 0
l = len(word) - 1

if (len(word) < 3): # skips the 1 and 2 lettered strings
continue

# traverses through all characters of the word in pairs
while i < l:
if (ord(word[i]) > ord(word[i+1])):
result = 'Word is not ordered'
break
else:
i += 1

# only printing the ordered words
if (result == 'Word is ordered'):
print(word,': ',result)


# execute isOrdered() function
if __name__ == '__main__':
isOrdered()","import urllib.request
import re

url = ""http://www.python.org/~guido/python-exercises/""

# Open the URL
webpage = urllib.request.urlopen(url)

# Read the HTML
data = webpage.read()

# Parse the HTML
soup = BeautifulSoup(data, ""html.parser"")

# Retrieve all of the anchor tags
tags = soup('a')

# Loop over the tags
for tag"
2037,Write a Python program to Reverse All Strings in String List,"# Python3 code to demonstrate
# Reverse All Strings in String List
# using list comprehension

# initializing list
test_list = [""geeks"", ""for"", ""geeks"", ""is"", ""best""]

# printing original list
print (""The original list is : "" + str(test_list))

# using list comprehension
# Reverse All Strings in String List
res = [i[::-1] for i in test_list]

# printing result
print (""The reversed string list is : "" + str(res))","def reverse_all_strings(s):
    # your code goes here
    return s[::-1]

# driver code
s = ""hello world""
print(reverse_all_strings(s))

""""""

# Solution

def reverse_all_strings(s):
    # your code goes here
    return s[::-1]

# driver code
s = ""hello world""
print(reverse_all_strings(s))"
2038,Write a Python program to Count Strings with substring String List,"# Python code to demonstrate
# Count Strings with substring String List
# using list comprehension + len()

# initializing list
test_list = ['GeeksforGeeks', 'Geeky', 'Computers', 'Algorithms']

# printing original list
print (""The original list is : "" + str(test_list))

# initializing substring
subs = 'Geek'

# using list comprehension + len()
# Count Strings with substring String List
res = len([i for i in test_list if subs in i])

# printing result
print (""All strings count with given substring are : "" + str(res))","def count_substring(string, sub_string):
    count = 0
    for i in range(len(string)):
        if string[i:i+len(sub_string)] == sub_string:
            count += 1
    return count

# Enter your code here. Read input from STDIN. Print output to STDOUT
string, sub_string = input(), input()
count = count_substring(string, sub_string)
print(count)

'''

# Enter"
2039,Write a Python program to Remove words containing list characters,"# Python3 code to demonstrate
# Remove words containing list characters
# using list comprehension + all()
from itertools import groupby

# initializing list
test_list = ['gfg', 'is', 'best', 'for', 'geeks']

# initializing char list
char_list = ['g', 'o']

# printing original list
print (""The original list is : "" + str(test_list))

# printing character list
print (""The character list is : "" + str(char_list))

# Remove words containing list characters
# using list comprehension + all()
res = [ele for ele in test_list if all(ch not in ele for ch in char_list)]

# printing result
print (""The filtered strings are : "" + str(res))","import re

def remove_words(text, words):
    for word in words:
        text = text.replace(word, """")
    return text

print(remove_words(""Python is a programming language"", [""Python"", ""programming""]))

""""""

# Solution 1

def remove_words(text, words):
    for word in words:
        if word in text:
            text = text.replace(word, """")
    return text

print(remove_words(""Python is a"
2040,Write a Python program to Convert JSON to string,"import json


# create a sample json


a = {""name"" : ""GeeksforGeeks"", ""Topic"" : ""Json to String"", ""Method"": 1}


# Convert JSON to String


y = json.dumps(a)


print(y)
print(type(y))","import json

def convert_json_to_string(json_data):
    return json.dumps(json_data)

def main():
    json_data = {
        ""name"": ""John"",
        ""age"": 30,
        ""city"": ""New York""
    }
    print(convert_json_to_string(json_data))

if __name__ == ""__main__"":
    main()

# OUTPUT:
# {
#   ""name"": ""John"","
2041,Write a Python Program for Rabin-Karp Algorithm for Pattern Searching,"# Following program is the python implementation of
# Rabin Karp Algorithm given in CLRS book

# d is the number of characters in the input alphabet
d = 256

# pat -> pattern
# txt -> text
# q -> A prime number

def search(pat, txt, q):
M = len(pat)
N = len(txt)
i = 0
j = 0
p = 0 # hash value for pattern
t = 0 # hash value for txt
h = 1

# The value of h would be ""pow(d, M-1)% q""
for i in xrange(M-1):
h = (h * d)% q

# Calculate the hash value of pattern and first window
# of text
for i in xrange(M):
p = (d * p + ord(pat[i]))% q
t = (d * t + ord(txt[i]))% q

# Slide the pattern over text one by one
for i in xrange(N-M + 1):
# Check the hash values of current window of text and
# pattern if the hash values match then only check
# for characters on by one
if p == t:
# Check for characters one by one
for j in xrange(M):
if txt[i + j] != pat[j]:
break

j+= 1
# if p == t and pat[0...M-1] = txt[i, i + 1, ...i + M-1]
if j == M:
print ""Pattern found at index "" + str(i)

# Calculate hash value for next window of text: Remove
# leading digit, add trailing digit
if i < N-M:
t = (d*(t-ord(txt[i])*h) + ord(txt[i + M]))% q

# We might get negative values of t, converting it to
# positive
if t < 0:
t = t + q

# Driver program to test the above function
txt = ""GEEKS FOR GEEKS""
pat = ""GEEK""
q = 101 # A prime number
search(pat, txt, q)

# This code is contributed by Bhavya Jain","def rabin_karp(pattern, text):
    # Your code here
    pass

""""""

# Solution 1

def rabin_karp(pattern, text):
    # Your code here
    pass

# Solution 2

def rabin_karp(pattern, text):
    # Your code here
    pass

# Solution 3

def rabin_karp(pattern, text):
    # Your code here
    pass

# Solution 4

def"
2042,Write a Python program to Uncommon elements in Lists of List,"# Python 3 code to demonstrate
# Uncommon elements in List
# using naive method


# initializing lists
test_list1 = [ [1, 2], [3, 4], [5, 6] ]
test_list2 = [ [3, 4], [5, 7], [1, 2] ]


# printing both lists
print (""The original list 1 : "" + str(test_list1))
print (""The original list 2 : "" + str(test_list2))


# using naive method
# Uncommon elements in List
res_list = []
for i in test_list1:
if i not in test_list2:
res_list.append(i)
for i in test_list2:
if i not in test_list1:
res_list.append(i)

# printing the uncommon
print (""The uncommon of two lists is : "" + str(res_list))","def uncommon_elements(l1, l2):
    l1.sort()
    l2.sort()
    i = 0
    j = 0
    while i < len(l1) and j < len(l2):
        if l1[i] == l2[j]:
            i += 1
            j += 1
        else:
            i += 1
    return l1[i:], l2[j:]

l1 = [1, 2, 3, 4, 5,"
2043,Write a Python program to split and join a string,"# Python program to split a string and
# join it using different delimiter

def split_string(string):

# Split the string based on space delimiter
list_string = string.split(' ')

return list_string

def join_string(list_string):

# Join the string based on '-' delimiter
string = '-'.join(list_string)

return string

# Driver Function
if __name__ == '__main__':
string = 'Geeks for Geeks'

# Splitting a string
list_string = split_string(string)
print(list_string)

# Join list of strings into one
new_string = join_string(list_string)
print(new_string)","def split_and_join(str):
    return str.split()

print(split_and_join('hello world'))

""""""

def split_and_join(str):
    return str.split()

print(split_and_join('hello world'))

""""""

def split_and_join(str):
    return str.split()

print(split_and_join('hello world'))

""""""

def split_and_join(str):
    return str"
2044,Create a Numpy array with random values | Python,"# Python Program to create numpy array
# filled with random values
import numpy as geek

b = geek.empty(2, dtype = int)
print(""Matrix b : \n"", b)

a = geek.empty([2, 2], dtype = int)
print(""\nMatrix a : \n"", a)","import numpy as np

np.random.seed(42)

x = np.random.randn(3, 2)

print(x)

print(x.shape)

print(x.dtype)

print(x.size)

print(x.itemsize)

print(x.nbytes)

print(x.dtype)

print(x.nbytes / x.itemsize)

print(x.nbytes / x.itemsize)"
2045,Write a Python program to Numpy np.polygrid3d() method,"# Python program explaining
# numpy.polygrid3d() method

# importing numpy as np

import numpy as np
from numpy.polynomial.polynomial import polygrid3d

# Input polynomial series coefficients
c = np.array([[1, 3, 5], [2, 4, 6], [10, 11, 12]])

# using np.polygrid3d() method
ans = polygrid3d([7, 9], [8, 10], [5, 6], c)
print(ans)","import numpy as np

x = np.arange(0, 10, 0.1)
y = np.arange(0, 10, 0.1)
z = np.arange(0, 10, 0.1)

X, Y, Z = np.meshgrid(x, y, z)

# print(X)
# print(Y)
# print(Z)

# print(np.polygrid3d(X, Y, Z))"
2046,Write a Python program to Replace multiple words with K,"# Python3 code to demonstrate working of
# Replace multiple words with K
# Using join() + split() + list comprehension

# initializing string
test_str = 'Geeksforgeeks is best for geeks and CS'

# printing original string
print(""The original string is : "" + str(test_str))

# initializing word list
word_list = [""best"", 'CS', 'for']

# initializing replace word
repl_wrd = 'gfg'

# Replace multiple words with K
# Using join() + split() + list comprehension
res = ' '.join([repl_wrd if idx in word_list else idx for idx in test_str.split()])

# printing result
print(""String after multiple replace : "" + str(res))","def replace_multiple_words(s, words):
    for word in words:
        s = s.replace(word, ""K"" + word)
    return s

print(replace_multiple_words(""Python is a programming language"", [""Python"", ""programming""]))

""""""

def replace_multiple_words(s, words):
    for word in words:
        s = s.replace(word, ""K"" + word)
    return s

print(replace_multiple_words(""Python is a"
2047,Reindexing in Pandas DataFrame in Python,"# import numpy and pandas module
import pandas as pd
import numpy as np


column=['a','b','c','d','e']
index=['A','B','C','D','E']


# create a dataframe of random values of array
df1 = pd.DataFrame(np.random.rand(5,5),
columns=column, index=index)


print(df1)


print('\n\nDataframe after reindexing rows: \n',
df1.reindex(['B', 'D', 'A', 'C', 'E']))","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5],
                   'col2': [10, 20, 30, 40, 50]})

df.index = ['a', 'b', 'c', 'd', 'e']

print(df)

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5],
#                   'col2': [10, 20"
2048,Quote Guessing Game using Web Scraping in Python,"import requests
from bs4 import BeautifulSoup
from csv import writer
from time import sleep
from random import choice

# list to store scraped data
all_quotes = []

# this part of the url is constant
base_url = ""http://quotes.toscrape.com/""

# this part of the url will keep changing
url = ""/page/1""

while url:

# concatenating both urls
# making request
res = requests.get(f""{base_url}{url}"")
print(f""Now Scraping{base_url}{url}"")
soup = BeautifulSoup(res.text, ""html.parser"")

# extracting all elements
quotes = soup.find_all(class_=""quote"")

for quote in quotes:
all_quotes.append({
""text"": quote.find(class_=""text"").get_text(),
""author"": quote.find(class_=""author"").get_text(),
""bio-link"": quote.find(""a"")[""href""]
})
next_btn = soup.find(_class=""next"")
url = next_btn.find(""a"")[""href""] if next_btn else None
sleep(2)

quote = choice(all_quotes)
remaining_guesses = 4
print(""Here's a quote: "")
print(quote[""text""])

guess = ''
while guess.lower() != quote[""author""].lower() and remaining_guesses > 0:
guess = input(
f""Who said this quote? Guesses remaining {remaining_guesses}"")

if guess == quote[""author""]:
print(""CONGRATULATIONS!!! YOU GOT IT RIGHT"")
break
remaining_guesses -= 1

if remaining_guesses == 3:
res = requests.get(f""{base_url}{quote['bio-link']}"")
soup = BeautifulSoup(res.text, ""html.parser"")
birth_date = soup.find(class_=""author-born-date"").get_text()
birth_place = soup.find(class_=""author-born-location"").get_text()
print(
f""Here's a hint: The author was born on {birth_date}{birth_place}"")

elif remaining_guesses == 2:
print(
f""Here's a hint: The author's first name starts with: {quote['author'][0]}"")

elif remaining_guesses == 1:
last_initial = quote[""author""].split("" "")[1][0]
print(
f""Here's a hint: The author's last name starts with: {last_initial}"")

else:
print(
f""Sorry, you ran out of guesses. The answer was {quote['author']}"")","import random

def guess(x):
    random_number = random.randint(1, x)
    guess = 0
    while guess!= random_number:
        guess = int(input(f""Guess a number between 1 and {x}: ""))
        if guess < random_number:
            print(""Sorry, guess again. Too low."")
        elif guess > random_number:
            print(""Sorry, guess again. Too high."")
    print(f""Yay! You guessed the"
2049,Scraping Indeed Job Data Using Python,"# import module
import requests
from bs4 import BeautifulSoup


# user define function
# Scrape the data
# and get in string
def getdata(url):
r = requests.get(url)
return r.text

# Get Html code using parse
def html_code(url):

# pass the url
# into getdata function
htmldata = getdata(url)
soup = BeautifulSoup(htmldata, 'html.parser')

# return html code
return(soup)

# filter job data using
# find_all function
def job_data(soup):

# find the Html tag
# with find()
# and convert into string
data_str = """"
for item in soup.find_all(""a"", class_=""jobtitle turnstileLink""):
data_str = data_str + item.get_text()
result_1 = data_str.split(""\n"")
return(result_1)

# filter company_data using
# find_all function


def company_data(soup):

# find the Html tag
# with find()
# and convert into string
data_str = """"
result = """"
for item in soup.find_all(""div"", class_=""sjcl""):
data_str = data_str + item.get_text()
result_1 = data_str.split(""\n"")

res = []
for i in range(1, len(result_1)):
if len(result_1[i]) > 1:
res.append(result_1[i])
return(res)


# driver nodes/main function
if __name__ == ""__main__"":

# Data for URL
job = ""data+science+internship""
Location = ""Noida%2C+Uttar+Pradesh""
url = ""https://in.indeed.com/jobs?q=""+job+""&l=""+Location

# Pass this URL into the soup
# which will return
# html string
soup = html_code(url)

# call job and company data
# and store into it var
job_res = job_data(soup)
com_res = company_data(soup)

# Traverse the both data
temp = 0
for i in range(1, len(job_res)):
j = temp
for j in range(temp, 2+temp):
print(""Company Name and Address : "" + com_res[j])

temp = j
print(""Job : "" + job_res[i])
print(""-----------------------------"")","import requests
from bs4 import BeautifulSoup

url = ""https://www.indeed.com/jobs?q=python&l=San%20Francisco,%20CA&radius=100&start=0""

r = requests.get(url)

soup = BeautifulSoup(r.text, 'html.parser')

# print(soup.prettify())

# print(soup.title)

# print(soup.title.string)

# print(soup"
2050,Adding and Subtracting Matrices in Python,"# importing numpy as np
import numpy as np


# creating first matrix
A = np.array([[1, 2], [3, 4]])

# creating second matrix
B = np.array([[4, 5], [6, 7]])

print(""Printing elements of first matrix"")
print(A)
print(""Printing elements of second matrix"")
print(B)

# adding two matrix
print(""Addition of two matrix"")
print(np.add(A, B))","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
B = np.array([[10, 11, 12], [13, 14, 15], [16, 17, 18]])

print(A)
print(B)

print(A-B)
print(A+B)

# Output:
# [[1 2 3]
#  [4 5 6]
#  [7 8 9]]"
2051,How to read all CSV files in a folder in Pandas in Python,"# import necessary libraries
import pandas as pd
import os
import glob


# use glob to get all the csv files
# in the folder
path = os.getcwd()
csv_files = glob.glob(os.path.join(path, ""*.csv""))


# loop over the list of csv files
for f in csv_files:

# read the csv file
df = pd.read_csv(f)

# print the location and filename
print('Location:', f)
print('File Name:', f.split(""\\"")[-1])

# print the content
print('Content:')
display(df)
print()","import pandas as pd

# Read all CSV files in a folder in Pandas in Python
df = pd.read_csv('/Users/srinivasan/Desktop/Python/data/data.csv')

# Print the first 5 rows of the dataframe
print(df.head())

# Print the last 5 rows of the dataframe
print(df.tail())

# Print the number of rows in the dataframe
print(df.shape)

# Print the number of columns"
2052,Minimum of two numbers in Python,"# Python program to find the
# minimum of two numbers


def minimum(a, b):

if a <= b:
return a
else:
return b

# Driver code
a = 2
b = 4
print(minimum(a, b))","def solution(a, b):
    if a < b:
        return a
    else:
        return b

print(solution(2, 3))

""""""

def solution(a, b):
    if a < b:
        return a
    else:
        return b

print(solution(2, 3))

""""""

def solution(a, b):
    if a < b:
        return a
    else:
        return b

print(solution(2, 3))"
2053,String slicing in Python to rotate a string,"# Function to rotate string left and right by d length

def rotate(input,d):

# slice string in two parts for left and right
Lfirst = input[0 : d]
Lsecond = input[d :]
Rfirst = input[0 : len(input)-d]
Rsecond = input[len(input)-d : ]

# now concatenate two parts together
print (""Left Rotation : "", (Lsecond + Lfirst) )
print (""Right Rotation : "", (Rsecond + Rfirst))

# Driver program
if __name__ == ""__main__"":
input = 'GeeksforGeeks'
d=2
rotate(input,d)","def rotate(s):
    return s[::-1]

print(rotate(""abcdefghijklmnopqrstuvwxyz""))

"""""""
2054,Find sum and average of List in Python,"# Python program to find the sum
# and average of the list

L = [4, 5, 1, 2, 9, 7, 10, 8]


# variable to store the sum of
# the list
count = 0

# Finding the sum
for i in L:
count += i

# divide the total elements by
# number of elements
avg = count/len(L)

print(""sum = "", count)
print(""average = "", avg)","def sum_and_average(lst):
    sum = 0
    for i in lst:
        sum += i
    average = sum / len(lst)
    return sum, average

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
sum, average = sum_and_average(lst)
print(sum, average)

""""""

def sum_and_average(lst):
    sum = 0
    for i in lst:"
2055,Write a Python program to find second largest number in a list,"# Python program to find second largest
# number in a list


# list of numbers - length of
# list should be at least 2
list1 = [10, 20, 4, 45, 99]


mx=max(list1[0],list1[1])
secondmax=min(list1[0],list1[1])
n =len(list1)
for i in range(2,n):
if list1[i]>mx:
secondmax=mx
mx=list1[i]
elif list1[i]>secondmax and \
mx != list1[i]:
secondmax=list1[i]


print(""Second highest number is : "",\
str(secondmax))","def second_largest(numbers):
    numbers.sort()
    return numbers[1]

print(second_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def second_largest(numbers):
    numbers.sort()
    return numbers[1]

print(second_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def second_largest"
2056,Write a Python program to Loop through files of certain extensions,"# importing the library
import os

# giving directory name
dirname = 'D:\\AllData'

# giving file extension
ext = ('.exe', 'jpg')

# iterating over all files
for files in os.listdir(dirname):
if files.endswith(ext):
print(files) # printing file name of desired extension
else:
continue","def solution(extension):
    import os
    import glob
    import re
    import sys
    import time
    import datetime
    import subprocess
    import shutil
    import zipfile
    import tarfile
    import requests
    import json
    import urllib.request
    import urllib.parse
    import urllib.error
    import urllib.request
    import urllib.parse
    import urllib.error
    import urllib.request"
2057,Write a Python program to print all odd numbers in a range,"# Python program to print odd Numbers in given range

start, end = 4, 19

# iterating each number in list
for num in range(start, end + 1):

# checking condition
if num % 2 != 0:
print(num, end = "" "")","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution"
2058,Write a Python program to Multiply 2d numpy array corresponding to 1d array,"# Python code to demonstrate
# multiplication of 2d array
# with 1d array

import numpy as np

ini_array1 = np.array([[1, 2, 3], [2, 4, 5], [1, 2, 3]])
ini_array2 = np.array([0, 2, 3])

# printing initial arrays
print(""initial array"", str(ini_array1))

# Multiplying arrays
result = ini_array1 * ini_array2[:, np.newaxis]

# printing result
print(""New resulting array: "", result)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

c = a * b
print(c)

""""""

# Solution

import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8"
2059,Write a Python program to Replace all occurrences of a substring in a string,"# Python3 code to demonstrate working of
# Swap Binary substring
# Using translate()

# initializing string
test_str = ""geeksforgeeks""

# printing original string
print(""The original string is : "" + test_str)

# Swap Binary substring
# Using translate()
temp = str.maketrans(""geek"", ""abcd"")
test_str = test_str.translate(temp)

# printing result
print(""The string after swap : "" + str(test_str))","def replace_substring(string, substring):
    return string.replace(substring, """")

# driver code
string = ""This is a string""
substring = ""is""
print(replace_substring(string, substring))

""""""

# Solution

def replace_substring(string, substring):
    return string.replace(substring, """")

# Driver Code
string = ""This is a string""
substring = ""is""
print("
2060,Convert multiple JSON files to CSV Python,"# importing packages
import pandas as pd

# load json file using pandas
df1 = pd.read_json('file1.json')

# view data
print(df1)

# load json file using pandas
df2 = pd.read_json('file2.json')

# view data
print(df2)

# use pandas.concat method
df = pd.concat([df1,df2])

# view the concatenated dataframe
print(df)

# convert dataframe to csv file
df.to_csv(""CSV.csv"",index=False)

# load the resultant csv file
result = pd.read_csv(""CSV.csv"")

# and view the data
print(result)","python solution.py

""""""

import json
import csv
import os

def main():
    """"""
    Main function to run the program
    """"""
    # Get the path to the directory containing the JSON files
    directory = os.path.dirname(os.path.abspath(__file__))
    # Get the path to the directory containing the CSV files
    directory = os.path.join(directory, ""csv"")
    # Create the CSV files
    csv_files = [os.path.join"
2061,Create Pandas Series using NumPy functions in Python,"# import pandas and numpy
import pandas as pd
import numpy as np

# series with numpy linspace()
ser1 = pd.Series(np.linspace(3, 33, 3))
print(ser1)

# series with numpy linspace()
ser2 = pd.Series(np.linspace(1, 100, 10))
print(""\n"", ser2)
","import pandas as pd

# Create a Pandas Series using NumPy functions in Python

# Create a Pandas Series using NumPy functions in Python

# Create a Pandas Series using NumPy functions in Python

# Create a Pandas Series using NumPy functions in Python

# Create a Pandas Series using NumPy functions in Python

# Create a Pandas Series using NumPy functions in Python

# Create a Pandas Series using NumPy functions in Python

# Create a Pandas Series using NumPy functions in Python"
2062,Write a Python program to capitalize the first and last character of each word in a string,"# Python program to capitalize
# first and last character of
# each word of a String


# Function to do the same
def word_both_cap(str):

#lamda function for capitalizing the
# first and last letter of words in
# the string
return ' '.join(map(lambda s: s[:-1]+s[-1].upper(),
s.title().split()))


# Driver's code
s = ""welcome to geeksforgeeks""
print(""String before:"", s)
print(""String after:"", word_both_cap(str))","def capitalize_first_and_last_char(string):
    first_char = string[0]
    last_char = string[-1]
    return first_char.upper() + last_char.upper()

print(capitalize_first_and_last_char(""Hello World""))

""""""

def capitalize_first_and_last_char(string):
    first_char = string[0]
    last_char = string[-1]
    return first"
2063,Write a Python program to Queue using Doubly Linked List,"# A complete working Python program to demonstrate all
# Queue operations using doubly linked list

# Node class
class Node:

# Function to initialise the node object
def __init__(self, data):
self.data = data # Assign data
self.next = None # Initialize next as null
self.prev = None # Initialize prev as null


# Queue class contains a Node object
class Queue:

# Function to initialize head
def __init__(self):
self.head = None
self.last=None


# Function to add an element data in the Queue
def enqueue(self, data):
if self.last is None:
self.head =Node(data)
self.last =self.head
else:
self.last.next = Node(data)
self.last.next.prev=self.last
self.last = self.last.next



# Function to remove first element and return the element from the queue
def dequeue(self):

if self.head is None:
return None
else:
temp= self.head.data
self.head = self.head.next
self.head.prev=None
return temp


# Function to return top element in the queue
def first(self):

return self.head.data


# Function to return the size of the queue
def size(self):

temp=self.head
count=0
while temp is not None:
count=count+1
temp=temp.next
return count


# Function to check if the queue is empty or not
def isEmpty(self):

if self.head is None:
return True
else:
return False


# Function to print the stack
def printqueue(self):

print(""queue elements are:"")
temp=self.head
while temp is not None:
print(temp.data,end=""->"")
temp=temp.next


# Code execution starts here
if __name__=='__main__':

# Start with the empty queue
queue = Queue()

print(""Queue operations using doubly linked list"")

# Insert 4 at the end. So queue becomes 4->None
queue.enqueue(4)

# Insert 5 at the end. So queue becomes 4->5None
queue.enqueue(5)

# Insert 6 at the end. So queue becomes 4->5->6->None
queue.enqueue(6)

# Insert 7 at the end. So queue becomes 4->5->6->7->None
queue.enqueue(7)

# Print the queue
queue.printqueue()

# Print the first element
print(""\nfirst element is "",queue.first())

# Print the queue size
print(""Size of the queue is "",queue.size())

# remove the first element
queue.dequeue()

# remove the first element
queue.dequeue()

# first two elements are removed
# Print the queue
print(""After applying dequeue() two times"")
queue.printqueue()

# Print True if queue is empty else False
print(""\nqueue is empty:"",queue.isEmpty())","def Queue(size):
    queue = []
    for i in range(size):
        queue.append(i)
    return queue

def printQueue(queue):
    for i in range(len(queue)):
        print(queue[i], end="" "")
    print()

def isEmpty(queue):
    if len(queue) == 0:
        return True
    else:
        return False

def enqueue(queue, item):
    queue.append(item"
2064,Create a new column in Pandas DataFrame based on the existing columns in Python,"# importing pandas as pd
import pandas as pd

# Creating the DataFrame
df = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/2011'],
'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],
'Cost':[10000, 5000, 15000, 2000]})

# Print the dataframe
print(df)","import pandas as pd

df = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""B"": [10, 20, 30, 40, 50]})

# Solution:
df[""C""] = df[""A""] * 2

# Solution:
df[""C""] = df[""A""] * 2

# Solution:
df[""C""] = df[""A""] * 2

# Solution:
df[""C""] = df[""A""] *"
2065,Write a Python Code for time Complexity plot of Heap Sort,"# Python Code for Implementation and running time Algorithm
# Complexity plot of Heap Sort
# by Ashok Kajal
# This python code intends to implement Heap Sort Algorithm
# Plots its time Complexity on list of different sizes


# ---------------------Important Note -------------------
# numpy, time and matplotlib.pyplot are required to run this code
import time
from numpy.random import seed
from numpy.random import randint
import matplotlib.pyplot as plt




# find left child of node i
def left(i):
return 2 * i + 1


# find right child of node i
def right(i):
return 2 * i + 2


# calculate and return array size
def heapSize(A):
return len(A)-1




# This function takes an array and Heapyfies
# the at node i
def MaxHeapify(A, i):
# print(""in heapy"", i)
l = left(i)
r = right(i)

# heapSize = len(A)
# print(""left"", l, ""Rightt"", r, ""Size"", heapSize)
if l<= heapSize(A) and A[l] > A[i] :
largest = l
else:
largest = i
if r<= heapSize(A) and A[r] > A[largest]:
largest = r
if largest != i:
# print(""Largest"", largest)
A[i], A[largest]= A[largest], A[i]
# print(""List"", A)
MaxHeapify(A, largest)

# this function makes a heapified array
def BuildMaxHeap(A):
for i in range(int(heapSize(A)/2)-1, -1, -1):
MaxHeapify(A, i)

# Sorting is done using heap of array
def HeapSort(A):
BuildMaxHeap(A)
B = list()
heapSize1 = heapSize(A)
for i in range(heapSize(A), 0, -1):
A[0], A[i]= A[i], A[0]
B.append(A[heapSize1])
A = A[:-1]
heapSize1 = heapSize1-1
MaxHeapify(A, 0)



# randomly generates list of different
# sizes and call HeapSort function
elements = list()
times = list()
for i in range(1, 10):


# generate some integers
a = randint(0, 1000 * i, 1000 * i)
# print(i)
start = time.clock()
HeapSort(a)
end = time.clock()


# print(""Sorted list is "", a)
print(len(a), ""Elements Sorted by HeapSort in "", end-start)
elements.append(len(a))
times.append(end-start)


plt.xlabel('List Length')
plt.ylabel('Time Complexity')
plt.plot(elements, times, label ='Heap Sort')
plt.grid()
plt.legend()
plt.show()
# This code is contributed by Ashok Kajal","def heap_sort(arr):
    for i in range(len(arr)//2, -1, -1):
        heapify(arr, i, len(arr))
    for i in range(len(arr) - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, 0, i)

def heapify(arr, i, n):
    l = 2 * i + 1
    r"
2066,Calculate the sum of the diagonal elements of a NumPy array in Python,"# importing Numpy package
import numpy as np

# creating a 3X3 Numpy matrix
n_array = np.array([[55, 25, 15],
[30, 44, 2],
[11, 45, 77]])

# Displaying the Matrix
print(""Numpy Matrix is:"")
print(n_array)

# calculating the Trace of a matrix
trace = np.trace(n_array)


print(""\nTrace of given 3X3 matrix:"")
print(trace)",">>> import numpy as np
>>> a = np.array([[1, 2, 3], [4, 5, 6]])
>>> a.diagonal()
array([1, 4, 5, 6])

""""""

# Import NumPy
import numpy as np

# Create a NumPy array
a = np.array([[1, 2, 3], [4, 5, 6]])

# Print the diagonal elements of the array
print(a.diagonal())"
2067,Menu Driven Python program for opening the required software Application,"# import os library
import os


# infinite while loop
while True:
print(""Hello! user choose your tool"")
print(""Choose your tool :-\n"")
print(""-> mousepad"")
print(""-> chrome"")
print(""-> vlc"")
print(""-> virtualbox"")
print(""-> camera"")
print(""-> telegram"")
print(""-> firefox"")
print(""-> codeblocks"")
print(""-> screenshot"")
print(""-> task-manager"")
print(""-> libreoffice impress / presentation"")
print(""-> libreoffice writer / text editor / notepad"")
print(""-> libreoffice clac / spreadsheets"")
print(""-> libreoffice"")
print(""-> jupyter notebook\n"")
print(""chat with system:-"",end=' ')

# take input from user
p = input()

# check conditions
if ((""do not"" in p) or (""dont"" in p) or (""don't"" in p)):
print(""OK user\n"")

elif ((""open"" in p) or (""start"" in p) or (""run"" in p) or (""execute"" in p) or (""launch"" in p) or (""activate"" in p)):

if ((""mousepad"" in p) or (""editor"" in p)):

# run mention application
os.system(""mousepad"")

elif ((""vlc"" in p) or (""media player"" in p)):
os.system(""vlc"")

elif ((""virtualbox"" in p) or (""virtual machine"" in p) or (""virtual tool"" in p)):
os.system(""virtualbox"")

elif ((""camera"" in p) or (""cheese"" in p)):
os.system(""cheese"")

elif (""telegram"" in p):
os.system(""telegram-desktop"")

elif (""codeblocks"" in p):
os.system(""codeblocks"")

elif (""taskmanager"" in p):
os.system(""xfce4-taskmanager"")

elif (""screenshot"" in p):
os.system(""xfce4-screenshooter"")

elif ((""jupyter"" in p) or (""notebook"" in p)):
os.system(""jupyter notebook"")

elif ((""libreoffice impress"" in p) or (""presentation tool"" in p)):
os.system(""libreoffice --impress"")

elif ((""libreoffice writer"" in p) or (""text editor"" in p)):
os.system(""libreoffice --writer"")


elif (""notepad"" in p):
os.system(""notepad"")

elif ((""libreoffice calc"" in p) or (""spreadsheet"" in p)):
os.system(""libreoffice --calc"")

elif (""libreoffice"" in p):
os.system(""libreoffice"")

elif (""chrome"" in p):
os.system(""google-chrome-stable"")

elif ((""firefox"" in p) or (""mozilla"" in p)):
os.system(""firefox"")

else :
print(""don't support"")

# terminating infinite while loop
elif ((""quit"" in p) or (""exit"" in p) or (""stop"" in p) or (""close"" in p) or (""deactivate"" in p) or (""terminate"" in p)):
print(""Thnank You!"")
break

else :
print(""don't support"")","1. Open the file
2. Read the file
3. Print the content of the file
4. Close the file
5. Exit

""""""

# 1. Open the file
file = open(""file.txt"", ""r"")

# 2. Read the file
content = file.read()

# 3. Print the content of the file
print(content)

# 4. Close the file
file.close()

# 5. Exit"
2068,How to create an empty and a full NumPy array in Python,"# python program to create
# Empty and Full Numpy arrays

import numpy as np


# Create an empty array
empa = np.empty((3, 4), dtype=int)
print(""Empty Array"")
print(empa)

# Create a full array
flla = np.full([3, 3], 55, dtype=int)
print(""\n Full Array"")
print(flla)","import numpy as np

a = np.array([1, 2, 3, 4, 5])
print(a)

b = np.array([[1, 2, 3, 4, 5],
              [6, 7, 8, 9, 10]])
print(b)

c = np.array([[1, 2, 3, 4, 5],
              [6, 7, 8, 9, 10]])
print(c)

d = np.array([[1,"
2069,Write a Python program to Mirror Image of String,"# Python3 code to demonstrate working of
# Mirror Image of String
# Using Mirror Image of String

# initializing strings
test_str = 'void'

# printing original string
print(""The original string is : "" + str(test_str))

# initializing mirror dictionary
mir_dict = {'b':'d', 'd':'b', 'i':'i', 'o':'o', 'v':'v', 'w':'w', 'x':'x'}
res = ''

# accessing letters from dictionary
for ele in test_str:
if ele in mir_dict:
res += mir_dict[ele]

# if any character not present, flagging to be invalid
else:
res = ""Not Possible""
break

# printing result
print(""The mirror string : "" + str(res))","def mirror_image(image):
    mirror_image = """"
    for i in range(len(image)):
        for j in range(len(image[i])):
            mirror_image += image[i][j]
    return mirror_image

# driver code
image = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j""]
print(mirror_image(image))

# This code is contributed by Nikhil"
2070,Write a Python program to Substituting patterns in text using regex,"# Python implementation of substituting a
# specific text pattern in a string using regex

# importing regex module
import re

# Function to perform
# operations on the strings
def substitutor():

# a string variable
sentence1 = ""It is raining outside.""

# replacing text 'raining' in the string
# variable sentence1 with 'sunny' thus
# passing first parameter as raining
# second as sunny, third as the
# variable name in which string is stored
# and printing the modified string
print(re.sub(r""raining"", ""sunny"", sentence1))

# a string variable
sentence2 = ""Thank you very very much.""

# replacing text 'very' in the string
# variable sentence2 with 'so' thus
# passing parameters at their
# appropriate positions and printing
# the modified string
print(re.sub(r""very"", ""so"", sentence2))

# Driver Code:
substitutor()","import re

text = ""The rain in Spain""
pattern = r""\b\w+\.\w+""

# Substituting pattern in text
# text = re.sub(pattern, r""\1*******"", text)

# Substituting pattern in text
text = re.sub(pattern, r""\1*******"", text)

# Printing the modified text
print(text)

# Python program to find all matches
# in a string

# Function to find all"
2071,Write a Python Program for Odd-Even Sort / Brick Sort,"# Python Program to implement
# Odd-Even / Brick Sort

def oddEvenSort(arr, n):
# Initially array is unsorted
isSorted = 0
while isSorted == 0:
isSorted = 1
temp = 0
for i in range(1, n-1, 2):
if arr[i] > arr[i+1]:
arr[i], arr[i+1] = arr[i+1], arr[i]
isSorted = 0

for i in range(0, n-1, 2):
if arr[i] > arr[i+1]:
arr[i], arr[i+1] = arr[i+1], arr[i]
isSorted = 0

return


arr = [34, 2, 10, -9]
n = len(arr)

oddEvenSort(arr, n);
for i in range(0, n):
print(arr[i], end ="" "")

# Code Contribute by Mohit Gupta_OMG <(0_o)>","def odd_even_sort(arr):
    for i in range(len(arr)):
        if arr[i] % 2 == 0:
            arr[i] = arr[i] // 2
        else:
            arr[i] = arr[i] * 3 + 1
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(odd_even_sort(arr))

""""""

def odd_even_sort"
2072,Find the size of a Tuple in Python,"import sys

# sample Tuples
Tuple1 = (""A"", 1, ""B"", 2, ""C"", 3)
Tuple2 = (""Geek1"", ""Raju"", ""Geek2"", ""Nikhil"", ""Geek3"", ""Deepanshu"")
Tuple3 = ((1, ""Lion""), ( 2, ""Tiger""), (3, ""Fox""), (4, ""Wolf""))

# print the sizes of sample Tuples
print(""Size of Tuple1: "" + str(sys.getsizeof(Tuple1)) + ""bytes"")
print(""Size of Tuple2: "" + str(sys.getsizeof(Tuple2)) + ""bytes"")
print(""Size of Tuple3: "" + str(sys.getsizeof(Tuple3)) + ""bytes"")","def solution(t):
    return len(t)

""""""

def solution(t):
    return len(t)

def solution(t):
    return len(t)

def solution(t):
    return len(t)

def solution(t):
    return len(t)

def solution(t):
    return len(t)

def solution(t):
    return len(t)

def solution(t):
    return len(t)

def solution(t"
2073,Ways to sort list of dictionaries by values in Write a Python program to Using itemgetter,"# Python code demonstrate the working of sorted()
# and itemgetter

# importing ""operator"" for implementing itemgetter
from operator import itemgetter

# Initializing list of dictionaries
lis = [{ ""name"" : ""Nandini"", ""age"" : 20},
{ ""name"" : ""Manjeet"", ""age"" : 20 },
{ ""name"" : ""Nikhil"" , ""age"" : 19 }]

# using sorted and itemgetter to print list sorted by age
print ""The list printed sorting by age: ""
print sorted(lis, key=itemgetter('age'))

print (""\r"")

# using sorted and itemgetter to print list sorted by both age and name
# notice that ""Manjeet"" now comes before ""Nandini""
print ""The list printed sorting by age and name: ""
print sorted(lis, key=itemgetter('age', 'name'))

print (""\r"")

# using sorted and itemgetter to print list sorted by age in descending order
print ""The list printed sorting by age in descending order: ""
print sorted(lis, key=itemgetter('age'),reverse = True)","def sort_dict(d):
    return sorted(d.items(), key=itemgetter(1))

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
print(sort_dict(d))

""""""

# Solution 1

def sort_dict(d):
    return sorted(d.items(), key=itemgetter(1))

d = {'a': 1, 'b': 2, '"
2074,"Saving Text, JSON, and CSV to a File in Python","# Python program to demonstrate
# opening a file


# Open function to open the file ""myfile.txt""
# (same directory) in read mode and store
# it's reference in the variable file1

file1 = open(""myfile.txt"")

# Reading from file
print(file1.read())

file1.close()","# Solution 1:
# 1. Create a dictionary called data.
# 2. Create a list called data_list.
# 3. Create a dictionary called data_dict.
# 4. Create a list called data_list_2.
# 5. Create a dictionary called data_dict_2.
# 6. Create a list called data_list_3.
# 7. Create a dictionary called data_dict_3.
# 8. Create a list called data_list_4.
# 9. Create a dictionary"
2075,Write a Python program to Sort lists in tuple,"# Python3 code to demonstrate working of
# Sort lists in tuple
# Using tuple() + sorted() + generator expression

# Initializing tuple
test_tup = ([7, 5, 4], [8, 2, 4], [0, 7, 5])

# printing original tuple
print(""The original tuple is : "" + str(test_tup))

# Sort lists in tuple
# Using tuple() + sorted() + generator expression
res = tuple((sorted(sub) for sub in test_tup))

# printing result
print(""The tuple after sorting lists : "" + str(res))","def sort_tuple(tup):
    return tup[0]

tup = [1,2,3,4,5,6,7,8,9,10]
print(sorted(tup, key=sort_tuple))

""""""

def sort_tuple(tup):
    return tup[0]

tup = [1,2,3,4,5,6,7,8,9,10]
print(sorted(tup, key=sort"
2076,Write a Python Program to Reverse the Content of a File using Stack,"# Python3 code to reverse the lines
# of a file using Stack.


# Creating Stack class (LIFO rule)
class Stack:

def __init__(self):

# Creating an empty stack
self._arr = []

# Creating push() method.
def push(self, val):
self._arr.append(val)

def is_empty(self):

# Returns True if empty
return len(self._arr) == 0

# Creating Pop method.
def pop(self):

if self.is_empty():
print(""Stack is empty"")
return

return self._arr.pop()

# Creating a function which will reverse
# the lines of a file and Overwrites the
# given file with its contents line-by-line
# reversed
def reverse_file(filename):

S = Stack()
original = open(filename)

for line in original:
S.push(line.rstrip(""\n""))

original.close()


output = open(filename, 'w')

while not S.is_empty():
output.write(S.pop()+""\n"")

output.close()


# Driver Code
filename = ""GFG.txt""

# Calling the reverse_file function
reverse_file(filename)

# Now reading the content of the file
with open(filename) as file:
for f in file.readlines():
print(f, end ="""")","import os

def reverseFile(fileName):
    with open(fileName, 'r') as f:
        data = f.readlines()
        data.reverse()
        with open(fileName, 'w') as f:
            f.writelines(data)

if __name__ == '__main__':
    fileName = 'input.txt'
    reverseFile(fileName)"
2077,How to get weighted random choice in Python,"import random


sampleList = [100, 200, 300, 400, 500]

randomList = random.choices(
sampleList, weights=(10, 20, 30, 40, 50), k=5)

print(randomList)","import random

def weighted_choice(lst):
    """"""
    This function returns a random element from the list.
    """"""
    return random.choice(lst)

def weighted_choice_2(lst):
    """"""
    This function returns a random element from the list.
    """"""
    return random.choice(lst)

def weighted_choice_3(lst):
    """"""
    This function returns a random element from the list.
    """"""
    return random.choice(lst)"
2078,Multithreaded Priority Queue in Python,"import queue
import threading
import time

thread_exit_Flag = 0

class sample_Thread (threading.Thread):
def __init__(self, threadID, name, q):
threading.Thread.__init__(self)
self.threadID = threadID
self.name = name
self.q = q
def run(self):
print (""initializing "" + self.name)
process_data(self.name, self.q)
print (""Exiting "" + self.name)

# helper function to process data
def process_data(threadName, q):
while not thread_exit_Flag:
queueLock.acquire()
if not workQueue.empty():
data = q.get()
queueLock.release()
print (""% s processing % s"" % (threadName, data))
else:
queueLock.release()
time.sleep(1)

thread_list = [""Thread-1"", ""Thread-2"", ""Thread-3""]
name_list = [""A"", ""B"", ""C"", ""D"", ""E""]
queueLock = threading.Lock()
workQueue = queue.Queue(10)
threads = []
threadID = 1

# Create new threads
for thread_name in thread_list:
thread = sample_Thread(threadID, thread_name, workQueue)
thread.start()
threads.append(thread)
threadID += 1

# Fill the queue
queueLock.acquire()
for items in name_list:
workQueue.put(items)

queueLock.release()

# Wait for the queue to empty
while not workQueue.empty():
pass

# Notify threads it's time to exit
thread_exit_Flag = 1

# Wait for all threads to complete
for t in threads:
t.join()
print (""Exit Main Thread"")","def solution(q):
    # write your code here
    return q.pop(0)

def solution(q):
    # write your code here
    return q.pop(0)

def solution(q):
    # write your code here
    return q.pop(0)

def solution(q):
    # write your code here
    return q.pop(0)

def solution(q):
    # write your code here
    return q.pop(0)

def solution(q"
2079,How to Add padding to a tkinter widget only on one side  in Python,"# Python program to add padding
# to a widget only on left-side

# Import the library tkinter
from tkinter import *

# Create a GUI app
app = Tk()

# Give title to your GUI app
app.title(""Vinayak App"")

# Maximize the window screen
width = app.winfo_screenwidth()
height = app.winfo_screenheight()
app.geometry(""%dx%d"" % (width, height))

# Construct the label in your app
l1 = Label(app, text='Geeks For Geeks')

# Give the leftmost padding
l1.grid(padx=(200, 0), pady=(0, 0))

# Make the loop for displaying app
app.mainloop()","import tkinter as tk

def add_padding(widget, padx, pady):
    widget.grid_configure(padx=padx, pady=pady)

root = tk.Tk()

widget = tk.Label(root, text=""Hello World"")
widget.grid(row=0, column=0)

add_padding(widget, 10, 10)

root.mainloop()

""""""

from tkinter import"
2080,How to switch to new window in Selenium for Python,"# import modules
from selenium import webdriver
import time

# provide the path for chromedriver
PATH = ""C:/chromedriver.exe""

# pass on the path to driver for working
driver = webdriver.Chrome(PATH)","import time
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

driver = webdriver.Chrome(executable_path=""C:\\Users\\DELL\\Downloads\\chromedriver_win32\\chromedriver.exe"")
driver.get(""https://rahulshettyacademy.com/angularpractice/"")

# wait for the element to appear
driver.find_element_by_id(""name"").send_keys(""Rahul"")
driver.find"
2081,Write a Python program to Longest Substring Length of K,"# Python3 code to demonstrate working of
# Longest Substring of K
# Using loop

# initializing string
test_str = 'abcaaaacbbaa'

# printing original String
print(""The original string is : "" + str(test_str))

# initializing K
K = 'a'

cnt = 0
res = 0
for idx in range(len(test_str)):

# increment counter on checking
if test_str[idx] == K:
cnt += 1
else:
cnt = 0

# retaining max
res = max(res, cnt)

# printing result
print(""The Longest Substring Length : "" + str(res))","def LongestSubstringLength(string, k):
    # Write your code here
    if len(string) < k:
        return 0
    if len(string) == k:
        return 1
    if string[0] == string[-1]:
        return LongestSubstringLength(string[1:-1], k)
    else:
        return LongestSubstringLength(string[1:], k) + 1

print(LongestSubstringLength(""abcabcbb"", 3))
print"
2082,Write a Python program to Multiply all numbers in the list (4 different ways),"# Python program to multiply all values in the
# list using traversal


def multiplyList(myList) :

# Multiply elements one by one
result = 1
for x in myList:
result = result * x
return result

# Driver code
list1 = [1, 2, 3]
list2 = [3, 2, 4]
print(multiplyList(list1))
print(multiplyList(list2))","def multiply_all_numbers(list):
    for i in range(len(list)):
        list[i] = list[i] * list[i]
    return list

print(multiply_all_numbers([1, 2, 3, 4, 5]))
print(multiply_all_numbers([1, 2, 3, 4, 5, 6]))
print(multiply_all_numbers([1, 2, 3, 4"
2083,How to search and replace text in a file in Python ,"# creating a variable and storing the text
# that we want to search
search_text = ""dummy""

# creating a variable and storing the text
# that we want to add
replace_text = ""replaced""

# Opening our text file in read only
# mode using the open() function
with open(r'SampleFile.txt', 'r') as file:

# Reading the content of the file
# using the read() function and storing
# them in a new variable
data = file.read()

# Searching and replacing the text
# using the replace() function
data = data.replace(search_text, replace_text)

# Opening our text file in write only
# mode to write the replaced content
with open(r'SampleFile.txt', 'w') as file:

# Writing the replaced data in our
# text file
file.write(data)

# Printing Text replaced
print(""Text replaced"")","1. Open the file in read mode
2. Read the file line by line
3. Iterate through the lines
4. For each line, replace the word 'python' with 'python3'
5. Print the modified file

""""""

# 1. Open the file in read mode
file = open('file.txt', 'r')

# 2. Read the file line by line
for line in file:
    # 3. Iterate through the lines
    for word in line.split():
        # 4"
2084,Convert CSV to JSON using Python,"import csv
import json




# Function to convert a CSV to JSON
# Takes the file paths as arguments
def make_json(csvFilePath, jsonFilePath):

# create a dictionary
data = {}

# Open a csv reader called DictReader
with open(csvFilePath, encoding='utf-8') as csvf:
csvReader = csv.DictReader(csvf)

# Convert each row into a dictionary
# and add it to data
for rows in csvReader:

# Assuming a column named 'No' to
# be the primary key
key = rows['No']
data[key] = rows


# Open a json writer, and use the json.dumps()
# function to dump data
with open(jsonFilePath, 'w', encoding='utf-8') as jsonf:
jsonf.write(json.dumps(data, indent=4))

# Driver Code


# Decide the two file paths according to your
# computer system
csvFilePath = r'Names.csv'
jsonFilePath = r'Names.json'


# Call the make_json function
make_json(csvFilePath, jsonFilePath)","import csv
import json

with open('data.csv', newline='') as f:
    reader = csv.reader(f)
    file_data = list(reader)

# Python code to convert
# csv to json

# Python code to convert
# json to csv

# Python code to convert
# csv to json

# Python code to convert
# json to csv

# Python code to convert
# json to csv

# Python code to convert
# csv to"
2085,How to Print Multiple Arguments in Python,"def GFG(name, num):
print(""Hello from "", name + ', ' + num)


GFG(""geeks for geeks"", ""25"")","def print_multiple_arguments(arg1, arg2, arg3):
    print(arg1, arg2, arg3)

print_multiple_arguments(1, 2, 3)

""""""

def print_multiple_arguments(arg1, arg2, arg3):
    print(arg1, arg2, arg3)

print_multiple_arguments(1, 2, 3)

""""""

def print_multiple_arguments(arg1, arg2, arg3):
    print"
2086,Write a Python program to Remove duplicate values across Dictionary Values,"# Python3 code to demonstrate working of
# Remove duplicate values across Dictionary Values
# Using Counter() + list comprehension
from collections import Counter

# initializing dictionary
test_dict = {'Manjeet' : [1, 4, 5, 6],
'Akash' : [1, 8, 9],
'Nikhil': [10, 22, 4],
'Akshat': [5, 11, 22]}

# printing original dictionary
print(""The original dictionary : "" + str(test_dict))

# Remove duplicate values across Dictionary Values
# Using Counter() + list comprehension
cnt = Counter()
for idx in test_dict.values():
cnt.update(idx)
res = {idx: [key for key in j if cnt[key] == 1]
for idx, j in test_dict.items()}

# printing result
print(""Uncommon elements records : "" + str(res))","def removeDuplicate(d):
    newDict = {}
    for key in d:
        if d[key] not in newDict:
            newDict[d[key]] = 1
        else:
            newDict[d[key]] += 1
    return newDict

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
print(removeDuplicate(d))

""""""

"""""""
2087,How to check horoscope using Python ,"import requests
from bs4 import BeautifulSoup","1. Create a variable called ""horoscope"" and set it to a string of the following format:

""The sun is shining on the moon.""

2. Create a variable called ""horoscope_string"" and set it to a string of the following format:

""The sun is shining on the moon.""

3. Create a variable called ""horoscope_string_2"" and set it to a string of the following format:

""The sun is shining on the moon.""

4. Create a variable called ""horoscope_string_"
2088,Write a Python program to Adding Tuple to List and vice  versa,"# Python3 code to demonstrate working of
# Adding Tuple to List and vice - versa
# Using += operator (list + tuple)


# initializing list
test_list = [5, 6, 7]


# printing original list
print(""The original list is : "" + str(test_list))


# initializing tuple
test_tup = (9, 10)


# Adding Tuple to List and vice - versa
# Using += operator (list + tuple)
test_list += test_tup


# printing result
print(""The container after addition : "" + str(test_list))","def add_tuple(tup):
    return tup[0] + tup[1]

tup1 = (1, 2, 3)
tup2 = (4, 5, 6)

print(add_tuple(tup1))
print(add_tuple(tup2))

""""""

def add_tuple(tup):
    return tup[0] + tup[1]

tup1 = (1, 2, 3"
2089,How to check if a Python variable exists,"def func():

# defining local variable
a_variable = 0

# using locals() function
# for checking existence in symbol table
is_local_var = ""a_variable"" in locals()

# printing result
print(is_local_var)

# driver code
func()","def check_variable(variable):
    if variable in globals():
        return True
    else:
        return False

print(check_variable(""variable""))

""""""

# Solution

def check_variable(variable):
    if variable in globals():
        return True
    else:
        return False

print(check_variable(""variable""))"
2090,Write a Python Program for Binary Insertion Sort,"# Python Program implementation
# of binary insertion sort

def binary_search(arr, val, start, end):
# we need to distinugish whether we should insert
# before or after the left boundary.
# imagine [0] is the last step of the binary search
# and we need to decide where to insert -1
if start == end:
if arr[start] > val:
return start
else:
return start+1

# this occurs if we are moving beyond left\'s boundary
# meaning the left boundary is the least position to
# find a number greater than val
if start > end:
return start

mid = (start+end)/2
if arr[mid] < val:
return binary_search(arr, val, mid+1, end)
elif arr[mid] > val:
return binary_search(arr, val, start, mid-1)
else:
return mid

def insertion_sort(arr):
for i in xrange(1, len(arr)):
val = arr[i]
j = binary_search(arr, val, 0, i-1)
arr = arr[:j] + [val] + arr[j:i] + arr[i+1:]
return arr

print(""Sorted array:"")
print insertion_sort([37, 23, 0, 17, 12, 72, 31,
46, 100, 88, 54])

# Code contributed by Mohit Gupta_OMG","def binary_insertion_sort(arr):
    for i in range(1, len(arr)):
        j = i
        while j > 0 and arr[j] < arr[j-1]:
            arr[j], arr[j-1] = arr[j-1], arr[j]
            j -= 1
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(binary_insertion_sort(arr))

""""""

def binary_insertion_"
2091,Write a Python program to numpy.isin() method,"# import numpy
import numpy as np

# using numpy.isin() method
gfg1 = np.array([1, 2, 3, 4, 5])
lis = [1, 3, 5]
gfg = np.isin(gfg1, lis)

print(gfg)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[1, 2, 3], [4, 5, 6]])

print(np.isin(a, b))

""""""

import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[1, 2, 3], [4, 5, 6]])"
2092,"Calculate inner, outer, and cross products of matrices and vectors using NumPy in Python","# Python Program illustrating
# numpy.inner() method
import numpy as np

# Vectors
a = np.array([2, 6])
b = np.array([3, 10])
print(""Vectors :"")
print(""a = "", a)
print(""\nb = "", b)

# Inner Product of Vectors
print(""\nInner product of vectors a and b ="")
print(np.inner(a, b))

print(""---------------------------------------"")

# Matrices
x = np.array([[2, 3, 4], [3, 2, 9]])
y = np.array([[1, 5, 0], [5, 10, 3]])
print(""\nMatrices :"")
print(""x ="", x)
print(""\ny ="", y)

# Inner product of matrices
print(""\nInner product of matrices x and y ="")
print(np.inner(x, y))","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6]])
B = np.array([[7, 8, 9], [10, 11, 12]])

inner = A.dot(B)
outer = A.dot(B, transpose=True)
cross = A.dot(B, transpose=False)

print(""inner:"", inner)
print(""outer:"", outer)
print("""
2093,"Write a Python program to Get number of characters, words, spaces and lines in a file","# Python implementation to compute
# number of characters, words, spaces
# and lines in a file

# Function to count number
# of characters, words, spaces
# and lines in a file
def counter(fname):

# variable to store total word count
num_words = 0

# variable to store total line count
num_lines = 0

# variable to store total character count
num_charc = 0

# variable to store total space count
num_spaces = 0

# opening file using with() method
# so that file gets closed
# after completion of work
with open(fname, 'r') as f:

# loop to iterate file
# line by line
for line in f:

# incrementing value of
# num_lines with each
# iteration of loop to
# store total line count
num_lines += 1

# declaring a variable word
# and assigning its value as Y
# because every file is
# supposed to start with
# a word or a character
word = 'Y'

# loop to iterate every
# line letter by letter
for letter in line:

# condition to check
# that the encountered character
# is not white space and a word
if (letter != ' ' and word == 'Y'):

# incrementing the word
# count by 1
num_words += 1

# assigning value N to
# variable word because until
# space will not encounter
# a word can not be completed
word = 'N'

# condition to check
# that the encountered character
# is a white space
elif (letter == ' '):

# incrementing the space
# count by 1
num_spaces += 1

# assigning value Y to
# variable word because after
# white space a word
# is supposed to occur
word = 'Y'

# loop to iterate every
# letter character by
# character
for i in letter:

# condition to check
# that the encountered character
# is not white space and not
# a newline character
if(i !="" "" and i !=""\n""):

# incrementing character
# count by 1
num_charc += 1

# printing total word count
print(""Number of words in text file: "", num_words)

# printing total line count
print(""Number of lines in text file: "", num_lines)

# printing total character count
print('Number of characters in text file: ', num_charc)

# printing total space count
print('Number of spaces in text file: ', num_spaces)

# Driver Code:
if __name__ == '__main__':
fname = 'File1.txt'
try:
counter(fname)
except:
print('File not found')","import os

def get_file_size(file_name):
    size = os.path.getsize(file_name)
    return size

def get_file_lines(file_name):
    with open(file_name, 'r') as f:
        lines = f.readlines()
    return len(lines)

def get_file_words(file_name):
    with open(file_name, 'r') as f:
        words ="
2094,Split a text column into two columns in Pandas DataFrame in Python,"# import Pandas as pd
import pandas as pd

# create a new data frame
df = pd.DataFrame({'Name': ['John Larter', 'Robert Junior', 'Jonny Depp'],
'Age':[32, 34, 36]})

print(""Given Dataframe is :\n"",df)

# bydefault splitting is done on the basis of single space.
print(""\nSplitting 'Name' column into two different columns :\n"",
df.Name.str.split(expand=True))","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pima-indians-diabetes.csv?raw=true')

df.head()

df.columns = ['age','sex', 'bmi', 'bp','s1','s2','s3','s4','s5','s6']

df.head()

df.columns ="
2095,Write a Python program to Creating DataFrame from dict of narray/lists,"# Python code demonstrate creating
# DataFrame from dict narray / lists
# By default addresses.


import pandas as pd


# initialise data of lists.
data = {'Category':['Array', 'Stack', 'Queue'],
'Marks':[20, 21, 19]}


# Create DataFrame
df = pd.DataFrame(data)


# Print the output.
print(df )","import pandas as pd

data = {'Name': ['Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi"
2096,Write a Python program to Numpy np.eigvals() method,"# import numpy
from numpy import linalg as LA

# using np.eigvals() method
gfg = LA.eigvals([[1, 2], [3, 4]])

print(gfg)","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(np.eigvals(A))

""""""

# Solution

import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(np.eigvals(A))

""""""

# Solution

import n"
2097,Saving a Networkx graph in GEXF format and visualize using Gephi in Python,"# importing the required module
import networkx as nx


# making a simple graph with 1 node.
G = nx.path_graph(10)


# saving graph created above in gexf format
nx.write_gexf(G, ""geeksforgeeks.gexf"")","python -m networkx.examples.pydot_agraph -G G -o G.gexf

""""""

import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
import os
import sys

# Set the path to the directory where the source code is
source_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(source_dir)

from"
2098,How to Sort CSV by multiple columns in Python ,"# importing pandas package
import pandas as pd

# making data frame from csv file
data = pd.read_csv(""diamonds.csv"")

# sorting data frame by a column
data.sort_values(""carat"", axis=0, ascending=True,
inplace=True, na_position='first')

# display
data.head(10)","import csv

with open('data.csv', newline='') as f:
    reader = csv.reader(f)
    file_data = list(reader)

# To sort the file by multiple columns
file_data.sort(key=lambda x: (x[3], x[5], x[2]))

# To print the first 5 rows
print(file_data[:5])

# To print the last 5 rows
print(file_data[-5:])"
2099,Write a Python program to Extract Symmetric Tuples,"# Python3 code to demonstrate working of
# Extract Symmetric Tuples
# Using dictionary comprehension + set()

# initializing list
test_list = [(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]

# printing original list
print(""The original list is : "" + str(test_list))

# Extract Symmetric Tuples
# Using dictionary comprehension + set()
temp = set(test_list) & {(b, a) for a, b in test_list}
res = {(a, b) for a, b in temp if a < b}

# printing result
print(""The Symmetric tuples : "" + str(res))","def extract_symmetric_tuples(lst):
    return tuple(sorted(lst, key=lambda x: x[0]))

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(extract_symmetric_tuples(lst))

""""""

# Solution:

def extract_symmetric_tuples(lst):
    return tuple(sorted(lst, key=lambda x: x["
2100,Write a Python program to Remove keys with substring values,"# Python3 code to demonstrate working of
# Remove keys with substring values
# Using any() + generator expression

# initializing dictionary
test_dict = {1 : 'Gfg is best for geeks', 2 : 'Gfg is good', 3 : 'I love Gfg'}

# printing original dictionary
print(""The original dictionary : "" + str(test_dict))

# initializing substrings
sub_list = ['love', 'good']

# Remove keys with substring values
# Using any() + generator expression
res = dict()
for key, val in test_dict.items():
if not any(ele in val for ele in sub_list):
res[key] = val

# printing result
print(""Filtered Dictionary : "" + str(res))","def remove_substring(dict,substring):
    for key in dict:
        if dict[key] == substring:
            dict.pop(key)
    return dict

# Driver code
dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}
substring = 'ab'
print(remove_substring(dict,substring))

""""""

# Solution

def remove_substring(dict,"
2101,numpy string operations | upper() function in Python,"# Python Program explaining
# numpy.char.upper() function

import numpy as geek


in_arr = geek.array(['p4q r', '4q rp', 'q rp4', 'rp4q'])
print (""input array : "", in_arr)

out_arr = geek.char.upper(in_arr)
print (""output uppercased array :"", out_arr)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)
print(a.sum())
print(a.mean())
print(a.max())
print(a.min())
print(a.std())
print(a.var())

# Solution:

# import numpy as np
#
# a = np.array([[1, 2, 3], [4, 5, 6]])
# print(a"
2102,Map function and Lambda expression in Python to replace characters,"# Function to replace a character c1 with c2
# and c2 with c1 in a string S

def replaceChars(input,c1,c2):

# create lambda to replace c1 with c2, c2
# with c1 and other will remain same
# expression will be like ""lambda x:
# x if (x!=c1 and x!=c2) else c1 if (x==c2) else c2""
# and map it onto each character of string
newChars = map(lambda x: x if (x!=c1 and x!=c2) else \
c1 if (x==c2) else c2,input)

# now join each character without space
# to print resultant string
print (''.join(newChars))

# Driver program
if __name__ == ""__main__"":
input = 'grrksfoegrrks'
c1 = 'e'
c2 = 'r'
replaceChars(input,c1,c2)","def map(fn, seq):
    return map(lambda x: fn(x), seq)

def map_lambda(fn, seq):
    return map(lambda x: fn(x), seq)

def map_lambda_2(fn, seq):
    return map(lambda x: fn(x), seq)

def map_lambda_3(fn, seq):
    return map(lambda x: fn(x), seq)

def map_lambda_4(fn, seq):
    return map"
2103,Validate an IP address using Python without using RegEx,"# Python program to verify IP without using RegEx


# explicit function to verify IP
def isValidIP(s):


# check number of periods
if s.count('.') != 3:
return 'Invalid Ip address'


l = list(map(str, s.split('.')))


# check range of each number between periods
for ele in l:
if int(ele) < 0 or int(ele) > 255:
return 'Invalid Ip address'


return 'Valid Ip address'




# Driver Code
print(isValidIP('666.1.2.2'))",">>> import re
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>"
2104,Write a Python program to Consecutive characters frequency,"# Python3 code to demonstrate working of
# Consecutive characters frequency
# Using list comprehension + groupby()
from itertools import groupby

# initializing string
test_str = ""geekksforgggeeks""

# printing original string
print(""The original string is : "" + test_str)

# Consecutive characters frequency
# Using list comprehension + groupby()
res = [len(list(j)) for _, j in groupby(test_str)]

# printing result
print(""The Consecutive characters frequency : "" + str(res))","def consecutive_char_frequency(string):
    count = 0
    for i in range(len(string)):
        if string[i] == string[i+1]:
            count += 1
    return count

print(consecutive_char_frequency(""abcdefghijklmnopqrstuvwxyz""))

""""""

def consecutive_char_frequency(string):
    count = 0
    for i in range(len(string)):
        if string[i] == string[i"
2105,How to save a NumPy array to a text file in Python,"# Program to save a NumPy array to a text file


# Importing required libraries
import numpy


# Creating an array
List = [1, 2, 3, 4, 5]
Array = numpy.array(List)


# Displaying the array
print('Array:\n', Array)
file = open(""file1.txt"", ""w+"")


# Saving the array in a text file
content = str(Array)
file.write(content)
file.close()


# Displaying the contents of the text file
file = open(""file1.txt"", ""r"")
content = file.read()


print(""\nContent in file1.txt:\n"", content)
file.close()","import numpy as np

# Create a NumPy array
arr = np.array([1, 2, 3, 4, 5])

# Save the NumPy array as a text file
np.savetxt('arr.txt', arr)

# Load the NumPy array as a text file
arr = np.loadtxt('arr.txt')

# Print the NumPy array
print(arr)

# Create a NumPy array
arr = np.array([1, 2, 3, 4, 5"
2106,Select any row from a Dataframe using iloc[] and iat[] in Pandas in Python,"import pandas as pd

# Create the dataframe
df = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/11'],
'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],
'Cost':[10000, 5000, 15000, 2000]})


# Create an empty list
Row_list =[]

# Iterate over each row
for i in range((df.shape[0])):

# Using iloc to access the values of
# the current row denoted by ""i""
Row_list.append(list(df.iloc[i, :]))

# Print the first 3 elements
print(Row_list[:3])","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

# Solution 1
df.iloc[:, 0] = df.iloc[:, 0].astype('int64')

# Solution 2
df.iat[0, 0] = df.iat[0, 0].astype('int64')

#"
2107,How to multiply a polynomial to another using NumPy in Python,"# importing package
import numpy

# define the polynomials
# p(x) = 5(x**2) + (-2)x +5

px = (5, -2, 5)
# q(x) = 2(x**2) + (-5)x +2
qx = (2, -5, 2)

# mul the polynomials
rx = numpy.polynomial.polynomial.polymul(px, qx)

# print the resultant polynomial
print(rx)","import numpy as np

def multiply(poly, x):
    """"""Multiply a polynomial by a scalar.

    Args:
        poly (np.ndarray): A polynomial.
        x (float): A scalar.

    Returns:
        np.ndarray: The result of the multiplication.
    """"""
    return np.dot(poly, x)

def multiply_scalar(poly, x):
    """"""Multiply a polynomial by a scal"
2108,Creating a Pandas Series from Dictionary in Python,"# import the pandas lib as pd
import pandas as pd

# create a dictionary
dictionary = {'A' : 10, 'B' : 20, 'C' : 30}

# create a series
series = pd.Series(dictionary)

print(series)","import pandas as pd

# Create a Pandas Series from a dictionary
df = pd.Series({""A"": 1, ""B"": 2, ""C"": 3})

# Print the Series
print(df)

# Create a Pandas Series from a dictionary
df = pd.Series({""A"": 1, ""B"": 2, ""C"": 3})

# Print the Series
print(df)

# Create a Pandas Series from a dictionary
df = pd.Series({""A"": 1"
2109,Compute the median of the flattened NumPy array in Python,"# importing numpy as library
import numpy as np


# creating 1 D array with odd no of
# elements
x_odd = np.array([1, 2, 3, 4, 5, 6, 7])
print(""\nPrinting the Original array:"")
print(x_odd)

# calculating median
med_odd = np.median(x_odd)
print(""\nMedian of the array that contains \
odd no of elements:"")
print(med_odd)","import numpy as np

def median(arr):
    arr = np.array(arr)
    arr = arr.flatten()
    arr = np.sort(arr)
    return arr[len(arr)//2]

print(median([1,2,3,4,5,6,7,8,9,10]))

""""""

# Solution

import numpy as np

def median(arr):
    arr = np.array(arr)
    arr ="
2110,How to check whether specified values are present in NumPy array in Python,"# importing Numpy package
import numpy as np

# creating a Numpy array
n_array = np.array([[2, 3, 0],
[4, 1, 6]])

print(""Given array:"")
print(n_array)

# Checking whether specific values
# are present in ""n_array"" or not
print(2 in n_array)
print(0 in n_array)
print(6 in n_array)
print(50 in n_array)
print(10 in n_array)","import numpy as np

a = np.array([1, 2, 3, 4, 5])

if a[0] == 1:
    print(""a[0] = 1"")

if a[1] == 2:
    print(""a[1] = 2"")

if a[2] == 3:
    print(""a[2] = 3"")

if a[3] == 4:
    print(""a[3] = 4"")

if a[4]"
2111,Write a Python program to Possible Substring count from String,"# Python3 code to demonstrate working of
# Possible Substring count from String
# Using min() + list comprehension + count()


# initializing string
test_str = ""gekseforgeeks""


# printing original string
print(""The original string is : "" + str(test_str))


# initializing arg string
arg_str = ""geeks""


# using min and count to get minimum possible
# occurrence of character
res = min(test_str.count(char) // arg_str.count(char) for char in set(arg_str))


# printing result
print(""Possible substrings count : "" + str(res))","def count_substring(string, sub_string):
    count = 0
    for i in range(len(string)):
        if string[i:i+len(sub_string)] == sub_string:
            count += 1
    return count

# driver code
string = ""ABABAC""
sub_string = ""ABA""

print(count_substring(string, sub_string))

""""""
Output:
6
"""""""
2112,Create a Numpy array filled with all ones in Python,"# Python Program to create array with all ones
import numpy as geek

a = geek.ones(3, dtype = int)
print(""Matrix a : \n"", a)

b = geek.ones([3, 3], dtype = int)
print(""\nMatrix b : \n"", b)","import numpy as np

a = np.ones((3,3))
print(a)

# Create a Numpy array filled with all ones in Python

# Create a Numpy array filled with all ones in Python

# Create a Numpy array filled with all ones in Python

# Create a Numpy array filled with all ones in Python

# Create a Numpy array filled with all ones in Python

# Create a Numpy array filled with all ones in Python

# Create a Numpy array filled with all"
2113,How to check which Button was clicked in Tkinter  in Python,"# Python program to determine which
# button was pressed in tkinter

# Import the library tkinter
from tkinter import *

# Create a GUI app
app = Tk()

# Create a function with one paramter, i.e., of
# the text you want to show when button is clicked
def which_button(button_press):
# Printing the text when a button is clicked
print(button_press)


# Creating and displaying of button b1
b1 = Button(app, text=""Apple"",
command=lambda m=""It is an apple"": which_button(m))

b1.grid(padx=10, pady=10)

# Creating and displaying of button b2
b2 = Button(app, text=""Banana"",
command=lambda m=""It is a banana"": which_button(m))
b2.grid(padx=10, pady=10)

# Make the infinite loop for displaying the app
app.mainloop()","import tkinter as tk

def click_button(event):
    print(event.x, event.y)

root = tk.Tk()

button = tk.Button(root, text=""Click Me"", command=click_button)
button.pack()

root.mainloop()

""""""

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(meal_"
2114,Make a Pandas DataFrame with two-dimensional list | Python,"# import pandas as pd
import pandas as pd

# List1
lst = [['Geek', 25], ['is', 30],
['for', 26], ['Geeksforgeeks', 22]]

# creating df object with columns specified
df = pd.DataFrame(lst, columns =['Tag', 'number'])
print(df )","import pandas as pd

df = pd.DataFrame(
    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],
    columns=['a', 'b', 'c'],
    index=['one', 'two', 'three']
)

print(df)

# Solution:

# df = pd.DataFrame(
#     [[1, 2, 3], [4, 5, 6], [7, 8, 9"
2115,Write a Python program to Convert a list of Tuples into Dictionary,"# Python code to convert into dictionary

def Convert(tup, di):
for a, b in tup:
di.setdefault(a, []).append(b)
return di

# Driver Code
tups = [(""akash"", 10), (""gaurav"", 12), (""anand"", 14),
(""suraj"", 20), (""akhil"", 25), (""ashish"", 30)]
dictionary = {}
print (Convert(tups, dictionary))","def convert_list_to_dict(list):
    dict = {}
    for i in range(len(list)):
        dict[list[i][0]] = list[i][1]
    return dict

print(convert_list_to_dict([('a', 1), ('b', 2), ('c', 3)]))

""""""

def convert_list_to_dict(list):
    dict = {}
    for i in range(len(list)):
        dict["
2116,Bisect Algorithm Functions in Python,"# Python code to demonstrate the working of
# bisect(), bisect_left() and bisect_right()

# importing ""bisect"" for bisection operations
import bisect

# initializing list
li = [1, 3, 4, 4, 4, 6, 7]

# using bisect() to find index to insert new element
# returns 5 ( right most possible index )
print (""The rightmost index to insert, so list remains sorted is : "", end="""")
print (bisect.bisect(li, 4))

# using bisect_left() to find index to insert new element
# returns 2 ( left most possible index )
print (""The leftmost index to insert, so list remains sorted is : "", end="""")
print (bisect.bisect_left(li, 4))

# using bisect_right() to find index to insert new element
# returns 4 ( right most possible index )
print (""The rightmost index to insert, so list remains sorted is : "", end="""")
print (bisect.bisect_right(li, 4, 0, 4))","def bisect(a, x, lo, hi):
    if hi < lo:
        return -1
    mid = (lo + hi) // 2
    if a[mid] == x:
        return mid
    elif a[mid] > x:
        return bisect(a, x, lo, mid - 1)
    else:
        return bisect(a, x, mid + 1, hi)

a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10"
2117,Handling missing keys in Python dictionaries,"# Python code to demonstrate Dictionary and
# missing value error


# initializing Dictionary
d = { 'a' : 1 , 'b' : 2 }


# trying to output value of absent key
print (""The value associated with 'c' is : "")
print (d['c'])","def solution(d):
    # Fill this in.
    return d

# For this problem, the solution is a dictionary.
# The dictionary contains the following keys:
#   - 'a': 1
#   - 'b': 2
#   - 'c': 3
#   - 'd': 4
#   - 'e': 5
#   - 'f': 6
#   - 'g': 7
#   - 'h': 8
#   - 'i': 9
#   - 'j': 10
#"
2118,Construct a DataFrame in Pandas using string data in Python,"# importing pandas as pd
import pandas as pd

# import the StrinIO function
# from io module
from io import StringIO

# wrap the string data in StringIO function
StringData = StringIO(""""""Date;Event;Cost
10/2/2011;Music;10000
11/2/2011;Poetry;12000
12/2/2011;Theatre;5000
13/2/2011;Comedy;8000
"""""")

# let's read the data using the Pandas
# read_csv() function
df = pd.read_csv(StringData, sep ="";"")

# Print the dataframe
print(df)","import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'col1': [1, 2, 3, 4, 5],
                   'col2': [10, 20, 30, 40, 50]})

# Print the DataFrame
print(df)

# Create a DataFrame from a dictionary
df = pd.DataFrame({""col1"": [1, 2, 3, 4, 5],
                   ""col2"": [10, 20, 30, 40,"
2119,Write a Python program to sort a list of tuples alphabetically,"# Python program to sort a
# list of tuples alphabetically


# Function to sort the list of
# tuples

def SortTuple(tup):

# Getting the length of list
# of tuples
n = len(tup)

for i in range(n):
for j in range(n-i-1):

if tup[j][0] > tup[j + 1][0]:
tup[j], tup[j + 1] = tup[j + 1], tup[j]

return tup

# Driver's code

tup = [(""Amana"", 28), (""Zenat"", 30), (""Abhishek"", 29),
(""Nikhil"", 21), (""B"", ""C"")]

print(SortTuple(tup))","import collections

def sort_tuples(tuples):
    # create a new list of tuples
    new_tuples = []
    # create a new list of tuples
    for tup in tuples:
        new_tuples.append(tup)
    # sort the new list of tuples
    new_tuples.sort()
    # return the sorted list of tuples
    return new_tuples

# create a list of tuples
tuples = [(1, '"
2120,numpy string operations | lower() function in Python,"# Python Program explaining
# numpy.char.lower() function

import numpy as geek


in_arr = geek.array(['P4Q R', '4Q RP', 'Q RP4', 'RP4Q'])
print (""input array : "", in_arr)

out_arr = geek.char.lower(in_arr)
print (""output lowercased array :"", out_arr)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a)
print(b)

print(a.dot(b))
print(a.dot(b, axis=0))
print(a.dot(b, axis=1))

print(a.T)
print(a.T.dot(b))
print"
2121,numpy.random.laplace() in Python,"# import numpy
import numpy as np
import matplotlib.pyplot as plt

# Using numpy.random.laplace() method
gfg = np.random.laplace(1.45, 15, 1000)

count, bins, ignored = plt.hist(gfg, 30, density = True)
plt.show()","import numpy as np
import matplotlib.pyplot as plt

np.random.laplace(loc=0, scale=1, size=100)

""""""

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the dataset
dataset = pd.read_csv('Social_Network_Ads.csv')
X = dataset.iloc[:, [2, 3]].values
y ="
2122,Convert class object to JSON in Python,"# import required packages
import json

# custom class
class Student:
def __init__(self, roll_no, name, batch):
self.roll_no = roll_no
self.name = name
self.batch = batch


class Car:
def __init__(self, brand, name, batch):
self.brand = brand
self.name = name
self.batch = batch


# main function
if __name__ == ""__main__"":

# create two new student objects
s1 = Student(""85"", ""Swapnil"", ""IMT"")
s2 = Student(""124"", ""Akash"", ""IMT"")

# create two new car objects
c1 = Car(""Honda"", ""city"", ""2005"")
c2 = Car(""Honda"", ""Amaze"", ""2011"")

# convert to JSON format
jsonstr1 = json.dumps(s1.__dict__)
jsonstr2 = json.dumps(s2.__dict__)
jsonstr3 = json.dumps(c1.__dict__)
jsonstr4 = json.dumps(c2.__dict__)

# print created JSON objects
print(jsonstr1)
print(jsonstr2)
print(jsonstr3)
print(jsonstr4)","class MyClass:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __str__(self):
        return f""MyClass object: {self.name} is {self.age}""

    def __repr__(self):
        return f""MyClass object: {self.name} is {self.age}""

    def __eq__(self, other):
        return self.name == other.name and self.age == other.age"
2123,Write a Python Program for Bitonic Sort,"# Python program for Bitonic Sort. Note that this program
# works only when size of input is a power of 2.


# The parameter dir indicates the sorting direction, ASCENDING
# or DESCENDING; if (a[i] > a[j]) agrees with the direction,
# then a[i] and a[j] are interchanged.*/
def compAndSwap(a, i, j, dire):
if (dire==1 and a[i] > a[j]) or (dire==0 and a[i] > a[j]):
a[i],a[j] = a[j],a[i]


# It recursively sorts a bitonic sequence in ascending order,
# if dir = 1, and in descending order otherwise (means dir=0).
# The sequence to be sorted starts at index position low,
# the parameter cnt is the number of elements to be sorted.
def bitonicMerge(a, low, cnt, dire):
if cnt > 1:
k = cnt/2
for i in range(low , low+k):
compAndSwap(a, i, i+k, dire)
bitonicMerge(a, low, k, dire)
bitonicMerge(a, low+k, k, dire)


# This function first produces a bitonic sequence by recursively
# sorting its two halves in opposite sorting orders, and then
# calls bitonicMerge to make them in the same order
def bitonicSort(a, low, cnt,dire):
if cnt > 1:
k = cnt/2
bitonicSort(a, low, k, 1)
bitonicSort(a, low+k, k, 0)
bitonicMerge(a, low, cnt, dire)


# Caller of bitonicSort for sorting the entire array of length N
# in ASCENDING order
def sort(a,N, up):
bitonicSort(a,0, N, up)


# Driver code to test above
a = [3, 7, 4, 8, 6, 2, 1, 5]
n = len(a)
up = 1


sort(a, n, up)
print (""\n\nSorted array is"")
for i in range(n):
print(""%d"" %a[i]),","def bitonic_sort(arr):
    # Write your code here
    arr.sort()
    for i in range(len(arr)):
        if arr[i] > arr[i+1]:
            arr[i], arr[i+1] = arr[i+1], arr[i]
    return arr

arr = [1, 5, 2, 4, 3, 6, 7, 8, 9, 10]
print(bitonic_sort(arr))

""""""

""""""

def bitonic"
2124,Write a Python program to Ways to remove a key from dictionary,"# Python code to demonstrate
# removal of dict. pair
# using del

# Initializing dictionary
test_dict = {""Arushi"" : 22, ""Anuradha"" : 21, ""Mani"" : 21, ""Haritha"" : 21}

# Printing dictionary before removal
print (""The dictionary before performing remove is : "" + str(test_dict))

# Using del to remove a dict
# removes Mani
del test_dict['Mani']

# Printing dictionary after removal
print (""The dictionary after remove is : "" + str(test_dict))

# Using del to remove a dict
# raises exception
del test_dict['Manjeet']","def remove_key(d, key):
    if key in d:
        del d[key]
    else:
        print(""Key not found"")

d = {'a': 1, 'b': 2, 'c': 3}
remove_key(d, 'a')
print(d)

""""""

def remove_key(d, key):
    if key in d:
        del d[key]
    else:
        print(""Key not found"")

d = {'"
2125,Write a Python Program for Gnome Sort,"# Python program to implement Gnome Sort


# A function to sort the given list using Gnome sort
def gnomeSort( arr, n):
index = 0
while index < n:
if index == 0:
index = index + 1
if arr[index] >= arr[index - 1]:
index = index + 1
else:
arr[index], arr[index-1] = arr[index-1], arr[index]
index = index - 1


return arr


# Driver Code
arr = [ 34, 2, 10, -9]
n = len(arr)


arr = gnomeSort(arr, n)
print ""Sorted sequence after applying Gnome Sort :"",
for i in arr:
print i,


# Contributed By Harshit Agrawal","def gnome_sort(arr):
    for i in range(len(arr)):
        for j in range(i, len(arr)):
            if arr[j] < arr[i]:
                arr[i], arr[j] = arr[j], arr[i]
    return arr

arr = [10, 4, 2, 5, 8, 9, 1, 7, 6, 3]
print(gnome_sort(arr))

""""""

def gnome_sort(arr):
    for"
2126,Reverse words in a given String in Python,"# Function to reverse words of string

def rev_sentence(sentence):

# first split the string into words
words = sentence.split(' ')

# then reverse the split string list and join using space
reverse_sentence = ' '.join(reversed(words))

# finally return the joined string
return reverse_sentence

if __name__ == ""__main__"":
input = 'geeks quiz practice code'
print (rev_sentence(input))","def reverse_words(s):
    return s[::-1]

print(reverse_words(""hello world""))

""""""

def reverse_words(s):
    return s[::-1]

print(reverse_words(""hello world""))"
2127,Write a Python program to Row-wise element Addition in Tuple Matrix,"# Python3 code to demonstrate working of
# Row-wise element Addition in Tuple Matrix
# Using enumerate() + list comprehension

# initializing list
test_list = [[('Gfg', 3), ('is', 3)], [('best', 1)], [('for', 5), ('geeks', 1)]]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing Custom eles
cus_eles = [6, 7, 8]

# Row-wise element Addition in Tuple Matrix
# Using enumerate() + list comprehension
res = [[sub + (cus_eles[idx], ) for sub in val] for idx, val in enumerate(test_list)]

# printing result
print(""The matrix after row elements addition : "" + str(res))","def add_tuple(tup1, tup2):
    return tuple(tup1[i] + tup2[i] for i in range(len(tup1)))

tup1 = (1, 2, 3, 4, 5)
tup2 = (6, 7, 8, 9, 10)

print(add_tuple(tup1, tup2))

""""""

def add_tuple(tup1, tup2):"
2128,Write a Python Program to print hollow half diamond hash pattern,"# python program to print
# hollow half diamond star


# function to print hollow
# half diamond star
def hollow_half_diamond(N):

# this for loop is for
# printing upper half
for i in range( 1, N + 1):
for j in range(1, i + 1):

# this is the condition to
# print ""#"" only on the
# boundaries
if i == j or j == 1:
print(""#"", end ="" "")

# print "" ""(space) on the rest
# of the area
else:
print("" "", end ="" "")
print()

# this for loop is to print lower half
for i in range(N - 1, 0, -1):

for j in range(1, i + 1):

if j == 1 or i == j:
print(""#"", end ="" "")

else:
print("" "", end ="" "")

print()

# Driver Code
if __name__ == ""__main__"":
N = 7
hollow_half_diamond( N )
","def hollow_diamond(n):
    for i in range(n):
        for j in range(n):
            print(end="" "")
        for k in range(n):
            print(""*"", end="" "")
        print()

n = int(input(""Enter the number of rows: ""))
hollow_diamond(n)

""""""

# Solution:

def hollow_diamond(n):
    for i in range(n):
        for j in range(n"
2129,Compute the condition number of a given matrix using NumPy in Python,"# Importing library
import numpy as np

# Creating a 2X2 matrix
matrix = np.array([[4, 2], [3, 1]])

print(""Original matrix:"")
print(matrix)

# Output
result = np.linalg.cond(matrix)

print(""Condition number of the matrix:"")
print(result)","import numpy as np

A = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

print(np.linalg.cond(A))

""""""

# Solution

import numpy as np

A = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])"
2130,How to extract paragraph from a website and save it as a text file in Python,"import urllib.request
from bs4 import BeautifulSoup

# here we have to pass url and path
# (where you want to save ur text file)
urllib.request.urlretrieve(""https://www.geeksforgeeks.org/grep-command-in-unixlinux/?ref=leftbar-rightbar"",
""/home/gpt/PycharmProjects/pythonProject1/test/text_file.txt"")

file = open(""text_file.txt"", ""r"")
contents = file.read()
soup = BeautifulSoup(contents, 'html.parser')

f = open(""test1.txt"", ""w"")

# traverse paragraphs from soup
for data in soup.find_all(""p""):
sum = data.get_text()
f.writelines(sum)

f.close()","import urllib.request
import urllib.parse
import urllib.error

url = ""http://www.python.org""

# Open the URL in a new tab and specify the user agent
# This will allow us to download the page
request = urllib.request.Request(url, headers={'User-Agent': 'Mozilla/5.0'})

# Read the response
response = urllib.request.urlopen(request)

# Print"
2131,Write a Python program to Minimum number of subsets with distinct elements using Counter,"# Python program to find Minimum number of
# subsets with distinct elements using Counter

# function to find Minimum number of subsets
# with distinct elements
from collections import Counter

def minSubsets(input):

# calculate frequency of each element
freqDict = Counter(input)

# get list of all frequency values
# print maximum from it
print (max(freqDict.values()))

# Driver program
if __name__ == ""__main__"":
input = [1, 2, 3, 3]
minSubsets(input)","def min_subsets(arr):
    count = Counter(arr)
    return count.most_common(1)[0][1]

print(min_subsets([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def min_subsets(arr):
    count = Counter(arr)
    return count.most_common(1)[0][1]

print(min_subsets([1, 2, 3, 4"
2132,How to add one polynomial to another using NumPy in Python,"# importing package
import numpy

# define the polynomials
# p(x) = 5(x**2) + (-2)x +5
px = (5,-2,5)

# q(x) = 2(x**2) + (-5)x +2
qx = (2,-5,2)

# add the polynomials
rx = numpy.polynomial.polynomial.polyadd(px,qx)

# print the resultant polynomial
print(rx)","import numpy as np

x = np.array([1, 2, 3, 4, 5])
y = np.array([1, 2, 3, 4, 5])

# Add the polynomial to the solution
x = np.append(x, y)

# Print the solution
print(x)

# Add another polynomial to the solution
x = np.append(x, y, axis=0)

# Print the solution
print(x)

# Add"
2133,Write a Python program to Numpy matrix.mean(),"# import the important module in python
import numpy as np

# make matrix with numpy
gfg = np.matrix('[64, 1; 12, 3]')

# applying matrix.mean() method
geeks = gfg.mean()

print(geeks)","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(A.mean())

""""""

# Solution

import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(A.mean())

""""""

# Solution

import numpy as np

A = np.array([[1"
2134,Write a Python program to Remove empty List from List,"# Python3 code to demonstrate
# Remove empty List from List
# using list comprehension

# Initializing list
test_list = [5, 6, [], 3, [], [], 9]

# printing original list
print(""The original list is : "" + str(test_list))

# Remove empty List from List
# using list comprehension
res = [ele for ele in test_list if ele != []]

# printing result
print (""List after empty list removal : "" + str(res))","def remove_empty_list(lst):
    for i in range(len(lst)):
        if lst[i] == []:
            lst.pop(i)
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(remove_empty_list(lst))

""""""

# Solution

def remove_empty_list(lst):
    for i in range(len(lst)):"
2135,Write a Python program to Read CSV Column into List without header,"import csv

# reading data from a csv file 'Data.csv'
with open('Data.csv', newline='') as file:

reader = csv.reader(file, delimiter = ' ')

# store the headers in a separate variable,
# move the reader object to point on the next row
headings = next(reader)

# output list to store all rows
Output = []
for row in reader:
Output.append(row[:])

for row_num, rows in enumerate(Output):
print('data in row number {} is {}'.format(row_num+1, rows))

print('headers were: ', headings)","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    data = list(csv_reader)

print(data)

# Solution:

# import csv
#
# with open('data.csv', 'r') as f:
#     csv_reader = csv.reader(f)
#     data = list(csv_reader)
#
# print(data)

# Solution:

#"
2136,Write a Python program to Create Nested Dictionary using given List,"# Python3 code to demonstrate working of
# Nested Dictionary with List
# Using loop + zip()

# initializing dictionary and list
test_dict = {'Gfg' : 4, 'is' : 5, 'best' : 9}
test_list = [8, 3, 2]

# printing original dictionary and list
print(""The original dictionary is : "" + str(test_dict))
print(""The original list is : "" + str(test_list))

# using zip() and loop to perform
# combining and assignment respectively.
res = {}
for key, ele in zip(test_list, test_dict.items()):
res[key] = dict([ele])

# printing result
print(""The mapped dictionary : "" + str(res))","def nested_dictionary(d):
    for i in d:
        if type(d[i]) == dict:
            print(d[i])
            nested_dictionary(d[i])
        else:
            print(d[i])

d = {'a': 1, 'b': 2, 'c': 3}
nested_dictionary(d)

""""""

def nested_dictionary(d):
    for i in d:
        if type(d[i"
2137,Split a column in Pandas dataframe and get part of it in Python,"import pandas as pd
import numpy as np
df = pd.DataFrame({'Geek_ID':['Geek1_id', 'Geek2_id', 'Geek3_id',
'Geek4_id', 'Geek5_id'],
'Geek_A': [1, 1, 3, 2, 4],
'Geek_B': [1, 2, 3, 4, 6],
'Geek_R': np.random.randn(5)})

# Geek_A Geek_B Geek_ID Geek_R
# 0 1 1 Geek1_id random number
# 1 1 2 Geek2_id random number
# 2 3 3 Geek3_id random number
# 3 2 4 Geek4_id random number
# 4 4 6 Geek5_id random number

print(df.Geek_ID.str.split('_').str[0])","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pima-indians-diabetes.csv?raw=true')

# Split the data into X and y
X = df.iloc[:, 0:8]
y = df.iloc[:, 8]

# Split the data into training and testing sets
from sklearn.model_selection import train_test_split
X_"
2138,Pretty print Linked List in Python,"class Node:
def __init__(self, val=None):
self.val = val
self.next = None


class LinkedList:
def __init__(self, head=None):
self.head = head

def __str__(self):

# defining a blank res variable
res = """"

# initializing ptr to head
ptr = self.head

# traversing and adding it to res
while ptr:
res += str(ptr.val) + "", ""
ptr = ptr.next

# removing trailing commas
res = res.strip("", "")

# chen checking if
# anything is present in res or not
if len(res):
return ""["" + res + ""]""
else:
return ""[]""


if __name__ == ""__main__"":

# defining linked list
ll = LinkedList()

# defining nodes
node1 = Node(10)
node2 = Node(15)
node3 = Node(20)

# connecting the nodes
ll.head = node1
node1.next = node2
node2.next = node3

# when print is called, by default
#it calls the __str__ method
print(ll)","# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def display(self, head):
        current = head
        while current:
            print(current.val, end=' ')
            current = current.next

    def insert(self, head, data):
        if head is None:
            head = ListNode(data)
            return"
2139,Write a Python program to Maximum and Minimum K elements in Tuple,"# Python3 code to demonstrate working of
# Maximum and Minimum K elements in Tuple
# Using sorted() + loop


# initializing tuple
test_tup = (5, 20, 3, 7, 6, 8)


# printing original tuple
print(""The original tuple is : "" + str(test_tup))


# initializing K
K = 2


# Maximum and Minimum K elements in Tuple
# Using sorted() + loop
res = []
test_tup = list(sorted(test_tup))


for idx, val in enumerate(test_tup):
if idx < K or idx >= len(test_tup) - K:
res.append(val)
res = tuple(res)


# printing result
print(""The extracted values : "" + str(res))","def max_k(tup):
    max_k = []
    for i in range(len(tup)):
        if tup[i] > max_k[-1]:
            max_k.append(tup[i])
        else:
            max_k.append(tup[i])
    return max_k

def min_k(tup):
    min_k = []
    for i in range(len(tup)):
        if tup"
2140,Write a Python Program for Pigeonhole Sort,"# Python program to implement Pigeonhole Sort */

# source code : ""https://en.wikibooks.org/wiki/
# Algorithm_Implementation/Sorting/Pigeonhole_sort""
def pigeonhole_sort(a):
# size of range of values in the list
# (ie, number of pigeonholes we need)
my_min = min(a)
my_max = max(a)
size = my_max - my_min + 1

# our list of pigeonholes
holes = [0] * size

# Populate the pigeonholes.
for x in a:
assert type(x) is int, ""integers only please""
holes[x - my_min] += 1

# Put the elements back into the array in order.
i = 0
for count in range(size):
while holes[count] > 0:
holes[count] -= 1
a[i] = count + my_min
i += 1


a = [8, 3, 2, 7, 4, 6, 8]
print(""Sorted order is : "", end ="" "")

pigeonhole_sort(a)

for i in range(0, len(a)):
print(a[i], end ="" "")
","def pigeonhole_sort(arr):
    max_value = max(arr)
    min_value = min(arr)
    count = 0
    for i in range(max_value + 1):
        if arr.count(i) > count:
            count = arr.count(i)
            arr.remove(i)
            arr.append(i)
    for i in range(len(arr)):
        arr[i] = count
    return arr

arr = [1, 2, 3"
2141,Write a Python program to Replace Substrings from String List,"# Python3 code to demonstrate
# Replace Substrings from String List
# using loop + replace() + enumerate()

# Initializing list1
test_list1 = ['GeeksforGeeks', 'is', 'Best', 'For', 'Geeks', 'And', 'Computer Science']
test_list2 = [['Geeks', 'Gks'], ['And', '&'], ['Computer', 'Comp']]

# printing original lists
print(""The original list 1 is : "" + str(test_list1))
print(""The original list 2 is : "" + str(test_list2))

# Replace Substrings from String List
# using loop + replace() + enumerate()
sub = dict(test_list2)
for key, val in sub.items():
for idx, ele in enumerate(test_list1):
if key in ele:
test_list1[idx] = ele.replace(key, val)

# printing result
print (""The list after replacement : "" + str(test_list1))","def replace_substring(string, substring, replacement):
    # your code goes here
    return string

# read the file
f = open('string_list.txt', 'r')

# read the file
string = f.read()

# read the file
substring = 'abcdefghijklmnopqrstuvwxyz'
replacement = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

# replace the substring in the string
s ="
2142,"Write a Python dictionary, set and counter to check if frequencies can become same","# Function to Check if frequency of all characters
# can become same by one removal
from collections import Counter

def allSame(input):

# calculate frequency of each character
# and convert string into dictionary
dict=Counter(input)

# now get list of all values and push it
# in set
same = list(set(dict.values()))

if len(same)>2:
print('No')
elif len (same)==2 and same[1]-same[0]>1:
print('No')
else:
print('Yes')


# now check if frequency of all characters
# can become same

# Driver program
if __name__ == ""__main__"":
input = 'xxxyyzzt'
allSame(input)","def solution(d):
    d = dict(d)
    for i in d:
        if d[i] > 1:
            d[i] = d[i] // 2
    return d

print(solution({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12"
2143,Creating a dataframe from Pandas series in Python,"import pandas as pd
import matplotlib.pyplot as plt

author = ['Jitender', 'Purnima', 'Arpit', 'Jyoti']

auth_series = pd.Series(author)
print(auth_series)","import pandas as pd

series = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a dataframe from the series
df = pd.DataFrame(series)

# Print the head of the dataframe
print(df.head())

# Print the tail of the dataframe
print(df.tail())

# Print the shape of the dataframe
print(df.shape)

# Print the head and tail of the data"
2144,Write a Python program to print even numbers in a list,"# Python program to print Even Numbers in a List

# list of numbers
list1 = [10, 21, 4, 45, 66, 93]

# iterating each number in list
for num in list1:

# checking condition
if num % 2 == 0:
print(num, end = "" "")","def even_numbers(nums):
    for num in nums:
        if num % 2 == 0:
            print(num)

nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
even_numbers(nums)

""""""

def even_numbers(nums):
    for num in nums:
        if num % 2 == 0:
            print(num)

nums = [1, 2, 3, 4"
2145,Write a Python program to Sort Dictionary by Values Summation,"# Python3 code to demonstrate working of
# Sort Dictionary by Values Summation
# Using dictionary comprehension + sum() + sorted()

# initializing dictionary
test_dict = {'Gfg' : [6, 7, 4], 'is' : [4, 3, 2], 'best' : [7, 6, 5]}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# summing all the values using sum()
temp1 = {val: sum(int(idx) for idx in key)
for val, key in test_dict.items()}

# using sorted to perform sorting as required
temp2 = sorted(temp1.items(), key = lambda ele : temp1[ele[0]])

# rearrange into dictionary
res = {key: val for key, val in temp2}

# printing result
print(""The sorted dictionary : "" + str(res))","def solution(d):
    d = sorted(d.items(), key=lambda x: x[1], reverse=True)
    return d

""""""

def solution(d):
    d = sorted(d.items(), key=lambda x: x[1], reverse=True)
    return d

print(solution({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}))

""""""

def solution(d"
2146,numpy.moveaxis() function | Python,"# Python program explaining
# numpy.moveaxis() function

# importing numpy as geek
import numpy as geek

arr = geek.zeros((1, 2, 3, 4))

gfg = geek.moveaxis(arr, 0, -1).shape

print (gfg)","import numpy as np

a = np.array([[1, 2, 3],
              [4, 5, 6]])

print(a.moveaxis(0, 2))

""""""

# Solution

# numpy.moveaxis() function
#
# Given an array and a destination axis, move the array to the given axis.
#
# For example, move axis 0 to the first position, move axis 1 to the second position,
# and so on.
#
# Note that the order of the"
2147,Write a Python program to Test if Substring occurs in specific position,"# Python3 code to demonstrate working of
# Test if Substring occurs in specific position
# Using loop

# initializing string
test_str = ""Gfg is best""

# printing original string
print(""The original string is : "" + test_str)

# initializing range
i, j = 7, 11

# initializing substr
substr = ""best""

# Test if Substring occurs in specific position
# Using loop
res = True
k = 0
for idx in range(len(test_str)):
if idx >= i and idx < j:
if test_str[idx] != substr[k]:
res = False
break
k = k + 1

# printing result
print(""Does string contain substring at required position ? : "" + str(res))","def isSubstring(s, p):
    for i in range(len(s)):
        if s[i:i+len(p)] == p:
            return True
    return False

print(isSubstring(""abcd"", ""ab""))
print(isSubstring(""abcd"", ""abc""))
print(isSubstring(""abcd"", ""abcde""))
print(isSubstring(""abcd"", ""abcdef""))
print(isSubstring(""abcd"", ""abcdefg""))"
2148,Write a Python program to Elements Frequency in Mixed Nested Tuple,"# Python3 code to demonstrate working of
# Elements Frequency in Mixed Nested Tuple
# Using recursion + loop

# helper_fnc
def flatten(test_tuple):
for tup in test_tuple:
if isinstance(tup, tuple):
yield from flatten(tup)
else:
yield tup

# initializing tuple
test_tuple = (5, 6, (5, 6), 7, (8, 9), 9)

# printing original tuple
print(""The original tuple : "" + str(test_tuple))

# Elements Frequency in Mixed Nested Tuple
# Using recursion + loop
res = {}
for ele in flatten(test_tuple):
if ele not in res:
res[ele] = 0
res[ele] += 1

# printing result
print(""The elements frequency : "" + str(res))","def elements_frequency(tuple):
    return tuple[0] * tuple[1]

tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print(elements_frequency(tuple))

""""""

# Solution:

def elements_frequency(tuple):
    return tuple[0] * tuple[1]

tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print"
2149,Write a Python program to Permutation of a given string using inbuilt function,"# Function to find permutations of a given string
from itertools import permutations

def allPermutations(str):

# Get all permutations of string 'ABC'
permList = permutations(str)

# print all permutations
for perm in list(permList):
print (''.join(perm))

# Driver program
if __name__ == ""__main__"":
str = 'ABC'
allPermutations(str)","def permutation(s):
    if len(s) == 1:
        return [s]
    else:
        return [s[0] + permutation(s[1:]) for i in range(len(s))]

print(permutation(""abc""))

""""""

# Solution 1

def permutation(s):
    if len(s) == 1:
        return [s]
    else:
        return [s[0] + permutation(s["
2150,Write a Python program to Scoring Matrix using Dictionary,"# Python3 code to demonstrate working of
# Scoring Matrix using Dictionary
# Using loop

# initializing list
test_list = [['gfg', 'is', 'best'], ['gfg', 'is', 'for', 'geeks']]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing test dict
test_dict = {'gfg' : 5, 'is' : 10, 'best' : 13, 'for' : 2, 'geeks' : 15}

# Scoring Matrix using Dictionary
# Using loop
res = []
for sub in test_list:
sum = 0
for val in sub:
if val in test_dict:
sum += test_dict[val]
res.append(sum)

# printing result
print(""The Row scores : "" + str(res))","def solution(n, m, arr):
    # Write your code here
    # Create a dictionary to store the scores
    score = {}
    # Create a matrix to store the scores
    matrix = []
    # Create a matrix to store the scores
    for i in range(n):
        matrix.append([])
        for j in range(m):
            matrix[i].append(0)
    # Populate the matrix with the scores
    for i in range(n):
        for j in"
2151,Write a Python Lambda with underscore as an argument,"remainder = lambda num: num % 2

print(remainder(5))","def solution(x):
    return x + 1

Write a Python function that takes an integer x and returns the number of digits in x.

For example, solution(123) should return 3, because 123 has 3 digits.

For example, solution(1234) should return 5, because 1234 has 5 digits.

For example, solution(12345) should return 0, because 1234 has no digits.

For example, solution(12345678) should return 2, because 1234 has 2 digits.

For example"
2152,Find a matrix or vector norm using NumPy in Python,"# import library
import numpy as np


# initialize vector
vec = np.arange(10)


# compute norm of vector
vec_norm = np.linalg.norm(vec)


print(""Vector norm:"")
print(vec_norm)","import numpy as np

# Create a matrix
A = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

# Create a vector
b = np.array([1, 2, 3, 4])

# Solve the problem
x = np.linalg.solve(A, b)

# Print the solution
print(x)

# Create a matrix
A = np.array"
2153,Conditional operation on Pandas DataFrame columns in Python,"# importing pandas as pd
import pandas as pd

# Create the dataframe
df = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/2011'],
'Product':['Umbrella', 'Matress', 'Badminton', 'Shuttle'],
'Last Price':[1200, 1500, 1600, 352],
'Updated Price':[1250, 1450, 1550, 400],
'Discount':[10, 10, 10, 10]})

# Print the dataframe
print(df)","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5],
                   'col2': [10, 20, 30, 40, 50]})

# 1. Create a boolean column named 'is_even'
df['is_even'] = df['col1'] % 2 == 0

# 2. Print the dataframe
print(df)

# 3. Print the boolean column
print(df['is_even'])

#"
2154,Write a Python program for removing i-th character from a string,"# Python3 program for removing i-th
# indexed character from a string

# Removes character at index i
def remove(string, i):

# Characters before the i-th indexed
# is stored in a variable a
a = string[ : i]

# Characters after the nth indexed
# is stored in a variable b
b = string[i + 1: ]

# Returning string after removing
# nth indexed character.
return a + b

# Driver Code
if __name__ == '__main__':

string = ""geeksFORgeeks""

# Remove nth index element
i = 5

# Print the new string
print(remove(string, i))","def remove_i(string, i):
    return string[:i] + string[i+1:]

print(remove_i(""python"", 2))

""""""

def remove_i(string, i):
    return string[:i] + string[i+1:]

print(remove_i(""python"", 2))

""""""

def remove_i(string, i):
    return string[:i] + string[i+1:]

print(remove_i(""python"
2155,Concatenated string with uncommon characters in Python,"# Function to concatenated string with uncommon
# characters of two strings

def uncommonConcat(str1, str2):

# convert both strings into set
set1 = set(str1)
set2 = set(str2)

# take intersection of two sets to get list of
# common characters
common = list(set1 & set2)

# separate out characters in each string
# which are not common in both strings
result = [ch for ch in str1 if ch not in common] + [ch for ch in str2 if ch not in common]

# join each character without space to get
# final string
print( ''.join(result) )

# Driver program
if __name__ == ""__main__"":
str1 = 'aacdb'
str2 = 'gafd'
uncommonConcat(str1,str2)","def solution(s):
    # Write your code here
    s = s.lower()
    s = s.replace(' ', '')
    s = s.replace('.', '')
    s = s.replace(',', '')
    s = s.replace('!', '')
    s = s.replace('?', '')
    s = s.replace('-', '')
    s = s.replace('+', '')
    s = s.replace(' ', '')
    s ="
2156,Clean the string data in the given Pandas Dataframe in Python,"# importing pandas as pd
import pandas as pd

# Create the dataframe
df = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/2011'],
'Product':[' UMbreLla', ' maTress', 'BaDmintoN ', 'Shuttle'],
'Updated_Price':[1250, 1450, 1550, 400],
'Discount':[10, 8, 15, 10]})

# Print the dataframe
print(df)","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Score': [85, 90, 95, 100, 90, 100]})

df.head()

df.columns = ['Name', 'Score']
df.head()

df.columns = ['Name', 'Score']
df.head()

df.columns = ['Name', 'Score']"
2157,Write a Python program to a Sort Matrix by index-value equality count,"# Python3 code to demonstrate working of
# Sort Matrix by index-value equality count
# Using sort() + len() + enumerate()


def get_idx_ele_count(row):

# getting required count
# element and index compared, if equal added
# in list, length computed using len()
return len([ele for idx, ele in enumerate(row) if ele == idx])


# initializing list
test_list = [[3, 1, 2, 5, 4], [0, 1, 2, 3, 4],
[6, 5, 4, 3, 2], [0, 5, 4, 2]]

# printing original list
print(""The original list is : "" + str(test_list))

# inplace sorting using sort()
test_list.sort(key=get_idx_ele_count)

# printing result
print(""Sorted List : "" + str(test_list))","def solution(matrix):
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j] == 0:
                matrix[i][j] = -1
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j] == -1:
                matrix[i][j] = 0
    return matrix"
2158,How to subtract one polynomial to another using NumPy in Python,"# importing package
import numpy

# define the polynomials
# p(x) = 5(x**2) + (-2)x +5
px = (5,-2,5)

# q(x) = 2(x**2) + (-5)x +2
qx = (2,-5,2)

# subtract the polynomials
rx = numpy.polynomial.polynomial.polysub(px,qx)

# print the resultant polynomial
print(rx)","import numpy as np

x = np.array([1, 2, 3, 4, 5])
y = np.array([1, 2, 3, 4, 5])

print(x - y)

# Output:
[[-1. -1.]
 [-1. -1.]
 [-1. -1.]
 [-1. -1.]
 [-1. -1.]]

""""""

import numpy as np

x = np.array([1, 2, 3,"
2159,Write a Python program to Convert numeric words to numbers,"# Python3 code to demonstrate working of
# Convert numeric words to numbers
# Using join() + split()

help_dict = {
'one': '1',
'two': '2',
'three': '3',
'four': '4',
'five': '5',
'six': '6',
'seven': '7',
'eight': '8',
'nine': '9',
'zero' : '0'
}

# initializing string
test_str = ""zero four zero one""

# printing original string
print(""The original string is : "" + test_str)

# Convert numeric words to numbers
# Using join() + split()
res = ''.join(help_dict[ele] for ele in test_str.split())

# printing result
print(""The string after performing replace : "" + res)","def convert_to_numbers(word):
    return int(word)

print(convert_to_numbers(""one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen"".split()))

""""""

# Solution 1

def convert_to_numbers(word):
    return int(word)

print(convert_to_numbers(""one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen"".split()))

# Solution"
2160,Write a Python program to Sort String list by K character frequency,"# Python3 code to demonstrate working of
# Sort String list by K character frequency
# Using sorted() + count() + lambda


# initializing list
test_list = [""geekforgeeks"", ""is"", ""best"", ""for"", ""geeks""]


# printing original list
print(""The original list is : "" + str(test_list))


# initializing K
K = 'e'


# ""-"" sign used to reverse sort
res = sorted(test_list, key = lambda ele: -ele.count(K))


# printing results
print(""Sorted String : "" + str(res))","import string

def sort_string(string, k):
    # your code goes here
    return string

def main():
    string = ""This is a string""
    k = 3
    print(sort_string(string, k))

if __name__ == ""__main__"":
    main()"
2161,Write a Python program to Swap elements in String list,"# Python3 code to demonstrate
# Swap elements in String list
# using replace() + list comprehension

# Initializing list
test_list = ['Gfg', 'is', 'best', 'for', 'Geeks']

# printing original lists
print(""The original list is : "" + str(test_list))

# Swap elements in String list
# using replace() + list comprehension
res = [sub.replace('G', '-').replace('e', 'G').replace('-', 'e') for sub in test_list]

# printing result
print (""List after performing character swaps : "" + str(res))","def swap_elements(list1, list2):
    list1[0], list1[1] = list1[1], list1[0]
    list2[0], list2[1] = list2[1], list2[0]
    return list1, list2

list1 = [""a"", ""b"", ""c""]
list2 = [""d"", ""e"", ""f""]

print(swap_elements(list1, list2))

""""""

def swap_e"
2162,Write a Python program to Difference between two lists,"# Python code t get difference of two lists
# Using set()
def Diff(li1, li2):
return list(set(li1) - set(li2)) + list(set(li2) - set(li1))


# Driver Code
li1 = [10, 15, 20, 25, 30, 35, 40]
li2 = [25, 40, 35]
print(Diff(li1, li2))","def diff(list1, list2):
    diff = []
    for i in range(len(list1)):
        diff.append(list1[i] - list2[i])
    return diff

print(diff([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))

""""""

def diff(list1, list2):
    diff = []
    for i in range(len(list1)):
        diff.append(list1[i]"
2163,numpy string operations | count() function in Python,"# Python program explaining
# numpy.char.count() method

# importing numpy as geek
import numpy as geek

# input arrays
in_arr = geek.array(['Sayantan', ' Sayan ', 'Sayansubhra'])
print (""Input array : "", in_arr)

# output arrays
out_arr = geek.char.count(in_arr, sub ='an')
print (""Output array: "", out_arr)","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(a.sum())
print(a.mean())
print(a.max())
print(a.min())
print(a.std())
print(a.var())

""""""

# Solution

import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
2164,Write a Python program to Convert Matrix to dictionary,"# Python3 code to demonstrate working of
# Convert Matrix to dictionary
# Using dictionary comprehension + range()

# initializing list
test_list = [[5, 6, 7], [8, 3, 2], [8, 2, 1]]

# printing original list
print(""The original list is : "" + str(test_list))

# using dictionary comprehension for iteration
res = {idx + 1 : test_list[idx] for idx in range(len(test_list))}

# printing result
print(""The constructed dictionary : "" + str(res))","def matrix_to_dict(matrix):
    dictionary = {}
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            dictionary[matrix[i][j]] = matrix[i][j]
    return dictionary

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(matrix_to_dict(matrix))

""""""

def matrix_to_dict(mat"
2165,Write a Python program to Specific Characters Frequency in String List,"# Python3 code to demonstrate working of
# Specific Characters Frequency in String List
# Using join() + Counter()
from collections import Counter

# initializing lists
test_list = [""geeksforgeeks is best for geeks""]

# printing original list
print(""The original list : "" + str(test_list))

# char list
chr_list = ['e', 'b', 'g']

# dict comprehension to retrieve on certain Frequencies
res = {key:val for key, val in dict(Counter("""".join(test_list))).items() if key in chr_list}

# printing result
print(""Specific Characters Frequencies : "" + str(res))","def frequency(s):
    d = {}
    for i in s:
        if i in d:
            d[i] += 1
        else:
            d[i] = 1
    return d

def solution(s):
    d = frequency(s)
    return len(d)

print(solution(""abcdefghijklmnopqrstuvwxyz""))

""""""

def frequency(s):
    d = {}
    for i in s:
        if"
2166,Write a Python program to Sort dictionaries list by Keys Value list index,"# Python3 code to demonstrate working of
# Sort dictionaries list by Key's Value list index
# Using sorted() + lambda

# initializing lists
test_list = [{""Gfg"" : [6, 7, 8], ""is"" : 9, ""best"" : 10},
{""Gfg"" : [2, 0, 3], ""is"" : 11, ""best"" : 19},
{""Gfg"" : [4, 6, 9], ""is"" : 16, ""best"" : 1}]

# printing original list
print(""The original list : "" + str(test_list))

# initializing K
K = ""Gfg""

# initializing idx
idx = 2

# using sorted() to perform sort in basis of 1 parameter key and
# index
res = sorted(test_list, key = lambda ele: ele[K][idx])

# printing result
print(""The required sort order : "" + str(res))","def sort_dict(d):
    for i in d:
        d[i].sort()
    return d

d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}
print(sort_dict(d))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
2167,Find the size of a Dictionary in Python,"import sys

# sample Dictionaries
dic1 = {""A"": 1, ""B"": 2, ""C"": 3}
dic2 = {""Geek1"": ""Raju"", ""Geek2"": ""Nikhil"", ""Geek3"": ""Deepanshu""}
dic3 = {1: ""Lion"", 2: ""Tiger"", 3: ""Fox"", 4: ""Wolf""}

# print the sizes of sample Dictionaries
print(""Size of dic1: "" + str(sys.getsizeof(dic1)) + ""bytes"")
print(""Size of dic2: "" + str(sys.getsizeof(dic2)) + ""bytes"")
print(""Size of dic3: "" + str(sys.getsizeof(dic3)) + ""bytes"")","def size_dictionary(d):
    return len(d)

# Test your solution
print(size_dictionary({1:2, 3:4, 5:6, 7:8, 9:10}))

""""""

def size_dictionary(d):
    return len(d)

# Test your solution
print(size_dictionary({1:2, 3:4, 5:6, 7:8, 9:10}))

""""""

def size_dictionary(d):"
2168,Write a Python program to find the type of IP Address using Regex,"# Python program to find the type of Ip address


# re module provides support
# for regular expressions
import re


# Make a regular expression
# for validating an Ipv4
ipv4 = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(
25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(
25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(
25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''


# Make a regular expression
# for validating an Ipv6
ipv6 = '''(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|
([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:)
{1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1
,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}
:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{
1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA
-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a
-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0
-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,
4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}
:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9
])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0
-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]
|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]
|1{0,1}[0-9]){0,1}[0-9]))'''


# Define a function for finding
# the type of Ip address
def find(Ip):

# pass the regular expression
# and the string in search() method
if re.search(ipv4, Ip):
print(""IPv4"")
elif re.search(ipv6, Ip):
print(""IPv6"")
else:
print(""Neither"")


# Driver Code
if __name__ == '__main__' :

# Enter the Ip address
Ip = ""192.0.2.126""

# calling run function
find(Ip)

Ip = ""3001:0da8:75a3:0000:0000:8a2e:0370:7334""
find(Ip)

Ip = ""36.12.08.20.52""
find(Ip)","import re

ip_address = input(""Enter an IP address: "")

# Check if the IP address is valid
if re.match(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', ip"
2169,Write a Python: Get List of all empty Directories,"# Python program to list out
# all the empty directories


import os

# List to store all empty
# directories
empty = []

# Traversing through Test
for root, dirs, files in os.walk('Test'):

# Checking the size of tuple
if not len(dirs) and not len(files):

# Adding the empty directory to
# list
empty.append(root)

Print(""Empty Directories:"")
print(empty)","def get_list_of_empty_directories(path):
    list_of_empty_directories = []
    for root, dirs, files in os.walk(path):
        for file in files:
            if os.path.isfile(os.path.join(root, file)):
                if os.stat(os.path.join(root, file)).st_size == 0:
                    list_of_empty_directories.append(os.path.join(root, file))"
2170,Generate Random Numbers From The Uniform Distribution using NumPy in Python,"# importing module
import numpy as np


# numpy.random.uniform() method
r = np.random.uniform(size=4)

# printing numbers
print(r)","import numpy as np

# Generate a random array of size 10 using NumPy
np.random.seed(0)
x = np.random.randint(0, 100, 10)

# Generate a random array of size 10 using NumPy
np.random.seed(0)
y = np.random.randint(0, 100, 10)

# Generate a random array of size 10 using NumPy
np.random.seed(0)
z = np.random.randint"
2171,Write a Python program to print odd numbers in a List,"# Python program to print odd Numbers in a List

# list of numbers
list1 = [10, 21, 4, 45, 66, 93]

# iterating each number in list
for num in list1:

# checking condition
if num % 2 != 0:
print(num, end = "" "")","def odd_numbers(input_list):
    for i in range(len(input_list)):
        if input_list[i] % 2 == 1:
            print(input_list[i])

input_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
odd_numbers(input_list)

""""""

def odd_numbers(input_list):
    for i in range(len(input_list)):
        if"
2172,Write a Python program to Check if a given string is binary string or not,"# Python program to check
# if a string is binary or not


# function for checking the
# string is accepted or not
def check(string) :


# set function convert string
# into set of characters .
p = set(string)


# declare set of '0', '1' .
s = {'0', '1'}


# check set p is same as set s
# or set p contains only '0'
# or set p contains only '1'
# or not, if any one condition
# is true then string is accepted
# otherwise not .
if s == p or p == {'0'} or p == {'1'}:
print(""Yes"")
else :
print(""No"")





# driver code
if __name__ == ""__main__"" :


string = ""101010000111""


# function calling
check(string)","def is_binary(string):
    if len(string) % 2 == 0:
        return True
    else:
        return False

print(is_binary(""abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
2173,Write a Python program to Extract tuples having K digit elements,"# Python3 code to demonstrate working of
# Extract K digit Elements Tuples
# Using all() + list comprehension

# initializing list
test_list = [(54, 2), (34, 55), (222, 23), (12, 45), (78, )]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing K
K = 2

# using len() and str() to check length and
# perform string conversion
res = [sub for sub in test_list if all(len(str(ele)) == K for ele in sub)]

# printing result
print(""The Extracted tuples : "" + str(res))","import collections

def extract_k_digit_elements(s):
    return tuple(s[i:i+10] for i in range(0, len(s), 10))

def extract_k_digit_elements_2(s):
    return tuple(s[i:i+10] for i in range(0, len(s), 10))

def extract_k_digit_elements_3(s):
    return tuple(s[i:i+10] for i in"
2174,Write a Python program to Convert Nested Tuple to Custom Key Dictionary,"# Python3 code to demonstrate working of
# Convert Nested Tuple to Custom Key Dictionary
# Using list comprehension + dictionary comprehension

# initializing tuple
test_tuple = ((4, 'Gfg', 10), (3, 'is', 8), (6, 'Best', 10))

# printing original tuple
print(""The original tuple : "" + str(test_tuple))

# Convert Nested Tuple to Custom Key Dictionary
# Using list comprehension + dictionary comprehension
res = [{'key': sub[0], 'value': sub[1], 'id': sub[2]}
for sub in test_tuple]

# printing result
print(""The converted dictionary : "" + str(res))","def convert_tuple(tup):
    d = {}
    for i in tup:
        for j in i:
            d[j] = i
    return d

tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print(convert_tuple(tup))

""""""

# Solution

def convert_tuple(tup):
    d = {}
    for i in tup:
        for j"
2175,Using dictionary to remap values in Pandas DataFrame columns in Python,"# importing pandas as pd
import pandas as pd

# Creating the DataFrame
df = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/2011'],
'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],
'Cost':[10000, 5000, 15000, 2000]})

# Print the dataframe
print(df)","import pandas as pd

# Create a dictionary to map the column names to the values
column_mapping = {
    'Name': 'Name',
    'Age': 'Age',
    'Gender': 'Gender',
    'DOB': 'DOB',
    'Job': 'Job',
    'Salary': 'Salary'
}

# Create a dataframe from the dictionary
df = pd.DataFrame(column_mapping, columns=['Name', 'Age', '"
2176,Remove all the occurrences of an element from a list in Python,"# Python 3 code to demonstrate
# the removal of all occurrences of a
# given item using list comprehension

def remove_items(test_list, item):

# using list comprehension to perform the task
res = [i for i in test_list if i != item]

return res

# driver code
if __name__==""__main__"":

# initializing the list
test_list = [1, 3, 4, 6, 5, 1]

# the item which is to be removed
item = 1

# printing the original list
print (""The original list is : "" + str(test_list))

# calling the function remove_items()
res = remove_items(test_list, item)

# printing result
print (""The list after performing the remove operation is : "" + str(res))","def remove_all(lst, val):
    lst.remove(val)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
remove_all(lst, 8)
print(lst)

""""""

def remove_all(lst, val):
    lst.remove(val)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
remove_all("
2177,Insert row at given position in Pandas Dataframe in Python,"# importing pandas as pd
import pandas as pd


# Let's create the dataframe
df = pd.DataFrame({'Date':['10/2/2011', '12/2/2011', '13/2/2011', '14/2/2011'],
'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],
'Cost':[10000, 5000, 15000, 2000]})


# Let's visualize the dataframe
print(df)","import pandas as pd

# Create a Pandas Dataframe
df = pd.DataFrame({'col1': [1, 2, 3, 4, 5],
                   'col2': [10, 20, 30, 40, 50]})

# Insert row at given position in Pandas Dataframe in Python
df.loc[0, 'col1'] = 100

# Print the new Dataframe
print(df)

# Create a Pandas Dataframe
df = pd.DataFrame({"
2178,Write a Python program to Matrix Row subset,"# Python3 code to demonstrate working of
# Matrix Row subset
# Using any() + all() + list comprehension

# initializing lists
test_list = [[4, 5, 7], [2, 3, 4], [9, 8, 0]]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing check Matrix
check_matr = [[2, 3], [1, 2], [9, 0]]

# Matrix Row subset
# Using any() + all() + list comprehension
res = [ele for ele in check_matr if any(all(a in sub for a in ele)
for sub in test_list)]

# printing result
print(""Matrix row subsets : "" + str(res))","def MatrixRowSubset(matrix, row, col):
    if row == len(matrix):
        return False
    if col == len(matrix[0]):
        return True
    if matrix[row][col] == 0:
        return False
    matrix[row][col] = 0
    return MatrixRowSubset(matrix, row + 1, col) or MatrixRowSubset(matrix, row, col + 1)

""""""

def MatrixRowSubset(matrix, row, col"
2179,How to inverse a matrix using NumPy in Python,"# Python program to inverse
# a matrix using numpy

# Import required package
import numpy as np

# Taking a 3 * 3 matrix
A = np.array([[6, 1, 1],
[4, -2, 5],
[2, 8, 7]])

# Calculating the inverse of the matrix
print(np.linalg.inv(A))","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(np.linalg.inv(A))

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12"
2180,How to create a list of object in Python class,"# Python3 code here creating class
class geeks:
def __init__(self, name, roll):
self.name = name
self.roll = roll

# creating list
list = []

# appending instances to list
list.append( geeks('Akash', 2) )
list.append( geeks('Deependra', 40) )
list.append( geeks('Reaper', 44) )

for obj in list:
print( obj.name, obj.roll, sep =' ' )

# We can also access instances attributes
# as list[0].name, list[0].roll and so on.","class MyList(list):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.__data = []
    
    def __getitem__(self, index):
        return self.__data[index]
    
    def __setitem__(self, index, value):
        self.__data[index] = value
    
    def __delitem__(self, index):
        del self.__data[index"
2181,Write a Python Program for Recursive Insertion Sort,"# Recursive Python program for insertion sort


# Recursive function to sort an array using insertion sort
def insertionSortRecursive(arr, n):
# base case
if n <= 1:
return


# Sort first n-1 elements
insertionSortRecursive(arr, n - 1)


# Insert last element at its correct position in sorted array.
last = arr[n - 1]
j = n - 2


# Move elements of arr[0..i-1], that are
# greater than key, to one position ahead
# of their current position
while (j >= 0 and arr[j] > last):
arr[j + 1] = arr[j]
j = j - 1
arr[j + 1] = last




# Driver program to test insertion sort
if __name__ == '__main__':
A = [-7, 11, 6, 0, -3, 5, 10, 2]
n = len(A)
insertionSortRecursive(A, n)
print(A)


# Contributed by Harsh Valecha,
# Edited by Abraar Masud Nafiz.","def insertionSort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j] :
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(insertionSort(arr))

""""""

def insertionSort(arr):"
2182,How to get values of an NumPy array at certain index positions in Python,"# Importing Numpy module
import numpy as np

# Creating 1-D Numpy array
a1 = np.array([11, 10, 22, 30, 33])
print(""Array 1 :"")
print(a1)

a2 = np.array([1, 15, 60])
print(""Array 2 :"")
print(a2)

print(""\nTake 1 and 15 from Array 2 and put them in\
1st and 5th position of Array 1"")

a1.put([0, 4], a2)

print(""Resultant Array :"")
print(a1)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])

a[0, 1] = 7
a[1, 0] = 8

print(a)

# Output:
# [[1 7]
#  [4 5]
#  [8 6]]

# a[0, 1] = 7
# a[1, 0] = 8

# Output:
# [[1 7]
#"
2183,Write a Python program to Convert Binary tuple to Integer,"# Python3 code to demonstrate working of
# Convert Binary tuple to Integer
# Using join() + list comprehension + int()

# initializing tuple
test_tup = (1, 1, 0, 1, 0, 0, 1)

# printing original tuple
print(""The original tuple is : "" + str(test_tup))

# using int() with base to get actual number
res = int("""".join(str(ele) for ele in test_tup), 2)

# printing result
print(""Decimal number is : "" + str(res))","def convert_binary_tuple(tup):
    return int(''.join(map(str, tup)), 2)

print(convert_binary_tuple((1, 2, 3)))

""""""

def convert_binary_tuple(tup):
    return int(''.join(map(str, tup)), 2)

print(convert_binary_tuple((1, 2, 3)))"
2184,How to Download All Images from a Web Page in Python,"from bs4 import *
import requests
import os

# CREATE FOLDER
def folder_create(images):
try:
folder_name = input(""Enter Folder Name:- "")
# folder creation
os.mkdir(folder_name)

# if folder exists with that name, ask another name
except:
print(""Folder Exist with that name!"")
folder_create()

# image downloading start
download_images(images, folder_name)


# DOWNLOAD ALL IMAGES FROM THAT URL
def download_images(images, folder_name):

# intitial count is zero
count = 0

# print total images found in URL
print(f""Total {len(images)} Image Found!"")

# checking if images is not zero
if len(images) != 0:
for i, image in enumerate(images):
# From image tag ,Fetch image Source URL

# 1.data-srcset
# 2.data-src
# 3.data-fallback-src
# 4.src

# Here we will use exception handling

# first we will search for ""data-srcset"" in img tag
try:
# In image tag ,searching for ""data-srcset""
image_link = image[""data-srcset""]

# then we will search for ""data-src"" in img
# tag and so on..
except:
try:
# In image tag ,searching for ""data-src""
image_link = image[""data-src""]
except:
try:
# In image tag ,searching for ""data-fallback-src""
image_link = image[""data-fallback-src""]
except:
try:
# In image tag ,searching for ""src""
image_link = image[""src""]

# if no Source URL found
except:
pass

# After getting Image Source URL
# We will try to get the content of image
try:
r = requests.get(image_link).content
try:

# possibility of decode
r = str(r, 'utf-8')

except UnicodeDecodeError:

# After checking above condition, Image Download start
with open(f""{folder_name}/images{i+1}.jpg"", ""wb+"") as f:
f.write(r)

# counting number of image downloaded
count += 1
except:
pass

# There might be possible, that all
# images not download
# if all images download
if count == len(images):
print(""All Images Downloaded!"")

# if all images not download
else:
print(f""Total {count} Images Downloaded Out of {len(images)}"")

# MAIN FUNCTION START
def main(url):

# content of URL
r = requests.get(url)

# Parse HTML Code
soup = BeautifulSoup(r.text, 'html.parser')

# find all images in URL
images = soup.findAll('img')

# Call folder create function
folder_create(images)


# take url
url = input(""Enter URL:- "")

# CALL MAIN FUNCTION
main(url)","import urllib.request
import os

url = ""https://www.python.org/ftp/python/3.8.5/python-3.8.5-amd64.exe""

print(""Downloading: "" + url)

try:
    response = urllib.request.urlopen(url)
    print(""File Downloaded"")
except urllib.error.URLError as e:
    print(""Error:"", e.reason)

print(""Done"")"
2185,Write a Python program to Get list of running processes,"import wmi


# Initializing the wmi constructor
f = wmi.WMI()


# Printing the header for the later columns
print(""pid Process name"")


# Iterating through all the running processes
for process in f.Win32_Process():

# Displaying the P_ID and P_Name of the process
print(f""{process.ProcessId:<10} {process.Name}"")","import multiprocessing
import os

def get_process_info(process_name):
    process_info = os.popen('ps -A -o pid,ppid,args').read()
    process_info = process_info.split('\n')
    process_info = process_info[process_info.index(process_name) + 1:]
    process_info = [x.split() for x in process_info]
    process_info = [x for x in process_info if x"
2186,Write a Python program to Split String on vowels,"# Python3 code to demonstrate working of
# Split String on vowels
# Using split() + regex
import re


# initializing strings
test_str = 'GFGaBste4oCS'


# printing original string
print(""The original string is : "" + str(test_str))


# splitting on vowels
# constructing vowels list
# and separating using | operator
res = re.split('a|e|i|o|u', test_str)


# printing result
print(""The splitted string : "" + str(res))","def split_string(string):
    vowels = ['a', 'e', 'i', 'o', 'u']
    vowel_count = 0
    for char in string:
        if char in vowels:
            vowel_count += 1
    return vowel_count

print(split_string('Python is a high-level general-purpose programming language. Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code.'))

""""""

def split_"
2187,Write a Python program to Ways to add row/columns in numpy array,"# Python code to demonstrate
# adding columns in numpy array


import numpy as np


ini_array = np.array([[1, 2, 3], [45, 4, 7], [9, 6, 10]])


# printing initial array
print(""initial_array : "", str(ini_array));


# Array to be added as column
column_to_be_added = np.array([1, 2, 3])


# Adding column to numpy array
result = np.hstack((ini_array, np.atleast_2d(column_to_be_added).T))


# printing result
print (""resultant array"", str(result))","import numpy as np

a = np.array([[1,2,3],[4,5,6]])
print(a)

a = np.array([[1,2,3],[4,5,6]])
print(a.shape)

a = np.array([[1,2,3],[4,5,6]])
print(a.ndim)

a = np.array([[1,2,3],[4,5,6]]"
2188,Write a Python program to Flatten a 2d numpy array into 1d array,"# Python code to demonstrate
# flattening a 2d numpy array
# into 1d array

import numpy as np

ini_array1 = np.array([[1, 2, 3], [2, 4, 5], [1, 2, 3]])

# printing initial arrays
print(""initial array"", str(ini_array1))

# Multiplying arrays
result = ini_array1.flatten()

# printing result
print(""New resulting array: "", result)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a.flatten())

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a.flatten())

a = np.array([[1, 2, 3], ["
2189,Calculate the sum of all columns in a 2D NumPy array in Python,"# importing required libraries
import numpy


# explicit function to compute column wise sum
def colsum(arr, n, m):
for i in range(n):
su = 0;
for j in range(m):
su += arr[j][i]
print(su, end = "" "")


# creating the 2D Array
TwoDList = [[1, 2, 3], [4, 5, 6],
[7, 8, 9], [10, 11, 12]]
TwoDArray = numpy.array(TwoDList)


# displaying the 2D Array
print(""2D Array:"")
print(TwoDArray)


# printing the sum of each column
print(""\nColumn-wise Sum:"")
colsum(TwoDArray, len(TwoDArray[0]), len(TwoDArray))","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a.sum())

""""""

# Solution

# Python code to solve the following problem:

# Python code to solve the following problem:

# Python code to solve the following problem:

# Python code to solve the following problem:

# Python code to solve the following problem:

# Python code to solve the following problem:

#"
2190,Returning a function from a function  Python,"# define two methods


# second method that will be returned
# by first method
def B():
print(""Inside the method B."")

# first method that return second method
def A():
print(""Inside the method A."")

# return second method
return B


# form a object of first method
# i.e; second method
returned_function = A()


# call second method by first method
returned_function()","def my_function(x):
    return x**2

print(my_function(3))

""""""

def my_function(x):
    return x**2

print(my_function(3))

""""""

def my_function(x):
    return x**2

print(my_function(3))

""""""

def my_function(x):
    return x**2

print(my_function(3))

""""""

def my_function(x):"
2191,Write a Python program to numpy.fill_diagonal() method,"# import numpy
import numpy as np

# using numpy.fill_diagonal() method
array = np.array([[1, 2], [2, 1]])
np.fill_diagonal(array, 5)

print(array)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

np.fill_diagonal(a, b)

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution"
2192,Write a Python program to Count occurrences of an element in a list,"# Python code to count the number of occurrences
def countX(lst, x):
count = 0
for ele in lst:
if (ele == x):
count = count + 1
return count


# Driver Code
lst = [8, 6, 8, 10, 8, 20, 10, 8, 8]
x = 8
print('{} has occurred {} times'.format(x, countX(lst, x)))","def count_occurrences(lst, element):
    count = 0
    for i in lst:
        if i == element:
            count += 1
    return count

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
element = 5
print(count_occurrences(lst, element))

""""""

def count_occurrences(lst, element):
    count = 0
    for i in lst:"
2193,Write a Python program to print all negative numbers in a range,"# Python program to print negative Numbers in given range

start, end = -4, 19

# iterating each number in list
for num in range(start, end + 1):

# checking condition
if num < 0:
print(num, end = "" "")","def negative_numbers(start, end):
    for i in range(start, end + 1):
        if i < 0:
            print(i)

start = int(input(""Enter the start number: ""))
end = int(input(""Enter the end number: ""))

negative_numbers(start, end)

""""""

def negative_numbers(start, end):
    for i in range(start, end + 1):
        if i < 0:
            print(i"
2194,Formatting float column of Dataframe in Pandas in Python,"# import pandas lib as pd
import pandas as pd

# create the data dictionary
data = {'Month' : ['January', 'February', 'March', 'April'],
'Expense': [ 21525220.653, 31125840.875, 23135428.768, 56245263.942]}

# create the dataframe
dataframe = pd.DataFrame(data, columns = ['Month', 'Expense'])

print(""Given Dataframe :\n"", dataframe)

# round to two decimal places in python pandas
pd.options.display.float_format = '{:.2f}'.format

print('\nResult :\n', dataframe)","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5],
                   'col2': [10, 20, 30, 40, 50]})

print(df)

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5],
#                   'col2': [10, 20, 30, 40, 50]})

# print(df)

# Solution"
2195,Write a Python program to Flatten Tuples List to String,"# Python3 code to demonstrate working of
# Flatten Tuples List to String
# using join() + list comprehension

# initialize list of tuple
test_list = [('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]

# printing original tuples list
print(""The original list : "" + str(test_list))

# Flatten Tuples List to String
# using join() + list comprehension
res = ' '.join([idx for tup in test_list for idx in tup])

# printing result
print(""Tuple list converted to String is : "" + res)","def flatten(lst):
    return ''.join(lst)

print(flatten([1, 2, 3, 4, 5]))

""""""

# Solution 1

def flatten(lst):
    return ''.join(lst)

print(flatten([1, 2, 3, 4, 5]))

# Solution 2

def flatten(lst):
    return ''.join(lst[0]) + ''.join(lst[1])"
2196,Write a Python program to Remove Dictionary Key Words,"# Python3 code to demonstrate working of
# Remove Dictionary Key Words
# Using split() + loop + replace()

# initializing string
test_str = 'gfg is best for geeks'

# printing original string
print(""The original string is : "" + str(test_str))

# initializing Dictionary
test_dict = {'geeks' : 1, 'best': 6}

# Remove Dictionary Key Words
# Using split() + loop + replace()
for key in test_dict:
if key in test_str.split(' '):
test_str = test_str.replace(key, """")

# printing result
print(""The string after replace : "" + str(test_str))","def remove_keywords(dict, keywords):
    for key in keywords:
        if key in dict:
            dict.pop(key)
    return dict

print(remove_keywords({""a"": ""apple"", ""b"": ""banana"", ""c"": ""car""}, [""apple"", ""banana""]))

""""""

def remove_keywords(dict, keywords):
    for key in keywords:
        if key in dict:
            dict.pop(key)
    return dict

print(remove_"
2197,Convert unknown format strings to datetime objects in Python,"# Python3 code to illustrate the conversion of
# ""unknown format"" strings to DateTime objects

# Importing parser from the dateutil.parser
import dateutil.parser as parser

# Initializing an unknown format date string
date_string = ""19750503T080120""

# Calling the parser to parse the above
# specified unformatted date string
# into a datetime objects
date_time = parser.parse(date_string)

# Printing the converted datetime object
print(date_time)","def convert_unknown_format_string_to_datetime(unknown_format_string):
    # Your code here
    return datetime.strptime(unknown_format_string, '%Y-%m-%d %H:%M:%S')

print(convert_unknown_format_string_to_datetime('2021-01-01T00:00:00Z'))

""""""

# Solution

def convert_unknown_format_string_to_datetime(unknown"
2198,Compute the outer product of two given vectors using NumPy in Python,"# Importing library
import numpy as np

# Creating two 1-D arrays
array1 = np.array([6,2])
array2 = np.array([2,5])
print(""Original 1-D arrays:"")
print(array1)
print(array2)

# Output
print(""Outer Product of the two array is:"")
result = np.outer(array1, array2)
print(result)","a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

outer_product = np.dot(a, b)
print(outer_product)

""""""

# Solution

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12"
2199,Write a Python Program for Linear Search,"# Searching an element in a list/array in python
# can be simply done using \'in\' operator
# Example:
# if x in arr:
# print arr.index(x)

# If you want to implement Linear Search in python

# Linearly search x in arr[]
# If x is present then return its location
# else return -1

def search(arr, x):

for i in range(len(arr)):

if arr[i] == x:
return i

return -1","def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
target = 10

print(linear_search(arr, target))

""""""

def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i"
2200,How to resize Image in Write a Python program to Tkinter,"# Import Module
from tkinter import *
from PIL import Image, ImageTk","import tkinter as tk
import PIL.Image as Image

def resize_image(image, width=None, height=None):
    if width is None:
        width = image.size[0]
    if height is None:
        height = image.size[1]
    new_image = image.resize((width, height))
    return new_image

def main():
    root = tk.Tk()
    root.title(""Resize Image"")
    root"
2201,Implementation of XOR Linked List in Python,"# import required module
import ctypes



# create node class
class Node:
def __init__(self, value):
self.value = value
self.npx = 0



# create linked list class
class XorLinkedList:

# constructor
def __init__(self):
self.head = None
self.tail = None
self.__nodes = []

# method to insert node at beginning
def InsertAtStart(self, value):
node = Node(value)
if self.head is None: # If list is empty
self.head = node
self.tail = node
else:
self.head.npx = id(node) ^ self.head.npx
node.npx = id(self.head)
self.head = node
self.__nodes.append(node)

# method to insert node at end
def InsertAtEnd(self, value):
node = Node(value)
if self.head is None: # If list is empty
self.head = node
self.tail = node
else:
self.tail.npx = id(node) ^ self.tail.npx
node.npx = id(self.tail)
self.tail = node
self.__nodes.append(node)

# method to remove node at beginning
def DeleteAtStart(self):
if self.isEmpty(): # If list is empty
return ""List is empty !""
elif self.head == self.tail: # If list has 1 node
self.head = self.tail = None
elif (0 ^ self.head.npx) == id(self.tail): # If list has 2 nodes
self.head = self.tail
self.head.npx = self.tail.npx = 0
else: # If list has more than 2 nodes
res = self.head.value
x = self.__type_cast(0 ^ self.head.npx) # Address of next node
y = (id(self.head) ^ x.npx) # Address of next of next node
self.head = x
self.head.npx = 0 ^ y
return res

# method to remove node at end
def DeleteAtEnd(self):
if self.isEmpty(): # If list is empty
return ""List is empty !""
elif self.head == self.tail: # If list has 1 node
self.head = self.tail = None
elif self.__type_cast(0 ^ self.head.npx) == (self.tail): # If list has 2 nodes
self.tail = self.head
self.head.npx = self.tail.npx = 0
else: # If list has more than 2 nodes
prev_id = 0
node = self.head
next_id = 1
while next_id:
next_id = prev_id ^ node.npx
if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
res = node.value
x = self.__type_cast(prev_id).npx ^ id(node)
y = self.__type_cast(prev_id)
y.npx = x ^ 0
self.tail = y
return res

# method to traverse linked list
def Print(self):
""""""We are printing values rather than returning it bacause
for returning we have to append all values in a list
and it takes extra memory to save all values in a list.""""""

if self.head != None:
prev_id = 0
node = self.head
next_id = 1
print(node.value, end=' ')
while next_id:
next_id = prev_id ^ node.npx
if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
print(node.value, end=' ')
else:
return
else:
print(""List is empty !"")

# method to traverse linked list in reverse order
def ReversePrint(self):

# Print Values is reverse order.
""""""We are printing values rather than returning it bacause
for returning we have to append all values in a list
and it takes extra memory to save all values in a list.""""""

if self.head != None:
prev_id = 0
node = self.tail
next_id = 1
print(node.value, end=' ')
while next_id:
next_id = prev_id ^ node.npx
if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
print(node.value, end=' ')
else:
return
else:
print(""List is empty !"")

# method to get length of linked list
def Length(self):
if not self.isEmpty():
prev_id = 0
node = self.head
next_id = 1
count = 1
while next_id:
next_id = prev_id ^ node.npx
if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
count += 1
else:
return count
else:
return 0

# method to get node data value by index
def PrintByIndex(self, index):
prev_id = 0
node = self.head
for i in range(index):
next_id = prev_id ^ node.npx

if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
else:
return ""Value dosn't found index out of range.""
return node.value

# method to check if the liked list is empty or not
def isEmpty(self):
if self.head is None:
return True
return False

# method to return a new instance of type
def __type_cast(self, id):
return ctypes.cast(id, ctypes.py_object).value



# Driver Code

# create object
obj = XorLinkedList()

# insert nodes
obj.InsertAtEnd(2)
obj.InsertAtEnd(3)
obj.InsertAtEnd(4)
obj.InsertAtStart(0)
obj.InsertAtStart(6)
obj.InsertAtEnd(55)

# display length
print(""\nLength:"", obj.Length())

# traverse
print(""\nTraverse linked list:"")
obj.Print()

print(""\nTraverse in reverse order:"")
obj.ReversePrint()

# display data values by index
print('\nNodes:')
for i in range(obj.Length()):
print(""Data value at index"", i, 'is', obj.PrintByIndex(i))

# removing nodes
print(""\nDelete Last Node: "", obj.DeleteAtEnd())
print(""\nDelete First Node: "", obj.DeleteAtStart())

# new length
print(""\nUpdated length:"", obj.Length())

# display data values by index
print('\nNodes:')
for i in range(obj.Length()):
print(""Data value at index"", i, 'is', obj.PrintByIndex(i))

# traverse
print(""\nTraverse linked list:"")
obj.Print()

print(""\nTraverse in reverse order:"")
obj.ReversePrint()","def xor_linked_list(head, k):
    if head is None:
        return None
    if head.next is None:
        return head
    if head.next.next is None:
        return head
    if head.next.next.next is None:
        return head
    if head.next.next.next.next is None:
        return head
    if head.next.next.next.next.next is None:
        return head
    if head.next.next.next"
2202,Visualizing Quick Sort using Tkinter in Python,"# Extension Quick Sort Code
# importing time module
import time


# to implement divide and conquer
def partition(data, head, tail, drawData, timeTick):
border = head
pivot = data[tail]


drawData(data, getColorArray(len(data), head,
tail, border, border))
time.sleep(timeTick)


for j in range(head, tail):
if data[j] < pivot:
drawData(data, getColorArray(
len(data), head, tail, border, j, True))
time.sleep(timeTick)


data[border], data[j] = data[j], data[border]
border += 1


drawData(data, getColorArray(len(data), head,
tail, border, j))
time.sleep(timeTick)


# swapping pivot with border value
drawData(data, getColorArray(len(data), head,
tail, border, tail, True))
time.sleep(timeTick)


data[border], data[tail] = data[tail], data[border]


return border




# head --> Starting index,
# tail --> Ending index
def quick_sort(data, head, tail,
drawData, timeTick):
if head < tail:
partitionIdx = partition(data, head,
tail, drawData,
timeTick)


# left partition
quick_sort(data, head, partitionIdx-1,
drawData, timeTick)


# right partition
quick_sort(data, partitionIdx+1,
tail, drawData, timeTick)


# Function to apply colors to bars while sorting:
# Grey - Unsorted elements
# Blue - Pivot point element
# White - Sorted half/partition
# Red - Starting pointer
# Yellow - Ending pointer
# Green - Sfter all elements are sorted


# assign color representation to elements




def getColorArray(dataLen, head, tail, border,
currIdx, isSwaping=False):
colorArray = []
for i in range(dataLen):
# base coloring
if i >= head and i <= tail:
colorArray.append('Grey')
else:
colorArray.append('White')


if i == tail:
colorArray[i] = 'Blue'
elif i == border:
colorArray[i] = 'Red'
elif i == currIdx:
colorArray[i] = 'Yellow'


if isSwaping:
if i == border or i == currIdx:
colorArray[i] = 'Green'


return colorArray","from tkinter import *

def quickSort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        less = [i for i in arr[1:] if i <= pivot]
        greater = [i for i in arr[1:] if i > pivot]
        return quickSort(less) + [pivot] + quickSort(greater)

arr = [10, 7, 8, 9, 1, 5, 6, 4"
2203,Write a Python program to Convert Nested dictionary to Mapped Tuple,"# Python3 code to demonstrate working of
# Convert Nested dictionary to Mapped Tuple
# Using list comprehension + generator expression

# initializing dictionary
test_dict = {'gfg' : {'x' : 5, 'y' : 6}, 'is' : {'x' : 1, 'y' : 4},
'best' : {'x' : 8, 'y' : 3}}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# Convert Nested dictionary to Mapped Tuple
# Using list comprehension + generator expression
res = [(key, tuple(sub[key] for sub in test_dict.values()))
for key in test_dict['gfg']]

# printing result
print(""The grouped dictionary : "" + str(res))","def nested_dict_to_tuple(nested_dict):
    # create a tuple from the nested dictionary
    return tuple(nested_dict.items())

# create a dictionary from the nested dictionary
nested_dict = {
    'a': {
        'b': {
            'c': 1
        }
    }
}

# convert the nested dictionary to a tuple
print(nested_dict_to_tuple(nested_dict))

# create a dictionary"
2204,Write a Python program to Remove K length Duplicates from String,"# Python3 code to demonstrate working of
# Remove K length Duplicates from String
# Using loop + slicing

# initializing strings
test_str = 'geeksforfreeksfo'

# printing original string
print(""The original string is : "" + str(test_str))

# initializing K
K = 3

memo = set()
res = []
for idx in range(0, len(test_str) - K):

# slicing K length substrings
sub = test_str[idx : idx + K]

# checking for presence
if sub not in memo:
memo.add(sub)
res.append(sub)

res = ''.join(res[ele] for ele in range(0, len(res), K))

# printing result
print(""The modified string : "" + str(res))","def remove_duplicates(str):
    # your code goes here
    return str

# keep this function call here 
print(remove_duplicates(""abcabcbb""))
print(remove_duplicates(""bbbbb""))
print(remove_duplicates(""pwwkew""))
print(remove_duplicates(""""))
print(remove_duplicates(""""))
print(remove_duplicates(""""))
print(remove_duplicates(""""))
print(remove_dupl"
2205,Calculate the QR decomposition of a given matrix using NumPy in Python,"import numpy as np


# Original matrix
matrix1 = np.array([[1, 2, 3], [3, 4, 5]])
print(matrix1)

# Decomposition of the said matrix
q, r = np.linalg.qr(matrix1)
print('\nQ:\n', q)
print('\nR:\n', r)","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

Q, R = np.linalg.qr(A)

print(Q)
print(R)

# Output:
[[ 1.  2.  3.]
 [ 4.  5.  6.]
 [ 7.  8.  9.]]

[[ 1.  2.  3.]
 ["
2206,Count of groups having largest size while grouping according to sum of its digits in Python,"// C++ implementation to Count the
// number of groups having the largest
// size where groups are according
// to the sum of its digits
#include <bits/stdc++.h>
using namespace std;


// function to return sum of digits of i
int sumDigits(int n){
int sum = 0;
while(n)
{
sum += n%10;
n /= 10;
}


return sum;
}


// Create the dictionary of unique sum
map<int,int> constDict(int n){

// dictionary that contain
// unique sum count
map<int,int> d;


for(int i = 1; i < n + 1; ++i){
// calculate the sum of its digits
int sum1 = sumDigits(i);


if(d.find(sum1) == d.end())
d[sum1] = 1;
else
d[sum1] += 1;
}


return d;
}


// function to find the
// largest size of group
int countLargest(int n){

map<int,int> d = constDict(n);

int size = 0;


// count of largest size group
int count = 0;


for(auto it = d.begin(); it != d.end(); ++it){
int k = it->first;
int val = it->second;


if(val > size){
size = val;
count = 1;
}
else if(val == size)
count += 1;
}


return count;
}

// Driver code
int main()
{
int n = 13;


int group = countLargest(n);


cout << group << endl;


return 0;
}","def solution(n):
    answer = 0
    for i in range(1, n+1):
        answer += sum(map(int, str(i)))
    return answer

""""""

def solution(n):
    answer = 0
    for i in range(1, n+1):
        answer += sum(map(int, str(i)))
    return answer

""""""

def solution(n):
    answer = 0
    for i in range(1, n"
2207,Capitalize first letter of a column in Pandas dataframe in Python,"# Create a simple dataframe

# importing pandas as pd
import pandas as pd


# creating a dataframe
df = pd.DataFrame({'A': ['john', 'bODAY', 'minA', 'Peter', 'nicky'],
'B': ['masters', 'graduate', 'graduate',
'Masters', 'Graduate'],
'C': [27, 23, 21, 23, 24]})

df","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pima-indians-diabetes.csv?raw=true')

df.columns = ['age','sex', 'bmi', 'bp','s1','s2','s3','s4','s5','s6']

df['bmi'] = df['bmi'].str.lower()"
2208,Write a Python program to Replace negative value with zero in numpy array,"# Python code to demonstrate
# to replace negative value with 0
import numpy as np

ini_array1 = np.array([1, 2, -3, 4, -5, -6])

# printing initial arrays
print(""initial array"", ini_array1)

# code to replace all negative value with 0
ini_array1[ini_array1<0] = 0

# printing result
print(""New resulting array: "", ini_array1)","import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr[arr < 0] = 0

print(arr)

""""""

# Solution

import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr[arr < 0] = 0

print(arr)"
2209,Write a Python Program for Cocktail Sort,"# Python program for implementation of Cocktail Sort

def cocktailSort(a):
n = len(a)
swapped = True
start = 0
end = n-1
while (swapped==True):

# reset the swapped flag on entering the loop,
# because it might be true from a previous
# iteration.
swapped = False

# loop from left to right same as the bubble
# sort
for i in range (start, end):
if (a[i] > a[i+1]) :
a[i], a[i+1]= a[i+1], a[i]
swapped=True

# if nothing moved, then array is sorted.
if (swapped==False):
break

# otherwise, reset the swapped flag so that it
# can be used in the next stage
swapped = False

# move the end point back by one, because
# item at the end is in its rightful spot
end = end-1

# from right to left, doing the same
# comparison as in the previous stage
for i in range(end-1, start-1,-1):
if (a[i] > a[i+1]):
a[i], a[i+1] = a[i+1], a[i]
swapped = True

# increase the starting point, because
# the last stage would have moved the next
# smallest number to its rightful spot.
start = start+1

# Driver code to test above
a = [5, 1, 4, 2, 8, 0, 2]
cocktailSort(a)
print(""Sorted array is:"")
for i in range(len(a)):
print (""%d"" %a[i]),","def cocktail_sort(arr):
    swapped = True
    while swapped:
        swapped = False
        for i in range(len(arr) - 1):
            if arr[i] > arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                swapped = True
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(cocktail_sort(arr))

""""""

"""""""
2210,Changing the colour of Tkinter Menu Bar in Python,"# Import the library tkinter
from tkinter import *

# Create a GUI app
app = Tk()

# Set the title and geometry to your app
app.title(""Geeks For Geeks"")
app.geometry(""800x500"")

# Create menubar by setting the color
menubar = Menu(app, background='blue', fg='white')

# Declare file and edit for showing in menubar
file = Menu(menubar, tearoff=False, background='yellow')
edit = Menu(menubar, tearoff=False, background='pink')

# Add commands in in file menu
file.add_command(label=""New"")
file.add_command(label=""Exit"", command=app.quit)

# Add commands in edit menu
edit.add_command(label=""Cut"")
edit.add_command(label=""Copy"")
edit.add_command(label=""Paste"")

# Display the file and edit declared in previous step
menubar.add_cascade(label=""File"", menu=file)
menubar.add_cascade(label=""Edit"", menu=edit)

# Displaying of menubar in the app
app.config(menu=menubar)

# Make infinite loop for displaying app on screen
app.mainloop()","import tkinter as tk
from tkinter import ttk

root = tk.Tk()
root.title(""Simple Calculator"")

# Create a frame inside the root window
frame = ttk.Frame(root, padding=""10 10 10"")
frame.grid()

# Create a label widget inside the frame
label = ttk.Label(frame, text=""Enter a number:"")
label.grid(column=0, row=0)

# Create a entry widget inside the frame
entry ="
2211,Write a Python program to Check order of character in string using OrderedDict( ),"# Function to check if string follows order of
# characters defined by a pattern
from collections import OrderedDict

def checkOrder(input, pattern):

# create empty OrderedDict
# output will be like {'a': None,'b': None, 'c': None}
dict = OrderedDict.fromkeys(input)

# traverse generated OrderedDict parallel with
# pattern string to check if order of characters
# are same or not
ptrlen = 0
for key,value in dict.items():
if (key == pattern[ptrlen]):
ptrlen = ptrlen + 1

# check if we have traverse complete
# pattern string
if (ptrlen == (len(pattern))):
return 'true'

# if we come out from for loop that means
# order was mismatched
return 'false'

# Driver program
if __name__ == ""__main__"":
input = 'engineers rock'
pattern = 'egr'
print (checkOrder(input,pattern))","def check_order(string):
    d = OrderedDict()
    for i in string:
        if i not in d:
            d[i] = 1
        else:
            d[i] += 1
    return d

print(check_order(""abcd""))

""""""

def check_order(string):
    d = OrderedDict()
    for i in string:
        if i not in d:
            d[i] = 1"
2212,Get the index of minimum value in DataFrame column in Python,"# importing pandas module
import pandas as pd

# making data frame
df = pd.read_csv(""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv"")

df.head(10)","import pandas as pd
import numpy as np

df = pd.read_csv(""data.csv"")

# Create a new column in DataFrame called ""min_value""
df[""min_value""] = df[""value""].transform(min)

# Print the DataFrame
print(df)

# Create a new column in DataFrame called ""max_value""
df[""max_value""] = df[""value""].transform(max)

# Print the DataFrame
print(df"
2213,Write a Python program to Multiply Adjacent elements,"# Python3 code to demonstrate working of
# Adjacent element multiplication
# using zip() + generator expression + tuple

# initialize tuple
test_tup = (1, 5, 7, 8, 10)

# printing original tuple
print(""The original tuple : "" + str(test_tup))

# Adjacent element multiplication
# using zip() + generator expression + tuple
res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))

# printing result
print(""Resultant tuple after multiplication : "" + str(res))","def multiply_adjacent(arr):
    # Write your code here
    if len(arr) == 1:
        return arr[0]
    else:
        return arr[0] * multiply_adjacent(arr[1:])

print(multiply_adjacent([1, 2, 3, 4]))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
2214,numpy string operations | not_equal() function in Python,"# Python program explaining
# numpy.char.not_equal() method

# importing numpy
import numpy as geek

# input arrays
in_arr1 = geek.array('numpy')
print (""1st Input array : "", in_arr1)

in_arr2 = geek.array('nump')
print (""2nd Input array : "", in_arr2)

# checking if they are not equal
out_arr = geek.char.not_equal(in_arr1, in_arr2)
print (""Output array: "", out_arr)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a)
print(b)

print(a!= b)

print(a == b)

print(a!= b)

print(a!= b)

print(a!= b)

print(a!= b)

print(a!= b"
2215,How to compute the eigenvalues and right eigenvectors of a given square array using NumPY in Python,"# importing numpy library
import numpy as np

# create numpy 2d-array
m = np.array([[1, 2],
[2, 3]])

print(""Printing the Original square array:\n"",
m)

# finding eigenvalues and eigenvectors
w, v = np.linalg.eig(m)

# printing eigen values
print(""Printing the Eigen values of the given square array:\n"",
w)

# printing eigen vectors
print(""Printing Right eigenvectors of the given square array:\n""
v)","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

eigenvalues, eigenvectors = np.linalg.eig(A)

print(eigenvalues)
print(eigenvectors)

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution"
2216,Write a Python Program for Cycle Sort,"# Python program to impleament cycle sort

def cycleSort(array):
writes = 0

# Loop through the array to find cycles to rotate.
for cycleStart in range(0, len(array) - 1):
item = array[cycleStart]

# Find where to put the item.
pos = cycleStart
for i in range(cycleStart + 1, len(array)):
if array[i] < item:
pos += 1

# If the item is already there, this is not a cycle.
if pos == cycleStart:
continue

# Otherwise, put the item there or right after any duplicates.
while item == array[pos]:
pos += 1
array[pos], item = item, array[pos]
writes += 1

# Rotate the rest of the cycle.
while pos != cycleStart:

# Find where to put the item.
pos = cycleStart
for i in range(cycleStart + 1, len(array)):
if array[i] < item:
pos += 1

# Put the item there or right after any duplicates.
while item == array[pos]:
pos += 1
array[pos], item = item, array[pos]
writes += 1

return writes

# driver code
arr = [1, 8, 3, 9, 10, 10, 2, 4 ]
n = len(arr)
cycleSort(arr)

print(""After sort : "")
for i in range(0, n) :
print(arr[i], end = \' \')

# Code Contributed by Mohit Gupta_OMG <(0_o)>","def cycle_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

arr = [64, 34, 25, 12, 22, 11, 90]
print(cycle_sort(arr))

""""""

def cycle_sort(arr):"
2217,"Write a Python dictionary, set and counter to check if frequencies can become same","# Function to Check if frequency of all characters
# can become same by one removal
from collections import Counter

def allSame(input):

# calculate frequency of each character
# and convert string into dictionary
dict=Counter(input)

# now get list of all values and push it
# in set
same = list(set(dict.values()))

if len(same)>2:
print('No')
elif len (same)==2 and same[1]-same[0]>1:
print('No')
else:
print('Yes')


# now check if frequency of all characters
# can become same

# Driver program
if __name__ == ""__main__"":
input = 'xxxyyzzt'
allSame(input)","def solution(d):
    d = dict(d)
    for i in d:
        if d[i] > 1:
            d[i] = d[i] // 2
    return d

print(solution({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12"
2218,Describe a NumPy Array in Python,"import numpy as np




# sample array
arr = np.array([4, 5, 8, 5, 6, 4,
9, 2, 4, 3, 6])
print(arr)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a.shape)

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a.dtype)

a = np.array([[1, 2, 3], [4, 5, 6]])
print("
2219,How to split the element of a given NumPy array with spaces in Python,"import numpy as np


# Original Array
array = np.array(['PHP C# Python C Java C++'], dtype=np.str)
print(array)

# Split the element of the said array with spaces
sparr = np.char.split(array)
print(sparr)","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a.split())

# Output:
# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# %%
# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:"
2220,Numpy size() function | Python,"# Python program explaining
# numpy.size() method


# importing numpy
import numpy as np


# Making a random array
arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])


# By default, give the total number of elements.
print(np.size(arr))","import numpy as np

x = np.array([[1, 2, 3], [4, 5, 6]])
print(x.shape)

# Output:
# (2, 3)

# Input:
# [[1 2 3]
#  [4 5 6]]

# Output:
# (2, 3)

# Input:
# [[1 2 3]
#  [4 5 6]]

# Output:
# (2, 3)

# Input:
# [[1 2"
2221,Write a Python program to Successive Characters Frequency,"# Python3 code to demonstrate working of
# Successive Characters Frequency
# Using count() + loop + re.findall()
import re

# initializing string
test_str = 'geeksforgeeks is best for geeks. A geek should take interest.'

# printing original string
print(""The original string is : "" + str(test_str))

# initializing word
que_word = ""geek""

# Successive Characters Frequency
# Using count() + loop + re.findall()
temp = []
for sub in re.findall(que_word + '.', test_str):
temp.append(sub[-1])

res = {que_word : temp.count(que_word) for que_word in temp}

# printing result
print(""The Characters Frequency is : "" + str(res))","def solution(s):
    count = 0
    for i in range(len(s)):
        for j in range(i+1, len(s)):
            if s[i] == s[j]:
                count += 1
    return count

print(solution(""abcabcbb""))
print(solution(""bbbbb""))
print(solution(""pwwkew""))

""""""

def solution(s):
    count = 0
    for i in range(len(s)):"
2222,Write a Python program to Right and Left Shift characters in String,"# Python3 code to demonstrate working of
# Right and Left Shift characters in String
# Using String multiplication + string slicing

# initializing string
test_str = 'geeksforgeeks'

# printing original string
print(""The original string is : "" + test_str)

# initializing right rot
r_rot = 7

# initializing left rot
l_rot = 3

# Right and Left Shift characters in String
# Using String multiplication + string slicing
res = (test_str * 3)[len(test_str) + r_rot - l_rot :
2 * len(test_str) + r_rot - l_rot]

# printing result
print(""The string after rotation is : "" + str(res))","def rightShift(s):
    return s[::-1]

def leftShift(s):
    return s[::-1]

def main():
    s = input(""Enter the string: "")
    print(rightShift(s))
    print(leftShift(s))

if __name__ == ""__main__"":
    main()

""""""

# Time complexity: O(n)
# Space Complexity: O(n)

def rightShift(s):"
2223,Write a Python program to Stack using Doubly Linked List,"# A complete working Python program to demonstrate all
# stack operations using a doubly linked list

# Node class
class Node:

# Function to initialise the node object
def __init__(self, data):
self.data = data # Assign data
self.next = None # Initialize next as null
self.prev = None # Initialize prev as null

# Stack class contains a Node object
class Stack:
# Function to initialize head
def __init__(self):
self.head = None

# Function to add an element data in the stack
def push(self, data):

if self.head is None:
self.head = Node(data)
else:
new_node = Node(data)
self.head.prev = new_node
new_node.next = self.head
new_node.prev = None
self.head = new_node


# Function to pop top element and return the element from the stack
def pop(self):

if self.head is None:
return None
elif self.head.next is None:
temp = self.head.data
self.head = None
return temp
else:
temp = self.head.data
self.head = self.head.next
self.head.prev = None
return temp




# Function to return top element in the stack
def top(self):

return self.head.data


# Function to return the size of the stack
def size(self):

temp = self.head
count = 0
while temp is not None:
count = count + 1
temp = temp.next
return count


# Function to check if the stack is empty or not
def isEmpty(self):

if self.head is None:
return True
else:
return False


# Function to print the stack
def printstack(self):

print(""stack elements are:"")
temp = self.head
while temp is not None:
print(temp.data, end =""->"")
temp = temp.next


# Code execution starts here
if __name__=='__main__':

# Start with the empty stack
stack = Stack()

# Insert 4 at the beginning. So stack becomes 4->None
print(""Stack operations using Doubly LinkedList"")
stack.push(4)

# Insert 5 at the beginning. So stack becomes 4->5->None
stack.push(5)

# Insert 6 at the beginning. So stack becomes 4->5->6->None
stack.push(6)

# Insert 7 at the beginning. So stack becomes 4->5->6->7->None
stack.push(7)

# Print the stack
stack.printstack()

# Print the top element
print(""\nTop element is "", stack.top())

# Print the stack size
print(""Size of the stack is "", stack.size())

# pop the top element
stack.pop()

# pop the top element
stack.pop()

# two elements are popped
# Print the stack
stack.printstack()

# Print True if the stack is empty else False
print(""\nstack is empty:"", stack.isEmpty())

#This code is added by Suparna Raut","def solve(self, head):
    if head is None:
        return head
    if head.next is None:
        return head
    slow = head
    fast = head.next
    while fast.next is not None:
        slow = slow.next
        fast = fast.next.next
    slow.next = None
    return slow"
2224,Different ways to convert a Python dictionary to a NumPy array,"# importing required librariess
import numpy as np
from ast import literal_eval

# creating class of string
name_list = """"""{
""column0"": {""First_Name"": ""Akash"",
""Second_Name"": ""kumar"", ""Interest"": ""Coding""},

""column1"": {""First_Name"": ""Ayush"",
""Second_Name"": ""Sharma"", ""Interest"": ""Cricket""},

""column2"": {""First_Name"": ""Diksha"",
""Second_Name"": ""Sharma"",""Interest"": ""Reading""},

""column3"": {""First_Name"":"" Priyanka"",
""Second_Name"": ""Kumari"", ""Interest"": ""Dancing""}

}""""""
print(""Type of name_list created:\n"",
type(name_list))

# converting string type to dictionary
t = literal_eval(name_list)

# printing the original dictionary
print(""\nPrinting the original Name_list dictionary:\n"",
t)

print(""Type of original dictionary:\n"",
type(t))

# converting dictionary to numpy array
result_nparra = np.array([[v[j] for j in ['First_Name', 'Second_Name',
'Interest']] for k, v in t.items()])

print(""\nConverted ndarray from the Original dictionary:\n"",
result_nparra)

# printing the type of converted array
print(""Type:\n"", type(result_nparra))","import numpy as np

d = {'a': 1, 'b': 2, 'c': 3}

np_array = np.array(d)

print(np_array)

# Output:
# array([1, 2, 3])

# Note:
# The order of the elements in the array is not important.
# The array is already in the correct order.
# The array is not a view of the original array.
# The array is not a copy of the original array."
2225,Write a Python Set | Check whether a given string is Heterogram or not,"# Function to Check whether a given string is Heterogram or not

def heterogram(input):

# separate out list of alphabets using list comprehension
# ord function returns ascii value of character
alphabets = [ ch for ch in input if ( ord(ch) >= ord('a') and ord(ch) <= ord('z') )]

# convert list of alphabets into set and
# compare lengths
if len(set(alphabets))==len(alphabets):
print ('Yes')
else:
print ('No')

# Driver program
if __name__ == ""__main__"":
input = 'the big dwarf only jumps'
heterogram(input)","def is_heterogram(string):
    if len(string) == 1:
        return True
    else:
        return False

print(is_heterogram(""abc""))
print(is_heterogram(""abcd""))
print(is_heterogram(""abcdef""))
print(is_heterogram(""abcdefghijklmnopqrstuvwxyz""))

""""""

def is_heterogram(string):
    if len(string)"
2226,How to find the number of arguments in a Python function,"def no_of_argu(*args):

# using len() method in args to count
return(len(args))




a = 1
b = 3


# arguments passed
n = no_of_argu(1, 2, 4, a)


# result printed
print("" The number of arguments are: "", n)","def my_function(arg1, arg2, arg3):
    print(arg1, arg2, arg3)

my_function(1, 2, 3)

""""""

def my_function(arg1, arg2, arg3):
    print(arg1, arg2, arg3)

my_function(1, 2, 3)

""""""

def my_function(arg1, arg2, arg3):
    print(arg1, arg2, arg3)"
2227,Return the Index label if some condition is satisfied over a column in Pandas Dataframe in Python,"# importing pandas as pd
import pandas as pd

# Create the dataframe
df = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/2011'],
'Product':['Umbrella', 'Matress', 'Badminton', 'Shuttle'],
'Last_Price':[1200, 1500, 1600, 352],
'Updated_Price':[1250, 1450, 1550, 400],
'Discount':[10, 10, 10, 10]})

# Create the indexes
df.index =['Item 1', 'Item 2', 'Item 3', 'Item 4']

# Print the dataframe
print(df)","import pandas as pd

df = pd.read_csv(""C:/Users/DELL/Downloads/pandas_data_visualization/data/data.csv"")

# 1. Create a function that takes a Pandas Dataframe as an argument and returns the index label.
# 2. Create a function that takes a Pandas Dataframe as an argument and returns the index label.
# 3. Create a function that takes a Pandas Dataframe as an argument and returns the"
2228,Program to check if a string contains any special character in Python,"// C++ program to check if a string
// contains any special character

// import required packages
#include <iostream>
#include <regex>
using namespace std;

// Function checks if the string
// contains any special character
void run(string str)
{

// Make own character set
regex regx(""[@_!#$%^&*()<>?/|}{~:]"");

// Pass the string in regex_search
// method
if(regex_search(str, regx) == 0)
cout << ""String is accepted"";
else
cout << ""String is not accepted."";
}

// Driver Code
int main()
{

// Enter the string
string str = ""Geeks$For$Geeks"";

// Calling run function
run(str);

return 0;
}

// This code is contributed by Yash_R","s = ""abcdefghijklmnopqrstuvwxyz""

def is_special_char(s):
    for i in s:
        if i in ""!@#$%^&*()_+-=[]{}|"":
            return True
    return False

print(is_special_char(s))

""""""

# Solution:

def is_special_char(s):
    for i in s:
        if i in ""!@#$%^"
2229,Convert Python datetime to epoch,"# import datetime module
import datetime

# convert datetime to epoch using strftime from
# time stamp 2021/7/7/1/2/1
# for linux:
epoch = datetime.datetime(2021, 7, 7, 1, 2, 1).strftime('%s')
# for windows:
# epoch = datetime.datetime(2021, 7,7 , 1,2,1).strftime('%S')
print(epoch)

# convert datetime to epoch using strftime from
# time stamp 2021/3/3/4/3/4
epoch = datetime.datetime(2021, 3, 3, 4, 3, 4).strftime('%s')
print(epoch)

# convert datetime to epoch using strftime from
# time stamp 2021/7/7/12/12/34
epoch = datetime.datetime(2021, 7, 7, 12, 12, 34).strftime('%s')
print(epoch)

# convert datetime to epoch using strftime from
# time stamp 2021/7/7/12/56/00
epoch = datetime.datetime(2021, 7, 7, 12, 56, 0).strftime('%s')
print(epoch)","import datetime

def convert_python_datetime(dt):
    return dt.replace(tzinfo=datetime.timezone.utc).timestamp()

print(convert_python_datetime(datetime.datetime.now()))

""""""

# Solution

import datetime

def convert_python_datetime(dt):
    return dt.replace(tzinfo=datetime.timezone.utc).timestamp()

print(convert_python_datetime(datetime."
2230,How to get the Daily News using Python,"import requests
from bs4 import BeautifulSoup","def get_daily_news(url):
    import requests
    from bs4 import BeautifulSoup
    import re
    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns
    import time
    from datetime import datetime
    from datetime import timedelta
    from datetime import date
    from datetime import time
    from datetime import date
    from datetime import time
    from datetime import timedelta"
2231,Convert Set to String in Python,"# create a set
s = {'a', 'b', 'c', 'd'}
print(""Initially"")
print(""The datatype of s : "" + str(type(s)))
print(""Contents of s : "", s)

# convert Set to String
s = str(s)
print(""\nAfter the conversion"")
print(""The datatype of s : "" + str(type(s)))
print(""Contents of s : "" + s)","def solution(S):
    return str(len(set(S)))

""""""

def solution(S):
    return str(len(set(S)))

def solution(S):
    return str(len(set(S)))

def solution(S):
    return str(len(set(S)))

def solution(S):
    return str(len(set(S)))

def solution(S):
    return str(len(set(S)))

def solution(S):
    return str("
2232,Write a Python Program to print all Possible Combinations from the three Digits,"# Python program to print all
# the possible combinations

def comb(L):

for i in range(3):
for j in range(3):
for k in range(3):

# check if the indexes are not
# same
if (i!=j and j!=k and i!=k):
print(L[i], L[j], L[k])

# Driver Code
comb([1, 2, 3])","def solution(n):
    if n == 0:
        return []
    if n == 1:
        return [1]
    if n == 2:
        return [1, 2]
    if n == 3:
        return [1, 2, 3]
    if n == 4:
        return [1, 2, 3, 4]
    if n == 5:
        return [1, 2, 3, 4, 5]
    if n == 6:
        return [1"
2233,Write a Python program to Check if String Contain Only Defined Characters using Regex,"# _importing module
import re


def check(str, pattern):

# _matching the strings
if re.search(pattern, str):
print(""Valid String"")
else:
print(""Invalid String"")

# _driver code
pattern = re.compile('^[1234]+$')
check('2134', pattern)
check('349', pattern)","import re

def check_if_string_contains_only_defined_characters(string):
    # your code goes here
    return True

if __name__ == '__main__':
    print(check_if_string_contains_only_defined_characters('abcdefghijklmnopqrstuvwxyz'))
    print(check_if_string_contains_only_defined_characters('abcdefghijklmnopqr"
2234,Write a Python program to Maximum and Minimum in a Set,"# Python code to get the maximum element from a set
def MAX(sets):
return (max(sets))

# Driver Code
sets = set([8, 16, 24, 1, 25, 3, 10, 65, 55])
print(MAX(sets))","def max_min(set):
    max = set[0]
    min = set[0]
    for i in set:
        if i > max:
            max = i
        if i < min:
            min = i
    return max, min

set = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_min(set))

""""""

def max_min(set):
    max = set[0]
    min"
2235,Remove all duplicates from a given string in Python,"from collections import OrderedDict

# Function to remove all duplicates from string
# and order does not matter
def removeDupWithoutOrder(str):

# set() --> A Set is an unordered collection
# data type that is iterable, mutable,
# and has no duplicate elements.
# """".join() --> It joins two adjacent elements in
# iterable with any symbol defined in
# """" ( double quotes ) and returns a
# single string
return """".join(set(str))

# Function to remove all duplicates from string
# and keep the order of characters same
def removeDupWithOrder(str):
return """".join(OrderedDict.fromkeys(str))

# Driver program
if __name__ == ""__main__"":
str = ""geeksforgeeks""
print (""Without Order = "",removeDupWithoutOrder(str))
print (""With Order = "",removeDupWithOrder(str))","def remove_duplicates(str):
    # Write your code here
    str = str.replace("" "", """")
    str = str.replace(""("", """")
    str = str.replace("")"", """")
    str = str.replace(""["", """")
    str = str.replace(""]"", """")
    str = str.replace(""{"", """")
    str = str.replace(""}"", """")
    str = str.replace(""<"", """")
    str = str.replace"
2236,Write a Python Program for Iterative Merge Sort,"# Recursive Python Program for merge sort

def merge(left, right):
if not len(left) or not len(right):
return left or right

result = []
i, j = 0, 0
while (len(result) < len(left) + len(right)):
if left[i] < right[j]:
result.append(left[i])
i+= 1
else:
result.append(right[j])
j+= 1
if i == len(left) or j == len(right):
result.extend(left[i:] or right[j:])
break

return result

def mergesort(list):
if len(list) < 2:
return list

middle = len(list)/2
left = mergesort(list[:middle])
right = mergesort(list[middle:])

return merge(left, right)

seq = [12, 11, 13, 5, 6, 7]
print(""Given array is"")
print(seq);
print(""\n"")
print(""Sorted array is"")
print(mergesort(seq))

# Code Contributed by Mohit Gupta_OMG","def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = arr[:mid]
    right = arr[mid:]
    left = merge_sort(left)
    right = merge_sort(right)
    return merge(left, right)

def merge(left, right):
    result = []
    while len(left) > 0 and len(right) > 0:
        if left[0] < right[0"
2237,Repeat all the elements of a NumPy array of strings in Python,"# importing the module
import numpy as np

# created array of strings
arr = np.array(['Akash', 'Rohit', 'Ayush',
'Dhruv', 'Radhika'], dtype = np.str)
print(""Original Array :"")
print(arr)

# with the help of np.char.multiply()
# repeating the characters 3 times
new_array = np.char.multiply(arr, 3)
print(""\nNew array :"")
print(new_array)",">>> import numpy as np
>>> a = np.array(['a', 'b', 'c', 'd'])
>>> a
array([ 'a', 'b', 'c', 'd'])
>>> a.dtype
dtype('<U3')
>>> a.size
3
>>> a.itemsize
3
>>> a.shape
(3,)
>>> a.strides
(3,)
>>> a.strides[0]
3
>>> a.strides[1]"
2238,Write a Python Program to Reverse Every Kth row in a Matrix,"# Python3 code to demonstrate working of
# Reverse Kth rows in Matrix
# Using reversed() + loop

# initializing list
test_list = [[5, 3, 2], [8, 6, 3], [3, 5, 2],
[3, 6], [3, 7, 4], [2, 9]]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing K
K = 3

res = []
for idx, ele in enumerate(test_list):

# checking for K multiple
if (idx + 1) % K == 0:

# reversing using reversed
res.append(list(reversed(ele)))
else:
res.append(ele)

# printing result
print(""After reversing every Kth row: "" + str(res))","def reverse_every_kth_row(matrix, k):
    for i in range(k):
        for j in range(len(matrix[i])):
            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]
    return matrix

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
k = 2
print(reverse_every_kth_row(matrix"
2239,How to scrape multiple pages using Selenium in Python,"# importing necessary packages
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager

# for holding the resultant list
element_list = []

for page in range(1, 3, 1):

page_url = ""https://webscraper.io/test-sites/e-commerce/static/computers/laptops?page="" + str(page)
driver = webdriver.Chrome(ChromeDriverManager().install())
driver.get(page_url)
title = driver.find_elements_by_class_name(""title"")
price = driver.find_elements_by_class_name(""price"")
description = driver.find_elements_by_class_name(""description"")
rating = driver.find_elements_by_class_name(""ratings"")

for i in range(len(title)):
element_list.append([title[i].text, price[i].text, description[i].text, rating[i].text])

print(element_list)

#closing the driver
driver.close()","import selenium
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import"
2240,Write a Python program to Order Tuples by List,"# Python3 code to demonstrate working of
# Order Tuples by List
# Using dict() + list comprehension

# initializing list
test_list = [('Gfg', 3), ('best', 9), ('CS', 10), ('Geeks', 2)]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing order list
ord_list = ['Geeks', 'best', 'CS', 'Gfg']

# Order Tuples by List
# Using dict() + list comprehension
temp = dict(test_list)
res = [(key, temp[key]) for key in ord_list]

# printing result
print(""The ordered tuple list : "" + str(res))","def order_tuples(tuples):
    # your code goes here
    return sorted(tuples, key=lambda x: x[0])

# test your code
print(order_tuples([(1, 2), (3, 4), (5, 6)]))
print(order_tuples([(1, 2), (3, 4), (5, 6), (7, 8)]))
print(order_tuples([(1, 2), (3, 4), (5, 6), (7,"
2241,Write a Python program to select Random value form list of lists,"# Python3 code to demonstrate working of
# Random Matrix Element
# Using chain.from_iterables() + random.choice()
from itertools import chain
import random

# initializing list
test_list = [[4, 5, 5], [2, 7, 4], [8, 6, 3]]

# printing original list
print(""The original list is : "" + str(test_list))

# choice() for random number, from_iterables for flattening
res = random.choice(list(chain.from_iterable(test_list)))

# printing result
print(""Random number from Matrix : "" + str(res))","import random

def random_list(n):
    l = []
    for i in range(n):
        l.append(random.randint(0,n))
    return l

def main():
    n = int(input(""Enter the number of elements in the list: ""))
    l = random_list(n)
    print(l)

if __name__ == ""__main__"":
    main()"
2242,Write a Python program to Check if a given string is binary string or not,"# Python program to check
# if a string is binary or not


# function for checking the
# string is accepted or not
def check(string) :


# set function convert string
# into set of characters .
p = set(string)


# declare set of '0', '1' .
s = {'0', '1'}


# check set p is same as set s
# or set p contains only '0'
# or set p contains only '1'
# or not, if any one condition
# is true then string is accepted
# otherwise not .
if s == p or p == {'0'} or p == {'1'}:
print(""Yes"")
else :
print(""No"")





# driver code
if __name__ == ""__main__"" :


string = ""101010000111""


# function calling
check(string)","def is_binary(string):
    if len(string) % 2 == 0:
        return True
    else:
        return False

print(is_binary(""abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
2243,How to make a NumPy array read-only in Python,"import numpy as np


a = np.zeros(11)
print(""Before any change "")
print(a)

a[1] = 2
print(""Before after first change "")
print(a)

a.flags.writeable = False
print(""After making array immutable on attempting second change "")
a[1] = 7","import numpy as np

a = np.array([1, 2, 3, 4, 5])

a.flags.writeable = False

print(a)

a.flags.writeable = True

print(a)

a.flags.writeable = False

print(a)

a.flags.writeable = True

print(a)

a.flags.writeable = False

print(a)

a.flags.writeable = True

print"
2244,Write a Python program to Convert Lists of List to Dictionary,"# Python3 code to demonstrate working of
# Convert Lists of List to Dictionary
# Using loop

# initializing list
test_list = [['a', 'b', 1, 2], ['c', 'd', 3, 4], ['e', 'f', 5, 6]]

# printing original list
print(""The original list is : "" + str(test_list))

# Convert Lists of List to Dictionary
# Using loop
res = dict()
for sub in test_list:
res[tuple(sub[:2])] = tuple(sub[2:])

# printing result
print(""The mapped Dictionary : "" + str(res))","l1 = [1, 2, 3, 4, 5]
l2 = [1, 2, 3, 4, 5]
l3 = [1, 2, 3, 4, 5]
l4 = [1, 2, 3, 4, 5]
l5 = [1, 2, 3, 4, 5]
l6 = [1, 2, 3, 4, 5]
l7 = [1, 2, 3, 4, 5]
l8 = [1, 2, 3, 4,"
2245,Limited rows selection with given column in Pandas | Python,"# Import pandas package
import pandas as pd

# Define a dictionary containing employee data
data = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'],
'Age':[27, 24, 22, 32],
'Address':['Delhi', 'Kanpur', 'Allahabad', 'Kannauj'],
'Qualification':['Msc', 'MA', 'MCA', 'Phd']}

# Convert the dictionary into DataFrame
df = pd.DataFrame(data)

# select three rows and two columns
print(df.loc[1:3, ['Name', 'Qualification']])","import pandas as pd

# Read the data
df = pd.read_csv('https://github.com/datasets/titanic/raw/master/train.csv')

# Create a new column with the first name
df['first_name'] = df['first_name'].str.lower()

# Create a new column with the last name
df['last_name'] = df['last_name'].str.lower()

# Create a new column with the title
df['"
2246,Write a Python program to print Pascals Triangle,"# Print Pascal's Triangle in Python
from math import factorial


# input n
n = 5
for i in range(n):
for j in range(n-i+1):


# for left spacing
print(end="" "")


for j in range(i+1):


# nCr = n!/((n-r)!*r!)
print(factorial(i)//(factorial(j)*factorial(i-j)), end="" "")


# for new line
print()","def pascal_triangle(n):
    if n == 0:
        return []
    else:
        return [
            [1],
            [1, 1],
            [1, 1, 1]
        ]

n = int(input(""Enter the number of rows: ""))
print(pascal_triangle(n))

""""""

# Solution

def pascal_triangle(n):
    if n == 0:
        return []
    else:
        lst = []"
2247,How to Extract Wikipedia Data in Python,"import wikipedia




wikipedia.summary(""Python (programming language)"")","import wikipedia

wikipedia.set_lang(""en"")

print(wikipedia.summary(""The Python Programming Language"", sentences=2))

""""""

# Solution 1

import wikipedia

wikipedia.set_lang(""en"")

print(wikipedia.summary(""The Python Programming Language"", sentences=2))

# Solution 2

import wikipedia

wikipedia.set_lang(""en"")

print(wikipedia.summary(""The Python Programming Language"", sentences=2))

# Solution 3

import wikipedia

wikipedia."
2248,Get all rows in a Pandas DataFrame containing given substring in Python,"# importing pandas
import pandas as pd

# Creating the dataframe with dict of lists
df = pd.DataFrame({'Name': ['Geeks', 'Peter', 'James', 'Jack', 'Lisa'],
'Team': ['Boston', 'Boston', 'Boston', 'Chele', 'Barse'],
'Position': ['PG', 'PG', 'UG', 'PG', 'UG'],
'Number': [3, 4, 7, 11, 5],
'Age': [33, 25, 34, 35, 28],
'Height': ['6-2', '6-4', '5-9', '6-1', '5-8'],
'Weight': [89, 79, 113, 78, 84],
'College': ['MIT', 'MIT', 'MIT', 'Stanford', 'Stanford'],
'Salary': [99999, 99994, 89999, 78889, 87779]},
index =['ind1', 'ind2', 'ind3', 'ind4', 'ind5'])
print(df, ""\n"")

print(""Check PG values in Position column:\n"")
df1 = df['Position'].str.contains(""PG"")
print(df1)","import pandas as pd

df = pd.read_csv(""data.csv"")

# Solution 1
# df = pd.read_csv(""data.csv"", usecols=[""Name"", ""Age""])

# Solution 2
df = pd.read_csv(""data.csv"", usecols=[""Name"", ""Age"", ""Class""])

# Solution 3
df = pd.read_csv(""data.csv"", usecols=[""Name"", ""Age"
2249,Write a Python program to Filter Strings combination of K substrings,"# Python3 code to demonstrate working of
# Filter Strings combination of K substrings
# Using permutations() + map() + join() + set() + loop
from itertools import permutations

# initializing list
test_list = [""geeks4u"", ""allbest"", ""abcdef""]

# printing string
print(""The original list : "" + str(test_list))

# initializing substring list
substr_list = [""s4u"", ""est"", ""al"", ""ge"", ""ek"", ""def"", ""lb""]

# initializing K
K = 3

# getting all permutations
perms = list(set(map(''.join, permutations(substr_list, r = K))))

# using loop to check permutations with list
res = []
for ele in perms:
if ele in test_list:
res.append(ele)

# printing results
print(""Strings after joins : "" + str(res))","def solution(s, k):
    # your code goes here
    return s[:k]

""""""

def solution(s, k):
    # your code goes here
    return s[:k]

""""""

def solution(s, k):
    # your code goes here
    return s[:k]

""""""

def solution(s, k):
    # your code goes here
    return s[:k]

""""""

def solution(s, k):"
2250,Scrape and Save Table Data in CSV file using Selenium in Python,"from selenium import webdriver
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support.ui import WebDriverWait
import time
import pandas as pd
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.keys import Keys
import csv","import csv
import time
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.chrome.options import Options

# Open the browser
options = Options()"
2251,Program to print window pattern in Python,"// C++ program to print the pattern
// hollow square with plus inside it
// window pattern
#include <bits/stdc++.h>
using namespace std;

// Function to print pattern n means
// number of rows which we want
void window_pattern (int n)
{
int c, d;

// If n is odd then we will have
// only one middle element
if (n % 2 != 0)
{
c = (n / 2) + 1;
d = 0;
}

// If n is even then we will have two
// values
else
{
c = (n / 2) + 1;
d = n / 2 ;
}

for(int i = 1; i <= n; i++)
{
for(int j = 1; j <= n; j++)
{

// If i,j equals to corner row or
// column then ""*""
if (i == 1 || j == 1 ||
i == n || j == n)
cout << ""* "";

else
{

// If i,j equals to the middle
// row or column then ""*""
if (i == c || j == c)
cout << ""* "";

else if (i == d || j == d)
cout << ""* "";

else
cout << "" "";
}
}
cout << '\n';
}
}

// Driver Code
int main()
{
int n = 7;

window_pattern(n);
return 0;
}

// This code is contributed by himanshu77","def window_pattern(n):
    for i in range(n):
        for j in range(n-i):
            print(end="" "")
        for k in range(i+1):
            print(""*"",end="" "")
        print()

n = int(input(""Enter the window size: ""))
window_pattern(n)

""""""

# Solution

def window_pattern(n):
    for i in range(n):
        for j in range(n-i):
            print"
2252,Lambda expression in Python to rearrange positive and negative numbers,"# Function to rearrange positive and negative elements
def Rearrange(arr):

# First lambda expression returns list of negative numbers
# in arr.
# Second lambda expression returns list of positive numbers
# in arr.
return [x for x in arr if x < 0] + [x for x in arr if x >= 0]

# Driver function
if __name__ == ""__main__"":
arr = [12, 11, -13, -5, 6, -7, 5, -3, -6]
print (Rearrange(arr))","def rearrange(n):
    if n < 0:
        return -n
    elif n > 0:
        return n
    else:
        return 0

print(rearrange(5))

""""""

# Solution

def rearrange(n):
    if n < 0:
        return -n
    elif n > 0:
        return n
    else:
        return 0

print(rearrange(5))"
2253,Write a Python program to Sort by Frequency of second element in Tuple List,"# Python3 code to demonstrate working of
# Sort by Frequency of second element in Tuple List
# Using sorted() + loop + defaultdict() + lambda
from collections import defaultdict

# initializing list
test_list = [(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]

# printing original list
print(""The original list is : "" + str(test_list))

# constructing mapping
freq_map = defaultdict(int)
for idx, val in test_list:
freq_map[val] += 1

# performing sort of result
res = sorted(test_list, key = lambda ele: freq_map[ele[1]], reverse = True)

# printing results
print(""Sorted List of tuples : "" + str(res))","def sort_by_frequency(tuple_list):
    # your code goes here
    return sorted(tuple_list, key=lambda x: x[1])

tuple_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]
print(sort_by_frequency(tuple_list))

""""""

# Solution

def sort_by_frequency(tuple_list):
    # your code goes here"
2254,Write a Python program to count Even and Odd numbers in a List,"# Python program to count Even
# and Odd numbers in a List

# list of numbers
list1 = [10, 21, 4, 45, 66, 93, 1]

even_count, odd_count = 0, 0

# iterating each number in list
for num in list1:

# checking condition
if num % 2 == 0:
even_count += 1

else:
odd_count += 1

print(""Even numbers in the list: "", even_count)
print(""Odd numbers in the list: "", odd_count)","def count_even_odd(lst):
    even = 0
    odd = 0
    for i in lst:
        if i % 2 == 0:
            even += 1
        else:
            odd += 1
    return even, odd

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(count_even_odd(lst))

""""""

# Solution 1

def count_even_odd(lst):"
2255,Write a Python program to Test if List contains elements in Range,"# Python3 code to demonstrate
# Test if List contains elements in Range
# using loop

# Initializing loop
test_list = [4, 5, 6, 7, 3, 9]

# printing original list
print(""The original list is : "" + str(test_list))

# Initialization of range
i, j = 3, 10

# Test if List contains elements in Range
# using loop
res = True
for ele in test_list:
if ele < i or ele >= j :
res = False
break

# printing result
print (""Does list contain all elements in range : "" + str(res))","def test_list(list):
    for i in range(len(list)):
        if list[i] in range(0,10):
            print(list[i])

list = [1,2,3,4,5,6,7,8,9,10]
test_list(list)

""""""

def test_list(list):
    for i in range(len(list)):
        if list[i] in range(0,10):
            print(list"
2256,Select row with maximum and minimum value in Pandas dataframe in Python,"# importing pandas and numpy
import pandas as pd
import numpy as np

# data of 2018 drivers world championship
dict1 ={'Driver':['Hamilton', 'Vettel', 'Raikkonen',
'Verstappen', 'Bottas', 'Ricciardo',
'Hulkenberg', 'Perez', 'Magnussen',
'Sainz', 'Alonso', 'Ocon', 'Leclerc',
'Grosjean', 'Gasly', 'Vandoorne',
'Ericsson', 'Stroll', 'Hartley', 'Sirotkin'],

'Points':[408, 320, 251, 249, 247, 170, 69, 62, 56,
53, 50, 49, 39, 37, 29, 12, 9, 6, 4, 1],

'Age':[33, 31, 39, 21, 29, 29, 31, 28, 26, 24, 37,
22, 21, 32, 22, 26, 28, 20, 29, 23]}

# creating dataframe using DataFrame constructor
df = pd.DataFrame(dict1)
print(df.head(10))","import pandas as pd

df = pd.read_csv(""C:/Users/DELL/Downloads/pandas_data_visualization/data/data.csv"")

df.head()

df.columns

df.columns = ['Name', 'Age', 'Gender', 'Dependents', 'Siblings', 'Spouse', 'Parents', 'Job', 'Dependents', 'Siblings', 'Spouse', 'Parents', 'Job', 'Dependents', '"
2257,"Create an n x n square matrix, where all the sub-matrix have the sum of opposite corner elements as even in Python","// C++ program for
// the above approach
#include <bits/stdc++.h>
using namespace std;


void sub_mat_even(int N)
{
// Counter to initialize
// the values in 2-D array
int K = 1;

// To create a 2-D array
// from to 1 to N*2
int A[N][N];

for(int i = 0; i < N; i++)
{
for(int j = 0; j < N; j++)
{
A[i][j] = K;
K++;
}
}


// If found even we reverse
// the alternate row elements
// to get all diagonal elements
// as all even or all odd
if(N % 2 == 0)
{
for(int i = 0; i < N; i++)
{
if(i % 2 == 1)
{
int s = 0;
int l = N - 1;

// Reverse the row
while(s < l)
{
swap(A[i][s],
A[i][l]);
s++;
l--;
}
}
}
}


// Print the formed array
for(int i = 0; i < N; i++)
{
for(int j = 0; j < N; j++)
{
cout << A[i][j] << "" "";
}
cout << endl;
}
}


// Driver code
int main()
{
int N = 4;

// Function call
sub_mat_even(N);
}


// This code is contributed by mishrapriyanshu557","def solve(n, m):
    matrix = [[0 for i in range(n)] for j in range(n)]
    for i in range(n):
        for j in range(n):
            matrix[i][j] = i + j
    for i in range(n):
        for j in range(n):
            if i % 2 == 0:
                matrix[i][j] = matrix[i][j]"
2258,Write a Python program to Swap commas and dots in a String,"# Python code to replace, with . and vice-versa
def Replace(str1):
maketrans = str1.maketrans
final = str1.translate(maketrans(',.', '.,', ' '))
return final.replace(',', "", "")




# Driving Code
string = ""14, 625, 498.002""
print(Replace(string))","s = ""Hello World""

s = s.replace(',', '.')
s = s.replace('.', ',')
s = s.replace(' ', '.')

print(s)

# Solution:

# s = ""Hello World""
# s = s.replace(',', '.')
# s = s.replace('.', ',')
# s = s.replace(' ', '.')

# print(s)

# Solution:

#"
2259,Write a Python program to Filter Range Length Tuples,"# Python3 code to demonstrate working of
# Filter Range Length Tuples
# Using list comprehension + len()

# Initializing list
test_list = [(4, ), (5, 6), (2, 3, 5), (5, 6, 8, 2), (5, 9)]

# printing original list
print(""The original list is : "" + str(test_list))

# Initializing desired lengths
i, j = 2, 3

# Filter Range Length Tuples
# Using list comprehension + len()
res = [sub for sub in test_list if len(sub) >= i and len(sub) <= j]

# printing result
print(""The tuple list after filtering range records : "" + str(res))","def filter_range_length(tup):
    return tup[0] < tup[1] < tup[2]

tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

print(filter_range_length(tup))

""""""

def filter_range_length(tup):
    return tup[0] < tup[1] < tup[2]

tup = (1, 2, 3, 4,"
2260,How to rename columns in Pandas DataFrame in Python,"# Import pandas package
import pandas as pd

# Define a dictionary containing ICC rankings
rankings = {'test': ['India', 'South Africa', 'England',
'New Zealand', 'Australia'],
'odi': ['England', 'India', 'New Zealand',
'South Africa', 'Pakistan'],
't20': ['Pakistan', 'India', 'Australia',
'England', 'New Zealand']}

# Convert the dictionary into DataFrame
rankings_pd = pd.DataFrame(rankings)

# Before renaming the columns
print(rankings_pd)

rankings_pd.rename(columns = {'test':'TEST'}, inplace = True)

# After renaming the columns
print(""\nAfter modifying first column:\n"", rankings_pd.columns)","import pandas as pd

df = pd.DataFrame({""A"": [1, 2, 3], ""B"": [4, 5, 6]})

df.rename(columns={""A"": ""A_new"", ""B"": ""B_new""}, inplace=True)

df

df.rename(columns={""A"": ""A_new"", ""B"": ""B_new""}, inplace=True)

df

df.rename(columns={""A"
2261,Write a Python program to print all positive numbers in a range,"# Python program to print positive Numbers in given range

start, end = -4, 19

# iterating each number in list
for num in range(start, end + 1):

# checking condition
if num >= 0:
print(num, end = "" "")","def positive_numbers(start, end):
    for i in range(start, end+1):
        if i > 0:
            if i % 2 == 0:
                print(i, end="" "")

positive_numbers(1, 10)

""""""

def positive_numbers(start, end):
    for i in range(start, end+1):
        if i > 0:
            if i % 2 == 0:
                print(i, end="" "")"
2262,Write a Python program to Numpy matrix.round(),"# import the important module in python
import numpy as np

# make matrix with numpy
gfg = np.matrix('[6.4, 1.3; 12.7, 32.3]')

# applying matrix.round() method
geeks = gfg.round()

print(geeks)","import numpy as np

matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(matrix.round())

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13"
2263,Write a Python program to Elements frequency in Tuple,"# Python3 code to demonstrate working of
# Elements frequency in Tuple
# Using defaultdict()
from collections import defaultdict


# initializing tuple
test_tup = (4, 5, 4, 5, 6, 6, 5, 5, 4)


# printing original tuple
print(""The original tuple is : "" + str(test_tup))


res = defaultdict(int)
for ele in test_tup:

# incrementing frequency
res[ele] += 1


# printing result
print(""Tuple elements frequency is : "" + str(dict(res)))","def elements_frequency(tuple):
    return tuple.count(tuple[0])

tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,"
2264,Get n-smallest values from a particular column in Pandas DataFrame in Python,"# importing pandas module
import pandas as pd

# making data frame
df = pd.read_csv(""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv"")

df.head(10)","import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

# Print the DataFrame
print"
2265,Write a Python program to Retain records with N occurrences of K,"# Python3 code to demonstrate working of
# Retain records with N occurrences of K
# Using count() + list comprehension


# initializing list
test_list = [(4, 5, 6, 4, 4), (4, 4, 3), (4, 4, 4), (3, 4, 9)]


# printing original list
print(""The original list is : "" + str(test_list))


# initializing K
K = 4


# initializing N
N = 3


# Retain records with N occurrences of K
# Using count() + list comprehension
res = [ele for ele in test_list if ele.count(K) == N]


# printing result
print(""Filtered tuples : "" + str(res))","def solution(record, K, x):
    answer = []
    for i in record:
        if i.count(K) > 0:
            answer.append(i)
    return answer

# Test
print(solution([""Enter uid1234 Muzi"", ""Enter uid4567 Prodo"",""Leave uid1234"",""Enter uid1234 Prodo"",""Change uid4567 Ryan""],3,4))

# Output
# Enter uid1234 Muzi
# Enter u"
2266,numpy matrix operations | rand() function in Python,"# Python program explaining
# numpy.matlib.rand() function

# importing matrix library from numpy
import numpy as geek
import numpy.matlib

# desired 3 x 4 random output matrix
out_mat = geek.matlib.rand((3, 4))
print (""Output matrix : "", out_mat)","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(A)

print(A.sum())

print(A.mean())

print(A.max())

print(A.min())

print(A.transpose())

print(A.dot(A))

print(A.dot(A, axis=0))

print(A.dot(A, axis="
2267,Write a Python program to Convert list of nested dictionary into Pandas dataframe,"# importing pandas
import pandas as pd

# List of nested dictionary initialization
list = [
{
""Student"": [{""Exam"": 90, ""Grade"": ""a""},
{""Exam"": 99, ""Grade"": ""b""},
{""Exam"": 97, ""Grade"": ""c""},
],
""Name"": ""Paras Jain""
},
{
""Student"": [{""Exam"": 89, ""Grade"": ""a""},
{""Exam"": 80, ""Grade"": ""b""}
],
""Name"": ""Chunky Pandey""
}
]

#print(list)","import pandas as pd

# Create a dictionary
d = {'a': 1, 'b': 2, 'c': 3}

# Create a dataframe
df = pd.DataFrame(d)

# Print the dataframe
print(df)

# Create a dataframe from a list of dictionaries
df2 = pd.DataFrame(d, columns=['a', 'b', 'c'])

# Print the dataframe
print(df2)"
2268,Write a Python program to Swapping Hierarchy in Nested Dictionaries,"# Python3 code to demonstrate working of
# Swapping Hierarchy in Nested Dictionaries
# Using loop + items()


# initializing dictionary
test_dict = {'Gfg': { 'a' : [1, 3], 'b' : [3, 6], 'c' : [6, 7, 8]},
'Best': { 'a' : [7, 9], 'b' : [5, 3, 2], 'd' : [0, 1, 0]}}


# printing original dictionary
print(""The original dictionary : "" + str(test_dict))


# Swapping Hierarchy in Nested Dictionaries
# Using loop + items()
res = dict()
for key, val in test_dict.items():
for key_in, val_in in val.items():
if key_in not in res:
temp = dict()
else:
temp = res[key_in]
temp[key] = val_in
res[key_in] = temp


# printing result
print(""The rearranged dictionary : "" + str(res))","def swap_hierarchy(d):
    for i in d:
        for j in d[i]:
            d[i][j] = d[i][j][0]
    return d

d = {'a': {'b': {'c': 1, 'd': 2}, 'e': 3}, 'b': {'c': 4, 'd': 5}, 'c': 6, 'd': 7}
print(swap_hierarchy(d))

"""""""
2269,How to get all 2D diagonals of a 3D NumPy array in Python,"# Import the numpy package
import numpy as np

# Create 3D-numpy array
# of 4 rows and 4 columns
arr = np.arange(3 * 4 * 4).reshape(3, 4, 4)

print(""Original 3d array:\n"",
arr)

# Create 2D diagonal array
diag_arr = np.diagonal(arr,
axis1 = 1,
axis2 = 2)

print(""2d diagonal array:\n"",
diag_arr)","import numpy as np

# Create a 3D NumPy array
arr = np.array([[1, 2, 3],
                [4, 5, 6],
                [7, 8, 9]])

# Print the solution
print(arr)

# Print the solution in a 2D array
print(arr.T)

# Print the solution in a 2D array
print(arr.T.reshape(3, 2))

# Print the solution in a"
2270,Write a Python Counter to find the size of largest subset of anagram words,"# Function to find the size of largest subset
# of anagram words
from collections import Counter

def maxAnagramSize(input):

# split input string separated by space
input = input.split("" "")

# sort each string in given list of strings
for i in range(0,len(input)):
input[i]=''.join(sorted(input[i]))

# now create dictionary using counter method
# which will have strings as key and their
# frequencies as value
freqDict = Counter(input)

# get maximum value of frequency
print (max(freqDict.values()))

# Driver program
if __name__ == ""__main__"":
input = 'ant magenta magnate tan gnamate'
maxAnagramSize(input)","def solution(words):
    # Write your code here
    word_set = set(words)
    word_set = sorted(word_set)
    return len(word_set)

print(solution([""cba"",""bab"",""bac""]))
print(solution([""a"",""a"",""b"",""b"",""b""]))
print(solution([""a"",""a"",""b"",""b"",""b"",""b""]))
print(solution([""a"",""a"",""b"",""b"
2271,Write a Python Program for Anagram Substring Search (Or Search for all permutations),"# Python program to search all
# anagrams of a pattern in a text

MAX = 256

# This function returns true
# if contents of arr1[] and arr2[]
# are same, otherwise false.
def compare(arr1, arr2):
for i in range(MAX):
if arr1[i] != arr2[i]:
return False
return True

# This function search for all
# permutations of pat[] in txt[]
def search(pat, txt):

M = len(pat)
N = len(txt)

# countP[]: Store count of
# all characters of pattern
# countTW[]: Store count of
# current window of text
countP = [0]*MAX

countTW = [0]*MAX

for i in range(M):
(countP[ord(pat[i]) ]) += 1
(countTW[ord(txt[i]) ]) += 1

# Traverse through remaining
# characters of pattern
for i in range(M, N):

# Compare counts of current
# window of text with
# counts of pattern[]
if compare(countP, countTW):
print(""Found at Index"", (i-M))

# Add current character to current window
(countTW[ ord(txt[i]) ]) += 1

# Remove the first character of previous window
(countTW[ ord(txt[i-M]) ]) -= 1

# Check for the last window in text
if compare(countP, countTW):
print(""Found at Index"", N-M)

# Driver program to test above function
txt = ""BACDGABCDA""
pat = ""ABCD""
search(pat, txt)

# This code is contributed
# by Upendra Singh Bartwal","def anagram(s1, s2):
    if len(s1)!= len(s2):
        return False
    else:
        for i in range(len(s1)):
            if s1[i]!= s2[i]:
                return False
        return True

print(anagram(""abc"", ""cba""))
print(anagram(""abc"", ""abca""))
print(anagram(""abc"", ""cba""))
print(anagram("""
2272,How to Convert an image to NumPy array and saveit to CSV file using Python,"# import required libraries
from PIL import Image
import numpy as gfg


# read an image
img = Image.open('geeksforgeeks.jpg')


# convert image object into array
imageToMatrice = gfg.asarray(img)


# printing shape of image
print(imageToMatrice.shape)","import numpy as np

# Read the image
img = np.array(Image.open('image.jpg'))

# Convert the image to NumPy array
img_np = np.array(img)

# Save the NumPy array as a CSV file
np.savetxt('image.csv', img_np, delimiter=',')

# Open the CSV file as a Python code
with open('image.csv', 'r') as f:
    # Read the CSV file"
2273,Write a Python program to build flashcard using class in Python,"class flashcard:
def __init__(self, word, meaning):
self.word = word
self.meaning = meaning
def __str__(self):

#we will return a string
return self.word+' ( '+self.meaning+' )'

flash = []
print(""welcome to flashcard application"")

#the following loop will be repeated until
#user stops to add the flashcards
while(True):
word = input(""enter the name you want to add to flashcard : "")
meaning = input(""enter the meaning of the word : "")

flash.append(flashcard(word, meaning))
option = int(input(""enter 0 , if you want to add another flashcard : ""))

if(option):
break

# printing all the flashcards
print(""\nYour flashcards"")
for i in flash:
print("">"", i)","import random

class Flashcard:
    def __init__(self, words):
        self.words = words
        self.word_list = []
        for word in words:
            self.word_list.append(word)
        self.word_length = len(self.word_list)
        self.word_length_list = []
        for word in self.word_list:
            self.word_length_list.append(len(word))
        self.word_length_"
2274,Write a Python program to Divide date range to N equal duration,"# Python3 code to demonstrate working of
# Convert date range to N equal durations
# Using loop
import datetime

# initializing dates
test_date1 = datetime.datetime(1997, 1, 4)
test_date2 = datetime.datetime(1997, 1, 30)

# printing original dates
print(""The original date 1 is : "" + str(test_date1))
print(""The original date 2 is : "" + str(test_date2))

# initializing N
N = 7

temp = []

# getting diff.
diff = ( test_date2 - test_date1) // N
for idx in range(0, N):

# computing new dates
temp.append((test_date1 + idx * diff))

# using strftime to convert to userfriendly
# format
res = []
for sub in temp:
res.append(sub.strftime(""%Y/%m/%d %H:%M:%S""))

# printing result
print(""N equal duration dates : "" + str(res))","def divide_date_range(start_date, end_date, duration):
    start_date = datetime.strptime(start_date, '%Y-%m-%d')
    end_date = datetime.strptime(end_date, '%Y-%m-%d')
    duration = int(duration)
    start_date = start_date + timedelta(days=duration)
    end_date = end_date + timedelta(days=duration)
    return"
2275,How to create multiple CSV files from existing CSV file using Pandas  in Python,"import pandas as pd


# initialise data dictionary.
data_dict = {'CustomerID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],

'Gender': [""Male"", ""Female"", ""Female"", ""Male"",
""Male"", ""Female"", ""Male"", ""Male"",
""Female"", ""Male""],

'Age': [20, 21, 19, 18, 25, 26, 32, 41, 20, 19],

'Annual Income(k$)': [10, 20, 30, 10, 25, 60, 70,
15, 21, 22],

'Spending Score': [30, 50, 48, 84, 90, 65, 32, 46,
12, 56]}


# Create DataFrame
data = pd.DataFrame(data_dict)


# Write to CSV file
data.to_csv(""Customers.csv"")


# Print the output.
print(data)","import csv

with open('data.csv', 'r') as f:
    reader = csv.reader(f)
    file_data = list(reader)

# To remove the header from the data
file_data.pop(0)

# To convert the data into a list
data = []
for row in file_data:
    data.append(row)

# To print the data
print(data)

# To create a new CSV file
with open"
2276,Change Data Type for one or more columns in Pandas Dataframe in Python,"# importing pandas as pd
import pandas as pd

# sample dataframe
df = pd.DataFrame({
'A': [1, 2, 3, 4, 5],
'B': ['a', 'b', 'c', 'd', 'e'],
'C': [1.1, '1.0', '1.3', 2, 5] })

# converting all columns to string type
df = df.astype(str)
print(df.dtypes)","import pandas as pd

# Create a Dataframe
df = pd.DataFrame({
    'col1': [1, 2, 3, 4, 5],
    'col2': [10, 20, 30, 40, 50],
    'col3': [100, 200, 300, 400, 500]
})

# Create a Dataframe with mixed type columns
df = pd.DataFrame({
    'col1': [1, 2, 3, 4, 5],"
2277,Convert Text file to JSON in Python,"# Python program to convert text
# file to JSON


import json


# the file to be converted to
# json format
filename = 'data.txt'

# dictionary where the lines from
# text will be stored
dict1 = {}

# creating dictionary
with open(filename) as fh:

for line in fh:

# reads each line and trims of extra the spaces
# and gives only the valid words
command, description = line.strip().split(None, 1)

dict1[command] = description.strip()

# creating json file
# the JSON file is named as test1
out_file = open(""test1.json"", ""w"")
json.dump(dict1, out_file, indent = 4, sort_keys = False)
out_file.close()","#!/usr/bin/env python

import json

def main():
    # Open the file
    inFile = open('text.txt', 'r')
    # Read the file line by line
    for line in inFile:
        # Convert each line to a dictionary
        line = line.strip()
        d = json.loads(line)
        # Print the dictionary
        print(d)
    # Close the file
    inFile.close()

if __name__ == '__main__':"
2278,Write a Python program to Read CSV Columns Into List,"# importing module
from pandas import *


# reading CSV file
data = read_csv(""company_sales_data.csv"")


# converting column data to list
month = data['month_number'].tolist()
fc = data['facecream'].tolist()
fw = data['facewash'].tolist()
tp = data['toothpaste'].tolist()
sh = data['shampoo'].tolist()


# printing list data
print('Facecream:', fc)
print('Facewash:', fw)
print('Toothpaste:', tp)
print('Shampoo:', sh)","import csv

with open('data.csv', 'r') as csvfile:
    readCSV = csv.reader(csvfile)
    data = list(readCSV)

print(data)

# Solution:

# import csv
#
# with open('data.csv', 'r') as csvfile:
#     readCSV = csv.reader(csvfile)
#     data = list(readCSV)
#
# print(data)

#"
2279,Write a Python program to Search an Element in a Circular Linked List,"# Python program to Search an Element
# in a Circular Linked List

# Class to define node of the linked list
class Node:
def __init__(self,data):
self.data = data;
self.next = None;

class CircularLinkedList:

# Declaring Circular Linked List
def __init__(self):
self.head = Node(None);
self.tail = Node(None);
self.head.next = self.tail;
self.tail.next = self.head;


# Adds new nodes to the Circular Linked List
def add(self,data):

# Declares a new node to be added
newNode = Node(data);

# Checks if the Circular
# Linked List is empty
if self.head.data is None:

# If list is empty then new node
# will be the first node
# to be added in the Circular Linked List
self.head = newNode;
self.tail = newNode;
newNode.next = self.head;

else:
# If a node is already present then
# tail of the last node will point to
# new node
self.tail.next = newNode;

# New node will become new tail
self.tail = newNode;

# New Tail will point to the head
self.tail.next = self.head;

# Function to search the element in the
# Circular Linked List
def findNode(self,element):

# Pointing the head to start the search
current = self.head;
i = 1;

# Declaring f = 0
f = 0;
# Check if the list is empty or not
if(self.head == None):
print(""Empty list"");
else:
while(True):
# Comparing the elements
# of each node to the
# element to be searched
if(current.data == element):

# If the element is present
# then incrementing f
f += 1;
break;

# Jumping to next node
current = current.next;
i = i + 1;

# If we reach the head
# again then element is not
# present in the list so
# we will break the loop
if(current == self.head):
break;

# Checking the value of f
if(f > 0):
print(""element is present"");
else:
print(""element is not present"");

# Driver Code
if __name__ == '__main__':

# Creating a Circular Linked List
'''
Circular Linked List we will be working on:
1 -> 2 -> 3 -> 4 -> 5 -> 6
'''
circularLinkedList = CircularLinkedList();

#Adding nodes to the list
circularLinkedList.add(1);
circularLinkedList.add(2);
circularLinkedList.add(3);
circularLinkedList.add(4);
circularLinkedList.add(5);
circularLinkedList.add(6);

# Searching for node 2 in the list
circularLinkedList.findNode(2);

#Searching for node in the list
circularLinkedList.findNode(7);","def search(head, x):
    if head is None:
        return False
    if head.data == x:
        return True
    if head.data > x:
        return search(head.next, x)
    return search(head.next, x)

# Driver Code
if __name__ == '__main__':
    head = CircularLinkedList()
    head.append(1)
    head.append(2)
    head.append(3)"
2280,Isoformat to datetime  Python,"# importing datetime module
from datetime import datetime

# Getting today's date
todays_Date = datetime.now()

# Get date into the isoformat
isoformat_date = todays_Date.isoformat()

# print the type of date
print(type(isoformat_date))

# convert string date into datetime format
result = datetime.fromisoformat(isoformat_date)
print(type(result))","def isoformat(dt):
    return dt.isoformat()

def isoformat_to_datetime(dt):
    return dt.isoformat()

def isoformat_to_datetime_to_isoformat(dt):
    return dt.isoformat()

def isoformat_to_datetime_to_isoformat_to_isoformat(dt):
    return dt.isoformat()

def isoformat_to_datetime_to_isoformat_to_isoformat_to_iso"
2281,Drop rows from the dataframe based on certain condition applied on a column in Python,"# importing pandas as pd
import pandas as pd

# Read the csv file and construct the
# dataframe
df = pd.read_csv('nba.csv')

# Visualize the dataframe
print(df.head(15)

# Print the shape of the dataframe
print(df.shape)","df.loc[df['age'] < 18, 'age'] = 0
df.loc[df['age'] < 18, 'age'] = 1
df.loc[df['age'] < 18, 'age'] = 2
df.loc[df['age'] < 18, 'age'] = 3
df.loc[df['age'] < 18, 'age'] = 4
df.loc[df['age'] < 18, 'age'] = 5
df.loc[df['age'] < 18"
2282,Categorize Password as Strong or Weak using Regex in Python,"# Categorizing password as Strong or
# Weak in Python using Regex


import re


# Function to categorize password
def password(v):

# the password should not be a
# newline or space
if v == ""\n"" or v == "" "":
return ""Password cannot be a newline or space!""

# the password length should be in
# between 9 and 20
if 9 <= len(v) <= 20:

# checks for occurrence of a character
# three or more times in a row
if re.search(r'(.)\1\1', v):
return ""Weak Password: Same character repeats three or more times in a row""

# checks for occurrence of same string
# pattern( minimum of two character length)
# repeating
if re.search(r'(..)(.*?)\1', v):
return ""Weak password: Same string pattern repetition""

else:
return ""Strong Password!""

else:
return ""Password length must be 9-20 characters!""

# Main method
def main():

# Driver code
print(password(""Qggf!@ghf3""))
print(password(""Gggksforgeeks""))
print(password(""aaabnil1gu""))
print(password(""Aasd!feasn""))
print(password(""772*hd897""))
print(password("" ""))


# Driver Code
if __name__ == '__main__':
main()","import re

def password_checker(password):
    #Regex pattern to check the password
    regex = r'\b[A-Z]\w{6,}\b'
    #Regex pattern to check the password
    password_pattern = r'\b[A-Z]\w{6,}\b'
    #Regex pattern to check the password
    password_pattern_2 = r'\b[A-Z]\w{6,}\b'
    #"
2283,Create a Pandas Series from array in Python,"# importing Pandas & numpy
import pandas as pd
import numpy as np

# numpy array
data = np.array(['a', 'b', 'c', 'd', 'e'])

# creating series
s = pd.Series(data)
print(s)","import pandas as pd

# Create a Pandas Series from array in Python

# Create a Pandas Series from array in Python

# Create a Pandas Series from array in Python

# Create a Pandas Series from array in Python

# Create a Pandas Series from array in Python

# Create a Pandas Series from array in Python

# Create a Pandas Series from array in Python

# Create a Pandas Series from array in Python

# Create a Pandas Series from array in Python

# Create a"
2284,Write a Python program to Find the Number Occurring Odd Number of Times using Lambda expression and reduce function,"# Python program to Find the Number
# Occurring Odd Number of Times
# using Lambda expression and reduce function

from functools import reduce

def oddTimes(input):
# write lambda expression and apply
# reduce function over input list
# until single value is left
# expression reduces value of a ^ b into single value
# a starts from 0 and b from 1
# ((((((1 ^ 2)^3)^2)^3)^1)^3)
print (reduce(lambda a, b: a ^ b, input))

# Driver program
if __name__ == ""__main__"":
input = [1, 2, 3, 2, 3, 1, 3]
oddTimes(input)","def odd_number(n):
    return lambda x: x % 2!= 0

print(list(map(odd_number, range(1, 10))))

""""""

# Solution

def odd_number(n):
    return lambda x: x % 2!= 0

print(list(map(odd_number, range(1, 10))))"
2285,Possible Words using given characters in Python,"# Function to print words which can be created
# using given set of characters



def charCount(word):
dict = {}
for i in word:
dict[i] = dict.get(i, 0) + 1
return dict


def possible_words(lwords, charSet):
for word in lwords:
flag = 1
chars = charCount(word)
for key in chars:
if key not in charSet:
flag = 0
else:
if charSet.count(key) != chars[key]:
flag = 0
if flag == 1:
print(word)

if __name__ == ""__main__"":
input = ['goo', 'bat', 'me', 'eat', 'goal', 'boy', 'run']
charSet = ['e', 'o', 'b', 'a', 'm', 'g', 'l']
possible_words(input, charSet)","def solution(word):
    # write your code in Python 3.6
    # return the number of words in the given string
    # if the string is empty return 0
    # if the string is not empty return the number of words in the string
    # if the string is empty return 0
    # if the string is empty return 0
    # if the string is empty return 0
    # if the string is empty return 0
    # if the string is empty return 0
    # if the string is empty return 0
    # if the"
2286,Write a Python program to Custom sorting in list of tuples,"# Python3 code to demonstrate working of
# Custom sorting in list of tuples
# Using sorted() + lambda

# Initializing list
test_list = [(7, 8), (5, 6), (7, 5), (10, 4), (10, 1)]

# printing original list
print(""The original list is : "" + str(test_list))

# Custom sorting in list of tuples
# Using sorted() + lambda
res = sorted(test_list, key = lambda sub: (-sub[0], sub[1]))

# printing result
print(""The tuple after custom sorting is : "" + str(res))","def sort_tuple(tup):
    return tup[0]

def sort_tuple_2(tup):
    return tup[1]

def sort_tuple_3(tup):
    return tup[2]

def sort_tuple_4(tup):
    return tup[3]

def sort_tuple_5(tup):
    return tup[4]

def sort_tuple_6(tup):"
2287,Write a Python program to Skew Nested Tuple Summation,"# Python3 code to demonstrate working of
# Skew Nested Tuple Summation
# Using infinite loop

# initializing tuple
test_tup = (5, (6, (1, (9, (10, None)))))

# printing original tuple
print(""The original tuple is : "" + str(test_tup))

res = 0
while test_tup:
res += test_tup[0]

# assigning inner tuple as original
test_tup = test_tup[1]

# printing result
print(""Summation of 1st positions : "" + str(res))","def SkewNestedTupleSummation(n, a, b):
    return a + b + (n - 1) * (b - a)

n = int(input())
a = int(input())
b = int(input())
print(SkewNestedTupleSummation(n, a, b))

""""""

def SkewNestedTupleSummation(n, a, b):
    return a + b + (n - 1) * (b"
2288,Write a Python program to Filter Tuples by Kth element from List,"# Python3 code to demonstrate working of
# Filter Tuples by Kth element from List
# Using list comprehension

# initializing list
test_list = [(""GFg"", 5, 9), (""is"", 4, 3), (""best"", 10, 29)]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing check_list
check_list = [4, 2, 8, 10]

# initializing K
K = 1

# checking for presence on Kth element in list
# one liner
res = [sub for sub in test_list if sub[K] in check_list]

# printing result
print(""The filtered tuples : "" + str(res))","def filter_tuples(tup, k):
    return tuple(filter(lambda x: x[k] == tup[k], tup))

tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
k = 3
print(filter_tuples(tup, k))

""""""

# Solution

def filter_tuples(tup, k):
    return tuple(filter(lambda x: x[k] == tup"
2289,How to get list of parameters name from a function in Python,"# import required modules
import inspect
import collections

# use signature()
print(inspect.signature(collections.Counter))","def get_parameters(func):
    parameters = func.__code__.co_varnames
    return parameters

def get_parameters(func):
    parameters = func.__code__.co_argcount
    return parameters

def get_parameters(func):
    parameters = func.__code__.co_kwonlyargcount
    return parameters

def get_parameters(func):
    parameters = func.__code__.co_kwonlyargcount"
2290,Different ways to clear a list in Python,"# Python program to clear a list
# using clear() method

# Creating list
GEEK = [6, 0, 4, 1]
print('GEEK before clear:', GEEK)

# Clearing list
GEEK.clear()
print('GEEK after clear:', GEEK)","def clear_list(list):
    list.clear()

# Test your solution

# Example 1:

# Input:
# [""Animal"", ""bat"", ""cat"", ""bat"", ""cow"", ""cow"", ""horse"", ""horse"", ""sheep"", ""cow"", ""cow"", ""horse"", ""cow"", ""cow"", ""horse"", ""cow"", ""cow"", ""horse"", ""cow"", ""cow"", ""cow"", ""cow"", ""cow"", ""cow"", ""cow"", ""cow"", ""cow"", ""cow"", ""cow"","
2291,Write a Python program to extract Strings between HTML Tags,"# importing re module
import re

# initializing string
test_str = '<b>Gfg</b> is <b>Best</b>. I love <b>Reading CS</b> from it.'

# printing original string
print(""The original string is : "" + str(test_str))

# initializing tag
tag = ""b""

# regex to extract required strings
reg_str = ""<"" + tag + "">(.*?)</"" + tag + "">""
res = re.findall(reg_str, test_str)

# printing result
print(""The Strings extracted : "" + str(res))","import re

html = '''
<html>
<head>
<title>The Dormouse's story</title>
</head>
<body>
<p class=""title""><b>The Dormouse's story</b></p>
<p class=""story"">Once upon a time there were three little sisters; and their names were
<a href=""http://example.com/elsie"" class=""sister"" id=""link1"">Elsie</a>,
<a href=""http://example.com"
2292,Rename a folder of images using Tkinter in Python,"# Python 3 code to rename multiple image
# files in a directory or folder


import os
from tkinter import messagebox
import cv2
from tkinter import filedialog
from tkinter import *


height1 = 0
width1 = 0

# Function to select folder to rename images
def get_folder_path():

root = Tk()
root.withdraw()
folder_selected = filedialog.askdirectory()

return folder_selected


# Function to rename multiple files
def submit():

source = src_dir.get()
src_dir.set("""")
global width1
global height1

input_folder = get_folder_path()
i = 0

for img_file in os.listdir(input_folder):

file_name = os.path.splitext(img_file)[0]
extension = os.path.splitext(img_file)[1]

if extension == '.jpg':
src = os.path.join(input_folder, img_file)
img = cv2.imread(src)
h, w, c = img.shape
dst = source + '-' + str(i) + '-' + str(w) + ""x"" + str(h) + "".jpg""
dst = os.path.join(input_folder, dst)

# rename() function will rename all the files
os.rename(src, dst)
i += 1

messagebox.showinfo(""Done"", ""All files renamed successfully !!"")



# Driver Code
if __name__ == '__main__':
top = Tk()
top.geometry(""450x300"")
top.title(""Image Files Renamer"")
top.configure(background =""Dark grey"")

# For Input Label
input_path = Label(top,
text =""Enter Name to Rename files:"",
bg =""Dark grey"").place(x = 40, y = 60)

# For Input Textbox
src_dir = StringVar()
input_path_entry_area = Entry(top,
textvariable = src_dir,
width = 50).place(x = 40, y = 100)

# For submit button
submit_button = Button(top,
text =""Submit"",
command = submit).place(x = 200, y = 150)

top.mainloop()","import os
import tkinter as tk
from tkinter import filedialog

def rename_folder():
    root = tk.Tk()
    root.withdraw()
    path = filedialog.askdirectory()
    os.chdir(path)
    os.rename('images', 'images_new')
    root.destroy()

rename_folder()

""""""

import os
import tkinter as tk
from tkinter import filedialog"
2293,Compare two Files line by line in Python,"# Importing difflib
import difflib

with open('file1.txt') as file_1:
file_1_text = file_1.readlines()

with open('file2.txt') as file_2:
file_2_text = file_2.readlines()

# Find and print the diff:
for line in difflib.unified_diff(
file_1_text, file_2_text, fromfile='file1.txt',
tofile='file2.txt', lineterm=''):
print(line)","1. Open the first file
2. Read the first line
3. Read the second line
4. Compare the lines
5. Close the file

""""""

# 1. Open the first file
f1 = open(""file1.txt"", ""r"")

# 2. Read the first line
line = f1.readline()

# 3. Read the second line
line = f1.readline()

# 4. Compare the lines
if line!= """":
    print(line)

# 5. Close"
2294,Write a Python program to Numpy matrix.sort(),"# import the important module in python
import numpy as np

# make matrix with numpy
gfg = np.matrix('[4, 1; 12, 3]')

# applying matrix.sort() method
gfg.sort()

print(gfg)","import numpy as np

A = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

print(A.sort())

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12"
2295,Write a Python program to Group Elements in Matrix,"# Python3 code to demonstrate working of
# Group Elements in Matrix
# Using dictionary comprehension + loop

# initializing list
test_list = [[5, 8], [2, 0], [5, 4], [2, 3], [7, 9]]

# printing original list
print(""The original list : "" + str(test_list))

# initializing empty dictionary with default empty list
res = {idx[0]: [] for idx in test_list}

# using loop for grouping
for idx in test_list:
res[idx[0]].append(idx[1])

# printing result
print(""The Grouped Matrix : "" + str(res))","def group_elements(matrix):
    # Write your code here
    if len(matrix) == 0:
        return []
    if len(matrix) == 1:
        return [matrix[0]]
    if len(matrix) == 2:
        return [matrix[0], matrix[1]]
    if len(matrix) == 3:
        return [matrix[0], matrix[1], matrix[2]]
    if len(matrix) == 4:
        return [mat"
2296,Write a Python Program to Convert String Matrix Representation to Matrix,"import re

# initializing string
test_str = ""[gfg,is],[best,for],[all,geeks]""

# printing original string
print(""The original string is : "" + str(test_str))

flat_1 = re.findall(r""\[(.+?)\]"", test_str)
res = [sub.split("","") for sub in flat_1]

# printing result
print(""The type of result : "" + str(type(res)))
print(""Converted Matrix : "" + str(res))","def matrix_to_string(matrix):
    # your code goes here
    return matrix

def string_to_matrix(string):
    # your code goes here
    return string

def matrix_to_string(matrix):
    # your code goes here
    return matrix

def matrix_to_string(matrix):
    # your code goes here
    return matrix

def matrix_to_string(matrix):
    # your code goes here
    return matrix

def"
2297,How to get selected value from listbox in tkinter in Python,"# Python3 program to get selected
# value(s) from tkinter listbox


# Import tkinter
from tkinter import *


# Create the root window
root = Tk()
root.geometry('180x200')


# Create a listbox
listbox = Listbox(root, width=40, height=10, selectmode=MULTIPLE)


# Inserting the listbox items
listbox.insert(1, ""Data Structure"")
listbox.insert(2, ""Algorithm"")
listbox.insert(3, ""Data Science"")
listbox.insert(4, ""Machine Learning"")
listbox.insert(5, ""Blockchain"")


# Function for printing the
# selected listbox value(s)
def selected_item():

# Traverse the tuple returned by
# curselection method and print
# corresponding value(s) in the listbox
for i in listbox.curselection():
print(listbox.get(i))


# Create a button widget and
# map the command parameter to
# selected_item function
btn = Button(root, text='Print Selected', command=selected_item)


# Placing the button and listbox
btn.pack(side='bottom')
listbox.pack()


root.mainloop()","import tkinter as tk

def get_selected_row(event):
    try:
        global selected_tuple
        index = list_box.curselection()[0]
        selected_tuple = list_box.get(index)
        e1.delete(0, tk.END)
        e1.insert(tk.END, selected_tuple[1])
        e2.delete(0, tk.END)
        e2.insert(tk."
2298,Write a Python program to Modulo of tuple elements,"# Python3 code to demonstrate working of
# Tuple modulo
# using zip() + generator expression

# initialize tuples
test_tup1 = (10, 4, 5, 6)
test_tup2 = (5, 6, 7, 5)

# printing original tuples
print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))

# Tuple modulo
# using zip() + generator expression
res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2))

# printing result
print(""The modulus tuple : "" + str(res))","def modulo(tup):
    return tup[0] % tup[1]

tup = (1, 2, 3, 4, 5)
print(modulo(tup))

""""""

# Solution

def modulo(tup):
    return tup[0] % tup[1]

tup = (1, 2, 3, 4, 5)
print(modulo(tup))"
2299,Write a Python Script to change name of a file to its timestamp,"import time
import os


# Getting the path of the file
f_path = ""/location/to/gfg.png""

# Obtaining the creation time (in seconds)
# of the file/folder (datatype=int)
t = os.path.getctime(f_path)

# Converting the time to an epoch string
# (the output timestamp string would
# be recognizable by strptime() without
# format quantifers)
t_str = time.ctime(t)

# Converting the string to a time object
t_obj = time.strptime(t_str)

# Transforming the time object to a timestamp
# of ISO 8601 format
form_t = time.strftime(""%Y-%m-%d %H:%M:%S"", t_obj)

# Since colon is an invalid character for a
# Windows file name Replacing colon with a
# similar looking symbol found in unicode
# Modified Letter Colon "" "" (U+A789)
form_t = form_t.replace("":"", """")

# Renaming the filename to its timestamp
os.rename(
f_path, os.path.split(f_path)[0] + '/' + form_t + os.path.splitext(f_path)[1])","import os

def change_name(filename):
    # Open the file for reading
    f = open(filename, 'r')
    # Read the file
    text = f.read()
    # Close the file
    f.close()
    # Change the name
    text = text.replace('\n','')
    # Open the file for writing
    f = open(filename, 'w')
    # Write the file
    f.write(text)
    # Close the file"
2300,Write a Python program to count Even and Odd numbers in a List,"# Python program to count Even
# and Odd numbers in a List

# list of numbers
list1 = [10, 21, 4, 45, 66, 93, 1]

even_count, odd_count = 0, 0

# iterating each number in list
for num in list1:

# checking condition
if num % 2 == 0:
even_count += 1

else:
odd_count += 1

print(""Even numbers in the list: "", even_count)
print(""Odd numbers in the list: "", odd_count)","def count_even_odd(lst):
    even = 0
    odd = 0
    for i in lst:
        if i % 2 == 0:
            even += 1
        else:
            odd += 1
    return even, odd

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(count_even_odd(lst))

""""""

# Solution 1

def count_even_odd(lst):"
2301,Write a Python program to Frequency of numbers in String,"# Python3 code to demonstrate working of
# Frequency of numbers in String
# Using re.findall() + len()
import re

# initializing string
test_str = ""geeks4feeks is No. 1 4 geeks""

# printing original string
print(""The original string is : "" + test_str)

# Frequency of numbers in String
# Using re.findall() + len()
res = len(re.findall(r'\d+', test_str))

# printing result
print(""Count of numerics in string : "" + str(res))","def frequency(string):
    freq = {}
    for char in string:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    return freq

def main():
    string = input(""Enter the string: "")
    freq = frequency(string)
    print(freq)

if __name__ == ""__main__"":
    main()

""""""

def frequency(string):
    freq = {}"
2302,Write a Python Program to Sort the list according to the column using lambda,"# Python code to sorting list
# according to the column

# sortarray function is defined
def sortarray(array):

for i in range(len(array[0])):

# sorting array in ascending
# order specific to column i,
# here i is the column index
sortedcolumn = sorted(array, key = lambda x:x[i])

# After sorting array Column 1
print(""Sorted array specific to column {}, \
{}"".format(i, sortedcolumn))

# Driver code
if __name__ == '__main__':

# array of size 3 X 2
array = [['java', 1995], ['c++', 1983],
['python', 1989]]

# passing array in sortarray function
sortarray(array)","def sort_by_column(lst, column):
    return sorted(lst, key=lambda x: x[column])

lst = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]
print(sort_by_column(lst, 0))

""""""

# Solution

def sort_by_column(lst, column):
    return sorted(lst, key=lambda x: x[column])

lst = [('"
2303,Reversing a List in Python,"# Reversing a list using reversed()
def Reverse(lst):
return [ele for ele in reversed(lst)]

# Driver Code
lst = [10, 11, 12, 13, 14, 15]
print(Reverse(lst))","def reverse_list(lst):
    lst.reverse()
    return lst

lst = [1, 2, 3, 4, 5]
print(reverse_list(lst))

""""""

# Solution 1

def reverse_list(lst):
    lst.reverse()
    return lst

lst = [1, 2, 3, 4, 5]
print(reverse_list(lst))

# Solution 2

def reverse_list(lst):
    lst"
2304,Dictionary and counter in Python to find winner of election,"# Function to find winner of an election where votes
# are represented as candidate names
from collections import Counter


def winner(input):


# convert list of candidates into dictionary
# output will be likes candidates = {'A':2, 'B':4}
votes = Counter(input)

# create another dictionary and it's key will
# be count of votes values will be name of
# candidates
dict = {}


for value in votes.values():


# initialize empty list to each key to
# insert candidate names having same
# number of votes
dict[value] = []


for (key,value) in votes.items():
dict[value].append(key)


# sort keys in descending order to get maximum
# value of votes
maxVote = sorted(dict.keys(),reverse=True)[0]


# check if more than 1 candidates have same
# number of votes. If yes, then sort the list
# first and print first element
if len(dict[maxVote])>1:
print (sorted(dict[maxVote])[0])
else:
print (dict[maxVote][0])


# Driver program
if __name__ == ""__main__"":
input =['john','johnny','jackie','johnny',
'john','jackie','jamie','jamie',
'john','johnny','jamie','johnny',
'john']
winner(input)","def solution(d, c):
    d = sorted(d.items(), key=lambda x: x[1], reverse=True)
    c = sorted(c.items(), key=lambda x: x[1], reverse=True)
    return d[0][0]

""""""

def solution(d, c):
    d = sorted(d.items(), key=lambda x: x[1], reverse=True)
    c = sorted(c.items(), key=lambda x: x[1], reverse"
2305,Write a Python program to Sort Python Dictionaries by Key or Value,"# Function calling
def dictionairy():
# Declare hash function
key_value ={}


# Initializing value
key_value[2] = 56
key_value[1] = 2
key_value[5] = 12
key_value[4] = 24
key_value[6] = 18
key_value[3] = 323


print (""Task 1:-\n"")
print (""Keys are"")

# iterkeys() returns an iterator over the
# dictionarys keys.
for i in sorted (key_value.keys()) :
print(i, end = "" "")


def main():
# function calling
dictionairy()

# Main function calling
if __name__==""__main__"":
main()","python solution.py

""""""

# Python program to sort a dictionary
# using Lambda
def sortDict(d):
    # return sorted(d.items(), key=lambda item: item[1])
    return sorted(d.items(), key=lambda item: item[1], reverse=True)

# Python program to print
# sorted dictionary
def printDict(d):
    for key, value in d:
        print(""%s : %s"" % (key, value))"
2306,How to convert a list and tuple into NumPy arrays in Python,"import numpy as np


# list
list1 = [3, 4, 5, 6]
print(type(list1))
print(list1)
print()

# conversion
array1 = np.asarray(list1)
print(type(array1))
print(array1)
print()

# tuple
tuple1 = ([8, 4, 6], [1, 2, 3])
print(type(tuple1))
print(tuple1)
print()

# conversion
array2 = np.asarray(tuple1)
print(type(array2))
print(array2)","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([6, 7, 8, 9, 10])

c = np.array([[1, 2, 3, 4, 5],
              [6, 7, 8, 9, 10],
              [11, 12, 13, 14, 15]])

d = np.array([[1, 2, 3, 4, 5],
              [6, 7, 8, 9"
2307,Write a Python program to find largest number in a list,"# Python program to find largest
# number in a list

# list of numbers
list1 = [10, 20, 4, 45, 99]

# sorting the list
list1.sort()

# printing the last element
print(""Largest element is:"", list1[-1])","def largest_number(numbers):
    return max(numbers)

print(largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def largest_number(numbers):
    return max(numbers)

print(largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def largest_number(numbers):
    return max(numbers)"
2308,Write a Python program to Removing duplicates from tuple,"# Python3 code to demonstrate working of
# Removing duplicates from tuple
# using tuple() + set()

# initialize tuple
test_tup = (1, 3, 5, 2, 3, 5, 1, 1, 3)

# printing original tuple
print(""The original tuple is : "" + str(test_tup))

# Removing duplicates from tuple
# using tuple() + set()
res = tuple(set(test_tup))

# printing result
print(""The tuple after removing duplicates : "" + str(res))","def remove_duplicates(t):
    # your code goes here
    return t

t = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,"
2309,Write a Python program to Find missing and additional values in two lists,"# Python program to find the missing
# and additional elements

# examples of lists
list1 = [1, 2, 3, 4, 5, 6]
list2 = [4, 5, 6, 7, 8]

# prints the missing and additional elements in list2
print(""Missing values in second list:"", (set(list1).difference(list2)))
print(""Additional values in second list:"", (set(list2).difference(list1)))

# prints the missing and additional elements in list1
print(""Missing values in first list:"", (set(list2).difference(list1)))
print(""Additional values in first list:"", (set(list1).difference(list2)))","import random

def find_missing_values(list1, list2):
    list1.sort()
    list2.sort()
    missing_values = []
    for i in range(len(list1)):
        if list1[i] not in list2:
            missing_values.append(list1[i])
    return missing_values

def find_additional_values(list1, list2):
    list1.sort()
    list2.sort()"
2310,Shuffle a deck of card with OOPS in Python,"# Import required modules
from random import shuffle


# Define a class to create
# all type of cards
class Cards:
global suites, values
suites = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']

def __init__(self):
pass


# Define a class to categorize each card
class Deck(Cards):
def __init__(self):
Cards.__init__(self)
self.mycardset = []
for n in suites:
for c in values:
self.mycardset.append((c)+"" ""+""of""+"" ""+n)

# Method to remove a card from the deck
def popCard(self):
if len(self.mycardset) == 0:
return ""NO CARDS CAN BE POPPED FURTHER""
else:
cardpopped = self.mycardset.pop()
print(""Card removed is"", cardpopped)


# Define a class gto shuffle the deck of cards
class ShuffleCards(Deck):

# Constructor
def __init__(self):
Deck.__init__(self)

# Method to shuffle cards
def shuffle(self):
if len(self.mycardset) < 52:
print(""cannot shuffle the cards"")
else:
shuffle(self.mycardset)
return self.mycardset

# Method to remove a card from the deck
def popCard(self):
if len(self.mycardset) == 0:
return ""NO CARDS CAN BE POPPED FURTHER""
else:
cardpopped = self.mycardset.pop()
return (cardpopped)


# Driver Code
# Creating objects
objCards = Cards()
objDeck = Deck()

# Player 1
player1Cards = objDeck.mycardset
print('\n Player 1 Cards: \n', player1Cards)

# Creating object
objShuffleCards = ShuffleCards()

# Player 2
player2Cards = objShuffleCards.shuffle()
print('\n Player 2 Cards: \n', player2Cards)

# Remove some cards
print('\n Removing a card from the deck:', objShuffleCards.popCard())
print('\n Removing another card from the deck:', objShuffleCards.popCard())","import random

def shuffle(deck):
    for i in range(len(deck)):
        random.shuffle(deck[i])
    return deck

def main():
    deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36"
2311,How to extract youtube data in Python,"from youtube_statistics import YTstats

# paste the API key generated by you here
API_KEY = ""AIzaSyA-0KfpLK04NpQN1XghxhSlzG-WkC3DHLs""

# paste the channel id here
channel_id = ""UC0RhatS1pyxInC00YKjjBqQ""

yt = YTstats(API_KEY, channel_id)
yt.get_channel_statistics()
yt.dump()","import urllib.request
import urllib.parse
import urllib.error

url = ""http://www.python.org""

# Open the URL in a new tab and specify the user-agent
# Python 3.x
# Python 2.x
# Python 2.x
# Python 2.x
# Python 2.x
# Python 2.x
# Python 2.x
# Python 2.x
# Python 2.x
# Python 2.x
# Python 2.x
# Python 2.x"
2312,Check whether the given string is Palindrome using Stack in Python,"// C++ implementation of the approach
#include <bits/stdc++.h>
using namespace std;


// Function that returns true
// if string is a palindrome
bool isPalindrome(string s)
{
int length = s.size();


// Creating a Stack
stack<char> st;


// Finding the mid
int i, mid = length / 2;


for (i = 0; i < mid; i++) {
st.push(s[i]);
}


// Checking if the length of the string
// is odd, if odd then neglect the
// middle character
if (length % 2 != 0) {
i++;
}

char ele;
// While not the end of the string
while (s[i] != '\0')
{
ele = st.top();
st.pop();


// If the characters differ then the
// given string is not a palindrome
if (ele != s[i])
return false;
i++;
}


return true;
}


// Driver code
int main()
{
string s = ""madam"";


if (isPalindrome(s)) {
cout << ""Yes"";
}
else {
cout << ""No"";
}


return 0;
}


// This Code is Contributed by Harshit Srivastava","def isPalindrome(s):
    # Write your code here
    stack = []
    for i in s:
        if i.isalnum():
            stack.append(i)
        else:
            if len(stack) == 0:
                return False
            if stack[-1] == i:
                stack.pop()
            else:
                return False
    if len(stack) == 0:
        return True
    else:
        return False

print(isPalind"
2313,Write a Python program to Maximum occurring Substring from list,"# Python3 code to demonstrate working of
# Maximum occurring Substring from list
# Using regex() + groupby() + max() + lambda
import re
import itertools


# initializing string
test_str = ""gfghsisbjknlmkesbestgfgsdcngfgcsdjnisdjnlbestdjsklgfgcdsbestbnjdsgfgdbhisbhsbestdkgfgb""
test_list = ['gfg', 'is', 'best']


# printing original string and list
print(""The original string is : "" + test_str)
print(""The original list is : "" + str(test_list))


# Maximum occurring Substring from list
# Using regex() + groupby() + max() + lambda
seqs = re.findall(str.join('|', test_list), test_str)
grps = [(key, len(list(j))) for key, j in itertools.groupby(seqs)]
res = max(grps, key = lambda ele : ele[1])

# printing result
print(""Maximum frequency substring : "" + str(res[0]))","def max_substring(string):
    max_substring = 0
    for i in range(len(string)):
        for j in range(i, len(string)):
            if string[i:j+1] not in string:
                if string[i:j+1] > max_substring:
                    max_substring = string[i:j+1]
    return max_substring

print(max_substring(""abcdefghijklmnopqrstuvw"
2314,Write a Python program to check if a string has at least one letter and one number,"def checkString(str):

# intializing flag variable
flag_l = False
flag_n = False

# checking for letter and numbers in
# given string
for i in str:

# if string has letter
if i.isalpha():
flag_l = True

# if string has number
if i.isdigit():
flag_n = True

# returning and of flag
# for checking required condition
return flag_l and flag_n


# driver code
print(checkString('thishasboth29'))
print(checkString('geeksforgeeks'))","def is_valid_string(string):
    if len(string) < 3 or len(string) > 10:
        return False
    if string.isdigit():
        return False
    if string.count('0') > 0 or string.count('1') > 0:
        return False
    return True

print(is_valid_string('1234'))
print(is_valid_string('123'))
print(is_valid_string('12'))"
2315,Write a Python program to count number of vowels using sets in given string,"# Python3 code to count vowel in
# a string using set

# Function to count vowel
def vowel_count(str):

# Initializing count variable to 0
count = 0

# Creating a set of vowels
vowel = set(""aeiouAEIOU"")

# Loop to traverse the alphabet
# in the given string
for alphabet in str:

# If alphabet is present
# in set vowel
if alphabet in vowel:
count = count + 1

print(""No. of vowels :"", count)

# Driver code
str = ""GeeksforGeeks""

# Function Call
vowel_count(str)","def count_vowels(string):
    vowels = set(['a', 'e', 'i', 'o', 'u'])
    count = 0
    for i in string:
        if i in vowels:
            count += 1
    return count

print(count_vowels(""Python is a high-level general-purpose programming language"")
print(count_vowels(""The quick brown fox jumps over the lazy dog""))
print(count_vowels(""The"
2316,Write a Python program to Convert Matrix to Custom Tuple Matrix,"# Python3 code to demonstrate working of
# Convert Matrix to Custom Tuple Matrix
# Using zip() + loop

# initializing lists
test_list = [[4, 5, 6], [6, 7, 3], [1, 3, 4]]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing List elements
add_list = ['Gfg', 'is', 'best']

# Convert Matrix to Custom Tuple Matrix
# Using zip() + loop
res = []
for idx, ele in zip(add_list, test_list):
for e in ele:
res.append((idx, e))

# printing result
print(""Matrix after conversion : "" + str(res))","def matrix_to_tuple(matrix):
    """"""Convert Matrix to tuple""""""
    rows = len(matrix)
    if rows == 0:
        raise ValueError(""matrix must have at least one row"")
    cols = len(matrix[0])
    if cols == 0:
        raise ValueError(""matrix must have at least one column"")
    result = []
    for row in range(rows):
        result.append([])
        for col in range(cols"
2317,Write a Python program to List product excluding duplicates,"# Python 3 code to demonstrate
# Duplication Removal List Product
# using naive methods


# getting Product
def prod(val) :
res = 1
for ele in val:
res *= ele
return res


# initializing list
test_list = [1, 3, 5, 6, 3, 5, 6, 1]
print (""The original list is : "" + str(test_list))


# using naive method
# Duplication Removal List Product
res = []
for i in test_list:
if i not in res:
res.append(i)
res = prod(res)


# printing list after removal
print (""Duplication removal list product : "" + str(res))","""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution 23"
2318,Write a Python program to Cloning or Copying a list,"# Python program to copy or clone a list
# Using the Slice Operator
def Cloning(li1):
li_copy = li1[:]
return li_copy

# Driver Code
li1 = [4, 8, 2, 10, 15, 18]
li2 = Cloning(li1)
print(""Original List:"", li1)
print(""After Cloning:"", li2)","def solution(lst):
    return lst[:]

lst = [1, 2, 3, 4, 5]
print(solution(lst))

""""""

def solution(lst):
    return lst[:]

lst = [1, 2, 3, 4, 5]
print(solution(lst))

""""""

def solution(lst):
    return lst[:]

lst = [1, 2, 3, 4, 5]"
2319,How to add timestamp to CSV file in Python,"# Importing required modules
import csv
from datetime import datetime


# Here we are storing our data in a
# variable. We'll add this data in
# our csv file
rows = [['GeeksforGeeks1', 'GeeksforGeeks2'],
['GeeksforGeeks3', 'GeeksforGeeks4'],
['GeeksforGeeks5', 'GeeksforGeeks6']]

# Opening the CSV file in read and
# write mode using the open() module
with open(r'YOUR_CSV_FILE.csv', 'r+', newline='') as file:

# creating the csv writer
file_write = csv.writer(file)

# storing current date and time
current_date_time = datetime.now()

# Iterating over all the data in the rows
# variable
for val in rows:

# Inserting the date and time at 0th
# index
val.insert(0, current_date_time)

# writing the data in csv file
file_write.writerow(val)","import csv

with open('timestamp.csv', 'w') as csvfile:
    csvwriter = csv.writer(csvfile)
    csvwriter.writerow(['Name', 'Age', 'Job', 'Salary'])
    csvwriter.writerow(['John', 25, 'Engineer', 2000])
    csvwriter.writerow(['Anna', 30, 'Data Scientist', 30000])
    csvwriter.writerow(['Peter', 40, 'Data Scientist', 40000])
    csvwriter"
2320,Write a Python Program to Count Words in Text File,"# creating variable to store the
# number of words
number_of_words = 0

# Opening our text file in read only
# mode using the open() function
with open(r'SampleFile.txt','r') as file:

# Reading the content of the file
# using the read() function and storing
# them in a new variable
data = file.read()

# Splitting the data into seperate lines
# using the split() function
lines = data.split()

# Adding the length of the
# lines in our number_of_words
# variable
number_of_words += len(lines)


# Printing total number of words
print(number_of_words)","import re

def count_words(filename):
    """"""
    Count the number of words in a text file.
    """"""
    try:
        with open(filename, 'r') as f:
            contents = f.read()
    except FileNotFoundError:
        print(f""Sorry, the file {filename} does not exist."")
    else:
        words = re.findall(r'\w+', contents)
        print(f""The file {filename} has {len(words)}"
2321,Convert a NumPy array into a csv file in Python,"# import necessary libraries
import pandas as pd
import numpy as np

# create a dummy array
arr = np.arange(1,11).reshape(2,5)

# display the array
print(arr)

# convert array into dataframe
DF = pd.DataFrame(arr)

# save the dataframe as a csv file
DF.to_csv(""data1.csv"")","import numpy as np
import csv

# Create a NumPy array
arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Create a csv file
with open('my_file.csv', 'w') as f:
    # Create the csv writer
    csv_writer = csv.writer(f)
    # Write the data
    csv_writer.writerows(arr)

# Open the file in"
2322,How to add a border around a NumPy array in Python,"# importing Numpy package
import numpy as np

# Creating a 2X2 Numpy matrix
array = np.ones((2, 2))

print(""Original array"")
print(array)

print(""\n0 on the border and 1 inside the array"")

# constructing border of 0 around 2D identity matrix
# using np.pad()
array = np.pad(array, pad_width=1, mode='constant',
constant_values=0)

print(array)","import numpy as np

# Create a NumPy array with shape (3, 4)
arr = np.arange(12).reshape(3, 4)

# Create a NumPy array with shape (3, 4) with the value of 1
arr_1 = np.ones((3, 4))

# Create a NumPy array with shape (3, 4) with the value of 2
arr_2 = np.zeros((3, 4))

# Create a NumPy array with shape (3"
2323,Write a Python program to Filter out integers from float numpy array,"# Python code to demonstrate
# filtering integers from numpy array
# containing integers and float


import numpy as np


# initialising array
ini_array = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0])


# printing initial array
print (""initial array : "", str(ini_array))


# filtering integers
result = ini_array[ini_array != ini_array.astype(int)]


# printing resultant
print (""final array"", result)","import numpy as np

n = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

def filter_numpy(n):
    return n[n>5]

print(filter_numpy(n))

""""""

# Solution

import numpy as np

n = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

def filter_numpy(n):"
2324,Write a Python program to Remove Tuples of Length K,"# Python3 code to demonstrate working of
# Remove Tuples of Length K
# Using list comprehension

# initializing list
test_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)]

# printing original list
print(""The original list : "" + str(test_list))

# initializing K
K = 1

# 1 liner to perform task
# filter just lengths other than K
# len() used to compute length
res = [ele for ele in test_list if len(ele) != K]

# printing result
print(""Filtered list : "" + str(res))","def remove_tuples(k):
    return tuple(tuple(t) for t in list(enumerate(range(k))))

print(remove_tuples(3))

""""""

# Solution

def remove_tuples(k):
    return tuple(tuple(t) for t in list(enumerate(range(k))))

print(remove_tuples(3))"
2325,Write a Python program to Program to accept the strings which contains all vowels,"# Python program to accept the strings
# which contains all the vowels


# Function for check if string
# is accepted or not
def check(string) :


string = string.lower()


# set() function convert ""aeiou""
# string into set of characters
# i.e.vowels = {'a', 'e', 'i', 'o', 'u'}
vowels = set(""aeiou"")


# set() function convert empty
# dictionary into empty set
s = set({})


# looping through each
# character of the string
for char in string :


# Check for the character is present inside
# the vowels set or not. If present, then
# add into the set s by using add method
if char in vowels :
s.add(char)
else:
pass

# check the length of set s equal to length
# of vowels set or not. If equal, string is
# accepted otherwise not
if len(s) == len(vowels) :
print(""Accepted"")
else :
print(""Not Accepted"")




# Driver code
if __name__ == ""__main__"" :

string = ""SEEquoiaL""


# calling function
check(string)","def solution(s):
    vowels = ['a', 'e', 'i', 'o', 'u']
    for i in s:
        if i in vowels:
            print(i, end="""")

solution(""aAaEeIiOoUu"")

""""""

def solution(s):
    vowels = ['a', 'e', 'i', 'o', 'u']
    for i in s:
        if i in vowels:"
2326,What are the allowed characters in Python function names,"# Python program to demonstrate
# that keywords cant be used as
# identifiers


def calculate_sum(a, b):
return a + b


x = 2
y = 5
print(calculate_sum(x,y))


# def and if is a keyword, so
# this would give invalid
# syntax error
def = 12
if = 2


print(calculate_sum(def, if))","def solution(name):
    # your code here
    return name.lower()

print(solution(""Python""))
print(solution(""PYTHON""))
print(solution(""PYTHON""))
print(solution(""python""))
print(solution(""Python""))
print(solution(""Python""))
print(solution(""Python""))
print(solution(""Python""))
print(solution(""Python""))
print(solution(""Python""))
print(solution(""Python""))
print(solution("""
2327,Find the number of rows and columns of a given matrix using NumPy in Python,"import numpy as np


matrix= np.arange(1,9).reshape((3, 3))

# Original matrix
print(matrix)

# Number of rows and columns of the said matrix
print(matrix.shape)","import numpy as np

matrix = np.array([[1, 2, 3, 4, 5],
                   [6, 7, 8, 9, 10],
                   [11, 12, 13, 14, 15],
                   [16, 17, 18, 19, 20]])

print(matrix.shape)

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

#"
2328,Write a Python program to Group Sublists by another List,"# Python3 code to demonstrate
# Group Sublists by another List
# using loop + generator(yield)

# helper function
def grp_ele(test_list1, test_list2):
temp = []
for i in test_list1:
if i in test_list2:
if temp:
yield temp
temp = []
yield i
else:
temp.append(i)
if temp:
yield temp

# Initializing lists
test_list1 = [8, 5, 9, 11, 3, 7]
test_list2 = [9, 11]

# printing original lists
print(""The original list 1 is : "" + str(test_list1))
print(""The original list 2 is : "" + str(test_list2))

# Group Sublists by another List
# using loop + generator(yield)
res = list(grp_ele(test_list1, test_list2))

# printing result
print (""The Grouped list is : "" + str(res))","def group_sublists(lst):
    d = {}
    for i in range(len(lst)):
        if lst[i] not in d:
            d[lst[i]] = []
        d[lst[i]].append(i)
    return d

lst = [1,2,3,4,5,6,7,8,9,10]
print(group_sublists(lst))

""""""

def group_sublists(l"
2329,Kill a Process by name using Python,"import os, signal

def process():

# Ask user for the name of process
name = input(""Enter process Name: "")
try:

# iterating through each instance of the process
for line in os.popen(""ps ax | grep "" + name + "" | grep -v grep""):
fields = line.split()

# extracting Process ID from the output
pid = fields[0]

# terminating process
os.kill(int(pid), signal.SIGKILL)
print(""Process Successfully terminated"")

except:
print(""Error Encountered while running script"")

process()","import os
import sys

def kill_process(process_name):
    # Open a pipe to the process
    os.system('kill'+ process_name)

if __name__ == '__main__':
    # Process name
    process_name = sys.argv[1]
    # Kill process
    kill_process(process_name)"
2330,Write a Python program to Print an Inverted Star Pattern,"# python 3 code to print inverted star
# pattern

# n is the number of rows in which
# star is going to be printed.
n=11

# i is going to be enabled to
# range between n-i t 0 with a
# decrement of 1 with each iteration.
# and in print function, for each iteration,
#   is multiplied with n-i and * is
# multiplied with i to create correct
# space before of the stars.
for i in range (n, 0, -1):
print((n-i) * ' ' + i * '*')","def invert_pattern(n):
    if n == 0:
        return "" ""
    else:
        return invert_pattern(n-1) + ""*"" + invert_pattern(n-1)

print(invert_pattern(5))

""""""

# Solution:

def invert_pattern(n):
    if n == 0:
        return "" ""
    else:
        return invert_pattern(n-1) + ""*"" + invert_pattern("
2331,Combining a one and a two-dimensional NumPy Array in Python,"# importing Numpy package
import numpy as np

num_1d = np.arange(5)
print(""One dimensional array:"")
print(num_1d)

num_2d = np.arange(10).reshape(2,5)
print(""\nTwo dimensional array:"")
print(num_2d)

# Combine 1-D and 2-D arrays and display
# their elements using numpy.nditer()
for a, b in np.nditer([num_1d, num_2d]):
print(""%d:%d"" % (a, b),)","import numpy as np

# Create a NumPy array of shape (3, 3)
a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Create a NumPy array of shape (3, 3)
b = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Create a NumPy array of shape (3, 3)
c = np.array"
2332,Write a Python program to Ways to find length of list,"# Python code to demonstrate
# length of list
# using naive method

# Initializing list
test_list = [ 1, 4, 5, 7, 8 ]

# Printing test_list
print (""The list is : "" + str(test_list))

# Finding length of list
# using loop
# Initializing counter
counter = 0
for i in test_list:

# incrementing counter
counter = counter + 1

# Printing length of list
print (""Length of list using naive method is : "" + str(counter))","def length(lst):
    return len(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(length(lst))

""""""

def length(lst):
    return len(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(length(lst))

""""""

def length(lst):
    return len("
2333,Write a Python program to Sorting string using order defined by another string,"# Python program to sort a string and return
# its reverse string according to pattern string

# This function will return the reverse of sorted string
# according to the pattern

def sortbyPattern(pat, str):

priority = list(pat)

# Create a dictionary to store priority of each character
myDict = { priority[i] : i for i in range(len(priority))}

str = list(str)

# Pass lambda function as key in sort function
str.sort( key = lambda ele : myDict[ele])

# Reverse the string using reverse()
str.reverse()

new_str = ''.join(str)
return new_str


if __name__=='__main__':
pat = ""asbcklfdmegnot""
str = ""eksge""
new_str = sortbyPattern(pat, str)
print(new_str)","def sort_string(string1, string2):
    if string1 > string2:
        return string2
    elif string1 < string2:
        return string1
    else:
        return string1

print(sort_string(""a"", ""b""))
print(sort_string(""a"", ""c""))
print(sort_string(""c"", ""b""))
print(sort_string(""c"", ""a""))

""""""

def sort_string(string1, string2):"
2334,Ways to convert string to dictionary in Python,"# Python implementation of converting
# a string into a dictionary

# initialising string
str = "" Jan = January; Feb = February; Mar = March""

# At first the string will be splitted
# at the occurence of ';' to divide items
# for the dictionaryand then again splitting
# will be done at occurence of '=' which
# generates key:value pair for each item
dictionary = dict(subString.split(""="") for subString in str.split("";""))

# printing the generated dictionary
print(dictionary)","def solution(s):
    d = {}
    for i in s:
        if i not in d:
            d[i] = 1
        else:
            d[i] += 1
    return d

print(solution(""abcdefg""))
print(solution(""abcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdef"
2335,Functions that accept variable length key value pair as arguments in Python,"# using kwargs
# in functions




def printKwargs(**kwargs):
print(kwargs)




# driver code
if __name__ == ""__main__"":
printKwargs(Argument_1='gfg', Argument_2='GFG')","def my_function(x, y, z):
    return x + y + z

print(my_function(1, 2, 3))

""""""

def my_function(x, y, z):
    return x + y + z

print(my_function(1, 2, 3))

""""""

def my_function(x, y, z):
    return x + y + z

print(my_function(1, 2, 3))

""""""

def"
2336,Lambda with if but without else in Python,"# Lambda function with if but without else.
square = lambda x : x*x if(x > 0)


print(square(6))","def solution(Lambda):
    if Lambda == 0:
        return 1
    else:
        return Lambda + solution(Lambda - 1)

""""""

def solution(Lambda):
    if Lambda == 0:
        return 1
    else:
        return Lambda + solution(Lambda - 1)

print(solution(5))"
2337,Counting the frequencies in a list using dictionary in Python,"# Python program to count the frequency of
# elements in a list using a dictionary


def CountFrequency(my_list):


# Creating an empty dictionary
freq = {}
for item in my_list:
if (item in freq):
freq[item] += 1
else:
freq[item] = 1


for key, value in freq.items():
print (""% d : % d""%(key, value))


# Driver function
if __name__ == ""__main__"":
my_list =[1, 1, 1, 5, 5, 3, 1, 3, 3, 1, 4, 4, 4, 2, 2, 2, 2]


CountFrequency(my_list)","def count_frequencies(lst):
    d = {}
    for i in lst:
        if i in d:
            d[i] += 1
        else:
            d[i] = 1
    return d

lst = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10"
2338,Sorting objects of user defined class in Python,"print(sorted([1,26,3,9]))

print(sorted(""Geeks foR gEEks"".split(), key=str.lower))","class User:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __str__(self):
        return f""User {self.name} is {self.age} years old""

    def __lt__(self, other):
        return self.age < other.age

    def __gt__(self, other):
        return self.age > other.age

    def __eq__(self, other):
        return self.age =="
2339,Write a Python program to Numpy matrix.tolist(),"# import the important module in python
import numpy as np

# make matrix with numpy
gfg = np.matrix('[4, 1, 12, 3]')

# applying matrix.tolist() method
geek = gfg.tolist()

print(geek)","import numpy as np

matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(matrix.tolist())

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12"
2340,Write a Python program to Maximum record value key in dictionary,"# Python3 code to demonstrate working of
# Maximum record value key in dictionary
# Using loop

# initializing dictionary
test_dict = {'gfg' : {'Manjeet' : 5, 'Himani' : 10},
'is' : {'Manjeet' : 8, 'Himani' : 9},
'best' : {'Manjeet' : 10, 'Himani' : 15}}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# initializing search key
key = 'Himani'

# Maximum record value key in dictionary
# Using loop
res = None
res_max = 0
for sub in test_dict:
if test_dict[sub][key] > res_max:
res_max = test_dict[sub][key]
res = sub

# printing result
print(""The required key is : "" + str(res))","def max_record_value(d):
    max_value = 0
    for key in d:
        if d[key] > max_value:
            max_value = d[key]
    return max_value

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
print(max_record_value(d))

""""""

""""""

def max_record_value(d):
    max_value = 0
    for key in d"
2341,How to build an array of all combinations of two NumPy arrays in Python,"# importing Numpy package
import numpy as np

# creating 2 numpy arrays
array_1 = np.array([1, 2])
array_2 = np.array([4, 6])

print(""Array-1"")
print(array_1)

print(""\nArray-2"")
print(array_2)

# combination of elements of array_1 and array_2
# using numpy.meshgrid().T.reshape()
comb_array = np.array(np.meshgrid(array_1, array_2)).T.reshape(-1, 2)

print(""\nCombine array:"")
print(comb_array)","import numpy as np

a = np.array([[1,2,3],[4,5,6]])
b = np.array([[1,2,3],[4,5,6]])

print(a)
print(b)

# Solution:

# a = np.array([[1,2,3],[4,5,6]])
# b = np.array([[1,2,3],[4,5,6]])

# print"
2342,Write a Python program to Sum of tuple elements,"# Python3 code to demonstrate working of
# Tuple summation
# Using list() + sum()

# initializing tup
test_tup = (7, 8, 9, 1, 10, 7)

# printing original tuple
print(""The original tuple is : "" + str(test_tup))

# Tuple elements inversions
# Using list() + sum()
res = sum(list(test_tup))

# printing result
print(""The summation of tuple elements are : "" + str(res))","def sum_tuple(tup):
    return sum(tup)

print(sum_tuple((1, 2, 3, 4, 5)))

""""""

def sum_tuple(tup):
    return sum(tup)

print(sum_tuple((1, 2, 3, 4, 5)))"
2343,Print anagrams together in Python using List and Dictionary,"# Function to return all anagrams together
def allAnagram(input):

# empty dictionary which holds subsets
# of all anagrams together
dict = {}

# traverse list of strings
for strVal in input:

# sorted(iterable) method accepts any
# iterable and rerturns list of items
# in ascending order
key = ''.join(sorted(strVal))

# now check if key exist in dictionary
# or not. If yes then simply append the
# strVal into the list of it's corresponding
# key. If not then map empty list onto
# key and then start appending values
if key in dict.keys():
dict[key].append(strVal)
else:
dict[key] = []
dict[key].append(strVal)

# traverse dictionary and concatenate values
# of keys together
output = """"
for key,value in dict.items():
output = output + ' '.join(value) + ' '

return output

# Driver function
if __name__ == ""__main__"":
input=['cat', 'dog', 'tac', 'god', 'act']
print (allAnagram(input))","def solve(s):
    d = {}
    for i in s:
        d[i] = d.get(i, 0) + 1
    return d

def solve2(s):
    d = {}
    for i in s:
        d[i] = d.get(i, 0) + 1
    return d

def solve3(s):
    d = {}
    for i in s:
        d[i] = d.get(i, 0) + 1"
2344,Write a Python program to Check if a Substring is Present in a Given String,"# function to check if small string is
# there in big string
def check(string, sub_str):
if (string.find(sub_str) == -1):
print(""NO"")
else:
print(""YES"")

# driver code
string = ""geeks for geeks""
sub_str =""geek""
check(string, sub_str)","def isSubstring(s, t):
    if len(s)!= len(t):
        return False
    for i in range(len(s)):
        if s[i]!= t[i]:
            return False
    return True

print(isSubstring(""abc"", ""abc""))
print(isSubstring(""abc"", ""abd""))
print(isSubstring(""abc"", ""abd""))
print(isSubstring(""abc"", ""abd""))
print("
2345,NumPy  Fibonacci Series using Binet Formula in Python,"import numpy as np

# We are creating an array contains n = 10 elements
# for getting first 10 Fibonacci numbers
a = np.arange(1, 11)
lengthA = len(a)

# splitting of terms for easiness
sqrtFive = np.sqrt(5)
alpha = (1 + sqrtFive) / 2
beta = (1 - sqrtFive) / 2

# Implementation of formula
# np.rint is used for rounding off to integer
Fn = np.rint(((alpha ** a) - (beta ** a)) / (sqrtFive))
print(""The first {} numbers of Fibonacci series are {} . "".format(lengthA, Fn))","import numpy as np

def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

n = int(input(""Enter the number of terms: ""))
print(""Fibonacci series: "")
for i in range(n):
    print(fib(i))

# Solution:
#
# def fib(n):"
2346,Count distinct substrings of a string using Rabin Karp algorithm in Python,"# importing libraries
import sys
import math as mt
t = 1
# store prime to reduce overflow
mod = 9007199254740881


for ___ in range(t):


# string to check number of distinct substring
s = 'abcd'


# to store substrings
l = []


# to store hash values by Rabin Karp algorithm
d = {}


for i in range(len(s)):
suma = 0
pre = 0


# Number of input alphabets
D = 256


for j in range(i, len(s)):


# calculate new hash value by adding next element
pre = (pre*D+ord(s[j])) % mod


# store string length if non repeat
if d.get(pre, -1) == -1:
l.append([i, j])
d[pre] = 1


# resulting length
print(len(l))


# resulting distinct substrings
for i in range(len(l)):
print(s[l[i][0]:l[i][1]+1], end="" "")","def count_distinct_substrings(string):
    # Write your code here
    count = 0
    for i in range(len(string)):
        for j in range(i, len(string)):
            if string[i:j+1] == string[i:j+1][::-1]:
                count += 1
    return count

print(count_distinct_substrings(""abcdef""))
print(count_distinct_substrings(""abcdefghijkl"
2347,Write a Python program to Check if two lists have at-least one element common,"# Python program to check
# if two lists have at-least
# one element common
# using traversal of list

def common_data(list1, list2):
result = False

# traverse in the 1st list
for x in list1:

# traverse in the 2nd list
for y in list2:

# if one common
if x == y:
result = True
return result

return result

# driver code
a = [1, 2, 3, 4, 5]
b = [5, 6, 7, 8, 9]
print(common_data(a, b))

a = [1, 2, 3, 4, 5]
b = [6, 7, 8, 9]
print(common_data(a, b))","""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22"
2348,Find length of a string in python (4 ways),"# Python code to demonstrate string length
# using len

str = ""geeks""
print(len(str))","def length_of_string(string):
    if len(string) == 0:
        return 0
    else:
        return len(string)

print(length_of_string(""Python""))
print(length_of_string(""Python""))
print(length_of_string(""Python""))
print(length_of_string(""Python""))
print(length_of_string(""Python""))
print(length_of_string(""Python""))
print(length_of_string(""Python""))
print(length_"
2349,Write a Python program to Convert List of Dictionaries to List of Lists,"# Python3 code to demonstrate working of
# Convert List of Dictionaries to List of Lists
# Using loop + enumerate()

# initializing list
test_list = [{'Nikhil' : 17, 'Akash' : 18, 'Akshat' : 20},
{'Nikhil' : 21, 'Akash' : 30, 'Akshat' : 10},
{'Nikhil' : 31, 'Akash' : 12, 'Akshat' : 19}]

# printing original list
print(""The original list is : "" + str(test_list))

# Convert List of Dictionaries to List of Lists
# Using loop + enumerate()
res = []
for idx, sub in enumerate(test_list, start = 0):
if idx == 0:
res.append(list(sub.keys()))
res.append(list(sub.values()))
else:
res.append(list(sub.values()))

# printing result
print(""The converted list : "" + str(res))","def convert_list_to_list_of_lists(list_of_dictionaries):
    list_of_lists = []
    for dictionary in list_of_dictionaries:
        list_of_lists.append([dictionary['name'], dictionary['age'], dictionary['gender'], dictionary['height'], dictionary['weight']])
    return list_of_lists

print(convert_list_to_list_of_lists([{'name': 'John', '"
2350,"Write a Python program to Extract Keys Value, if Key Present in List and Dictionary","# Python3 code to demonstrate working of
# Extract Key's Value, if Key Present in List and Dictionary
# Using all() + list comprehension

# initializing list
test_list = [""Gfg"", ""is"", ""Good"", ""for"", ""Geeks""]

# initializing Dictionary
test_dict = {""Gfg"" : 2, ""is"" : 4, ""Best"" : 6}

# initializing K
K = ""Gfg""

# printing original list and Dictionary
print(""The original list : "" + str(test_list))
print(""The original Dictionary : "" + str(test_dict))

# using all() to check for occurrence in list and dict
# encapsulating list and dictionary keys in list
res = None
if all(K in sub for sub in [test_dict, test_list]):
res = test_dict[K]

# printing result
print(""Extracted Value : "" + str(res))","import json

def extract_keys_value(dictionary):
    for key, value in dictionary.items():
        print(key, value)

dictionary = {'a': 1, 'b': 2, 'c': 3}
extract_keys_value(dictionary)

# Output:
# a
# b
# c

# Python Code to Extract Keys Value

# import json

# def extract_keys_value(dictionary):
#     for key,"
2351,Write a Python Program to print digit pattern,"# function to print the pattern
def pattern(n):

# traverse through the elements
# in n assuming it as a string
for i in n:

# print | for every line
print(""|"", end = """")

# print i number of * s in
# each line
print(""*"" * int(i))

# get the input as string
n = ""41325""
pattern(n)","def digit_pattern(n):
    if n == 0:
        return''
    else:
        return digit_pattern(n//10) + str(n%10)

print(digit_pattern(123))

""""""

def digit_pattern(n):
    if n == 0:
        return''
    else:
        return digit_pattern(n//10) + str(n%10)

print(digit_pattern(123))

""""""

def digit_pattern(n):"
2352,Finding the k smallest values of a NumPy array in Python,"# importing the modules
import numpy as np

# creating the array
arr = np.array([23, 12, 1, 3, 4, 5, 6])
print(""The Original Array Content"")
print(arr)

# value of k
k = 4

# sorting the array
arr1 = np.sort(arr)

# k smallest number of array
print(k, ""smallest elements of the array"")
print(arr1[:k])","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Solution:

# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

# Solution 11:

# Solution 12:

# Solution"
2353,How to Build a Simple Auto-Login Bot with Python,"# Used to import the webdriver from selenium
from selenium import webdriver
import os


# Get the path of chromedriver which you have install


def startBot(username, password, url):
path = ""C:\\Users\\hp\\Downloads\\chromedriver""

# giving the path of chromedriver to selenium websriver
driver = webdriver.Chrome(path)

# opening the website in chrome.
driver.get(url)

# find the id or name or class of
# username by inspecting on username input
driver.find_element_by_name(
""id/class/name of username"").send_keys(username)

# find the password by inspecting on password input
driver.find_element_by_name(
""id/class/name of password"").send_keys(password)

# click on submit
driver.find_element_by_css_selector(
""id/class/name/css selector of login button"").click()




# Driver Code
# Enter below your login credentials
username = ""Enter your username""
password = ""Enter your password""


# URL of the login page of site
# which you want to automate login.
url = ""Enter the URL of login page of website""


# Call the function
startBot(username, password, url)","import sys
import os
import time
import random
import string
import hashlib
import json
import requests
import base64
import datetime
import threading
import json
import time
import random
import string
import hashlib
import json
import requests
import base64
import datetime
import threading
import json
import time
import random
import string
import hashlib
import json
import requests
import base64
import datetime
import threading
import json
import time
import random
import string"
2354,Write a Python program to Print Heart Pattern,"# define size n = even only
n = 8

# so this heart can be made n//2 part left,
# n//2 part right, and one middle line
# i.e; columns m = n + 1
m = n+1

# loops for upper part
for i in range(n//2-1):
for j in range(m):

# condition for printing stars to GFG upper line
if i == n//2-2 and (j == 0 or j == m-1):
print(""*"", end="" "")

# condition for printing stars to left upper
elif j <= m//2 and ((i+j == n//2-3 and j <= m//4) \
or (j-i == m//2-n//2+3 and j > m//4)):
print(""*"", end="" "")

# condition for printing stars to right upper
elif j > m//2 and ((i+j == n//2-3+m//2 and j < 3*m//4) \
or (j-i == m//2-n//2+3+m//2 and j >= 3*m//4)):
print(""*"", end="" "")

# condition for printing spaces
else:
print("" "", end="" "")
print()

# loops for lower part
for i in range(n//2-1, n):
for j in range(m):

# condition for printing stars
if (i-j == n//2-1) or (i+j == n-1+m//2):
print('*', end="" "")

# condition for printing GFG
elif i == n//2-1:

if j == m//2-1 or j == m//2+1:
print('G', end="" "")
elif j == m//2:
print('F', end="" "")
else:
print(' ', end="" "")

# condition for printing spaces
else:
print(' ', end="" "")

print()","""""""

import random

def heart_pattern(n):
    """"""
    This function prints the heart pattern of the given number n.
    """"""
    for i in range(n):
        print(""*"", end="""")
    print()

def main():
    """"""
    This function prints the heart pattern of the given number n.
    """"""
    n = int(input(""Enter the number of rows: ""))
    heart_pattern(n)

if __name__ == ""__main__"":
    main"
2355,How to open two files together in Python,"# opening both the files in reading modes
with open(""file1.txt"") as f1, open(""file2.txt"") as f2:

# reading f1 contents
line1 = f1.readline()

# reading f2 contents
line2 = f2.readline()

# printing contents of f1 followed by f2
print(line1, line2)","1. Open the first file
2. Open the second file
3. Read the contents of both files
4. Write the contents of the file to the second file
5. Close both files

""""""

# 1. Open the first file
f1 = open(""file1.txt"", ""r"")

# 2. Open the second file
f2 = open(""file2.txt"", ""r"")

# 3. Read the contents of both files
print(f1.read())
print(f2.read())

#"
2356,Access the elements of a Series in Pandas in Python,"# importing pandas module
import pandas as pd

# making data frame
df = pd.read_csv(""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv"")

ser = pd.Series(df['Name'])
ser.head(10)
# or simply df['Name'].head(10)","import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'col1': [1, 2, 3, 4], 'col2': [5, 6, 7, 8]})

# Create a Series
s = pd.Series([1, 2, 3, 4])

# Access the elements of a Series in Python
print(s[0])
print(s[1])
print(s[2])
print(s[3])

# Access the elements of"
2357,Write a Python program to Numpy matrix.min(),"# import the important module in python
import numpy as np

# make matrix with numpy
gfg = np.matrix('[64, 1; 12, 3]')

# applying matrix.min() method
geeks = gfg.min()

print(geeks)","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(A.min())

""""""

# Solution

import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(A.min())

""""""

# Solution

import numpy as np

A = np.array([[1"
2358,Write a Python Library for Linked List,"# importing module
import collections


# initialising a deque() of arbitary length
linked_lst = collections.deque()


# filling deque() with elements
linked_lst.append('first')
linked_lst.append('second')
linked_lst.append('third')


print(""elements in the linked_list:"")
print(linked_lst)


# adding element at an arbitary position
linked_lst.insert(1, 'fourth')


print(""elements in the linked_list:"")
print(linked_lst)


# deleting the last element
linked_lst.pop()


print(""elements in the linked_list:"")
print(linked_lst)


# removing a specific element
linked_lst.remove('fourth')


print(""elements in the linked_list:"")
print(linked_lst)","def solution(head):
    # Write your code here
    if head is None:
        return None
    
    slow = head
    fast = head
    
    while fast.next is not None and fast.next.next is not None:
        slow = slow.next
        fast = fast.next.next
    
    slow.next = None
    
    return slow

# This is the class of the input linked list.
# class ListNode:
#     def __init__(self, x):
#"
2359,Creating a Pandas Series from Lists in Python,"# import pandas as pd
import pandas as pd

# create Pandas Series with default index values
# default index ranges is from 0 to len(list) - 1
x = pd.Series(['Geeks', 'for', 'Geeks'])

# print the Series
print(x)","solution = [
    ['a', 'b', 'c'],
    ['d', 'e', 'f'],
    ['g', 'h', 'i']
]

solution = pd.Series(solution)

print(solution)

""""""

# Solution

solution = [
    ['a', 'b', 'c'],
    ['d', 'e', 'f'],
    ['g', 'h', 'i']
]

solution = pd."
2360,Write a Python program to All substrings Frequency in String,"# Python3 code to demonstrate working of
# All substrings Frequency in String
# Using loop + list comprehension

# initializing string
test_str = ""abababa""

# printing original string
print(""The original string is : "" + str(test_str))

# list comprehension to extract substrings
temp = [test_str[idx: j] for idx in range(len(test_str))
for j in range(idx + 1, len(test_str) + 1)]

# loop to extract final result of frequencies
res = {}
for idx in temp:
if idx not in res.keys():
res[idx] = 1
else:
res[idx] += 1

# printing result
print(""Extracted frequency dictionary : "" + str(res))","def all_substrings(string):
    substrings = []
    for i in range(len(string)):
        for j in range(i+1, len(string)):
            substrings.append(string[i:j])
    return substrings

print(all_substrings(""abcdefghijklmnopqrstuvwxyz""))

""""""

def all_substrings(string):
    substrings = []
    for i in range(len(string)):"
2361,Write a Python program to Join Tuples if similar initial element,"# Python3 code to demonstrate working of
# Join Tuples if similar initial element
# Using loop

# initializing list
test_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)]

# printing original list
print(""The original list is : "" + str(test_list))

# Join Tuples if similar initial element
# Using loop
res = []
for sub in test_list:
if res and res[-1][0] == sub[0]:
res[-1].extend(sub[1:])
else:
res.append([ele for ele in sub])
res = list(map(tuple, res))

# printing result
print(""The extracted elements : "" + str(res))","def join_tuples(tup1, tup2):
    return tup1 + tup2

print(join_tuples(('a', 'b'), ('c', 'd')))

""""""

def join_tuples(tup1, tup2):
    return tup1 + tup2

print(join_tuples(('a', 'b'), ('c', 'd')))"
2362,Write a Python Set | Pairs of complete strings in two sets,"# Function to find pairs of complete strings
# in two sets of strings

def completePair(set1,set2):

# consider all pairs of string from
# set1 and set2
count = 0
for str1 in set1:
for str2 in set2:
result = str1 + str2

# push all alphabets of concatenated
# string into temporary set
tmpSet = set([ch for ch in result if (ord(ch)>=ord('a') and ord(ch)<=ord('z'))])
if len(tmpSet)==26:
count = count + 1
print (count)

# Driver program
if __name__ == ""__main__"":
set1 = ['abcdefgh', 'geeksforgeeks','lmnopqrst', 'abc']
set2 = ['ijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz','defghijklmnopqrstuvwxyz']
completePair(set1,set2)","def solution(p):
    # Write your code here
    p = set(p)
    return len(p)

def solution(p):
    # Write your code here
    p = set(p)
    return len(p)

def solution(p):
    # Write your code here
    p = set(p)
    return len(p)

def solution(p):
    # Write your code here
    p = set(p)
    return len(p)"
2363,Write a Python Selenium  Find Button by text,"# Import Library
from selenium import webdriver
import time

# set webdriver path here it may vary
# Its the location where you have downloaded the ChromeDriver
driver = webdriver.Chrome(executable_path=r""C:\\chromedriver.exe"")

# Get the target URL
driver.get('https://html.com/tags/button/')

# Wait for 5 seconds to load the webpage completely
time.sleep(5)

# Find the button using text
driver.find_element_by_xpath('//button[normalize-space()=""Click me!""]').click()

time.sleep(5)

# Close the driver
driver.close()","import time
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

driver = webdriver.Chrome(executable_path=""C:\\Users\\DELL\\Downloads\\chromedriver_win32\\chromedriver.exe"")
driver.get(""https://rahulshettyacademy.com/angularpractice/"")

# Find the Find Button
find_button = driver.find_element_by_id(""autocomplete"")

# Enter the text
find"
2364,Check if element exists in list in Python,"# Python code to demonstrate
# checking of element existence
# using loops and in


# Initializing list
test_list = [ 1, 6, 3, 5, 3, 4 ]


print(""Checking if 4 exists in list ( using loop ) : "")


# Checking if 4 exists in list
# using loop
for i in test_list:
if(i == 4) :
print (""Element Exists"")


print(""Checking if 4 exists in list ( using in ) : "")


# Checking if 4 exists in list
# using in
if (4 in test_list):
print (""Element Exists"")","def solution(arr):
    for i in range(len(arr)):
        if arr[i] in arr:
            return arr.index(arr[i])
    return -1

#Provide different values for arr and test your program
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(arr))

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(arr"
2365,Box Blur Algorithm  With Python implementation,"def square_matrix(square):
"""""" This function will calculate the value x
(i.e. blurred pixel value) for each 3 * 3 blur image.
""""""
tot_sum = 0

# Calculate sum of all the pixels in 3 * 3 matrix
for i in range(3):
for j in range(3):
tot_sum += square[i][j]

return tot_sum // 9 # return the average of the sum of pixels

def boxBlur(image):
""""""
This function will calculate the blurred
image for given n * n image.
""""""
square = [] # This will store the 3 * 3 matrix
# which will be used to find its blurred pixel

square_row = [] # This will store one row of a 3 * 3 matrix and
# will be appended in square

blur_row = [] # Here we will store the resulting blurred
# pixels possible in one row
# and will append this in the blur_img

blur_img = [] # This is the resulting blurred image

# number of rows in the given image
n_rows = len(image)

# number of columns in the given image
n_col = len(image[0])

# rp is row pointer and cp is column pointer
rp, cp = 0, 0

# This while loop will be used to
# calculate all the blurred pixel in the first row
while rp <= n_rows - 3:
while cp <= n_col-3:

for i in range(rp, rp + 3):

for j in range(cp, cp + 3):

# append all the pixels in a row of 3 * 3 matrix
square_row.append(image[i][j])

# append the row in the square i.e. 3 * 3 matrix
square.append(square_row)
square_row = []

# calculate the blurred pixel for given 3 * 3 matrix
# i.e. square and append it in blur_row
blur_row.append(square_matrix(square))
square = []

# increase the column pointer
cp = cp + 1

# append the blur_row in blur_image
blur_img.append(blur_row)
blur_row = []
rp = rp + 1 # increase row pointer
cp = 0 # start column pointer from 0 again

# Return the resulting pixel matrix
return blur_img

# Driver code
image = [[7, 4, 0, 1],
[5, 6, 2, 2],
[6, 10, 7, 8],
[1, 4, 2, 0]]

print(boxBlur(image))","def box_blur(image):
    # Your code here
    pass

""""""

import cv2
import numpy as np

# Read image
img = cv2.imread('../Photos/cat.jpg')
cv2.imshow('Cat', img)

# Convert image to grayscale
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
cv2.imshow('Gray', gray)

# Blur the image
bl"
2366,How to get element-wise true division of an array using Numpy in Python,"# import library
import numpy as np

# create 1d-array
x = np.arange(5)

print(""Original array:"",
x)

# apply true division
# on each array element
rslt = np.true_divide(x, 4)

print(""After the element-wise division:"",
rslt)","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([6, 7, 8, 9, 10])

c = a / b
print(c)

""""""

# Solution

import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([6, 7, 8, 9, 10])

c = a / b
print(c"
2367,Evaluate Einsteins summation convention of two multidimensional NumPy arrays in Python,"# Importing library
import numpy as np

# Creating two 2X2 matrix
matrix1 = np.array([[1, 2], [0, 2]])
matrix2 = np.array([[0, 1], [3, 4]])

print(""Original matrix:"")
print(matrix1)
print(matrix2)

# Output
result = np.einsum(""mk,kn"", matrix1, matrix2)

print(""Einsteins summation convention of the two matrix:"")
print(result)",">>> import numpy as np
>>> from numpy import array
>>> from numpy import arange
>>> from numpy import asarray
>>> from numpy import asmatrix
>>> from numpy import asmatrix
>>> from numpy import asarray
>>> from numpy import asmatrix
>>> from numpy import asmatrix
>>> from numpy import asarray
>>> from numpy import asmatrix
>>> from numpy import asmatrix
>>> from numpy import asarray"
2368,numpy.searchsorted() in Python,"# Python program explaining
# searchsorted() function

import numpy as geek

# input array
in_arr = [2, 3, 4, 5, 6]
print (""Input array : "", in_arr)

# the number which we want to insert
num = 4
print(""The number which we want to insert : "", num)

out_ind = geek.searchsorted(in_arr, num)
print (""Output indices to maintain sorted array : "", out_ind)","import numpy as np

def searchsorted(a, v):
    """"""
    Find the indices where element v should be inserted in a sorted array.

    Parameters
    ----------
    a : ndarray
        Input array.
    v : float
        Value to insert into a.

    Returns
    -------
    indices : ndarray of ints
        Indices of elements to insert.

    See Also
    --------
    searchsorted_left

    """"""
    ind = (a == v).non"
2369,Write a Python program to Merging two Dictionaries,"# Python code to merge dict using update() method
def Merge(dict1, dict2):
return(dict2.update(dict1))

# Driver code
dict1 = {'a': 10, 'b': 8}
dict2 = {'d': 6, 'c': 4}


# This return None
print(Merge(dict1, dict2))


# changes made in dict2
print(dict2)","def merge_dict(dict1, dict2):
    dict1.update(dict2)
    return dict1

# Take two dictionaries as input and print the result
dict1 = {'a': 1, 'b': 2, 'c': 3}
dict2 = {'d': 4, 'e': 5, 'f': 6}
print(merge_dict(dict1, dict2))

# Take two dictionaries as input and print the result
dict1 = {'a': 1, '"
2370,Pretty print Linked List in Python,"class Node:
def __init__(self, val=None):
self.val = val
self.next = None


class LinkedList:
def __init__(self, head=None):
self.head = head

def __str__(self):

# defining a blank res variable
res = """"

# initializing ptr to head
ptr = self.head

# traversing and adding it to res
while ptr:
res += str(ptr.val) + "", ""
ptr = ptr.next

# removing trailing commas
res = res.strip("", "")

# chen checking if
# anything is present in res or not
if len(res):
return ""["" + res + ""]""
else:
return ""[]""


if __name__ == ""__main__"":

# defining linked list
ll = LinkedList()

# defining nodes
node1 = Node(10)
node2 = Node(15)
node3 = Node(20)

# connecting the nodes
ll.head = node1
node1.next = node2
node2.next = node3

# when print is called, by default
#it calls the __str__ method
print(ll)","# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def display(self, head):
        current = head
        while current:
            print(current.val, end=' ')
            current = current.next

    def insert(self, head, data):
        if head is None:
            head = ListNode(data)
            return"
2371,numpy.var() in Python,"# Python Program illustrating
# numpy.var() method
import numpy as np

# 1D array
arr = [20, 2, 7, 1, 34]

print(""arr : "", arr)
print(""var of arr : "", np.var(arr))

print(""\nvar of arr : "", np.var(arr, dtype = np.float32))
print(""\nvar of arr : "", np.var(arr, dtype = np.float64))","import numpy as np

def var(x):
    return np.var(x)

def mean(x):
    return np.mean(x)

def std(x):
    return np.std(x)

def test_var():
    assert var([1, 2, 3]) == 3
    assert var([1, 2, 3, 4]) == 4
    assert var([1, 2, 3, 4, 5]) == 5
    assert var([1, 2, 3, 4, 5, 6"
2372,How to add time onto a DateTime object in Python,"# Python3 code to illustrate the addition
# of time onto the datetime object

# Importing datetime
import datetime

# Initializing a date and time
date_and_time = datetime.datetime(2021, 8, 22, 11, 2, 5)

print(""Original time:"")
print(date_and_time)

# Calling the timedelta() function
time_change = datetime.timedelta(minutes=75)
new_time = date_and_time + time_change

# Printing the new datetime object
print(""changed time:"")
print(new_time)","import datetime

def add_time(start, duration):
    """"""
    :type start: datetime.datetime
    :type duration: datetime.timedelta
    :rtype: datetime.datetime
    """"""
    start_time = start.strftime(""%H:%M"")
    end_time = start + duration
    return end_time

# driver code
start = datetime.datetime.now()
duration = datetime.timedelta(hours=1, minutes"
2373,Convert JSON to CSV in Python,"# Python program to convert
# JSON file to CSV




import json
import csv




# Opening JSON file and loading the data
# into the variable data
with open('data.json') as json_file:
data = json.load(json_file)


employee_data = data['emp_details']


# now we will open a file for writing
data_file = open('data_file.csv', 'w')


# create the csv writer object
csv_writer = csv.writer(data_file)


# Counter variable used for writing
# headers to the CSV file
count = 0


for emp in employee_data:
if count == 0:


# Writing headers of CSV file
header = emp.keys()
csv_writer.writerow(header)
count += 1


# Writing data of CSV file
csv_writer.writerow(emp.values())


data_file.close()","import json
import csv

with open('solution.json') as f:
    data = json.load(f)

with open('solution.csv', 'w') as f:
    csv_writer = csv.writer(f)
    csv_writer.writerow(['name', 'age', 'gender'])
    for person in data:
        csv_writer.writerow([person['name'], person['age'], person['gender']])

""""""

import json
import csv"
2374,Extract IP address from file using Python,"# importing the module
import re


# opening and reading the file
with open('C:/Users/user/Desktop/New Text Document.txt') as fh:
fstring = fh.readlines()


# declaring the regex pattern for IP addresses
pattern = re.compile(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})')


# initializing the list object
lst=[]


# extracting the IP addresses
for line in fstring:
lst.append(pattern.search(line)[0])


# displaying the extracted IP addresses
print(lst)","def extract_ip_address(filename):
    with open(filename) as f:
        for line in f:
            if line.startswith('X-DNS:'):
                return line.split(':')[1].strip()

print(extract_ip_address('/etc/hosts'))

""""""

# Solution:

def extract_ip_address(filename):
    with open(filename) as f:
        for line in f:
            if line.startswith('X-"
2375,Write a Python program to Sort String by Custom Integer Substrings,"# Python3 code to demonstrate working of
# Sort String by Custom Substrings
# Using sorted() + zip() + lambda + regex()
import re


# initializing list
test_list = [""Good at 4"", ""Wake at 7"", ""Work till 6"", ""Sleep at 11""]


# printing original list
print(""The original list : "" + str(test_list))


# initializing substring list
subord_list = [""6"", ""7"", ""4"", ""11""]




# creating inverse mapping with index
temp_dict = {val: key for key, val in enumerate(subord_list)}


# custom sorting
temp_list = sorted([[ele, temp_dict[re.search(""(\d+)$"", ele).group()]] \
for ele in test_list], key = lambda x: x[1])
# compiling result
res = [ele for ele in list(zip(*temp_list))[0]]

# printing result
print(""The sorted list : "" + str(res))","def custom_integer_substrings(string):
    # your code goes here
    return string.count('0') + string.count('1')

# print(custom_integer_substrings('0123456789'))

# Write a Python program to sort a list of strings using the custom integer substring method.

# def custom_integer_substrings(string):
#     # your code goes here
#     return string.count('0') + string.count('1')

# print("
2376,numpy.var() in Python,"# Python Program illustrating
# numpy.var() method
import numpy as np

# 1D array
arr = [20, 2, 7, 1, 34]

print(""arr : "", arr)
print(""var of arr : "", np.var(arr))

print(""\nvar of arr : "", np.var(arr, dtype = np.float32))
print(""\nvar of arr : "", np.var(arr, dtype = np.float64))","import numpy as np

def var(x):
    return np.var(x)

def mean(x):
    return np.mean(x)

def std(x):
    return np.std(x)

def test_var():
    assert var([1, 2, 3]) == 3
    assert var([1, 2, 3, 4]) == 4
    assert var([1, 2, 3, 4, 5]) == 5
    assert var([1, 2, 3, 4, 5, 6"
2377,numpy.loadtxt() in Python,"# Python program explaining
# loadtxt() function
import numpy as geek

# StringIO behaves like a file object
from io import StringIO

c = StringIO(""0 1 2 \n3 4 5"")
d = geek.loadtxt(c)

print(d)","import numpy as np

# Load the data
X = np.loadtxt('data-01-X.txt', delimiter=',')
y = np.loadtxt('data-01-y.txt', delimiter=',')

# Create a linear regression object
regr = linear_model.LinearRegression()

# Train the model using the training sets
regr.fit(X, y)

# Make predictions using the testing set
yhat = regr.predict(X)

# Calculate"
2378,Retweet Tweet using Selenium in Python,"from selenium import webdriver
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support.ui import WebDriverWait
import time
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import ElementClickInterceptedException
from selenium.common.exceptions import StaleElementReferenceException
from selenium.webdriver.common.keys import Keys
from selenium.webdriver import ActionChains
import getpass","import selenium
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.chrome.options import Options
import time

# Enter your credentials here
username = ""your_username"""
2379,Write a Python lambda,"# Python program to demonstrate
# lambda functions


string ='GeeksforGeeks'

# lambda returns a function object
print(lambda string : string)","def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*"
2380,Write a Python program to Replace String by Kth Dictionary value,"# Python3 code to demonstrate working of
# Replace String by Kth Dictionary value
# Using list comprehension

# initializing list
test_list = [""Gfg"", ""is"", ""Best""]

# printing original list
print(""The original list : "" + str(test_list))

# initializing subs. Dictionary
subs_dict = {
""Gfg"" : [5, 6, 7],
""is"" : [7, 4, 2],
}

# initializing K
K = 2

# using list comprehension to solve
# problem using one liner
res = [ele if ele not in subs_dict else subs_dict[ele][K]
for ele in test_list]

# printing result
print(""The list after substitution : "" + str(res))","def replace_string(string, k):
    d = {}
    for i in string:
        d[i] = k
    return d

print(replace_string(""python"", 2))

""""""

def replace_string(string, k):
    d = {}
    for i in string:
        d[i] = k
    return d

print(replace_string(""python"", 2))

""""""

def replace_string(string, k):
    d = {}"
2381,Lambda and filter in Python Examples,"# Python Program to find numbers divisible
# by thirteen from a list using anonymous
# function

# Take a list of numbers.
my_list = [12, 65, 54, 39, 102, 339, 221, 50, 70, ]

# use anonymous function to filter and comparing
# if divisible or not
result = list(filter(lambda x: (x % 13 == 0), my_list))

# printing the result
print(result)","def solution(L, A):
    # Your solution goes here
    return [A[i] for i in range(len(A)) if A[i] not in L]

""""""

def solution(L, A):
    # Your solution goes here
    return [A[i] for i in range(len(A)) if A[i] not in L]

""""""

def solution(L, A):
    # Your solution goes here
    return [A[i] for i in range(len(A"
2382,Get n-largest values from a particular column in Pandas DataFrame in Python,"# importing pandas module
import pandas as pd

# making data frame
df = pd.read_csv(""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv"")

df.head(10)","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution"
2383,Write a Python program to Replace Different characters in String at Once,"# Python3 code to demonstrate working of
# Replace Different characters in String at Once
# using join() + generator expression


# initializing string
test_str = 'geeksforgeeks is best'


# printing original String
print(""The original string is : "" + str(test_str))


# initializing mapping dictionary
map_dict = {'e':'1', 'b':'6', 'i':'4'}


# generator expression to construct vals
# join to get string
res = ''.join(idx if idx not in map_dict else map_dict[idx] for idx in test_str)


# printing result
print(""The converted string : "" + str(res))","def replace_different_char(string):
    # your code goes here
    return string.replace('a', 'b')

# read the string
s = input()

# call the function
result = replace_different_char(s)

# print the result
print(result)

'''
Sample Input

abcd

Sample Output

abcd
'''"
2384,Write a Python program to Replace all Characters of a List Except the given character,"# Python3 code to demonstrate working of
# Replace all Characters Except K
# Using list comprehension and conditional expressions

# initializing lists
test_list = ['G', 'F', 'G', 'I', 'S', 'B', 'E', 'S', 'T']

# printing original list
print(""The original list : "" + str(test_list))

# initializing repl_chr
repl_chr = '$'

# initializing retain chararter
ret_chr = 'G'

# list comprehension to remake list after replacement
res = [ele if ele == ret_chr else repl_chr for ele in test_list]

# printing result
print(""List after replacement : "" + str(res))","def solution(str, char):
    return str.replace(char, """")

print(solution(""abcdefg"", ""e""))

""""""

def solution(str, char):
    return str.replace(char, """")

print(solution(""abcdefg"", ""e""))

""""""

def solution(str, char):
    return str.replace(char, """")

print(solution(""abcdefg"", ""e""))

""""""

def solution"
2385,Write a Python program to Group Similar items to Dictionary Values List,"# Python3 code to demonstrate working of
# Group Similar items to Dictionary Values List
# Using defaultdict + loop
from collections import defaultdict

# initializing list
test_list = [4, 6, 6, 4, 2, 2, 4, 4, 8, 5, 8]

# printing original list
print(""The original list : "" + str(test_list))

# using defaultdict for default list
res = defaultdict(list)
for ele in test_list:

# appending Similar values
res[ele].append(ele)

# printing result
print(""Similar grouped dictionary : "" + str(dict(res)))","def group_similar(d, v):
    return sorted(d.items(), key=lambda x: x[1], reverse=True)

d = {'a': 1, 'b': 2, 'c': 3}
v = ['a', 'b', 'c']
print(group_similar(d, v))

""""""

# Solution:

def group_similar(d, v):
    return sorted(d.items(), key=lambda x: x[1], reverse=True)"
2386,Write a Python program to Extract values of Particular Key in Nested Values,"# Python3 code to demonstrate working of
# Extract values of Particular Key in Nested Values
# Using list comprehension

# initializing dictionary
test_dict = {'Gfg' : {""a"" : 7, ""b"" : 9, ""c"" : 12},
'is' : {""a"" : 15, ""b"" : 19, ""c"" : 20},
'best' :{""a"" : 5, ""b"" : 10, ""c"" : 2}}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# initializing key
temp = ""c""

# using item() to extract key value pair as whole
res = [val[temp] for key, val in test_dict.items() if temp in val]

# printing result
print(""The extracted values : "" + str(res))","def extract_values(dictionary, key):
    for key, value in dictionary.items():
        if key == key:
            print(value)

dictionary = {
    ""a"": 1,
    ""b"": 2,
    ""c"": 3,
    ""d"": 4,
    ""e"": 5,
    ""f"": 6,
    ""g"": 7,
    ""h"": 8,
    ""i"": 9,
    ""j"": 10,
    """
2387,Pandas | Basic of Time Series Manipulation in Python,"import pandas as pd
from datetime import datetime
import numpy as np


range_date = pd.date_range(start ='1/1/2019', end ='1/08/2019',
freq ='Min')
print(range_date)","import pandas as pd
import numpy as np

# Create a Pandas DataFrame
df = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})

# Create a Pandas Series
s = pd.Series([1, 2, 3, 4, 5])

# Create a Pandas DataFrame with a Series
df2 = pd.DataFrame({'x': [1, 2, 3,"
2388,Write a Python program to print all even numbers in a range,"# Python program to print Even Numbers in given range

start, end = 4, 19

# iterating each number in list
for num in range(start, end + 1):

# checking condition
if num % 2 == 0:
print(num, end = "" "")","def even_numbers(start, end):
    for i in range(start, end + 1):
        if i % 2 == 0:
            print(i)

if __name__ == '__main__':
    start = int(input(""Enter the start number: ""))
    end = int(input(""Enter the end number: ""))
    even_numbers(start, end)

""""""

def even_numbers(start, end):
    for i in range(start, end"
2389,numpy string operations | swapcase() function in Python,"# Python Program explaining
# numpy.char.swapcase() function

import numpy as geek


in_arr = geek.array(['P4Q R', '4q Rp', 'Q Rp4', 'rp4q'])
print (""input array : "", in_arr)

out_arr = geek.char.swapcase(in_arr)
print (""output swapcasecased array :"", out_arr)","solution = ""Hello World""
print(solution.swapcase())

""""""

# Solution:

def swapcase(s):
    return s.swapcase()

print(swapcase(""Hello World""))"
2390,Write a Python program to find tuples which have all elements divisible by K from a list of tuples,"# Python3 code to demonstrate working of
# K Multiple Elements Tuples
# Using list comprehension + all()

# initializing list
test_list = [(6, 24, 12), (7, 9, 6), (12, 18, 21)]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing K
K = 6

# all() used to filter elements
res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]

# printing result
print(""K Multiple elements tuples : "" + str(res))","def solution(a, k):
    answer = []
    for i in a:
        if i[0] % k == 0:
            answer.append(i)
    return answer

print(solution([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 3))

""""""

def solution(a, k):
    answer = []
    for i in a:
        if i"
2391,Write a Python program to Convert Tuple to Tuple Pair,"# Python3 code to demonstrate working of
# Convert Tuple to Tuple Pair
# Using product() + next()
from itertools import product

# initializing tuple
test_tuple = ('G', 'F', 'G')

# printing original tuple
print(""The original tuple : "" + str(test_tuple))

# Convert Tuple to Tuple Pair
# Using product() + next()
test_tuple = iter(test_tuple)
res = list(product(next(test_tuple), test_tuple))

# printing result
print(""The paired records : "" + str(res))","def convert_tuple(tuple):
    return tuple[0], tuple[1]

print(convert_tuple((1, 2)))

""""""

def convert_tuple(tuple):
    return tuple[0], tuple[1]

print(convert_tuple((1, 2)))

""""""

def convert_tuple(tuple):
    return tuple[0], tuple[1]

print(convert_tuple((1, 2)))

"""""""
2392,Write a Python program to Remove Reduntant Substrings from Strings List,"# Python3 code to demonstrate working of
# Remove Reduntant Substrings from Strings List
# Using enumerate() + join() + sort()


# initializing list
test_list = [""Gfg"", ""Gfg is best"", ""Geeks"", ""Gfg is for Geeks""]


# printing original list
print(""The original list : "" + str(test_list))


# using loop to iterate for each string
test_list.sort(key = len)
res = []
for idx, val in enumerate(test_list):

# concatenating all next values and checking for existence
if val not in ', '.join(test_list[idx + 1:]):
res.append(val)


# printing result
print(""The filtered list : "" + str(res))","def remove_redundant_substrings(str1, str2):
    # Write your code here
    str1 = str1.replace(' ', '')
    str2 = str2.replace(' ', '')
    str1 = str1.replace(' ', '')
    str2 = str2.replace(' ', '')
    str1 = str1.replace(' ', '')
    str2 = str2.replace(' ', '')
    str1 = str1.replace(' ', ''"
2393,How to compute numerical negative value for all elements in a given NumPy array in Python,"# importing library
import numpy as np


# creating a array
x = np.array([-1, -2, -3,
1, 2, 3, 0])


print(""Printing the Original array:"",
x)


# converting array elements to
# its corresponding negative value
r1 = np.negative(x)


print(""Printing the negative value of the given array:"",
r1)","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Compute the negative value of all elements in a NumPy array
np.negative(a)

# Compute the negative value of all elements in a NumPy array
np.negative(a, out=a)

# Compute the negative value of all elements in a NumPy array
np.negative(a, out=a, where"
2394,Convert binary to string using Python,"# Python3 code to demonstrate working of
# Converting binary to string
# Using BinarytoDecimal(binary)+chr()


# Defining BinarytoDecimal() function
def BinaryToDecimal(binary):

binary1 = binary
decimal, i, n = 0, 0, 0
while(binary != 0):
dec = binary % 10
decimal = decimal + dec * pow(2, i)
binary = binary//10
i += 1
return (decimal)

# Driver's code
# initializing binary data
bin_data ='10001111100101110010111010111110011'

# print binary data
print(""The binary value is:"", bin_data)

# initializing a empty string for
# storing the string data
str_data =' '

# slicing the input and converting it
# in decimal and then converting it in string
for i in range(0, len(bin_data), 7):

# slicing the bin_data from index range [0, 6]
# and storing it as integer in temp_data
temp_data = int(bin_data[i:i + 7])

# passing temp_data in BinarytoDecimal() function
# to get decimal value of corresponding temp_data
decimal_data = BinaryToDecimal(temp_data)

# Deccoding the decimal value returned by
# BinarytoDecimal() function, using chr()
# function which return the string corresponding
# character for given ASCII value, and store it
# in str_data
str_data = str_data + chr(decimal_data)

# printing the result
print(""The Binary value after string conversion is:"",
str_data)","def binary_to_string(binary):
    # Your code here
    return binary

# Test your code
binary = ""10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
2395,Working with large CSV files in Python,"# import required modules
import pandas as pd
import numpy as np
import time

# time taken to read data
s_time = time.time()
df = pd.read_csv(""gender_voice_dataset.csv"")
e_time = time.time()

print(""Read without chunks: "", (e_time-s_time), ""seconds"")

# data
df.sample(10)","# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

# Solution 11:

# Solution 12:

# Solution 13:

# Solution 14:

# Solution 15:

# Solution 16:

# Solution 17:

# Solution 18:

# Solution 19:

# Solution 20:

#"
2396,Write a Python program to find the Strongest Neighbour,"# define a function for finding
# the maximum for adjacent
# pairs in the array
def maximumAdjacent(arr1, n):

# array to store the max
# value between adjacent pairs
arr2 = []

# iterate from 1 to n - 1
for i in range(1, n):

# find max value between
# adjacent pairs gets
# stored in r
r = max(arr1[i], arr1[i-1])

# add element
arr2.append(r)

# printing the elements
for ele in arr2 :
print(ele,end="" "")

if __name__ == ""__main__"" :

# size of the input array
n = 6

# input array
arr1 = [1,2,2,3,4,5]

# function calling
maximumAdjacent(arr1, n)","""""""

import math
import sys

def find_strongest_neighbour(arr, n):
    # Write your code here
    max_val = -math.inf
    max_index = -1
    for i in range(n):
        if arr[i] > max_val:
            max_val = arr[i]
            max_index = i
    return max_index

if __name__ == '__main__':
    n = int(input())
    arr ="
2397,Write a Python Program for BogoSort or Permutation Sort,"# Python program for implementation of Bogo Sort
import random


# Sorts array a[0..n-1] using Bogo sort
def bogoSort(a):
n = len(a)
while (is_sorted(a)== False):
shuffle(a)


# To check if array is sorted or not
def is_sorted(a):
n = len(a)
for i in range(0, n-1):
if (a[i] > a[i+1] ):
return False
return True


# To generate permutation of the array
def shuffle(a):
n = len(a)
for i in range (0,n):
r = random.randint(0,n-1)
a[i], a[r] = a[r], a[i]


# Driver code to test above
a = [3, 2, 4, 1, 0, 5]
bogoSort(a)
print(""Sorted array :"")
for i in range(len(a)):
print (""%d"" %a[i]),","def bubble_sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr)-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

def bubble_sort_2(arr):
    for i in range(len(arr)):
        for j in range(len(arr)-1):
            if arr[j"
2398,Write a Python program to Convert Character Matrix to single String,"# Python3 code to demonstrate working of
# Convert Character Matrix to single String
# Using join() + list comprehension

# initializing list
test_list = [['g', 'f', 'g'], ['i', 's'], ['b', 'e', 's', 't']]

# printing original list
print(""The original list is : "" + str(test_list))

# Convert Character Matrix to single String
# Using join() + list comprehension
res = ''.join(ele for sub in test_list for ele in sub)

# printing result
print(""The String after join : "" + res)","def matrix_to_string(matrix):
    return ''.join(matrix)

def string_to_matrix(string):
    return [list(i) for i in string.split()]

def matrix_to_string(matrix):
    return ''.join([''.join(i) for i in matrix])

def string_to_matrix(string):
    return [list(i) for i in string.split()]

def matrix_to_string(matrix"
2399,Write a Python program to Flatten tuple of List to tuple,"# Python3 code to demonstrate working of
# Flatten tuple of List to tuple
# Using sum() + tuple()

# initializing tuple
test_tuple = ([5, 6], [6, 7, 8, 9], [3])

# printing original tuple
print(""The original tuple : "" + str(test_tuple))

# Flatten tuple of List to tuple
# Using sum() + tuple()
res = tuple(sum(test_tuple, []))

# printing result
print(""The flattened tuple : "" + str(res))","def flatten(tup):
    return tuple(tup)

print(flatten([1, 2, 3, 4, 5]))

""""""

def flatten(tup):
    return tuple(tup)

print(flatten([1, 2, 3, 4, 5]))"
2400,Program to reverse a linked list using Stack in Python,"// C/C++ program to reverse linked list
// using stack


#include <bits/stdc++.h>
using namespace std;


/* Link list node */
struct Node {
int data;
struct Node* next;
};


/* Given a reference (pointer to pointer) to
the head of a list and an int, push a new
node on the front of the list. */
void push(struct Node** head_ref, int new_data)
{
struct Node* new_node = new Node;


new_node->data = new_data;
new_node->next = (*head_ref);
(*head_ref) = new_node;
}


// Function to reverse linked list
Node *reverseList(Node* head)
{
// Stack to store elements of list
stack<Node *> stk;


// Push the elements of list to stack
Node* ptr = head;
while (ptr->next != NULL) {
stk.push(ptr);
ptr = ptr->next;
}


// Pop from stack and replace
// current nodes value'
head = ptr;
while (!stk.empty()) {
ptr->next = stk.top();


ptr = ptr->next;
stk.pop();
}

ptr->next = NULL;

return head;
}


// Function to print the Linked list
void printList(Node* head)
{
while (head) {
cout << head->data << "" "";
head = head->next;
}
}


// Driver Code
int main()
{
/* Start with the empty list */
struct Node* head = NULL;


/* Use push() to construct below list
1->2->3->4->5 */
push(&head, 5);
push(&head, 4);
push(&head, 3);
push(&head, 2);
push(&head, 1);


head = reverseList(head);


printList(head);


return 0;
}","# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if head is None:
            return head
        
        slow = head
        fast = head.next
        
        while fast is not None and fast.next is not None:
            slow = slow."
2401,Write a Python program to Unique Tuple Frequency (Order Irrespective),"# Python3 code to demonstrate working of
# Unique Tuple Frequency [ Order Irrespective ]
# Using tuple() + list comprehension + sorted() + len()

# initializing lists
test_list = [(3, 4), (1, 2), (4, 3), (5, 6)]

# printing original list
print(""The original list is : "" + str(test_list))

# Using tuple() + list comprehension + sorted() + len()
# Size computed after conversion to set
res = len(list(set(tuple(sorted(sub)) for sub in test_list)))

# printing result
print(""Unique tuples Frequency : "" + str(res))","def unique_tuple(tup):
    return tup[0]

def unique_tuple_freq(tup):
    return tup[1]

def unique_tuple_freq(tup):
    return tup[1]

def unique_tuple_freq(tup):
    return tup[1]

def unique_tuple_freq(tup):
    return tup[1]

def unique_tuple_fre"
2402,Write a Python program to find the character position of Kth word from a list of strings,"# Python3 code to demonstrate working of
# Word Index for K position in Strings List
# Using enumerate() + list comprehension

# initializing list
test_list = [""geekforgeeks"", ""is"", ""best"", ""for"", ""geeks""]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing K
K = 20

# enumerate to get indices of all inner and outer list
res = [ele[0] for sub in enumerate(test_list) for ele in enumerate(sub[1])]

# getting index of word
res = res[K]

# printing result
print(""Index of character at Kth position word : "" + str(res))","def find_word(word, word_list):
    for i in range(len(word_list)):
        if word_list[i] == word:
            return i
    return -1

word = ""python""
word_list = [""python"", ""java"", ""kotlin"", ""javascript""]

print(find_word(word, word_list))

""""""

# Solution 1

def find_word(word, word_list):
    for"
2403,Ways to remove ith character from string in Python,"# Python code to demonstrate
# method to remove i'th character
# Naive Method

# Initializing String
test_str = ""GeeksForGeeks""

# Printing original string
print (""The original string is : "" + test_str)

# Removing char at pos 3
# using loop
new_str = """"

for i in range(len(test_str)):
if i != 2:
new_str = new_str + test_str[i]

# Printing string after removal
print (""The string after removal of i'th character : "" + new_str)","def remove_ith_char(string, i):
    return string[:i] + string[i+1:]

print(remove_ith_char(""abcdefghijklmnopqrstuvwxyz"", 2))

""""""

def remove_ith_char(string, i):
    return string[:i] + string[i+1:]

print(remove_ith_char(""abcdefghijklmnopqrstuvwxyz"", 2))"
2404,Ways to sort list of dictionaries by values in Write a Python program to Using lambda function,"# Python code demonstrate the working of
# sorted() with lambda


# Initializing list of dictionaries
lis = [{ ""name"" : ""Nandini"", ""age"" : 20},
{ ""name"" : ""Manjeet"", ""age"" : 20 },
{ ""name"" : ""Nikhil"" , ""age"" : 19 }]


# using sorted and lambda to print list sorted
# by age
print ""The list printed sorting by age: ""
print sorted(lis, key = lambda i: i['age'])


print (""\r"")


# using sorted and lambda to print list sorted
# by both age and name. Notice that ""Manjeet""
# now comes before ""Nandini""
print ""The list printed sorting by age and name: ""
print sorted(lis, key = lambda i: (i['age'], i['name']))


print (""\r"")


# using sorted and lambda to print list sorted
# by age in descending order
print ""The list printed sorting by age in descending order: ""
print sorted(lis, key = lambda i: i['age'],reverse=True)","def sort_dict(d):
    return sorted(d.items(), key=lambda item: item[1])

d = {'a': 1, 'b': 2, 'c': 3}
print(sort_dict(d))

""""""

# Solution

def sort_dict(d):
    return sorted(d.items(), key=lambda item: item[1])

d = {'a': 1, 'b': 2, 'c': 3}"
2405,How to read numbers in CSV files in Python,"import csv

# creating a nested list of roll numbers,
# subjects and marks scored by each roll number
marks = [
[""RollNo"", ""Maths"", ""Python""],
[1000, 80, 85],
[2000, 85, 89],
[3000, 82, 90],
[4000, 83, 98],
[5000, 82, 90]
]

# using the open method with 'w' mode
# for creating a new csv file 'my_csv' with .csv extension
with open('my_csv.csv', 'w', newline = '') as file:
writer = csv.writer(file, quoting = csv.QUOTE_NONNUMERIC,
delimiter = ' ')
writer.writerows(marks)

# opening the 'my_csv' file to read its contents
with open('my_csv.csv', newline = '') as file:

reader = csv.reader(file, quoting = csv.QUOTE_NONNUMERIC,
delimiter = ' ')

# storing all the rows in an output list
output = []
for row in reader:
output.append(row[:])

for rows in output:
print(rows)","import csv

with open('numbers.csv', 'r') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        print(row)

""""""

import csv

with open('numbers.csv', 'r') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        print(row)

""""""

""""""

import csv

with open('numbers.csv', '"
2406,Find the roots of the polynomials using NumPy in Python,"# import numpy library
import numpy as np


# Enter the coefficients of the poly in the array
coeff = [1, 2, 1]
print(np.roots(coeff))","import numpy as np

def roots(p):
    # compute roots of polynomial
    roots = np.roots(p)
    # return roots
    return roots

# test
p = np.array([1, 2, 3, 4])
roots = roots(p)
print(roots)

# test
p = np.array([1, 2, 3, 4])
roots = roots(p)
print(roots)

# test
p = np.array([1"
2407,Write a Python program to find the sum of all items in a dictionary,"# Python3 Program to find sum of
# all items in a Dictionary


# Function to print sum
def returnSum(myDict):

list = []
for i in myDict:
list.append(myDict[i])
final = sum(list)

return final


# Driver Function
dict = {'a': 100, 'b':200, 'c':300}
print(""Sum :"", returnSum(dict))","def sum_dict(d):
    sum = 0
    for key in d:
        sum += d[key]
    return sum

d = {'a': 1, 'b': 2, 'c': 3}
print(sum_dict(d))

""""""

# Solution 1

def sum_dict(d):
    sum = 0
    for key in d:
        sum += d[key]
    return sum

d = {'a': 1, 'b':"
2408,Write a Python program to Extract words starting with K in String List,"# Python3 code to demonstrate working of
# Extract words starting with K in String List
# Using loop + split()

# initializing list
test_list = [""Gfg is best"", ""Gfg is for geeks"", ""I love G4G""]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing K
K = ""g""

res = []
for sub in test_list:
# splitting phrases
temp = sub.split()
for ele in temp:

# checking for matching elements
if ele[0].lower() == K.lower():
res.append(ele)

# printing result
print(""The filtered elements : "" + str(res))","def extract_words(s, k):
    words = []
    for word in s.split():
        if word[:k] == k:
            words.append(word)
    return words

print(extract_words(""The quick brown fox jumps over the lazy dog"", 3))

""""""

# Solution:

def extract_words(s, k):
    words = []
    for word in s.split():
        if word[:k] == k:
            words."
2409,Write a Python program to Find Mean of a List of Numpy Array,"# Python code to find mean of every numpy array in list

# Importing module
import numpy as np

# List Initialization
Input = [np.array([1, 2, 3]),
np.array([4, 5, 6]),
np.array([7, 8, 9])]

# Output list initialization
Output = []

# using np.mean()
for i in range(len(Input)):
Output.append(np.mean(Input[i]))

# Printing output
print(Output)","import numpy as np

arr = np.array([[1,2,3,4,5,6,7,8,9,10],
                [11,12,13,14,15,16,17,18,19,20],
                [21,22,23,24,25,26,27,28,29,30]])

print(""Mean of the array is:"",np.mean(arr))

""""""

import numpy as np

arr = np"
2410,Write a Python program to Numpy np.char.endswith() method,"# import numpy
import numpy as np

# using np.char.endswith() method
a = np.array(['geeks', 'for', 'geeks'])
gfg = np.char.endswith(a, 'ks')

print(gfg)","import numpy as np

solution = np.char.endswith('abc', 'def')

print(solution)

""""""

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

#"
2411,Write a Python program to Find common elements in three sorted arrays by dictionary intersection,"# Function to find common elements in three
# sorted arrays
from collections import Counter

def commonElement(ar1,ar2,ar3):
# first convert lists into dictionary
ar1 = Counter(ar1)
ar2 = Counter(ar2)
ar3 = Counter(ar3)

# perform intersection operation
resultDict = dict(ar1.items() & ar2.items() & ar3.items())
common = []

# iterate through resultant dictionary
# and collect common elements
for (key,val) in resultDict.items():
for i in range(0,val):
common.append(key)

print(common)

# Driver program
if __name__ == ""__main__"":
ar1 = [1, 5, 10, 20, 40, 80]
ar2 = [6, 7, 20, 80, 100]
ar3 = [3, 4, 15, 20, 30, 70, 80, 120]
commonElement(ar1,ar2,ar3)","def common_elements(arr1, arr2, arr3):
    arr1 = sorted(arr1)
    arr2 = sorted(arr2)
    arr3 = sorted(arr3)
    common = []
    for i in range(len(arr1)):
        for j in range(len(arr2)):
            for k in range(len(arr3)):
                if arr1[i] == arr2[j] and arr2[j] == arr3["
2412,Write a Python program to Remove duplicate lists in tuples (Preserving Order),"# Python3 code to demonstrate working of
# Remove duplicate lists in tuples(Preserving Order)
# Using list comprehension + set()


# Initializing tuple
test_tup = ([4, 7, 8], [1, 2, 3], [4, 7, 8], [9, 10, 11], [1, 2, 3])


# printing original tuple
print(""The original tuple is : "" + str(test_tup))


# Remove duplicate lists in tuples(Preserving Order)
# Using list comprehension + set()
temp = set()
res = [ele for ele in test_tup if not(tuple(ele) in temp or temp.add(tuple(ele)))]


# printing result
print(""The unique lists tuple is : "" + str(res))","def removeDuplicates(t):
    # Your code here
    return t

# Use a for loop to iterate over the list of tuples.
# Use the removeDuplicates function to remove duplicate elements from the list.
# Print the list of tuples after removing duplicate elements.

# Use a for loop to iterate over the list of tuples.
# Use the removeDuplicates function to remove duplicate elements from the list.
# Print the list of tuples after removing duplicate elements."
2413,Program to print the diamond shape in Python,"// C++ program to print diamond shape
// with 2n rows
#include <bits/stdc++.h>
using namespace std;


// Prints diamond pattern with 2n rows
void printDiamond(int n)
{
int space = n - 1;


// run loop (parent loop)
// till number of rows
for (int i = 0; i < n; i++)
{
// loop for initially space,
// before star printing
for (int j = 0;j < space; j++)
cout << "" "";


// Print i+1 stars
for (int j = 0; j <= i; j++)
cout << ""* "";


cout << endl;
space--;
}


// Repeat again in reverse order
space = 0;


// run loop (parent loop)
// till number of rows
for (int i = n; i > 0; i--)
{
// loop for initially space,
// before star printing
for (int j = 0; j < space; j++)
cout << "" "";


// Print i stars
for (int j = 0;j < i;j++)
cout << ""* "";


cout << endl;
space++;
}
}


// Driver code
int main()
{
printDiamond(5);
return 0;
}


// This is code is contributed
// by rathbhupendra","def print_diamond(n):
    for i in range(n):
        for j in range(n):
            print(i, end="" "")
        print()

n = int(input(""Enter the number of rows: ""))
print_diamond(n)

""""""

# Solution

def print_diamond(n):
    for i in range(n):
        for j in range(n):
            print(i, end="" "")
        print()

n = int(input"
2414,Write a Python program to Extract Indices of substring matches,"# Python3 code to demonstrate working of
# Extract Indices of substring matches
# Using loop + enumerate()

# initializing list
test_list = [""Gfg is good"", ""for Geeks"", ""I love Gfg"", ""Its useful""]

# initializing K
K = ""Gfg""

# printing original list
print(""The original list : "" + str(test_list))

# using loop to iterate through list
res = []
for idx, ele in enumerate(test_list):
if K in ele:
res.append(idx)

# printing result
print(""The indices list : "" + str(res))","def solution(s, p):
    # Write your code here
    # return [i for i, c in enumerate(s) if c == p[0]]
    return [i for i, c in enumerate(s) if c == p[0]]

# print(solution(""abcde"", ""e""))
# print(solution(""abcde"", ""b""))
# print(solution(""abcde"", ""d""))
# print(solution(""abcde"", ""c""))
# print("
2415,Write a Python program to Test if tuple is distinct,"# Python3 code to demonstrate working of
# Test if tuple is distinct
# Using loop

# initialize tuple
test_tup = (1, 4, 5, 6, 1, 4)

# printing original tuple
print(""The original tuple is : "" + str(test_tup))

# Test if tuple is distinct
# Using loop
res = True
temp = set()
for ele in test_tup:
if ele in temp:
res = False
break
temp.add(ele)

# printing result
print(""Is tuple distinct ? : "" + str(res))","def is_distinct(t):
    if len(t)!= len(set(t)):
        return False
    else:
        return True

print(is_distinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(is_distinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23"
2416,Write a Python program to Creating DataFrame from dict of narray/lists,"# Python code demonstrate creating
# DataFrame from dict narray / lists
# By default addresses.


import pandas as pd


# initialise data of lists.
data = {'Category':['Array', 'Stack', 'Queue'],
'Marks':[20, 21, 19]}


# Create DataFrame
df = pd.DataFrame(data)


# Print the output.
print(df )","import pandas as pd

data = {'Name': ['Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi"
2417,Create a list from rows in Pandas DataFrame | Set 2 in Python,"# importing pandas as pd
import pandas as pd

# Create the dataframe
df = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/11'],
'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],
'Cost':[10000, 5000, 15000, 2000]})

# Print the dataframe
print(df)","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pima-indians-diabetes.csv')

# Create a list from rows in Pandas DataFrame

# Set 2 in Python

# Create a list from rows in Pandas DataFrame

# Set 2 in Python

# Create a list from rows in Pandas DataFrame

# Set 2 in Python

# Create a list"
2418,Selenium  Search for text on page in Python,"# import webdriver
from selenium import webdriver

# create webdriver object
driver = webdriver.Chrome()

# URL of the website
url = ""https://www.geeksforgeeks.org/""

# Opening the URL
driver.get(url)

# Getting current URL source code
get_source = driver.page_source

# Text you want to search
search_text = ""Floor""

# print True if text is present else False
print(search_text in get_source)","import selenium
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

# Open the browser
browser = webdriver.Chrome()

# Open the website
browser.get('https://www.seleniumeasy.com/test/basic-first-form-demo.html')

# Find the input box
input_box = browser.find_element_by_id('sldNumber')

# Send the input value to the input box
input_box.send"
2419,Write a Python program to Reverse Row sort in Lists of List,"# Python3 code to demonstrate
# Reverse Row sort in Lists of List
# using loop

# initializing list
test_list = [[4, 1, 6], [7, 8], [4, 10, 8]]

# printing original list
print (""The original list is : "" + str(test_list))

# Reverse Row sort in Lists of List
# using loop
for ele in test_list:
ele.sort(reverse = True)

# printing result
print (""The reverse sorted Matrix is : "" + str(test_list))","def reverse_row(lst):
    for i in range(len(lst)):
        for j in range(len(lst) - i - 1):
            if lst[j][0] > lst[j + 1][0]:
                lst[j], lst[j + 1] = lst[j + 1], lst[j]
    return lst

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
2420,Print with your own font using Python !!,"# Python3 code to print input in your own font


name = ""GEEK""


# To take input from User
# name = input(""Enter your name: \n\n"")


length = len(name)
l = """"


for x in range(0, length):
c = name[x]
c = c.upper()

if (c == ""A""):
print(""..######..\n..#....#..\n..######.."", end = "" "")
print(""\n..#....#..\n..#....#..\n\n"")

elif (c == ""B""):
print(""..######..\n..#....#..\n..#####..."", end = "" "")
print(""\n..#....#..\n..######..\n\n"")

elif (c == ""C""):
print(""..######..\n..#.......\n..#......."", end = "" "")
print(""\n..#.......\n..######..\n\n"")

elif (c == ""D""):
print(""..#####...\n..#....#..\n..#....#.."", end = "" "")
print(""\n..#....#..\n..#####...\n\n"")

elif (c == ""E""):
print(""..######..\n..#.......\n..#####..."", end = "" "")
print(""\n..#.......\n..######..\n\n"")

elif (c == ""F""):
print(""..######..\n..#.......\n..#####..."", end = "" "")
print(""\n..#.......\n..#.......\n\n"")

elif (c == ""G""):
print(""..######..\n..#.......\n..#.####.."", end = "" "")
print(""\n..#....#..\n..#####...\n\n"")

elif (c == ""H""):
print(""..#....#..\n..#....#..\n..######.."", end = "" "")
print(""\n..#....#..\n..#....#..\n\n"")

elif (c == ""I""):
print(""..######..\n....##....\n....##...."", end = "" "")
print(""\n....##....\n..######..\n\n"")

elif (c == ""J""):
print(""..######..\n....##....\n....##...."", end = "" "")
print(""\n..#.##....\n..####....\n\n"")

elif (c == ""K""):
print(""..#...#...\n..#..#....\n..##......"", end = "" "")
print(""\n..#..#....\n..#...#...\n\n"")

elif (c == ""L""):
print(""..#.......\n..#.......\n..#......."", end = "" "")
print(""\n..#.......\n..######..\n\n"")

elif (c == ""M""):
print(""..#....#..\n..##..##..\n..#.##.#.."", end = "" "")
print(""\n..#....#..\n..#....#..\n\n"")

elif (c == ""N""):
print(""..#....#..\n..##...#..\n..#.#..#.."", end = "" "")
print(""\n..#..#.#..\n..#...##..\n\n"")

elif (c == ""O""):
print(""..######..\n..#....#..\n..#....#.."", end = "" "")
print(""\n..#....#..\n..######..\n\n"")

elif (c == ""P""):
print(""..######..\n..#....#..\n..######.."", end = "" "")
print(""\n..#.......\n..#.......\n\n"")

elif (c == ""Q""):
print(""..######..\n..#....#..\n..#.#..#.."", end = "" "")
print(""\n..#..#.#..\n..######..\n\n"")

elif (c == ""R""):
print(""..######..\n..#....#..\n..#.##..."", end = "" "")
print(""\n..#...#...\n..#....#..\n\n"")

elif (c == ""S""):
print(""..######..\n..#.......\n..######.."", end = "" "")
print(""\n.......#..\n..######..\n\n"")

elif (c == ""T""):
print(""..######..\n....##....\n....##...."", end = "" "")
print(""\n....##....\n....##....\n\n"")

elif (c == ""U""):
print(""..#....#..\n..#....#..\n..#....#.."", end = "" "")
print(""\n..#....#..\n..######..\n\n"")

elif (c == ""V""):
print(""..#....#..\n..#....#..\n..#....#.."", end = "" "")
print(""\n...#..#...\n....##....\n\n"")

elif (c == ""W""):
print(""..#....#..\n..#....#..\n..#.##.#.."", end = "" "")
print(""\n..##..##..\n..#....#..\n\n"")

elif (c == ""X""):
print(""..#....#..\n...#..#...\n....##...."", end = "" "")
print(""\n...#..#...\n..#....#..\n\n"")

elif (c == ""Y""):
print(""..#....#..\n...#..#...\n....##...."", end = "" "")
print(""\n....##....\n....##....\n\n"")

elif (c == ""Z""):
print(""..######..\n......#...\n.....#...."", end = "" "")
print(""\n....#.....\n..######..\n\n"")

elif (c == "" ""):
print(""..........\n..........\n.........."", end = "" "")
print(""\n..........\n\n"")

elif (c == "".""):
print(""----..----\n\n"")","def solution(n):
    if n == 1:
        return 1
    else:
        return n * solution(n-1)

print(solution(5))

""""""

def solution(n):
    if n == 1:
        return 1
    else:
        return n * solution(n-1)

print(solution(5))"
2421,Write a Python Program to Generate Random binary string,"# Python program for random
# binary string generation


import random


# Function to create the
# random binary string
def rand_key(p):

# Variable to store the
# string
key1 = """"

# Loop to find the string
# of desired length
for i in range(p):

# randint function to generate
# 0, 1 randomly and converting
# the result into str
temp = str(random.randint(0, 1))

# Concatenatin the random 0, 1
# to the final result
key1 += temp

return(key1)

# Driver Code
n = 7
str1 = rand_key(n)
print(""Desired length random binary string is: "", str1)","import random

def generate_random_binary_string(length):
    binary_string = ''
    for i in range(length):
        binary_string += str(random.randint(0,1))
    return binary_string

print(generate_random_binary_string(5))

""""""

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(s):
    # Write your code here"
2422,"Write a Python program to Count Uppercase, Lowercase, special character and numeric values using Regex","import re


string = ""ThisIsGeeksforGeeks !, 123""

# Creating separate lists using
# the re.findall() method.
uppercase_characters = re.findall(r""[A-Z]"", string)
lowercase_characters = re.findall(r""[a-z]"", string)
numerical_characters = re.findall(r""[0-9]"", string)
special_characters = re.findall(r""[, .!?]"", string)

print(""The no. of uppercase characters is"", len(uppercase_characters))
print(""The no. of lowercase characters is"", len(lowercase_characters))
print(""The no. of numerical characters is"", len(numerical_characters))
print(""The no. of special characters is"", len(special_characters))","import re

def count_upper(string):
    count = 0
    for i in string:
        if i.isupper():
            count += 1
    return count

def count_lower(string):
    count = 0
    for i in string:
        if i.islower():
            count += 1
    return count

def count_special(string):
    count = 0
    for i in string:
        if i.isdigit"
2423,Count the number of white spaces in a Sentence,"
str=input(""Enter the String:"")
count = 0
for i in range(len(str)):
  if str[i] == ' ':
    count+=1
print(""Number of white space in a string are "",count)","def count_spaces(sentence):
    count = 0
    for i in sentence:
        if i =='':
            count += 1
    return count

print(count_spaces(""This is a sentence""))

""""""

def count_spaces(sentence):
    count = 0
    for i in sentence:
        if i =='':
            count += 1
    return count

print(count_spaces(""This is a sentence""))

""""""

def count_sp"
2424,Find the nth term in the Fibonacci series using Recursion,"def NthFibonacciNumber(n):  if n==0:    return 0  elif(n==1):    return 1  else:    return NthFibonacciNumber(n-1)+NthFibonacciNumber(n-2)n=int(input(""Enter the N value:""))print(""Nth Fibonacci Number is:"",NthFibonacciNumber(n))","def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

print(fib(5))

""""""

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(n):
    if n == 0:
        return 0
    elif"
2425,Search a specified integer in an array,"
arr=[]
temp=0
pos=0
size = int(input(""Enter the size of the array: ""))
print(""Enter the Element of the array:"")
for i in range(0,size):
  num = int(input())
  arr.append(num)
print(""Enter the search element:"")
ele=int(input())
print(""Array elements are:"")
for i in range(0,size):
  print(arr[i],end="" "")
for i in range(0,size):
  if arr[i] == ele:
      temp = 1
if temp==1:
  print(""\nElement found...."")
else:
  print(""\nElement not found...."")","def search(arr, n, x):
    for i in range(n):
        if arr[i] == x:
            return i
    return -1

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = len(arr)
x = 10

print(search(arr, n, x))

""""""

def search(arr, n, x):
    for i in range(n):
        if arr[i] == x:
            return"
2426,Convert Lowercase to Uppercase using the inbuilt function,"
str=input(""Enter the String(Lower case):"")
print(""Upper case String is:"", str.upper())","def convert_lowercase_to_uppercase(s):
    return s.upper()

print(convert_lowercase_to_uppercase(""hello""))

""""""

# Solution:

def convert_lowercase_to_uppercase(s):
    return s.upper()

print(convert_lowercase_to_uppercase(""hello""))"
2427,"
Please write a program using generator to print the numbers which can be divisible by 5 and 7 between 0 and n in comma separated form while n is input by console.
","
def NumGenerator(n):
    for i in range(n+1):
        if i%5==0 and i%7==0:
            yield i

n=int(raw_input())
values = []
for i in NumGenerator(n):
    values.append(str(i))

print "","".join(values)


","def solution(n):
    for i in range(1, n+1):
        if i % 5 == 0 and i % 7 == 0:
            print(i, end="" "")

if __name__ == '__main__':
    n = int(input())
    solution(n)"
2428,Python Program to Search for an Element in the Linked List without using Recursion,"class Node:
    def __init__(self, data):
       self.data = data
       self.next = None

class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None

    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next

    def display(self):
        current = self.head
        while current is not None:
            print(current.data, end = ' ')
            current = current.next

    def find_index(self, key):
        current = self.head

        index = 0
        while current:
            if current.data == key:
                return index
            current = current.next
            index = index + 1

        return -1

a_llist = LinkedList()
for data in [4, -3, 1, 0, 9, 11]:
    a_llist.append(data)
print('The linked list: ', end = '')
a_llist.display()
print()

key = int(input('What data item would you like to search for? '))
index = a_llist.find_index(key)
if index == -1:
    print(str(key) + ' was not found.')
else:
    print(str(key) + ' is at index ' + str(index) + '.')","def search(head, element):
    if head is None:
        return False
    if head.data == element:
        return True
    if head.data > element:
        return search(head.next, element)
    return search(head.next, element)

# Driver Code
if __name__ == '__main__':
    head = Node(10)
    head.next = Node(20)
    head.next.next = Node(30)
    head."
2429,Find the minimum element in the matrix,"import sys
# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

#compute the minimum element of the given 2d array
min=sys.maxsize
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if matrix[i][j]<=min:
            min=matrix[i][j]

# Display the smallest element of the given matrix
print(""The Minimum element of the Given 2d array is: "",min)","def minimum(arr):
    min = arr[0][0]
    for i in range(1, len(arr)):
        for j in range(len(arr[i])):
            if arr[i][j] < min:
                min = arr[i][j]
    return min

print(minimum([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]))

""""""

def minimum(arr):
    min = arr[0]["
2430,Program to convert Octal To Hexadecimal,"
i=0
octal=int(input(""Enter Octal number:""))
Hex=['0']*50
decimal = 0
sem = 0
#Octal to decimal covert
while octal!=0:
  decimal=decimal+(octal%10)*pow(8,sem);
  sem+=1
  octal=octal// 10
#Decimal to Hexadecimal
while decimal!=0:
  rem=decimal%16
  #Convert Integer to char
  if rem<10:
    Hex[i]=chr(rem+48)#48 Ascii=0
    i+=1
  else:
    Hex[i]=chr(rem+55) #55 Ascii=7
    i+=1
  decimal//=16

print(""Hexadecimal number is:"")
for j in range(i-1,-1,-1):
  print(Hex[j],end="""")",">>> from octal_to_hexadecimal import octal_to_hexadecimal
>>> octal_to_hexadecimal(10)
'0b1010'
>>> octal_to_hexadecimal(11)
'0b1011'
>>> octal_to_hexadecimal(12)
'0b1012'
>>> octal_to_hexadecimal(13)
'0b1013'
>>> octal_to_hexadecimal(14"
2431,Program to find square root of a number,"
import math
num=int(input(""Enter the Number:""))
print(""Square root of "",num,"" is : "",math.sqrt(num))","def sqrt(x):
    if x == 0:
        return 0
    else:
        return x**0.5

print(sqrt(4))

""""""

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the'solve' function below.
def solve(a, b):
    if b == 0:
        return a
    else:
        return solve(a, b//2) + 1

if __name__ =="
2432,Find the power of a number using recursion,"def Power(num1,num2):  if num2==0:    return 1  return num1*Power(num1, num2-1)num1=int(input(""Enter the base value:""))num2=int(input(""Enter the power value:""))print(""Power of Number Using Recursion is:"",Power(num1,num2))","def power(x, n):
    if n == 0:
        return 1
    elif n % 2 == 0:
        return x * power(x, n // 2)
    else:
        return x * power(x, n - 1)

print(power(2, 3))

""""""

def power(x, n):
    if n == 0:
        return 1
    elif n % 2 == 0:
        return x * power(x, n // 2)
    else:"
2433,Convert a decimal number to hexadecimal using recursion,"str3=""""def DecimalToHexadecimal(n):  global str3  if(n!=0):    rem = n % 16    if (rem < 10):      str3 += (chr)(rem + 48) # 48 Ascii = 0    else:      str3 += (chr)(rem + 55) #55 Ascii = 7    DecimalToHexadecimal(n // 16)  return str3n=int(input(""Enter the Decimal Value:""))str=DecimalToHexadecimal(n)print(""Hexadecimal Value of Decimal number is:"",''.join(reversed(str)))","def hex_to_dec(num):
    if num == 0:
        return 0
    else:
        return num * 16 + hex_to_dec(num // 16)

def dec_to_hex(num):
    if num == 0:
        return 0
    else:
        return num * 16 + dec_to_hex(num // 16)

def main():
    num = int(input(""Enter a decimal number: ""))
    print(""Hexadecimal representation of"
2434,Python Program to Generate Gray Codes using Recursion,"def get_gray_codes(n):
    """"""Return n-bit Gray code in a list.""""""
    if n == 0:
        return ['']
    first_half = get_gray_codes(n - 1)
    second_half = first_half.copy()

    first_half = ['0' + code for code in first_half]
    second_half = ['1' + code for code in reversed(second_half)]

    return first_half + second_half


n = int(input('Enter the number of bits: '))
codes = get_gray_codes(n)
print('All {}-bit Gray Codes:'.format(n))
print(codes)","def generate_gray_code(n):
    if n == 0:
        return []
    else:
        return generate_gray_code(n-1) + [n]

def generate_gray_code_recursive(n):
    if n == 0:
        return []
    else:
        return generate_gray_code_recursive(n-1) + [n] + generate_gray_code_recursive(n-1)

def generate_gray_code_recursive_2("
2435,Write a program to print the pattern,"
print(""Enter the row and column size:"");
row_size=int(input())
for out in range(1,row_size+1):
  for i in range(0,row_size):
    print(out,end="""")
  print(""\r"")","def pattern(n):
    if n == 1:
        return '*'
    else:
        return pattern(n-1) + '*' + pattern(n-2)

print(pattern(3))

""""""

# Solution:

def pattern(n):
    if n == 1:
        return '*'
    else:
        return pattern(n-1) + '*' + pattern(n-2)

print(pattern(3))"
2436,Python Program to Remove the Characters of Odd Index Values in a String,"def modify(string):  
  final = """"   
  for i in range(len(string)):  
    if i % 2 == 0:  
      final = final + string[i]  
  return final
string=raw_input(""Enter string:"")
print(""Modified string is:"")
print(modify(string))","def remove_odd_index(string, index):
    return string[:index] + string[index+1:]

def main():
    string = input(""Enter String: "")
    index = int(input(""Enter Index: ""))
    print(remove_odd_index(string, index))

if __name__ == ""__main__"":
    main()

""""""

def remove_odd_index(string, index):
    return string[:index] + string[index+1"
2437,Python Program to Generate all the Divisors of an Integer,"
n=int(input(""Enter an integer:""))
print(""The divisors of the number are:"")
for i in range(1,n+1):
    if(n%i==0):
        print(i)","def divisors(n):
    divisors = []
    for i in range(1, n + 1):
        if n % i == 0:
            divisors.append(i)
    return divisors

print(divisors(12))

""""""

def divisors(n):
    divisors = []
    for i in range(1, n + 1):
        if n % i == 0:
            divisors.append(i)"
2438,Program to print series 0 2 6 12 20 30 42 ...N,"n=int(input(""Enter the range of number(Limit):""))i=1while i<=n:  print((i*i)-i,end="" "")  i+=1","def series(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return series(n-1) + series(n-2)

print(series(5))

""""""

# Solution

def series(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return series(n-1) + series(n-2)"
2439,Python Program to Reverse a String Using Recursion,"def reverse(string):
    if len(string) == 0:
        return string
    else:
        return reverse(string[1:]) + string[0]
a = str(input(""Enter the string to be reversed: ""))
print(reverse(a))","def reverse_string(string):
    if len(string) == 0:
        return """"
    else:
        return string[-1] + reverse_string(string[:-1])

print(reverse_string(""hello""))

""""""

# Solution 1

def reverse_string(string):
    if len(string) == 0:
        return """"
    else:
        return string[-1] + reverse_string(string[:-1])

print(reverse_string(""hello""))

#"
2440,Python Program To Find the Smallest and Largest Elements in the Binary Search Tree,"class BSTNode:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
        self.parent = None

    def insert(self, node):
        if self.key > node.key:
            if self.left is None:
                self.left = node
                node.parent = self
            else:
                self.left.insert(node)
        elif self.key < node.key:
            if self.right is None:
                self.right = node
                node.parent = self
            else:
                self.right.insert(node)

    def search(self, key):
        if self.key > key:
            if self.left is not None:
                return self.left.search(key)
            else:
                return None
        elif self.key < key:
            if self.right is not None:
                return self.right.search(key)
            else:
                return None
        return self


class BSTree:
    def __init__(self):
        self.root = None

    def add(self, key):
        new_node = BSTNode(key)
        if self.root is None:
            self.root = new_node
        else:
            self.root.insert(new_node)

    def search(self, key):
        if self.root is not None:
            return self.root.search(key)

    def get_smallest(self):
        if self.root is not None:
            current = self.root
            while current.left is not None:
                current = current.left
            return current.key

    def get_largest(self):
        if self.root is not None:
            current = self.root
            while current.right is not None:
                current = current.right
            return current.key


bstree = BSTree()

print('Menu (this assumes no duplicate keys)')
print('add <key>')
print('smallest')
print('largest')
print('quit')

while True:
    do = input('What would you like to do? ').split()

    operation = do[0].strip().lower()
    if operation == 'add':
        key = int(do[1])
        bstree.add(key)
    if operation == 'smallest':
        smallest = bstree.get_smallest()
        print('Smallest element: {}'.format(smallest))
    if operation == 'largest':
        largest = bstree.get_largest()
        print('Largest element: {}'.format(largest))
    elif operation == 'quit':
        break","def find_smallest(arr):
    smallest = arr[0]
    for i in range(len(arr)):
        if arr[i] < smallest:
            smallest = arr[i]
    return smallest

def find_largest(arr):
    largest = arr[0]
    for i in range(len(arr)):
        if arr[i] > largest:
            largest = arr[i]
    return largest

def find_smallest_"
2441,Python Program to Implement Comb Sort,"def comb_sort(alist):
    def swap(i, j):
        alist[i], alist[j] = alist[j], alist[i]

    gap = len(alist)
    shrink = 1.3

    no_swap = False
    while not no_swap:
        gap = int(gap/shrink)

        if gap < 1:
            gap = 1
            no_swap = True
        else:
            no_swap = False

        i = 0
        while i + gap < len(alist):
            if alist[i] > alist[i + gap]:
                swap(i, i + gap)
                no_swap = False
            i = i + 1


alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
comb_sort(alist)
print('Sorted list: ', end='')
print(alist)","def combSort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(combSort(arr))

""""""

def combSort(arr):
    n = len(arr)"
2442,Check whether a given matrix is an identity matrix or not,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

# check Diagonal elements are 1 and rest elements are 0
point=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        # check for diagonals element
        if i == j and matrix[i][j] != 1:
            point=1
            break
        #check for rest elements
        elif i!=j and matrix[i][j]!=0:
            point=1
            break

if point==1:
    print(""Given Matrix is not an identity matrix."")
else:
    print(""Given Matrix is an identity matrix."")","def is_identity(matrix):
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j]!= 0:
                return False
    return True

print(is_identity([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))
print(is_identity([[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
2443,"Program to print series 1,22,333,4444...n","n=int(input(""Enter the range of number(Limit):""))for out in range(n+1):  for i in range(out):    print(out,end="""")  print(end="" "")","def series(n):
    if n == 1:
        return 1
    else:
        return n * series(n-1)

print(series(5))

""""""

# Solution

def series(n):
    if n == 1:
        return 1
    else:
        return n * series(n-1)

print(series(5))"
2444,Multiply two numbers without using multiplication(*) operator,"
num1=int(input(""Enter the First numbers :""))
num2=int(input(""Enter the Second number:""))
sum=0
for i in range(1,num1+1):
  sum=sum+num2
print(""The multiplication of "",num1,"" and "",num2,"" is "",sum)
","def multiply(x, y):
    return x * y

print(multiply(2, 3))

""""""

# Solution 1

def multiply(x, y):
    return x * y

print(multiply(2, 3))

# Solution 2

def multiply(x, y):
    return x * y

print(multiply(2, 3))

# Solution 3

def multiply(x, y):
    return x * y

print(mult"
2445,Program to count the number of digits in an integer.,"

'''Write
a Python programto count the number of digits in an integer. or

 Write a programtocount the
number of digits in an integer using
Python '''

n=int(input(""Enter a number:""))
count=0
while n>0:
 n=int(n/10)
 count+=1
print(""The number of digits in the number is"", count)


","def count_digits(n):
    count = 0
    while n > 0:
        count += 1
        n = n // 10
    return count

print(count_digits(123))

""""""

# Solution 1

def count_digits(n):
    count = 0
    while n > 0:
        count += 1
        n = n // 10
    return count

print(count_digits(123))

# Solution 2

def count_digits("
2446,"Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the keys only.
:","Solution
def printDict():
	d=dict()
	for i in range(1,21):
		d[i]=i**2
	for k in d.keys():	
		print k
		

printDict()


","def solution(n):
    d = {}
    for i in range(1, 21):
        d[i] = i**2
    return d

print(solution(5))

# Output:
# {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81"
2447,"
Assuming that we have some email addresses in the ""username@companyname.com"" format, please write program to print the company name of a given email address. Both user names and company names are composed of letters only.
","import re
emailAddress = raw_input()
pat2 = ""(\w+)@(\w+)\.(com)""
r2 = re.match(pat2,emailAddress)
print r2.group(2)




","def solution(email):
    email = email.split('@')
    if email[1].find('.')!= -1:
        return email[1].split('.')[0]
    else:
        return email[0]

print(solution(""john.doe@company.com""))
print(solution(""john.doe2001@"
2448,Remove duplicate elements in an array ,"
arr=[]
size = int(input(""Enter the size of the array: ""))
print(""Enter the Element of the array:"")
for i in range(0,size):
  num = int(input())
  arr.append(num)
arr.sort()
j=0
#Remove duplicate element
for i in range(0, size-1):
  if arr[i] != arr[i + 1]:
    arr[j]=arr[i]
    j+=1
arr[j] = arr[size - 1]
j+=1
print(""After removing duplicate element array is"")
for i in range(0, j):
  print(arr[i],end="" "")","def removeDuplicates(arr):
    # Write your code here
    newArr = []
    for i in range(len(arr)):
        if arr[i] not in newArr:
            newArr.append(arr[i])
    return newArr

# Driver code
arr = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8"
2449,Python Program to Find the Binary Equivalent of a Number without Using Recursion,"n=int(input(""Enter a number: ""))
a=[]
while(n>0):
    dig=n%2
    a.append(dig)
    n=n//2
a.reverse()
print(""Binary Equivalent is: "")
for i in a:
    print(i,end="" "")","def binary_equivalent(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return binary_equivalent(n//2) + binary_equivalent(n//2 + 1)

n = int(input(""Enter the number to find the binary equivalent: ""))
print(binary_equivalent(n))

""""""

# Solution 1

def binary_equivalent(n):
    if n == 0:"
2450,"Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print all values except the first 5 elements in the list.
:","Solution
def printList():
	li=list()
	for i in range(1,21):
		li.append(i**2)
	print li[5:]
		

printList()


","def square_list(n):
    for i in range(1, 21):
        yield i**2

print(square_list(1))
print(square_list(2))
print(square_list(3))
print(square_list(4))
print(square_list(5))
print(square_list(6))
print(square_"
2451,Python Program to Find the GCD of Two Numbers,"import fractions
a=int(input(""Enter the first number:""))
b=int(input(""Enter the second number:""))
print(""The GCD of the two numbers is"",fractions.gcd(a,b))","def gcd(x, y):
    if x > y:
        x, y = y, x
    while y:
        x, y = y, x % y
    return x

def gcd_recursive(x, y):
    if x > y:
        x, y = y, x
    if x == 0:
        return y
    return gcd_recursive(x % y, y)

def gcd_iterative(x, y):
    while x!= 0"
2452,Python Program to Implement Floyd-Warshall Algorithm,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}

    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex

    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]

    def __contains__(self, key):
        return key in self.vertices

    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)

    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])

    def __len__(self):
        return len(self.vertices)

    def __iter__(self):
        return iter(self.vertices.values())


class Vertex:
    def __init__(self, key):
        self.key = key
        self.points_to = {}

    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key

    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight

    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()

    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]

    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to


def floyd_warshall(g):
    """"""Return dictionaries distance and next_v.

    distance[u][v] is the shortest distance from vertex u to v.
    next_v[u][v] is the next vertex after vertex v in the shortest path from u
    to v. It is None if there is no path between them. next_v[u][u] should be
    None for all u.

    g is a Graph object which can have negative edge weights.
    """"""
    distance = {v:dict.fromkeys(g, float('inf')) for v in g}
    next_v = {v:dict.fromkeys(g, None) for v in g}

    for v in g:
        for n in v.get_neighbours():
            distance[v][n] = v.get_weight(n)
            next_v[v][n] = n

    for v in g:
         distance[v][v] = 0
         next_v[v][v] = None

    for p in g: 
        for v in g:
            for w in g:
                if distance[v][w] > distance[v][p] + distance[p][w]:
                    distance[v][w] = distance[v][p] + distance[p][w]
                    next_v[v][w] = next_v[v][p]

    return distance, next_v


def print_path(next_v, u, v):
    """"""Print shortest path from vertex u to v.

    next_v is a dictionary where next_v[u][v] is the next vertex after vertex u
    in the shortest path from u to v. It is None if there is no path between
    them. next_v[u][u] should be None for all u.

    u and v are Vertex objects.
    """"""
    p = u
    while (next_v[p][v]):
        print('{} -> '.format(p.get_key()), end='')
        p = next_v[p][v]
    print('{} '.format(v.get_key()), end='')


g = Graph()
print('Menu')
print('add vertex <key>')
print('add edge <src> <dest> <weight>')
print('floyd-warshall')
print('display')
print('quit')

while True:
    do = input('What would you like to do? ').split()

    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            src = int(do[2])
            dest = int(do[3])
            weight = int(do[4])
            if src not in g:
                print('Vertex {} does not exist.'.format(src))
            elif dest not in g:
                print('Vertex {} does not exist.'.format(dest))
            else:
                if not g.does_edge_exist(src, dest):
                    g.add_edge(src, dest, weight)
                else:
                    print('Edge already exists.')

    elif operation == 'floyd-warshall':
        distance, next_v = floyd_warshall(g)
        print('Shortest distances:')
        for start in g:
            for end in g:
                if next_v[start][end]:
                    print('From {} to {}: '.format(start.get_key(),
                                                    end.get_key()),
                            end = '')
                    print_path(next_v, start, end)
                    print('(distance {})'.format(distance[start][end]))

    elif operation == 'display':
        print('Vertices: ', end='')
        for v in g:
            print(v.get_key(), end=' ')
        print()

        print('Edges: ')
        for v in g:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
        print()

    elif operation == 'quit':
        break","def floyd_warshall(graph):
    n = len(graph)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if graph[i][j] > 0:
                    graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j])

graph = [[0, 4, 0, 0, 0],
         [4, 0, 8, 0, 0],"
2453,Find the maximum element in the matrix,"import sys
# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

#compute the maximum element of the given 2d array
max=-sys.maxsize-1
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if matrix[i][j]>=max:
            max=matrix[i][j]

# Display the largest element of the given matrix
print(""The Maximum element of the Given 2d array is: "",max)","def max_element(matrix):
    max_element = 0
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j] > max_element:
                max_element = matrix[i][j]
    return max_element

print(max_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))

""""""

def max_element(matrix):
    max"
2454,Program to remove all numbers from a String,"
str=input(""Enter the String:"")
str2 = []
i = 0
while i < len(str):
  ch = str[i]
  if not(ch >= '0' and ch <= '9'):
    str2.append(ch)
  i += 1
Final_String = ''.join(str2)
print(""After removing numbers string is:"",Final_String)","def remove_numbers(str):
    # Your code here
    return str.replace('0', '')

print(remove_numbers('123456789'))

""""""

def remove_numbers(str):
    # Your code here
    return str.replace('0', '')

print(remove_numbers('123456789'))

""""""

def remove_numbers(str):
    # Your code here
    return str.replace('0', '')

print(remove"
2455,Write a program to Display your name and some Message ,"
print(""Sourav Patra"")
print(""Welcome to Python"")
print(""Welcome to our page www.csinfo360.com"")
print(""Programming Practice"")
print(""Thank you!"")
","""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution 23"
2456,Program to check two matrix are equal or not,"# Get size of 1st matrix
row_size=int(input(""Enter the row Size Of the 1st Matrix:""))
col_size=int(input(""Enter the columns Size Of the 1st Matrix:""))

# Get size of 2nd matrix
row_size1=int(input(""Enter the row Size Of the 1st Matrix:""))
col_size1=int(input(""Enter the columns Size Of the 2nd Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the 1st Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]
# Taking input of the 2nd matrix
print(""Enter the 2nd Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])

# Compare two matrices
point=0
if row_size==row_size1 and col_size==col_size1:
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j] != matrix1[i][j]:
                point=1
                break
else:
    print(""Two matrices are not equal."")
    exit(0)

if point==1:
    print(""Two matrices are not equal."")
else:
    print(""Two matrices are equal."")","def check_matrix(matrix1, matrix2):
    if len(matrix1)!= len(matrix2):
        return False
    for i in range(len(matrix1)):
        for j in range(len(matrix1[0])):
            if matrix1[i][j]!= matrix2[i][j]:
                return False
    return True

print(check_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]"
2457,Program to find the nth Hashed number,"
print(""Enter the Nth value:"")
rangenumber=int(input())
num = 1
c = 0
letest = 0
while (c != rangenumber):
   num2=num
   num1=num
   sum=0
   while(num1!=0):
    rem=num1%10
    num1=num1//10
    sum=sum+rem
   if(num2%sum==0):
     c+=1
     letest=num
   num = num + 1
print(rangenumber,""th Harshad number is "", letest);



","def nthHashedNumber(n):
    # Your code here
    pass

""""""

def nthHashedNumber(n):
    # Your code here
    pass

""""""

def nthHashedNumber(n):
    # Your code here
    pass

""""""

def nthHashedNumber(n):
    # Your code here
    pass

""""""

def nthHashedNumber(n):
    # Your code here
    pass

""""""

def nthH"
2458,Program to print series 1 9 17 33 49 73 97 ...N,"n=int(input(""Enter the range of number(Limit):""))i=1pr=0while i<=n:  if(i%2==0):    pr=2*pow(i, 2) +1    print(pr,end="" "")  else:    pr = 2*pow(i, 2) - 1    print(pr, end="" "")  i+=1","def series(n):
    if n == 1:
        return 1
    else:
        return n * series(n-1)

print(series(9))

""""""

# Solution

def series(n):
    if n == 1:
        return 1
    else:
        return n * series(n-1)

print(series(9))"
2459,Program to convert Decimal to Hexadecimal,"
i=0
dec=int(input(""Enter Decimal number: ""))
Hex=['0']*50
while dec!=0:
  rem=dec%16;
  #Convert Integer to char
  if rem<10:
    Hex[i]=chr(rem+48)#48 Ascii=0
    i+=1
  else:
    Hex[i]=chr(rem+55) #55 Ascii=7
    i+=1
  dec//=16
print(""Hexadecimal number is:"")
for j in range(i-1,-1,-1):
  print(Hex[j],end="""")","def convert(dec):
    return hex(dec)

print(convert(123))

""""""

# Solution 1

def convert(dec):
    return hex(dec)

print(convert(123))

# Solution 2

def convert(dec):
    return hex(dec).upper()

print(convert(123))

# Solution 3

def convert(dec):
    return hex(dec).upper()

print(convert(123))

# Solution 4"
2460,Python Program to Print Largest Even and Largest Odd Number in a List,"
n=int(input(""Enter the number of elements to be in the list:""))
b=[]
for i in range(0,n):
    a=int(input(""Element: ""))
    b.append(a)
c=[]
d=[]
for i in b:
    if(i%2==0):
        c.append(i)
    else:
        d.append(i)
c.sort()
d.sort()
count1=0
count2=0
for k in c:
    count1=count1+1
for j in d:
    count2=count2+1
print(""Largest even number:"",c[count1-1])
print(""Largest odd number"",d[count2-1])","def solution(arr):
    max_even = 0
    max_odd = 0
    for i in arr:
        if i % 2 == 0:
            max_even += i
        else:
            max_odd += i
    if max_even > max_odd:
        return max_even
    else:
        return max_odd

print(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print("
2461,"Program to print series 2,15,41,80...n","
print(""Enter the range of number(Limit):"")
n=int(input())
i=1
value=2
while(i<=n):
  print(value,end="" "")
  value+=i*13
  i+=1","def series(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return series(n-1) + series(n-2)

print(series(5))

""""""

# Solution

def series(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return series(n-1) + series(n-2)"
2462,"Python Program to Construct a Tree & Perform Insertion, Deletion, Display","class Tree:
    def __init__(self, data=None, parent=None):
        self.key = data
        self.children = []
        self.parent = parent

    def set_root(self, data):
        self.key = data

    def add(self, node):
        self.children.append(node)

    def search(self, key):
        if self.key == key:
            return self
        for child in self.children:
            temp = child.search(key)
            if temp is not None:
                return temp
        return None

    def remove(self):
        parent = self.parent
        index = parent.children.index(self)
        parent.children.remove(self)
        for child in reversed(self.children):
            parent.children.insert(index, child)
            child.parent = parent

    def bfs_display(self):
        queue = [self]
        while queue != []:
            popped = queue.pop(0)
            for child in popped.children:
                queue.append(child)
            print(popped.key, end=' ')


tree = None

print('Menu (this assumes no duplicate keys)')
print('add <data> at root')
print('add <data> below <data>')
print('remove <data>')
print('display')
print('quit')

while True:
    do = input('What would you like to do? ').split()

    operation = do[0].strip().lower()
    if operation == 'add':
        data = int(do[1])
        new_node = Tree(data)
        suboperation = do[2].strip().lower() 
        if suboperation == 'at':
            tree = new_node
        elif suboperation == 'below':
            position = do[3].strip().lower()
            key = int(position)
            ref_node = None
            if tree is not None:
                ref_node = tree.search(key)
            if ref_node is None:
                print('No such key.')
                continue
            new_node.parent = ref_node
            ref_node.add(new_node)

    elif operation == 'remove':
        data = int(do[1])
        to_remove = tree.search(data)
        if tree == to_remove:
            if tree.children == []:
                tree = None
            else:
                leaf = tree.children[0]
                while leaf.children != []:
                    leaf = leaf.children[0]
                leaf.parent.children.remove(leaf)
                leaf.parent = None
                leaf.children = tree.children
                tree = leaf
        else:
            to_remove.remove()

    elif operation == 'display':
        if tree is not None:
            print('BFS traversal display: ', end='')
            tree.bfs_display()
            print()
        else:
            print('Tree is empty.')

    elif operation == 'quit':
        break","def insert(root, key):
    if root is None:
        return Node(key)
    if key < root.data:
        root.left = insert(root.left, key)
    elif key > root.data:
        root.right = insert(root.right, key)
    else:
        return root
    return root

def delete(root, key):
    if root is None:
        return None
    if key < root.data:
        root"
2463,Python Program to Reverse only First N Elements of a Linked List,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None

    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next

    def display(self):
        current = self.head
        while current:
            print(current.data, end = ' ')
            current = current.next


def reverse_llist(llist, n):
    if n == 0:
        return
    before = None
    current = llist.head
    if current is None:
        return
    after = current.next
    for i in range(n):
        current.next = before
        before = current
        current = after
        if after is None:
            break
        after = after.next
    llist.head.next = current
    llist.head = before


a_llist = LinkedList()

data_list = input('Please enter the elements in the linked list: ').split()
for data in data_list:
    a_llist.append(int(data))
n = int(input('Enter the number of elements you want to reverse in the list: '))

reverse_llist(a_llist, n)

print('The new list: ')
a_llist.display()","def reverse(head, n):
    if head is None:
        return None
    if n == 1:
        return head
    return reverse(head.next, n-1)

# Node class
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# Linked List class
class LinkedList:
    def __init__(self):
        self.head = None
    
    # insert at the beginning"
2464,Python Program to Solve Rod Cutting Problem using Dynamic Programming with Memoization,"def cut_rod(p, n):
    """"""Take a list p of prices and the rod length n and return lists r and s.
    r[i] is the maximum revenue that you can get and s[i] is the length of the
    first piece to cut from a rod of length i.""""""
    # r[i] is the maximum revenue for rod length i
    # r[i] = -1 means that r[i] has not been calculated yet
    r = [-1]*(n + 1)

    # s[i] is the length of the initial cut needed for rod length i
    # s[0] is not needed
    s = [-1]*(n + 1)

    cut_rod_helper(p, n, r, s)

    return r, s


def cut_rod_helper(p, n, r, s):
    """"""Take a list p of prices, the rod length n, a list r of maximum revenues
    and a list s of initial cuts and return the maximum revenue that you can get
    from a rod of length n.

    Also, populate r and s based on which subproblems need to be solved.
    """"""
    if r[n] >= 0:
        return r[n]

    if n == 0:
        q = 0
    else:
        q = -1
        for i in range(1, n + 1):
            temp = p[i] + cut_rod_helper(p, n - i, r, s)
            if q < temp:
                q = temp
                s[n] = i
    r[n] = q

    return q


n = int(input('Enter the length of the rod in inches: '))

# p[i] is the price of a rod of length i
# p[0] is not needed, so it is set to None
p = [None]
for i in range(1, n + 1):
    price = input('Enter the price of a rod of length {} in: '.format(i))
    p.append(int(price))

r, s = cut_rod(p, n)
print('The maximum revenue that can be obtained:', r[n])
print('The rod needs to be cut into length(s) of ', end='')
while n > 0:
    print(s[n], end=' ')
    n -= s[n]","def rodCutting(n, d, memo={}):
    if n in memo:
        return memo[n]
    if n == 0:
        return 0
    if n == 1:
        return 1
    if n == 2:
        return 2
    if n == 3:
        return 3
    if n == 4:
        return 4
    if n == 5:
        return 5
    if n == 6:
        return 6
    if n == 7:"
2465,Python Program to Count the Number of Vowels Present in a String using Sets,"s=raw_input(""Enter string:"")
count = 0
vowels = set(""aeiou"")
for letter in s:
    if letter in vowels:
        count += 1
print(""Count of the vowels is:"")
print(count)","def count_vowels(string):
    vowels = set(['a', 'e', 'i', 'o', 'u'])
    count = 0
    for char in string:
        if char in vowels:
            count += 1
    return count

print(count_vowels(""Python is a high-level general-purpose programming language""
                   "" written in C++ and Fortran.""))

""""""

# Solution

def count_vowels("
2466,Find out all Disarium numbers present within a given range,"
import math
print(""Enter a range:"")
range1=int(input())
range2=int(input())
print(""Disarium numbers between "",range1,"" and "",range2,"" are: "")
for i in range(range1,range2+1):
  num =i
  c = 0
  while num != 0:
    num //= 10
    c += 1
  num = i
  sum = 0
  while num != 0:
    rem = num % 10
    sum += math.pow(rem, c)
    num //= 10
    c -= 1
  if sum == i:
    print(i,end="" "")","def solution(low, high):
    for i in range(low, high+1):
        if i < 0:
            continue
        if i % 2 == 0:
            print(i, end="" "")
        else:
            print(i, end="" "")
            print(i, end="" "")
            print(i, end="" "")
            print(i, end="" "")
            print(i, end="" "")
            print(i, end="" "")
            print("
2467,Python Program to Modify the Linked List such that All Even Numbers appear before all the Odd Numbers in the Modified Linked List,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None

    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next

    def display(self):
        current = self.head
        while current:
            print(current.data, end = ' ')
            current = current.next

    def get_node(self, index):
        current = self.head
        for i in range(index):
            if current is None:
                return None
            current = current.next
        return current

    def get_prev_node(self, ref_node):
        current = self.head
        while (current and current.next != ref_node):
            current = current.next
        return current

    def insert_at_beg(self, new_node):
        if self.head is None:
            self.head = new_node
        else:
            new_node.next = self.head
            self.head = new_node

    def remove(self, node):
        prev_node = self.get_prev_node(node)
        if prev_node is None:
            self.head = self.head.next
        else:
            prev_node.next = node.next


def move_even_before_odd(llist):
    current = llist.head
    while current:
        temp = current.next
        if current.data % 2 == 0:
            llist.remove(current)
            llist.insert_at_beg(current)
        current = temp


a_llist = LinkedList()

data_list = input('Please enter the elements in the linked list: ').split()
for data in data_list:
    a_llist.append(int(data))

move_even_before_odd(a_llist)

print('The new list: ')
a_llist.display()","def mod_even_odd(head):
    odd_list = []
    even_list = []
    odd_list_index = 0
    even_list_index = 0
    while head:
        if head.data % 2 == 0:
            even_list.append(head.data)
            even_list_index += 1
        else:
            odd_list.append(head.data)
            odd_list_index +="
2468,Program to display a lower triangular matrix,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

#Display Lower triangular matrix
print(""Lower Triangular Matrix is:\n"")
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i<j:
            print(""0 "",end="""")
        else:
            print(matrix[i][j],end="" "")
    print()","import numpy as np

A = np.array([[1, 2, 3, 4, 5],
              [6, 7, 8, 9, 10],
              [11, 12, 13, 14, 15],
              [16, 17, 18, 19, 20]])

print(A)

# Solution:

# A = np.array([[1, 2, 3, 4, 5],
#               [6, 7, 8, 9, 10],
#               [11, 12, 13, 14,"
2469,Print the Inverted Full Pyramid Star Pattern,"
row_size=int(input(""Enter the row size:""))
star_print=row_size*2-1
for out in range(row_size,0,-1):
  for inn in range(row_size,out,-1):
    print("" "",end="""")
  for p in range(0,star_print):
    print(""*"",end="""")
  star_print-=2
  print(""\r"")","def invert_full_pyramid(n):
    # Your code here
    return n

n = int(input())
print(invert_full_pyramid(n))

""""""

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(n):
    # Write your code here
    if n == 1:
        return 1
    if n == 2:
        return 2
    if n == 3:"
2470,Program to print a butterfly shape star pattern,"row_size=int(input(""Enter the row size:""))print_control_x=1for out in range(1,row_size+1):  for inn in range(1,row_size+1):    if inn<=print_control_x or inn>=row_size-print_control_x+1:      print(""*"",end="""")    else:      print("" "", end="""")  if out <= row_size // 2:    print_control_x+=1  else:    print_control_x-=1  print(""\r"")","python butterfly_pattern.py

""""""

import turtle

def draw_pattern(t, n):
    """"""
    Draws a butterfly shape pattern of n circles.
    """"""
    for i in range(n):
        t.circle(100)
        t.circle(100)
        t.circle(100)
        t.circle(100)
        t.circle(100)
        t.circle(100)
        t.circle(100)
        t.circle(100)
        t.circle"
2471,Python Program to Implement Fibonacci Heap,"import math

class FibonacciTree:
    def __init__(self, key):
        self.key = key
        self.children = []
        self.order = 0

    def add_at_end(self, t):
        self.children.append(t)
        self.order = self.order + 1


class FibonacciHeap:
    def __init__(self):
        self.trees = []
        self.least = None
        self.count = 0

    def insert(self, key):
        new_tree = FibonacciTree(key)
        self.trees.append(new_tree)
        if (self.least is None or key < self.least.key):
            self.least = new_tree
        self.count = self.count + 1

    def get_min(self):
        if self.least is None:
            return None
        return self.least.key

    def extract_min(self):
        smallest = self.least
        if smallest is not None:
            for child in smallest.children:
                self.trees.append(child)
            self.trees.remove(smallest)
            if self.trees == []:
                self.least = None
            else:
                self.least = self.trees[0]
                self.consolidate()
            self.count = self.count - 1
            return smallest.key

    def consolidate(self):
        aux = (floor_log2(self.count) + 1)*[None]

        while self.trees != []:
            x = self.trees[0]
            order = x.order
            self.trees.remove(x)
            while aux[order] is not None:
                y = aux[order]
                if x.key > y.key:
                    x, y = y, x
                x.add_at_end(y)
                aux[order] = None
                order = order + 1
            aux[order] = x

        self.least = None
        for k in aux:
            if k is not None:
                self.trees.append(k)
                if (self.least is None
                    or k.key < self.least.key):
                    self.least = k


def floor_log2(x):
    return math.frexp(x)[1] - 1


fheap = FibonacciHeap()

print('Menu')
print('insert <data>')
print('min get')
print('min extract')
print('quit')

while True:
    do = input('What would you like to do? ').split()

    operation = do[0].strip().lower()
    if operation == 'insert':
        data = int(do[1])
        fheap.insert(data)
    elif operation == 'min':
        suboperation = do[1].strip().lower()
        if suboperation == 'get':
            print('Minimum value: {}'.format(fheap.get_min()))
        elif suboperation == 'extract':
            print('Minimum value removed: {}'.format(fheap.extract_min()))

    elif operation == 'quit':
        break","def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

def fib_heap(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib_heap(n-1) + fib_heap(n-2)

def fib_heap_rec(n):"
2472,Program to Find sum of series 1+(1+3)+(1+3+5)+....+N,"
print(""Enter the range of number(Limit):"")
n = int(input())
i = 1
sum = 0
while (i <= n):
  for j in range(1, i + 1,2):
    sum+=j
  i += 2
print(""The sum of the series = "", sum)","def sum_series(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return sum_series(n-1) + sum_series(n-2) + sum_series(n-3)

print(sum_series(5))

""""""

# Solution

def sum_series(n):
    if n == 0:
        return 0
    elif n =="
2473,Program to Find nth Neon Number ,"
rangenumber=int(input(""Enter a Nth Number:""))
c = 0
letest = 0
num = 1
while c != rangenumber:
    sqr = num * num
    # Sum of digit
    sum = 0
    while sqr != 0:
      rem = sqr % 10
      sum += rem
      sqr //= 10

    if sum == num:
      c+=1
      letest = num

    num = num + 1
print(rangenumber,""th Magic number is "",latest)","def solution(n):
    if n == 1:
        return 1
    else:
        return n * solution(n-1)

""""""

def solution(n):
    if n == 1:
        return 1
    else:
        return n * solution(n-1)

print(solution(5))

""""""

def solution(n):
    if n == 1:
        return 1
    else:
        return n * solution(n-1)

print(solution(5"
2474,Python Program to Take the Temperature in Celcius and Covert it to Farenheit,"
celsius=int(input(""Enter the temperature in celcius:""))
f=(celsius*1.8)+32
print(""Temperature in farenheit is:"",f)","import math

def convert(C):
    F = C * 9/5 + 32
    return F

def main():
    C = int(input(""Enter the temperature in Celcius: ""))
    print(""The temperature in Farenheit is: "", convert(C))

if __name__ == ""__main__"":
    main()"
2475,Find all non repeated characters in a string,"str=input(""Enter Your String:"")arr=[0]*256for i in range(len(str)):  if str[i]!=' ':    num=ord(str[i])    arr[num]+=1ch=' 'print(""All Non-repeating character in a given string is: "",end="""")for i in range(len(str)):    if arr[ord(str[i])] ==1:      ch=str[i]      print(ch,end="" "")","def solution(s):
    # Write your code here
    # return [i for i in range(len(s)) if s[i]!= s[i+1]]
    return [i for i in range(len(s)) if s[i]!= s[i+1]]

# print(solution(""abcabcbb""))
# print(solution(""bbbbb""))
# print(solution(""pwwkew""))
# print(solution(""abba""))
# print(solution(""ac""))
#"
2476,Print Fibonacci Series using recursion,"def FibonacciSeries(n):  if n==0:    return 0  elif(n==1):    return 1  else:    return FibonacciSeries(n-1)+FibonacciSeries(n-2)n=int(input(""Enter the Limit:""))print(""All Fibonacci Numbers in the given Range are:"")for i in range(0,n):  print(FibonacciSeries(i),end="" "")","def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

print(fib(5))

""""""

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(meal_cost, tip_percent, tax_percent):
    tip_percent = tip_percent/100"
2477,Write a program that computes the value of a+aa+aaa+aaaa with a given digit as the value of a.,"a = raw_input()
n1 = int( ""%s"" % a )
n2 = int( ""%s%s"" % (a,a) )
n3 = int( ""%s%s%s"" % (a,a,a) )
n4 = int( ""%s%s%s%s"" % (a,a,a,a) )
print n1+n2+n3+n4
","a = int(input(""Enter a number: ""))

if a == 0:
    print(""The number is 0"")
elif a == 1:
    print(""The number is 1"")
elif a == 2:
    print(""The number is 2"")
elif a == 3:
    print(""The number is 3"")
elif a == 4:
    print(""The number is 4"")
elif a == 5:
    print"
2478,Python Program to Find the LCM of Two Numbers,"a=int(input(""Enter the first number:""))
b=int(input(""Enter the second number:""))
if(a>b):
    min1=a
else:
    min1=b
while(1):
    if(min1%a==0 and min1%b==0):
        print(""LCM is:"",min1)
        break
    min1=min1+1","def lcm(x, y):
    if x > y:
        smaller = x
    else:
        smaller = y
    for i in range(1, smaller + 1):
        if (x % i == 0) and (y % i == 0):
            lcm = i
    return lcm

print(lcm(12, 24))

""""""

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the lcm"
2479,Convert temperature from Fahrenheit to Celsius ,"
fahrenheit=int(input(""Enter degree in fahrenheit: ""))
celsius= (fahrenheit-32)*5/9;
print(""Degree in celsius is"",celsius)","def convert_fahrenheit_to_celsius(fahrenheit):
    celsius = (fahrenheit - 32) * 5 / 9
    return celsius

print(convert_fahrenheit_to_celsius(100))

""""""

# Solution

def convert_fahrenheit_to_celsius(fahrenheit):
    celsius = (fahrenheit - 32) * 5 / 9
    return celsius

print(convert_fahrenheit_to_cel"
2480,Write a program that accepts a sentence and calculate the number of upper case letters and lower case letters.,"s = raw_input()
d={""UPPER CASE"":0, ""LOWER CASE"":0}
for c in s:
    if c.isupper():
        d[""UPPER CASE""]+=1
    elif c.islower():
        d[""LOWER CASE""]+=1
    else:
        pass
print ""UPPER CASE"", d[""UPPER CASE""]
print ""LOWER CASE"", d[""LOWER CASE""]
","s = input(""Enter a sentence: "")
countUpper = 0
countLower = 0
for i in s:
    if i.isupper():
        countUpper += 1
    elif i.islower():
        countLower += 1
print(""Number of Upper case letters: "", countUpper)
print(""Number of Lower case letters: "", countLower)

""""""

# Solution:

s = input(""Enter a sentence: "")
countUpper"
2481,Program to Find subtraction of two matrices,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]
# Taking input of the 2nd matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])

# Compute Subtraction of two matrices
sub_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        sub_matrix[i][j]=matrix[i][j]-matrix1[i][j]

# display the Subtraction of two matrices
print(""Subtraction of the two Matrices is:"")
for m in sub_matrix:
    print(m)","def subtract(a,b):
    return a-b

a = [1,2,3,4,5]
b = [6,7,8,9,10]
print(subtract(a,b))

""""""

# Solution:

def subtract(a,b):
    return a-b

a = [1,2,3,4,5]
b = [6,7,8,9,10]
print(subtract(a,b))

"""""""
2482,Python Program to Find the Length of a List Using Recursion,"def length(lst):
    if not lst:
        return 0
    return 1 + length(lst[1::2]) + length(lst[2::2])
a=[1,2,3]
print(""Length of the string is: "")
print(a)","def length(lst):
    if len(lst) == 0:
        return 0
    else:
        return 1 + length(lst[1:])

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(length(lst))

""""""

# Python Program to Find the Length of a List Using Iterative Method

def length(lst):
    if len(lst) == 0:
        return 0"
2483,Write a program which accepts a sequence of comma-separated numbers from console and generate a list and a tuple which contains every number.,"values=raw_input()
l=values.split("","")
t=tuple(l)
print l
print t
","def main():
    numbers = input(""Enter numbers separated by comma: "")
    numbers = numbers.split("","")
    numbers = tuple(numbers)
    print(numbers)

if __name__ == ""__main__"":
    main()

# OUTPUT:
# Enter numbers separated by comma: 1,2,3,4,5,6,7,8,9,10
# (1, 2"
2484, Find the sum of N numbers in an array,"
arr=[]
size = int(input(""Enter the size of the array: ""))
print(""Enter the Element of the array:"")
for i in range(0,size):
  num = float(input())
  arr.append(num)
sum=0.0
for j in range(0,size):
      sum+= arr[j]
print(""sum of "",size,"" number : "",sum)","def sum_numbers(nums):
    total = 0
    for num in nums:
        total += num
    return total

print(sum_numbers([1, 2, 3, 4, 5]))

""""""

def sum_numbers(nums):
    total = 0
    for num in nums:
        total += num
    return total

print(sum_numbers([1, 2, 3, 4, 5]))

""""""

def sum_numbers(n"
2485,Program to check whether a matrix is diagonal or not,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

# check except Diagonal elements are 0 or not
point=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        # check for diagonals element
        if i!=j and matrix[i][j]!=0:
            point=1
            break
if point==1:
    print(""Given Matrix is not a diagonal Matrix."")
else:
    print(""Given Matrix is a diagonal Matrix."")","def diagonal(matrix):
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j] == 0:
                return False
    return True

print(diagonal([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))
print(diagonal([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))
print(diagonal([["
2486,Program to check whether a matrix is symmetric or not,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

if row_size!=col_size:
    print(""Given Matrix is not a Square Matrix."")
else:
    #compute the transpose matrix
    tran_matrix = [[0 for i in range(col_size)] for i in range(row_size)]
    for i in range(0, row_size):
        for j in range(0, col_size):
            tran_matrix[i][j] = matrix[j][i]
# check given matrix elements and transpose
# matrix elements are same or not.

flag=0
for i in range(0, row_size):
    for j in range(0, col_size):
        if matrix[i][j] != tran_matrix[i][j]:
            flag=1
            break

if flag==1:
    print(""Given Matrix is not a symmetric Matrix."")
else:
    print(""Given Matrix is a symmetric Matrix."")","def is_symmetric(matrix):
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j]!= matrix[j][i]:
                return False
    return True

print(is_symmetric([[1,2,3],[4,5,6],[7,8,9]]))
print(is_symmetric([[1,2,3],[4,5,6],[7,8"
2487,Program to Find nth Evil Number,"
rangenumber=int(input(""Enter a Nth Number:""))
c = 0
letest = 0
num = 1
while c != rangenumber:
  one_c = 0
  num1 = num
  while num1 != 0:
    if num1 % 2 == 1:
      one_c += 1
    num1 //= 2
  if one_c % 2 == 0:
      c+=1
      letest = num

  num = num + 1
print(rangenumber,""th Evil number is "",latest)","def nth_evil_number(n):
    if n == 1:
        return 1
    else:
        return nth_evil_number(n-1) + nth_evil_number(n-2)

n = int(input(""Enter the number: ""))
print(nth_evil_number(n))

""""""

# Solution

def nth_evil_number(n):
    if n == 1:
        return 1
    else:
        return nth_evil_number("
2488,Python Program to Print Table of a Given Number,"
n=int(input(""Enter the number to print the tables for:""))
for i in range(1,11):
    print(n,""x"",i,""="",n*i)","def print_table(n):
    for i in range(1, n+1):
        for j in range(1, i+1):
            print(j, end="" "")
        print()

n = int(input(""Enter the number of rows: ""))
print_table(n)

""""""

# Solution

def print_table(n):
    for i in range(1, n+1):
        for j in range(1, i+1):
            print(j, end"
2489,Python Program to Implement Heapsort,"def heapsort(alist):
    build_max_heap(alist)
    for i in range(len(alist) - 1, 0, -1):
        alist[0], alist[i] = alist[i], alist[0]
        max_heapify(alist, index=0, size=i)

def parent(i):
    return (i - 1)//2

def left(i):
    return 2*i + 1

def right(i):
    return 2*i + 2

def build_max_heap(alist):
    length = len(alist)
    start = parent(length - 1)
    while start >= 0:
        max_heapify(alist, index=start, size=length)
        start = start - 1

def max_heapify(alist, index, size):
    l = left(index)
    r = right(index)
    if (l < size and alist[l] > alist[index]):
        largest = l
    else:
        largest = index
    if (r < size and alist[r] > alist[largest]):
        largest = r
    if (largest != index):
        alist[largest], alist[index] = alist[index], alist[largest]
        max_heapify(alist, largest, size)


alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
heapsort(alist)
print('Sorted list: ', end='')
print(alist)","def heapify(arr, n, i):
    largest = i
    l = 2 * i + 1
    r = 2 * i + 2
    if l < n and arr[i] < arr[l]:
        largest = l
    if r < n and arr[largest] < arr[r]:
        largest = r
    if largest!= i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)

def heapSort(arr):"
2490,Python Program to Count Number of Non Leaf Nodes of a given Tree,"class Tree:
    def __init__(self, data=None):
        self.key = data
        self.children = []

    def set_root(self, data):
        self.key = data

    def add(self, node):
        self.children.append(node)

    def search(self, key):
        if self.key == key:
            return self
        for child in self.children:
            temp = child.search(key)
            if temp is not None:
                return temp
        return None

    def count_nonleaf_nodes(self):
        nonleaf_count = 0
        if self.children != []:
            nonleaf_count = 1
        for child in self.children:
            nonleaf_count = nonleaf_count + child.count_nonleaf_nodes()
        return nonleaf_count


tree = None

print('Menu (this assumes no duplicate keys)')
print('add <data> at root')
print('add <data> below <data>')
print('count')
print('quit')

while True:
    do = input('What would you like to do? ').split()

    operation = do[0].strip().lower()
    if operation == 'add':
        data = int(do[1])
        new_node = Tree(data)
        suboperation = do[2].strip().lower() 
        if suboperation == 'at':
            tree = new_node
        elif suboperation == 'below':
            position = do[3].strip().lower()
            key = int(position)
            ref_node = None
            if tree is not None:
                ref_node = tree.search(key)
            if ref_node is None:
                print('No such key.')
                continue
            ref_node.add(new_node)

    elif operation == 'count':
        if tree is None:
            print('Tree is empty.')
        else:
            count = tree.count_nonleaf_nodes()
            print('Number of nonleaf nodes: {}'.format(count))

    elif operation == 'quit':
        break","def count_leaf_nodes(root):
    if root is None:
        return 0
    else:
        return 1 + count_leaf_nodes(root.left) + count_leaf_nodes(root.right)

""""""

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self"
2491,Python Program to Count the Number of Lines in a Text File,"fname = input(""Enter file name: "")
num_lines = 0
with open(fname, 'r') as f:
    for line in f:
        num_lines += 1
print(""Number of lines:"")
print(num_lines)","# Open the file for reading
f = open(""mbox-short.txt"")

# Read the file line by line
for line in f:
    # If the line is not empty
    if line:
        # Split the line into words
        words = line.split()
        # Count the number of words
        print(len(words))

# Close the file
f.close()

""""""

# Open the file for reading
f = open(""mbox-short.txt"")

#"
2492,Program to print multiplication table of a given number,,"def multiplication_table(n):
    for i in range(1,n+1):
        print(i,end="" "")
    print()

n = int(input(""Enter the number of rows: ""))
multiplication_table(n)

""""""

# Solution

def multiplication_table(n):
    for i in range(1,n+1):
        print(i,end="" "")
    print()

n = int(input(""Enter the number of rows: ""))
for"
2493,Check if two arrays are the disjoint or not,"
arr=[]
arr2=[]
size = int(input(""Enter the size of the 1st array: ""))
size2 = int(input(""Enter the size of the 2nd array: ""))

print(""Enter the Element of the 1st array:"")
for i in range(0,size):
  num = int(input())
  arr.append(num)

print(""Enter the Element of the 2nd array:"")
for i in range(0,size2):
  num2 = int(input())
  arr2.append(num2)

count=0
for i in range(0, size):
  for j in range(0, size2):
    if arr[i] == arr2[j]:
      count+=1

if count>=1:
  print(""Arrays are not disjoint."")
else:
  print(""Arrays are disjoint."")","a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

a = [1, 2, 3, 4, 5, 6, 7, 8,"
2494,Print every character of a string twice,"str=input(""Enter Your String:"")for inn in range(0,len(str)):  print(str[inn]+str[inn],end="""")","def print_every_char(s):
    for i in s:
        print(i)

print_every_char(""Hello"")
print_every_char(""Python"")
print_every_char(""Hi"")
print_every_char(""Hi!"")
print_every_char(""Hi! Hi!"")
print_every_char(""Hi! Hi! Hi!"")
print_every_char(""Hi! Hi! Hi! Hi!"")
print_every_char(""Hi! Hi! Hi! Hi! Hi!"")"
2495,Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.,"s = raw_input()
words = [word for word in s.split("" "")]
print "" "".join(sorted(list(set(words))))
","def remove_duplicate_words(words):
    words_list = []
    for word in words:
        if word not in words_list:
            words_list.append(word)
    return words_list

print(remove_duplicate_words([""this"", ""is"", ""an"", ""example"", ""of"", ""this"", ""example""]))

""""""

def remove_duplicate_"
2496,Python Program to Generate Random Numbers from 1 to 20 and Append Them to the List,"import random
a=[]
n=int(input(""Enter number of elements:""))
for j in range(n):
    a.append(random.randint(1,20))
print('Randomised list is: ',a)","import random

def generate_random_number():
    random_number = random.randint(1, 20)
    return random_number

def append_to_list(list_to_append, random_number):
    list_to_append.append(random_number)

def main():
    list_to_append = []
    for i in range(1, 21):
        random_number = generate_random_number()
        append_to_list("
2497,Write a program to calculate compound interest,"principle=float(input(""Enter principle:""))
rate=float(input(""Enter rate(%):""))
n=float(input(""Enter n:""))
time=float(input(""Enter time:""))
amount=principle*pow(1+(rate/100.0)/n,n*time)
print(""The compound interest is"",amount)","def compound_interest(principle, interest_rate, number_of_years):
    """"""
    Compute the interest as a function of principle and interest rate.
    The function should return the amount of time it will take to pay
    interest based on the principle and interest rate.
    """"""
    # Write your code here
    return (principle * (interest_rate / 100) ** number_of_years)

# This is the main function that calls the above function.
compound_interest(principle=100,"
2498,"Define a class named American and its subclass NewYorker. 
:","
class American(object):
    pass

class NewYorker(American):
    pass

anAmerican = American()
aNewYorker = NewYorker()
print anAmerican
print aNewYorker




","1. Create a class called American.
2. Create a subclass of the American class.
3. Create a method called printNationality.
4. Create a method called printNationality.
5. Create a method called printNationality.
6. Create a method called printNationality.
7. Create a method called printNationality.
8. Create a method called printNationality.
9. Create a method called printNationality.
10. Create a method called printNationality.
11. Create a"
2499,Program to compute the area and perimeter of Rhombus,"

print(""Enter the two Diagonals Value:"")
p=int(input())
q=int(input())
a=int(input(""Enter the length of the side value:""))
area=(p*q)/2.0
perimeter=(4*a)
print(""Area of the Rhombus = "",area)
print(""Perimeter of the Rhombus = "",perimeter)
","#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the getPerimeter function below.
def getPerimeter(a, b, c):
    return (a + b + c) * 2

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input())

    for t_itr in range(t):
        arad = input"
