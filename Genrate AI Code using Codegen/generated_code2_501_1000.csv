Unnamed: 0,Problem,Python Code,Generated_Code
501,Write a Python program to add two given lists using map and lambda. ,"nums1 = [1, 2, 3]
nums2 = [4, 5, 6]
print(""Original list:"")
print(nums1)
print(nums2)
result = map(lambda x, y: x + y, nums1, nums2)
print(""\nResult: after adding two list"")
print(list(result))
","def add_two_lists(list1, list2):
    return list(map(lambda x, y: x + y, list1, list2))

print(add_two_lists([1, 2, 3], [4, 5, 6]))

""""""

def add_two_lists(list1, list2):
    return list(map(lambda x, y: x + y, list1, list2))

print(add_two_lists([1, 2,"
502,Write a Python program to generate and print a list of first and last 5 elements where the values are square of numbers between 1 and 30 (both included). ,"def printValues():
	l = list()
	for i in range(1,21):
		l.append(i**2)
	print(l[:5])
	print(l[-5:])

printValues()
","import random

lst = []
for i in range(1, 31):
    lst.append(i**2)
print(lst)

# Solution:

lst = []
for i in range(1, 31):
    lst.append(i**2)
print(lst)

# Solution:

lst = []
for i in range(1, 31):"
503,Write a NumPy program to extract all the rows from a given array where a specific column starts with a given character. ,"import numpy as np
np.set_printoptions(linewidth=100)
student =  np.array([['01', 'V', 'Debby Pramod'],
 ['02', 'V', 'Artemiy Ellie'],
 ['03', 'V', 'Baptist Kamal'],
 ['04', 'V', 'Lavanya Davide'],
 ['05', 'V', 'Fulton Antwan'],
 ['06', 'V', 'Euanthe Sandeep'],
 ['07', 'V', 'Endzela Sanda'],
 ['08', 'V', 'Victoire Waman'],
 ['09', 'V', 'Briar Nur'],
 ['10', 'V', 'Rose Lykos']])
print(""Original array:"")
print(student)
char='E'
result = student[np.char.startswith(student[:,2], char)]
print(""\nStudent name starting with"",char,"":"")
print(result)
char='1'
result = student[np.char.startswith(student[:,0], char)]
print(""\nStudent id starting with"",char,"":"")
print(result)
","import numpy as np

arr = np.array([[1,2,3,4,5,6,7,8,9,10],
                [11,12,13,14,15,16,17,18,19,20],
                [21,22,23,24,25,26,27,28,29,30]])

print(arr[arr[:,0].str.startswith('A')])"
504,Write a Python program to square the elements of a list using map() function. ,"def square_num(n):
  return n * n
nums = [4, 5, 2, 9]
print(""Original List: "",nums)
result = map(square_num, nums)
print(""Square the elements of the said list using map():"")
print(list(result))
","def square_list(lst):
    return map(lambda x: x**2, lst)

lst = [1, 2, 3, 4, 5]
print(square_list(lst))

""""""

# Solution:

def square_list(lst):
    return map(lambda x: x**2, lst)

lst = [1, 2, 3, 4, 5]
print(square_list(lst))"
505,Write a Python program to read a file line by line and store it into a list. ,"def file_read(fname):
        with open(fname) as f:
                #Content_list is the list that contains the read lines.     
                content_list = f.readlines()
                print(content_list)

file_read(\'test.txt\')
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20"
506,Write a Python program to read a file line by line store it into an array. ,"def file_read(fname):
        content_array = []
        with open(fname) as f:
                #Content_list is the list that contains the read lines.     
                for line in f:
                        content_array.append(line)
                print(content_array)

file_read('test.txt')
","def read_file(filename):
    f = open(filename, 'r')
    data = f.readlines()
    f.close()
    return data

def read_file_as_array(filename):
    f = open(filename, 'r')
    data = f.readlines()
    f.close()
    return data

def write_file(filename, data):
    f = open(filename, 'w')
    for line in data:"
507,Write a Python program that takes a text file as input and returns the number of words of a given text file. ,"def count_words(filepath):
   with open(filepath) as f:
       data = f.read()
       data.replace("","", "" "")
       return len(data.split("" ""))
print(count_words(""words.txt""))
","python solution.py input.txt

""""""

import sys

def main():
    try:
        file_name = sys.argv[1]
        file = open(file_name, 'r')
        count = 0
        for line in file:
            count += len(line.split())
        print(count)
    except IndexError:
        print(""File name missing"")
    except FileNotFoundError:
        print(""File"
508,Write a Python program for nth Catalan Number. ,"def catalan_number(num):
    if num <=1:
         return 1
   
    res_num = 0
    for i in range(num):
        res_num += catalan_number(i) * catalan_number(num-i-1)
    return res_num
 
for n in range(10):
    print(catalan_number(n))
	",">>> n = int(input())
>>> print(nCr(n,3))
2
>>> print(nCr(n,2))
3
>>> print(nCr(n,1))
1
>>> print(nCr(n,0))
1

""""""

def nCr(n,r):
    if n == 0 or n == 1:
        return 1
    if n < 0 or r < 0:
        return 0
    return nCr(n-1,r) + nCr"
509,Write a Python program to get the total length of all values of a given dictionary with string values. ,"def test(dictt):
    result = sum((len(values) for values in dictt.values()))
    return result
color = {'#FF0000':'Red', '#800000':'Maroon', '#FFFF00':'Yellow', '#808000':'Olive'}
print(""\nOriginal dictionary:"")
print(color)
print(""\nTotal length of all values of the said dictionary with string values:"")
print(test(color))
","def get_length(dictionary):
    total = 0
    for key in dictionary:
        total += len(dictionary[key])
    return total

print(get_length({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}))

""""""

def get_length(dictionary):
    total = 0
    for key in dictionary:
        total += len(dictionary"
510,Write a Pandas program to convert 1,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32],
    't_id': ['t1', 't2', 't3', 't4', 't5', 't6']})
print(""Original DataFrame:"")
print(df)
print(""\nMultiIndex using columns 't_id', school_code and 'class':"")
df1 = df.set_index(['t_id', 'school_code', 'class'])
print(df1)
print(""\nConvert 1st and 3rd levels in the index frame into columns:"")
df2 = df1.reset_index(level=['t_id', 'class'])
print(df2)
","1. Create a Pandas dataframe from the given data.
2. Create a Pandas series from the given data.
3. Create a Pandas series from the given data.
4. Create a Pandas series from the given data.
5. Create a Pandas series from the given data.
6. Create a Pandas series from the given data.
7. Create a Pandas series from the given data.
8. Create a Pandas series from the given data.
9. Create a Pandas series from the given data.
10."
511,Write a Python program to access a function inside a function. ,"def test(a):
        def add(b):
                nonlocal a
                a += 1
                return a+b
        return add
func= test(4)
print(func(4))
","def my_function(x):
    return x * x

print(my_function(5))

""""""

def my_function(x):
    return x * x

print(my_function(5))

""""""

def my_function(x):
    return x * x

print(my_function(5))

""""""

def my_function(x):
    return x * x

print(my_function(5))

""""""

def my_"
512,Write a Python program to filter a list of integers using Lambda. ,"nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(""Original list of integers:"")
print(nums)
print(""\nEven numbers from the said list:"")
even_nums = list(filter(lambda x: x%2 == 0, nums))
print(even_nums)
print(""\nOdd numbers from the said list:"")
odd_nums = list(filter(lambda x: x%2 != 0, nums))
print(odd_nums)
","def filter_list(lst):
    return list(filter(lambda x: x % 2 == 0, lst))

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(filter_list(lst))

""""""

# Solution

def filter_list(lst):
    return list(filter(lambda x: x % 2 == 0, lst))

lst = [1, 2, 3, 4"
513,"Write a Pandas program to find out the 'WHO region, 'Country', 'Beverage Types' in the year '1986' or '1989' where WHO region is 'Americas' or 'Europe' from the world alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details ('WHO region','Country','Beverage Types') \nin the year 1986 or 1989 where  WHO region is Americas  or 'Europe':"")
print(w_a_con[((w_a_con['Year']==1985) | (w_a_con['Year']==1989)) & ((w_a_con['WHO region']=='Americas') | (w_a_con['WHO region']=='Europe'))][['WHO region','Country','Beverage Types']].head(10))
","import pandas as pd

df = pd.read_csv('world_alcohol_consumption.csv')

df['WHO region, Country, Beverage Types'] = df['WHO region, Country, Beverage Types'].str.replace('Americas', 'Americas')
df['WHO region, Country, Beverage Types'] ="
514,Write a Python program to construct a Decimal from a float and a Decimal from a string. Also represent the Decimal value as a tuple. Use decimal.Decimal,"import decimal
print(""Construct a Decimal from a float:"")
pi_val = decimal.Decimal(3.14159)
print(pi_val)
print(pi_val.as_tuple())
print(""\nConstruct a Decimal from a string:"")
num_str = decimal.Decimal(""123.25"")
print(num_str)
print(num_str.as_tuple())
","import decimal

def solution(x, y):
    return (decimal.Decimal(x) / decimal.Decimal(y))

print(solution(1.5, '1.5'))
print(solution(1.5, '1.5e+2'))
print(solution(1.5, '1.5e+2.5'))
print(solution"
515,Write a Python program to remove all duplicate elements from a given array and returns a new array. ,"import array as arr
def test(nums):
    return sorted(set(nums),key=nums.index)

array_num = arr.array('i', [1, 3, 5, 1, 3, 7, 9])
print(""Original array:"")
for i in range(len(array_num)):    
    print(array_num[i], end=' ')
print(""\nAfter removing duplicate elements from the said array:"")
result = arr.array('i', test(array_num))
for i in range(len(result)):    
    print(result[i], end=' ')
array_num = arr.array('i', [2, 4, 2, 6, 4, 8])
print(""\nOriginal array:"")
for i in range(len(array_num)):    
    print(array_num[i], end=' ')
print(""\nAfter removing duplicate elements from the said array:"")
result = arr.array('i', test(array_num))
for i in range(len(result)):    
    print(result[i], end=' ')
","import collections

def removeDuplicates(arr):
    # create a set to store unique elements
    unique_elements = set(arr)
    # create a new array to store the unique elements
    new_arr = []
    # iterate through the array
    for i in arr:
        # if the element is not in the set, add it to the new array
        if i not in unique_elements:
            new_arr.append(i)"
516,Write a Pandas program to find and replace the missing values in a given DataFrame which do not have any valuable information. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,""--"",70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,""?"",12.43,2480.4,250.45, 3045.6],
'ord_date': ['?','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,""--"",3002,3001,3001],
'salesman_id':[5002,5003,""?"",5001,np.nan,5002,5001,""?"",5003,5002,5003,""--""]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nReplace the missing values with NaN:"")
result = df.replace({""?"": np.nan, ""--"": np.nan})
print(result)
","import pandas as pd

# Read the data
df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pima-indians-diabetes.csv?raw=true')

# Replace missing values
df.fillna(df.median(), inplace=True)

# Print the dataframe
print(df)

# Create a new column called 'Class'"
517,Write a Python program to find the index of the last element in the given list that satisfies the provided testing function. ,"def find_last_index(lst, fn):
  return len(lst) - 1 - next(i for i, x in enumerate(lst[::-1]) if fn(x))

print(find_last_index([1, 2, 3, 4], lambda n: n % 2 == 1))
","def last_element(lst):
    for i in range(len(lst)):
        if lst[i] == last_element(lst[i:]):
            return i
    return -1

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(last_element(lst))

""""""

def last_element(lst):
    for i in range"
518,Write a Python program to iterate over all pairs of consecutive items in a given list. ,"def pairwise(l1):
    temp = []
    for i in range(len(l1) - 1):
        current_element, next_element = l1[i], l1[i + 1]
        x = (current_element, next_element)
        temp.append(x)
    return temp
l1 = [1,1,2,3,3,4,4,5]
print(""Original lists:"")
print(l1)
print(""\nIterate over all pairs of consecutive items of the said list:"")
print(pairwise(l1))
","def pairs(lst):
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            yield lst[i], lst[j]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(list(pairs(lst)))

""""""

def pairs(lst):
    for i in range(len(l"
519,Write a Python program to create a list with the non-unique values filtered out. ,"from collections import Counter
def filter_non_unique(lst):
  return [item for item, count in Counter(lst).items() if count == 1]
print(filter_non_unique([1, 2, 2, 3, 4, 4, 5]))
","def unique_list(lst):
    new_lst = []
    for i in lst:
        if i not in new_lst:
            new_lst.append(i)
    return new_lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(unique_list(lst))

""""""

# Solution:

def unique_list(lst):
    new"
520,Write a Python program to find the second smallest number in a list. ,"def second_smallest(numbers):
  if (len(numbers)<2):
    return
  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):
    return
  dup_items = set()
  uniq_items = []
  for x in numbers:
    if x not in dup_items:
      uniq_items.append(x)
      dup_items.add(x)
  uniq_items.sort()    
  return  uniq_items[1]   

print(second_smallest([1, 2, -8, -2, 0, -2]))
print(second_smallest([1, 1, 0, 0, 2, -2, -2]))
print(second_smallest([1, 1, 1, 0, 0, 0, 2, -2, -2]))
print(second_smallest([2,2]))
print(second_smallest([2]))
","def second_smallest(numbers):
    smallest = numbers[0]
    for i in range(1, len(numbers)):
        if smallest > numbers[i]:
            smallest = numbers[i]
    return smallest

print(second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def second_smallest(numbers):
    smallest = numbers[0]
    for i in"
521,"Write a Python program to create a deque and append few elements to the left and right, then remove some elements from the left, right sides and reverse the deque. ","import collections
# Create a deque
deque_colors = collections.deque([""Red"",""Green"",""White""])
print(deque_colors)
# Append to the left
print(""\nAdding to the left: "")
deque_colors.appendleft(""Pink"")
print(deque_colors)
# Append to the right
print(""\nAdding to the right: "")
deque_colors.append(""Orange"")
print(deque_colors)
# Remove from the right
print(""\nRemoving from the right: "")
deque_colors.pop()
print(deque_colors)
# Remove from the left
print(""\nRemoving from the left: "")
deque_colors.popleft()
print(deque_colors)
# Reverse the dequeue
print(""\nReversing the deque: "")
deque_colors.reverse()
print(deque_colors)
","def deque(n):
    deque = collections.deque()
    for i in range(n):
        deque.append(i)
    return deque

n = int(input(""Enter the number of elements to be added to the left and right sides: ""))
print(""The elements are: "", end="""")
for i in range(n):
    print(deque(i+"
522,Write a Python program to count float number in a given mixed list using lambda. ,"def count_integer(list1):
    ert = list(map(lambda i: isinstance(i, float), list1)) 
    result = len([e for e in ert if e])         
    return result
list1 = [1, 'abcd', 3.12, 1.2, 4, 'xyz', 5, 'pqr', 7, -5, -12.22]
print(""Original list:"")
print(list1)
print(""\nNumber of floats in the said mixed list:"")
print(count_integer(list1))
","def count_float(mixed_list):
    return sum(map(lambda x: isinstance(x, float), mixed_list))

print(count_float([1, 2.0, 'a', [1, 2]]))

""""""

def count_float(mixed_list):
    return sum(map(lambda x: isinstance(x, float), mixed_list))

print(count_float([1, 2.0, 'a', [1, 2"
523,Write a NumPy program to compute the histogram of nums against the bins. ,"import numpy as np
import matplotlib.pyplot as plt
nums = np.array([0.5, 0.7, 1.0, 1.2, 1.3, 2.1])
bins = np.array([0, 1, 2, 3])
print(""nums: "",nums)
print(""bins: "",bins)
print(""Result:"", np.histogram(nums, bins))
plt.hist(nums, bins=bins)
plt.show()
","nums = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
bins = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Solution:

# Solution 1:
nums = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
bins = np.array([1, 2, 3, 4,"
524,Write a Python program to extract numbers from a given string. ,"def test(str1):
    result = [int(str1) for str1 in str1.split() if str1.isdigit()]
    return result
str1 = ""red 12 black 45 green"" 
print(""Original string:"", str1) 
print(""Extract numbers from the said string:"")
print(test(str1))
","def solution(s):
    # your code here
    return [int(i) for i in s.split() if i.isdigit()]

print(solution('1 2 3 4 5 6 7 8 9 10'))

# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Output: [1, 2,"
525,Write a Pandas program to partition each of the passengers into four categories based on their age. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = pd.cut(df['age'], [0, 10, 30, 60, 80])
print(result)
","# Solution 1:
# 1. Create a dictionary to store the age of each passenger.
# 2. Create a list to store the names of the passengers.
# 3. Create a function to calculate the average age of the passengers.
# 4. Create a function to calculate the number of passengers who are under the average age.
# 5. Create a function to calculate the number of passengers who are over the average age.
# 6. Create a function to calculate the number of passengers who are under the average"
526,"Write a NumPy program to fetch all items from a given array of 4,5 shape which are either greater than 6 and a multiple of 3. ","import numpy as np
array_nums1 = np.arange(20).reshape(4,5)
print(""Original arrays:"")
print(array_nums1)
result = array_nums1[(array_nums1>6) & (array_nums1%3==0)]
print(""\nItems greater than 6 and a multiple of 3 of the said array:"")
print(result)
","import numpy as np

arr = np.arange(4,6,3)
print(arr)

arr = np.arange(4,6,3)
print(arr)

arr = np.arange(4,6,3)
print(arr)

arr = np.arange(4,6,3)
print(arr)

arr = np.arange(4,6"
527,Write a Python program to find smallest window that contains all characters of a given string. ,"from collections import defaultdict   

def find_sub_string(str): 
    str_len = len(str) 
      
    # Count all distinct characters. 
    dist_count_char = len(set([x for x in str])) 
  
    ctr, start_pos, start_pos_index, min_len = 0, 0, -1, 9999999999
    curr_count = defaultdict(lambda: 0) 
    for i in range(str_len): 
        curr_count[str[i]] += 1
 
        if curr_count[str[i]] == 1: 
            ctr += 1
  
        if ctr == dist_count_char: 
            while curr_count[str[start_pos]] > 1: 
                if curr_count[str[start_pos]] > 1: 
                    curr_count[str[start_pos]] -= 1
                start_pos += 1
  
            len_window = i - start_pos + 1
            if min_len > len_window: 
                min_len = len_window 
                start_pos_index = start_pos 
    return str[start_pos_index: start_pos_index + min_len] 
      
str1 = ""asdaewsqgtwwsa""
print(""Original Strings:\n"",str1)
print(""\nSmallest window that contains all characters of the said string:"")
print(find_sub_string(str1)) 
","def smallest_window(string):
    smallest_window = 0
    for i in range(len(string)):
        for j in range(i, len(string)):
            if string[i:j+1] == string:
                smallest_window = string[i:j+1]
                break
    return smallest_window

print(smallest_window(""abcdefghijklmnopqrstuvwxyz""))

""""""

def smallest"
528,Write a Python program to find the years where 25th of December be a Sunday between 2000 and 2150. ,"'''Days of the week'''
# Source:https://bit.ly/30NoXF8
 
from datetime import date
from itertools import islice
 
 
# xmasIsSunday :: Int -> Bool
def xmasIsSunday(y):
    '''True if Dec 25 in the given year is a Sunday.'''
    return 6 == date(y, 12, 25).weekday()
 
 
# main :: IO ()
def main():
    '''Years between 2000 and 2150 with 25 December on a Sunday'''
 
    xs = list(filter(
        xmasIsSunday,
        enumFromTo(2000)(2150)
    ))
    total = len(xs)
    print(
        fTable(main.__doc__ + ':\n\n' + '(Total ' + str(total) + ')\n')(
            lambda i: str(1 + i)
        )(str)(index(xs))(
            enumFromTo(0)(total - 1)
        )
    )
 
 
# GENERIC -------------------------------------------------
 
# enumFromTo :: (Int, Int) -> [Int]
def enumFromTo(m):
    '''Integer enumeration from m to n.'''
    return lambda n: list(range(m, 1 + n))
 
 
# index (!!) :: [a] -> Int -> a
def index(xs):
    '''Item at given (zero-based) index.'''
    return lambda n: None if 0 > n else (
        xs[n] if (
            hasattr(xs, ""__getitem__"")
        ) else next(islice(xs, n, None))
    )
 
 
# unlines :: [String] -> String
def unlines(xs):
    '''A single string formed by the intercalation
       of a list of strings with the newline character.
    '''
    return '\n'.join(xs)
 
 
#  FORMATTING ---------------------------------------------
# fTable :: String -> (a -> String) ->
#                     (b -> String) -> (a -> b) -> [a] -> String
def fTable(s):
    '''Heading -> x display function -> fx display function ->
                     f -> xs -> tabular string.
    '''
    def go(xShow, fxShow, f, xs):
        ys = [xShow(x) for x in xs]
        w = max(map(len, ys))
        return s + '\n' + '\n'.join(map(
            lambda x, y: y.rjust(w, ' ') + ' -> ' + fxShow(f(x)),
            xs, ys
        ))
    return lambda xShow: lambda fxShow: lambda f: lambda xs: go(
        xShow, fxShow, f, xs
    ) 
 
# MAIN --
if __name__ == '__main__':
    main()
","def find_sunday(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return year - 2000
            else:
                return year - 2000 + 1
        else:
            return year - 2000 + 1
    else:
        return year - 2000 + 1

print(find_sunday(25))

""""""

""""""

""""""

""""""

"""""""
529,Write a Python program to accept a filename from the user and print the extension of that. ,"filename = input(""Input the Filename: "")
f_extns = filename.split(""."")
print (""The extension of the file is : "" + repr(f_extns[-1]))
","import os

def get_extension(filename):
    return os.path.splitext(filename)[1]

print(get_extension(""hello.txt""))

""""""

import os

def get_extension(filename):
    return os.path.splitext(filename)[1]

print(get_extension(""hello.txt""))

""""""

import os

def get_extension(filename):
    return os.path."
530,Write a NumPy program to save two given arrays into a single file in compressed format (.npz format) and load it. ,"import numpy as np
import os
x = np.arange(10)
y = np.arange(11, 20)
print(""Original arrays:"")
print(x)
print(y)
np.savez('temp_arra.npz', x=x, y=y)
print(""Load arrays from the 'temp_arra.npz' file:"")
with np.load('temp_arra.npz') as data:
    x2 = data['x']
    y2 = data['y']
    print(x2)
    print(y2)
","import numpy as np

arr1 = np.array([1, 2, 3, 4, 5])
arr2 = np.array([6, 7, 8, 9, 10])

np.savez('arr1.npz', arr1)
arr2 = np.load('arr1.npz')

arr3 = arr2['arr1']
arr4 = arr2['arr2']

arr3 = arr3."
531,Write a Python program to swap two sublists in a given list. ,"nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
print(""Original list:"")
print(nums)
nums[6:10], nums[1:3] = nums[1:3], nums[6:10]
print(""\nSwap two sublists of the said list:"")
print(nums)
nums[1:3], nums[4:6] = nums[4:6], nums[1:3]
print(""\nSwap two sublists of the said list:"")
print(nums)
","def swap_two_sublists(list1, list2):
    list1[0], list1[1] = list1[1], list1[0]
    list2[0], list2[1] = list2[1], list2[0]
    return list1, list2

list1 = [1, 2, 3, 4, 5]
list2 = [6, 7, 8, 9, 10]

print(swap_two_sublists(list1"
532,Write a Pandas program to convert a specified character column in upper/lower cases in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})

df1 = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})
print(""Original DataFrame:"")
print(df)
print(""\nUpper cases in comapny_code:"")
df['upper_company_code'] = list(map(lambda x: x.upper(), df['company_code']))
print(df)
print(""\nLower cases in comapny_code:"")
df1['lower_company_code'] = list(map(lambda x: x.lower(), df1['company_code']))
print(df1)
","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pandas_datareader/data/election_data.csv?raw=true')

df['Election_results'] = df['Election_results'].str.upper()

df.head()

df.head()

df.head()

df.head()

df"
533,Write a NumPy program to stack 1-D arrays as columns wise. ,"import numpy as np    
print(""\nOriginal arrays:"")
x = np.array((1,2,3))
y = np.array((2,3,4))
print(""Array-1"")
print(x)
print(""Array-2"")
print(y)
new_array =  np.column_stack((x, y))
print(""\nStack 1-D arrays as columns wise:"")
print(new_array)
","import numpy as np

arr = np.array([[1,2,3,4,5,6,7,8,9,10],
                [11,12,13,14,15,16,17,18,19,20],
                [21,22,23,24,25,26,27,28,29,30]])

print(arr)

arr = np.array([[1,2,3,4,5,6,7,8,"
534,Write a NumPy program to get the lower-triangular L in the Cholesky decomposition of a given array. ,"import numpy as np
a = np.array([[4, 12, -16], [12, 37, -53], [-16, -53, 98]], dtype=np.int32)
print(""Original array:"")
print(a)
L = np.linalg.cholesky(a)
print(""Lower-trianglular L in the Cholesky decomposition of the said array:"")
print(L)
","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

L = np.linalg.cholesky(A)

print(L)

# Output:
[[ 1.  2.  3.]
 [ 4.  5.  6.]
 [ 7.  8.  9.]]

""""""

import numpy as"
535,Write a Python program to get the unique values in a given list of lists. ,"def unique_values_in_list_of_lists(lst):
    result = set(x for l in lst for x in l)
    return list(result)
nums = [[1,2,3,5], [2,3,5,4], [0,5,4,1], [3,7,2,1], [1,2,1,2]]
print(""Original list:"")
print(nums)
print(""Unique values of the said list of lists:"")
print(unique_values_in_list_of_lists(nums))
chars = [['h','g','l','k'], ['a','b','d','e','c'], ['j','i','y'], ['n','b','v','c'], ['x','z']]
print(""\nOriginal list:"")
print(chars)
print(""Unique values of the said list of lists:"")
print(unique_values_in_list_of_lists(chars))
","def unique_list(lst):
    lst = list(set(lst))
    return lst

lst = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]
print(unique_list(lst))

""""""

def unique_list(lst):
    lst = list("
536,Write a NumPy program to compute the condition number of a given matrix. ,"import numpy as np
m = np.array([[1,2],[3,4]])
print(""Original matrix:"")
print(m)
result =  np.linalg.cond(m)
print(""Condition number of the said matrix:"")
print(result)
","import numpy as np

A = np.array([[1, 2, 3, 4, 5],
              [6, 7, 8, 9, 10],
              [11, 12, 13, 14, 15],
              [16, 17, 18, 19, 20]])

print(np.linalg.cond(A))

""""""

# Solution

import numpy as np

A = np.array([[1, 2, 3, 4, 5],"
537,"Write a Python program to create and display all combinations of letters, selecting each letter from a different key in a dictionary. ","import itertools      
d ={'1':['a','b'], '2':['c','d']}
for combo in itertools.product(*[d[k] for k in sorted(d.keys())]):
    print(''.join(combo))
	","def get_combinations(key, dictionary):
    if key in dictionary:
        return dictionary[key]
    else:
        return get_combinations(key + 1, dictionary)

print(get_combinations('a', {'a': 1, 'b': 2, 'c': 3}))

""""""

def get_combinations(key, dictionary):
    if key in dictionary:
        return dictionary[key]
    else:"
538,Write a Pandas program to filter the specified columns and records by range from world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nFiltering records by label or index:"")
print(w_a_con.loc[0:4, [""WHO region"", ""Beverage Types""]])
","# Import pandas
import pandas as pd

# Read the data
dataset = pd.read_csv('datasets/Alcohol_Consumption.csv')

# Create a new column 'Alcohol_Consumption'
dataset['Alcohol_Consumption'] = dataset['Alcohol_Consumption'].apply(lambda x: x if x >= 0 else 0)

# Create a new column 'Alcohol_Consumption'
dataset"
539,Write a NumPy program to create a new array which is the average of every consecutive triplet of elements of a given array. ,"import numpy as np
arr1 = np.array([1,2,3, 2,4,6, 1,2,12, 0,-12,6])
print(""Original array:"")
print(arr1)
result = np.mean(arr1.reshape(-1, 3), axis=1)
print(""Average of every consecutive triplet of elements of the said array:"")
print(result)
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

b = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

c = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

d = np.array([1, 2,"
540,"Write a Python program to create a new Arrow object, cloned from the current one. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
cloned = a.clone()
print(""\nCloned datetime:"")
print(cloned)
",">>> import arrow
>>> arrow.Arrow(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50"
541,Write a Pandas program to get the length of the integer of a given column in a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'skfsalf', 'sdfslew', 'safsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})
print(""Original DataFrame:"")
print(df)
print(""\nLength of sale_amount:"")
df['sale_amount_length'] = df['sale_amount'].map(str).apply(len)
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

print(df['col2'].apply(len))

# Output:
# col2    8
# col1    10
# dtype: int"
542,"Write a Python program to get information about the file pertaining to the file mode. Print the information - ID of device containing file, inode number, protection, number of hard links, user ID of owner, group ID of owner, total size (in bytes), time of last access, time of last modification and time of last status change. ","import os
path = 'e:\\testpath\\p.txt'
fd = os.open(path, os.O_RDWR)
info = os.fstat(fd)
print (f""ID of device containing file: {info.st_dev}"")
print (f""Inode number: {info.st_ino}"")
print (f""Protection: {info.st_mode}"")
print (f""Number of hard links: {info.st_nlink}"")
print (f""User ID of owner: {info.st_uid}"")
print (f""Group ID of owner: {info.st_gid}"")
print (f""Total size, in bytes: {info.st_size}"")
print (f""Time of last access: {info.st_atime}"")
print (f""Time of last modification: {info.st_mtime }"")
print (f""Time of last status change: {info.st_ctime }"")
os.close( fd)
","import os

def get_file_mode(file_path):
    """"""
    Returns the file mode of the file.
    """"""
    try:
        # Open the file for reading
        f = open(file_path, 'r')"
543,Write a Python program to create a flat list of all the values in a flat dictionary. ,"def test(flat_dict):
  return list(flat_dict.values())
students = {
  'Theodore': 19,
  'Roxanne': 20,
  'Mathew': 21,
  'Betty': 20
}
print(""\nOriginal dictionary elements:"")
print(students)
print(""\nCreate a flat list of all the values of the said flat dictionary:"")
print(test(students))
","def flat_list(d):
    l = []
    for i in d:
        l.append(i)
    return l

d = {'red': 1, 'blue': 2, 'white': 3}
print(flat_list(d))

""""""

# Solution

def flat_list(d):
    l = []
    for i in d:
        l.append(i)
    return l

d = {'red': 1"
544,rite a Python program to find numbers between 100 and 400 (both included) where each digit of a number is an even number. The numbers obtained should be printed in a comma-separated sequence.,"items = []
for i in range(100, 401):
    s = str(i)
    if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0):
        items.append(s)
print( "","".join(items))
","import math

def even_numbers(n):
    for i in range(1, n+1):
        if i % 2 == 0:
            print(i, end=', ')

n = int(input())
even_numbers(n)

""""""

#!/bin/python3

import math
import os
import random
import re
import sys"
545,Write a Python program to sort a list of dictionaries using Lambda. ,"models = [{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':'2', 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}]
print(""Original list of dictionaries :"")
print(models)
sorted_models = sorted(models, key = lambda x: x['color'])
print(""\nSorting the List of dictionaries :"")
print(sorted_models)
","def lambda_solution(dictionaries):
    return dictionaries

dictionaries = [
    {'name': 'John', 'age': 30, 'gender': 'Male'},
    {'name': 'Anna', 'age': 25, 'gender': 'Female'},
    {'name': 'Bob', 'age': 20, 'gender': 'Male'},
    {'name': 'Sara', 'age': 30, 'gender': 'Female'},
    {'name"
546,Write a NumPy program to normalize a 3x3 random matrix. ,"import numpy as np
x= np.random.random((3,3))
print(""Original Array:"")
print(x)
xmax, xmin = x.max(), x.min()
x = (x - xmin)/(xmax - xmin)
print(""After normalization:"")
print(x)
","import numpy as np

A = np.random.randint(0, 10, (3, 3))
print(A)

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(A)

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(A)

A = np.array([[1, 2"
547,Write a NumPy program to get the qr factorization of a given array. ,"import numpy as np
a = np.array([[4, 12, -14], [12, 37, -53], [-14, -53, 98]], dtype=np.int32)
print(""Original array:"")
print(a)
q, r = np.linalg.qr(a)
print(""qr factorization of the said array:"")
print( ""q=\n"", q, ""\nr=\n"", r)
","import numpy as np

def qrfactor(a):
    # Your code here
    pass

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(qrfactor(a))

""""""

# Q: What is the output of the following Python code?

import numpy as np

def qrfactor(a):
    # Your code here
    pass

a = np"
548,Write a Python program to print all permutations with given repetition number of characters of a given string. ,"from itertools import product
def all_repeat(str1, rno):
  chars = list(str1)
  results = []
  for c in product(chars, repeat = rno):
    results.append(c)
  return results
print(all_repeat('xyz', 3))
print(all_repeat('xyz', 2))
print(all_repeat('abcd', 4))
","def permutations(string, n):
    if n == 0:
        print(string)
    else:
        for i in range(len(string)):
            permutations(string[:i] + string[i + 1:], n - 1)

permutations(""abcd"", 3)

""""""

def permutations(string, n):
    if n == 0:
        print(string)
    else:
        for i in range(len"
549,Write a Python program to test if a variable is a list or tuple or a set. ,"#x = ['a', 'b', 'c', 'd']
#x = {'a', 'b', 'c', 'd'}
x = ('tuple', False, 3.2, 1)
if type(x) is list:
    print('x is a list')
elif type(x) is set:
    print('x is a set')
elif type(x) is tuple:
    print('x is a tuple')    
else:
    print('Neither a list or a set or a tuple.')
","def is_list(var):
    if type(var) == list:
        return True
    else:
        return False

def is_tuple(var):
    if type(var) == tuple:
        return True
    else:
        return False

def is_set(var):
    if type(var) == set:
        return True
    else:
        return False

def is_list_or_tuple_or_set(var"
550,Write a Python program to get all possible combinations of the elements of a given list using itertools module. ,"import itertools
def combinations_list(list1):
    temp = []
    for i in range(0,len(list1)+1):
        temp.append(list(itertools.combinations(list1,i)))
    return temp

colors = ['orange', 'red', 'green', 'blue']
print(""Original list:"")
print(colors)
print(""\nAll possible combinations of the said lists elements:"")
print(combinations_list(colors))
","import itertools

def combinations(lst, n):
    """"""
    :param lst: list
    :param n: number of elements
    :return: list of all possible combinations
    """"""
    return list(itertools.combinations(lst, n))

print(combinations([1, 2, 3, 4, 5], 2))

""""""
Output:
[(1, 2, 3, 4, 5), (1,"
551,Write a Pandas program to replace NaNs with a single constant value in specified columns in a DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nReplace NaNs with a single constant value:"")
result = df['ord_no'].fillna(0, inplace=False)
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

df.replace({'col1"
552,Write a Python program to count the occurrences of the items in a given list using lambda. ,"def count_occurrences(nums):
    result = dict(map(lambda el  : (el, list(nums).count(el)), nums))
    return result
nums = [3,4,5,8,0,3,8,5,0,3,1,5,2,3,4,2]
print(""Original list:"")
print(nums)
print(""\nCount the occurrences of the items in the said list:"")
print(count_occurrences(nums))
","def count_occurrences(lst, item):
    return lst.count(item)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(count_occurrences(lst, 5))

""""""

# Solution 1

def count_occurrences(lst, item):
    return lst.count(item)

lst = [1, 2, 3, 4, 5"
553,Write a NumPy program to generate an array of 15 random numbers from a standard normal distribution. ,"import numpy as np
rand_num = np.random.normal(0,1,15)
print(""15 random numbers from a standard normal distribution:"")
print(rand_num)
","import numpy as np

np.random.seed(0)

x = np.random.normal(0, 1, 15)

print(x)

# Output:
# [ 0.9077999  0.9077999  0.9077999  0.9077999  0.9077999  0.9077999  0.9077999  0.9077999  0.9077999"
554,Write a Python program to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0). ,"def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)

print(sum_series(6))
print(sum_series(10))
","def sum_of_positive_ints(n):
    sum = 0
    for i in range(1, n+1):
        if i > 0:
            sum += i
    return sum

print(sum_of_positive_ints(10))

""""""

# Solution

def sum_of_positive_ints(n):
    sum = 0
    for i in range(1, n"
555,"Write a Pandas program to create a horizontal stacked bar plot of opening, closing stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-4-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Date', 'Open', 'Close']]
df3 = df2.set_index('Date')
plt.figure(figsize=(20,20))
df3.plot.barh(stacked=True)
plt.suptitle('Opening/Closing stock prices Alphabet Inc.,\n01-04-2020 to 30-04-2020', fontsize=12, color='black')
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])

df.set_index('Date', inplace=True)

plt.barh(df.index, df['Open'], color='#00ff00')

plt.show()"
556,Write a Pandas program to create a dataframe indexing by date and time. ,"import pandas as pd
print(""Create a dataframe, indexing by date and time:"")

dt_range = pd.date_range(start ='2020-05-12 07:10:10', freq ='S', periods = 10) 
df_dt = pd.DataFrame({""Sale_amt"":[100, 110, 117, 150, 112, 99, 129, 135, 140, 150]},
                            index = dt_range)
print(df_dt)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'Date': ['Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', 'Jan', '"
557,Write a Pandas program to create a time series object that has time indexed data. Also select the dates of same year and select the dates between certain dates. ,"import pandas as pd
index = pd.DatetimeIndex(['2011-09-02', '2012-08-04',
                          '2015-09-03', '2010-08-04',
                          '2015-03-03', '2011-08-04',
                          '2015-04-03', '2012-08-04'])

s_dates = pd.Series([0, 1, 2, 3, 4, 5, 6, 7], index=index)

print(""Time series object with indexed data:"")
print(s_dates)
print(""\nDates of same year:"")
print(s_dates['2015'])
print(""\nDates between 2012-01-01 and 2012-12-31"")
print(s_dates['2012-01-01':'2012-12-31']) 
","import pandas as pd
import numpy as np

# Create a time series object
ts = pd.Series(np.random.randn(100), index=pd.date_range('1/1/2000', periods=100))

# Select the dates between certain dates
ts_dates = ts.index.between('2000-01-01', '2000-01-10')

# Select the dates between"
558,Write a NumPy program to remove the leading whitespaces of all the elements of a given array. ,"import numpy as np
x = np.array([' python exercises ', ' PHP  ', ' java  ', '  C++'], dtype=np.str)
print(""Original Array:"")
print(x)
lstripped_char = np.char.lstrip(x)
print(""\nRemove the leading whitespaces : "", lstripped_char)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr)

arr = arr.astype(str)

print(arr)

arr = arr.astype(int)

print(arr)

arr = arr.astype(float)

print(arr)

arr = arr.astype(bool)

print(arr)"
559,Write a Python program to split a list into different variables. ,"color = [(""Black"", ""#000000"", ""rgb(0, 0, 0)""), (""Red"", ""#FF0000"", ""rgb(255, 0, 0)""),
         (""Yellow"", ""#FFFF00"", ""rgb(255, 255, 0)"")]
var1, var2, var3 = color
print(var1)
print(var2)
print(var3)
","def split_list(lst):
    return [lst[i:i+3] for i in range(0, len(lst), 3)]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(split_list(lst))

""""""

def split_list(lst):
    return [lst[i:i+3] for i in range(0, len(lst), 3)]

lst"
560,Write a Python program to find the first two elements of a given list whose sum is equal to a given value. Use itertools module to solve the problem. ,"import itertools as it
def sum_pairs_list(nums, n):
    for num2, num1 in list(it.combinations(nums[::-1], 2))[::-1]:
        if num2 + num1 == n:
            return [num1, num2]

nums = [1,2,3,4,5,6,7]     
n = 10
print(""Original list:"",nums,"": Given value:"",n)   
print(""Sum of pair equal to "",n,""="",sum_pairs_list(nums,n))

nums = [1,2,-3,-4,-5,6,-7]     
n = -6
print(""Original list:"",nums,"": Given value:"",n)   
print(""Sum of pair equal to "",n,""="",sum_pairs_list(nums,n))
","import itertools

def solution(lst, sum):
    return list(itertools.filterfalse(lambda x: x.sum() == sum, lst))

print(solution([1, 2, 3, 4, 5], 7))

# Output: [1, 2, 3, 4, 5]
# Explanation: The first two elements whose sum is 7 are [1, 2, 3"
561,"Write a Pandas program to create an index labels by using 64-bit integers, using floating-point numbers in a given dataframe. ","import pandas as pd
print(""Create an Int64Index:"")
df_i64 = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=[1, 2, 3, 4, 5, 6])
print(df_i64)
print(""\nView the Index:"")
print(df_i64.index)

print(""\nFloating-point labels using Float64Index:"")
df_f64 = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=[.1, .2, .3, .4, .5, .6])
print(df_f64)
print(""\nView the Index:"")
print(df_f64.index)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col"
562,Write a NumPy program to convert a NumPy array into Python list structure. ,"import numpy as np
x= np.arange(6).reshape(3, 2)
print(""Original array elements:"")
print(x)
print(""Array to list:"")
print(x.tolist())
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

# Python code to convert a NumPy array into Python list structure

# Python code to convert a NumPy array into Python list structure

# Python code to convert a NumPy array into Python list structure

# Python code to convert a NumPy array into Python list structure

# Python code to convert a NumPy array into Python list structure

#"
563,Write a Python program to copy of a deque object and verify the shallow copying process. ,"import collections
tup1 = (1,3,5,7,9)
dq1 = collections.deque(tup1)
dq2 = dq1.copy()
print(""Content of dq1:"")
print(dq1)
print(""dq2 id:"")
print(id(dq1))
print(""\nContent of dq2:"")
print(dq2)
print(""dq2 id:"")
print(id(dq2))
print(""\nChecking the first element of dq1 and dq2 are shallow copies:"")
print(id(dq1[0]))
print(id(dq2[0]))
","import collections

class Deque(collections.deque):
    def __init__(self, iterable=None):
        super().__init__()
        if iterable is not None:
            self.extend(iterable)

    def append(self, x):
        self.extend(x)

    def extend(self, iterable):
        for i in iterable:
            self.append(i)

    def pop(self):
        return"
564,Write a Python program to create an instance of an OrderedDict using a given dictionary. Sort the dictionary during the creation and print the members of the dictionary in reverse order. ,"from collections import OrderedDict
dict = {'Afghanistan': 93, 'Albania': 355, 'Algeria': 213, 'Andorra': 376, 'Angola': 244}
new_dict = OrderedDict(dict.items())
for key in new_dict:
    print (key, new_dict[key])

print(""\nIn reverse order:"")
for key in reversed(new_dict):
    print (key, new_dict[key])
","import collections

d = collections.OrderedDict()
d = collections.OrderedDict(sorted(d.items(), key=lambda item: item[0]))
print(d)

# Output:
# {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}
# {'a': 1,"
565,"Write a Python program to retrieve the HTML code of the title, its text, and the HTML code of its parent. ","import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""title"")
print(soup.title)
print(""title text"")
print(soup.title.text)
print(""Parent content of the title:"")
print(soup.title.parent)
","import urllib.request

url = ""https://www.python.org/ftp/python/3.8.5/python-3.8.5.tgz""

with urllib.request.urlopen(url) as response:
    data = response.read()
    print(data.decode('utf-8'))
    print(data.decode('utf-8').split('\n')[0])"
566,Write a Python program to shuffle and print a specified list. ,"from random import shuffle
color = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']
shuffle(color)
print(color)
","import random

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
random.shuffle(lst)
print(lst)

# Solution:

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
random.shuffle(lst)
print(lst)

# Solution:

lst = [1, 2, 3, 4, 5, 6, 7, 8"
567,Write a NumPy program to swap columns in a given array. ,"import numpy as np
my_array = np.arange(12).reshape(3, 4)
print(""Original array:"")
print(my_array)
my_array[:,[0, 1]] = my_array[:,[1, 0]]
print(""\nAfter swapping arrays:"")
print(my_array)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])

a[0, 1] = 5
a[1, 0] = 6

print(a)

# Output:
[[1 5]
 [4 6]]

""""""

import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])

a[0, 1] = 5
a["
568,Write a Pandas program to find out the alcohol consumption details in the year '1986' or '1989' where WHO region is 'Americas' or 'Europe' from the world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details in the year 1986 or 1989 where  WHO region is Americas  or 'Europe':"")
print(w_a_con[((w_a_con['Year']==1985) | (w_a_con['Year']==1989)) & ((w_a_con['WHO region']=='Americas') | (w_a_con['WHO region']=='Europe'))].head(10))
","import pandas as pd

# Read the data
df = pd.read_csv('world_alcohol_consumption.csv')

# Create a new column'region'
df['region'] = df['region'].replace('Americas', 'Americas')
df['region'] = df['region'].replace('Europe', 'Europe')

# Create a new column"
569,Write a NumPy program to remove a specific column from a given array. ,"import numpy as np 
nums = np.random.random((7, 5))
print(""Original array:"")
print(nums)
print(""\nDelete the first column of the said array:"")
print(np.delete(nums, [0], axis=1))
print(""\nDelete the last column of the said array:"")
print(np.delete(nums, [4], axis=1))
","import numpy as np

a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

a[:, 2] = np.nan
print(a)

# Solution:

a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

a[:, 2] = np.nan
print("
570,Write a Pandas program convert the first and last character of each word to upper case in each word of a given series. ,"import pandas as pd
series1 = pd.Series(['php', 'python', 'java', 'c#'])
print(""Original Series:"")
print(series1)
result = series1.map(lambda x: x[0].upper() + x[1:-1] + x[-1].upper())
print(""\nFirst and last character of each word to upper case:"")
print(result)
","import pandas as pd

df = pd.read_csv(""C:/Users/DELL/Desktop/Python/data/data.csv"")

df.head()

df.columns = ['first_word', 'last_word']

df.head()

df.first_word.head()

df.last_word.head()

df.first_word.head()

df.last_word.head"
571,"Write a Python program to replace hour, minute, day, month, year and timezone with specified value of current datetime using arrow. ","import arrow
a = arrow.utcnow()
print(""Current date and time:"")
print(a)
print(""\nReplace hour and minute with 5 and 35:"")
print(a.replace(hour=5, minute=35))
print(""\nReplace day with 2:"")
print(a.replace(day=2))
print(""\nReplace year with 2021:"")
print(a.replace(year=2021))
print(""\nReplace month with 11:"")
print(a.replace(month=11)) 
print(""\nReplace timezone with 'US/Pacific:"")
print(a.replace(tzinfo='US/Pacific'))
","import datetime

current_datetime = datetime.datetime.now()

print(current_datetime)

current_datetime = current_datetime.replace(hour=20, minute=30, second=0, microsecond=0)

print(current_datetime)

current_datetime = current_datetime.replace(hour=20, minute=30, second=0, microsecond=0)"
572,Write a NumPy program to create a vector of length 5 filled with arbitrary integers from 0 to 10. ,"import numpy as np
x = np.random.randint(0, 11, 5)
print(""Vector of length 5 filled with arbitrary integers from 0 to 10:"")
print(x)
","import numpy as np

vector = np.arange(0, 10, 1)

print(vector)

# solution

# 0.0
# 1.0
# 2.0
# 3.0
# 4.0
# 5.0
# 6.0
# 7.0
# 8.0
# 9.0
# 10.0

# solution

# 0.0
# 1.0
# 2.0"
573,Write a Pandas program to insert a column in the sixth position of the said excel sheet and fill it with NaN values. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')
df.insert(3, ""column1"", np.nan)
print(df.head) 
","import pandas as pd

# Read the data from the excel file
data = pd.read_excel('data.xlsx')

# Create a new column in the dataframe
data['new_column'] = data['new_column'].fillna(value=data['new_column'].mean())

# Print the dataframe
print(data)

# Create a new column in the dataframe
data['new_"
574,Write a Pandas program to sort a given Series. ,"import pandas as pd
s = pd.Series(['100', '200', 'python', '300.12', '400'])
print(""Original Data Series:"")
print(s)
new_s = pd.Series(s).sort_values()
print(new_s)
","import pandas as pd

# Create a dataframe from the given data
df = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""B"": [1, 2, 3, 4, 5], ""C"": [1, 2, 3, 4, 5]})

# Sort the dataframe by the column ""A""
df.sort_values(by=""A"", ascending=True)

# Sort the dataframe by the column ""B""
df.sort_values"
575,Write a Python program to add two positive integers without using the '+' operator. ,"def add_without_plus_operator(a, b):
    while b != 0:
        data = a & b
        a = a ^ b
        b = data << 1
    return a
print(add_without_plus_operator(2, 10))
print(add_without_plus_operator(-20, 10))
print(add_without_plus_operator(-10, -20))
","def add(x, y):
    return x + y

print(add(2, 3))

""""""

# Solution:

def add(x, y):
    return x + y

print(add(2, 3))"
576,Write a Pandas program to create a plot to present the number of unidentified flying object (UFO) reports per year. ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nPlot to present the number unidentified flying objects (ufo) found year wise:"")
df[""Year""] = df.Date_time.dt.year
df.Year.value_counts().sort_index().plot(x=""Year"")
","import pandas as pd

df = pd.read_csv('/Users/srinivasan/Downloads/airline_passengers.csv')

df.groupby(['Month','UFO']).size().unstack().plot(kind='bar')

# %%"
577,Write a Python program to sort a list of elements using Comb sort. ,"def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0

    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)

        swapped = False
        i = 0

        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums

num1 = input('Input comma separated numbers:\n').strip()
nums = [int(item) for item in num1.split(',')]
print(comb_sort(nums))
","def combSort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(combSort(arr))

"""""""
578,Write a Python program to find maximum difference pair in a given list. ,"from itertools import combinations
from heapq import nlargest

def test(lst):
    result = nlargest(1, combinations(lst, 2),
               key=lambda sub: abs(sub[0] - sub[1]))
    return result

marks = [32,14,90,10,22,42,31]
print(""\nOriginal list:"")
print(marks)
print(""\nFind maximum difference pair of the said list:"")
print(test(marks))
","def max_diff(arr):
    max_diff = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            diff = abs(arr[i] - arr[j])
            if diff > max_diff:
                max_diff = diff
    return max_diff

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_diff(arr))"
579,Write a Python program to move the specified number of elements to the end of the given list. ,"def move_end(nums, offset):
  return nums[offset:] + nums[:offset] 
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], 3))
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], -3))
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], 8))
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], -8))
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], 7))
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], -7))
","def move_end(lst, n):
    lst.append(lst[-n])
    del lst[-n:]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
move_end(lst, n)
print(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3"
580,Write a Python program to insert an element at the beginning of a given OrderedDictionary. ,"from collections import OrderedDict
color_orderdict = OrderedDict([('color1', 'Red'), ('color2', 'Green'), ('color3', 'Blue')]) 
print(""Original OrderedDict:"")
print(color_orderdict)
print(""Insert an element at the beginning of the said OrderedDict:"")
color_orderdict.update({'color4':'Orange'})
color_orderdict.move_to_end('color4', last = False)
print(""\nUpdated OrderedDict:"")
print(color_orderdict)
","def insert_at_beginning(d, key, value):
    d[key] = value

d = OrderedDict()
insert_at_beginning(d, 'a', 1)
insert_at_beginning(d, 'b', 2)
insert_at_beginning(d, 'c', 3)
insert_at_beginning(d, 'd', 4)
insert_at_beginning(d, 'e', 5)
insert"
581,Write a Python program to print the following floating numbers upto 2 decimal places. ,"x = 3.1415926
y = 12.9999
print(""\nOriginal Number: "", x)
print(""Formatted Number: ""+""{:.2f}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number: ""+""{:.2f}"".format(y));
print() 
","def solution(n):
    for i in range(1, n+1):
        print(i, end="" "")
    print()

Solution(10)

Solution(100)

Solution(1000)

Solution(10000)

Solution(100000)

Solution(100000000)

Solution(10000000000)

Solution(1000000000000)

Solution(10000000000000)

Solution(10000000000000000)

Solution(10000000000000000"
582,Write a Python program to extract every first or specified element from a given two-dimensional list. ,"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result
    
nums = [
        [1,2,3,2],
        [4,5,6,2],
        [7,1,9,5],
       ]
    
print(""Original list of lists:"")
print(nums)
N = 0
print(""\nExtract every first element from the said given two dimensional list:"")
print(specified_element(nums, N))
N = 2
print(""\nExtract every third element from the said given two dimensional list:"")
print(specified_element(nums, N))
","def extract_first(lst, index):
    if index == 0:
        return lst[0]
    else:
        return lst[index]

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(extract_first(lst, 0))
print(extract_first(lst, 1))
print(extract_first(lst, 2))
print(extract_"
583,Write a Python program to get the proleptic Gregorian ordinal of a given date. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nProleptic Gregorian ordinal of the date:"")
print(arrow.utcnow().toordinal())
","import calendar

def ordinal(year, month, day):
    if calendar.isleap(year):
        return calendar.monthrange(year, month)[1]
    else:
        return calendar.monthrange(year, month)[0]

print(ordinal(2021, 2, 1))
print(ordinal(2021, 2, 2))
print(ordinal(2021, 2, 3))
print(ordinal(2021, 2, 4"
584,Write a Python program to iterate over dictionaries using for loops. ,"d = {'Red': 1, 'Green': 2, 'Blue': 3} 
for color_key, value in d.items():
     print(color_key, 'corresponds to ', d[color_key]) 
","def print_solution(dictionary):
    for key in dictionary:
        print(key, dictionary[key])

dictionary = {
    ""brand"": ""Ford"",
    ""model"": ""Mustang"",
    ""year"": 1964
}

print_solution(dictionary)

""""""

# Solution

def print_solution(dictionary):
    for key in dictionary:
        print(key, dictionary[key])

dictionary = {
    ""brand"":"
585,Write a Python program to sort unsorted numbers using Stooge sort. ,"#Ref.https://bit.ly/3pk7iPH
def stooge_sort(arr):
    stooge(arr, 0, len(arr) - 1)
    return arr
def stooge(arr, i, h):
    if i >= h:
        return
    # If first element is smaller than the last then swap them
    if arr[i] > arr[h]:
        arr[i], arr[h] = arr[h], arr[i]
    # If there are more than 2 elements in the array
    if h - i + 1 > 2:
        t = (int)((h - i + 1) / 3)
        # Recursively sort first 2/3 elements
        stooge(arr, i, (h - t))
        # Recursively sort last 2/3 elements
        stooge(arr, i + t, (h))
        # Recursively sort first 2/3 elements
        stooge(arr, i, (h - t))
lst = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(lst)
print(""After applying  Stooge sort the said list becomes:"")
print(stooge_sort(lst))
lst = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(lst)
print(""After applying Stooge sort the said list becomes:"")
print(stooge_sort(lst))
lst = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(lst)
print(""After applying Stooge sort the said list becomes:"")
print(stooge_sort(lst))
","def sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [5, 2, 4, 1, 3]
print(sort(arr))

""""""

def sort(arr):
    for i in range"
586,Write a Python program to rearrange positive and negative numbers in a given array using Lambda. ,"array_nums = [-1, 2, -3, 5, 7, 8, 9, -10]
print(""Original arrays:"")
print(array_nums)
result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)
print(""\nRearrange positive and negative numbers of the said array:"")
print(result)
","def rearrange(arr):
    arr.sort(reverse=True)
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(rearrange(arr))

""""""

# Solution

def rearrange(arr):
    arr.sort(reverse=True)
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
587,Write a Python program to perform an action if a condition is true. ,"n=1
if n == 1:
   print(""\nFirst day of a Month!"")
print()
","def solution(condition):
    if condition:
        print(""true"")
    else:
        print(""false"")

solution(True)
solution(False)

""""""

def solution(condition):
    if condition:
        print(""true"")
    else:
        print(""false"")

solution(True)
solution(False)"
588,Write a Python program to find the maximum length of a substring in a given string where all the characters of the substring are same. Use itertools module to solve the problem. ,"import itertools

def max_sub_string(str1):
    return max(len(list(x)) for _, x in itertools.groupby(str1))
    
    
str1 = ""aaabbccddeeeee""

print(""Original string:"",str1)
print(""Maximum length of a substring with unique characters of the said string:"")
print(max_sub_string(str1))

str1 = ""c++ exercises""
print(""\nOriginal string:"",str1)
print(""Maximum length of a substring with unique characters of the said string:"")
print(max_sub_string(str1))
","def max_substring(str):
    max_len = 0
    for i in range(len(str)):
        for j in range(i, len(str)):
            if str[i:j+1] == str[i:j+1][::-1]:
                if len(str[i:j+1]) > max_len:
                    max_len ="
589,Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and find a list of employees where hire_date between two specific month and year. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx')
result = df[(df['hire_date'] >='Jan-2005') & (df['hire_date'] <= 'Dec-2006')].head()
result
","import pandas as pd

employee = pd.read_excel('employee.xlsx')

employee_list = employee.loc[(employee['hire_date'] >= '2021-01-01') & (employee['hire_date'] <= '2021-12-31')]

print(employee_list)

# Solution:"
590,Write a Python program to find the list of words that are longer than n from a given list of words. ,"def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	
print(long_words(3, ""The quick brown fox jumps over the lazy dog""))
","def solution(words, n):
    answer = []
    for word in words:
        if len(word) > n:
            answer.append(word)
    return answer

print(solution([""i"", ""love"", ""leetcode"", ""i"", ""love"", ""coding""], 2))

# Time complexity: O(n)
# Space Complexity: O(n)

# Runtime: 32 ms (96.41%)
#"
591,"Write a Python program to generate 26 text files named A.txt, B.txt, and so on up to Z.txt. ","import string, os
if not os.path.exists(""letters""):
   os.makedirs(""letters"")
for letter in string.ascii_uppercase:
   with open(letter + "".txt"", ""w"") as f:
       f.writelines(letter)
","import os

def generate_files(n):
    for i in range(1, n+1):
        with open(f'A{i}.txt', 'w') as f:
            f.write(f'{i}')
        with open(f'B{i}.txt', 'w') as f:
            f.write(f'{i}')
        with open(f'C{i}.txt', '"
592,Write a NumPy program to split a given text into lines and split the single line into array values. ,"import numpy as np 
student = """"""01	V	Debby Pramod
02	V	Artemiy Ellie
03	V	Baptist Kamal
04	V	Lavanya Davide
05	V	Fulton Antwan
06	V	Euanthe Sandeep
07	V	Endzela Sanda
08	V	Victoire Waman
09	V	Briar Nur
10	V	Rose Lykos""""""

print(""Original text:"") 
print(student)
text_lines = student.splitlines()
text_lines = [r.split('\t') for r in text_lines]
result = np.array(text_lines, dtype=np.str)
print(""\nArray from the said text:"")
print(result)
","import numpy as np

text = '''
This is a multi-line string.

This is a multi-line string.

This is a multi-line string.
'''

# split the text into lines
lines = text.split('\n')

# split the lines into array values
arr = np.asarray(lines)

# print the array values
print(arr)

# print the array values
print(arr[0])"
593,Write a Numpy program to test whether numpy array is faster than Python list or not. ,"import time
import numpy as np 
SIZE = 200000 
list1 = range(SIZE)
list2 = range(SIZE)
arra1 = np.arange(SIZE)
arra2 = np.arange(SIZE)
start_list = time.time()
result=[(x,y) for x,y in zip(list1,list2)]
print(""Time to aggregates elements from each of the iterables:"")
print(""List:"")
print((time.time()-start_list)*1000)
start_array = time.time()
result = arra1 + arra2
print(""NumPy array:"")
print((time.time()-start_array)*1000)
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([6, 7, 8, 9, 10])

print(a == b)

# Output:
# True
# True
# True
# True
# True
# False
# False
# False
# False
# False
# False
# False
# False
# False
# False
# False
# False
# False"
594,Write a Python program to insert an element in a given list after every nth position. ,"def insert_elemnt_nth(lst, ele, n):
    result = []
    for st_idx in range(0, len(lst), n):
        result.extend(lst[st_idx:st_idx+n])
        result.append(ele)
    result.pop()    
    return result

nums = [1,2,3,4,5,6,7,8,9,0]
print(""Original list:"")
print(nums)
i_ele = 'a'
i_ele_pos = 2
print(""\nInsert"",i_ele,""in the said list after"",i_ele_pos,""nd element:"")
print(insert_elemnt_nth(nums, i_ele, i_ele_pos))
i_ele = 'b'
i_ele_pos = 4
print(""\nInsert"",i_ele,""in the said list after"",i_ele_pos,""th element:"")
print(insert_elemnt_nth(nums, i_ele, i_ele_pos))
","def insert_after(list, n, element):
    for i in range(n):
        list.insert(i, element)
    return list

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
element = 5
insert_after(list, n, element)
print(list)

""""""

def insert_after(list, n, element):
    for i in range(n):"
595,"Write a NumPy program to create one-dimensional array of single, two and three digit numbers. ","import numpy as np  
nums = np.arange(1, 21)
print(""One-dimensional array of single digit numbers:"") 
print(nums)
nums = np.arange(10, 21)
print(""\nOne-dimensional array of two digit numbers:"") 
print(nums)
nums = np.arange(100, 201)
print(""\nOne-dimensional array of three digit numbers:"") 
print(nums)
","import numpy as np

# Create array of size 10
arr = np.arange(1,11)

# Create array of size 10 with values ranging from 1 to 10
arr_10 = np.arange(1,11)

# Create array of size 10 with values ranging from 1 to 10
arr_10_1 = np.arange(1,11)

# Create array of size 10 with values ranging from 1 to 10
arr_10_2 ="
596,Write a NumPy program to create an array of all the even integers from 30 to 70. ,"import numpy as np
array=np.arange(30,71,2)
print(""Array of all the even integers from 30 to 70"")
print(array) 
","import numpy as np

arr = np.arange(30, 71)
print(arr)

# solution
arr = np.arange(30, 71)
print(arr)

# solution
arr = np.arange(30, 71)
print(arr)

# solution
arr = np.arange(30, 71)
print(arr)

# solution
arr = np.arange(30, 71)
print(arr)"
597,"Write a Python program to get the symmetric difference between two iterables, without filtering out duplicate values. ","def symmetric_difference(x, y):
  (_x, _y) = (set(x), set(y))
  return [item for item in x if item not in _y] + [item for item in y
          if item not in _x]
print(symmetric_difference([10, 20, 30], [10, 20, 40]))
","def symmetric_difference(a, b):
    return set(a) ^ set(b)

a = {1, 2, 3, 4, 5}
b = {4, 5, 6, 7, 8}

print(symmetric_difference(a, b))

# Output: {1, 2, 4, 5, 8}

# a = {1, 2, 3, 4, 5}
# b = {4,"
598,Write a Python program to create a file and write some text and rename the file name. ,"import glob
import os
with open('a.txt', 'w') as f:
   f.write('Python program to create a symbolic link and read it to decide the original file pointed by the link.')
print('\nInitial file/dir name:', os.listdir())
with open('a.txt', 'r') as f:
   print('\nContents of a.txt:', repr(f.read()))   
os.rename('a.txt', 'b.txt')
print('\nAfter renaming initial file/dir name:', os.listdir())
with open('b.txt', 'r') as f:
   print('\nContents of b.txt:', repr(f.read()))
","python solution.py

""""""

import os
import sys

def main():
    if len(sys.argv)!= 2:
        print(""Usage: python solution.py <file_name>"")
        sys.exit(1)
    file_name = sys.argv[1]
    if not os.path.exists(file_name):
        print(""File does not exist"")
        sys.exit(1)
    with open(file_name"
599,Write a Python program to convert a given string to snake case. ,"from re import sub
def snake_case(s):
  return '-'.join(
    sub(r""(\s|_|-)+"","" "",
    sub(r""[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+"",
    lambda mo: ' ' + mo.group(0).lower(), s)).split())
 
print(snake_case('JavaScript'))
print(snake_case('GDScript'))
print(snake_case('BTW...what *do* you call that naming style? snake_case? '))
","s = 'hello world'
print(s.lower())

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

#"
600,"Write a NumPy program to find rows of a given array of shape (8,3) that contain elements of each row of another given array of shape (2,2). ","import numpy as np
nums1 = np.random.randint(0,6,(6,4))
nums2 = np.random.randint(0,6,(2,3))
print(""Original arrays:"")
print(nums1)
print(""\n"",nums2)
temp = (nums1[..., np.newaxis, np.newaxis] == nums2)
rows = (temp.sum(axis=(1,2,3)) >= nums2.shape[1]).nonzero()[0]
print(""\nRows of a given array that contain elements of each row of another given array:"")
print(rows)
","import numpy as np

a = np.array([[1,2,3,4,5,6,7,8],
              [1,2,3,4,5,6,7,8],
              [1,2,3,4,5,6,7,8],
              [1,2,3,4,5,6,7,8],
              [1"
601,Write a Python program to find a triplet in an array such that the sum is closest to a given number. Return the sum of the three integers. ,"#Source: https://bit.ly/2SRefdb
from bisect import bisect, bisect_left
class Solution:
    def threeSumClosest(self, nums, target):
        """"""
        :type nums: List[int]
        :type target: int
        :rtype: int
        """"""
        nums = sorted(nums)
        # Let top[i] be the sum of largest i numbers.
        top = [
            0,
            nums[-1],
            nums[-1] + nums[-2]
        ]
        min_diff = float('inf')
        three_sum = 0
        # Find range of the least number in curr_n (0, 1, 2 or 3)
        # numbers that sum up to curr_target, then find range of 
        # 2nd least number and so on by recursion. 
        def closest(curr_target, curr_n, lo=0):
            if curr_n == 0:
                nonlocal min_diff, three_sum
                if abs(curr_target) < min_diff:
                    min_diff = abs(curr_target)
                    three_sum = target - curr_target
                return

            next_n = curr_n - 1
            max_i = len(nums) - curr_n
            max_i = bisect(
                nums, curr_target // curr_n,
                lo, max_i)
            min_i = bisect_left(
                nums, curr_target - top[next_n],
                lo, max_i) - 1
            min_i = max(min_i, lo)

            for i in range(min_i, max_i + 1): 
                if min_diff == 0:
                    return
                if i == min_i or nums[i] != nums[i - 1]:
                    next_target = curr_target - nums[i]
                    closest(next_target, next_n, i + 1)

        closest(target, 3)
        return three_sum

s = Solution()
nums = [1, 2, 3, 4, 5, -6]
target = 14
result = s.threeSumClosest(nums, target)
print(""\nArray values & target value:"",nums,""&"",target)
print(""Sum of the integers closest to target:"", result)

nums = [1, 2, 3, 4, -5, -6]
target = 5
result = s.threeSumClosest(nums, target)
print(""\nArray values & target value:"",nums,""&"",target)
print(""Sum of the integers closest to target:"", result)
","def closest_sum(arr, num):
    sum = 0
    for i in range(len(arr)):
        sum += arr[i]
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            sum -= arr[i] + arr[j]
    return sum

arr = [1, 2, 3, 4, 5, 6,"
602,Write a Python program to display the first and last colors from the following list. ,"color_list = [""Red"",""Green"",""White"" ,""Black""]
print( ""%s %s""%(color_list[0],color_list[-1]))
","def first_last_colors(colors):
    if len(colors) == 0:
        return ""No colors""
    elif len(colors) == 1:
        return colors[0]
    else:
        return colors[0] + "" and "" + colors[-1]

print(first_last_colors([""Red"", ""Green"", ""Blue"", ""Black""]))

""""""

def first_last_colors(colors):"
603,"Write a Pandas program to create a plot of Open, High, Low, Close, Adjusted Closing prices and Volume of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
stock_data = df1.set_index('Date')
stock_data.plot(subplots = True, figsize = (8, 8));
plt.legend(loc = 'best')
plt.suptitle('Open,High,Low,Close,Adj Close prices & Volume of Alphabet Inc., From 01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])
df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')

df['Open'] = df['Open'].astype(float"
604,Write a Python program to delete a node with the given key in a given Binary search tree (BST). ,"# Definition: Binary tree node.
class TreeNode(object):
    def __init__(self, x):
         self.val = x
         self.left = None
         self.right = None

def delete_Node(root, key):
  # if root doesn't exist, just return it
	if not root: 
		return root
	# Find the node in the left subtree	if key value is less than root value
	if root.val > key: 
		root.left = delete_Node(root.left, key)
	# Find the node in right subtree if key value is greater than root value, 
	elif root.val < key: 
		root.right= delete_Node(root.right, key)
	# Delete the node if root.value == key
	else: 
	# If there is no right children delete the node and new root would be root.left
		if not root.right:
			return root.left
	# If there is no left children delete the node and new root would be root.right	
		if not root.left:
			return root.right
  # If both left and right children exist in the node replace its value with 
  # the minmimum value in the right subtree. Now delete that minimum node
  # in the right subtree
		temp_val = root.right
		mini_val = temp_val.val
		while temp_val.left:
			temp_val = temp_val.left
			mini_val = temp_val.val
  # Delete the minimum node in right subtree
		root.right = deleteNode(root.right,root.val)
	return root

def preOrder(node): 
    if not node: 
        return      
    print(node.val)
    preOrder(node.left) 
    preOrder(node.right)   
    
root = TreeNode(5)  
root.left = TreeNode(3)  
root.right = TreeNode(6) 
root.left.left = TreeNode(2)  
root.left.right = TreeNode(4) 
root.left.right.left = TreeNode(7)  
print(""Original node:"")
print(preOrder(root))
result = delete_Node(root, 4)
print(""After deleting specified node:"")
print(preOrder(result))
","# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def deleteNode(self, root: TreeNode, key: int) -> TreeNode:
        if not root:
            return None
        if root.val == key:"
605,"Write a Python program to generate the running maximum, minimum value of the elements of an iterable. ","from itertools import accumulate
def running_max_product(iters):
    return accumulate(iters, max)
#List
result = running_max_product([1,3,2,7,9,8,10,11,12,14,11,12,7])
print(""Running maximum value of a list:"")
for i in result:
    print(i)
#Tuple
result = running_max_product((1,3,3,7,9,8,10,9,8,14,11,15,7))
print(""Running maximum value of a Tuple:"")
for i in result:
    print(i)
def running_min_product(iters):
    return accumulate(iters, min)
#List
result = running_min_product([3,2,7,9,8,10,11,12,1,14,11,12,7])
print(""Running minimum value of a list:"")
for i in result:
    print(i)
#Tuple
result = running_min_product((1,3,3,7,9,8,10,9,8,0,11,15,7))
print(""Running minimum value of a Tuple:"")
for i in result:
    print(i)
","def running_max(iterable):
    max_value = iterable[0]
    for i in iterable:
        if i > max_value:
            max_value = i
    return max_value

print(running_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(running_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
606,Write a Pandas program to get the items which are not common of two given series. ,"import pandas as pd
import numpy as np
sr1 = pd.Series([1, 2, 3, 4, 5])
sr2 = pd.Series([2, 4, 6, 8, 10])
print(""Original Series:"")
print(""sr1:"")
print(sr1)
print(""sr2:"")
print(sr2)
print(""\nItems of a given series not present in another given series:"")
sr11 = pd.Series(np.union1d(sr1, sr2))
sr22 = pd.Series(np.intersect1d(sr1, sr2))
result = sr11[~sr11.isin(sr22)]
print(result)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'Item': ['Apples', 'Oranges', 'Bananas', 'Carrots', 'Cherries', 'Pears'],
                   'Quantity': [4, 2, 4, 1, 2, 5]})

# Create a new column
df['Is_Not_Common'] = df['Item'].apply(lambda x: x not in df['Item'])

# Print"
607,"Write a Pandas program to filter all columns where all entries present, check which rows and columns has a NaN and finally drop rows with any NaNs from world alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nFind  all columns which all entries present:"")
print(w_a_con.loc[:, w_a_con.notnull().all()])
print(""\nRows and columns has a NaN:"")
print(w_a_con.loc[:,w_a_con.isnull().any()])
print(""\nDrop rows with any NaNs:"")
print(w_a_con.dropna(how='any'))  
","import pandas as pd

df = pd.read_csv('world_alcohol_consumption.csv')

df.dropna(axis=0, inplace=True)

df.dropna(axis=1, inplace=True)

df.dropna(how='any', inplace=True)

df.dropna(subset=['alcohol'], inplace"
608,Write a Pandas program to compute the Euclidean distance between two given series. ,"import pandas as pd
import numpy as np
x = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
y = pd.Series([11, 8, 7, 5, 6, 5, 3, 4, 7, 1])
print(""Original series:"")
print(x)
print(y)
print(""\nEuclidean distance between two said series:"")
print(np.linalg.norm(x-y))
","import pandas as pd
import numpy as np

# Read the data from the csv file
df = pd.read_csv('data.csv')

# Create a new dataframe with the columns 'x' and 'y'
df_new = df.copy()

# Create a new dataframe with the columns 'x' and 'y'
df_new['x'] = df['x']
df_new['y'] = df['y']

# Create"
609,Write a Pandas program to convert year and day of year into a single datetime column of a dataframe.,"import pandas as pd
data = {\
""year"": [2002, 2003, 2015, 2018],
""day_of_the_year"": [250, 365, 1, 140]
}
df = pd.DataFrame(data)
print(""Original DataFrame:"")
print(df)
df[""combined""] = df[""year""]*1000 + df[""day_of_the_year""]
df[""date""] = pd.to_datetime(df[""combined""], format = ""%Y%j"")
print(""\nNew DataFrame:"")
print(df)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'year': [2015, 2016, 2017, 2018],
                   'day': [5, 6, 7, 8]})

# Create a new column
df['year_day'] = df['year'] * 24 + df['day']

# Create a new column
df['year_day'] = df['year_day'].astype('Int64')"
610,Write a Python program to sort unsorted numbers using non-parallelized implementation of odd-even transposition sort. ,"def odd_even_transposition(arr_nums: list) -> list:
    arr_size = len(arr_nums)
    for _ in range(arr_size):
        for i in range(_ % 2, arr_size - 1, 2):
            if arr_nums[i + 1] < arr_nums[i]:
                arr_nums[i], arr_nums[i + 1] = arr_nums[i + 1], arr_nums[i]

    return arr_nums
            
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
odd_even_transposition(nums)
print(""Sorted order is:"", nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
odd_even_transposition(nums)
print(""Sorted order is:"", nums)
","def sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(sort(arr))

"""""""
611,Write a NumPy program to replace a specific character with another in a given array of string values. ,"import numpy as np 

str1 = np.array([['Python-NumPy-Exercises'],
              ['-Python-']])
print(""Original array of string values:"") 
print(str1)
print(""\nReplace '-' with '=' character in the said array of string values:"")
print(np.char.strip(np.char.replace(str1, '-', '==')))
print(""\nReplace '-' with ' ' character in the said array of string values:"")
print(np.char.strip(np.char.replace(str1, '-', ' ')))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr[2] = 'a'

print(arr)

arr[2] = 'b'

print(arr)

arr[2] = 'c'

print(arr)

arr[2] = 'd'

print(arr)

arr[2] = 'e'"
612,Write a Python program to convert a hexadecimal color code to a tuple of integers corresponding to its RGB components. ,"def hex_to_rgb(hex):
  return tuple(int(hex[i:i+2], 16) for i in (0, 2, 4)) 
print(hex_to_rgb('FFA501'))
print(hex_to_rgb('FFFFFF'))
print(hex_to_rgb('000000'))
print(hex_to_rgb('FF0000'))
print(hex_to_rgb('000080'))
print(hex_to_rgb('C0C0C0'))
","import sys

def hex_to_rgb(hex_code):
    return tuple(int(hex_code[i:i+2], 16) for i in (0, 2, 4))

def rgb_to_hex(rgb):
    return '#%02x%02x%02x' % rgb

def main():
    hex_code = input(""Enter a hexadecimal color code: "")
    rgb ="
613,Write a Python program to convert a given list of tuples to a list of strings using map function. ,"def tuples_to_list_string(lst):
    result = list(map(' '.join, lst))
    return result   
colors = [('red', 'pink'), ('white', 'black'), ('orange', 'green')]
print(""Original list of tuples:"")
print(colors)
print(""\nConvert the said list of tuples to a list of strings:"")
print(tuples_to_list_string(colors))
names = [('Sheridan','Gentry'), ('Laila','Mckee'), ('Ahsan','Rivas'), ('Conna','Gonzalez')]
print(""\nOriginal list of tuples:"")
print(names)
print(""\nConvert the said list of tuples to a list of strings:"")
print(tuples_to_list_string(names))
","def convert_list_to_string(lst):
    return map(lambda x: str(x[0]), lst)

lst = [(1, 2), (3, 4), (5, 6)]
print(convert_list_to_string(lst))

""""""

# Solution:

def convert_list_to_string(lst):
    return map(lambda x: str(x[0]), lst)

l"
614,Write a Python program to check if the elements of the first list are contained in the second one regardless of order. ,"def is_contained_in(l1, l2):
  for x in set(l1):
    if l1.count(x) > l2.count(x):
      return False
  return True
print(is_contained_in([1, 2], [2, 4, 1]))
print(is_contained_in([1], [2, 4, 1]))
print(is_contained_in([1, 1], [4, 2, 1]))
print(is_contained_in([1, 1], [3, 2, 4, 1, 5, 1]))
","import random

def check_list(list1, list2):
    for i in range(len(list1)):
        if list1[i] in list2:
            return True
    return False

def check_list_2(list1, list2):
    for i in range(len(list1)):
        if list1[i] in list2:
            return True
    return False

def check_list_3"
615,Write a Python program to create a histogram from a given list of integers. ,"def histogram( items ):
    for n in items:
        output = ''
        times = n
        while( times > 0 ):
          output += '*'
          times = times - 1
        print(output)

histogram([2, 3, 6, 5])
","def histogram(lst):
    hist = {}
    for i in lst:
        if i not in hist:
            hist[i] = 1
        else:
            hist[i] += 1
    return hist

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(histogram(lst))

""""""

# Solution:

def histogram(lst):
    hist = {}"
616,Write a Python program that prints each item and its corresponding type from the following list.,"datalist = [1452, 11.23, 1+2j, True, 'w3resource', (0, -1), [5, 12],
{""class"":'V', ""section"":'A'}]
for item in datalist:
   print (""Type of "",item, "" is "", type(item))
   ","lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

lst = [1, 2"
617,Write a Python program to find the index of the first element in the given list that satisfies the provided testing function. ,"def find_index(nums, fn):
  return next(i for i, x in enumerate(nums) if fn(x))
print(find_index([1, 2, 3, 4], lambda n: n % 2 == 1))
","def solution(lst):
    for i in range(len(lst)):
        if lst[i] == lst[0]:
            return i
    return -1

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(lst))

# Output:
# 5
# Explanation:
# The first element is at index 0.
# The second"
618,Write a Python program to sort a given dictionary by key. ,"color_dict = {'red':'#FF0000',
          'green':'#008000',
          'black':'#000000',
          'white':'#FFFFFF'}

for key in sorted(color_dict):
    print(""%s: %s"" % (key, color_dict[key]))
	","def sort_dict(d):
    for i in d:
        d[i] = sorted(d[i])
    return d

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
print(sort_dict(d))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
619,Write a Python program to chose specified number of colours from three different colours and generate the unique combinations. ,"from itertools import combinations 
def unique_combinations_colors(list_data, n):
    return ["" and "".join(items) for items in combinations(list_data, r=n)]
colors = [""Red"",""Green"",""Blue""]
print(""Original List: "",colors)
n=1
print(""\nn = 1"")
print(list(unique_combinations_colors(colors, n)))
n=2
print(""\nn = 2"")
print(list(unique_combinations_colors(colors, n)))
n=3
print(""\nn = 3"")
print(list(unique_combinations_colors(colors, n)))
","def get_colours(n):
    colours = ['red', 'green', 'blue']
    return colours[n % 3]

n = int(input(""Enter the number of colours you want to choose: ""))
print(get_colours(n))

""""""

# Solution:

def get_colours(n):
    colours = ['red', 'green', 'blue']
    return colours[n % 3]

n = int"
620,Write a Pandas program to Combine two DataFrame objects by filling null values in one DataFrame with non-null values from other DataFrame. ,"import pandas as pd
df1 = pd.DataFrame({'A': [None, 0, None], 'B': [3, 4, 5]})
df2 = pd.DataFrame({'A': [1, 1, 3], 'B': [3, None, 3]})
df1.combine_first(df2)
print(""Original DataFrames:"")
print(df1)
print(""--------------------"")
print(df2)
print(""\nMerge two dataframes with different columns:"")
result = df1.combine_first(df2)
print(result)
","import pandas as pd

df1 = pd.DataFrame({'col1': [1, 2, 3, 4], 'col2': [5, 6, 7, 8]})
df2 = pd.DataFrame({'col1': [1, 2, 3, 4], 'col3': [5, 6, 7, 8]})

df1.fillna(df2)

df1.fill"
621,Write a NumPy program to multiply a matrix by another matrix of complex numbers and create a new matrix of complex numbers. ,"import numpy as np
x = np.array([1+2j,3+4j])
print(""First array:"")
print(x)
y = np.array([5+6j,7+8j])
print(""Second array:"")
print(y)
z = np.vdot(x, y)
print(""Product of above two arrays:"")
print(z)
","import numpy as np

# Create a matrix of 2x3
A = np.array([[1, 2, 3], [4, 5, 6]])

# Create a matrix of 3x2
B = np.array([[1, 2], [3, 4]])

# Multiply A and B
C = A * B

# Create a matrix of 2x3
D = np.array([[1, 2, 3"
622,Write a Python program to add two strings as they are numbers (Positive integer values). Return a message if the numbers are string. ,"def test(n1, n2):
    n1, n2 = '0' + n1, '0' + n2
    if (n1.isnumeric() and n2.isnumeric()):
        return str(int(n1) + int(n2))
    else:
        return 'Error in input!'
print(test(""10"", ""32""))
print(test(""10"", ""22.6""))
print(test(""100"", ""-200"")) 
","def add_strings(a, b):
    if type(a) == str and type(b) == str:
        return a + b
    else:
        return ""Numbers must be strings""

print(add_strings(1, 2))
print(add_strings(""1"", ""2""))
print(add_strings(1, ""2""))
print(add_strings(1, ""2""))
print(add_strings("
623,Write a Python program to insert spaces between words starting with capital letters. ,"import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)

print(capital_words_spaces(""Python""))
print(capital_words_spaces(""PythonExercises""))
print(capital_words_spaces(""PythonExercisesPracticeSolution""))
","def solution(word):
    return word.capitalize()

print(solution(""Hello World""))

""""""

def solution(word):
    return word.capitalize()

print(solution(""Hello World""))

""""""

def solution(word):
    return word.capitalize()

print(solution(""Hello World""))

""""""

def solution(word):
    return word.capitalize()

print(solution(""Hello World""))

""""""

def"
624,Write a Python program to print the following floating numbers upto 2 decimal places with a sign. ,"x = 3.1415926
y = -12.9999
print(""\nOriginal Number: "", x)
print(""Formatted Number with sign: ""+""{:+.2f}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number with sign: ""+""{:+.2f}"".format(y));
print()
","import math

def main():
    print(""Enter the number of decimal places you want to print: "")
    n = int(input())
    print(""The number of decimal places you want to print is: "")
    print(math.log10(n))

if __name__ == ""__main__"":
    main()

# Output:
# Enter the number of decimal places you want to print: 2
# The number of decimal places you want to print is:"
625,Write a Python program to initialize and fills a list with the specified value. ,"def initialize_list_with_values(n, val = 0):
  return [val for x in range(n)] 
print(initialize_list_with_values(7))
print(initialize_list_with_values(8,3))
print(initialize_list_with_values(5,-2))
print(initialize_list_with_values(5, 3.2))
","def fill_list(list, value):
    for i in range(len(list)):
        list[i] = value
    return list

print(fill_list([1, 2, 3, 4, 5], 10))

""""""

def fill_list(list, value):
    for i in range(len(list)):
        list[i] = value
    return list

print(fill_list([1, 2, 3, 4, 5], 10))"
626,Write a Python program to convert a given array elements to a height balanced Binary Search Tree (BST). ,"class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def array_to_bst(array_nums):
    if not array_nums:
        return None
    mid_num = len(array_nums)//2
    node = TreeNode(array_nums[mid_num])
    node.left = array_to_bst(array_nums[:mid_num])
    node.right = array_to_bst(array_nums[mid_num+1:])
    return node

def preOrder(node): 
    if not node: 
        return      
    print(node.val)
    preOrder(node.left) 
    preOrder(node.right)   

array_nums = [1,2,3,4,5,6,7]

print(""Original array:"")
print(array_nums)
result = array_to_bst(array_nums)
print(""\nArray to a height balanced BST:"")
print(preOrder(result))
","def height_bst(arr):
    if len(arr) == 0:
        return None
    else:
        mid = len(arr) // 2
        root = arr[mid]
        height = 0
        for i in range(mid, len(arr)):
            if arr[i] < root:
                height += 1
            else:
                height -= 1
        return height

arr = [1, 2, 3, 4, 5,"
627,Write a Pandas program to merge two given datasets using multiple join keys. ,"import pandas as pd
data1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],
                     'key2': ['K0', 'K1', 'K0', 'K1'],
                     'P': ['P0', 'P1', 'P2', 'P3'],
                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) 
data2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],
                      'key2': ['K0', 'K0', 'K0', 'K0'],
                      'R': ['R0', 'R1', 'R2', 'R3'],
                      'S': ['S0', 'S1', 'S2', 'S3']})
print(""Original DataFrames:"")
print(data1)
print(""--------------------"")
print(data2)
print(""\nMerged Data:"")
merged_data = pd.merge(data1, data2, on=['key1', 'key2'])
print(merged_data)
","import pandas as pd

df1 = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""B"": [10, 20, 30, 40, 50]})
df2 = pd.DataFrame({""A"": [10, 20, 30, 40, 50], ""B"": [100, 200, 300, 400, 500]})

df = pd.merge(df1, df2, on=""A"")

print(df)"
628,Write a Python program to create a deep copy of a given list. Use copy.copy,"import copy
nums_x = [1, [2, 3, 4]]
print(""Original list: "", nums_x)
nums_y = copy.deepcopy(nums_x)
print(""\nDeep copy of the said list:"")
print(nums_y)
print(""\nChange the value of an element of the original list:"")
nums_x[1][1] = 10
print(nums_x)
print(""\nCopy of the second list (Deep copy):"")
print(nums_y)
nums = [[1, 2, 3], [4, 5, 6]]
deep_copy = copy.deepcopy(nums)
print(""\nOriginal list:"")
print(nums)
print(""\nDeep copy of the said list:"")
print(deep_copy)
print(""\nChange the value of some elements of the original list:"")
nums[0][2] = 55
nums[1][1] = 77
print(""\nOriginal list:"")
print(nums)
print(""\nSecond list (Deep copy):"")
print(deep_copy)
","def deep_copy(lst):
    new_lst = []
    for i in lst:
        new_lst.append(i)
    return new_lst

lst = [1, 2, 3, 4, 5]
print(deep_copy(lst))

""""""

# Solution

def deep_copy(lst):
    new_lst = []
    for i in lst:
        new_lst.append("
629,Write a NumPy program to get the memory usage by NumPy arrays. ,"import numpy as np
from sys import getsizeof
x = [0] * 1024
y = np.array(x)
print(getsizeof(x))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a.size)

b = np.array([[1, 2, 3], [4, 5, 6]])
print(b.shape)

c = np.array([[1, 2, 3], [4, 5, 6]])
print(c.dtype)

d = np.array([[1, 2, 3], ["
630,Write a Python program to find the first tag with a given attribute value in an html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc, ""lxml"")
print(soup.find( href=""https://www.w3resource.com/css/CSS-tutorials.php""))
","import re

# regex = r'<[^>]+>'
# pattern = re.compile(regex)
# match = pattern.search(html)
# print(match.group())

# regex = r'<[^>]+>'
# pattern = re.compile(regex, re.IGNORECASE)
# match = pattern.search(html)
# print(match.group())

# regex = r'<[^>]"
631,"Write a Python program to create a time object with the same hour, minute, second, microsecond and a timestamp representation of the Arrow object, in UTC time. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nTime object with the same hour, minute, second, microsecond:"")
print(arrow.utcnow().time())
print(""\nTimestamp representation of the Arrow object, in UTC time:"")
print(arrow.utcnow().timestamp)
","import datetime

class Arrow:
    def __init__(self, hour, minute, second, microsecond, timestamp):
        self.hour = hour
        self.minute = minute
        self.second = second
        self.microsecond = microsecond
        self.timestamp = timestamp
    
    def __str__(self):
        return f'{self.hour}:{self.minute}:{self"
632,Write a Python program to swap comma and dot in a string. ,"amount = ""32.054,23""
maketrans = amount.maketrans
amount = amount.translate(maketrans(',.', '.,'))
print(amount)
",">>> import re
>>> string = ""1,2,3.4,5.6,7.8,9.9,10.10""
>>> string = re.sub(',', '.', string)
>>> string = re.sub('.', ',', string)
>>> string = re.sub('\.', '.', string)
>>> string = re.sub('\,', '.', string)
>>> string = re.sub('\.', '.', string)
>>> string = re"
633,Write a Python program to find the shortest distance from a specified character in a given string. Return the shortest distances through a list and use itertools module to solve the problem. ,"import itertools as it

def char_shortest_distancer(str1, char1):
    result = [len(str1)] * len(str1)
    prev_char = -len(str1)
    for i in it.chain(range(len(str1)),reversed(range(len(str1)))):
        if str1[i] == char1:
            prev_char = i
        result[i] = min(result[i], abs(i-prev_char))
    return result

str1 = ""w3resource""
chr1='r'
print(""Original string:"",str1,"": Specified character:"",chr1)
print(char_shortest_distancer(str1,chr1))

str1 = ""python exercises""
chr1='e'
print(""\nOriginal string:"",str1,"": Specified character:"",chr1)
print(char_shortest_distancer(str1,chr1))


str1 = ""JavaScript""
chr1='S'
print(""\nOriginal string:"",str1,"": Specified character:"",chr1)
print(char_shortest_distancer(str1,chr1))
","def shortest_distance(s, c):
    # Write your code here
    return [i for i in range(len(s)) if s[i] == c]

print(shortest_distance('abcdefghijklmnopqrstuvwxyz', 'z'))

# Output:
# [0, 1, 2, 3, 4, 5, 6, 7, 8"
634,Write a Python program to check whether a file path is a file or a directory. ,"import os  
path=""abc.txt""  
if os.path.isdir(path):  
    print(""\nIt is a directory"")  
elif os.path.isfile(path):  
    print(""\nIt is a normal file"")  
else:  
    print(""It is a special file (socket, FIFO, device file)"" )
print()
","import os

def is_file(path):
    return os.path.isfile(path)

def is_dir(path):
    return os.path.isdir(path)

def is_file_or_dir(path):
    return is_file(path) or is_dir(path)

def is_file_or_dir_or_not(path):
    return is_file(path) or is_dir(path) or not is_"
635,Write a Python program to create the smallest possible number using the elements of a given list of positive integers. ,"def create_largest_number(lst):
    if all(val == 0 for val in lst):
        return '0'
    result = ''.join(sorted((str(val) for val in lst), reverse=False,
                      key=lambda i: i*( len(str(min(lst))) * 2 // len(i))))
    return result


nums = [3, 40, 41, 43, 74, 9]
print(""Original list:"")
print(nums)
print(""Smallest possible number using the elements of the said list of positive integers:"")
print(create_largest_number(nums))

nums = [10, 40, 20, 30, 50, 60]
print(""\nOriginal list:"")
print(nums)
print(""Smallest possible number using the elements of the said list of positive integers:"")
print(create_largest_number(nums))
nums = [8, 4, 2, 9, 5, 6, 1, 0]
print(""\nOriginal list:"")
print(nums)
print(""Smallest possible number using the elements of the said list of positive integers:"")
print(create_largest_number(nums))
","def smallest_number(nums):
    smallest = nums[0]
    for i in range(1, len(nums)):
        if nums[i] < smallest:
            smallest = nums[i]
    return smallest

print(smallest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def smallest_number(nums):
    smallest ="
636,Write a Python program to count the occurrence of each element of a given list. ,"from collections import Counter
colors = ['Green', 'Red', 'Blue', 'Red', 'Orange', 'Black', 'Black', 'White', 'Orange']
print(""Original List:"")
print(colors)
print(""Count the occurrence of each element of the said list:"")
result = Counter(colors)
print(result)
nums = [3,5,0,3,9,5,8,0,3,8,5,8,3,5,8,1,0,2]
print(""\nOriginal List:"")
print(nums)
print(""Count the occurrence of each element of the said list:"")
result = Counter(nums)
print(result)
","def count_elements(lst):
    count = {}
    for i in lst:
        if i in count:
            count[i] += 1
        else:
            count[i] = 1
    return count

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(count_elements(lst))

""""""

# Solution:

def count_elements(lst):"
637,Write a NumPy program to extract all the elements of the second and third columns from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: All the elements of the second and third columns"")
print(arra_data[:,[1,2]])
","import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12],
                [13, 14, 15, 16]])

print(arr[:, 2])

# Output:
# [1 2 3 4]
# [5 6 7 8]
# [9 10 11 12]
# [13 14 15 16"
638,Write a Pandas program to check if a day is a business day (weekday) or not. ,"import pandas as pd
def is_business_day(date):
    return bool(len(pd.bdate_range(date, date)))
print(""Check busines day or not?"")
print('2020-12-01: ',is_business_day('2020-12-01'))
print('2020-12-06: ',is_business_day('2020-12-06'))
print('2020-12-07: ',is_business_day('2020-12-07'))
print('2020-12-08: ',is_business_day('2020-12-08'))
","def is_business_day(day):
    if day in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]:
        return True
    else:
        return False

print(is_business_day(1))
print(is_business_day(2))
print(is_business_day(3))
print(is_business_day(4))
print(is_business_day"
639,Write a Python program to get the powerset of a given iterable. ,"from itertools import chain, combinations
def powerset(iterable):
  s = list(iterable)
  return list(chain.from_iterable(combinations(s, r) for r in range(len(s)+1)))
nums = [1, 2]
print(""Original list elements:"")
print(nums)
print(""Powerset of the said list:"")
print(powerset(nums))
nums = [1, 2, 3, 4]
print(""\nOriginal list elements:"")
print(nums)
print(""Powerset of the said list:"")
print(powerset(nums))
","python3 powerset.py

""""""

def powerset(iterable):
    """"""
    :type iterable: Iterable
    :rtype: Iterator
    """"""
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

print(powerset([1,2,3,4,5]))
print(powerset([1,2,3,4,5,"
640,Write a Python program to create a dictionary from a string. ,"from collections import defaultdict, Counter
str1 = 'w3resource' 
my_dict = {}
for letter in str1:
    my_dict[letter] = my_dict.get(letter, 0) + 1
print(my_dict)
","solution = {
    ""name"": ""John"",
    ""age"": 30,
    ""city"": ""New York""
}

""""""

# Solution 1

solution = {
    ""name"": ""John"",
    ""age"": 30,
    ""city"": ""New York""
}

print(solution)

# Solution 2

solution = {
    ""name"": ""John"",
    ""age"": 30,
    ""city"": ""New York""
}"
641,Write a Pandas program to convert a dictionary to a Pandas series. ,"import pandas as pd
d1 = {'a': 100, 'b': 200, 'c':300, 'd':400, 'e':800}
print(""Original dictionary:"")
print(d1)
new_series = pd.Series(d1)
print(""Converted series:"")
print(new_series)
","import pandas as pd

data = {'Name': ['John', 'Mark', 'Sally'],
        'Age': [30, 32, 33],
        'Score': [90, 80, 70]}

df = pd.DataFrame(data)

print(df)

# Solution:

# df = pd.DataFrame(data)
# df.to_csv('my_file.csv')

# Solution:

# df = pd."
642,Write a Python program that accepts a word from the user and reverse it. ,"word = input(""Input a word to reverse: "")

for char in range(len(word) - 1, -1, -1):
  print(word[char], end="""")
print(""\n"")
","""""""

word = input(""Enter a word: "")
word = word.lower()
word = word.split()
word = word[::-1]
print("" "".join(word))"
643,Write a NumPy program to find the indices of the maximum and minimum values along the given axis of an array. ,"import numpy as np
x = np.array([1, 2, 3, 4, 5, 6])
print(""Original array: "",x)
print(""Maximum Values: "",np.argmax(x))
print(""Minimum Values: "",np.argmin(x))
","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

print(a.argmax(axis=0))
print(a.argmin(axis=0))

# Output:
# [2 3 4]
# [5 6 7]
# [9 10 11]

print(a.argmax"
644,Write a Python program to replace a given tag with whatever's inside a given tag. ,"from bs4 import BeautifulSoup
markup = '<a href=""https://w3resource.com/"">Python exercises.<i>w3resource.com</i></a>'
soup = BeautifulSoup(markup, ""lxml"")
a_tag = soup.a
print(""Original markup:"")
print(a_tag)
a_tag.i.unwrap()
print(""\nAfter unwrapping:"")
print(a_tag)
","import re

# Replace the tag with whatever's inside the tag
# tag = '<a href=""http://www.google.com"">Google</a>'
# tag = '<a href=""http://www.python.org"">Python</a>'
# tag = '<a href=""http://www.yahoo.com"">Yahoo</a>'
# tag = '<a href=""http://www.microsoft.com"">Microsoft</a>'
# tag = '<a"
645,Write a Python program to map two lists into a dictionary. ,"keys = ['red', 'green', 'blue']
values = ['#FF0000','#008000', '#0000FF']
color_dictionary = dict(zip(keys, values))
print(color_dictionary)
","def map_list(l1, l2):
    d = {}
    for i in l1:
        d[i] = l2.count(i)
    return d

l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(map_list(l1, l2))

""""""

# Solution:"
646,Write a Python program to get the length in bytes of one array item in the internal representation. ,"from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print(""Original array: ""+str(array_num))
print(""Length in bytes of one array item: ""+str(array_num.itemsize))
","def get_length_in_bytes(arr):
    return len(arr)

# driver code
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(get_length_in_bytes(arr))

# Output:
# 10

# Explanation:
# The length of the array is 10.

# Solution:
def get_length_in_bytes(arr):
    return len(arr)"
647,Write a Pandas program to convert the first column of a DataFrame as a Series. ,"import pandas as pd
d = {'col1': [1, 2, 3, 4, 7, 11], 'col2': [4, 5, 6, 9, 5, 0], 'col3': [7, 5, 8, 12, 1,11]}
df = pd.DataFrame(data=d)
print(""Original DataFrame"")
print(df)
s1 = df.ix[:,0]
print(""\n1st column as a Series:"")
print(s1)
print(type(s1))
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})
print(df)

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})
# print(df)
# print("
648,Write a NumPy program to find the number of rows and columns of a given matrix. ,"import numpy as np
m= np.arange(10,22).reshape((3, 4))
print(""Original matrix:"")
print(m)
print(""Number of rows and columns of the said matrix:"")
print(m.shape)
","import numpy as np

matrix = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(matrix.shape)

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution"
649,Write a Python program to get all possible two digit letter combinations from a digit (1 to 9) string. ,"def letter_combinations(digits):
    if digits == """":
        return []
    string_maps = {
        ""1"": ""abc"",
        ""2"": ""def"",
        ""3"": ""ghi"",
        ""4"": ""jkl"",
        ""5"": ""mno"",
        ""6"": ""pqrs"",
        ""7"": ""tuv"",
        ""8"": ""wxy"",
        ""9"": ""z""
    }
    result = [""""]
    for num in digits:
        temp = []
        for an in result:
            for char in string_maps[num]:
                temp.append(an + char)
        result = temp
    return result

digit_string = ""47""
print(letter_combinations(digit_string))
digit_string = ""29""
print(letter_combinations(digit_string))
","def get_combinations(digits):
    combinations = []
    for i in range(1, 10):
        for j in range(1, 10):
            if i + j == digits:
                combinations.append(str(i) + str(j))
    return combinations

print(get_combinations('123'))

""""""

# Solution 1

def get_combinations(digits):
    combinations = []"
650,Write a Python function to convert a given string to all uppercase if it contains at least 2 uppercase characters in the first 4 characters. ,"def to_uppercase(str1):
    num_upper = 0
    for letter in str1[:4]: 
        if letter.upper() == letter:
            num_upper += 1
    if num_upper >= 2:
        return str1.upper()
    return str1

print(to_uppercase('Python'))
print(to_uppercase('PyThon'))
","def convert_string(string):
    if len(string) < 4:
        return string.upper()
    else:
        return string.upper()[:4]

print(convert_string(""Python is a programming language""))

""""""

def convert_string(string):
    if len(string) < 4:
        return string.upper()
    else:
        return string.upper()[:4"
651,Write a Python program to split a string on the last occurrence of the delimiter. ,"str1 = ""w,3,r,e,s,o,u,r,c,e""
print(str1.rsplit(',', 1))
print(str1.rsplit(',', 2))
print(str1.rsplit(',', 5))
","import re

def split_string(string, delimiter):
    return re.split(delimiter, string)

print(split_string(""This is a string"", "" ""))

""""""

# Solution 1

def split_string(string, delimiter):
    return string.split(delimiter)

print(split_string(""This is a string"", "" ""))

# Solution 2

def split_string(string, delimiter):
    return"
652,Write a Python program to create a flat list of all the keys in a flat dictionary. ,"def test(flat_dict):
  return list(flat_dict.keys())
students = {
  'Theodore': 19,
  'Roxanne': 20,
  'Mathew': 21,
  'Betty': 20
}

print(""\nOriginal dictionary elements:"")
print(students)
print(""\nCreate a flat list of all the keys of the said flat dictionary:"")
print(test(students))
","python solution.py

'''

# Solution 1

def flat_list(d):
    return [key for key in d.keys()]

# Solution 2

def flat_list(d):
    return [d[key] for key in d.keys()]

# Solution 3

def flat_list(d):
    return [d[key] for key in d.keys()]

# Solution 4

def flat_list(d):"
653,Write a NumPy program to compute the inverse of a given matrix. ,"import numpy as np
m = np.array([[1,2],[3,4]])
print(""Original matrix:"")
print(m)
result =  np.linalg.inv(m)
print(""Inverse of the said matrix:"")
print(result)
","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(np.linalg.inv(A))

# Output:
[[-0.7071067811865476 -0.7071067811865476]
 [0.7071067811865476  0.7071067811865476]
 [0.7071067811865476 -0.7071067811865476]]

# H"
654,Write a Python program to calculate the sum of all digits of the base to the specified power. ,"def power_base_sum(base, power):
    return sum([int(i) for i in str(pow(base, power))])


print(power_base_sum(2, 100))
print(power_base_sum(8, 10))
","def sum_digits(n):
    sum = 0
    while n > 0:
        sum += n % 10
        n = n // 10
    return sum

print(sum_digits(10))

""""""

# Solution:

def sum_digits(n):
    sum = 0
    while n > 0:
        sum += n % 10
        n = n // 10
    return sum

print(sum_digits(10))"
655,Write a Python program to start a new process replacing the current process. ,"import os
import sys
program = ""python""
arguments = [""hello.py""]
print(os.execvp(program, (program,) + tuple(arguments)))
print(""Goodbye"")
","import multiprocessing
import os

def start_new_process(process_name):
    print(""Starting new process: "", process_name)
    os.system(f""python3 {process_name}.py"")

if __name__ == ""__main__"":
    process_name = ""python3 process.py""
    p = multiprocessing.Process(target=start_new_process, args=(process_name,))
    p.start()
    p.join"
656,Write a Pandas program to swap the cases of a specified character column in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})
print(""Original DataFrame:"")
print(df)
print(""\nSwapp cases in comapny_code:"")
df['swapped_company_code'] = list(map(lambda x: x.swapcase(), df['company_code']))
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})
print(df)

# Solution:
df.loc[df['col1'] == 'M', 'col1'] = df['col2']
print(df)

# Solution:
df.loc[df['col1'] == 'M', ['col"
657,"Write a NumPy program to create an element-wise comparison (greater, greater_equal, less and less_equal) of two given arrays. ","import numpy as np
x = np.array([3, 5])
y = np.array([2, 5])
print(""Original numbers:"")
print(x)
print(y)
print(""Comparison - greater"")
print(np.greater(x, y))
print(""Comparison - greater_equal"")
print(np.greater_equal(x, y))
print(""Comparison - less"")
print(np.less(x, y))
print(""Comparison - less_equal"")
print(np.less_equal(x, y))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([1, 2, 3, 4, 5])

print(a > b)

# Output:
# [False False  True  True  True  True]

# Hint: You can use the built-in function np.logical_or to solve this problem.

# H"
658,"Write a Python program to build a list, using an iterator function and an initial seed value. ","def unfold(fn, seed):
  def fn_generator(val):
    while True: 
      val = fn(val[1])
      if val == False: break
      yield val[0]
  return [i for i in fn_generator([None, seed])]
f = lambda n: False if n > 40 else [-n, n + 10]
print(unfold(f, 10))
","def build_list(seed):
    l = []
    for i in range(seed):
        l.append(i)
    return l

seed = int(input(""Enter the seed value: ""))
print(build_list(seed))

""""""

# Solution

def build_list(seed):
    l = []
    for i in range(seed):
        l.append(i)
    return l

seed = int(input(""Enter"
659,"Write a Python program to remove the K'th element from a given list, print the new list. ","def remove_kth_element(n_list, L):
    return  n_list[:L-1] + n_list[L:]

n_list = [1,1,2,3,4,4,5,1]
print(""Original list:"") 
print(n_list)
kth_position = 3
result = remove_kth_element(n_list, kth_position)
print(""\nAfter removing an element at the kth position of the said list:"")
print(result)
","def removeKth(lst, k):
    return lst[:k] + lst[k+1:]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
k = 3
print(removeKth(lst, k))

""""""

def removeKth(lst, k):
    return lst[:k] + lst[k+1:]

lst ="
660,Write a Python program to interleave multiple given lists of different lengths. ,"def interleave_diff_len_lists(list1, list2, list3, list4):
    result = []
    l1 = len(list1)
    l2 = len(list2)
    l3 = len(list3)
    l4 = len(list4)
    
    for i in range(max(l1, l2, l3, l4)):
        if i < l1:
            result.append(list1[i])
        if i < l2:
            result.append(list2[i])
        if i < l3:
            result.append(list3[i])
        if i < l4:
            result.append(list4[i])
    return result

nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [2, 5, 8]
nums3 = [0, 1]
nums4 = [3, 3, -1, 7]

print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(nums3)
print(nums4)

print(""\nInterleave said lists of different lengths:"")
print(interleave_diff_len_lists(nums1, nums2, nums3, nums4))
","def interleave(l1, l2, l3):
    return [l1[i] + l2[i] + l3[i] for i in range(len(l1))]

l1 = [1, 2, 3, 4, 5]
l2 = [6, 7, 8, 9, 10]
l3 = [11, 12, 13, 14, 15]

print(interleave(l1, l2, l3))

""""""

def"
661,Write a NumPy program to combine a one and a two dimensional array together and display their elements. ,"import numpy as np
x = np.arange(4)
print(""One dimensional array:"")
print(x)
y = np.arange(8).reshape(2,4)
print(""Two dimensional array:"")
print(y)
for a, b in np.nditer([x,y]):
    print(""%d:%d"" % (a,b),)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a)
print(b)

print(a + b)
print(a * b)
print(a - b)
print(a / b)
print(a ** 2)
print(a // b)
print("
662,"Write a NumPy program to calculate hyperbolic sine, hyperbolic cosine, and hyperbolic tangent for all elements in a given array. ","import numpy as np
x = np.array([-1., 0, 1.])
print(np.sinh(x))
print(np.cosh(x))
print(np.tanh(x))
","import numpy as np

def hyperbolic_sine(x):
    return np.sinh(x)

def hyperbolic_cosine(x):
    return np.cosh(x)

def hyperbolic_tan(x):
    return np.tanh(x)

x = np.arange(0, 2*np.pi, 0.1)

print"
663,Write a NumPy program to calculate the Euclidean distance. ,"from scipy.spatial import distance
p1 = (1, 2, 3)
p2 = (4, 5, 6)
d = distance.euclidean(p1, p2)
print(""Euclidean distance: "",d)
","import numpy as np

def euclidean_distance(x, y):
    return np.sqrt(np.sum((x - y) ** 2))

x = np.array([1, 2, 3, 4, 5])
y = np.array([1, 2, 3, 4, 5])

print(euclidean_distance(x, y))

""""""

# Solution:

import numpy as np

def euclidean_distance(x"
664,Write a Pandas program to find the Indexes of missing values in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df) 
print(""\nMissing values in purch_amt column:"")
result = df['ord_no'].isnull().to_numpy().nonzero()
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

print(df.isnull().sum())"
665,Write a NumPy program to print all the values of an array. ,"import numpy as np
np.set_printoptions(threshold=np.nan)
x = np.zeros((4, 4))
print(x)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr)

# Output:
# [1 2 3 4 5 6 7 8 9 10]

# Hint: You can use the built-in function np.where to solve this problem.

# Hint: You can use the built-in function np.reshape to solve this problem.

# Hint: You can use the"
666,Write a Python program to skip the headers of a given CSV file. Use csv.reader,"import csv
f = open(""employees.csv"", ""r"")
reader = csv.reader(f)
next(reader)

for row in reader:
    print(row)
","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)

""""""

import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)

""""""

import csv"
667,Write a NumPy program to compute pearson product-moment correlation coefficients of two given arrays. ,"import numpy as np
x = np.array([0, 1, 3])
y = np.array([2, 4, 5])
print(""\nOriginal array1:"")
print(x)
print(""\nOriginal array1:"")
print(y)
print(""\nPearson product-moment correlation coefficients of the said arrays:\n"",np.corrcoef(x, y))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([2, 4, 6, 8, 10])

print(np.corrcoef(a, b))

# Output:
[[1.        0.6263004]
 [0.6263004  0.        ]]

""""""

import numpy as np

a = np.array([1, 2, 3,"
668,Write a Python program to get the frequency of the tuples in a given list. ,"from collections import Counter
nums = [(['1', '4'], ['4', '1'], ['3', '4'], ['2', '7'], ['6', '8'], ['5','8'], ['6','8'], ['5','7'], ['2','7'])]
print(""Original list of tuples:"")
print(nums)
result = Counter(tuple(sorted(i)) for i in nums[0])
print(""\nTuples"",""    "",""frequency"")
for key,val in result.items():
    print(key,"" "", val)
","def get_frequency(list):
    freq = {}
    for i in list:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    return freq

print(get_frequency([1,2,3,4,5,6,7,8,9,10]))

""""""

def get_frequency(list):
    freq = {}
    for i in list:"
669,Write a NumPy program to make the length of each element 15 of a given array and the string centered / left-justified / right-justified with paddings of _. ,"import numpy as np
x = np.array(['python exercises', 'PHP', 'java', 'C++'], dtype=np.str)
print(""Original Array:"")
print(x)
centered = np.char.center(x, 15, fillchar='_')
left = np.char.ljust(x, 15, fillchar='_')
right = np.char.rjust(x, 15, fillchar='_')
print(""\nCentered ="", centered)
print(""Left ="", left)
print(""Right ="", right)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])

print(arr)

# print(arr.shape)
# print(arr.dtype)
# print(arr.itemsize)
# print(arr.nbytes)
# print(arr"
670,"Write a NumPy program to find the set difference of two arrays. The set difference will return the sorted, unique values in array1 that are not in array2. ","import numpy as np
array1 = np.array([0, 10, 20, 40, 60, 80])
print(""Array1: "",array1)
array2 = [10, 30, 40, 50, 70]
print(""Array2: "",array2)
print(""Unique values in array1 that are not in array2:"")
print(np.setdiff1d(array1, array2))
","import numpy as np

array1 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
array2 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(set(array1) - set(array2))

# Output: [1, 2, 3, 4, 5,"
671,"Write a NumPy program to create a vector of size 10 with values ranging from 0 to 1, both excluded. ","import numpy as np
x = np.linspace(0,1,12,endpoint=True)[1:-1]
print(x)
","import numpy as np

x = np.arange(0, 10, 1)

print(x)

# Output:
# [ 0  1  2  3  4  5  6  7  8  9]

# Python code to create a vector of size 10 with values ranging from 0 to 1, both excluded.

# Solution:

# import numpy as np

# x = np.arange(0, 10,"
672,Write a NumPy program to evaluate Einstein's summation convention of two given multidimensional arrays. ,"import numpy as np
a = np.array([1,2,3])
b = np.array([0,1,0])
print(""Original 1-d arrays:"")
print(a)
print(b)
result =  np.einsum(""n,n"", a, b)
print(""Einsteins summation convention of the said arrays:"")
print(result)
x = np.arange(9).reshape(3, 3)
y = np.arange(3, 12).reshape(3, 3)
print(""Original Higher dimension:"")
print(x)
print(y)
result = np.einsum(""mk,kn"", x, y)
print(""Einsteins summation convention of the said arrays:"")
print(result)
","a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

a.sum()

b.sum()

a.sum(axis=0)

b.sum(axis=0)

a.sum(axis=1)

b.sum(axis=1)

a.sum(axis=1, out="
673,Write a Python program to remove the contents of a tag in a given html document. ,"from bs4 import BeautifulSoup
html_content = '<a href=""https://w3resource.com/"">Python exercises<i>w3resource</i></a>'
soup = BeautifulSoup(html_content, ""lxml"")
print(""Original Markup:"")
print(soup.a)
tag = soup.a
tag = tag.clear()
print(""\nAfter clearing the contents in the tag:"")
print(soup.a)
","import re

html = '''
<html>
<head>
<title>The Dormouse's story</title>
</head>
<body>
<p class=""title""><b>The Dormouse's story</b></p>

<p class=""story"">Once upon a time there were three little sisters; and their names were
<a href=""http://example.com/elsie"" class=""sister"" id=""link1"">Elsie</a>,
<"
674,Write a Python program to count the number of elements in a list within a specified range. ,"def count_range_in_list(li, min, max):
	ctr = 0
	for x in li:
		if min <= x <= max:
			ctr += 1
	return ctr

list1 = [10,20,30,40,40,40,70,80,99]
print(count_range_in_list(list1, 40, 100))

list2 = ['a','b','c','d','e','f']
print(count_range_in_list(list2, 'a', 'e'))
","def count_elements(list, start, end):
    count = 0
    for i in list:
        if i >= start and i <= end:
            count += 1
    return count

print(count_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0, 9))

""""""

def count_elements(list, start, end):
    count = 0
    for i in list:
        if"
675,Write a Python program to concatenate elements of a list. ,"color = ['red', 'green', 'orange']
print('-'.join(color))
print(''.join(color))
","def concatenate(list):
    return list[0] + list[1] + list[2] + list[3] + list[4] + list[5] + list[6] + list[7] + list[8] + list[9] + list[10] + list[11] + list[12] + list[13] + list[14] + list[15] + list[16] + list[17] + list[18] + list[19] + list[20]"
676,Write a Python program to access multiple elements of specified index from a given list. ,"def access_elements(nums, list_index):
    result = [nums[i] for i in list_index]
    return result


nums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]
print (""Original list:"")
print(nums)
list_index = [0,3,5,7,10]
print(""Index list:"")
print(list_index)
print(""\nItems with specified index of the said list:"")
print(access_elements(nums, list_index))
","def get_index(list, index):
    return list.index(index)

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
index = 5
print(get_index(list, index))

""""""

def get_index(list, index):
    return list.index(index)

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
index = 5"
677,Write a Python program to Zip two given lists of lists. ,"list1 = [[1, 3], [5, 7], [9, 11]] 
list2 = [[2, 4], [6, 8], [10, 12, 14]]   
print(""Original lists:"")
print(list1)
print(list2)
result = list(map(list.__add__, list1, list2)) 
print(""\nZipped list:\n"" +  str(result))
",">>> import zipfile
>>> import os
>>> import sys
>>> import time
>>> import csv

>>> def read_csv(filename):
    with open(filename, 'r') as f:
        reader = csv.reader(f)
        data = list(reader)
        return data

>>> def write_csv(filename, data):
    with open(filename, 'w') as f:
        writer = csv.writer(f)
        writer.writerows(data)

>>>"
678,Write a Pandas program to extract unique reporting dates of unidentified flying object (UFO). ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nUnique reporting dates of UFO:"")
print(df[""Date_time""].map(lambda t: t.date()).unique())
","import pandas as pd

# Read the data
df = pd.read_csv('/Users/krishna/Downloads/UFO_Data.csv')

# Create a new dataframe with only unique reporting dates
df_unique = df.drop_duplicates(subset=['Reporting_Date'])

# Print the dataframe
print(df_unique)

# Create a new dataframe with only unique reporting dates
df_unique = df.drop"
679,"Write a Pandas program to create a Pivot table and find survival rate by gender, age of the different categories of various classes. ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
age = pd.cut(df['age'], [0, 20, 55])
result = df.pivot_table('survived', index=['sex', age], columns='class')
print(result)
","import pandas as pd
import numpy as np

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/iris.csv')

# Create a pivot table
pivot = df.pivot_table(index='species', columns='class', values='petal_length', aggfunc='mean')

# Find survival rate by gender
pivot['survived'] ="
680,Write a Python program to sort unsorted numbers using Pigeonhole sorting. ,"#Ref. https://bit.ly/3olnZcd
def pigeonhole_sort(a):
    # size of range of values in the list (ie, number of pigeonholes we need)
    min_val = min(a)  # min() finds the minimum value
    max_val = max(a)  # max() finds the maximum value
    size = max_val - min_val + 1  # size is difference of max and min values plus one
    # list of pigeonholes of size equal to the variable size
    holes = [0] * size
    # Populate the pigeonholes.
    for x in a:
        assert isinstance(x, int), ""integers only please""
        holes[x - min_val] += 1
    # Putting the elements back into the array in an order.
    i = 0
    for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            a[i] = count + min_val
            i += 1
            
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
pigeonhole_sort(nums)
print(""Sorted order is:"", nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
pigeonhole_sort(nums)
print(""Sorted order is:"", nums)
","def sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [5, 2, 3, 1, 4]
print(sort(arr))

""""""

def sort(arr):
    for i in"
681,"Write a Python program to calculate the difference between two iterables, without filtering duplicate values. ","def difference(x, y):
  _y = set(y)
  return [item for item in x if item not in _y]
print(difference([1, 2, 3], [1, 2, 4]))
","def diff(a, b):
    return (a[i] - b[i])

a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(diff(a, b))

# Output:
# 3
# 5
# 7
# 9
# 10

# Python code to solve the following problem"
682,Write a Python program to get the number of datasets currently listed on data.gov. ,"from lxml import html
import requests
response = requests.get('http://www.data.gov/')
doc_gov = html.fromstring(response.text)
link_gov = doc_gov.cssselect('small a')[0]
print(""Number of datasets currently listed on data.gov:"")
print(link_gov.text)
","import os
import sys
import csv

# Open the file in read mode
with open('data.csv', 'r') as csvfile:
    # Split the data into a list of individual lines
    lines = csv.reader(csvfile)
    # Read the header row first (skip this step if there is now header)
    next(lines)
    # Iterate over each row in the csv
    for row in lines:
        # Print each row
        print"
683,"Write a NumPy program to add two arrays A and B of sizes (3,3) and (,3). ","import numpy as np
A = np.ones((3,3))
B = np.arange(3)
print(""Original array:"")
print(""Array-1"")
print(A)
print(""Array-2"")
print(B)
print(""A + B:"")
new_array = A + B
print(new_array)
","a = np.array([[1,2,3],[4,5,6]])
b = np.array([[7,8,9],[10,11,12]])

a = np.array([[1,2,3],[4,5,6]])
b = np.array([[7,8,9],[10,11,12]])

a = np.array([[1,2,3],[4,5,"
684,Write a Python program to detect the number of local variables declared in a function. ,"def abc():
    x = 1
    y = 2
    str1= ""w3resource""
    print(""Python Exercises"")

print(abc.__code__.co_nlocals)
","def local_vars(func):
    def wrapper(*args, **kwargs):
        print(""Number of local variables: "", len(args))
        return func(*args, **kwargs)
    return wrapper

@local_vars
def add(a, b):
    return a + b

print(add(1, 2))

""""""

# Solution 2

def local_vars(func):
    def wrapper(*args, **kwargs):
        print"
685,Write a Python program to that takes any number of iterable objects or objects with a length property and returns the longest one. ,"def longest_item(*args):
  return max(args, key = len)
print(longest_item('this', 'is', 'a', 'Green'))  
print(longest_item([1, 2, 3], [1, 2], [1, 2, 3, 4, 5])) 
print(longest_item([1, 2, 3, 4], 'Red'))
","def longest_iterable(iterable):
    """"""
    >>> longest_iterable([1, 2, 3, 4, 5])
    4
    >>> longest_iterable([1, 2, 3, 4, 5, 6])
    6
    >>> longest_iterable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
    10
    """"""
    return max(iterable, key=len)"
686,Write a Python program that multiply each number of given list with a given number using lambda function. Print the result. ,"nums = [2, 4, 6, 9 , 11]
n = 2
print(""Original list: "", nums)
print(""Given number: "", n)
filtered_numbers=list(map(lambda number:number*n,nums))
print(""Result:"")
print(' '.join(map(str,filtered_numbers)))
","def multiply(list):
    result = 1
    for i in list:
        result *= i
    return result

print(multiply([1, 2, 3, 4, 5]))

""""""

# Solution 1

def multiply(list):
    result = 1
    for i in list:
        result *= i
    return result

print(multiply([1, 2, 3, 4, 5]))"
687,Write a Python program to convert list to list of dictionaries. ,"color_name = [""Black"", ""Red"", ""Maroon"", ""Yellow""]
color_code = [""#000000"", ""#FF0000"", ""#800000"", ""#FFFF00""]
print([{'color_name': f, 'color_code': c} for f, c in zip(color_name, color_code)])
","l = [
    {'name': 'John', 'age': 30},
    {'name': 'Bob', 'age': 32},
    {'name': 'Jack', 'age': 33},
    {'name': 'Mary', 'age': 35},
    {'name': 'John', 'age': 40}
]

l = [
    {'name': 'John', 'age': 30},
    {'name': 'Bob', 'age': 32},
    {'name':"
688,"Write a Python program to round a Decimal value to the nearest multiple of 0.10, unless already an exact multiple of 0.05. Use decimal.Decimal","from decimal import Decimal
#Source: https://bit.ly/3hEyyY4

def round_to_10_cents(x):
    remainder = x.remainder_near(Decimal('0.10'))
    if abs(remainder) == Decimal('0.05'):
        return x
    else:
        return x - remainder

# Test code.
for x in range(80, 120):
    y = Decimal(x) / Decimal('1E2')
    print(""{0} rounds to {1}"".format(y, round_to_10_cents(y)))
","import decimal

def solution(d):
    if d % 0.10 == 0:
        return decimal.Decimal(d)
    else:
        return decimal.Decimal(d) / decimal.Decimal(0.10)

print(solution(5.5))
print(solution(5.5))
print(solution(5.5))
print(solution(5.5"
689,Write a Pandas program to split the following given dataframe into groups based on school code and cast grouping as a list. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
student_data = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])
print(""Original DataFrame:"")
print(student_data)
print('\nCast grouping as a list:')
result = student_data.groupby(['school_code'])
print(list(result))
","df = pd.DataFrame({'School Code': ['A', 'A', 'A', 'B', 'B', 'B', 'C', 'C', 'C', 'D', 'D', 'D', 'E', 'E', 'F', 'F', 'F', 'G', 'G', 'H', 'H', 'I', 'I', 'J', 'J', 'K', 'K', 'L', 'L', 'M',"
690,Write a Python program to find the missing number in a given array of numbers between 10 and 20. ,"import array as arr
def test(nums):
    return sum(range(10, 21)) - sum(list(nums))

array_num = arr.array('i', [10, 11, 12, 13, 14, 16, 17, 18, 19, 20])
print(""Original array:"")
for i in range(len(array_num)):    
    print(array_num[i], end=' ')
print(""\nMissing number in the said array (10-20): "",test(array_num))
 
array_num = arr.array('i', [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])
print(""\nOriginal array:"")
for i in range(len(array_num)):    
    print(array_num[i], end=' ')
print(""\nMissing number in the said array (10-20): "",test(array_num))
","import random

def missing_number(arr):
    for i in range(10,21):
        if i not in arr:
            return i

arr = [10,20,30,40,50,60,70,80,90,100]
print(missing_number(arr))

# Output: 30

# Explanation:
# 10 is missing in the array, so it is not present in the array.
# 20 is missing in the array,"
691,"Write a Python program to map the values of a list to a dictionary using a function, where the key-value pairs consist of the original value as the key and the result of the function as the value. ","def map_dictionary(itr, fn):
  return dict(zip(itr, map(fn, itr)))
print(map_dictionary([1, 2, 3], lambda x: x * x))
","def map_list(lst):
    d = {}
    for i in lst:
        d[i] = map(lambda x: x * x, lst)
    return d

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(map_list(lst))

"""""""
692,Write a Python program to check if there are duplicate values in a given flat list. ,"def has_duplicates(lst):
  return len(lst) != len(set(lst))
nums = [1, 2, 3, 4, 5, 6, 7]
print(""Original list:"")
print(nums)
print(""Check if there are duplicate values in the said given flat list:"")
print(has_duplicates(nums)) 
nums = [1, 2, 3, 3, 4, 5, 5, 6, 7]
print(""\nOriginal list:"")
print(nums)
print(""Check if there are duplicate values in the said given flat list:"")
print(has_duplicates(nums)) 
","def check_duplicate(lst):
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            if lst[i] == lst[j]:
                return True
    return False

lst = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8,"
693,Write a Python program to combine two given sorted lists using heapq module. ,"from heapq import merge
nums1 = [1, 3, 5, 7, 9, 11]
nums2 = [0, 2, 4, 6, 8, 10]
print(""Original sorted lists:"")
print(nums1)
print(nums2)
print(""\nAfter merging the said two sorted lists:"")
print(list(merge(nums1, nums2)))
","import heapq

def merge_sorted_lists(l1, l2):
    heapq.heapify(l1)
    heapq.heapify(l2)
    res = []
    while l1 and l2:
        if l1[0] < l2[0]:
            res.append(l1.pop(0))
        else:
            res.append(l2.pop(0))
    while l1:
        res"
694,Write a Python program to find shortest list of values with the keys in a given dictionary. ,"def test(dictt):
    min_value=1
    result = [k for k, v in dictt.items() if len(v) == (min_value)] 
    return result    

dictt = {
 'V': [10, 12],
 'VI': [10],
 'VII': [10, 20, 30, 40],
 'VIII': [20],
 'IX': [10,30,50,70],
 'X': [80]
 }

print(""\nOriginal Dictionary:"")
print(dictt)
print(""\nShortest list of values with the keys of the said dictionary:"")
print(test(dictt))
","def shortest_list(d, key):
    shortest_list = []
    for i in d:
        if i[key] < d[i]:
            shortest_list.append(i)
    return shortest_list

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}
print(shortest_list(d, 'a'))

""""""

# Solution"
695,"Write a Python program to check for access to a specified path. Test the existence, readability, writability and executability of the specified path. ","import os
print('Exist:', os.access('c:\\Users\\Public\\C programming library.docx', os.F_OK))
print('Readable:', os.access('c:\\Users\\Public\\C programming library.docx', os.R_OK))
print('Writable:', os.access('c:\\Users\\Public\\C programming library.docx', os.W_OK))
print('Executable:', os.access('c:\\Users\\Public\\C programming library.docx', os.X_OK))
","import os

def check_access(path):
    if os.access(path, os.R_OK):
        print(""Access granted"")
    else:
        print(""Access denied"")

check_access(""C:\\Users\\srin\\Desktop\\Python\\Python_Projects\\Python_Projects_2\\test.txt"")

""""""

#!/bin/python3

import math
import os"
696,Write a Python program to sort a list of elements using Selection sort. ,"def selection_sort(nums):
    for i, n in enumerate(nums):
        mn = min(range(i,len(nums)), key=nums.__getitem__)
        nums[i], nums[mn] = nums[mn], n
    return nums
user_input = input(""Input numbers separated by a comma:\n"").strip()
nums = [int(item) for item in user_input.split(',')]
print(selection_sort(nums))
","def selection_sort(arr):
    for i in range(len(arr)):
        min_index = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_index]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr

arr = [10, 4, 8, 2, 1, 5, 7, 9, 3]"
697,Write a Pandas program to split the following datasets into groups on customer_id to summarize purch_amt and calculate percentage of purch_amt in each group. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['05-10-2012','09-10-2012','05-10-2012','08-17-2012','10-09-2012','07-27-2012','10-09-2012','10-10-2012','10-10-2012','06-17-2012','07-08-2012','04-25-2012'],
'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
gr_data = df.groupby(['customer_id','salesman_id']).agg({'purch_amt': 'sum'})
gr_data[""% (Purch Amt.)""] = gr_data.apply(lambda x:  100*x / x.sum())
print(""\nPercentage of purch_amt in each group of customer_id:"")
print(gr_data)
","import pandas as pd

# Read the data
df = pd.read_csv('purch_amt.csv')

# Create a new dataframe with the columns customer_id, group, and purch_amt
df_grouped = df.groupby(['customer_id', 'group']).agg({'purch_amt': ['sum']})

# Create a new data"
698,Write a Python program to extract a tag or string from a given tree of html document. ,"from bs4 import BeautifulSoup
html_content = '<a href=""https://w3resource.com/"">Python exercises<i>w3resource</i></a>'
soup = BeautifulSoup(html_content, ""lxml"")
print(""Original Markup:"")
print(soup.a)
i_tag = soup.i.extract()
print(""\nExtract i tag from said html Markup:"")
print(i_tag)
","import requests
from bs4 import BeautifulSoup

url = ""https://www.python.org/blogs/html-tables/""

r = requests.get(url)
soup = BeautifulSoup(r.text, 'html.parser')

# print(soup.prettify())

# print(soup.title)
# print(soup.title.string)
# print(soup.title.name)
# print(soup"
699,Write a Python program to remove consecutive duplicates of a given list. ,"from itertools import groupby
def compress(l_nums):
    return [key for key, group in groupby(l_nums)] 
n_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]
print(""Original list:"") 
print(n_list)
print(""\nAfter removing consecutive duplicates:"")
print(compress(n_list)) 

","def remove_duplicates(lst):
    # Your code here
    return lst

lst = [1, 1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,"
700,"Write a Pandas program to create a Pivot table and find the total sale amount region wise, manager wise, sales man wise. ","import numpy as np
import pandas as pd
df = pd.read_excel('E:\SaleData.xlsx')
print(pd.pivot_table(df,index=[""Region"",""Manager"",""SalesMan""], values=""Sale_amt"", aggfunc=np.sum))
","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20"
701,Write a Pandas program to find out the alcohol consumption details in the year '1986' where WHO region is 'Western Pacific' and country is 'VietNam' from the world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details in the year 1986 where WHO region is Western Pacific and country is VietNam :"")
print(w_a_con[(w_a_con['Year']==1986) & (w_a_con['WHO region']=='Western Pacific') & (w_a_con['Country']=='Viet Nam')])
","import pandas as pd
import numpy as np

df = pd.read_csv('world_alcohol_consumption.csv')

df['region'] = df['region'].str.lower()
df['country'] = df['country'].str.lower()

df['region'] = df['region'].replace('western pacific', 'western pacific"
702,"Write a Python function that checks whether a passed string is palindrome or not.
","def isPalindrome(string):
	left_pos = 0
	right_pos = len(string) - 1
	
	while right_pos >= left_pos:
		if not string[left_pos] == string[right_pos]:
			return False
		left_pos += 1
		right_pos -= 1
	return True
print(isPalindrome('aza')) 
","def isPalindrome(string):
    if string == string[::-1]:
        return True
    else:
        return False

print(isPalindrome(""A man, a plan, a canal: Panama""))
print(isPalindrome(""race a car""))

""""""

def isPalindrome(string):
    if string == string[::-1]:
        return True
    else:
        return False

print(isPalindrome(""A man,"
703,Write a Python program to count integer in a given mixed list. ,"def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr

list1 = [1, 'abcd', 3, 1.2, 4, 'xyz', 5, 'pqr', 7, -5, -12.22]

print(""Original list:"")
print(list1)

print(""\nNumber of integers in the said mixed list:"")
print(count_integer(list1))
","def count_integer(mixed_list):
    count = 0
    for i in mixed_list:
        if isinstance(i, int):
            count += 1
    return count

print(count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def count_integer(mixed_list):
    count = 0
    for i in mixed_list:
        if isinstance(i, int):
            count"
704,Write a Python program to check if first digit/character of each element in a given list is same or not. ,"def test(lst):
    result = all(str(x)[0] == str(lst[0])[0] for x in lst) 
    return result
nums = [1234, 122, 1984, 19372, 100]
print(""\nOriginal list:"")
print(nums)
print(""Check if first digit in each element of the said given list is same or not!"")
print(test(nums))
nums = [1234, 922, 1984, 19372, 100]
print(""\nOriginal list:"")
print(nums)
print(""Check if first digit in each element of the said given list is same or not!"")
print(test(nums))
nums = ['aabc', 'abc', 'ab', 'a']
print(""\nOriginal list:"")
print(nums)
print(""Check if first character in each element of the said given list is same or not!"")
print(test(nums))
nums = ['aabc', 'abc', 'ab', 'ha']
print(""\nOriginal list:"")
print(nums)
print(""Check if first character in each element of the said given list is same or not!"")
print(test(nums))
","def is_same(num):
    if num[0] == '0':
        return False
    else:
        return True

print(is_same([1, 2, 3, 4, 5, 6, 7, 8, 9]))

""""""

def is_same(num):
    if num[0] == '0':
        return False
    else:
        return True

print(is_same([1, 2,"
705,"Write a Python program to print four values decimal, octal, hexadecimal (capitalized), binary in a single line of a given integer. ","i = int(input(""Input an integer: ""))
o = str(oct(i))[2:]
h = str(hex(i))[2:]
h = h.upper()
b = str(bin(i))[2:]
d = str(i)
print(""Decimal Octal Hexadecimal (capitalized), Binary"")
print(d,'  ',o,' ',h,'                   ',b)
","# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

# Solution 11:

# Solution 12:

# Solution 13:

# Solution 14:

# Solution 15:

# Solution 16:"
706,Write a NumPy program to extract third and fourth elements of the first and second rows from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: Third and fourth elements of the first and second rows "")
print(arra_data[0:2, 2:4])
","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

print(a[0][2])
print(a[1][2])
print(a[2][2])

# Output:
# 5
# 6
# 7
# 8

# Output:
# 9
#"
707,Write a NumPy program to create a record array from a (flat) list of arrays. ,"import numpy as np
a1=np.array([1,2,3,4])
a2=np.array(['Red','Green','White','Orange'])
a3=np.array([12.20,15,20,40])
result= np.core.records.fromarrays([a1, a2, a3],names='a,b,c')
print(result[0])
print(result[1])
print(result[2])
","import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Create a record array from the list of arrays

# Create a record array from a list of arrays

# Create a record array from a list of arrays

# Create a record array from a list of arrays

# Create a record array from a list of arrays

# Create a record array from a list of arrays"
708,Write a Python program to find palindromes in a given list of strings using Lambda. ,"texts = [""php"", ""w3r"", ""Python"", ""abcd"", ""Java"", ""aaa""]
print(""Orginal list of strings:"")
print(texts) 
result = list(filter(lambda x: (x == """".join(reversed(x))), texts)) 
print(""\nList of palindromes:"")
print(result) 
","def palindrome(s):
    return s == s[::-1]

s = [""abcd"", ""cba"", ""dabcd"", ""cbad""]

print(list(filter(palindrome, s)))

""""""

# Solution

def palindrome(s):
    return s == s[::-1]

s = [""abcd"", ""cba"", ""dabcd"", ""cbad""]

print(list("
709,"Write a Python program that reads a CSV file and remove initial spaces, quotes around each entry and the delimiter. ","import csv
csv.register_dialect('csv_dialect',
                    delimiter='|',
                    skipinitialspace=True,
                    quoting=csv.QUOTE_ALL)
with open('temp.csv', 'r') as csvfile:
   reader = csv.reader(csvfile, dialect='csv_dialect')
   for row in reader:
       print(row)
","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)

# Solution:

# import csv
#
# with open('data.csv', 'r') as f:
#     csv_reader = csv.reader(f)
#     for row in csv_reader:
#         print"
710,Write a Pandas program to create a bar plot of the trading volume of Alphabet Inc. stock between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-4-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1.set_index('Date')
plt.figure(figsize=(6,6))
plt.suptitle('Trading Volume of Alphabet Inc. stock,\n01-04-2020 to 30-04-2020', fontsize=16, color='black')
plt.xlabel(""Date"",fontsize=12, color='black')
plt.ylabel(""Trading Volume"", fontsize=12, color='black') 
df2['Volume'].plot(kind='bar');
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])

df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')

plt.bar(df['Date'], df['Volume'])

plt.show"
711,Write a Python program to delete all occurrences of a specified character in a given string. ,"def delete_all_occurrences(str1, ch):
     result = str1.replace(ch, """")
     return(result)

str_text = ""Delete all occurrences of a specified character in a given string""
print(""Original string:"")
print(str_text)
print(""\nModified string:"")
ch='a'
print(delete_all_occurrences(str_text, ch))
","def delete_char(str, char):
    return str.replace(char, '')

print(delete_char('abcdef', 'd'))

""""""

def delete_char(str, char):
    return str.replace(char, '')

print(delete_char('abcdef', 'd'))

""""""

def delete_char(str, char):
    return str.replace(char, '')

print(delete_char('abcdef"
712,"Write a Pandas program to create a Pivot table and find manager wise, salesman wise total sale and also display the sum of all sale amount at the bottom. ","import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df,index=[""Manager"",""SalesMan""],values=[""Units"",""Sale_amt""],
               aggfunc=[np.sum],fill_value=0,margins=True)
print(table)
","import pandas as pd

df = pd.read_csv(""/Users/krishna/Downloads/Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales_Sales"
713,"Write a Python program to create a time object with the same hour, minute, second, microsecond and timezone info. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nTime object with the same hour, minute, second, microsecond and timezone info.:"")
print(arrow.utcnow().timetz())
","import datetime

# create a datetime object
dt = datetime.datetime(2021, 8, 1, 12, 30, 0, 0)

# print the datetime object
print(dt)

# create a datetime object with the same hour, minute, second, microsecond and timezone info
dt = datetime.datetime(2021, 8, 1, 12, 30, 0, 0, tzinfo=datetime."
714,Write a Pandas program to get the items of a given series not present in another given series. ,"import pandas as pd
sr1 = pd.Series([1, 2, 3, 4, 5])
sr2 = pd.Series([2, 4, 6, 8, 10])
print(""Original Series:"")
print(""sr1:"")
print(sr1)
print(""sr2:"")
print(sr2)
print(""\nItems of sr1 not present in sr2:"")
result = sr1[~sr1.isin(sr2)]
print(result)
","import pandas as pd

data = {'Name': ['Rolf', 'Bob', 'Jen', 'Anne'],
        'Score': [90, 80, 70, 60]}

df = pd.DataFrame(data)

print(df)

# Solution:

# df = pd.read_csv('data.csv')
# print(df)

# Solution:

# df = pd.read_csv('data.csv"
715,Write a Python program to create a new list dividing two given lists of numbers. ,"def dividing_two_lists(l1,l2):
    result = [x/y for x, y in zip(l1,l2)]
    return result 
nums1 = [7,2,3,4,9,2,3]
nums2 = [9,8,2,3,3,1,2]
print(""Original list:"")
print(nums1)
print(nums1)
print(dividing_two_lists(nums1, nums2))
","def divide(lst1, lst2):
    return [x / y for x, y in zip(lst1, lst2)]

lst1 = [1, 2, 3, 4, 5]
lst2 = [2, 4, 6, 8, 10]

print(divide(lst1, lst2))

""""""

# Solution:

def divide(lst1, lst2):
    return [x / y for x"
716,"Write a Python program to print the documents (syntax, description etc.) of Python built-in function(s). ",print(abs.__doc__),"def my_function(arg1, arg2, arg3):
    print(arg1, arg2, arg3)

my_function(1, 2, 3)

""""""

def my_function(arg1, arg2, arg3):
    print(arg1, arg2, arg3)

my_function(1, 2, 3)

""""""

def my_function(arg1, arg2, arg3):"
717,"Write a Python program to count the even, odd numbers in a given array of integers using Lambda. ","array_nums = [1, 2, 3, 5, 7, 8, 9, 10]
print(""Original arrays:"")
print(array_nums)
odd_ctr = len(list(filter(lambda x: (x%2 != 0) , array_nums)))
even_ctr = len(list(filter(lambda x: (x%2 == 0) , array_nums)))
print(""\nNumber of even numbers in the above array: "", even_ctr)
print(""\nNumber of odd numbers in the above array: "", odd_ctr)
","def even_odd(arr):
    even = 0
    odd = 0
    for i in arr:
        if i % 2 == 0:
            even += 1
        else:
            odd += 1
    return even, odd

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(even_odd(arr))

""""""

# Solution:

def even_odd(arr):"
718,Write a Python program to get a datetime or timestamp representation from current datetime. ,"import arrow
a = arrow.utcnow()
print(""Datetime representation:"")
print(a.datetime)
b = a.timestamp
print(""\nTimestamp representation:"")
print(b)
","import datetime

def get_timestamp():
    return datetime.datetime.now()

def get_datetime():
    return datetime.datetime.now()

def get_timestamp_as_string():
    return get_timestamp().strftime('%Y-%m-%d %H:%M:%S')

def get_datetime_as_string():
    return get_datetime().strftime('%Y-%m-"
719,Write a Python program to check whether lowercase letters exist in a string. ,"str1 = 'A8238i823acdeOUEI'
print(any(c.islower() for c in str1))
","def check_lowercase(string):
    for i in string:
        if i.islower():
            return True
    return False

print(check_lowercase(""python""))

""""""

# Solution 1

def check_lowercase(string):
    for i in string:
        if i.islower():
            return True
    return False

print(check_lowercase(""python""))

# Solution 2

def check_lowercase(string):
    for"
720,Write a Pandas program to split the following given dataframe into groups based on single column and multiple columns. Find the size of the grouped data. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
student_data = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])

print(""Original DataFrame:"")
print(student_data)
print('\nSplit the said data on school_code wise:')
grouped_single = student_data.groupby(['school_code'])
print(""Size of the grouped data - single column"")
print(grouped_single.size())
print('\nSplit the said data on school_code and class wise:')

grouped_mul = student_data.groupby(['school_code', 'class'])
print(""Size of the grouped data - multiple columns:"")
print(grouped_mul.size())
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})"
721,Write a Python program to create a new JSON file from an existing JSON file. ,"import json

with open('states.json') as f:
  state_data= json.load(f)

for state in state_data['states']:
  del state['area_codes']

with open('new_states.json', 'w') as f:
  json.dump(state_data, f, indent=2)
","import json

with open('data.json') as f:
    data = json.load(f)

print(data)

# Output:
# {
#   ""name"": ""John"",
#   ""age"": 30,
#   ""gender"": ""Male""
# }

# Create a new JSON file
# with open('data.json', 'w') as f:
#     json.dump(data, f)

# Output:
# {
#"
722,Write a Python program to move spaces to the front of a given string. ,"def move_Spaces_front(str1):
  noSpaces_char = [ch for ch in str1 if ch!=' ']
  spaces_char = len(str1) - len(noSpaces_char)
  result = ' '*spaces_char
  result = '""'+result + ''.join(noSpaces_char)+'""'
  return(result)

print(move_Spaces_front(""w3resource .  com  ""))
print(move_Spaces_front(""   w3resource.com  ""))
","def move_spaces(s):
    return s.lstrip().rstrip()

print(move_spaces(""  hello world  ""))

""""""

def move_spaces(s):
    return s.lstrip().rstrip()

print(move_spaces(""  hello world  ""))

""""""

def move_spaces(s):
    return s.lstrip().rstrip()

print(move_spaces(""  hello world  ""))

"""""""
723,Write a Pandas program to check whether alpha numeric values present in a given column of a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'name_code': ['Company','Company a001','Company 123', '1234', 'Company 12'],
    'date_of_birth ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'age': [18.5, 21.2, 22.5, 22, 23]
})
print(""Original DataFrame:"")
print(df)
print(""\nWhether all characters in the string are alphanumeric?"")
df['name_code_is_alphanumeric'] = list(map(lambda x: x.isalnum(), df['name_code']))
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Age': [30, 32, 33, 34, 35, 36],
                   'Score': [90, 95, 100, 90, 95, 100]})

print(df['Name'].isalpha())

# Output:
# True
# True
# True
# True"
724,Write a Python program to split a given dictionary of lists into list of dictionaries. ,"def list_of_dicts(marks):
    keys = marks.keys()
    vals = zip(*[marks[k] for k in keys])
    result = [dict(zip(keys, v)) for v in vals]
    return result

marks = {'Science': [88, 89, 62, 95], 'Language': [77, 78, 84, 80]}
print(""Original dictionary of lists:"")
print(marks)
print(""\nSplit said dictionary of lists into list of dictionaries:"")
print(list_of_dicts(marks))
","d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}

d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}

d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}

d = {'a"
725,Write a Python program to read specific columns of a given CSV file and print the content of the columns. ,"import csv
with open('departments.csv', newline='') as csvfile:
 data = csv.DictReader(csvfile)
 print(""ID Department Name"")
 print(""---------------------------------"")
 for row in data:
   print(row['department_id'], row['department_name'])
","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)

""""""

import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)

""""""

import c"
726,Write a Python program to create a list with infinite elements. ,"import itertools
c = itertools.count()
print(next(c))
print(next(c))
print(next(c))
print(next(c))
print(next(c))
","def create_list(n):
    lst = []
    for i in range(n):
        lst.append(i)
    return lst

print(create_list(5))

""""""

# Solution

def create_list(n):
    lst = []
    for i in range(n):
        lst.append(i)
    return lst

print(create_list(5))"
727,Write a NumPy program to select indices satisfying multiple conditions in a NumPy array. ,"import numpy as np
a = np.array([97, 101, 105, 111, 117])
b = np.array(['a','e','i','o','u'])
print(""Original arrays"")
print(a)
print(b)
print(""Elements from the second array  corresponding to elements in the first array  that are greater than 100 and less than 110:"")
print(b[(100 < a) & (a < 110)])
","python solution.py

""""""

import numpy as np

def select_indices(arr, condition, n):
    """"""
    This function takes an array and a condition and returns the indices satisfying the condition.
    
    Parameters
    ----------
    arr : numpy.ndarray
        Array to be sorted.
    condition : function
        Function to determine if an element is True or False.
    n : int
        Number of elements in the array.
    
    Returns"
728,Write a Python program to invert a given dictionary with non-unique hashable values. ,"from collections import defaultdict
def test(students):
  obj = defaultdict(list)
  for key, value in students.items():
    obj[value].append(key)
  return dict(obj)
 
students = {
  'Ora Mckinney': 8,
  'Theodore Hollandl': 7,
  'Mae Fleming': 7,
  'Mathew Gilbert': 8,
  'Ivan Little': 7,  
}
print(test(students))
","def invert_dict(d):
    d = dict(d)
    for key in d:
        d[key] = key
    return d

d = {'a': 1, 'b': 2, 'c': 3}
print(invert_dict(d))

""""""

# Solution:

def invert_dict(d):
    d = dict(d)
    for key in d:
        d[key] = key
    return"
729,Write a NumPy program to create an inner product of two arrays. ,"import numpy as np
x = np.arange(24).reshape((2,3,4))
print(""Array x:"")
print(x)
print(""Array y:"")
y = np.arange(4)
print(y)
print(""Inner of x and y arrays:"")
print(np.inner(x, y))
","a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

inner_product = np.dot(a, b)

print(inner_product)

""""""

# Solution

import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8"
730,Write a Pandas program to create a Pivot table and find the maximum sale value of the items. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df, index='Item', values='Sale_amt', aggfunc=np.max)
print(table)
","pivot_table(df, columns=['Item_Name', 'Sale'], values='Sale', aggfunc='max')

""""""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('pivot_table.csv')

# Create a Pandas dataframe from the dataframe
df = pd.DataFrame(df)

# Create a Pandas"
731,Write a Pandas program to convert index of a given dataframe into a column. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32]},
     index = ['t1', 't2', 't3', 't4', 't5', 't6'])
print(""Original DataFrame:"")
print(df)
print(""\nConvert index of the said dataframe into a column:"")
df.reset_index(level=0, inplace=True)
print(df)
","df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Score': [90, 80, 70, 60, 50, 40]})

df.columns = ['Name', 'Score']

df.head()

df.columns = ['Name', 'Score']

df.head()

df.columns = ['Name', 'Score']

df.head()"
732,Write a Python program to sum a specific column of a list in a given list of lists. ,"def sum_column(nums, C):
    result = sum(row[C] for row in nums)
    return result

nums = [
        [1,2,3,2],
        [4,5,6,2],
        [7,8,9,5],
        ]
print(""Original list of lists:"")
print(nums)

column = 0
print(""\nSum: 1st column of the said list of lists:"")
print(sum_column(nums, column))
column = 1
print(""\nSum: 2nd column of the said list of lists:"")
print(sum_column(nums, column))
column = 3
print(""\nSum: 4th column of the said list of lists:"")
print(sum_column(nums, column))
","def sum_col(lst, col):
    return sum(lst[:,col])

lst = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
col = 3
print(sum_col(lst, col))

""""""

def sum_col(lst, col):
    return sum(lst[:,col])

lst = [[1,2,3,4],[5"
733,Write a Python program to add two given lists and find the difference between lists. Use map() function. ,"def addition_subtrction(x, y):
    return x + y, x - y
 
nums1 = [6, 5, 3, 9]
nums2 = [0, 1, 7, 7]
print(""Original lists:"")
print(nums1)
print(nums2)
result = map(addition_subtrction, nums1, nums2)
print(""\nResult:"")
print(list(result))
","def add_two_lists(list1, list2):
    return list(map(lambda x, y: x + y, list1, list2))

print(add_two_lists([1, 2, 3], [4, 5, 6]))

""""""

def add_two_lists(list1, list2):
    return list(map(lambda x, y: x + y, list1, list2))

print(add_two"
734,Write a Pandas program to create a date range using a startpoint date and a number of periods. ,"import pandas as pd
date_range = pd.date_range('2020-01-01', periods=45)
print(""Date range of perods 45:"")
print(date_range)
","import pandas as pd
import datetime as dt

start = dt.datetime(2020, 1, 1)
end = dt.datetime(2020, 1, 10)

periods = 10

df = pd.DataFrame({""start"": [start], ""end"": [end]})

print(df)

# Solution:

# df = pd.DataFrame({""start"": [start], ""end"": [end"
735,"Write a NumPy program to calculate inverse sine, inverse cosine, and inverse tangent for all elements in a given array. ","import numpy as np
x = np.array([-1., 0, 1.])
print(""Inverse sine:"", np.arcsin(x))
print(""Inverse cosine:"", np.arccos(x))
print(""Inverse tangent:"", np.arctan(x))
","import numpy as np

def sine(x):
    return np.sin(x)

def cosine(x):
    return np.cos(x)

def tangent(x):
    return np.tan(x)

x = np.arange(0, np.pi, 0.1)

sine_answer = sine(x)
print(sine_answer)

cosine_"
736,Write a Pandas program to create the mean and standard deviation of the data of a given Series. ,"import pandas as pd
s = pd.Series(data = [1,2,3,4,5,6,7,8,9,5,3])
print(""Original Data Series:"")
print(s)
print(""Mean of the said Data Series:"")
print(s.mean())
print(""Standard deviation of the said Data Series:"")
print(s.std())
","import pandas as pd

# Create a dataframe from the given data
df = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""B"": [1, 2, 3, 4, 5], ""C"": [1, 2, 3, 4, 5]})

# Create a new column called ""mean""
df[""mean""] = df[""A""].mean()

# Create a new column called ""std""
df["""
737,Write a Python program to remove duplicates from a list. ,"a = [10,20,30,20,10,50,60,40,80,50,40]

dup_items = set()
uniq_items = []
for x in a:
    if x not in dup_items:
        uniq_items.append(x)
        dup_items.add(x)

print(dup_items)
","def remove_duplicates(list):
    new_list = []
    for i in list:
        if i not in new_list:
            new_list.append(i)
    return new_list

print(remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def remove_duplicates(list):
    new_list = []
    for i in list:
        if i not in new"
738,Write a Python program to find the latitude and longitude of a given location using Nominatim API and GeoPy package. ,"from geopy.geocoders import Nominatim
geolocator = Nominatim(user_agent=""geoapiExercises"")
ladd1 = ""27488 Stanford Avenue, North Dakota""
print(""Location address:"",ladd1)
location = geolocator.geocode(ladd1)
print(""Latitude and Longitude of the said address:"")
print((location.latitude, location.longitude))
ladd2 = ""380 New York St, Redlands, CA 92373""
print(""\nLocation address:"",ladd2)
location = geolocator.geocode(ladd2)
print(""Latitude and Longitude of the said address:"")
print((location.latitude, location.longitude))
ladd3 = ""1600 Pennsylvania Avenue NW""
print(""\nLocation address:"",ladd3)
location = geolocator.geocode(ladd3)
print(""Latitude and Longitude of the said address:"")
print((location.latitude, location.longitude))
","import geopy.geocoders
import geopy.distance

# Geolocation API
geolocator = geopy.geocoders.Nominatim(user_agent=""myGeoLocation"")

# Geocode the location
location = geolocator.geocode(input(""Enter the location: ""))

# Print the latitude and longitude
print(location.latitude, location.longitude)"
739,Write a Python program to get hourly datetime between two hours. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nString representing the date, controlled by an explicit format string:"")
print(arrow.utcnow().strftime('%d-%m-%Y %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%m-%d %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%d-%m %H:%M:%S'))
","hour1 = datetime.datetime.strptime('10:00', '%H:%M')
hour2 = datetime.datetime.strptime('10:30', '%H:%M')

print(hour1.strftime('%H:%M'))
print(hour2.strftime('%H:%M'))

# Solution:

# hour1 = datetime.datetime.strptime('10:00', '%H:%M')"
740,Write a Python program to sort an unsorted array numbers using Wiggle sort. ,"def wiggle_sort(arra_nums):
    for i, _ in enumerate(arra_nums):
        if (i % 2 == 1) == (arra_nums[i - 1] > arra_nums[i]):
            arra_nums[i - 1], arra_nums[i] = arra_nums[i], arra_nums[i - 1]

    return arra_nums

print(""Input the array elements: "")
arra_nums = list(map(int, input().split()))
print(""Original unsorted array:"")
print(arra_nums)
print(""The said array after applying Wiggle sort:"")
print(wiggle_sort(arra_nums))
","def wiggleSort(arr):
    for i in range(len(arr)):
        if arr[i] % 2 == 0:
            arr[i] = arr[i] / 2
        else:
            arr[i] = arr[i] * 3 + 1
    return arr

arr = [1, 5, 2, 6, 3, 7, 4, 8, 9, 10]
print(wiggleSort(arr))

""""""

def wiggleSort("
741,Write a NumPy program to compute the inner product of vectors for 1-D arrays (without complex conjugation) and in higher dimension. ,"import numpy as np
a = np.array([1,2,5])
b = np.array([2,1,0])
print(""Original 1-d arrays:"")
print(a)
print(b)
print 
result = np.inner(a, b)
print(""Inner product of the said vectors:"")
x = np.arange(9).reshape(3, 3)
y = np.arange(3, 12).reshape(3, 3)
print(""Higher dimension arrays:"")
print(x)
print(y)
result = np.inner(x, y)
print(""Inner product of the said vectors:"")
print(result)
","import numpy as np

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

print(np.inner(a, b))

# OUTPUT:
# [1 2 3]
# [4 5 6]

# OUTPUT:
# [1 4]
# [2 5]
# [3 6]

# OUTPUT:
# [1"
742,Write a Python program to find the pairs of maximum and minimum product from a given list. Use itertools module. ,"import itertools as it
def list_max_min_pair(nums):
    result_max = max(it.combinations(nums, 2), key = lambda sub: sub[0] * sub[1])
    result_min = min(it.combinations(nums, 2), key = lambda sub: sub[0] * sub[1])
    return result_max, result_min

nums = [2,5,8,7,4,3,1,9,10,1]   
print(""The original list: "") 
print(nums)
print(""\nPairs of maximum and minimum product from the said list:"")
print(list_max_min_pair(nums))
","import itertools

def find_pairs(lst):
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            if lst[i] * lst[j] == lst[i] * lst[j]:
                print(lst[i], lst[j])

find_pairs([1, 2, 3, 4, 5, 6"
743,Write a python program to check whether two lists are circularly identical. ,"list1 = [10, 10, 0, 0, 10]
list2 = [10, 10, 10, 0, 0]
list3 = [1, 10, 10, 0, 0]

print('Compare list1 and list2')
print(' '.join(map(str, list2)) in ' '.join(map(str, list1 * 2)))
print('Compare list1 and list3')
print(' '.join(map(str, list3)) in ' '.join(map(str, list1 * 2)))
","def isCircular(list1, list2):
    if len(list1)!= len(list2):
        return False
    for i in range(len(list1)):
        if list1[i]!= list2[i]:
            return False
    return True

print(isCircular([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))
print(isCircular([1, 2, 3, 4, 5], [1"
744," Write a NumPy program to create a 4x4 matrix in which 0 and 1 are staggered, with zeros on the main diagonal. ","import numpy as np
x = np.zeros((4, 4))
x[::2, 1::2] = 1
x[1::2, ::2] = 1
print(x)
","import numpy as np

# Create a 4x4 matrix
matrix = np.zeros((4,4))

# Set the main diagonal to 1
matrix[0,0] = 1
matrix[0,1] = 1
matrix[0,2] = 1
matrix[0,3] = 1

# Set the main diagonal to 0
matrix[1,0] = 1
matrix["
745,Write a Python program to convert a given list of integers and a tuple of integers in a list of strings. ,"nums_list = [1,2,3,4]
nums_tuple = (0, 1, 2, 3) 
print(""Original list and tuple:"")
print(nums_list)
print(nums_tuple)
result_list = list(map(str,nums_list))
result_tuple = tuple(map(str,nums_tuple))
print(""\nList of strings:"")
print(result_list)
print(""\nTuple of strings:"")
print(result_tuple)
","def convert_list_to_tuple(list_of_ints):
    tuple_of_ints = tuple(list_of_ints)
    return tuple_of_ints

print(convert_list_to_tuple([1, 2, 3, 4, 5]))

""""""

def convert_list_to_tuple(list_of_ints):
    tuple_of_ints = tuple(list_of_ints)"
746,Write a Python program to retrieve the value of the nested key indicated by the given selector list from a dictionary or list. ,"from functools import reduce 
from operator import getitem
def test(d, selectors):
  return reduce(getitem, selectors, d) 
users = {
  'Carla ': {
    'name': {
      'first': 'Carla ',
      'last': 'Russell' 
    },
    'postIds': [1, 2, 3, 4, 5]
  }
}
print(test(users, ['Carla ', 'name', 'last']))
print(test(users, ['Carla ', 'postIds', 1]))
","def get_value(d, selector):
    for key in d:
        if selector in d[key]:
            return d[key][selector]

print(get_value({'a': {'b': {'c': 'd'}}, 'c': 'd'}, 'b'))

""""""

def get_value(d, selector):
    for key in d:
        if selector in d[key]:
            return"
747,Write a Python program to insert tags or strings immediately after specified tags or strings. ,"from bs4 import BeautifulSoup
soup = BeautifulSoup(""<b>w3resource.com</b>"", ""lxml"")
print(""Original Markup:"")
print(soup.b)
tag = soup.new_tag(""i"")
tag.string = ""Python""
print(""\nNew Markup, after inserting the text:"")
soup.b.string.insert_after(tag)
print(soup.b)
","def insert_tags(s, tags):
    return s.replace(tags, '<{}>'.format(tags))

print(insert_tags('<b>Hello</b>', 'bold'))

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

''"
748,Write a Python program to get all values from an enum class. ,"from enum import IntEnum
class Country(IntEnum):
    Afghanistan = 93
    Albania = 355
    Algeria = 213
    Andorra = 376
    Angola = 244
    Antarctica = 672
country_code_list = list(map(int, Country))
print(country_code_list)
","class Enum(object):
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return self.name

    def __repr__(self):
        return self.name

class Enum(object):
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return self.name

    def __repr__(self):
        return self.name"
749,Write a Python program to create a list of random integers and randomly select multiple items from the said list. Use random.sample(),"import random 
print(""Create a list of random integers:"")
population = range(0, 100)
nums_list = random.sample(population, 10)
print(nums_list)
no_elements = 4
print(""\nRandomly select"",no_elements,""multiple items from the said list:"")
result_elements = random.sample(nums_list, no_elements)
print(result_elements)
no_elements = 8
print(""\nRandomly select"",no_elements,""multiple items from the said list:"")
result_elements = random.sample(nums_list, no_elements)
print(result_elements)
","import random

lst = [random.randint(1, 100) for i in range(10)]
print(lst)

# Solution:

lst = [random.randint(1, 100) for i in range(10)]
print(lst)

# Solution:

lst = [random.randint(1, 100) for i in range(10)]
print(lst)

# Solution:"
750,Write a Python program to find tags by CSS class in a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a class=""sister"" href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
<a class=""sister"" href=""http://example.com/lacie"" id=""link1"">Lacie</a>
<a class=""sister"" href=""http://example.com/tillie""  id=""link2"">Tillie</a>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc,""lxml"")
print(""\nTags by CSS class:"")
print(soup.select("".sister""))
","import re

html = """"""
<html>
<head>
<style>
body {
  background-color: #f0f0f0;
  color: #fff;
  font-family: Verdana, sans-serif;
  font-size: 12px;
  font-weight: bold;
  margin: 0;
  padding: 0;
  border: 1px solid #f0f0f0;
  border-radius: 5px;"
751,Write a Pandas program to create a plot to visualize daily percentage returns of Alphabet Inc. stock price between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Date', 'Adj Close']]
df3 = df2.set_index('Date')
daily_changes = df3.pct_change(periods=1)
daily_changes['Adj Close'].plot(figsize=(10,7),legend=True,linestyle='--',marker='o')
plt.suptitle('Daily % return of Alphabet Inc. stock price,\n01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.grid(True)
plt.show() 
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc_stock_price_data.csv')

df['Date'] = pd.to_datetime(df['Date'])
df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')

df['Date'] = df['Date'].dt.strftime('"
752,Write a Python program to count the most common words in a dictionary. ,"words = [
   'red', 'green', 'black', 'pink', 'black', 'white', 'black', 'eyes',
   'white', 'black', 'orange', 'pink', 'pink', 'red', 'red', 'white', 'orange',
   'white', ""black"", 'pink', 'green', 'green', 'pink', 'green', 'pink',
   'white', 'orange', ""orange"", 'red'
]
from collections import Counter
word_counts = Counter(words)
top_four = word_counts.most_common(4)
print(top_four)
","def count_words(dictionary):
    """"""
    Function to count the most common words in a dictionary.
    """"""
    # Initialize an empty dictionary
    dictionary = {}
    # Iterate through the dictionary
    for word in dictionary:
        # Iterate through the dictionary
        for letter in dictionary[word]:
            # Add the word to the dictionary
            dictionary[word] = dictionary[word] + 1
    # Return the dictionary
    return dictionary

# Driver function
d"
753,Write a NumPy program to get the values and indices of the elements that are bigger than 10 in a given array. ,"import numpy as np
x = np.array([[0, 10, 20], [20, 30, 40]])
print(""Original array: "")
print(x)
print(""Values bigger than 10 ="", x[x>10])
print(""Their indices are "", np.nonzero(x > 10))
","import numpy as np

arr = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])

print(arr[arr > 10])

# Output:
# [20, 30, 40, 50, 60, 70, 80, 90, 100]

# Explanation:
# The array is:
# [10, 20, 30, 40, 50, 60, 70, 80, 90, 100"
754,Write a Python program that prints all the numbers from 0 to 6 except 3 and 6.,"for x in range(6):
    if (x == 3 or x==6):
        continue
    print(x,end=' ')
print(""\n"")
	","""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution"
755,A Python Dictionary contains List as value. Write a Python program to clear the list values in the said dictionary. ,"def test(dictionary):
    for key in dictionary:
        dictionary[key].clear()
    return dictionary

dictionary = { 
               'C1' : [10,20,30], 
               'C2' : [20,30,40],
               'C3' : [12,34]
             }
print(""\nOriginal Dictionary:"")
print(dictionary)
print(""\nClear the list values in the said dictionary:"")
print(test(dictionary)) 
","def clear_list(d):
    for i in d:
        d[i] = []

d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}
clear_list(d)
print(d)

""""""

# Solution:

def clear_list(d):
    for i in d:
        d[i] = []

d ="
756,Write a Python program to find the maximum and minimum values in a given list within specified index range. ,"def reverse_list_of_lists(nums,lr,hr):
    temp = []
    for idx, el in enumerate(nums):
        if idx >= lr and idx < hr:
            temp.append(el)
    result_max = max(temp) 
    result_min = min(temp) 
    return result_max, result_min
nums = [4,3,0,5,3,0,2,3,4,2,4,3,5]
print(""Original list:"")
print(nums)
print(""\nIndex range:"")
lr = 3
hr = 8
print(lr,""to"",hr)
print(""\nMaximum and minimum values of the said given list within index range:"")
print(reverse_list_of_lists(nums,lr,hr))
","def max_min(list):
    max = list[0]
    min = list[0]
    for i in range(1, len(list)):
        if list[i] > max:
            max = list[i]
        if list[i] < min:
            min = list[i]
    return max, min

print(max_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
757,Write a Pandas program to get the positions of items of a given series in another given series. ,"import pandas as pd
series1 = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
series2 = pd.Series([1, 3, 5, 7, 10])
print(""Original Series:"")
print(series1)
print(series2)
result = [pd.Index(series1).get_loc(i) for i in series2]
print(""Positions of items of series2 in series1:"")
print(result)
","import pandas as pd

series = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(series.index)

# Output: Index(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], dtype='int64')

print(series.values)

# Output: [1, 2, 3,"
758,Write a Python program to count the frequency in a given dictionary. ,"from collections import Counter
def test(dictt):    
    result = Counter(dictt.values())
    return result    

dictt = {
 'V': 10,
 'VI': 10,
 'VII': 40,
 'VIII': 20,
 'IX': 70,
 'X': 80,
 'XI': 40,
 'XII': 20, 
 }

print(""\nOriginal Dictionary:"")
print(dictt)
print(""\nCount the frequency of the said dictionary:"")
print(test(dictt))
","def count_frequency(dictionary):
    count = 0
    for i in dictionary:
        count += dictionary[i]
    return count

dictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, '"
759,Write a Python program to insert values to a table from user input. ,"import  sqlite3
conn  =  sqlite3 . connect ( 'mydatabase.db' )
cursor  =  conn.cursor ()
#create the salesman table 
cursor.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")

s_id = input('Salesman ID:')
s_name = input('Name:')
s_city = input('City:')
s_commision = input('Commission:')
cursor.execute(""""""
INSERT INTO salesman(salesman_id, name, city, commission)
VALUES (?,?,?,?)
"""""", (s_id, s_name, s_city, s_commision))
conn.commit ()
print ( 'Data entered successfully.' )
conn . close ()
if (conn):
  conn.close()
  print(""\nThe SQLite connection is closed."")
","def insert_values(table, values):
    for i in range(len(values)):
        table[i] = values[i]
    return table

table = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(insert_values(table, values))

""""""

def insert_values(table, values):
    for"
760,Write a Python program to find the length of the text of the first <h2> tag of a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc, 'html.parser')
print(""Length of the text of the first <h2> tag:"")
print(len(soup.find('h2').text))

","import re

html = """"""
<html>
<head>
<title>The Dormouse's story</title>
</head>
<body>
<p class=""title""><b>The Dormouse's story</b></p>
<p class=""story"">Once upon a time there were three little sisters; and their names were
<a href=""http://example.com/elsie"" class=""sister"" id=""link1"">Els"
761,Write a NumPy program to get the number of nonzero elements in an array. ,"import numpy as np
x = np.array([[0, 10, 20], [20, 30, 40]])
print(""Original array:"")
print(x)
print(""Number of non zero elements in the above array:"")
print(np.count_nonzero(x))
","import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12]])

print(np.count_nonzero(arr))

""""""

# Solution

import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12"
762,Write a Pandas program to replace more than one value with other values in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['A','B', 'C', 'D', 'A'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})

print(""Original DataFrame:"")
print(df)

print(""\nReplace A with c:"")
df = df.replace([""A"", ""D""], [""X"", ""Y""])
print(df)
","import pandas as pd

df = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""B"": [10, 20, 30, 40, 50]})
print(df)

df.replace({""A"": 10, ""B"": 20}, inplace=True)
print(df)

df.replace({""A"": 10, ""B"": 20}, inplace=True, regex=True)
print(df)"
763,Write a NumPy program to compute the eigenvalues and right eigenvectors of a given square array. ,"import numpy as np
m = np.mat(""3 -2;1 0"")
print(""Original matrix:"")
print(""a\n"", m)
w, v = np.linalg.eig(m) 
print( ""Eigenvalues of the said matrix"",w)
print( ""Eigenvectors of the said matrix"",v)
","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

eigenvalues, eigenvectors = np.linalg.eig(A)

print(""Eigenvalues: "", eigenvalues)
print(""Eigenvectors: "", eigenvectors)

""""""

# Solution:

import numpy as np

A = np"
764,Write a Python program to chunk a given list into n smaller lists. ,"from math import ceil

def chunk_list_into_n(nums, n):
  size = ceil(len(nums) / n)
  return list(
    map(lambda x: nums[x * size:x * size + size],
    list(range(n)))
  )
print(chunk_list_into_n([1, 2, 3, 4, 5, 6, 7], 4))  
","def chunk(lst, n):
    return [lst[i:i+n] for i in range(0, len(lst), n)]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 4
print(chunk(lst, n))

""""""

def chunk(lst, n):
    return [lst[i:i+n] for i in range(0, len(lst"
765,Write a NumPy program to add a border (filled with 0's) around an existing array. ,"import numpy as np
x = np.ones((3,3))
print(""Original array:"")
print(x)
print(""0 on the border and 1 inside in the array"")
x = np.pad(x, pad_width=1, mode='constant', constant_values=0)
print(x)
","import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12]])

arr = np.pad(arr, (2, 2), 'constant', constant_values=(0, 0))

arr = np.pad(arr, (2, 2), 'edge')

arr = np.pad(arr, (2, 2), 'edge"
766,Write a Python program to create an array contains six integers. Also print all the members of the array. ,"from array import array
my_array = array('i', [10, 20, 30, 40, 50])
for i in my_array:
    print(i)
","import array

arr = array.array('i', [1, 2, 3, 4, 5, 6])
print(arr)
print(arr[0])
print(arr[-1])
print(arr[-6])

arr = array.array('i', [1, 2, 3, 4, 5, 6])
print(arr)
print(arr[0:6])
print(arr[-1:])
print(arr[-6"
767,Write a Python program to check whether all dictionaries in a list are empty or not. ,"my_list = [{},{},{}]
my_list1 = [{1,2},{},{}]
print(all(not d for d in my_list))
print(all(not d for d in my_list1))
","def is_empty(dictionary):
    if len(dictionary) == 0:
        return True
    else:
        return False

print(is_empty({""a"":1,""b"":2,""c"":3}))

""""""

# Solution 1

def is_empty(dictionary):
    if len(dictionary) == 0:
        return True
    else:
        return False

print(is_empty({""a"":1,""b"":"
768,Write a NumPy program to place a specified element in specified time randomly in a specified 2D array. ,"import numpy as np
n = 4
i = 3
e = 10
array_nums1 = np.zeros((n,n))
print(""Original array:"")
print(array_nums1)
np.put(array_nums1, np.random.choice(range(n*n), i, replace=False), e)
print(""\nPlace a specified element in specified time randomly:"")
print(array_nums1)
","import numpy as np

# Create an array of given shape
arr = np.random.randint(0, 10, size=(3, 4))

# Create a random time
t = np.random.randint(0, 10, size=arr.shape)

# Create a random array of given shape
arr = np.random.randint(0, 10, size=(3, 4))

# Create a random time
t = np.random.rand"
769,"Write a Python program to read a matrix from console and print the sum for each column. Accept matrix rows, columns and elements for each column separated with a space(for every row) as input from the user. ","rows = int(input(""Input rows: ""))
columns = int(input(""Input columns: ""))
matrix = [[0]*columns for row in range(rows)]
print('Input number of elements in a row (1, 2, 3): ')
for row in range(rows):
    lines = list(map(int, input().split()))
    for column in range(columns):
        matrix[row][column] = lines[column]

sum = [0]*columns
print(""sum for each column:"")
for column in range(columns):
    for row in range(rows):
        sum[column] += matrix[row][column]
    print((sum[column]), ' ', end = '')
","def matrix_sum(rows, columns, elements):
    for i in range(rows):
        for j in range(columns):
            print(elements[i][j], end="" "")
        print()

rows = int(input(""Enter the number of rows: ""))
columns = int(input(""Enter the number of columns: ""))
elements"
770,Write a Pandas program to select consecutive columns and also select rows with Index label 0 to 9 with some columns from world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nSelect consecutive columns:"")
print(w_a_con.loc[:,""Country"":""Display Value""].head())
print(""\nAlternate command:"")
print(w_a_con.iloc[:,2:5].head())
print(""\nSelect rows with Index label 0 to 9 with specific columns:"")
print(w_a_con.loc[0:9,[""Year"",""Country"",""Display Value""]])
","import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/dataprofessor/data/master/glassdoor.csv')
df.head()

df.columns

df.index

df.iloc[:,0:3]

df.iloc[:,0:3].columns

df.iloc[:,0:3].columns"
771,rite a Python class named Rectangle constructed by a length and width and a method which will compute the area of a rectangle. ,"class Rectangle():
    def __init__(self, l, w):
        self.length = l
        self.width  = w

    def rectangle_area(self):
        return self.length*self.width

newRectangle = Rectangle(12, 10)
print(newRectangle.rectangle_area())
","class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width
    def area(self):
        return self.length * self.width

rectangle = Rectangle(4, 6)
print(rectangle.area())

""""""

class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width"
772,Write a Pandas program to remove the html tags within the specified column of a given DataFrame. ,"import pandas as pd
import re as re
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],
    'address': ['9910 Surrey <b>Avenue</b>','92 N. Bishop Avenue','9910 <br>Golden Star Avenue', '102 Dunbar <i></i>St.', '17 West Livingston Court']
})
print(""Original DataFrame:"")
print(df)
def remove_tags(string):
    result = re.sub('<.*?>','',string)
    return result
df['with_out_tags']=df['address'].apply(lambda cw : remove_tags(cw))
print(""\nSentences without tags':"")
print(df)
","import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/dataprofessor/data/master/student_scores.csv')

df['Tag'] = df['Name'].str.extract('(\w+)')

df.head()

df.Tag.value_counts()

df.Tag.value_counts().sort_index()

df.Tag.value_counts()."
773,Write a NumPy program to add a vector to each row of a given matrix. ,"import numpy as np
m = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
v = np.array([1, 1, 0])
print(""Original vector:"")
print(v)
print(""Original matrix:"")
print(m)
result = np.empty_like(m) 
for i in range(4):
  result[i, :] = m[i, :] + v
print(""\nAfter adding the vector v to each row of the matrix m:"")
print(result)
","import numpy as np

matrix = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

# Solution:

# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

#"
774,Write a Pandas program to find out the alcohol consumption of a given year from the world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details in the year 1985:"")
print(w_a_con[w_a_con['Year']==1985].head(10))
print(""\nThe world alcohol consumption details in the year 1989:"")
print(w_a_con[w_a_con['Year']==1989].head(10))
","import pandas as pd

df = pd.read_csv('world_alcohol_consumption.csv')

df['year'] = df['year'].astype(int)

df.head()

df.columns = ['year', 'country', 'country_code', 'country_name', 'country_code_name', 'country_name_code', 'country_name_code_name', 'country_name_code_name_code"
775,Write a Python program to compute average of two given lists. ,"def average_two_lists(nums1, nums2):
    result = sum(nums1 + nums2) / len(nums1 + nums2) 
    return result

nums1 = [1, 1, 3, 4, 4, 5, 6, 7]
nums2 = [0, 1, 2, 3, 4, 4, 5, 7, 8]
print(""Original list:"")
print(nums1)
print(nums2)

print(""\nAverage of two lists:"")
print(average_two_lists(nums1, nums2))
","def average(a, b):
    return (a + b)/2

a = [1, 2, 3, 4, 5]
b = [1, 2, 3, 4, 5]

print(average(a, b))

""""""

# Solution:

def average(a, b):
    return (a + b)/2

a = [1, 2, 3, 4, 5]
b = [1, 2, 3, 4, 5]

print(average"
776,"Write a NumPy program to create 24 python datetime.datetime objects (single object for every hour), and then put it in a numpy array. ","import numpy as np
import datetime
start = datetime.datetime(2000, 1, 1)
dt_array = np.array([start + datetime.timedelta(hours=i) for i in range(24)])
print(dt_array)
","import datetime

# Create a datetime object
dt = datetime.datetime(2021, 1, 1, 0, 0, 0)

# Create a numpy array
arr = np.array([dt])

# Print the datetime object
print(dt)

# Print the array
print(arr)

# Create a datetime object
dt = datetime.datetime(2021, 1"
777,Write a Pandas program to import some excel data (coalpublic2013.xlsx ) skipping first twenty rows into a Pandas dataframe. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx', skiprows = 20)
df
","import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')

df.head()

df.tail()

df.shape

df.columns

df.columns = ['Year', 'Coal', 'Coal_Total', 'Coal_Total_Total', 'Coal_Total_Total_Total', 'Coal_Total_Total_Total_"
778,Write a Python program to append the same value /a list multiple times to a list/list-of-lists. ,"print(""Add a value(7), 5 times, to a list:"")
nums = []
nums += 5 * ['7']
print(nums)
nums1 = [1,2,3,4]
print(""\nAdd 5, 6 times, to a list:"")
nums1 += 6 * [5]
print(nums1)
print(""\nAdd a list, 4 times, to a list of lists:"")
nums1 = []
nums1 += 4 * [[1,2,5]]
print(nums1)
print(""\nAdd a list, 4 times, to a list of lists:"")
nums1 = [[5,6,7]]
nums1 += 4 * [[1,2,5]]
print(nums1)
","def append_same_value(list_of_lists):
    for i in range(len(list_of_lists)):
        list_of_lists[i].append(list_of_lists[i][0])
    return list_of_lists

print(append_same_value([[1,2,3],[4,5,6],[7,8,9]]))

""""""

def append_same_value(list_"
779,Write a NumPy program to replace all elements of NumPy array that are greater than specified array. ,"import numpy as np
x = np.array([[ 0.42436315, 0.48558583, 0.32924763], [ 0.7439979,0.58220701,0.38213418], [ 0.5097581,0.34528799,0.1563123 ]])
print(""Original array:"")
print(x)
print(""Replace all elements of the said array with .5 which are greater than .5"")
x[x > .5] = .5
print(x)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr[arr > 3] = 0

arr

arr[arr > 3] = 0

arr

arr[arr > 3] = 0

arr

arr[arr > 3] = 0

arr

arr[arr > 3] = 0

arr

arr[arr > 3] ="
780,Write a Python program to calculate the product of the unique numbers of a given list. ,"def unique_product(list_data):
    temp = list(set(list_data))
    p = 1
    for i in temp:
        p *= i
    return p
nums = [10, 20, 30, 40, 20, 50, 60, 40]
print(""Original List : "",nums)
print(""Product of the unique numbers of the said list: "",unique_product(nums))
","def product(lst):
    return reduce(lambda x, y: x * y, lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(product(lst))

""""""

# Solution:

def product(lst):
    return reduce(lambda x, y: x * y, lst)

lst = [1, 2, 3, 4, 5, 6, 7,"
781,Write a Pandas program to create a heatmap (rectangular data as a color-encoded matrix) for comparison of the top 10 years in which the UFO was sighted vs each Month. ,"import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
#Source: https://bit.ly/1l9yjm9
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
most_sightings_years = df['Date_time'].dt.year.value_counts().head(10)
def is_top_years(year):
   if year in most_sightings_years.index:
       return year
month_vs_year = df.pivot_table(columns=df['Date_time'].dt.month,index=df['Date_time'].dt.year.apply(is_top_years),aggfunc='count',values='city')
month_vs_year.columns = month_vs_year.columns.astype(int)
print(""\nHeatmap for comparison of the top 10 years in which the UFO was sighted vs each month:"")
plt.figure(figsize=(10,8))
ax = sns.heatmap(month_vs_year, vmin=0, vmax=4)
ax.set_xlabel('Month').set_size(20)
ax.set_ylabel('Year').set_size(20)
","import pandas as pd
import matplotlib.pyplot as plt

# Read the data
df = pd.read_csv('https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv"
782,Write a Python program to remove existing indentation from all of the lines in a given text. ,"import textwrap
sample_text = '''
    Python is a widely used high-level, general-purpose, interpreted,
    dynamic programming language. Its design philosophy emphasizes
    code readability, and its syntax allows programmers to express
    concepts in fewer lines of code than possible in languages such
    as C++ or Java.
    '''
text_without_Indentation = textwrap.dedent(sample_text)
print()
print(text_without_Indentation )
print()
","import re

text = '''
This is a multi-line string.

This is also a multi-line string.

This is also a multi-line string.

'''

# Solution:
# Solution 1:
# text = re.sub('\n','', text)
# print(text)

# Solution 2:
# text = re.sub('\n','', text, 0, re.MULTILINE)
# print("
783,Write a Pandas program to import given excel data (employee.xlsx ) into a Pandas dataframe and sort based on multiple given columns. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx')
result = df.sort_values(by=['first_name','last_name'],ascending=[0,1])
result
","import pandas as pd

# Read the data into a dataframe
df = pd.read_excel('employee.xlsx', sheet_name='Sheet1')

# Sort the dataframe based on multiple columns
df = df.sort_values(['Name', 'Age', 'Job'])

# Print the dataframe
print(df)

# Create a Pandas Excel writer using X"
784,Write a Pandas program to start index with different value rather than 0 in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 37, 33, 30, 31, 32]})
     
print(""Original DataFrame:"")
print(df)
print(""\nDefault Index Range:"")
print(df.index)
df.index += 10 
print(""\nNew Index Range:"")
print(df.index)
print(""\nDataFrame with new index:"")
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Score': [60, 70, 65, 60, 70, 90]})

# Solution 1
df.loc[df['Name'] == 'Rolf', 'Score'] = 100

# Solution 2
df.loc[df['Name'] == 'Charlie', 'Score'] = 100"
785,"Write a Pandas program to create a bar plot of opening, closing stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-4-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Date', 'Open', 'Close']]
df3 = df2.set_index('Date')
plt.figure(figsize=(20,20))
df3.plot(kind='bar');
plt.suptitle('Opening/Closing stock prices Alphabet Inc.,\n01-04-2020 to 30-04-2020', fontsize=12, color='black')
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])

df.set_index('Date', inplace=True)

plt.bar(df.index, df['Open'])

plt.show()

""""""

import pandas as p"
786,Write a Pandas program to create a Pivot table and calculate how many women and men were in a particular cabin class. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table(index=['sex'], columns=['pclass'], values='survived', aggfunc='count')
print(result)
","import pandas as pd

df = pd.read_csv(""C:\\Users\\DELL\\Desktop\\Python\\Data_Visualization\\cabin_class.csv"")

df.head()

df.columns

df.columns = ['Cabin Class', 'Count']

df.head()

df.head(5)

df.head(5).Count

df.head(5).Cabin Class"
787,Write a Python program to find the maximum and minimum values in a given heterogeneous list. ,"def max_min_val(list_val):
     max_val = max(i for i in list_val if isinstance(i, int)) 
     min_val = min(i for i in list_val if isinstance(i, int))
     return(max_val, min_val)

list_val = ['Python', 3, 2, 4, 5, 'version'] 
print(""Original list:"")
print(list_val)
print(""\nMaximum and Minimum values in the said list:"")
print(max_min_val(list_val))
","def max_min(lst):
    max = lst[0]
    min = lst[0]
    for i in lst:
        if i > max:
            max = i
        if i < min:
            min = i
    return max, min

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_min(lst))

""""""

# Solution 1"
788,Write a Pandas program to split a given dataset using group by on specified column into two labels and ranges. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'salesman_id': [5001,5002,5003,5004,5005,5006,5007,5008,5009,5010,5011,5012],
'sale_jan':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 1760, 2983.43, 480.4,  1250.45, 75.29,1045.6]})
print(""Original Orders DataFrame:"")
print(df)
result = df.groupby(pd.cut(df['salesman_id'], 
                  bins=[0,5006,np.inf],  
                  labels=['S1', 'S2']))['sale_jan'].sum().reset_index()
print(""\nGroupBy with condition of  two labels and ranges:"")
print(result)
","import pandas as pd

# Read the data
df = pd.read_csv(""data/pima-indians-diabetes.csv"")

# Split the data into two labels
y = df[""Outcome""]
x = df.drop(""Outcome"", axis=1)

# Split the data into two ranges
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size"
789,Write a Python program to find common elements in a given list of lists. ,"def common_list_of_lists(lst):
    temp = set(lst[0]).intersection(*lst)
    return list(temp) 

nums = [[7,2,3,4,7],[9,2,3,2,5],[8,2,3,4,4]]
print(""Original list:"")
print(nums)
print(""\nCommon elements of the said list of lists:"")
print(common_list_of_lists(nums))
chars = [['a','b','c'],['b','c','d'],['c','d','e']]
print(""\nOriginal list:"")
print(chars)
print(""\nCommon elements of the said list of lists:"")
print(common_list_of_lists(chars))
","def common_elements(l1, l2):
    l1 = list(set(l1))
    l2 = list(set(l2))
    common = []
    for i in l1:
        for j in l2:
            if i == j:
                common.append(i)
    return common

l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
l2 = [1, 2, 3"
790,Write a Python program to check whether a list contains a sublist. ,"def is_Sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False

	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1
				
				if n == len(s):
					sub_set = True

	return sub_set

a = [2,4,3,5,7]
b = [4,3]
c = [3,7]
print(is_Sublist(a, b))
print(is_Sublist(a, c))
","def contains_sublist(lst, sublist):
    for i in range(len(lst)):
        if lst[i] in sublist:
            return True
    return False

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
sublist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(contains_sublist(lst, sublist))"
791,Write a Python program to count the number of each character of a given text of a text file. ,"import collections
import pprint
file_input = input('File Name: ')
with open(file_input, 'r') as info:
  count = collections.Counter(info.read().upper())
  value = pprint.pformat(count)
print(value)
","import os

def count_char(filename):
    count = 0
    with open(filename, 'r') as f:
        for line in f:
            count += len(line)
    return count

print(count_char('text.txt'))

""""""

# Solution 1

def count_char(filename):
    count = 0
    with open(filename, 'r') as f:
        for line in f:
            count +="
792,Write a NumPy program to concatenate two 2-dimensional arrays. ,"import numpy as np
a = np.array([[0, 1, 3], [5, 7, 9]])
b = np.array([[0, 2, 4], [6, 8, 10]])
c = np.concatenate((a, b), 1)
print(c)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

c = np.concatenate((a, b), axis=0)
print(c)

d = np.concatenate((a, b), axis=1)
print(d)

e = np.concatenate((a, b"
793,Write a Python program to remove None value from a given list using lambda function. ,"def remove_none(nums):
    result = filter(lambda v: v is not None, nums)
    return list(result)

nums = [12, 0, None, 23, None, -55, 234, 89, None, 0, 6, -12]
print(""Original list:"")
print(nums)
print(""\nRemove None value from the said list:"")
print(remove_none(nums))
","def remove_none(lst):
    for i in lst:
        if i is None:
            lst.remove(i)
    return lst

lst = [1, 2, 3, None, None, 4, 5, 6, 7, 8, 9, 10]
print(remove_none(lst))

""""""

# Solution:

def remove_none(lst):
    for i in lst:
        if i is None:"
794,Write a Python program to configure the rounding to round up and round down a given decimal value. Use decimal.Decimal,"import decimal
print(""Configure the rounding to round up:"")
decimal.getcontext().prec = 1
decimal.getcontext().rounding = decimal.ROUND_UP
print(decimal.Decimal(30) / decimal.Decimal(4))
print(""\nConfigure the rounding to round down:"")
decimal.getcontext().prec = 3
decimal.getcontext().rounding = decimal.ROUND_DOWN
print(decimal.Decimal(30) / decimal.Decimal(4))
print(""\nConfigure the rounding to round up:"")
print(decimal.Decimal('8.325').quantize(decimal.Decimal('.01'), rounding=decimal.ROUND_UP))
print(""\nConfigure the rounding to round down:"")
print(decimal.Decimal('8.325').quantize(decimal.Decimal('.01'), rounding=decimal.ROUND_DOWN))
","import decimal

def rounding(decimal_value):
    if decimal_value < 0:
        decimal_value = -decimal_value
    return decimal.Decimal(str(decimal_value)).quantize(decimal.Decimal('0.00'))

print(rounding(3.141592653589793))
print(rounding(-3.141592653589793))
print(rounding(3.14159265"
795,Write a Python program to find the highest 3 values of corresponding keys in a dictionary. ,"from heapq import nlargest
my_dict = {'a':500, 'b':5874, 'c': 560,'d':400, 'e':5874, 'f': 20}  
three_largest = nlargest(3, my_dict, key=my_dict.get)
print(three_largest) 
","def highest_3_values(d):
    for key in d:
        if d[key] > 3:
            print(key, d[key])

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
highest_3_values(d)

""""""

def highest_3_values(d):
    for key in d:
        if d[key] > 3:
            print(key, d[key"
796,Write a Pandas program to convert a NumPy array to a Pandas series. ,"import numpy as np
import pandas as pd
np_array = np.array([10, 20, 30, 40, 50])
print(""NumPy array:"")
print(np_array)
new_series = pd.Series(np_array)
print(""Converted Pandas series:"")
print(new_series)
","import numpy as np
import pandas as pd

# Create a NumPy array
arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Create a Pandas series
series = pd.Series(arr)

# Print the array
print(arr)

# Print the series
print(series)

# Convert the array to a Pandas series
series = pd.Series(arr,"
797,"Write a NumPy program to get the number of items, array dimensions, number of array dimensions and the memory size of each element of a given array. ","import numpy as np
array_nums = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(""Original array:"")
print(array_nums)
print(""\nNumber of items of the said array:"")
print(array_nums.size) 
print(""\nArray dimensions:"")
print(array_nums.shape)
print(""\nNumber of array dimensions:"")
print(array_nums.ndim)
print(""\nMemory size of each element of the said array"")
print(array_nums.itemsize)
","import numpy as np

arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(arr.shape)
print(arr.ndim)
print(arr.size)
print(arr.itemsize)

# Solution:

# arr = np.array([[1, 2, 3, 4], [5"
798,Write a Python program to drop empty Items from a given Dictionary. ,"dict1 = {'c1': 'Red', 'c2': 'Green', 'c3':None}
print(""Original Dictionary:"")
print(dict1)
print(""New Dictionary after dropping empty items:"")
dict1 = {key:value for (key, value) in dict1.items() if value is not None}
print(dict1)
","def drop_empty(d):
    for i in d:
        if d[i] == []:
            del d[i]
    return d

d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}
print(drop_empty(d))

""""""

def drop_empty(d):
    for i in d:
        if d[i] == []:
            del d[i"
799,Write a Pandas program to stack two given series vertically and horizontally. ,"import pandas as pd
series1 = pd.Series(range(10))
series2 = pd.Series(list('pqrstuvwxy'))
print(""Original Series:"")
print(series1)
print(series2)
series1.append(series2)
df = pd.concat([series1, series2], axis=1)
print(""\nStack two given series vertically and horizontally:"")
print(df)
","Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], index=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])

Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], index=['a', 'b', 'c"
800,Write a NumPy program to create an array which looks like below array. ,"import numpy as np
x = np.triu(np.arange(2, 14).reshape(4, 3), -1)
print(x)
","arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr = np.array([[1, 2, 3], [4, 5, 6], [7"
801,Write a NumPy program to find common values between two arrays. ,"import numpy as np
array1 = np.array([0, 10, 20, 40, 60])
print(""Array1: "",array1)
array2 = [10, 30, 40]
print(""Array2: "",array2)
print(""Common values between two arrays:"")
print(np.intersect1d(array1, array2))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([2, 4, 6, 8, 10])

print(np.intersect1d(a, b))

# Output:
# [1, 2, 3, 4, 5]
# [2, 4, 6, 8, 10]

# Hint:
# Use np.intersect1d() to find the common values between two arrays.
# Use"
802,Write a Pandas program to extract only number from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],
    'address': ['7277 Surrey Ave.','920 N. Bishop Ave.','9910 Golden Star St.', '25 Dunbar St.', '17 West Livingston Court']
    })
print(""Original DataFrame:"")
print(df)
def find_number(text):
    num = re.findall(r'[0-9]+',text)
    return "" "".join(num)
df['number']=df['address'].apply(lambda x: find_number(x))
print(""\Extracting numbers from dataframe columns:"")
print(df)
","import pandas as pd

# Read the data from the file
df = pd.read_csv(""data.csv"")

# Extract the number from the column ""Number""
print(df[""Number""].head(1))

# Extract the number from the column ""Number""
print(df[""Number""].head(1).values)

# Extract the number from the column ""Number""
print(df[""Number""].head(1).values[0])"
803,Write a Python program to download and display the content of robot.txt for en.wikipedia.org. ,"import requests
response = requests.get(""https://en.wikipedia.org/robots.txt"")
test = response.text
print(""robots.txt for http://www.wikipedia.org/"")
print(""==================================================="")
print(test)
","import urllib.request

url = ""https://www.en.wikipedia.org/wiki/Robot_%28s_%28s%29""

with urllib.request.urlopen(url) as response:
    data = response.read()
    print(data.decode(""utf-8""))

""""""

import urllib.request
import urllib.parse
import urllib.error

url = ""https://"
804,Write a Python program to calculate the discriminant value. ,"def discriminant():
    x_value = float(input('The x value: '))
    y_value = float(input('The y value: '))
    z_value = float(input('The z value: '))
    discriminant = (y_value**2) - (4*x_value*z_value)
    if discriminant > 0:
        print('Two Solutions. Discriminant value is:', discriminant)
    elif discriminant == 0:
        print('One Solution. Discriminant value is:', discriminant)
    elif discriminant < 0:
        print('No Real Solutions. Discriminant value is:', discriminant)


discriminant()
","def discriminant(a,b,c):
    return (b**2)-(4*a*c)

a = float(input(""Enter the value of a: ""))
b = float(input(""Enter the value of b: ""))
c = float(input(""Enter the value of c: ""))

print(""The discriminant is: "", discriminant(a,b,c))

""""""

# Solution:

def discriminant(a,b,c):
    return (b**"
805,Write a Python program to compute the sum of non-zero groups (separated by zeros) of a given list of numbers. ,"def test(lst):
    result = []
    ele_val = 0
    for digit in lst:
        if digit == 0:
            if ele_val != 0:
                result.append(ele_val)
                ele_val = 0
        else:
            ele_val += digit 
    if ele_val>0:
        result.append(ele_val) 
    return result
nums = [3,4,6,2,0,0,0,0,0,0,6,7,6,9,10,0,0,0,0,0,7,4,4,0,0,0,0,0,0,5,3,2,9,7,1,0,0,0]
print(""\nOriginal list:"")
print(nums)
print(""\nCompute the sum of non-zero groups (separated by zeros) of the said list of numbers:"")
print(test(nums))
","def sum_of_groups(nums):
    sum = 0
    for i in range(len(nums)):
        if nums[i]!= 0:
            sum += nums[i]
    return sum

print(sum_of_groups([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def sum_of_groups(nums):"
806,Write a Python program to generate all permutations of a list in Python. ,"import itertools
print(list(itertools.permutations([1,2,3])))
","import itertools

def permutations(lst):
    if len(lst) == 1:
        return [lst]
    else:
        return list(itertools.permutations(lst))

print(permutations([1,2,3]))
print(permutations([1,2,3,4]))
print(permutations([1,2,3,4,5]))
print(permutations([1,2,3,4,5,"
807,Write a Python program to sort unsorted strings using natural sort. ,"#Ref.https://bit.ly/3a657IZ
from __future__ import annotations
import re
def natural_sort(input_list: list[str]) -> list[str]:
    def alphanum_key(key):
        return [int(s) if s.isdigit() else s.lower() for s in re.split(""([0-9]+)"", key)]
    return sorted(input_list, key=alphanum_key)
strs = ['2 ft 7 in', '1 ft 5 in', '10 ft 2 in', '2 ft 11 in', '7 ft 6 in']
print(""\nOriginal list:"")
print(strs)
natural_sort(strs)
print(""Sorted order is:"", strs)
strs =  ['1 ft 5 in', '10 ft 2 in', '2 ft 11 in', '2 ft 7 in', '7 ft 6 in']
print(""\nOriginal list:"")
print(strs)
natural_sort(strs)
print(""Sorted order is:"", strs)
strs =  ['Elm11', 'Elm12', 'Elm2', 'elm0', 'elm1', 'elm10', 'elm13', 'elm9']
print(""\nOriginal list:"")
print(strs)
natural_sort(strs)
print(""Sorted order is:"", strs)
strs =   ['Elm11', 'Elm12', 'Elm2', 'elm0', 'elm1', 'elm10', 'elm13', 'elm9']
print(""\nOriginal list:"")
print(strs)
natural_sort(strs)
print(""Sorted order is:"", strs) 
","def sort_unsorted_strings(unsorted_strings):
    # your code goes here
    return unsorted_strings

""""""

def sort_unsorted_strings(unsorted_strings):
    # your code goes here
    return unsorted_strings

""""""

def sort_unsorted_strings(unsorted_strings):
    # your code goes here
    return unsorted_strings

""""""

def sort_unsorted_strings(unsorted_strings):
    # your code"
808,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight the maximum value in each column. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
def highlight_max(s):
    '''
    highlight the maximum in a Series green.
    '''
    is_max = s == s.max()
    return ['background-color: green' if v else '' for v in is_max]

print(""\nHighlight the maximum value in each column:"")
df.style.apply(highlight_max,subset=pd.IndexSlice[:, ['B', 'C', 'D', 'E']])
","import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randint(0, 100, size=(10, 4)), columns=['col1', 'col2', 'col3', 'col4'])
print(df)

df.max()

df.max(axis=1)

df.max(axis=1).max()

df.max(axis="
809,Write a Python program to find whether a given array of integers contains any duplicate element. Return true if any value appears at least twice in the said array and return false if every element is distinct. ,"def test_duplicate(array_nums):
    nums_set = set(array_nums)    
    return len(array_nums) != len(nums_set)     
print(test_duplicate([1,2,3,4,5]))
print(test_duplicate([1,2,3,4, 4]))
print(test_duplicate([1,1,2,2,3,3,4,4,5]))
","def duplicate_element(arr):
    for i in range(len(arr)):
        if arr[i] == arr[i]:
            return True
    return False

arr = [1,2,3,1,2,3,4,3,2,4,5,6,7,8,9,9,9,9,9,9,9,9,"
810,Write a NumPy program to create a white image of size 512x256. ,"from PIL import Image
import numpy as np

a = np.full((512, 256, 3), 255, dtype=np.uint8)
image = Image.fromarray(a, ""RGB"")
image.save(""white.png"", ""PNG"")
","import numpy as np

# Create a black image of size 512x256
img = np.zeros((512, 256))

# Create a white image of size 512x256
img = np.ones((512, 256))

# Create a black image of size 512x256
img = np.full((512, 256), 255)

# Create a white image of size 512x256
img = np.full((512, 256), 255)

# Create a black image of size"
811,Write a Python program to find the maximum and minimum values in a given list of tuples. ,"from operator import itemgetter

def max_min_list_tuples(class_students):
    return_max = max(class_students,key=itemgetter(1))[1] 
    return_min = min(class_students,key=itemgetter(1))[1] 
    return return_max, return_min
   
class_students = [('V', 60), ('VI', 70), ('VII', 75), ('VIII', 72), ('IX', 78), ('X', 70)]
print(""Original list with tuples:"")
print(class_students)
print(""\nMaximum and minimum values of the said list of tuples:"")
print(max_min_list_tuples(class_students))
","def max_min(tup):
    return tup[0] if tup[0] > tup[1] else tup[1]

tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print(max_min(tup1))

tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print(max_min(tup"
812,Write a Python program to find the items starts with specific character from a given list. ,"def test(lst, char):
    result = [i for i in lst if i.startswith(char)]
    return result
text = [""abcd"", ""abc"", ""bcd"", ""bkie"", ""cder"", ""cdsw"", ""sdfsd"", ""dagfa"", ""acjd""]
print(""\nOriginal list:"")
print(text)
char = ""a""
print(""\nItems start with"",char,""from the said list:"")
print(test(text, char))
char = ""d""
print(""\nItems start with"",char,""from the said list:"")
print(test(text, char))
char = ""w""
print(""\nItems start with"",char,""from the said list:"")
print(test(text, char))
","def solution(s):
    return [i for i in s if i[0] == 'a']

""""""

def solution(s):
    return [i for i in s if i[0] == 'a']

print(solution([""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", """
813,Write a Python program to split a given list into two parts where the length of the first part of the list is given. ,"def split_two_parts(n_list, L):
    return n_list[:L], n_list[L:]
n_list = [1,1,2,3,4,4,5, 1]
print(""Original list:"") 
print(n_list)
first_list_length = 3
print(""\nLength of the first part of the list:"",first_list_length)
print(""\nSplited the said list into two parts:"")
print(split_two_parts(n_list, first_list_length))

","def split_list(lst):
    first_part = lst[:len(lst)//2]
    second_part = lst[len(lst)//2:]
    return first_part, second_part

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(split_list(lst))

""""""

def split_list(lst):"
814,Write a Python program to check the sum of three elements (each from an array) from three arrays is equal to a target value. Print all those three-element combinations. ,"import itertools
from functools import partial
X = [10, 20, 20, 20]
Y = [10, 20, 30, 40]
Z = [10, 30, 40, 20]
T = 70

def check_sum_array(N, *nums):
  if sum(x for x in nums) == N:
    return (True, nums)
  else:
      return (False, nums)
pro = itertools.product(X,Y,Z)
func = partial(check_sum_array, T)
sums = list(itertools.starmap(func, pro))

result = set()
for s in sums:
    if s[0] == True and s[1] not in result:
      result.add(s[1])
      print(result)
","def threeSum(nums):
    nums.sort()
    result = []
    for i in range(len(nums)):
        if i > 0 and nums[i] == nums[i-1]:
            continue
        left, right = i+1, len(nums)-1
        while left < right:
            if nums[i] + nums[left]"
815,Write a Python program to construct an infinite iterator that returns evenly spaced values starting with a specified number and step. ,"import itertools as it
start = 10
step = 1
print(""The starting number is "", start, ""and step is "",step)
my_counter = it.count(start, step)
# Following  loop will run for ever
print(""The said function print never-ending items:"")
for i in my_counter:    
    print(i)
","def iter_range(start, stop, step):
    while start < stop:
        yield start
        start += step

print(list(iter_range(1, 10, 2)))

""""""

def iter_range(start, stop, step):
    while start < stop:
        yield start
        start += step

print(list(iter_range(1, 10, 2)))

""""""

def iter_range(start,"
816,Write a NumPy program to create an array of equal shape and data type of a given array. ,"import numpy as np  
nums = np.array([[5.54, 3.38, 7.99],
              [3.54, 8.32, 6.99],
              [1.54, 2.39, 9.29]])
print(""Original array:"")
print(nums)
print(""\nNew array of equal shape and data type of the said array filled by 0:"")
print(np.zeros_like(nums))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], dtype=np.int64)

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], dtype=np.float64)"
817,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to display the dataframe in table style and border around the table and not around the rows. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
print(""\nDataframe - table style and border around the table and not around the rows:"")
df.style.set_table_styles([{'selector':'','props':[('border','4px solid #7a7')]}])
","import pandas as pd

df = pd.DataFrame(
    {
        ""First column"": [""Rolf"", ""Charlie"", ""Anna"", ""Bob"", ""Jen"", ""Sue"", ""Anne"", ""Brad""],
        ""Second column"": [1, 2, 3, 4, 5, 6, 7, 8],
        ""Third column"": [10, 20, 30, 40,"
818,rite a Python program which accepts a sequence of comma separated 4 digit binary numbers as its input and print the numbers that are divisible by 5 in a comma separated sequence. ,"items = []
num = [x for x in input().split(',')]
for p in num:
    x = int(p, 2)
    if not x%5:
        items.append(p)
print(','.join(items))
","def solution(numbers):
    answer = []
    for i in numbers:
        if int(i, 2) % 5 == 0:
            answer.append(i)
    return answer

print(solution([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
819,Write a Python program to compute the sum of digits of each number of a given list. ,"def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())

nums = [10,2,56]
print(""Original tuple: "") 
print(nums)
print(""Sum of digits of each number of the said list of integers:"")
print(sum_of_digits(nums))

nums = [10,20,4,5,'b',70,'a']
print(""\nOriginal tuple: "") 
print(nums)
print(""Sum of digits of each number of the said list of integers:"")
print(sum_of_digits(nums))

nums = [10,20,-4,5,-70]
print(""\nOriginal tuple: "") 
print(nums)
print(""Sum of digits of each number of the said list of integers:"")
print(sum_of_digits(nums))
","def sum_digits(nums):
    sum = 0
    for i in nums:
        sum += i
    return sum

print(sum_digits([1, 2, 3, 4, 5]))

""""""

def sum_digits(nums):
    sum = 0
    for i in nums:
        sum += i
    return sum

print(sum_digits([1, 2, 3, 4, 5]))"
820,Write a Pandas program to print the day after and before a specified date. Also print the days between two given dates. ,"import pandas as pd
import datetime
from datetime import datetime, date
today = datetime(2012, 10, 30)
print(""Current date:"", today)
tomorrow = today + pd.Timedelta(days=1)
print(""Tomorrow:"", tomorrow)
yesterday = today - pd.Timedelta(days=1)
print(""Yesterday:"", yesterday)
date1 = datetime(2016, 8, 2)
date2 = datetime(2016, 7, 19)
print(""\nDifference between two dates: "",(date1 - date2))
","import datetime

def get_day_after(date):
    return date.day

def get_day_before(date):
    return date.day - 1

def get_days_between(date1, date2):
    return (date2 - date1).days

def main():
    date1 = datetime.date(2021, 1, 1)
    date2 = datetime.date(2021, 1,"
821,Write a Pandas program to extract date (format: mm-dd-yyyy) from a given column of a given DataFrame. ,"import pandas as pd
import re as re
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})
print(""Original DataFrame:"")
print(df)
def find_valid_dates(dt):
    #format: mm-dd-yyyy
    result = re.findall(r'\b(1[0-2]|0[1-9])/(3[01]|[12][0-9]|0[1-9])/([0-9]{4})\b',dt)
    return result
df['valid_dates']=df['date_of_sale'].apply(lambda dt : find_valid_dates(dt))
print(""\nValid dates (format: mm-dd-yyyy):"")
print(df)
","import pandas as pd
import datetime

df = pd.read_csv('https://github.com/datasets/csv/blob/master/data/airline.csv?raw=true')

df['Date'] = pd.to_datetime(df['Date'])
df['Date'] = df['Date'].dt.strftime('%m-%d-%Y')

print(df"
822,Write a Python program to sort a list of elements using the quick sort algorithm. ,"def quickSort(data_list):
   quickSortHlp(data_list,0,len(data_list)-1)

def quickSortHlp(data_list,first,last):
   if first < last:

       splitpoint = partition(data_list,first,last)

       quickSortHlp(data_list,first,splitpoint-1)
       quickSortHlp(data_list,splitpoint+1,last)


def partition(data_list,first,last):
   pivotvalue = data_list[first]

   leftmark = first+1
   rightmark = last

   done = False
   while not done:

       while leftmark <= rightmark and data_list[leftmark] <= pivotvalue:
           leftmark = leftmark + 1

       while data_list[rightmark] >= pivotvalue and rightmark >= leftmark:
           rightmark = rightmark -1

       if rightmark < leftmark:
           done = True
       else:
           temp = data_list[leftmark]
           data_list[leftmark] = data_list[rightmark]
           data_list[rightmark] = temp

   temp = data_list[first]
   data_list[first] = data_list[rightmark]
   data_list[rightmark] = temp


   return rightmark

data_list = [54,26,93,17,77,31,44,55,20]
quickSort(data_list)
print(data_list)
","def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[0]
    less = [i for i in arr[1:] if i <= pivot]
    greater = [i for i in arr[1:] if i > pivot]
    return quick_sort(less) + [pivot] + quick_sort(greater)

arr = [6, 5, 4, 8, 2, 1, 7, 3, 9"
823,"Write a Python program to check if a given list is strictly increasing or not. Moreover, If removing only one element from the list results in a strictly increasing list, we still consider the list true. ","# Source: https://bit.ly/3qZqcwm
def almost_increasing_sequence(sequence):
    if len(sequence) < 3:
        return True

    a, b, *sequence = sequence
    skipped = 0
    for c in sequence:
        if a < b < c:  # XXX
            a, b = b, c
            continue
        elif b < c:    # !XX
            a, b = b, c
        elif a < c:    # X!X
            a, b = a, c
        skipped += 1
        if skipped == 2:
            return False
    return a < b

print(almost_increasing_sequence([]))
print(almost_increasing_sequence([1]))
print(almost_increasing_sequence([1, 2]))
print(almost_increasing_sequence([1, 2, 3]))
print(almost_increasing_sequence([3, 1, 2]))
print(almost_increasing_sequence([1, 2, 3, 0, 4, 5, 6]))
print(almost_increasing_sequence([1, 2, 3, 0]))
print(almost_increasing_sequence([1, 2, 0, 3]))
print(almost_increasing_sequence([10, 1, 2, 3, 4, 5]))
print(almost_increasing_sequence([1, 2, 10, 3, 4]))
print(almost_increasing_sequence([1, 2, 3, 12, 4, 5]))

print(almost_increasing_sequence([3, 2, 1]))
print(almost_increasing_sequence([1, 2, 0, -1]))
print(almost_increasing_sequence([5, 6, 1, 2]))
print(almost_increasing_sequence([1, 2, 3, 0, -1]))
print(almost_increasing_sequence([10, 11, 12, 2, 3, 4, 5]))
","def is_increasing(lst):
    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    return True

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(is_increasing(lst))

"""""""
824,"Write a Python program to generate a random color hex, a random alphabetical string, random value between two integers (inclusive) and a random multiple of 7 between 0 and 70. Use random.randint()","import random
import string
print(""Generate a random color hex:"")
print(""#{:06x}"".format(random.randint(0, 0xFFFFFF)))
print(""\nGenerate a random alphabetical string:"")
max_length = 255
s = """"
for i in range(random.randint(1, max_length)):
    s += random.choice(string.ascii_letters)
print(s)
print(""Generate a random value between two integers, inclusive:"")
print(random.randint(0, 10))
print(random.randint(-7, 7))
print(random.randint(1, 1))
print(""Generate a random multiple of 7 between 0 and 70:"")
print(random.randint(0, 10) * 7)
","import random

def random_color():
    return ""#%06x"" % random.randint(0x00ff00, 0xffffff)

def random_alphabet():
    return chr(random.randint(97, 122))

def random_value():
    return random.randint(0, 70)

def random_multiple():"
825,Write a Python class which has two methods get_String and print_String. get_String accept a string from the user and print_String print the string in upper case. ,"class IOString():
    def __init__(self):
        self.str1 = """"

    def get_String(self):
        self.str1 = input()

    def print_String(self):
        print(self.str1.upper())

str1 = IOString()
str1.get_String()
str1.print_String()
","class MyClass:
    def get_String(self, string):
        for i in string:
            print(i.upper())

    def print_String(self, string):
        for i in string:
            print(i.upper())

obj = MyClass()
obj.get_String(""Hello"")
obj.print_String(""Hello"")

""""""

class MyClass:"
826,Write a Python program to get the Fibonacci series between 0 to 50. ,"x,y=0,1

while y<50:
    print(y)
    x,y = y,x+y
	","def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

print(fib(50))

""""""

# Solution

def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n"
827,Write a Python program to convert a given dictionary into a list of lists. ,"def test(dictt):
    result = list(map(list, dictt.items()))
    return result    

color_dict = {1 : 'red', 2 : 'green', 3 : 'black', 4 : 'white', 5 : 'black'}
print(""\nOriginal Dictionary:"")
print(color_dict)
print(""Convert the said dictionary into a list of lists:"")
print(test(color_dict))

color_dict = {'1' : 'Austin Little', '2' : 'Natasha Howard', '3' : 'Alfred Mullins', '4' : 'Jamie Rowe'}
print(""\nOriginal Dictionary:"")
print(color_dict)
print(""Convert the said dictionary into a list of lists:"")
print(test(color_dict))
","d = {'a': 1, 'b': 2, 'c': 3}

l = []

for i in d:
    l.append(d[i])

print(l)

# Output: [1, 2, 3]

# Solution:

d = {'a': 1, 'b': 2, 'c': 3}

l = []

for i in d:
    l.append(d[i])

print(l)"
828,"Write a NumPy program to create two arrays with shape (300,400, 5), fill values using unsigned integer (0 to 255). Insert a new axis that will appear at the beginning in the expanded array shape. Now combine the said two arrays into one. ","import numpy as np 
nums1 = np.random.randint(low=0, high=256, size=(200, 300, 3), dtype=np.uint8)
nums2 = np.random.randint(low=0, high=256, size=(200, 300, 3), dtype=np.uint8)
print(""Array1:"") 
print(nums1) 
print(""\nArray2:"") 
print(nums2) 
nums1 = np.expand_dims(nums1, axis=0)
nums2 = np.expand_dims(nums2, axis=0)
nums = np.append(nums1, nums2, axis=0)
print(""\nCombined array:"")
print(nums)
","import numpy as np

a = np.arange(300).reshape(300,400,5)
b = np.arange(400).reshape(300,400,5)

a[:,:,0] = 255
a[:,:,1] = 255
a[:,:,2] = 255
a"
829,Write a Pandas program to create a Pivot table and find the minimum sale value of the items. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df, index='Item', values='Sale_amt', aggfunc=np.min)
print(table)
","pivot_table(df, columns=['Item_Name'], values='Sale_Price')

""""""

# Solution 1

import pandas as pd
import numpy as np

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pivot_table.csv?raw=true')

# Create a pivot table
df.pivot_table(values='Sale_Price"
830,Write a Python program to print all unique values in a dictionary. ,"L = [{""V"":""S001""}, {""V"": ""S002""}, {""VI"": ""S001""}, {""VI"": ""S005""}, {""VII"":""S005""}, {""V"":""S009""},{""VIII"":""S007""}]
print(""Original List: "",L)
u_value = set( val for dic in L for val in dic.values())
print(""Unique Values: "",u_value)
","def unique_values(d):
    for key in d:
        if d[key] == 1:
            print(key)

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
unique_values(d)

""""""

def unique_values(d):
    for key in d:
        if d[key] == 1:
            print(key)

d = {'a': 1, 'b"
831,Write a Python program to remove key values pairs from a list of dictionaries. ,"original_list = [{'key1':'value1', 'key2':'value2'}, {'key1':'value3', 'key2':'value4'}]
print(""Original List: "")
print(original_list)
new_list = [{k: v for k, v in d.items() if k != 'key1'} for d in original_list]
print(""New List: "")
print(new_list)
","def remove_key_value_pairs(dictionaries):
    for i in dictionaries:
        for j in i:
            if j in dictionaries[i]:
                dictionaries[i].remove(j)
    return dictionaries

dictionaries = [
    {'name': 'John', 'age': 30, 'city': 'San Francisco'},
    {'name': 'Mary', 'age': 25, 'city': 'Los Angeles'},
    {'"
832,Write a NumPy program to create a 5x5 matrix with row values ranging from 0 to 4. ,"import numpy as np
x = np.zeros((5,5))
print(""Original array:"")
print(x)
print(""Row values ranging from 0 to 4."")
x += np.arange(5)
print(x)
","import numpy as np

matrix = np.array([[0, 1, 2, 3, 4],
                   [5, 6, 7, 8, 9],
                   [10, 11, 12, 13, 14],
                   [15, 16, 17, 18, 19],
                   [20, 21, 22, 23, 24]])

print(matrix)

# solution

# solution

# solution

# solution

# solution"
833,"Write a Python program to find the first appearance of the substring 'not' and 'poor' from a given string, if 'not' follows the 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string. ","def not_poor(str1):
  snot = str1.find('not')
  spoor = str1.find('poor')
  

  if spoor > snot and snot>0 and spoor>0:
    str1 = str1.replace(str1[snot:(spoor+4)], 'good')
    return str1
  else:
    return str1
print(not_poor('The lyrics is not that poor!'))
print(not_poor('The lyrics is poor!'))
","# solution

# Input Format

The first line contains a string,.
The second line contains the substring.

# Output Format

Print the modified string.

# Sample Input

not bad
poor
Sample Output

good
Explanation

'not' follows 'poor', so it replaces the"
834,Write a Python program to lowercase first n characters in a string. ,"str1 = 'W3RESOURCE.COM'
print(str1[:4].lower() + str1[4:])
","def lowercase_first_n_chars(string, n):
    return string[:n].lower() + string[n:]

""""""

def lowercase_first_n_chars(string, n):
    return string[:n].lower() + string[n:]

if __name__ == '__main__':
    string = ""hello world""
    n = 3
    print(lowercase_first_n_chars(string, n))"
835,Write a Python program to find the first duplicate element in a given array of integers. Return -1 If there are no such elements. ,"def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate

print(find_first_duplicate([1, 2, 3, 4, 4, 5]))
print(find_first_duplicate([1, 2, 3, 4]))
print(find_first_duplicate([1, 1, 2, 3, 3, 2, 2]))
","def findDuplicate(arr):
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] == arr[j]:
                return arr[i]
    return -1

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(findDuplicate(arr))

"""""""
836,Write a Python program to interleave two given list into another list randomly using map() function. ,"import random
def randomly_interleave(nums1, nums2):
    result =  list(map(next, random.sample([iter(nums1)]*len(nums1) + [iter(nums2)]*len(nums2), len(nums1)+len(nums2))))
    return result
nums1 = [1,2,7,8,3,7]
nums2 = [4,3,8,9,4,3,8,9]
print(""Original lists:"") 
print(nums1)
print(nums2)
print(""\nInterleave two given list into another list randomly:"")
print(randomly_interleave(nums1, nums2))
","import random

def interleave(lst1, lst2):
    return list(map(list, zip(*lst1, *lst2)))

lst1 = [1, 2, 3, 4, 5]
lst2 = [6, 7, 8, 9, 10]

print(interleave(lst1, lst2))

# Output:
# [1, 2, 3, 4, 5, 6, 7, 8,"
837,Write a Python program to remove duplicate words from a given string. ,"def unique_list(text_str):
    l = text_str.split()
    temp = []
    for x in l:
        if x not in temp:
            temp.append(x)
    return ' '.join(temp)

text_str = ""Python Exercises Practice Solution Exercises""
print(""Original String:"")
print(text_str)
print(""\nAfter removing duplicate words from the said string:"")
print(unique_list(text_str))
","def remove_duplicate_words(string):
    # your code goes here
    return string

# test your code
print(remove_duplicate_words(""this is a string""))
print(remove_duplicate_words(""this is a string""))
print(remove_duplicate_words(""this is a string""))
print(remove_duplicate_words(""this is a string""))
print(remove_duplicate_words(""this is a string""))
print(remove_du"
838,Write a Pandas program to get the index of an element of a given Series. ,"import pandas as pd
ds = pd.Series([1,3,5,7,9,11,13,15], index=[0,1,2,3,4,5,7,8])
print(""Original Series:"")
print(ds)
print(""\nIndex of 11 in the said series:"")
x = ds[ds == 11].index[0]
print(x)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'Name': ['John', 'Jane', 'John', 'Jane', 'John', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', '"
839,"Write a Python program to check if a given string contains an element, which is present in a list. ","def test(lst,str1):
    result = [el for el in lst if(el in str1)] 
    return bool(result)


str1 = ""https://www.w3resource.com/python-exercises/list/""
lst = ['.com', '.edu', '.tv']   
print(""The original string and list: "") 
print(str1)
print(lst)
print(""\nCheck if"",str1,""contains an element, which is present in the list"",lst)
print(test(lst,str1))
str1 = ""https://www.w3resource.net""
lst = ['.com', '.edu', '.tv']   
print(""\nThe original string and list: "" + str1) 
print(str1)
print(lst)
print(""\nCheck if"",str1,""contains an element, which is present in the list"",lst)
print(test(lst,str1))
","def is_present(str, lst):
    for i in lst:
        if i in str:
            return True
    return False

print(is_present(""abc"", [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"","
840,Write a Python program to insert a list of records into a given SQLite table. ,"import sqlite3 
from sqlite3 import Error 
def sql_connection():
    try:
      conn = sqlite3.connect('mydatabase.db')
      return conn
    except Error:
      print(Error)
 
def sql_table(conn, rows):
    cursorObj = conn.cursor()
# Create the table
    cursorObj.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")
    sqlite_insert_query = """"""INSERT INTO salesman
                          (salesman_id, name, city, commission) 
                          VALUES (?, ?, ?, ?);""""""    
    cursorObj.executemany(sqlite_insert_query, rows)
    conn.commit()      
    print(""Number of records after inserting rows:"")
    cursor = cursorObj.execute('select * from salesman;')
    print(len(cursor.fetchall()))
  
# Insert records
rows = [(5001,'James Hoog', 'New York', 0.15),
         (5002,'Nail Knite', 'Paris', 0.25),
         (5003,'Pit Alex', 'London', 0.15),
         (5004,'Mc Lyon', 'Paris', 0.35),
         (5005,'Paul Adam', 'Rome', 0.45)]
                   
sqllite_conn = sql_connection() 
sql_table(sqllite_conn, rows)
    
if (sqllite_conn):
  sqllite_conn.close()
  print(""\nThe SQLite connection is closed."")
","import sqlite3

conn = sqlite3.connect('mydatabase.db')
c = conn.cursor()

c.execute(""""""CREATE TABLE IF NOT EXISTS mytable (
    first_name text,
    last_name text,
    age integer,
    gender text
)"""""")

c.execute(""INSERT INTO mytable VALUES ('John', 'Doe', 25, 'Male')"")
c.execute(""INSERT INTO mytable VALUES"
841,Write a Python program to sort a list of elements using Pancake sort. ,"def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums

user_input = input(""Input numbers separated by a comma:\n"").strip()
nums = [int(item) for item in user_input.split(',')]
print(pancake_sort(nums))
","def pancakeSort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [5, 2, 4, 1, 3]
print(pancakeSort(arr))

""""""

def pancakeSort(arr"
842,Write a Python program to shift last element to first position and first element to last position in a given list. ,"def shift_first_last(lst):
    x = lst.pop(0)
    y = lst.pop()
    lst.insert(0, y)
    lst.insert(len(lst), x)
    return lst

nums = [1,2,3,4,5,6,7]
print(""Original list:"")
print(nums)
print(""Shift last element to first position and first element to last position of the said list:"")
print(shift_first_last(nums))

chars = ['s','d','f','d','s','s','d','f']
print(""\nOriginal list:"")
print(chars)
print(""Shift last element to first position and first element to last position of the said list:"")
print(shift_first_last(chars))
","def shift_last_element(lst):
    lst.pop()
    lst.pop()
    lst.append(lst.pop(0))
    lst.insert(0,lst.pop(0))
    return lst

lst = [1,2,3,4,5,6,7,8,9,10]
print(shift_last_element(lst))

""""""

def shift_"
843,Write a NumPy program to create a 5x5x5 cube of 1's. ,"import numpy as np
x = np.zeros((5, 5, 5)).astype(int) + 1
print(x)
","import numpy as np

# Create a 5x5x5 cube of 1's
cube = np.ones((5,5,5))

# Print the cube
print(cube)

# Create a 5x5x5 cube of 0's
cube = np.zeros((5,5,5))

# Print the cube
print(cube)

# Create a 5x5x5 cube of -1's
cube = np.full((5,5,5"
844,Write a NumPy program to display NumPy array elements of floating values with given precision. ,"import numpy as np
x=np.array([ 0.26153123, 0.52760141, 0.5718299, 0.5927067, 0.7831874, 0.69746349,             
  0.35399976, 0.99469633, 0.0694458, 0.54711478]) 
print(""Original array elements:"")
print(x)
print(""Print array values with precision 3:"")
np.set_printoptions(precision=3)
print(x)
","import numpy as np

a = np.array([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.10])
print(a)

# Solution:

# a = np.array([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10"
845,"Write a Pandas program to compute the minimum, 25th percentile, median, 75th, and maximum of a given series. ","import pandas as pd
import numpy as np
num_state = np.random.RandomState(100)
num_series = pd.Series(num_state.normal(10, 4, 20))
print(""Original Series:"")
print(num_series)
result = np.percentile(num_series, q=[0, 25, 50, 75, 100])
print(""\nMinimum, 25th percentile, median, 75th, and maximum of a given series:"")
print(result)
","import pandas as pd
import numpy as np

# Read the data from the file
df = pd.read_csv(""data.csv"")

# Create a new dataframe with the columns
# ""x"" and ""y""
df_new = pd.DataFrame(columns=[""x"", ""y""])

# Create a new column ""z""
df_new[""z""] = df[""x""] + df["""
846,Write a Python program to find the majority element from a given array of size n using Collections module. ,"import collections
class Solution(object):
    def majorityElement(self, nums):
        """"""
        :type nums: List[int]
        :return type: int
        """"""
        count_ele=collections.Counter(nums)
        return count_ele.most_common()[0][0]

result = Solution().majorityElement([10,10,20,30,40,10,20,10])
print(result)
","def majority_element(arr):
    count = 0
    for i in arr:
        if arr.count(i) > count:
            count = arr.count(i)
            index = arr.index(i)
    return index

arr = [1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3"
847,Write a Python program to insert a new text within a url in a specified position. ,"from bs4 import BeautifulSoup
html_doc = '<a href=""http://example.com/"">HTML<i>w3resource.com</i></a>'
soup = BeautifulSoup(html_doc, ""lxml"")
tag = soup.a
print(""Original Markup:"")
print(tag.contents)
tag.insert(2, ""CSS"") #2-> Position of the text (1, 2, 3)
print(""\nNew url after inserting the text:"")
print(tag.contents)
","url = ""https://www.google.com""
position = 3
new_text = ""This is a new text""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

#"
848,Write a Python program to convert a given list of strings and characters to a single list of characters. ,"def l_strs_to_l_chars(lst):
    result = [i for element in lst for i in element]
    return result

colors = [""red"", ""white"", ""a"", ""b"", ""black"", ""f""]
print(""Original list:"")
print(colors)
print(""\nConvert the said list of strings and characters to a single list of characters:"")
print(l_strs_to_l_chars(colors))
","def convert_to_char(lst):
    return [c for c in lst if c.isalpha()]

print(convert_to_char([""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"","
849,Write a Python program to perform a deep flattens a list. ,"from collections.abc import Iterable
def deep_flatten(lst):
  return ([a for i in lst for a in
          deep_flatten(i)] if isinstance(lst, Iterable) else [lst])
nums = [1, [2], [[3], [4], 5], 6]
print(""Original list elements:"")
print(nums) 
print()
print(""Deep flatten the said list:"")
print(deep_flatten(nums))
nums = [[[1, 2, 3], [4, 5]], 6]
print(""\nOriginal list elements:"")
print(nums) 
print()
print(""Deep flatten the said list:"")
print(deep_flatten(nums))
","def flatten(lst):
    if len(lst) == 0:
        return []
    else:
        return flatten(lst[0]) + flatten(lst[1:])

lst = [1, 2, [3, 4, [5, [6, 7]], 8]]
print(flatten(lst))

""""""

def flatten(lst):
    if len(lst) == 0:
        return []
    else:"
850,Write a Python program to insert a given string at the beginning of all items in a list. ,"num = [1,2,3,4]
print(['emp{0}'.format(i) for i in  num])
","def insert_string(list, string):
    for i in range(len(list)):
        list[i] = list[i] + string
    return list

list = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"","
851,Write a Python program to get a datetime or timestamp representation from current datetime. ,"import arrow
a = arrow.utcnow()
print(""Datetime representation:"")
print(a.datetime)
b = a.timestamp
print(""\nTimestamp representation:"")
print(b)
","import datetime

def get_timestamp():
    return datetime.datetime.now()

def get_datetime():
    return datetime.datetime.now()

def get_timestamp_as_string():
    return get_timestamp().strftime('%Y-%m-%d %H:%M:%S')

def get_datetime_as_string():
    return get_datetime().strftime('%Y-%m-"
852,rite a NumPy program to create a null vector of size 10 and update sixth value to 11.,"
import numpy as np
x = np.zeros(10)
print(x)
print(""Update sixth value to 11"")
x[6] = 11
print(x)
","import numpy as np

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
x[6] = 11

# Output:
# array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Hint: You can use the built-in function np.where to solve this problem.

# Hint: You can use the built-in function np.where"
853,Write a Python program to concatenate the consecutive numbers in a given string. ,"import re
txt = ""Enter at 1 20 Kearny Street. The security desk can direct you to floor 1 6. Please have your identification ready.""
print(""Original string:"")
print(txt)
new_txt = re.sub(r""(?<=\d)\s(?=\d)"", '', txt)
print('\nAfter concatenating the consecutive numbers in the said string:')
print(new_txt)
","def concatenate(str1, str2):
    return str1 + str2

print(concatenate(""Hello"", ""World""))

""""""

def concatenate(str1, str2):
    return str1 + str2

print(concatenate(""Hello"", ""World""))

""""""

def concatenate(str1, str2):
    return str1 + str2

print(concatenate(""Hello"", ""World""))"
854,Write a Python program to sort unsorted numbers using Odd Even Transposition Parallel sort. ,"#Ref.https://bit.ly/3cce7iB
from multiprocessing import Lock, Pipe, Process

# lock used to ensure that two processes do not access a pipe at the same time
processLock = Lock()
def oeProcess(position, value, LSend, RSend, LRcv, RRcv, resultPipe):
    global processLock

    # we perform n swaps since after n swaps we know we are sorted
    # we *could* stop early if we are sorted already, but it takes as long to
    # find out we are sorted as it does to sort the list with this algorithm
    for i in range(0, 10):

        if (i + position) % 2 == 0 and RSend is not None:
            # send your value to your right neighbor
            processLock.acquire()
            RSend[1].send(value)
            processLock.release()

            # receive your right neighbor's value
            processLock.acquire()
            temp = RRcv[0].recv()
            processLock.release()

            # take the lower value since you are on the left
            value = min(value, temp)
        elif (i + position) % 2 != 0 and LSend is not None:
            # send your value to your left neighbor
            processLock.acquire()
            LSend[1].send(value)
            processLock.release()

            # receive your left neighbor's value
            processLock.acquire()
            temp = LRcv[0].recv()
            processLock.release()

            # take the higher value since you are on the right
            value = max(value, temp)
    # after all swaps are performed, send the values back to main
    resultPipe[1].send(value)
""""""
the function which creates the processes that perform the parallel swaps
arr = the list to be sorted
""""""
def OddEvenTransposition(arr):
    processArray = []
    resultPipe = []
    # initialize the list of pipes where the values will be retrieved
    for _ in arr:
        resultPipe.append(Pipe())
    # creates the processes
    # the first and last process only have one neighbor so they are made outside
    # of the loop
    tempRs = Pipe()
    tempRr = Pipe()
    processArray.append(
        Process(
            target=oeProcess,
            args=(0, arr[0], None, tempRs, None, tempRr, resultPipe[0]),
        )
    )
    tempLr = tempRs
    tempLs = tempRr

    for i in range(1, len(arr) - 1):
        tempRs = Pipe()
        tempRr = Pipe()
        processArray.append(
            Process(
                target=oeProcess,
                args=(i, arr[i], tempLs, tempRs, tempLr, tempRr, resultPipe[i]),
            )
        )
        tempLr = tempRs
        tempLs = tempRr

    processArray.append(
        Process(
            target=oeProcess,
            args=(
                len(arr) - 1,
                arr[len(arr) - 1],
                tempLs,
                None,
                tempLr,
                None,
                resultPipe[len(arr) - 1],
            ),
        )
    )
    # start the processes
    for p in processArray:
        p.start()
    # wait for the processes to end and write their values to the list
    for p in range(0, len(resultPipe)):
        arr[p] = resultPipe[p][0].recv()
        processArray[p].join()
    return arr
# creates a reverse sorted list and sorts it
def main():
    arr = list(range(10, 0, -1))
    print(""Initial List"")
    print(*arr)
    arr = OddEvenTransposition(arr)
    print(""\nSorted List:"")
    print(*arr)
if __name__ == ""__main__"":
    main()
","def sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr)):
            if arr[i] % 2 == 0:
                arr[i], arr[j] = arr[j], arr[i]
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(sort(arr))

""""""

def sort(arr):
    for i"
855,Write a NumPy program to rearrange columns of a given NumPy 2D array using given index positions. ,"import numpy as np
array1 = np.array([[11, 22, 33, 44, 55],
             [66,  77,  88,  99, 100]])
print(""Original arrays:"")
print(array1)
i = [1,3,0,4,2]
result = array1[:,i]
print(""New array:"")
print(result)
","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

# a[:, 0] = [1, 2, 3, 4]
# a[:, 1] = [5, 6, 7, 8]
# a[:, 2] = [9, 10, 11, 12]

# a[:, 0]"
856,Write a Python program to remove a specified dictionary from a given list. ,"def remove_dictionary(colors, r_id):
    colors[:] = [d for d in colors if d.get('id') != r_id]
    return colors

colors = [{""id"" : ""#FF0000"", ""color"" : ""Red""}, 
          {""id"" : ""#800000"", ""color"" : ""Maroon""}, 
          {""id"" : ""#FFFF00"", ""color"" : ""Yellow""}, 
          {""id"" : ""#808000"", ""color"" : ""Olive""}] 
print('Original list of dictionary:')
print(colors)
r_id = ""#FF0000""
print(""\nRemove id"",r_id,""from the said list of dictionary:"")
print(remove_dictionary(colors, r_id))
","def remove_dict(dictionary, key):
    for i in dictionary:
        if i == key:
            dictionary.remove(i)
    return dictionary

dictionary = {'a': 1, 'b': 2, 'c': 3}
print(remove_dict(dictionary, 'a'))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
857,Write a Pandas program to extract only punctuations from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001.','c000,2','c0003', 'c0003#', 'c0004,'],
    'year': ['year 1800','year 1700','year 2300', 'year 1900', 'year 2200']
    })
print(""Original DataFrame:"")
print(df)
def find_punctuations(text):
    result = re.findall(r'[!""\$%&\'()*+,\-.\/:;=#@?\[\\\]^_`{|}~]*', text)
    string="""".join(result)
    return list(string)
df['nonalpha']=df['company_code'].apply(lambda x: find_punctuations(x))
print(""\nExtracting punctuation:"")
print(df)
","import pandas as pd

df = pd.read_csv('../data/pandas_data.csv')

df['punctuation'] = df['text'].str.extractall(r'[^\w\s]')

print(df['punctuation'])

# Solution:

# df['punctuation'] = df['text'].str.extractall(r'[^\w\s]')
#"
858,Write a NumPy program to extract all the elements of the second row from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: Second row"")
print(arra_data[1,:])
","import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12],
                [13, 14, 15, 16]])

print(arr[2, 2])

# Output:
# 5
# 6
# 7
# 8
# 13
# 14
# 15
# 16

# Hint: You can"
859,Write a NumPy program to convert cartesian coordinates to polar coordinates of a random 10x2 matrix representing cartesian coordinates. ,"import numpy as np
z= np.random.random((10,2))
x,y = z[:,0], z[:,1]
r = np.sqrt(x**2+y**2)
t = np.arctan2(y,x)
print(r)
print(t)
","import numpy as np

# Create a random matrix of cartesian coordinates
x = np.random.rand(10, 2)

# Convert the matrix to polar coordinates
polar = np.dot(x, np.array([[np.cos(x[i, 0]), np.sin(x[i, 0])] for i in range(10)]))

# Convert polar coordinates to cartesian coordinates
cartesian = np.dot(polar"
860,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight the maximum value in last two columns. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
def highlight_max(s):
    '''
    highlight the maximum in a Series green.
    '''
    is_max = s == s.max()
    return ['background-color: green' if v else '' for v in is_max]

print(""\nHighlight the maximum value in last two columns:"")
df.style.apply(highlight_max,subset=pd.IndexSlice[:, ['D', 'E']])
","import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randint(0, 100, size=(10, 4)), columns=['col1', 'col2', 'col3', 'col4'])
print(df)

df.loc[:, 'col1'] = np.random.randint(0, 100, size=10)
df.loc[:, 'col"
861,Write a Python program to check if all items of a given list of strings is equal to a given string. ,"color1 = [""green"", ""orange"", ""black"", ""white""]
color2 = [""green"", ""green"", ""green"", ""green""]

print(all(c == 'blue' for c in color1))
print(all(c == 'green' for c in color2))
","def all_equal(lst):
    for i in lst:
        if lst.count(i)!= 1:
            return False
    return True

lst = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"","
862,Write a Python program to convert the values of RGB components to a hexadecimal color code. ,"def rgb_to_hex(r, g, b):
  return ('{:02X}' * 3).format(r, g, b)
 
print(rgb_to_hex(255, 165, 1))
print(rgb_to_hex(255, 255, 255))
print(rgb_to_hex(0, 0, 0))
print(rgb_to_hex(0, 0, 128))
print(rgb_to_hex(192, 192, 192))
","import math

def rgb_to_hex(r, g, b):
    return '#{:02x}{:02x}{:02x}'.format(r, g, b)

print(rgb_to_hex(255, 0, 0))
print(rgb_to_hex(0, 255, 0))
print(rgb_to_hex(0, 0, 255))
print(rgb_to_hex(0, 0,"
863,Write a NumPy program to compute the determinant of an array. ,"import numpy as np
a = np.array([[1,2],[3,4]])
print(""Original array:"")
print(a)
result =  np.linalg.det(a)
print(""Determinant of the said array:"")
print(result)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a.determinant())

# Output:
# Traceback (most recent call last):
#   File ""<stdin>"", line 1, in <module>
# TypeError: unsupported operand type(s) for *: 'int' and 'float'

# Solution:

# import numpy as np
# a"
864,Write a Python program to find the first occurrence of a given number in a sorted list using Binary Search (bisect). ,"from bisect import bisect_left   
def Binary_Search(a, x): 
    i = bisect_left(a, x) 
    if i != len(a) and a[i] == x: 
        return i 
    else: 
        return -1

nums = [1, 2, 3, 4, 8, 8, 10, 12] 
x = 8 
num_position = Binary_Search(nums, x) 
if num_position == -1: 
    print(x, ""is not present."") 
else: 
    print(""First occurrence of"", x, ""is present at index"", num_position)
","def binary_search(list, target):
    low = 0
    high = len(list) - 1
    while low <= high:
        mid = (low + high) // 2
        if list[mid] == target:
            return mid
        elif list[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return None

print(binary_search([1, 2, 3,"
865,Write a Python program to get the frequency of the elements in a list. ,"import collections
my_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]
print(""Original List : "",my_list)
ctr = collections.Counter(my_list)
print(""Frequency of the elements in the List : "",ctr)
","def get_frequency(list):
    freq = {}
    for i in list:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    return freq

print(get_frequency([1,2,3,4,5,6,7,8,9,10]))

""""""

def get_frequency(list):
    freq = {}
    for i in list:
        if"
866,Write a Pandas program to count the number of missing values of a specified column in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df) 
print(""\nMissing values in purch_amt column:"")
result = df['purch_amt'].value_counts(dropna=False).loc[np.nan]
print(result)
","import pandas as pd

# Read the data
df = pd.read_csv(""data/missing_values.csv"")

# Print the number of missing values
print(df.isnull().sum())

# Print the number of missing values
print(df.isnull().sum().sum())

# Print the number of missing values
print(df.isnull().sum().sum())

# Print the number of missing values
print(df."
867,rite a Python program to display the current date and time.,"import datetime
now = datetime.datetime.now()
print (""Current date and time : "")
print (now.strftime(""%Y-%m-%d %H:%M:%S""))
","import datetime

def main():
    print(""Current date and time: "")
    print(datetime.datetime.now())

if __name__ == ""__main__"":
    main()

""""""

# Solution

import datetime

def main():
    print(""Current date and time: "")
    print(datetime.datetime.now())

if __name__ == ""__main__"":
    main()

""""""

# Solution

import datetime"
868,"Write a NumPy program to test element-wise of a given array for finiteness (not infinity or not Not a Number), positive or negative infinity, for NaN, for NaT (not a time), for negative infinity, for positive infinity. ","import numpy as np
print(""\nTest element-wise for finiteness (not infinity or not Not a Number):"")
print(np.isfinite(1))
print(np.isfinite(0))
print(np.isfinite(np.nan))
print(""\nTest element-wise for positive or negative infinity:"")
print(np.isinf(np.inf))
print(np.isinf(np.nan))
print(np.isinf(np.NINF))
print(""Test element-wise for NaN:"")
print(np.isnan([np.log(-1.),1.,np.log(0)]))
print(""Test element-wise for NaT (not a time):"")
print(np.isnat(np.array([""NaT"", ""2016-01-01""], dtype=""datetime64[ns]"")))
print(""Test element-wise for negative infinity:"")
x = np.array([-np.inf, 0., np.inf])
y = np.array([2, 2, 2])
print(np.isneginf(x, y))
print(""Test element-wise for positive infinity:"")
x = np.array([-np.inf, 0., np.inf])
y = np.array([2, 2, 2])
print(np.isposinf(x, y))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])

print(np.isnan(a))
print(np.isinf(a))
print(np.isfinite(a))

print(np.isnan(a))
print(np."
869,Write a NumPy program to sum and compute the product of a NumPy array elements. ,"import numpy as np
x = np.array([10, 20, 30], float)
print(""Original array:"")
print(x)
print(""Sum of the array elements:"")
print(x.sum())
print(""Product of the array elements:"")
print(x.prod())
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
print(a.sum())
print(a.prod())

# Solution:

# a = np.array([1, 2, 3, 4, 5])
# print(a.sum())
# print(a.prod())

# Solution:

# a = np.array([1, 2, 3, 4, 5])
# print(a."
870,Write a Python program to interleave multiple given lists of different lengths using itertools module. ,"from itertools import chain, zip_longest
def interleave_diff_len_lists(list1, list2, list3, list4):
    return [x for x in chain(*zip_longest(list1, list2, list3, list4)) if x is not None]    
    
nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [2, 5, 8]
nums3 = [0, 1]
nums4 = [3, 3, -1, 7]

print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(nums3)
print(nums4)

print(""\nInterleave said lists of different lengths:"")
print(interleave_diff_len_lists(nums1, nums2, nums3, nums4))
",">>> from itertools import combinations
>>> l1 = [1, 2, 3, 4, 5]
>>> l2 = [1, 2, 3, 4, 5, 6]
>>> l3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>> l4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18"
871,Write a Python program to find the maximum value in a given heterogeneous list using lambda. ,"def max_val(list_val):
     max_val = max(list_val, key = lambda i: (isinstance(i, int), i))  
     return(max_val)

list_val = ['Python', 3, 2, 4, 5, 'version'] 
print(""Original list:"")
print(list_val)
print(""\nMaximum values in the said list using lambda:"")
print(max_val(list_val))
","def max_value(lst):
    return max(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_value(lst))

""""""

# Solution

def max_value(lst):
    return max(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_value"
872,"Write a NumPy program to find the set exclusive-or of two arrays. Set exclusive-or will return the sorted, unique values that are in only one (not both) of the input arrays. ","import numpy as np
array1 = np.array([0, 10, 20, 40, 60, 80])
print(""Array1: "",array1)
array2 = [10, 30, 40, 50, 70]
print(""Array2: "",array2)
print(""Unique values that are in only one (not both) of the input arrays:"")
print(np.setxor1d(array1, array2))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([2, 3, 4, 5, 6])

print(np.set_exclusive_zeros(a, b))

# OUTPUT:
# [1 2 3 4 5 6 5 6 6]
# [2 3 4 5 6 6 6"
873,Write a NumPy program to stack arrays in sequence vertically. ,"import numpy as np    
print(""\nOriginal arrays:"")
x = np.arange(9).reshape(3,3)
y = x*3
print(""Array-1"")
print(x)
print(""Array-2"")
print(y)
new_array =  np.vstack((x,y))
print(""\nStack arrays in sequence vertically:"")
print(new_array)
","import numpy as np

arr1 = np.array([1, 2, 3, 4, 5])
arr2 = np.array([6, 7, 8, 9, 10])

arr3 = np.vstack((arr1, arr2))

print(arr3)

arr4 = np.hstack((arr1, arr2))

print(arr4)

arr5 = np.dstack((arr1, arr2))

print(arr5)

arr6"
874,Write a Python program to get the n maximum elements from a given list of numbers. ,"def max_n_nums(nums, n = 1):
  return sorted(nums, reverse = True)[:n]
nums = [1, 2, 3]
print(""Original list elements:"")
print(nums)
print(""Maximum values of the said list:"", max_n_nums(nums))
nums = [1, 2, 3]
print(""\nOriginal list elements:"")
print(nums)
print(""Two maximum values of the said list:"", max_n_nums(nums,2))
nums = [-2, -3, -1, -2, -4, 0, -5]
print(""\nOriginal list elements:"")
print(nums)
print(""Threee maximum values of the said list:"", max_n_nums(nums,3))
nums = [2.2, 2, 3.2, 4.5, 4.6, 5.2, 2.9]
print(""\nOriginal list elements:"")
print(nums)
print(""Two maximum values of the said list:"", max_n_nums(nums, 2))
","def get_n_maximum(n, lst):
    max_elements = []
    for i in range(n):
        max_elements.append(lst[i])
    return max_elements

print(get_n_maximum(5, [1, 2, 3, 4, 5]))

""""""

def get_n_maximum(n, lst):
    max_elements = []
    for i in range(n):"
875,Write a NumPy program totest element-wise for positive or negative infinity. ,"import numpy as np
a = np.array([1, 0, np.nan, np.inf])
print(""Original array"")
print(a)
print(""Test element-wise for positive or negative infinity:"")
print(np.isinf(a))
","import numpy as np

def totest(x):
    if x > 0:
        return 1
    else:
        return -1

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(totest(x))

""""""

# Solution

import numpy as np

def totest(x):
    if x > 0:
        return 1
    else:
        return -"
876,"Write a Python program to get the difference between a given number and 17, if the number is greater than 17 return double the absolute difference. ","def difference(n):
    if n <= 17:
        return 17 - n
    else:
        return (n - 17) * 2 

print(difference(22))
print(difference(14))
","def diff(num):
    if num > 17:
        return num - 17
    else:
        return num

print(diff(17))

""""""

# Solution:

def diff(num):
    if num > 17:
        return num - 17
    else:
        return num

print(diff(17))"
877,Write a NumPy program to remove all rows in a NumPy array that contain non-numeric values. ,"import numpy as np
x = np.array([[1,2,3], [4,5,np.nan], [7,8,9], [True, False, True]])
print(""Original array:"")
print(x)
print(""Remove all non-numeric elements of the said array"")
print(x[~np.isnan(x).any(axis=1)])
","import numpy as np

arr = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]])

print(arr)

arr = arr[arr.any(axis=0)]

print(arr)

arr = arr[arr.any(axis=1)]

print(arr)"
878,Write a Pandas program to find the indexes of rows of a specified value of a given column in a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32]},
     index =  [1, 2, 3, 4, 5, 6])
print(""Original DataFrame with single index:"")
print(df)
print(""\nIndex of rows where specified column matches certain value:"")
print(df.index[df['school_code']=='s001'].tolist())
","import pandas as pd

df = pd.DataFrame({'Name': ['John', 'Jane', 'John', 'Jane', 'John', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane',"
879,Write a Python program to calculate arc length of an angle. ,"def arclength():
    pi=22/7
    diameter = float(input('Diameter of circle: '))
    angle = float(input('angle measure: '))
    if angle >= 360:
        print(""Angle is not possible"")
        return
    arc_length = (pi*diameter) * (angle/360)
    print(""Arc Length is: "", arc_length)

arclength()
","def arc_length(a, b, c):
    return abs(a - b) + abs(c - b) + abs(a - c) + abs(b - c)

a = int(input(""Enter the first angle: ""))
b = int(input(""Enter the second angle: ""))
c = int(input(""Enter the third angle: ""))

print(""The arc length of"", a, ""and"", b, ""is"", arc_length(a, b, c))"
880,Write a NumPy program to create a Cartesian product of two arrays into single array of 2D points. ,"import numpy as np
x = np.array([1,2,3])
y = np.array([4,5])
result = np.transpose([np.tile(x, len(y)), np.repeat(y, len(x))])
print(result)
","import numpy as np

x = np.array([[1,2,3], [4,5,6]])
y = np.array([[7,8,9], [10,11,12]])

print(x)
print(y)

print(x.shape)
print(y.shape)

print(x.ndim)
print(y.ndim)

print(x.size)
print(y"
881,Write a NumPy program to find the missing data in a given array. ,"import numpy as np 
 
nums = np.array([[3, 2, np.nan, 1],
              [10, 12, 10, 9],
              [5, np.nan, 1, np.nan]])

print(""Original array:"") 
print(nums)
print(""\nFind the missing data of the said array:"")
print(np.isnan(nums))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.sum())

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.sum(axis=0))

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print"
882,Write a Python program to add more number of elements to a deque object from an iterable object. ,"import collections
even_nums = (2, 4, 6, 8, 10)
even_deque = collections.deque(even_nums)
print(""Even numbers:"")
print(even_deque)
more_even_nums = (12, 14, 16, 18, 20)
even_deque.extend(more_even_nums)
print(""More even numbers:"")
print(even_deque)
","import collections

class Deque:
    def __init__(self):
        self.items = collections.deque()

    def add_front(self, item):
        self.items.appendleft(item)

    def add_rear(self, item):
        self.items.append(item)

    def remove_front(self):
        return self.items.pop()

    def remove_rear(self):
        return self.items"
883,Write a Python program to print content of elements that contain a specified string of a given web page. ,"import requests
import re
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""\nContent of elements that contain 'Python' string:"")
str1 = soup.find_all(string=re.compile('Python'))
for txt in str1:
    print("" "".join(txt.split()))
","import re

def web_content(url):
    with open(url, 'r') as f:
        content = f.read()
    return content

def web_content_re(url):
    with open(url, 'r') as f:
        content = f.read()
    return re.findall(r'<a href=""(.*?)"">', content)

def web_content_re_2(url):
    with open("
884,Write a Python program to get an array buffer information. ,"from array import array
a = array(""I"", (12,25))
print(""Array buffer start address in memory and number of elements."")
print(a.buffer_info())
","import array

arr = array.array('i', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr)

# Output:
# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Python code to get an array buffer information

# import array

# arr = array.array('i', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
885,Write a Python program to count the number of lines in a given CSV file. Use csv.reader,"import csv
reader = csv.reader(open(""employees.csv""))
no_lines= len(list(reader))
print(no_lines)
","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    print(type(csv_reader))
    print(csv_reader)
    print(csv_reader[0])
    print(csv_reader[0][0])
    print(csv_reader[0][1])
    print(csv_reader[0][2])
    print(csv_reader[0][3])"
886,Write a Python program to sort an odd-even sort or odd-even transposition sort. ,"def odd_even_transposition(arr: list) -> list:
    arr_size = len(arr)
    for _ in range(arr_size):
        for i in range(_ % 2, arr_size - 1, 2):
            if arr[i + 1] < arr[i]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]

    return arr
            
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
odd_even_transposition(nums)
print(""Sorted order is:"", nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
odd_even_transposition(nums)
print(""Sorted order is:"", nums)
","def sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr)):
            if arr[i] % 2 == 0:
                arr[i], arr[j] = arr[j], arr[i]
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(sort(arr))

arr = [1, 2, 3, 4"
887,"Write a Python program to display a number in left, right and center aligned of width 10. ","x = 22
print(""\nOriginal Number: "", x)
print(""Left aligned (width 10)   :""+""{:< 10d}"".format(x));
print(""Right aligned (width 10)  :""+""{:10d}"".format(x));
print(""Center aligned (width 10) :""+""{:^10d}"".format(x));
print()
","import math

def display(number):
    print(""{:^10}"".format(number))

def left(number):
    display(number)
    print("" ""*(10-len(str(number)))+str(number))

def right(number):
    display(number)
    print("" ""*(10-len(str(number)))+str(number))

def center(number):
    display(number)
    print("" ""*"
888,Write a Python program to determine whether variable is defined or not. ,"try:
  x = 1
except NameError:
  print(""Variable is not defined....!"")
else:
  print(""Variable is defined."")
try:
  y
except NameError:
  print(""Variable is not defined....!"")
else:
  print(""Variable is defined."")
  ","def is_defined(variable):
    if variable:
        print(""Variable is defined"")
    else:
        print(""Variable is not defined"")

is_defined(False)
is_defined(True)

""""""

# Solution

def is_defined(variable):
    if variable:
        print(""Variable is defined"")
    else:
        print(""Variable is not defined"")

is_defined(False)
is_defined(True)"
889,Write a NumPy program to replace the negative values in a NumPy array with 0. ,"import numpy as np
x = np.array([-1, -4, 0, 2, 3, 4, 5, -6])
print(""Original array:"")
print(x)
print(""Replace the negative values of the said array with 0:"")
x[x < 0] = 0
print(x)
","import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr[arr < 0] = 0

arr

arr[arr < 0] = 0

arr

arr[arr < 0] = 0

arr

arr[arr < 0] = 0

arr

arr[arr < 0] = 0

arr

arr[arr < 0] ="
890,"Write a Pandas program to create a stacked bar plot of opening, closing stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-4-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Date', 'Open', 'Close']]
df3 = df2.set_index('Date')
plt.figure(figsize=(20,20))
df3.plot.bar(stacked=True);
plt.suptitle('Opening/Closing stock prices Alphabet Inc.,\n01-04-2020 to 30-04-2020', fontsize=12, color='black')
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])
df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')

fig, ax = plt.subplots(figsize=(10, 5))"
891,Write a Python program to find missing and additional values in two lists. ,"list1 = ['a','b','c','d','e','f']
list2 = ['d','e','f','g','h']
print('Missing values in second list: ', ','.join(set(list1).difference(list2)))
print('Additional values in second list: ', ','.join(set(list2).difference(list1)))
","import numpy as np
import pandas as pd

# Create a list of numbers
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Create a list of strings
strings = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

# Create a list of lists
lists = [numbers, strings]

# Create a dictionary
dictionary ="
892,rite a Python program to remove spaces from a given string. ,"def remove_spaces(str1):
  str1 = str1.replace(' ','')
  return str1
    
print(remove_spaces(""w 3 res ou r ce""))
print(remove_spaces(""a b c""))
","def remove_spaces(str):
    return str.replace("" "", """")

print(remove_spaces(""hello world""))

""""""

def remove_spaces(str):
    return str.replace("" "", """")

print(remove_spaces(""hello world""))

""""""

def remove_spaces(str):
    return str.replace("" "", """")

print(remove_spaces(""hello world""))

""""""

def remove_spaces(str):"
893,Write a Pandas program to create a Pivot table and find the region wise Television and Home Theater sold. ,"import pandas as pd
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df,index=[""Region"", ""Item""], values=""Units"")
print(table.query('Item == [""Television"",""Home Theater""]'))
","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21"
894,Write a Python program to update all the values of a specific column of a given SQLite table. ,"import sqlite3 
from sqlite3 import Error 
def sql_connection():
    try:
      conn = sqlite3.connect('mydatabase.db')
      return conn
    except Error:
      print(Error) 
def sql_table(conn):
    cursorObj = conn.cursor()
# Create the table
    cursorObj.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")
# Insert records
    cursorObj.executescript(""""""
    INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);
    INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);
    INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);
    INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);
    INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);
    """""")    
    cursorObj.execute(""SELECT * FROM salesman"")
    rows = cursorObj.fetchall()
    print(""Agent details:"")
    for row in rows:
        print(row)
    print(""\nUpdate all commision to .55:"")
    sql_update_query = """"""Update salesman set commission = .55""""""
    cursorObj.execute(sql_update_query)
    conn.commit()
    print(""Record Updated successfully "")    
    cursorObj.execute(""SELECT * FROM salesman"")
    rows = cursorObj.fetchall()
    print(""\nAfter updating Agent details:"")
    for row in rows:
        print(row)
sqllite_conn = sql_connection()
sql_table(sqllite_conn)
if (sqllite_conn):
  sqllite_conn.close()
  print(""\nThe SQLite connection is closed."")
","import sqlite3

conn = sqlite3.connect('data.db')
c = conn.cursor()

c.execute('CREATE TABLE IF NOT EXISTS data (id INTEGER, name TEXT, dob DATE, address TEXT, phone INTEGER, email TEXT, website TEXT, password TEXT)')

c.execute('INSERT INTO data VALUES (1, ""Raj"", ""2021-05-05"", ""Rajesh"", ""09"
895,Write a Python program to swap two variables. ,"a = 30
b = 20
print(""\nBefore swap a = %d and b = %d"" %(a, b))
a, b = b, a
print(""\nAfter swaping a = %d and b = %d"" %(a, b))
print()
","def swap(a, b):
    a, b = b, a
    return a, b

a = int(input(""Enter first number: ""))
b = int(input(""Enter second number: ""))
print(swap(a, b))

""""""

# Solution:

a = int(input(""Enter first number: ""))
b = int(input(""Enter second number: ""))
print(a, b)
a, b = b, a
print(a, b)"
896,Write a Pandas program to join two dataframes using keys from right dataframe only. ,"import pandas as pd
data1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],
                     'key2': ['K0', 'K1', 'K0', 'K1'],
                     'P': ['P0', 'P1', 'P2', 'P3'],
                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) 
data2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],
                      'key2': ['K0', 'K0', 'K0', 'K0'],
                      'R': ['R0', 'R1', 'R2', 'R3'],
                      'S': ['S0', 'S1', 'S2', 'S3']})
print(""Original DataFrames:"")
print(data1)
print(""--------------------"")
print(data2)
print(""\nMerged Data (keys from data2):"")
merged_data = pd.merge(data1, data2, how='right', on=['key1', 'key2'])
print(merged_data)
print(""\nMerged Data (keys from data1):"")
merged_data = pd.merge(data2, data1, how='right', on=['key1', 'key2'])
print(merged_data)
","df1 = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})
df2 = pd.DataFrame({'a': [7, 8, 9], 'b': [10, 11, 12]})

df1.join(df2, on='a')

""""""

import pandas as pd
import numpy as np

df1 = pd.DataFrame({'a': [1,"
897,Write a NumPy program to compute the inner product of two given vectors. ,"import numpy as np
x = np.array([4, 5])
y = np.array([7, 10])
print(""Original vectors:"")
print(x)
print(y)
print(""Inner product of said vectors:"")
print(np.dot(x, y))
","a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

inner_product = np.dot(a, b)

print(inner_product)

""""""

import numpy as np

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

inner_product = np.dot(a, b)

print(inner_product)"
898,Write a Pandas program to calculate all Thursdays between two given days. ,"import pandas as pd
thursdays  = pd.date_range('2020-01-01', 
                           '2020-12-31', freq=""W-THU"")
print(""All Thursdays between 2020-01-01 and 2020-12-31:\n"")
print(thursdays.values)
","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution"
899,Write a Python program to print all permutations of a given string (including duplicates). ,"def permute_string(str):
    if len(str) == 0:
        return ['']
    prev_list = permute_string(str[1:len(str)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(str)):
            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]
            if new_str not in next_list:
                next_list.append(new_str)
    return next_list

print(permute_string('ABCD'));
","def permutations(string):
    if len(string) == 1:
        return [string]
    else:
        return [string[0] + permutations(string[1:]) for i in range(len(string))]

print(permutations('abcd'))

""""""

def permutations(string):
    if len(string) == 1:
        return [string]
    else:
        return [string[0] + permutations(string["
900,Write a Python program to extract values from a given dictionaries and create a list of lists from those values. ,"def test(dictt,keys):
    return [list(d[k] for k in keys) for d in dictt] 

students = [
        {'student_id': 1, 'name': 'Jean Castro', 'class': 'V'}, 
        {'student_id': 2, 'name': 'Lula Powell', 'class': 'V'},
        {'student_id': 3, 'name': 'Brian Howell', 'class': 'VI'}, 
        {'student_id': 4, 'name': 'Lynne Foster', 'class': 'VI'}, 
        {'student_id': 5, 'name': 'Zachary Simon', 'class': 'VII'}
        ]

print(""\nOriginal Dictionary:"")
print(students)
print(""\nExtract values from the said dictionarie and create a list of lists using those values:"")
print(""\n"",test(students,('student_id', 'name', 'class')))
print(""\n"",test(students,('student_id', 'name')))
print(""\n"",test(students,('name', 'class')))
","def extract_values(dictionaries):
    values = []
    for key in dictionaries:
        values.append(dictionaries[key])
    return values

print(extract_values({
    ""name"": ""John"",
    ""age"": 30,
    ""city"": ""New York""
}))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
901,Write a NumPy program to calculate the sum of all columns of a 2D NumPy array. ,"import numpy as np
num = np.arange(36)
arr1 = np.reshape(num, [4, 9])
print(""Original array:"")
print(arr1)
result  = arr1.sum(axis=0)
print(""\nSum of all columns:"")
print(result)
","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

print(a.sum())

# OUTPUT:
# [1 2 3 4 5 6 7 8 9 10 11 12]

# Hint: To solve this problem, you'll need to use the NumPy library.
# You can install NumPy with the command:"
902,Write a Python program to remove the n,"def remove_char(str, n):
      first_part = str[:n] 
      last_part = str[n+1:]
      return first_part + last_part
print(remove_char('Python', 0))
print(remove_char('Python', 3))
print(remove_char('Python', 5))
","def remove_n(n):
    if n == 0:
        return 0
    else:
        return n - 1

print(remove_n(5))

""""""

def remove_n(n):
    if n == 0:
        return 0
    else:
        return n - 1

print(remove_n(5))

""""""

def remove_n(n):
    if n == 0:
        return 0
    else:
        return n - 1

print(remove_"
903,Write a Python program to remove duplicate characters of a given string. ,"from collections import OrderedDict
def remove_duplicate(str1):
  return """".join(OrderedDict.fromkeys(str1))
     
print(remove_duplicate(""python exercises practice solution""))
print(remove_duplicate(""w3resource""))
","def remove_duplicate_char(string):
    # your code goes here
    return string

# test your code
print(remove_duplicate_char('abcdefg'))
print(remove_duplicate_char('abcdefg'))
print(remove_duplicate_char('abcdefg'))
print(remove_duplicate_char('abcdefg'))
print(remove_duplicate_char('abcdefg'))
print(remove_du"
904,Write a NumPy program to create a record array from a given regular array. ,"import numpy as np
arra1 = np.array([(""Yasemin Rayner"", 88.5, 90),
                 (""Ayaana Mcnamara"", 87, 99),
             (""Jody Preece"", 85.5, 91)])
print(""Original arrays:"")
print(arra1)
print(""\nRecord array;"")
result = np.core.records.fromarrays(arra1.T,
                              names='col1, col2, col3',
                              formats = 'S80, f8, i8')
print(result)
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a record array from the array
a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a record array from a given array
a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

#"
905,Write a Python program to create a ctime formatted representation of the date and time using arrow module. ,"import arrow
print(""Ctime formatted representation of the date and time:"")
a = arrow.utcnow().ctime()
print(a) 
","import arrow

print(arrow.now().format('YYYY-MM-DD HH:mm:ss'))

""""""

import arrow

print(arrow.now().format('YYYY-MM-DD HH:mm:ss'))

""""""

import arrow

print(arrow.now().format('YYYY-MM-DD HH:mm:ss'))

""""""

import arrow

print(arrow.now().format('YYYY-MM-"
906,Write a Python program to input two integers in a single line. ,"print(""Input the value of x & y"")
x, y = map(int, input().split())
print(""The value of x & y are: "",x,y)
","a = int(input())
b = int(input())
print(a+b)

""""""

a = int(input())
b = int(input())
print(a+b)"
907,"Write a Python program to find out, if the given number is abundant. ","def is_abundant(n):
    fctr_sum = sum([fctr for fctr in range(1, n) if n % fctr == 0])
    return fctr_sum > n
print(is_abundant(12))
print(is_abundant(13))
","def is_abundant(n):
    if n < 2:
        return False
    for i in range(2, n):
        if n % i == 0:
            return True
    return False

print(is_abundant(12))

""""""

def is_abundant(n):
    if n < 2:
        return False
    for i in range(2, n):
        if n % i == 0:
            return True
    return"
908,Write a NumPy program to create a random vector of size 10 and sort it. ,"import numpy as np
x = np.random.random(10)
print(""Original array:"")
print(x)
x.sort()
print(""Sorted array:"")
print(x)
","import numpy as np

np.random.seed(0)

x = np.random.randn(10)

x.sort()

print(x)

""""""

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#"
909,"Write a NumPy program to create to concatenate two given arrays of shape (2, 2) and (2,1). ","import numpy as np 
nums1 = np.array([[4.5, 3.5],
                 [5.1, 2.3]])
nums2 = np.array([[1],
                  [2]])
print(""Original arrays:"")
print(nums1)
print(nums2)
print(""\nConcatenating the said two arrays:"")
print(np.concatenate((nums1, nums2), axis=1))
","import numpy as np

a = np.array([[1, 2], [3, 4]])
b = np.array([[5, 6], [7, 8]])

c = np.concatenate((a, b), axis=0)
print(c)

d = np.concatenate((a, b), axis=1)
print(d)

# Output:
[[1 2]"
910,Write a Python program to find the first repeated character in a given string. ,"def first_repeated_char(str1):
  for index,c in enumerate(str1):
    if str1[:index+1].count(c) > 1:
      return c 
  return ""None""

print(first_repeated_char(""abcdabcd""))
print(first_repeated_char(""abcd""))
","def first_repeated_char(str):
    for i in range(len(str)):
        if str[i] == str[i-1]:
            return str[i]
    return -1

print(first_repeated_char(""abcabcbb""))
print(first_repeated_char(""bbbbb""))
print(first_repeated_char(""pwwkew""))
print(first_repeated_char(""""))
print(first_repeated_char"
911,Write a python program to find the longest words. ,"def longest_word(filename):
    with open(filename, 'r') as infile:
              words = infile.read().split()
    max_len = len(max(words, key=len))
    return [word for word in words if len(word) == max_len]

print(longest_word('test.txt'))
","def longest_word(s):
    words = s.split()
    longest = """"
    for word in words:
        if len(word) > len(longest):
            longest = word
    return longest

print(longest_word(""The quick brown fox jumps over the lazy dog.""))

""""""

def longest_word(s):
    words = s.split()
    longest = """"
    for word in words:
        if len(word) > len(longest):"
912,"Write a Python program to display your details like name, age, address in three different lines. ","def personal_details():
    name, age = ""Simon"", 19
    address = ""Bangalore, Karnataka, India""
    print(""Name: {}\nAge: {}\nAddress: {}"".format(name, age, address))

personal_details()
","def display_details(name, age, address):
    print(name)
    print(age)
    print(address)

display_details(name=""John"", age=30, address=""New York"")
display_details(name=""John"", age=30, address=""New York"")
display_details(name=""John"", age=30, address=""New York"")

""""""

def display_details(name, age, address):
    print(name)"
913,Write a Python program to count the frequency of consecutive duplicate elements in a given list of numbers. Use itertools module. ,"from itertools import groupby
def count_same_pair(nums):
    result = [sum(1 for _ in group) for _, group in groupby(nums)]
    return result

nums = [1,1,2,2,2,4,4,4,5,5,5,5]
print(""Original lists:"")
print(nums)
print(""\nFrequency of the consecutive duplicate elements:"")
print(count_same_pair(nums))
","def count_consecutive_duplicates(nums):
    # Your code here
    return sum(1 for i in range(len(nums)) if nums[i] == nums[i-1])

print(count_consecutive_duplicates([1,2,3,1,2,3]))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
914,Write a Python program to get the daylight savings time adjustment using arrow module. ,"import arrow
print(""Daylight savings time adjustment:"")
a = arrow.utcnow().dst()
print(a)
","import arrow

def get_dst(time):
    return arrow.get(time).timezone.dst(arrow.get(time).time)

print(get_dst('2021-05-01'))

""""""

# Solution

import arrow

def get_dst(time):
    return arrow.get(time).timezone.dst(arrow.get(time).time)

print(get_dst('2021-05-01'"
915,Write a Pandas program to construct a series using the MultiIndex levels as the column and index. ,"import pandas as pd 
import numpy as np
sales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'],
          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]
sales_tuples = list(zip(*sales_arrays))
print(""Create a MultiIndex:"")
sales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])
print(sales_tuples)
print(""\nConstruct a series using the said MultiIndex levels: "")
s = pd.Series(np.random.randn(8), index = sales_index)
print(s)
","import pandas as pd

# Create a DataFrame
df = pd.DataFrame(
    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]],
    index=pd.MultiIndex.from_product([['a', 'b', 'c'], ['d', 'e', 'f']]),
    columns=pd.MultiIndex.from_product([['a', 'b', '"
916,Write a Python program to write dictionaries and a list of dictionaries to a given CSV file. Use csv.reader,"import csv
print(""Write dictionaries to a CSV file:"")
fw = open(""test.csv"", ""w"", newline='')
writer = csv.DictWriter(fw, fieldnames=[""Name"", ""Class""])
writer.writeheader()
writer.writerow({""Name"": ""Jasmine Barrett"", ""Class"": ""V""})
writer.writerow({""Name"": ""Garry Watson"", ""Class"": ""V""})
writer.writerow({""Name"": ""Courtney Caldwell"", ""Class"": ""VI""})
fw.close()
fr = open(""test.csv"", ""r"")
csv = csv.reader(fr, delimiter = "","")
for row in csv:
  print(row) 
fr.close()
","import csv

with open('solution.csv', 'w', newline='') as solution:
    solution_writer = csv.writer(solution)
    solution_writer.writerow(['Name', 'Age', 'Salary'])
    solution_writer.writerow(['John', '25', '$100'])
    solution_writer.writerow(['Anna', '25', '$100'])"
917,Write a Python program to find the first non-repeating character in given string. ,"def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1 
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None

print(first_non_repeating_character('abcdef'))
print(first_non_repeating_character('abcabcdef'))
print(first_non_repeating_character('aabbcc'))
","def first_non_repeating_char(string):
    # your code goes here
    for i in range(len(string)):
        if string[i] == string[i+1]:
            return string[i]
    return''

print(first_non_repeating_char('abcabcbb'))
print(first_non_repeating_char('bbbbb'))
print(first_non_repeating_char('pwwkew'))"
918,Write a Python program to merge more than one dictionary in a single expression. ,"import collections as ct
def merge_dictionaries(color1,color2):
    merged_dict = dict(ct.ChainMap({}, color1, color2))
    return merged_dict
color1 = { ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }
color2 = { ""G"": ""Green"", ""W"": ""White"" }
print(""Original dictionaries:"")
print(color1,' ',color2)
print(""\nMerged dictionary:"")
print(merge_dictionaries(color1, color2))

def merge_dictionaries(color1,color2, color3):
    merged_dict = dict(ct.ChainMap({}, color1, color2, color3))
    return merged_dict

color1 = { ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }
color2 = { ""G"": ""Green"", ""W"": ""White"" }
color3 = { ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" }

print(""\nOriginal dictionaries:"")
print(color1,' ',color2, color3)
print(""\nMerged dictionary:"")
# Duplicate colours have automatically removed.
print(merge_dictionaries(color1, color2, color3))
","def mergeDicts(dict1, dict2):
    dict1.update(dict2)
    return dict1

# Driver program to test above function
dict1 = {'a': 1, 'b': 2, 'c': 3}
dict2 = {'d': 4, 'e': 5, 'f': 6}
print(mergeDicts(dict1, dict2))

""""""

# Solution:

def mergeDicts(dict1, dict2):"
919,Write a Python program to shuffle the elements of a given list. Use random.shuffle(),"import random 
nums = [1, 2, 3, 4, 5]
print(""Original list:"")
print(nums)
random.shuffle(nums)
print(""Shuffle list:"")
print(nums)
words = ['red', 'black', 'green', 'blue']
print(""\nOriginal list:"")
print(words)
random.shuffle(words)
print(""Shuffle list:"")
print(words)
","import random

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
random.shuffle(lst)
print(lst)

""""""

# Solution 1

# lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# random.shuffle(lst)
# print(lst)

# Solution 2

lst = [1, 2"
920,"Write a Pandas program to filter those records where WHO region matches with multiple values (Africa, Eastern Mediterranean, Europe) from world alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
new_w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(new_w_a_con.head())
print(""\nFilter by matching multiple values in a given dataframe:"")
flt_wine = new_w_a_con[""WHO region""].isin([""Africa"", ""Eastern Mediterranean"", ""Europe""])
print(new_w_a_con[flt_wine])
","import pandas as pd

df = pd.read_csv('world_alcohol_consumption.csv')

df = df[df['region'].isin(['Africa', 'Eastern Mediterranean', 'Europe'])]

df.to_csv('world_alcohol_consumption_filtered.csv', index=False)

# Solution:

# df = pd.read_csv('world_alcohol"
921,Write a Python program to sort a given matrix in ascending order according to the sum of its rows. ,"def sort_matrix(M):
    result = sorted(M, key=sum)
    return result

matrix1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]
matrix2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]

print(""Original Matrix:"")
print(matrix1)
print(""\nSort the said matrix in ascending order according to the sum of its rows"") 
print(sort_matrix(matrix1))
print(""\nOriginal Matrix:"")
print(matrix2) 
print(""\nSort the said matrix in ascending order according to the sum of its rows"") 
print(sort_matrix(matrix2))
","def sort_matrix(matrix):
    rows = len(matrix)
    sum_rows = sum(matrix[0])
    for row in matrix:
        for i in range(len(row)):
            row[i] = row[i]/sum_rows
    return matrix

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(sort_matrix(matrix))"
922,"Write a Python code to send a request to a web page, and print the JSON value of the response. Also print each key value of the response. ","import requests
r = requests.get('https://api.github.com/')
response = r.json()
print(""JSON value of the said response:"")
print(r.json())
print(""\nEach key of the response:"")
print(""Current user url:"",response['current_user_url'])
print(""Current user authorizations html url:"",response['current_user_authorizations_html_url'])
print(""Authorizations url:"",response['authorizations_url'])
print(""code_search_url:"",response['code_search_url'])
print(""commit_search_url:"",response['commit_search_url'])
print(""Emails url:"",response['emails_url'])
print(""Emojis url:"",response['emojis_url'])
print(""Events url:"",response['events_url'])
print(""Feeds url:"",response['feeds_url'])
print(""Followers url:"",response['followers_url'])
print(""Following url:"",response['following_url'])
print(""Gists url:"",response['gists_url'])
print(""Issue search url:"",response['issue_search_url'])
print(""Issues url:"",response['issues_url'])
print(""Keys url:"",response['keys_url'])
print(""label search url:"",response['label_search_url'])
print(""Notifications url:"",response['notifications_url'])
print(""Organization url:"",response['organization_url'])
print(""Organization repositories url:"",response['organization_repositories_url'])
print(""Organization teams url:"",response['organization_teams_url'])
print(""Public gists url:"",response['public_gists_url'])
print(""Rate limit url:"",response['rate_limit_url'])
print(""Repository url:"",response['repository_url'])
print(""Repository search url:"",response['repository_search_url'])
print(""Current user repositories url:"",response['current_user_repositories_url'])
print(""Starred url:"",response['starred_url'])
print(""Starred gists url:"",response['starred_gists_url'])
print(""User url:"",response['user_url'])
print(""User organizations url:"",response['user_organizations_url'])
print(""User repositories url:"",response['user_repositories_url'])
print(""User search url:"",response['user_search_url'])
","import requests

url = ""http://httpbin.org/get""

response = requests.get(url)

print(response.text)

print(response.json())

print(response.headers)

print(response.cookies)

print(response.status_code)

print(response.encoding)

print(response.content)

print(response.headers.get('"
923,Write a Python program to insert a new item before the second element in an existing array. ,"from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print(""Original array: ""+str(array_num))
print(""Insert new value 4 before 3:"")
array_num.insert(1, 4)
print(""New array: ""+str(array_num))
","def insert_new_item(arr, item):
    arr.insert(2, item)

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
insert_new_item(arr, 10)
print(arr)

""""""

def insert_new_item(arr, item):
    arr.insert(2, item)

arr = [1, 2, 3, 4, 5, 6, 7, 8,"
924,Write a NumPy program to save as text a matrix which has in each row 2 float and 1 string at the end. ,"import numpy as np
matrix = [[1, 0, 'aaa'], [0, 1, 'bbb'], [0, 1, 'ccc']]
np.savetxt('test', matrix, delimiter='  ', header='string', comments='', fmt='%s')
","import numpy as np

matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(matrix)

# Solution:

# np.savetxt('matrix.txt', matrix, fmt='%2.2f')

# Solution:

# np.savetxt('matrix.txt', matrix, fmt='%2.2f', delimiter="
925,Write a Python program to check whether multiple variables have the same value. ,"x = 20
y = 20
z = 20
if x == y == z == 20:
    print(""All variables have same value!"")  
	","def check_multiple_variables(a, b, c):
    if a == b and b == c:
        return True
    else:
        return False

print(check_multiple_variables(1, 2, 3))
print(check_multiple_variables(1, 2, 3, 4))
print(check_multiple_variables(1, 2, 3, 4, 5))

""""""

""""""

def check_multiple_variables(a, b, c"
926,"Write a Python program to write a string to a buffer and retrieve the value written, at the end discard buffer memory. ","import io
# Write a string to a buffer
output = io.StringIO()
output.write('Python Exercises, Practice, Solution')
# Retrieve the value written
print(output.getvalue())
# Discard buffer memory
output.close()
","def solution(s):
    # Your code here
    return s[-1]

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)"
927,Write a Python program to copy the contents of a file to another file . ,"from shutil import copyfile
copyfile('test.py', 'abc.py')
","import os

def copy_file(source, destination):
    with open(source, 'r') as source_file:
        with open(destination, 'w') as destination_file:
            for line in source_file:
                destination_file.write(line)

if __name__ == '__main__':
    source = 'C:\\Users\\srin\\Desktop\\Python\\Python_Project\\sample.txt'
    destination = 'C:\\Users\\"
928,Write a NumPy program to merge three given NumPy arrays of same shape. ,"import numpy as np
arr1 = np.random.random(size=(25, 25, 1))
arr2 = np.random.random(size=(25, 25, 1))
arr3 = np.random.random(size=(25, 25, 1))
print(""Original arrays:"")
print(arr1)
print(arr2)
print(arr3)
result = np.concatenate((arr1, arr2, arr3), axis=-1)
print(""\nAfter concatenate:"")
print(result) 
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

c = np.concatenate((a, b), axis=0)
print(c)

d = np.concatenate((a, b), axis=1)
print(d)

e = np.concatenate((a,"
929,Write a NumPy program to interchange two axes of an array. ,"import numpy as np
x = np.array([[1,2,3]])
print(x)
y =  np.swapaxes(x,0,1)
print(y)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a)
print(b)

a[0, 1] = b[1, 0]
a[0, 2] = b[1, 1]
a[1, 0] = b[2, 0]
a[1, 1] = b["
930,Write a Python program to decapitalize the first letter of a given string. ,"def decapitalize_first_letter(s, upper_rest = False):
  return ''.join([s[:1].lower(), (s[1:].upper() if upper_rest else s[1:])]) 
print(decapitalize_first_letter('Java Script'))
print(decapitalize_first_letter('Python'))
","def decapitalize(string):
    return string[0].upper() + string[1:].lower()

print(decapitalize(""Python is a high-level general-purpose programming language. It is based on the abstract syntax tree of the modern world. It is also a general-purpose programming language, and it is often used as a formal language. It is also a general-purpose programming language, and it is often used as a formal language. It is also a general-purpose programming language, and it is"
931,"Write a Pandas program to select first 2 rows, 2 columns and specific two columns from World alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nSelect first 2 rows:"")
print(w_a_con.iloc[:2])
print(""\nSelect first 2 columns:"")
print(w_a_con.iloc[:,:2].head())
print(""\nSelect 2 specific columns:"")
print(w_a_con[['Display Value', 'Year']])
","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/Alcohol-Consumption/world_alcohol.csv')
df.head()

df.columns

df.columns = ['Year', 'Country', 'Alcohol', 'Consumption']

df.head()

df.head(2)

df.head(2, columns="
932,Write a NumPy program to compute e,"import numpy as np
x = np.array([1., 2., 3., 4.], np.float32)
print(""Original array: "")
print(x)
print(""\ne^x, element-wise of the said:"")
r = np.exp(x)
print(r)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a)
print(b)

print(a.shape)
print(b.shape)

print(a.ndim)
print(b.ndim)

print(a.size)
print(b.size)

print(a.dtype)
print("
933,Write a Python program to move the specified number of elements to the start of the given list. ,"def move_start(nums, offset):
  return nums[-offset:] + nums[:-offset] 
print(move_start([1, 2, 3, 4, 5, 6, 7, 8], 3))
print(move_start([1, 2, 3, 4, 5, 6, 7, 8], -3))
print(move_start([1, 2, 3, 4, 5, 6, 7, 8], 8))
print(move_start([1, 2, 3, 4, 5, 6, 7, 8], -8))
print(move_start([1, 2, 3, 4, 5, 6, 7, 8], 7))
print(move_start([1, 2, 3, 4, 5, 6, 7, 8], -7))
","def move_elements(lst, n):
    lst.insert(0, n)
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 5
move_elements(lst, n)
print(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 5
move_e"
934,Write a Python program to find and print all li tags of a given web page. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.w3resource.com/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""\nFind and print all li tags:\n"")
for tag in soup.find_all(""li""):
    print(""{0}: {1}"".format(tag.name, tag.text))
","import re

url = ""https://www.python.org/~guido/python-projects/index.html""

# find all li tags
# find all tags
# find all tags with class
# find all tags with class and class name
# find all tags with class and class name
# find all tags with class and class name and class name
# find all tags with class and class name and class name and class name
# find all tags with class and class name and class name and class"
935,Write a Pandas program to add summation to a row of the given excel file. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')
sum_row=df[[""Production"", ""Labor_Hours""]].sum()
df_sum=pd.DataFrame(data=sum_row).T
df_sum=df_sum.reindex(columns=df.columns)
df_sum
","import pandas as pd

# Read the data from the excel file
df = pd.read_excel('data.xlsx')

# Add the summation to the row
df['summation'] = df['summation'].apply(lambda x: x + df['summation'])

# Write the dataframe to the excel file
df.to_excel('summation.xlsx')

# Read the data from the excel file"
936,"Write a Python program to make a chain of function decorators (bold, italic, underline etc.) in Python. ","def make_bold(fn):
    def wrapped():
        return ""<b>"" + fn() + ""</b>""
    return wrapped

def make_italic(fn):
    def wrapped():
        return ""<i>"" + fn() + ""</i>""
    return wrapped

def make_underline(fn):
    def wrapped():
        return ""<u>"" + fn() + ""</u>""
    return wrapped
@make_bold
@make_italic
@make_underline
def hello():
    return ""hello world""
print(hello()) ## returns ""<b><i><u>hello world</u></i></b>""
","def bold(func):
    def wrapper(*args, **kwargs):
        return f'{func(*args, **kwargs)} {func.__name__}'
    return wrapper

def italic(func):
    def wrapper(*args, **kwargs):
        return f'{func(*args, **kwargs)} {func.__name__}'
    return wrapper

def underline(func):
    def wrapper(*args,"
937,Write a Python program to remove an element from a given list. ,"student = ['Ricky Rivera', 98, 'Math', 90, 'Science']
print(""Original list:"")
print(student)
print(""\nAfter deleting an element:, using index of the element:"")
del(student[0])
print(student)
","def remove_element(lst, element):
    lst.remove(element)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
remove_element(lst, 5)
print(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
remove_element(lst, 5)
print(lst)

lst = [1, 2, 3"
938,Write a Python program to count repeated characters in a string. ,"import collections
str1 = 'thequickbrownfoxjumpsoverthelazydog'
d = collections.defaultdict(int)
for c in str1:
    d[c] += 1

for c in sorted(d, key=d.get, reverse=True):
  if d[c] > 1:
      print('%s %d' % (c, d[c]))
","def repeated_char(s):
    count = 0
    for i in s:
        if i == s[count]:
            count += 1
        else:
            count = 0
    return count

print(repeated_char(""abcabcbb""))
print(repeated_char(""bbbbb""))
print(repeated_char(""pwwkew""))

""""""

def repeated_char(s):
    count = 0
    for i in s:
        if i == s["
939,Write a Pandas program to check if a specified column starts with a specified string in a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})
print(""Original DataFrame:"")
print(df)
print(""\nIf a specified column starts with a specified string?"")
df['company_code_starts_with'] = list(
    map(lambda x: x.startswith('ze'), df['company_code']))
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

print(df['col1'].str.startswith('col'))

# Output:
# True
# True
# True
# False
# False"
940,Write a NumPy program to replace all the nan (missing values) of a given array with the mean of another array. ,"import numpy as np
array_nums1 = np.arange(20).reshape(4,5)
array_nums2 = np.array([[1,2,np.nan],[4,5,6],[np.nan, 7, np.nan]])
print(""Original arrays:"")
print(array_nums1)
print(array_nums2)
print(""\nAll the nan of array_nums2 replaced by the mean of array_nums1:"")
array_nums2[np.isnan(array_nums2)]= np.nanmean(array_nums1)
print(array_nums2)
","import numpy as np

a = np.array([[1, 2, np.nan], [3, 4, 5], [np.nan, 6, 7]])
print(a)

b = np.array([[1, 2, 3], [4, 5, 6], [np.nan, np.nan, 7]])
print(b)

c = np.array([[1, 2, 3], [4, 5"
941,Write a Python program to execute a string containing Python code. ,"mycode = 'print(""hello world"")'
code = """"""
def mutiply(x,y):
    return x*y

print('Multiply of 2 and 3 is: ',mutiply(2,3))
""""""
exec(mycode)
exec(code)
","def my_function(s):
    return s.upper()

print(my_function(""Python is fun""))

""""""

# Solution:

def my_function(s):
    return s.upper()

print(my_function(""Python is fun""))"
942,Write a Python program to check whether an integer fits in 64 bits. ,"int_val = 30
if int_val.bit_length() <= 63:
    print((-2 ** 63).bit_length())
    print((2 ** 63).bit_length())
	","def check_64bit(n):
    if n > 0:
        return True
    else:
        return False

print(check_64bit(123))
print(check_64bit(0))
print(check_64bit(1))
print(check_64bit(2))
print(check_64bit(3))
print(check_64bit(4))
print(check_64bit(5))
print(check_64bit(6))
print(check_"
943,Write a Python program to calculate the sum of the numbers in a list between the indices of a specified range. ,"def sum_Range_list(nums, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += nums[i]                                                                                                                                                                                                  
    return sum_range   

nums = [2,1,5,6,8,3,4,9,10,11,8,12]
print(""Original list:"")
print(nums)
m = 8
n = 10
print(""Range:"",m,"","",n) 
print(""\nSum of the specified range:"")
print(sum_Range_list(nums, m, n))
","def sum_of_numbers(nums, start, end):
    return sum(nums[start:end])

print(sum_of_numbers([1, 2, 3, 4, 5], 0, 5))

""""""

def sum_of_numbers(nums, start, end):
    return sum(nums[start:end])

print(sum_of_numbers([1, 2, 3, 4, 5],"
944,Write a Pandas program to convert year-month string to dates adding a specified day of the month. ,"import pandas as pd
from dateutil.parser import parse
date_series = pd.Series(['Jan 2015', 'Feb 2016', 'Mar 2017', 'Apr 2018', 'May 2019'])
print(""Original Series:"")
print(date_series)
print(""\nNew dates:"")
result = date_series.map(lambda d: parse('11 ' + d))
print(result)
","import pandas as pd

# Create a dataframe from the csv file
df = pd.read_csv('/Users/srinivasan/Downloads/data.csv')

# Create a dataframe from the csv file
df = pd.read_csv('/Users/srinivasan/Downloads/data.csv')

# Create a dataframe from the csv file
df = pd.read_csv('/Users/s"
945,Write a NumPy program to convert numpy datetime64 to Timestamp. ,"import numpy as np
from datetime import datetime
dt = datetime.utcnow()
print(""Current date:"")
print(dt)
dt64 = np.datetime64(dt)
ts = (dt64 - np.datetime64('1970-01-01T00:00:00Z')) / np.timedelta64(1, 's')
print(""Timestamp:"")
print(ts)
print(""UTC from Timestamp:"")
print(datetime.utcfromtimestamp(ts))
","import numpy as np

# Convert numpy datetime64 to Timestamp
np.datetime64(np.datetime64('2021-01-01'), 'D')

# Convert Timestamp to numpy datetime64
np.datetime64(np.datetime64('2021-01-01'), 'D')

# Convert numpy datetime64 to Timestamp
np.datetime64(np.datetime64('2021-01-01'), 'D')"
946,Write a Pandas program to rename all and only some of the column names from world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
new_w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nRename all the column names:"")
w_a_con.columns = ['year','who_region','country','beverage_types','display_values']
print(w_a_con.head())
print(""\nRenaming only some of the column names:"")
new_w_a_con.rename(columns = {""WHO region"":""WHO_region"",""Display Value"":""Display_Value"" },inplace = True)
print(new_w_a_con.head()) 
","import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/dataprofessor/data/master/world_alcohol_consumption.csv')
df.rename(columns={'gdpPercap': 'gdp_per_cap'}, inplace=True)
df.rename(columns={'lifeExp': 'life_exp'}, inplace=True)
df.rename(column"
947,Write a Python program to get the n minimum elements from a given list of numbers. ,"def min_n_nums(nums, n = 1):
  return sorted(nums, reverse = False)[:n]

nums = [1, 2, 3]
print(""Original list elements:"")
print(nums)
print(""Minimum values of the said list:"", min_n_nums(nums))
nums = [1, 2, 3]
print(""\nOriginal list elements:"")
print(nums)
print(""Two minimum values of the said list:"", min_n_nums(nums,2))
nums = [-2, -3, -1, -2, -4, 0, -5]
print(""\nOriginal list elements:"")
print(nums)
print(""Threee minimum values of the said list:"", min_n_nums(nums,3))
nums = [2.2, 2, 3.2, 4.5, 4.6, 5.2, 2.9]
print(""\nOriginal list elements:"")
print(nums)
print(""Two minimum values of the said list:"", min_n_nums(nums, 2))
","def get_min(nums):
    return min(nums)

print(get_min([1, 2, 3, 4, 5]))

""""""

def get_min(nums):
    return min(nums)

print(get_min([1, 2, 3, 4, 5]))

""""""

def get_min(nums):
    return min(nums)

print(get_min([1, 2, 3,"
948,Write a Pandas program to create a dataframe and set a title or name of the index column. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
                                index = ['t1', 't2', 't3', 't4', 't5', 't6'])
print(""Original DataFrame:"")
print(df)
df.index.name = 'Index_name'
print(""\nSaid DataFrame with a title or name of the index column:"")
print(df)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

# Create a title
df.index.name = 'index'

# Create a title
df.index.name = 'index'

# Create a title
df.index.name = 'index'

# Create a"
949,Write a Pandas program to join the two dataframes with matching records from both sides where available. ,"import pandas as pd
student_data1 = pd.DataFrame({
        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5'],
         'name': ['Danniella Fenton', 'Ryder Storey', 'Bryce Jensen', 'Ed Bernal', 'Kwame Morin'], 
        'marks': [200, 210, 190, 222, 199]})

student_data2 = pd.DataFrame({
        'student_id': ['S4', 'S5', 'S6', 'S7', 'S8'],
        'name': ['Scarlette Fisher', 'Carla Williamson', 'Dante Morse', 'Kaiser William', 'Madeeha Preston'], 
        'marks': [201, 200, 198, 219, 201]})

print(""Original DataFrames:"")
print(student_data1)
print(student_data2)
merged_data = pd.merge(student_data1, student_data2, on='student_id', how='outer')
print(""Merged data (outer join):"")
print(merged_data)
","import pandas as pd
import numpy as np

df1 = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})
df2 = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col3': [10, 20, 30, 40, 50]})

df = pd.concat([df1"
950,Write a Python program to create a symbolic link and read it to decide the original file pointed by the link. ,"import os
path = '/tmp/' + os.path.basename(__file__)
print('Creating link {} -> {}'.format(path, __file__))
os.symlink(__file__, path)
stat_info = os.lstat(path)
print('\nFile Permissions:', oct(stat_info.st_mode))
print('\nPoints to:', os.readlink(path))
#removes the file path
os.unlink(path)
","import os

# Create a symbolic link
os.symlink(""/home/user/file.txt"", ""/home/user/file2.txt"")

# Read the link
print(os.readlink(""/home/user/file.txt""))

# Create a symbolic link
os.symlink(""/home/user/file2.txt"", ""/home/user/file3.txt"")

# Read the link
print(os.readlink"
951,Write a Python program to reverse strings in a given list of string values. ,"def reverse_strings_list(string_list):
    result = [x[::-1] for x in string_list]
    return result

colors_list = [""Red"", ""Green"", ""Blue"", ""White"", ""Black""]
print(""\nOriginal lists:"")
print(colors_list)
print(""\nReverse strings of the said given list:"")
print(reverse_strings_list(colors_list))
","def reverse_string(string):
    return string[::-1]

print(reverse_string(['a', 'b', 'c', 'd', 'e', 'f']))

""""""

def reverse_string(string):
    return string[::-1]

print(reverse_string(['a', 'b', 'c', 'd', 'e', 'f']))"
952,Write a Pandas program to convert integer or float epoch times to Timestamp and DatetimeIndex. ,"import pandas as pd
dates1 = pd.to_datetime([1329806505, 129806505, 1249892905,
                1249979305, 1250065705], unit='s')
print(""Convert integer or float epoch times to Timestamp and DatetimeIndex upto second:"")
print(dates1)
print(""\nConvert integer or float epoch times to Timestamp and DatetimeIndex upto milisecond:"")
dates2 = pd.to_datetime([1249720105100, 1249720105200, 1249720105300,
                1249720105400, 1249720105500], unit='ms')
print(dates2)
","import pandas as pd

# convert epoch times to Timestamp
df = pd.DataFrame({""epoch"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,"
953,Write a Python program to convert more than one list to nested dictionary. ,"def nested_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result

student_id = [""S001"", ""S002"", ""S003"", ""S004""] 
student_name = [""Adina Park"", ""Leyton Marsh"", ""Duncan Boyle"", ""Saim Richards""] 
student_grade = [85, 98, 89, 92]
print(""Original strings:"")
print(student_id)
print(student_name)
print(student_grade)
print(""\nNested dictionary:"")
ch='a'
print(nested_dictionary(student_id, student_name, student_grade))
","def nested_dict_to_dict(nested_list):
    dictionary = {}
    for i in range(len(nested_list)):
        dictionary[i] = nested_list[i]
    return dictionary

nested_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(nested_dict_to_dict(nested_list))

""""""

# Solution

def nested_dict_to"
954,Write a Python program to find a first even and odd number in a given list of numbers. ,"def first_even_odd(nums):
    first_even = next((el for el in nums if el%2==0),-1)
    first_odd = next((el for el in nums if el%2!=0),-1)
    return first_even,first_odd

nums= [1,3,5,7,4,1,6,8]
print(""Original list:"")
print(nums)
print(""\nFirst even and odd number of the said list of numbers:"")
print(first_even_odd(nums))
","def even_odd(numbers):
    even = 0
    odd = 0
    for i in numbers:
        if i % 2 == 0:
            even += 1
        else:
            odd += 1
    return even, odd

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(even_odd(numbers))

""""""

# Solution 1

def even_odd(numbers):"
955,Write a Python program to sort a list of lists by a given index of the inner list. ,"from operator import itemgetter
def index_on_inner_list(list_data, index_no):
    result = sorted(list_data, key=itemgetter(index_no))
    return result
students = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] 
print (""Original list:"")
print(students)
index_no = 0
print(""\nSort the said list of lists by a given index"",""( Index = "",index_no,"") of the inner list"")
print(index_on_inner_list(students, index_no))
index_no = 2
print(""\nSort the said list of lists by a given index"",""( Index = "",index_no,"") of the inner list"")
print(index_on_inner_list(students, index_no))
","l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

l.sort(key=lambda x: x[0])

print(l)

l.sort(key=lambda x: x[1])

print(l)

l.sort(key=lambda x: x[2])

print(l)

l.sort(key=lambda x: x[0])

print(l)"
956,Write a Python program to generate a list of numbers in the arithmetic progression starting with the given positive integer and up to the specified limit. ,"def arithmetic_progression(n, x):
  return list(range(n, x + 1, n))

print(arithmetic_progression(1, 15))
print(arithmetic_progression(3, 37))
print(arithmetic_progression(5, 25))
","import math

def generate_list(start, limit):
    list = []
    for i in range(start, limit):
        if i % 2 == 0:
            list.append(i**2)
        else:
            list.append(i**3)
    return list

print(generate_list(1, 10))

# Output: [1, 4, 9, 16, 25, 36, 49, 64"
957,Write a NumPy program to sort an given array by the n,"import numpy as np
print(""Original array:\n"")
nums = np.random.randint(0,10,(3,3))
print(nums)
print(""\nSort the said array by the nth column: "")
print(nums[nums[:,1].argsort()])
","import numpy as np

arr = np.array([[1,2,3,4,5,6,7,8,9,10],
                [10,9,8,7,6,5,4,3,2,1]])

arr.sort()
print(arr)

arr.sort(axis=0)
print(arr)

arr.sort(axis=1)
print(arr)

arr.sort(axis=0,kind='quicksort')"
958,Write a Python program to sort a list of elements using Bogosort sort. ,"import random

def bogosort(nums):
    def isSorted(nums):
        if len(nums) < 2:
            return True
        for i in range(len(nums) - 1):
            if nums[i] > nums[i + 1]:
                return False
        return True

    while not isSorted(nums):
        random.shuffle(nums)
    return nums
num1 = input('Input  comma separated numbers:\n').strip()
nums = [int(item) for item in num1.split(',')]
print(bogosort(nums))
","def bogo_sort(lst):
    for i in range(len(lst)):
        random.shuffle(lst)
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(bogo_sort(lst))

""""""

# Time complexity: O(n^2)
# Space Complexity: O(1)

def bogo_sort(lst):"
959,"Write a Python program to create a floating-point representation of the Arrow object, in UTC time using arrow module. ","import arrow
a = arrow.utcnow()
print(""Current Datetime:"")
print(a)
print(""\nFloating-point representation of the said Arrow object:"")
f = arrow.utcnow().float_timestamp
print(f) 
","import arrow

# create a datetime object
dt = arrow.now()

# create a string representation of the datetime object
print(dt.format('YYYY-MM-DD HH:mm:ss'))

# create a datetime object from a string representation
dt = arrow.get(dt.format('YYYY-MM-DD HH:mm:ss'))

# create a string representation of the datetime object
print(dt.format('"
960,"Write a Python program to create a time object with the same hour, minute, second, microsecond and timezone info. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nTime object with the same hour, minute, second, microsecond and timezone info.:"")
print(arrow.utcnow().timetz())
","import datetime

# create a datetime object
dt = datetime.datetime(2021, 8, 1, 12, 30, 0, 0)

# print the datetime object
print(dt)

# create a datetime object with the same hour, minute, second, microsecond and timezone info
dt = datetime.datetime(2021, 8, 1, 12, 30, 0, 0, tzinfo=datetime."
961,Write a NumPy program to append values to the end of an array. ,"import numpy as np
x = [10, 20, 30]
print(""Original array:"")
print(x)
x = np.append(x, [[40, 50, 60], [70, 80, 90]])
print(""After append values to the end of the array:"")
print(x)
","import numpy as np

a = np.array([1, 2, 3, 4, 5])

a.append(6)

print(a)

# Output:
# [1 2 3 4 5 6]

# Hint: You can use np.append() to add new values to an array.

# Hint: You can use np.append() to add new values to an array.

# Hint: You can use np.append() to add new values to"
962,Write a Python program to convert a string to a list. ,"import ast
color =""['Red', 'Green', 'White']""
print(ast.literal_eval(color))
","s = ""Hello World""
print(list(s))

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution"
963,"Write a Python program to print a specified list after removing the 0th, 4th and 5th elements. ","color = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']
color = [x for (i,x) in enumerate(color) if i not in (0,4,5)]
print(color)
","import sys

def remove_zero(lst):
    lst.pop(0)
    lst.pop(4)
    lst.pop(5)
    return lst

if __name__ == '__main__':
    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    print(remove_zero(lst))"
964,Write a Python program to convert a given string to snake case. ,"from re import sub
def snake_case(s):
  return '_'.join(
    sub('([A-Z][a-z]+)', r' \1',
    sub('([A-Z]+)', r' \1',
    s.replace('-', ' '))).split()).lower()

print(snake_case('JavaScript'))
print(snake_case('Foo-Bar'))
print(snake_case('foo_bar'))
print(snake_case('--foo.bar'))
print(snake_case('Foo-BAR'))
print(snake_case('fooBAR'))
print(snake_case('foo bar'))
","s = 'hello world'
print(s.lower())

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

#"
965,Write a Python program to find common element(s) in a given nested lists. ,"def common_in_nested_lists(nested_list):
    result = list(set.intersection(*map(set, nested_list)))
    return result
nested_list = [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]
print(""\nOriginal lists:"")
print(nested_list)
print(""\nCommon element(s) in nested lists:"")
print(common_in_nested_lists(nested_list))
","def common_elements(l1, l2):
    common_elements = []
    for i in l1:
        for j in l2:
            if i == j:
                common_elements.append(i)
    return common_elements

l1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
l2 = [[1, 2, 3], [4, 5, 6], [7, 8,"
966,Write a NumPy program to remove nan values from a given array. ,"import numpy as np
x = np.array([200, 300, np.nan, np.nan, np.nan ,700])
y = np.array([[1, 2, 3], [np.nan, 0, np.nan] ,[6,7,np.nan]] )
print(""Original array:"")
print(x)
print(""After removing nan values:"")
result = x[np.logical_not(np.isnan(x))]
print(result)
print(""\nOriginal array:"")
print(y)
print(""After removing nan values:"")
result = y[np.logical_not(np.isnan(y))]
print(result)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr = np.delete(arr, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr = np.delete(arr, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], axis=0)

arr = np.delete(arr,"
967,"Write a Pandas program to create a plot of adjusted closing prices, thirty days and forty days simple moving average of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
stock_data = df1.set_index('Date')
close_px = stock_data['Adj Close']
stock_data['SMA_30_days'] = stock_data.iloc[:,4].rolling(window=30).mean() 
stock_data['SMA_40_days'] = stock_data.iloc[:,4].rolling(window=40).mean()
plt.figure(figsize=[10,8])
plt.grid(True)
plt.title('Historical stock prices of Alphabet Inc. [01-04-2020 to 30-09-2020]\n',fontsize=18, color='black')
plt.plot(stock_data['Adj Close'],label='Adjusted Closing Price', color='black')
plt.plot(stock_data['SMA_30_days'],label='30 days simple moving average', color='red')
plt.plot(stock_data['SMA_40_days'],label='40 days simple moving average', color='green')
plt.legend(loc=2)
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])
df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')

df['Adj Close'] = df['Adj Close'].rolling"
968,Write a NumPy program to create a 3x4 matrix filled with values from 10 to 21. ,"import numpy as np
m= np.arange(10,22).reshape((3, 4))
print(m)
","import numpy as np

matrix = np.array([[10, 20, 30, 40],
                   [50, 60, 70, 80],
                   [90, 100, 110, 120]])

print(matrix)

# solution

# solution

# solution

# solution

# solution

# solution

# solution

# solution

# solution

# solution

# solution

# solution

# solution"
969,Write a NumPy program to extract second and third elements of the second and third rows from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: Second and third elements of the second and third rows"")
print(arra_data[1:3, 1:3])
","import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12],
                [13, 14, 15, 16]])

print(arr[2, 2])
print(arr[2, 3])

# Output:
# 5
# 6
# 7
# 8
# 13
# 14
#"
970,Write a Pandas program to create a Pivot table and find survival rate by gender on various classes. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table('survived', index='sex', columns='class')
print(result)
","import pandas as pd
import numpy as np

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/iris.csv')

# Create a pivot table
pivot = df.pivot_table(index='species', columns='class', values='petal_length', aggfunc='mean')

# Find survival rate by gender
pivot['survived'] = pivot['petal_length"
971,Write a NumPy program to calculate percentiles for a sequence or single-dimensional NumPy array. ,"import numpy as np
nums = np.array([1,2,3,4,5])
print(""50th percentile (median):"")
p = np.percentile(nums, 50)
print(p)
print(""40th percentile:"")
p = np.percentile(nums, 40)
print(p)
print(""90th percentile:"")
p = np.percentile(nums, 90)
print(p)
","import numpy as np

# Create a NumPy array with the values in the range [0, 100]
arr = np.arange(100)

# Print the values in the array
print(arr)

# Print the values in the array, but with the values rounded to 2 decimal places
print(arr, 'rounded to 2 decimal places')

# Print the values in the array, but with the values rounded to 5 decimal places
print(arr, 'rounded to 5"
972,Write a Python program to break a given list of integers into sets of a given positive number. Return true or false. ,"import collections as clt
def check_break_list(nums, n):
    coll_data = clt.Counter(nums)
    for x in sorted(coll_data.keys()):
        for index in range(1, n):
            coll_data[x+index] = coll_data[x+index]  - coll_data[x]
            if coll_data[x+index] < 0:
                return False
    return True

nums = [1,2,3,4,5,6,7,8]
n = 4
print(""Original list:"",nums)
print(""Number to devide the said list:"",n)
print(check_break_list(nums, n))
nums = [1,2,3,4,5,6,7,8]
n = 3
print(""\nOriginal list:"",nums)
print(""Number to devide the said list:"",n)
print(check_break_list(nums, n))
","def break_list(list):
    set_list = []
    for i in list:
        if i not in set_list:
            set_list.append(i)
    return len(set_list) == len(list)

print(break_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(break_list([1, 2, 3, 4, 5, 6,"
973,Write a Python program to sort a list of elements using the insertion sort algorithm. ,"def insertionSort(nlist):
   for index in range(1,len(nlist)):

     currentvalue = nlist[index]
     position = index

     while position>0 and nlist[position-1]>currentvalue:
         nlist[position]=nlist[position-1]
         position = position-1

     nlist[position]=currentvalue

nlist = [14,46,43,27,57,41,45,21,70]
insertionSort(nlist)
print(nlist)
","def insertionSort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j] :
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(insertionSort(arr))

"""""""
974,"Write a Python program to find the numbers of a given string and store them in a list, display the numbers which are bigger than the length of the list in sorted form. Use lambda function to solve the problem. ","str1 = ""sdf 23 safs8 5 sdfsd8 sdfs 56 21sfs 20 5""
print(""Original string: "",str1)
str_num=[i for i in str1.split(' ')]
lenght=len(str_num)
numbers=sorted([int(x) for x in str_num if x.isdigit()])
print('Numbers in sorted form:')
for i in ((filter(lambda x:x>lenght,numbers))):
    print(i,end=' ')
","def solution(str):
    lst = list(map(int, str))
    lst.sort()
    return lst

print(solution(""abcd""))

# Time complexity: O(n)
# Space Complexity: O(n)

# Solution 2:

def solution(str):
    lst = list(map(int,"
975,Write a Pandas program to merge two given dataframes with different columns. ,"import pandas as pd
data1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],
                     'key2': ['K0', 'K1', 'K0', 'K1'],
                     'P': ['P0', 'P1', 'P2', 'P3'],
                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) 
data2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],
                      'key2': ['K0', 'K0', 'K0', 'K0'],
                      'R': ['R0', 'R1', 'R2', 'R3'],
                      'S': ['S0', 'S1', 'S2', 'S3']})
print(""Original DataFrames:"")
print(data1)
print(""--------------------"")
print(data2)
print(""\nMerge two dataframes with different columns:"")
result = pd.concat([data1,data2], axis=0, ignore_index=True)
print(result)
","df1 = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})
df2 = pd.DataFrame({'col1': [7, 8, 9], 'col2': [10, 11, 12]})

df1.merge(df2, on='col1')

""""""

import pandas as pd
import numpy as np

df1 = pd.DataFrame({'col1"
976,Write a Pandas program to drop those rows from a given DataFrame in which specific columns have missing values. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[np.nan,np.nan,70002,np.nan,np.nan,70005,np.nan,70010,70003,70012,np.nan,np.nan],
'purch_amt':[np.nan,270.65,65.26,np.nan,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,np.nan],
'ord_date': [np.nan,'2012-09-10',np.nan,np.nan,'2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17',np.nan],
'customer_id':[np.nan,3001,3001,np.nan,3002,3001,3001,3004,3003,3002,3001,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nDrop those rows in which specific columns have missing values:"")
result = df.dropna(subset=['ord_no', 'customer_id'])
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5],
                   'col2': [10, 20, 30, 40, 50],
                   'col3': [100, 200, 300, 400, 500]})

df.dropna(subset=['col2'])

df.dropna(subset=['col3'])

df.dropna(subset"
977,Write a Python program to find the difference between elements (n+1th - nth) of a given list of numeric values. ,"def elements_difference(nums):
    result = [j-i for i, j in zip(nums[:-1], nums[1:])]
    return result

nums1 = [1,2,3,4,5,6,7,8,9,10]
nums2 = [2,4,6,8]

print(""Original list:"")
print(nums1)
print(""\nDfference between elements (n+1th  nth) of the said list :"")
print(elements_difference(nums1))
print(""\nOriginal list:"")
print(nums2)
print(""\nDfference between elements (n+1th  nth) of the said list :"")
print(elements_difference(nums2))

","def diff(nums):
    return nums[nums[0]] - nums[nums[nums[0] + 1]]

n = int(input())
nums = [int(x) for x in input().split()]
print(diff(nums))

# Solution:

# def diff(nums):
#     return nums[nums[0]] - nums[nums[nums"
978,Write a Pandas program to create a time-series from a given list of dates as strings. ,"import pandas as pd
import numpy as np
import datetime
from datetime import datetime, date 
dates = ['2014-08-01','2014-08-02','2014-08-03','2014-08-04']
time_series = pd.Series(np.random.randn(4), dates)
print(time_series)
","import pandas as pd

# Create a dataframe from the list of dates
dates = ['Jan-01', 'Jan-02', 'Jan-03', 'Jan-04', 'Jan-05', 'Jan-06', 'Jan-07', 'Jan-08', 'Jan-09', 'Jan-10', 'Jan-11', 'Jan-12', 'Jan-13', 'Jan-14', 'Jan-15', 'Jan-16', 'Jan-17', '"
979,Write a Pandas program to convert a series of date strings to a timeseries. ,"import pandas as pd
date_series = pd.Series(['01 Jan 2015', '10-02-2016', '20180307', '2014/05/06', '2016-04-12', '2019-04-06T11:20'])
print(""Original Series:"")
print(date_series)
print(""\nSeries of date strings to a timeseries:"")
print(pd.to_datetime(date_series))
","import pandas as pd

# Create a dataframe from the string data
data = pd.Series(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])

# Create a timeseries from the dataframe
ts = pd.Series(data)

# Create a timeseries from the string data
ts = pd.Series(data.str.split('-'))"
980,"Write a NumPy program to create a 90x30 array filled with random point numbers, increase the number of items (10 edge elements) shown by the print statement. ","import numpy as np 
nums = np.random.randint(10, size=(90, 30))
print(""Original array:"")
print(nums)
print(""\nIncrease the number of items (10 edge elements) shown by the print statement:"")
np.set_printoptions(edgeitems=10)
print(nums)
","import numpy as np

# Create an array filled with random points
x = np.random.rand(90, 30)

# Increase the number of elements by 10
x = x + 10

# Print the array
print(x)

# Create a NumPy program to create a 90x30 array filled with random point numbers, increase the number of items (10 edge elements) shown by the print statement."
981,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight the minimum value in each column. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
def highlight_min(s):
    '''
    highlight the minimum in a Series red.
    '''
    is_max = s == s.min()
    return ['background-color: red' if v else '' for v in is_max]

print(""\nHighlight the minimum value in each column:"")
df.style.apply(highlight_min,subset=pd.IndexSlice[:, ['B', 'C', 'D', 'E']])
","import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randint(0, 100, size=(10, 4)), columns=['col1', 'col2', 'col3', 'col4'])
print(df)

df.loc[:, 'col1'] = np.random.randint(0, 100, size=10)
print(df)

df."
982,Write a Pandas program to split the following dataframe into groups and calculate quarterly purchase amount. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['05-10-2012','09-10-2012','05-10-2012','08-17-2012','10-09-2012','07-27-2012','10-09-2012','10-10-2012','10-10-2012','06-17-2012','07-08-2012','04-25-2012'],
'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
df['ord_date']= pd.to_datetime(df['ord_date']) 
print(""\nQuartly purchase amount:"")
result = df.set_index('ord_date').groupby(pd.Grouper(freq='Q')).agg({'purch_amt':sum})
print(result)
","df = pd.DataFrame({'Date': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                   'Amount': [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200]})

df.groupby('Date').sum()

df.groupby('Date').sum().plot()

df.group"
983,Write a NumPy program to sort a given array by row and column in ascending order. ,"import numpy as np  
nums = np.array([[5.54, 3.38, 7.99],
              [3.54, 4.38, 6.99],
              [1.54, 2.39, 9.29]])
print(""Original array:"")
print(nums)
print(""\nSort the said array by row in ascending order:"")
print(np.sort(nums))
print(""\nSort the said array by column in ascending order:"")
print(np.sort(nums, axis=0))
","import numpy as np

arr = np.array([[1,2,3,4,5,6,7,8,9,10],
                [10,11,12,13,14,15,16,17,18,19],
                [20,21,22,23,24,25,26,27,28,29]])

arr.sort(axis=0)
arr.sort(axis=1)

print(arr)

#"
984,Write a Python program that reads a given expression and evaluates it. ,"#https://bit.ly/2lxQysi
import re
print(""Input number of data sets:"")
class c(int):
    def __add__(self,n):
        return c(int(self)+int(n))
    def __sub__(self,n):
        return c(int(self)-int(n))
    def __mul__(self,n):
        return c(int(self)*int(n))
    def __truediv__(self,n):
        return c(int(int(self)/int(n)))
   
for _ in range(int(input())):
  print(""Input an expression:"")
  print(eval(re.sub(r'(\d+)',r'c(\1)',input()[:-1])))
",">>> import math
>>> math.sqrt(2)
1.0
>>> math.sqrt(3)
1.0
>>> math.sqrt(4)
1.0
>>> math.sqrt(5)
2.0
>>> math.sqrt(6)
2.0
>>> math.sqrt(7)
2.0
>>> math.sqrt(8)
2.0
>>> math.sqrt(9)
2.0
>>> math.sqrt("
985,"Write a NumPy program to create a 10x10 matrix, in which the elements on the borders will be equal to 1, and inside 0. ","import numpy as np
x = np.ones((10, 10))
x[1:-1, 1:-1] = 0
print(x)
","import numpy as np

matrix = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   [1, 2, 3, 4, 5, 6, 7"
986,Write a Python program to pack consecutive duplicates of a given list elements into sublists. ,"from itertools import groupby
def pack_consecutive_duplicates(l_nums):
    return [list(group) for key, group in groupby(l_nums)]
n_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]
print(""Original list:"") 
print(n_list)
print(""\nAfter packing consecutive duplicates of the said list elements into sublists:"")
print(pack_consecutive_duplicates(n_list)) 

","def pack_consecutive_duplicates(lst):
    # your code goes here
    pass

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40"
987,Write a Python program to remove additional spaces in a given list. ,"def test(lst):
    result =[]
    for i in lst:
        j = i.replace(' ','')
        result.append(j)
    return result

text = ['abc ', '  ', ' ', 'sdfds ', ' ', '     ', 'sdfds ', 'huy']
print(""\nOriginal list:"")
print(text)
print(""Remove additional spaces from the said list:"")
print(test(text))
","def remove_spaces(lst):
    for i in range(len(lst)):
        lst[i] = lst[i].replace("" "", """")
    return lst

lst = [""this is a string"", ""this is a string"", ""this is a string"", ""this is a string"", ""this is a string"", ""this is a string"", ""this is a string"", ""this is a string"", ""this is a string"", ""this is a string"", ""this is a"
988,Write a NumPy program to compute the 80th percentile for all elements in a given array along the second axis. ,"import numpy as np
x = np.arange(12).reshape((2, 6))
print(""\nOriginal array:"")
print(x)
r1 = np.percentile(x, 80, 1)
print(""\n80th percentile for all elements of the said array along the second axis:"")
print(r1)
","import numpy as np

a = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
              [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
              [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]])

print(np.percentile(a, [80, 90]))

# OUTPUT:"
989,Write a NumPy program to multiply a 5x3 matrix by a 3x2 matrix and create a real matrix product. ,"import numpy as np
x = np.random.random((5,3))
print(""First array:"")
print(x)
y = np.random.random((3,2))
print(""Second array:"")
print(y)
z = np.dot(x, y)
print(""Dot product of two arrays:"")
print(z)
","import numpy as np

# Create a 5x3 matrix
A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Create a 3x2 matrix
B = np.array([[10, 20], [30, 40]])

# Create a real matrix product
C = A @ B

# Print the result
print(C)

# Create a 5x"
990,Write a Pandas program to subtract two timestamps of same time zone or different time zone. ,"import pandas as pd
print(""Subtract two timestamps of same time zone:"")
date1 = pd.Timestamp('2019-03-01 12:00', tz='US/Eastern')
date2 = pd.Timestamp('2019-04-01 07:00', tz='US/Eastern')
print(""Difference: "", (date2-date1))
print(""\nSubtract two timestamps of different time zone:"")
date1 = pd.Timestamp('2019-03-01 12:00', tz='US/Eastern')
date2 = pd.Timestamp('2019-03-01 07:00', tz='US/Pacific')
# Remove the time zone and do the subtraction
print(""Difference: "", (date1.tz_localize(None) - date2.tz_localize(None)))
","import pandas as pd
import datetime

# Read the data from the csv file
df = pd.read_csv('/Users/srinivasan/Downloads/data.csv')

# Create a new column called 'date'
df['date'] = pd.to_datetime(df['date'])

# Create a new column called 'time'
df['time'] = df['date'].dt.time

# Create a new"
991,Write a Python program to get the weighted average of two or more numbers. ,"def weighted_average(nums, weights):
  return sum(x * y for x, y in zip(nums, weights)) / sum(weights)
nums1 = [10, 50, 40]
nums2 = [2, 5, 3]
print(""Original list elements:"")
print(nums1) 
print(nums2)
print(""\nWeighted average of the said two list of numbers:"")
print(weighted_average(nums1, nums2))
nums1 = [82, 90, 76, 83]
nums2 = [.2, .35, .45, 32]
print(""\nOriginal list elements:"")
print(nums1) 
print(nums2)
print(""\nWeighted average of the said two list of numbers:"")
print(weighted_average(nums1, nums2))
","def get_weighted_average(numbers):
    total = 0
    for num in numbers:
        total += num
    return total / len(numbers)

numbers = [1, 2, 3, 4, 5]
print(get_weighted_average(numbers))

numbers = [1, 2, 3, 4, 5]
print(get_weighted_average(numbers))

numbers = [1, 2, 3, 4, 5]"
992,Write a Python program to form Bigrams of words in a given list of strings. ,"def bigram_sequence(text_lst):
    result = [a for ls in text_lst for a in zip(ls.split("" "")[:-1], ls.split("" "")[1:])]
    return result
text = [""Sum all the items in a list"", ""Find the second smallest number in a list""]
print(""Original list:"")
print(text)
print(""\nBigram sequence of the said list:"")
print(bigram_sequence(text))
","def bigrams(words):
    # your code goes here
    return

""""""

# Solution 1

def bigrams(words):
    return set(words)

# Solution 2

def bigrams(words):
    return {tuple(words[i:i+2]) for i in range(len(words))}

# Solution 3

def bigrams(words):
    return {tuple(words[i:i+2]) for i in range("
993,Write a Python program to delete the last item from a singly linked list. ,"class Node:
    # Singly linked node
    def __init__(self, data=None):
        self.data = data
        self.next = None
class singly_linked_list:
    def __init__(self):
        # Createe an empty list
        self.tail = None
        self.head = None
        self.count = 0

    def append_item(self, data):
        #Append items on the list
        node = Node(data)
        if self.head:
            self.head.next = node
            self.head = node
        else:
            self.tail = node
            self.head = node
        self.count += 1
    
    def delete_item(self, data):
        # Delete an item from the list
        current = self.tail
        prev = self.tail
        while current:
            if current.data == data:
                if current == self.tail:
                    self.tail = current.next
                else:
                    prev.next = current.next
                self.count -= 1
                return
            prev = current
            current = current.next
    def iterate_item(self):
        # Iterate the list.
        current_item = self.tail
        while current_item:
            val = current_item.data
            current_item = current_item.next
            yield val

items = singly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')

print(""Original list:"")
for val in items.iterate_item():
    print(val)

print(""\nAfter removing the last item from the list:"")
items.delete_item('Java')
for val in items.iterate_item():
    print(val)
","# Node class
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# Linked List class
class LinkedList:
    def __init__(self):
        self.head = None
    
    # Function to delete the last item from a singly linked list
    def deleteLast(self):
        if self.head is None:
            return None
        
        # If the list is empty, return"
994,Write a Pandas program to filter words from a given series that contain atleast two vowels. ,"import pandas as pd
from collections import Counter
color_series = pd.Series(['Red', 'Green', 'Orange', 'Pink', 'Yellow', 'White'])
print(""Original Series:"")
print(color_series)
print(""\nFiltered words:"")
result = mask = color_series.map(lambda c: sum([Counter(c.lower()).get(i, 0) for i in list('aeiou')]) >= 2)
print(color_series[result])
","import pandas as pd

# Read the data
df = pd.read_csv('vowels.csv')

# Create a new column named 'vowels_with_two_vowels'
df['vowels_with_two_vowels'] = df['vowels'].str.contains('[aeiou]')

# Print the dataframe
print(df)

# Create a new column named 'vow"
995,Write a Python program to add leading zeroes to a string. ,"str1='122.22'
print(""Original String: "",str1)
print(""\nAdded trailing zeros:"")
str1 = str1.ljust(8, '0')
print(str1)
str1 = str1.ljust(10, '0')
print(str1)
print(""\nAdded leading zeros:"")
str1='122.22'
str1 = str1.rjust(8, '0')
print(str1)
str1 = str1.rjust(10, '0')
print(str1)
","def add_leading_zeroes(s, n):
    return s + str(n).zfill(len(s))

print(add_leading_zeroes(""1234"", 2))
print(add_leading_zeroes(""12345"", 3))
print(add_leading_zeroes(""123456789"", 4))

""""""

def add_leading_zeroes(s, n):
    return s + str(n).zfill(len(s))

print("
996,"Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and find details where ""Mine Name"" starts with ""P"". ","import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')    
df[df[""Mine_Name""].map(lambda x: x.startswith('P'))].head()
","import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')
df['Mine Name'] = df['Mine Name'].str.startswith('P')

print(df)

# Solution:

# df = pd.read_excel('coalpublic2013.xlsx')
# df['Mine Name'] = df['Mine Name'"
997,"Write a NumPy program to calculate round, floor, ceiling, truncated and round (to the given number of decimals) of the input, element-wise of a given array. ","import numpy as np
x = np.array([3.1, 3.5, 4.5, 2.9, -3.1, -3.5, -5.9])
print(""Original array: "")
print(x)
r1 = np.around(x)
r2 = np.floor(x)
r3 = np.ceil(x)
r4 = np.trunc(x)
r5 = [round(elem) for elem in x]

print(""\naround:   "", r1)
print(""floor:    "",r2)
print(""ceil:     "",r3)
print(""trunc:    "",r4)
print(""round:    "",r5)
","import numpy as np

a = np.array([1, 2, 3, 4, 5])

print(np.round(a))

print(np.floor(a))

print(np.ceil(a))

print(np.trunc(a))

# Output:
# [1.  2.  3.  4.  5.]"
998,Write a NumPy program to create a vector of length 10 with values evenly distributed between 5 and 50. ,"import numpy as np
v = np.linspace(10, 49, 5)
print(""Length 10 with values evenly distributed between 5 and 50:"")
print(v)
","import numpy as np

x = np.random.randint(5, size=10)
print(x)

# Solution:

# x = np.random.randint(5, size=10)
# print(x)

# Solution:

# x = np.random.randint(5, size=10)
# print(x)

# Solution:

# x = np.random.randint(5, size="
999,Write a Python program to check whether any word in a given sting contains duplicate characrters or not. Return True or False. ,"def duplicate_letters(text):
	word_list = text.split()
	for word in word_list:
		if len(word) > len(set(word)):
			return False
	return True
text = ""Filter out the factorials of the said list.""
print(""Original text:"")
print(text)
print(""Check whether any word in the said sting contains duplicate characrters or not!"")
print(duplicate_letters(text))
text = ""Python Exercise.""
print(""\nOriginal text:"")
print(text)
print(""Check whether any word in the said sting contains duplicate characrters or not!"")
print(duplicate_letters(text))
text = ""The wait is over.""
print(""\nOriginal text:"")
print(text)
print(""Check whether any word in the said sting contains duplicate characrters or not!"")
print(duplicate_letters(text))
","def check_duplicate(word):
    if word in word_list:
        return True
    else:
        return False

word = input(""Enter the word: "")
word_list = list(word)

if check_duplicate(word):
    print(""The word contains duplicate characters."")
else:
    print(""The word does not contain duplicate characters."")

# Output:
# Enter the word: abc"
