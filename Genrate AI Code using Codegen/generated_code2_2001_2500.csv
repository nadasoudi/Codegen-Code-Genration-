Unnamed: 0,Problem,Python Code,Generated_Code
2001,How to read multiple text files from folder in Python,"# Import Module
import os

# Folder Path
path = ""Enter Folder Path""

# Change the directory
os.chdir(path)

# Read text File


def read_text_file(file_path):
with open(file_path, 'r') as f:
print(f.read())


# iterate through all file
for file in os.listdir():
# Check whether file is in text format or not
if file.endswith("".txt""):
file_path = f""{path}\{file}""

# call read text file function
read_text_file(file_path)","import os

def read_file(filename):
    """"""
    Read a file and return a list of lines
    """"""
    with open(filename, 'r', encoding='utf-8') as f:
        return f.readlines()

def solve(files):
    """"""
    Solve the following problem:
    How to read multiple text files from folder in Python
    """"""
    # TODO: Complete the solve function below.
    # Hint: You can use the functions below to solve the problem."
2002,Write a Python program to Remove items from Set,"# Python program to remove elements from set
# Using the pop() method
def Remove(initial_set):
while initial_set:
initial_set.pop()
print(initial_set)

# Driver Code
initial_set = set([12, 10, 13, 15, 8, 9])
Remove(initial_set)","def remove_item(set, item):
    set.remove(item)

set = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
remove_item(set, 6)
print(set)

""""""

def remove_item(set, item):
    set.remove(item)

set = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
remove_item(set, 6)
print(set)"
2003,Write a Python program to Last business day of every month in year,"# Python3 code to demonstrate working of
# Last weekday of every month in year
# Using loop + max() + calendar.monthcalendar
import calendar

# initializing year
year = 1997

# printing Year
print(""The original year : "" + str(year))

# initializing weekday
weekdy = 5

# iterating for all months
res = []
for month in range(1, 13):

# max gets last friday of each month of 1997
res.append(str(max(week[weekdy]
for week in calendar.monthcalendar(year, month))) +
""/"" + str(month)+ ""/"" + str(year))

# printing
print(""Last weekdays of year : "" + str(res))","def Last_business_day(year, month):
    """"""
    This function returns the last business day of the given month.
    """"""
    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:
        return 31
    elif month == 2:
        if year % 4 == 0:
            if year % 100 == 0:
                if year % 400 == 0:
                    return 29
                else:
                    return 28"
2004,Converting a 10 digit phone number to US format using Regex in Python,"import re

def convert_phone_number(phone):

# actual pattern which only change this line
num = re.sub(r'(?<!\S)(\d{3})-', r'(\1) ', phone)
return num

# Driver code
print(convert_phone_number(""Call geek 321-963-0612""))","phone_number = input(""Enter a 10 digit phone number: "")

# Solution:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
#"
2005,Write a Python program to Add Space between Potential Words,"# Python3 code to demonstrate working of
# Add Space between Potential Words
# Using loop + join()


# initializing list
test_list = [""gfgBest"", ""forGeeks"", ""andComputerScience""]


# printing original list
print(""The original list : "" + str(test_list))


res = []


# loop to iterate all strings
for ele in test_list:
temp = [[]]
for char in ele:

# checking for upper case character
if char.isupper():
temp.append([])

# appending character at latest list
temp[-1].append(char)

# joining lists after adding space
res.append(' '.join(''.join(ele) for ele in temp))


# printing result
print(""The space added list of strings : "" + str(res))","def solution(word):
    return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8] + word[9] + word[10] + word[11] + word[12] + word[13] + word[14] + word[15] + word[16] + word[17] + word[18] + word[19] + word[20] + word[21] +"
2006,Convert string to datetime in Python with timezone,"# Python3 code to demonstrate
# Getting datetime object using a date_string

# importing datetime module
import datetime

# datestring for which datetime_obj required
date_string = '2021-09-01 15:27:05.004573 +0530'
print(""string datetime: "")
print(date_string)
print(""datestring class is :"", type(date_string))

# using strptime() to get datetime object
datetime_obj = datetime.datetime.strptime(
date_string, '%Y-%m-%d %H:%M:%S.%f %z')

print(""converted to datetime:"")

# Printing datetime
print(datetime_obj)

# Checking class of datetime_obj.
print(""datetime_obj class is :"", type(datetime_obj))","def convert_string_to_datetime(string):
    # Your code here
    return datetime.strptime(string, '%Y-%m-%d %H:%M:%S')

print(convert_string_to_datetime('2021-05-23 12:34:56'))

""""""

def convert_string_to_datetime(string):
    # Your code here
    return datetime.strptime(string, '%Y-%m-"
2007,Program to print half Diamond star pattern in Python,"// C++ implementation to print the
// half diamond star pattern

#include <iostream>

using namespace std;

// Function to print the
// half diamond star pattern
void halfDiamondStar(int N)
{
int i, j;

// Loop to print the upper half
// diamond pattern
for (i = 0; i < N; i++) {
for (j = 0; j < i + 1; j++)
cout << ""*"";
cout << ""\n"";
}

// Loop to print the lower half
// diamond pattern
for (i = 1; i < N; i++) {
for (j = i; j < N; j++)
cout << ""*"";
cout << ""\n"";
}
}

// Driver Code
int main()
{
int N = 5;

// Function Call
halfDiamondStar(N);
}","def print_diamond_star(n):
    for i in range(n):
        for j in range(n):
            print(i*2, end="" "")
        print()

n = int(input(""Enter the number of rows: ""))
print_diamond_star(n)

""""""

# Solution

def print_diamond_star(n):
    for i in range(n):
        for j in range(n):
            print(i*2, end="" "")"
2008,Scrape Table from Website using Write a Python program to Selenium,"<!DOCTYPE html>
<html>
<head>
<title>Selenium Table</title>
</head>
<body>
<table border=""1"">
<thead>
<tr>
<th>Name</th>
<th>Class</th>
</tr>
</thead>
<tbody>
<tr>
<td>Vinayak</td>
<td>12</td>
</tr>
<tr>
<td>Ishita</td>
<td>10</td>
</tr>
</tbody>
</table>
</body>
</html>","import selenium
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.common"
2009,Write a Python program to Cross Pairing in Tuple List,"# Python3 code to demonstrate working of
# Cross Pairing in Tuple List
# Using list comprehension

# initializing lists
test_list1 = [(1, 7), (6, 7), (9, 100), (4, 21)]
test_list2 = [(1, 3), (2, 1), (9, 7), (2, 17)]

# printing original lists
print(""The original list 1 : "" + str(test_list1))
print(""The original list 2 : "" + str(test_list2))

# corresponding loop in list comprehension
res = [(sub1[1], sub2[1]) for sub2 in test_list2 for sub1 in test_list1 if sub1[0] == sub2[0]]

# printing result
print(""The mapped tuples : "" + str(res))","def cross_pairing(tup1, tup2):
    if len(tup1)!= len(tup2):
        return False
    for i in range(len(tup1)):
        if tup1[i]!= tup2[i]:
            return False
    return True

print(cross_pairing([1, 2, 3], [2, 3, 4]))
print(cross_pairing([1, 2, 3], [3, 4, 5]"
2010,Write a Python program to Convert dictionary to K sized dictionaries,"# Python3 code to demonstrate working of
# Convert dictionary to K Keys dictionaries
# Using loop

# initializing dictionary
test_dict = {'Gfg' : 1, 'is' : 2, 'best' : 3, 'for' : 4, 'geeks' : 5, 'CS' : 6}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# initializing K
K = 2

res = []
count = 0
flag = 0
indict = dict()
for key in test_dict:
indict[key] = test_dict[key]
count += 1

# checking for K size and avoiding empty dict using flag
if count % K == 0 and flag:
res.append(indict)

# reinitializing dictionary
indict = dict()
count = 0
flag = 1


# printing result
print(""The converted list : "" + str(res))","d = {'a': 1, 'b': 2, 'c': 3}

d = dict(a=1, b=2, c=3)

d = dict(a=1, b=2, c=3)

d = dict(a=1, b=2, c=3)

d = dict(a=1, b=2, c=3)

d = dict(a=1, b=2, c=3)

d = dict(a="
2011,Write a Python program to Numpy matrix.max(),"# import the important module in python
import numpy as np

# make matrix with numpy
gfg = np.matrix('[64, 1; 12, 3]')

# applying matrix.max() method
geeks = gfg.max()

print(geeks)","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(A.max())

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

#"
2012,Find words which are greater than given length k in Python,"// C++ program to find all string
// which are greater than given length k


#include <bits/stdc++.h>
using namespace std;


// function find string greater than
// length k
void string_k(string s, int k)
{
// create the empty string
string w = """";
// iterate the loop till every space
for(int i = 0; i < s.size(); i++)
{
if(s[i] != ' ')

// append this sub string in
// string w
w = w + s[i];
else {

// if length of current sub
// string w is greater than
// k then print
if(w.size() > k)
cout << w << "" "";
w = """";
}
}
}


// Driver code
int main()
{
string s = ""geek for geeks"";
int k = 3;
s = s + "" "";
string_k(s, k);
return 0;
}


// This code is contributed by
// Manish Shaw (manishshaw1)","def solution(k, words):
    answer = []
    for word in words:
        if len(word) > k:
            answer.append(word)
    return answer

print(solution(3, [""tank"", ""kick"", ""know"", ""wheel"", ""land"", ""dream"", ""mother"", ""robot"", ""tank""]))

""""""

def solution(k, words):
    answer = []
    for word in words:
        if len(word) > k:
            answer."
2013,Creating Pandas dataframe using list of lists in Python,"# Import pandas library
import pandas as pd


# initialize list of lists
data = [['Geeks', 10], ['for', 15], ['geeks', 20]]


# Create the pandas DataFrame
df = pd.DataFrame(data, columns = ['Name', 'Age'])


# print dataframe.
print(df )","import pandas as pd

# Create a dataframe from the list of lists
df = pd.DataFrame(list(zip(x, y)), columns=['x', 'y'])

# Print the dataframe
print(df)

# Create a dataframe from the list of lists
df = pd.DataFrame(list(zip(x, y)), columns=['x', 'y'])

# Print the dataframe
print(df)

# Create a dataframe from the list of"
2014,Write a Python program to Convert Tuple Matrix to Tuple List,"# Python3 code to demonstrate working of
# Convert Tuple Matrix to Tuple List
# Using list comprehension + zip()

# initializing list
test_list = [[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]

# printing original list
print(""The original list is : "" + str(test_list))

# flattening
temp = [ele for sub in test_list for ele in sub]

# joining to form column pairs
res = list(zip(*temp))

# printing result
print(""The converted tuple list : "" + str(res))","def convert_tuple_to_tuple_list(tuple_list):
    return tuple_list

def convert_tuple_to_tuple_list_2(tuple_list):
    return tuple_list

def convert_tuple_to_tuple_list_3(tuple_list):
    return tuple_list

def convert_tuple_to_tuple_list_4(tuple_list):
    return tuple_list

def convert_tuple"
2015,Write a Python Program to Reverse a linked list,"# Python program to reverse a linked list
# Time Complexity : O(n)
# Space Complexity : O(n) as 'next'
#variable is getting created in each loop.


# Node class




class Node:


# Constructor to initialize the node object
def __init__(self, data):
self.data = data
self.next = None




class LinkedList:


# Function to initialize head
def __init__(self):
self.head = None


# Function to reverse the linked list
def reverse(self):
prev = None
current = self.head
while(current is not None):
next = current.next
current.next = prev
prev = current
current = next
self.head = prev


# Function to insert a new node at the beginning
def push(self, new_data):
new_node = Node(new_data)
new_node.next = self.head
self.head = new_node


# Utility function to print the linked LinkedList
def printList(self):
temp = self.head
while(temp):
print temp.data,
temp = temp.next




# Driver program to test above functions
llist = LinkedList()
llist.push(20)
llist.push(4)
llist.push(15)
llist.push(85)


print ""Given Linked List""
llist.printList()
llist.reverse()
print ""\nReversed Linked List""
llist.printList()


# This code is contributed by Nikhil Kumar Singh(nickzuck_007)","def reverse_list(head):
    if head is None:
        return None
    
    prev = None
    curr = head
    while curr is not None:
        next = curr.next
        curr.next = prev
        prev = curr
        curr = next
    return prev

# Code to test the above function
# head = [1, 2, 3, 4, 5]
# head = reverse_list(head)
# print(head.val)

# Solution 2"
2016,numpy.sqrt() in Python,"# Python program explaining
# numpy.sqrt() method

# importing numpy
import numpy as geek

# applying sqrt() method on integer numbers
arr1 = geek.sqrt([1, 4, 9, 16])
arr2 = geek.sqrt([6, 10, 18])

print(""square-root of an array1 : "", arr1)
print(""square-root of an array2 : "", arr2)","import numpy as np

def sqrt(x):
    return np.sqrt(x)

print(sqrt(3))

""""""

# Solution

def sqrt(x):
    return np.sqrt(x)

print(sqrt(3))

""""""

# Solution

def sqrt(x):
    return np.sqrt(x)

print(sqrt(3))

""""""

# Solution

def sqrt(x):
    return np."
2017,How to Remove repetitive characters from words of the given Pandas DataFrame using Regex in Python,"# importing required libraries
import pandas as pd
import re


# creating Dataframe with column
# as name and common_comments
df = pd.DataFrame(
{
'name' : ['Akash', 'Ayush', 'Diksha',
'Priyanka', 'Radhika'],

'common_comments' : ['hey buddy meet me today ',
'sorry bro i cant meet',
'hey akash i love geeksforgeeks',
'twiiter is the best way to comment',
'geeksforgeeks is good for learners']
},

columns = ['name', 'common_comments']
)
# printing Dataframe
df","import re

df = pd.DataFrame({'text': ['This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a test', 'This is a"
2018,Convert a column to row name/index in Pandas in Python,"# importing pandas as pd
import pandas as pd


# Creating a dict of lists
data = {'Name':[""Akash"", ""Geeku"", ""Pankaj"", ""Sumitra"",""Ramlal""],
'Branch':[""B.Tech"", ""MBA"", ""BCA"", ""B.Tech"", ""BCA""],
'Score':[""80"",""90"",""60"", ""30"", ""50""],
'Result': [""Pass"",""Pass"",""Pass"",""Fail"",""Fail""]}


# creating a dataframe
df = pd.DataFrame(data)

df","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/iris.csv?raw=true')

df.columns = ['sepal_length','sepal_width', 'petal_length', 'petal_width']

df.head()

df.columns = ['sepal_length','sepal_width', 'petal_length', 'petal_width']"
2019,Write a Python program to count number of vowels using sets in given string,"# Python3 code to count vowel in
# a string using set

# Function to count vowel
def vowel_count(str):

# Initializing count variable to 0
count = 0

# Creating a set of vowels
vowel = set(""aeiouAEIOU"")

# Loop to traverse the alphabet
# in the given string
for alphabet in str:

# If alphabet is present
# in set vowel
if alphabet in vowel:
count = count + 1

print(""No. of vowels :"", count)

# Driver code
str = ""GeeksforGeeks""

# Function Call
vowel_count(str)","def count_vowels(string):
    vowels = set(['a', 'e', 'i', 'o', 'u'])
    count = 0
    for i in string:
        if i in vowels:
            count += 1
    return count

print(count_vowels(""Python is a high-level general-purpose programming language"")
print(count_vowels(""The quick brown fox jumps over the lazy dog""))
print(count_vowels(""The"
2020,How to extract date from Excel file using Pandas in Python,"# import required module
import pandas as pd;
import re;

# Read excel file and store in to DataFrame
data = pd.read_excel(""date_sample_data.xlsx"");

print(""Original DataFrame"")
data","import pandas as pd

# Read the Excel file
df = pd.read_excel('C:\\Users\\srin\\OneDrive\\Desktop\\Python\\Excel_File.xlsx', sheet_name='Sheet1')

# Extract the date from the Excel file
df['Date'] = pd.to_datetime(df['Date'])

# Print the date
print(df['Date'])

# Print the date in a specific format
print(df['Date'"
2021,Write a Python program to AND operation between Tuples,"# Python3 code to demonstrate working of
# Cross Tuple AND operation
# using map() + lambda

# initialize tuples
test_tup1 = (10, 4, 5)
test_tup2 = (2, 5, 18)

# printing original tuples
print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))

# Cross Tuple AND operation
# using map() + lambda
res = tuple(map(lambda i, j: i & j, test_tup1, test_tup2))

# printing result
print(""Resultant tuple after AND operation : "" + str(res))","def AND(t1, t2):
    return t1 and t2

t1 = (1, 2, 3)
t2 = (4, 5, 6)

print(AND(t1, t2))

""""""

# Solution:

def AND(t1, t2):
    return t1 and t2

t1 = (1, 2, 3)
t2 = (4, 5, 6)

print(AND(t1, t2))"
2022,Write a Python program to Search an Element in a Circular Linked List,"# Python program to Search an Element
# in a Circular Linked List

# Class to define node of the linked list
class Node:
def __init__(self,data):
self.data = data;
self.next = None;

class CircularLinkedList:

# Declaring Circular Linked List
def __init__(self):
self.head = Node(None);
self.tail = Node(None);
self.head.next = self.tail;
self.tail.next = self.head;


# Adds new nodes to the Circular Linked List
def add(self,data):

# Declares a new node to be added
newNode = Node(data);

# Checks if the Circular
# Linked List is empty
if self.head.data is None:

# If list is empty then new node
# will be the first node
# to be added in the Circular Linked List
self.head = newNode;
self.tail = newNode;
newNode.next = self.head;

else:
# If a node is already present then
# tail of the last node will point to
# new node
self.tail.next = newNode;

# New node will become new tail
self.tail = newNode;

# New Tail will point to the head
self.tail.next = self.head;

# Function to search the element in the
# Circular Linked List
def findNode(self,element):

# Pointing the head to start the search
current = self.head;
i = 1;

# Declaring f = 0
f = 0;
# Check if the list is empty or not
if(self.head == None):
print(""Empty list"");
else:
while(True):
# Comparing the elements
# of each node to the
# element to be searched
if(current.data == element):

# If the element is present
# then incrementing f
f += 1;
break;

# Jumping to next node
current = current.next;
i = i + 1;

# If we reach the head
# again then element is not
# present in the list so
# we will break the loop
if(current == self.head):
break;

# Checking the value of f
if(f > 0):
print(""element is present"");
else:
print(""element is not present"");

# Driver Code
if __name__ == '__main__':

# Creating a Circular Linked List
'''
Circular Linked List we will be working on:
1 -> 2 -> 3 -> 4 -> 5 -> 6
'''
circularLinkedList = CircularLinkedList();

#Adding nodes to the list
circularLinkedList.add(1);
circularLinkedList.add(2);
circularLinkedList.add(3);
circularLinkedList.add(4);
circularLinkedList.add(5);
circularLinkedList.add(6);

# Searching for node 2 in the list
circularLinkedList.findNode(2);

#Searching for node in the list
circularLinkedList.findNode(7);","def search(head, x):
    if head is None:
        return False
    if head.data == x:
        return True
    if head.data > x:
        return search(head.next, x)
    return search(head.next, x)

# Driver Code
if __name__ == '__main__':
    head = CircularLinkedList()
    head.append(1)
    head.append(2)
    head.append(3)"
2023,Write a Python program to Odd Frequency Characters,"# Python3 code to demonstrate working of
# Odd Frequency Characters
# Using list comprehension + defaultdict()
from collections import defaultdict

# helper_function
def hlper_fnc(test_str):
cntr = defaultdict(int)
for ele in test_str:
cntr[ele] += 1
return [val for val, chr in cntr.items() if chr % 2 != 0]

# initializing string
test_str = 'geekforgeeks is best for geeks'

# printing original string
print(""The original string is : "" + str(test_str))

# Odd Frequency Characters
# Using list comprehension + defaultdict()
res = hlper_fnc(test_str)

# printing result
print(""The Odd Frequency Characters are : "" + str(res))","def odd_frequency_characters(string):
    odd_characters = []
    for char in string:
        if char.isalpha():
            odd_characters.append(char)
    return ''.join(odd_characters)

print(odd_frequency_characters('Python'))

""""""

def odd_frequency_characters(string):
    odd_characters = []
    for char in string:
        if char.isalpha():
            odd_characters.append(char)"
2024,Write a Python program to Program to print duplicates from a list of integers,"# Python program to print
# duplicates from a list
# of integers
def Repeat(x):
_size = len(x)
repeated = []
for i in range(_size):
k = i + 1
for j in range(k, _size):
if x[i] == x[j] and x[i] not in repeated:
repeated.append(x[i])
return repeated


# Driver Code
list1 = [10, 20, 30, 20, 20, 30, 40,
50, -20, 60, 60, -20, -20]
print (Repeat(list1))

# This code is contributed
# by Sandeep_anand","def duplicate_finder(list):
    duplicate_list = []
    for i in list:
        if list.count(i) > 1:
            duplicate_list.append(i)
    return duplicate_list

print(duplicate_finder([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,"
2025,Write a Python set to check if string is panagram,"# import from string all ascii_lowercase and asc_lower
from string import ascii_lowercase as asc_lower


# function to check if all elements are present or not
def check(s):
return set(asc_lower) - set(s.lower()) == set([])

# driver code
string =""The quick brown fox jumps over the lazy dog""
if(check(string)== True):
print(""The string is a pangram"")
else:
print(""The string isn't a pangram"")","def is_panagram(string):
    return string == string[::-1]

print(is_panagram('abba'))
print(is_panagram('abc'))
print(is_panagram('abcdef'))
print(is_panagram('abcdefghijklmnop'))
print(is_panagram('abcdefghijklmnopqrstuvwxyz'))
print(is_panagram('abcdefghijklmnopqrstuvwxyz"
2026,Write a Python program to Split String of list on K character,"# Python3 code to demonstrate
# Split String of list on K character
# using loop + split()

# Initializing list
test_list = ['Gfg is best', 'for Geeks', 'Preparing']

# printing original list
print(""The original list is : "" + str(test_list))

K = ' '

# Split String of list on K character
# using loop + split()
res = []
for ele in test_list:
sub = ele.split(K)
res.extend(sub)

# printing result
print (""The extended list after split strings : "" + str(res))","def split_string(string, k):
    return string[:k]

print(split_string(""abcdefghijklmnopqrstuvwxyz"", 3))

""""""

def split_string(string, k):
    return string[:k]

print(split_string(""abcdefghijklmnopqrstuvwxyz"", 3))

""""""

def split_string(string, k):
    return string[:k].split()

print"
2027,Write a Python program to Test if string is subset of another,"# Python3 code to demonstrate working of
# Test if string is subset of another
# Using all()

# initializing strings
test_str1 = ""geeksforgeeks""
test_str2 = ""gfks""

# printing original string
print(""The original string is : "" + test_str1)

# Test if string is subset of another
# Using all()
res = all(ele in test_str1 for ele in test_str2)

# printing result
print(""Does string contains all the characters of other list? : "" + str(res))","def isSubset(s,t):
    if len(s)<len(t):
        return False
    for i in range(len(s)):
        if s[i] not in t:
            return False
    return True

print(isSubset(""abc"",""abc""))
print(isSubset(""abc"",""a""))
print(isSubset(""abc"",""a"",0,0))
print(isSubset(""abc"",""a"",0,1))
print(isSubset("""
2028,Write a Python program to Remove Reduntant Substrings from Strings List,"# Python3 code to demonstrate working of
# Remove Reduntant Substrings from Strings List
# Using enumerate() + join() + sort()


# initializing list
test_list = [""Gfg"", ""Gfg is best"", ""Geeks"", ""Gfg is for Geeks""]


# printing original list
print(""The original list : "" + str(test_list))


# using loop to iterate for each string
test_list.sort(key = len)
res = []
for idx, val in enumerate(test_list):

# concatenating all next values and checking for existence
if val not in ', '.join(test_list[idx + 1:]):
res.append(val)


# printing result
print(""The filtered list : "" + str(res))","def remove_redundant_substrings(str1, str2):
    # Write your code here
    str1 = str1.replace(' ', '')
    str2 = str2.replace(' ', '')
    str1 = str1.replace(' ', '')
    str2 = str2.replace(' ', '')
    str1 = str1.replace(' ', '')
    str2 = str2.replace(' ', '')
    str1 = str1.replace(' ', ''"
2029,Extract time from datetime in Python,"# import important module
import datetime
from datetime import datetime

# Create datetime string
datetime_str = ""24AUG2001101010""

# call datetime.strptime to convert
# it into datetime datatype
datetime_obj = datetime.strptime(datetime_str,
""%d%b%Y%H%M%S"")

# It will print the datetime object
print(datetime_obj)

# extract the time from datetime_obj
time = datetime_obj.time()


# it will print time that
# we have extracted from datetime obj
print(time)","import datetime

def solution(start, end):
    start = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')
    end = datetime.datetime.strptime(end, '%Y-%m-%d %H:%M:%S')
    start_time = start.strftime('%H:%M:%S')
    end_time = end.strftime('%H:%M:%S')"
2030,How to lowercase column names in Pandas dataframe in Python,"# Create a simple dataframe

# importing pandas as pd
import pandas as pd

# creating a dataframe
df = pd.DataFrame({'A': ['John', 'bODAY', 'MinA', 'Peter', 'nicky'],
'B': ['masters', 'graduate', 'graduate',
'Masters', 'Graduate'],
'C': [27, 23, 21, 23, 24]})

df","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/iris.csv?raw=true')

df.columns = ['sepal_length','sepal_width', 'petal_length', 'petal_width']

df.head()

df.columns = ['sepal_length','sepal_width', 'petal_length', 'petal_width']

df"
2031,Convert the column type from string to datetime format in Pandas dataframe in Python,"# importing pandas as pd
import pandas as pd


# Creating the dataframe
df = pd.DataFrame({'Date':['11/8/2011', '04/23/2008', '10/2/2019'],
'Event':['Music', 'Poetry', 'Theatre'],
'Cost':[10000, 5000, 15000]})


# Print the dataframe
print(df)


# Now we will check the data type
# of the 'Date' column
df.info()","import pandas as pd

df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data', header=None)

df.columns = ['sepal_length','sepal_width', 'petal_length', 'petal_width']

df['species'] = df['species'].map({'setosa': 0,'versicolor': 1, 'virginica': 2"
2032,Write a Python program to find the character position of Kth word from a list of strings,"# Python3 code to demonstrate working of
# Word Index for K position in Strings List
# Using enumerate() + list comprehension

# initializing list
test_list = [""geekforgeeks"", ""is"", ""best"", ""for"", ""geeks""]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing K
K = 20

# enumerate to get indices of all inner and outer list
res = [ele[0] for sub in enumerate(test_list) for ele in enumerate(sub[1])]

# getting index of word
res = res[K]

# printing result
print(""Index of character at Kth position word : "" + str(res))","def find_word(word, word_list):
    for i in range(len(word_list)):
        if word_list[i] == word:
            return i
    return -1

word = ""python""
word_list = [""python"", ""java"", ""kotlin"", ""javascript""]

print(find_word(word, word_list))

""""""

# Solution 1

def find_word(word, word_list):
    for"
2033,How to access different rows of a multidimensional NumPy array in Python,"# Importing Numpy module
import numpy as np

# Creating a 3X3 2-D Numpy array
arr = np.array([[10, 20, 30],
[40, 5, 66],
[70, 88, 94]])

print(""Given Array :"")
print(arr)

# Access the First and Last rows of array
res_arr = arr[[0,2]]
print(""\nAccessed Rows :"")
print(res_arr)","import numpy as np

# Create a NumPy array with the following data:
x = np.array([[1, 2, 3], [4, 5, 6]])

# Create a NumPy array with the following data:
y = np.array([[7, 8, 9], [10, 11, 12]])

# Create a NumPy array with the following data:
z = np.array([[13, 14, 15], [16, 17, 18]])

#"
2034,Scientific GUI Calculator using Tkinter in Python,"from tkinter import *
import math
import tkinter.messagebox","import tkinter as tk
from tkinter import ttk

def main():
    root = tk.Tk()
    root.title(""Scientific Calculator"")
    root.geometry(""300x300"")
    root.resizable(False, False)
    root.configure(bg=""white"")
    
    # Create a label widget
    label = ttk.Label(root, text=""Scientific Calculator"", font=(""Arial"", 20))
    label.pack(pady=20)"
2035,Matrix Multiplication in NumPy in Python,"# importing the module
import numpy as np

# creating two matrices
p = [[1, 2], [2, 3]]
q = [[4, 5], [6, 7]]
print(""Matrix p :"")
print(p)
print(""Matrix q :"")
print(q)

# computing product
result = np.dot(p, q)

# printing the result
print(""The matrix multiplication is :"")
print(result)","import numpy as np

def matrix_multiply(A, B):
    """"""
    A : n x m matrix
    B : m x n matrix
    
    Returns the result of A A'B
    """"""
    # initialize result
    result = np.zeros(A.shape)
    
    # iterate over rows
    for i in range(A.shape[0]):
        # iterate over columns
        for j in range(B.shape[1]):
            # iterate"
2036,Scraping And Finding Ordered Words In A Dictionary using Python,"# Python program to find ordered words
import requests

# Scrapes the words from the URL below and stores
# them in a list
def getWords():

# contains about 2500 words
url = ""http://www.puzzlers.org/pub/wordlists/unixdict.txt""
fetchData = requests.get(url)

# extracts the content of the webpage
wordList = fetchData.content

# decodes the UTF-8 encoded text and splits the
# string to turn it into a list of words
wordList = wordList.decode(""utf-8"").split()

return wordList


# function to determine whether a word is ordered or not
def isOrdered():

# fetching the wordList
collection = getWords()

# since the first few of the elements of the
# dictionary are numbers, getting rid of those
# numbers by slicing off the first 17 elements
collection = collection[16:]
word = ''

for word in collection:
result = 'Word is ordered'
i = 0
l = len(word) - 1

if (len(word) < 3): # skips the 1 and 2 lettered strings
continue

# traverses through all characters of the word in pairs
while i < l:
if (ord(word[i]) > ord(word[i+1])):
result = 'Word is not ordered'
break
else:
i += 1

# only printing the ordered words
if (result == 'Word is ordered'):
print(word,': ',result)


# execute isOrdered() function
if __name__ == '__main__':
isOrdered()","import urllib.request
import re

url = ""http://www.python.org/~guido/python-exercises/""

# Open the URL
webpage = urllib.request.urlopen(url)

# Read the HTML
data = webpage.read()

# Parse the HTML
soup = BeautifulSoup(data, ""html.parser"")

# Retrieve all of the anchor tags
tags = soup('a')

# Loop over the tags
for tag"
2037,Write a Python program to Reverse All Strings in String List,"# Python3 code to demonstrate
# Reverse All Strings in String List
# using list comprehension

# initializing list
test_list = [""geeks"", ""for"", ""geeks"", ""is"", ""best""]

# printing original list
print (""The original list is : "" + str(test_list))

# using list comprehension
# Reverse All Strings in String List
res = [i[::-1] for i in test_list]

# printing result
print (""The reversed string list is : "" + str(res))","def reverse_all_strings(s):
    # your code goes here
    return s[::-1]

# driver code
s = ""hello world""
print(reverse_all_strings(s))

""""""

# Solution

def reverse_all_strings(s):
    # your code goes here
    return s[::-1]

# driver code
s = ""hello world""
print(reverse_all_strings(s))"
2038,Write a Python program to Count Strings with substring String List,"# Python code to demonstrate
# Count Strings with substring String List
# using list comprehension + len()

# initializing list
test_list = ['GeeksforGeeks', 'Geeky', 'Computers', 'Algorithms']

# printing original list
print (""The original list is : "" + str(test_list))

# initializing substring
subs = 'Geek'

# using list comprehension + len()
# Count Strings with substring String List
res = len([i for i in test_list if subs in i])

# printing result
print (""All strings count with given substring are : "" + str(res))","def count_substring(string, sub_string):
    count = 0
    for i in range(len(string)):
        if string[i:i+len(sub_string)] == sub_string:
            count += 1
    return count

# Enter your code here. Read input from STDIN. Print output to STDOUT
string, sub_string = input(), input()
count = count_substring(string, sub_string)
print(count)

'''

# Enter"
2039,Write a Python program to Remove words containing list characters,"# Python3 code to demonstrate
# Remove words containing list characters
# using list comprehension + all()
from itertools import groupby

# initializing list
test_list = ['gfg', 'is', 'best', 'for', 'geeks']

# initializing char list
char_list = ['g', 'o']

# printing original list
print (""The original list is : "" + str(test_list))

# printing character list
print (""The character list is : "" + str(char_list))

# Remove words containing list characters
# using list comprehension + all()
res = [ele for ele in test_list if all(ch not in ele for ch in char_list)]

# printing result
print (""The filtered strings are : "" + str(res))","import re

def remove_words(text, words):
    for word in words:
        text = text.replace(word, """")
    return text

print(remove_words(""Python is a programming language"", [""Python"", ""programming""]))

""""""

# Solution 1

def remove_words(text, words):
    for word in words:
        if word in text:
            text = text.replace(word, """")
    return text

print(remove_words(""Python is a"
2040,Write a Python program to Convert JSON to string,"import json


# create a sample json


a = {""name"" : ""GeeksforGeeks"", ""Topic"" : ""Json to String"", ""Method"": 1}


# Convert JSON to String


y = json.dumps(a)


print(y)
print(type(y))","import json

def convert_json_to_string(json_data):
    return json.dumps(json_data)

def main():
    json_data = {
        ""name"": ""John"",
        ""age"": 30,
        ""city"": ""New York""
    }
    print(convert_json_to_string(json_data))

if __name__ == ""__main__"":
    main()

# OUTPUT:
# {
#   ""name"": ""John"","
2041,Write a Python Program for Rabin-Karp Algorithm for Pattern Searching,"# Following program is the python implementation of
# Rabin Karp Algorithm given in CLRS book

# d is the number of characters in the input alphabet
d = 256

# pat -> pattern
# txt -> text
# q -> A prime number

def search(pat, txt, q):
M = len(pat)
N = len(txt)
i = 0
j = 0
p = 0 # hash value for pattern
t = 0 # hash value for txt
h = 1

# The value of h would be ""pow(d, M-1)% q""
for i in xrange(M-1):
h = (h * d)% q

# Calculate the hash value of pattern and first window
# of text
for i in xrange(M):
p = (d * p + ord(pat[i]))% q
t = (d * t + ord(txt[i]))% q

# Slide the pattern over text one by one
for i in xrange(N-M + 1):
# Check the hash values of current window of text and
# pattern if the hash values match then only check
# for characters on by one
if p == t:
# Check for characters one by one
for j in xrange(M):
if txt[i + j] != pat[j]:
break

j+= 1
# if p == t and pat[0...M-1] = txt[i, i + 1, ...i + M-1]
if j == M:
print ""Pattern found at index "" + str(i)

# Calculate hash value for next window of text: Remove
# leading digit, add trailing digit
if i < N-M:
t = (d*(t-ord(txt[i])*h) + ord(txt[i + M]))% q

# We might get negative values of t, converting it to
# positive
if t < 0:
t = t + q

# Driver program to test the above function
txt = ""GEEKS FOR GEEKS""
pat = ""GEEK""
q = 101 # A prime number
search(pat, txt, q)

# This code is contributed by Bhavya Jain","def rabin_karp(pattern, text):
    # Your code here
    pass

""""""

# Solution 1

def rabin_karp(pattern, text):
    # Your code here
    pass

# Solution 2

def rabin_karp(pattern, text):
    # Your code here
    pass

# Solution 3

def rabin_karp(pattern, text):
    # Your code here
    pass

# Solution 4

def"
2042,Write a Python program to Uncommon elements in Lists of List,"# Python 3 code to demonstrate
# Uncommon elements in List
# using naive method


# initializing lists
test_list1 = [ [1, 2], [3, 4], [5, 6] ]
test_list2 = [ [3, 4], [5, 7], [1, 2] ]


# printing both lists
print (""The original list 1 : "" + str(test_list1))
print (""The original list 2 : "" + str(test_list2))


# using naive method
# Uncommon elements in List
res_list = []
for i in test_list1:
if i not in test_list2:
res_list.append(i)
for i in test_list2:
if i not in test_list1:
res_list.append(i)

# printing the uncommon
print (""The uncommon of two lists is : "" + str(res_list))","def uncommon_elements(l1, l2):
    l1.sort()
    l2.sort()
    i = 0
    j = 0
    while i < len(l1) and j < len(l2):
        if l1[i] == l2[j]:
            i += 1
            j += 1
        else:
            i += 1
    return l1[i:], l2[j:]

l1 = [1, 2, 3, 4, 5,"
2043,Write a Python program to split and join a string,"# Python program to split a string and
# join it using different delimiter

def split_string(string):

# Split the string based on space delimiter
list_string = string.split(' ')

return list_string

def join_string(list_string):

# Join the string based on '-' delimiter
string = '-'.join(list_string)

return string

# Driver Function
if __name__ == '__main__':
string = 'Geeks for Geeks'

# Splitting a string
list_string = split_string(string)
print(list_string)

# Join list of strings into one
new_string = join_string(list_string)
print(new_string)","def split_and_join(str):
    return str.split()

print(split_and_join('hello world'))

""""""

def split_and_join(str):
    return str.split()

print(split_and_join('hello world'))

""""""

def split_and_join(str):
    return str.split()

print(split_and_join('hello world'))

""""""

def split_and_join(str):
    return str"
2044,Create a Numpy array with random values | Python,"# Python Program to create numpy array
# filled with random values
import numpy as geek

b = geek.empty(2, dtype = int)
print(""Matrix b : \n"", b)

a = geek.empty([2, 2], dtype = int)
print(""\nMatrix a : \n"", a)","import numpy as np

np.random.seed(42)

x = np.random.randn(3, 2)

print(x)

print(x.shape)

print(x.dtype)

print(x.size)

print(x.itemsize)

print(x.nbytes)

print(x.dtype)

print(x.nbytes / x.itemsize)

print(x.nbytes / x.itemsize)"
2045,Write a Python program to Numpy np.polygrid3d() method,"# Python program explaining
# numpy.polygrid3d() method

# importing numpy as np

import numpy as np
from numpy.polynomial.polynomial import polygrid3d

# Input polynomial series coefficients
c = np.array([[1, 3, 5], [2, 4, 6], [10, 11, 12]])

# using np.polygrid3d() method
ans = polygrid3d([7, 9], [8, 10], [5, 6], c)
print(ans)","import numpy as np

x = np.arange(0, 10, 0.1)
y = np.arange(0, 10, 0.1)
z = np.arange(0, 10, 0.1)

X, Y, Z = np.meshgrid(x, y, z)

# print(X)
# print(Y)
# print(Z)

# print(np.polygrid3d(X, Y, Z))"
2046,Write a Python program to Replace multiple words with K,"# Python3 code to demonstrate working of
# Replace multiple words with K
# Using join() + split() + list comprehension

# initializing string
test_str = 'Geeksforgeeks is best for geeks and CS'

# printing original string
print(""The original string is : "" + str(test_str))

# initializing word list
word_list = [""best"", 'CS', 'for']

# initializing replace word
repl_wrd = 'gfg'

# Replace multiple words with K
# Using join() + split() + list comprehension
res = ' '.join([repl_wrd if idx in word_list else idx for idx in test_str.split()])

# printing result
print(""String after multiple replace : "" + str(res))","def replace_multiple_words(s, words):
    for word in words:
        s = s.replace(word, ""K"" + word)
    return s

print(replace_multiple_words(""Python is a programming language"", [""Python"", ""programming""]))

""""""

def replace_multiple_words(s, words):
    for word in words:
        s = s.replace(word, ""K"" + word)
    return s

print(replace_multiple_words(""Python is a"
2047,Reindexing in Pandas DataFrame in Python,"# import numpy and pandas module
import pandas as pd
import numpy as np


column=['a','b','c','d','e']
index=['A','B','C','D','E']


# create a dataframe of random values of array
df1 = pd.DataFrame(np.random.rand(5,5),
columns=column, index=index)


print(df1)


print('\n\nDataframe after reindexing rows: \n',
df1.reindex(['B', 'D', 'A', 'C', 'E']))","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5],
                   'col2': [10, 20, 30, 40, 50]})

df.index = ['a', 'b', 'c', 'd', 'e']

print(df)

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5],
#                   'col2': [10, 20"
2048,Quote Guessing Game using Web Scraping in Python,"import requests
from bs4 import BeautifulSoup
from csv import writer
from time import sleep
from random import choice

# list to store scraped data
all_quotes = []

# this part of the url is constant
base_url = ""http://quotes.toscrape.com/""

# this part of the url will keep changing
url = ""/page/1""

while url:

# concatenating both urls
# making request
res = requests.get(f""{base_url}{url}"")
print(f""Now Scraping{base_url}{url}"")
soup = BeautifulSoup(res.text, ""html.parser"")

# extracting all elements
quotes = soup.find_all(class_=""quote"")

for quote in quotes:
all_quotes.append({
""text"": quote.find(class_=""text"").get_text(),
""author"": quote.find(class_=""author"").get_text(),
""bio-link"": quote.find(""a"")[""href""]
})
next_btn = soup.find(_class=""next"")
url = next_btn.find(""a"")[""href""] if next_btn else None
sleep(2)

quote = choice(all_quotes)
remaining_guesses = 4
print(""Here's a quote: "")
print(quote[""text""])

guess = ''
while guess.lower() != quote[""author""].lower() and remaining_guesses > 0:
guess = input(
f""Who said this quote? Guesses remaining {remaining_guesses}"")

if guess == quote[""author""]:
print(""CONGRATULATIONS!!! YOU GOT IT RIGHT"")
break
remaining_guesses -= 1

if remaining_guesses == 3:
res = requests.get(f""{base_url}{quote['bio-link']}"")
soup = BeautifulSoup(res.text, ""html.parser"")
birth_date = soup.find(class_=""author-born-date"").get_text()
birth_place = soup.find(class_=""author-born-location"").get_text()
print(
f""Here's a hint: The author was born on {birth_date}{birth_place}"")

elif remaining_guesses == 2:
print(
f""Here's a hint: The author's first name starts with: {quote['author'][0]}"")

elif remaining_guesses == 1:
last_initial = quote[""author""].split("" "")[1][0]
print(
f""Here's a hint: The author's last name starts with: {last_initial}"")

else:
print(
f""Sorry, you ran out of guesses. The answer was {quote['author']}"")","import random

def guess(x):
    random_number = random.randint(1, x)
    guess = 0
    while guess!= random_number:
        guess = int(input(f""Guess a number between 1 and {x}: ""))
        if guess < random_number:
            print(""Sorry, guess again. Too low."")
        elif guess > random_number:
            print(""Sorry, guess again. Too high."")
    print(f""Yay! You guessed the"
2049,Scraping Indeed Job Data Using Python,"# import module
import requests
from bs4 import BeautifulSoup


# user define function
# Scrape the data
# and get in string
def getdata(url):
r = requests.get(url)
return r.text

# Get Html code using parse
def html_code(url):

# pass the url
# into getdata function
htmldata = getdata(url)
soup = BeautifulSoup(htmldata, 'html.parser')

# return html code
return(soup)

# filter job data using
# find_all function
def job_data(soup):

# find the Html tag
# with find()
# and convert into string
data_str = """"
for item in soup.find_all(""a"", class_=""jobtitle turnstileLink""):
data_str = data_str + item.get_text()
result_1 = data_str.split(""\n"")
return(result_1)

# filter company_data using
# find_all function


def company_data(soup):

# find the Html tag
# with find()
# and convert into string
data_str = """"
result = """"
for item in soup.find_all(""div"", class_=""sjcl""):
data_str = data_str + item.get_text()
result_1 = data_str.split(""\n"")

res = []
for i in range(1, len(result_1)):
if len(result_1[i]) > 1:
res.append(result_1[i])
return(res)


# driver nodes/main function
if __name__ == ""__main__"":

# Data for URL
job = ""data+science+internship""
Location = ""Noida%2C+Uttar+Pradesh""
url = ""https://in.indeed.com/jobs?q=""+job+""&l=""+Location

# Pass this URL into the soup
# which will return
# html string
soup = html_code(url)

# call job and company data
# and store into it var
job_res = job_data(soup)
com_res = company_data(soup)

# Traverse the both data
temp = 0
for i in range(1, len(job_res)):
j = temp
for j in range(temp, 2+temp):
print(""Company Name and Address : "" + com_res[j])

temp = j
print(""Job : "" + job_res[i])
print(""-----------------------------"")","import requests
from bs4 import BeautifulSoup

url = ""https://www.indeed.com/jobs?q=python&l=San%20Francisco,%20CA&radius=100&start=0""

r = requests.get(url)

soup = BeautifulSoup(r.text, 'html.parser')

# print(soup.prettify())

# print(soup.title)

# print(soup.title.string)

# print(soup"
2050,Adding and Subtracting Matrices in Python,"# importing numpy as np
import numpy as np


# creating first matrix
A = np.array([[1, 2], [3, 4]])

# creating second matrix
B = np.array([[4, 5], [6, 7]])

print(""Printing elements of first matrix"")
print(A)
print(""Printing elements of second matrix"")
print(B)

# adding two matrix
print(""Addition of two matrix"")
print(np.add(A, B))","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
B = np.array([[10, 11, 12], [13, 14, 15], [16, 17, 18]])

print(A)
print(B)

print(A-B)
print(A+B)

# Output:
# [[1 2 3]
#  [4 5 6]
#  [7 8 9]]"
2051,How to read all CSV files in a folder in Pandas in Python,"# import necessary libraries
import pandas as pd
import os
import glob


# use glob to get all the csv files
# in the folder
path = os.getcwd()
csv_files = glob.glob(os.path.join(path, ""*.csv""))


# loop over the list of csv files
for f in csv_files:

# read the csv file
df = pd.read_csv(f)

# print the location and filename
print('Location:', f)
print('File Name:', f.split(""\\"")[-1])

# print the content
print('Content:')
display(df)
print()","import pandas as pd

# Read all CSV files in a folder in Pandas in Python
df = pd.read_csv('/Users/srinivasan/Desktop/Python/data/data.csv')

# Print the first 5 rows of the dataframe
print(df.head())

# Print the last 5 rows of the dataframe
print(df.tail())

# Print the number of rows in the dataframe
print(df.shape)

# Print the number of columns"
2052,Minimum of two numbers in Python,"# Python program to find the
# minimum of two numbers


def minimum(a, b):

if a <= b:
return a
else:
return b

# Driver code
a = 2
b = 4
print(minimum(a, b))","def solution(a, b):
    if a < b:
        return a
    else:
        return b

print(solution(2, 3))

""""""

def solution(a, b):
    if a < b:
        return a
    else:
        return b

print(solution(2, 3))

""""""

def solution(a, b):
    if a < b:
        return a
    else:
        return b

print(solution(2, 3))"
2053,String slicing in Python to rotate a string,"# Function to rotate string left and right by d length

def rotate(input,d):

# slice string in two parts for left and right
Lfirst = input[0 : d]
Lsecond = input[d :]
Rfirst = input[0 : len(input)-d]
Rsecond = input[len(input)-d : ]

# now concatenate two parts together
print (""Left Rotation : "", (Lsecond + Lfirst) )
print (""Right Rotation : "", (Rsecond + Rfirst))

# Driver program
if __name__ == ""__main__"":
input = 'GeeksforGeeks'
d=2
rotate(input,d)","def rotate(s):
    return s[::-1]

print(rotate(""abcdefghijklmnopqrstuvwxyz""))

"""""""
2054,Find sum and average of List in Python,"# Python program to find the sum
# and average of the list

L = [4, 5, 1, 2, 9, 7, 10, 8]


# variable to store the sum of
# the list
count = 0

# Finding the sum
for i in L:
count += i

# divide the total elements by
# number of elements
avg = count/len(L)

print(""sum = "", count)
print(""average = "", avg)","def sum_and_average(lst):
    sum = 0
    for i in lst:
        sum += i
    average = sum / len(lst)
    return sum, average

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
sum, average = sum_and_average(lst)
print(sum, average)

""""""

def sum_and_average(lst):
    sum = 0
    for i in lst:"
2055,Write a Python program to find second largest number in a list,"# Python program to find second largest
# number in a list


# list of numbers - length of
# list should be at least 2
list1 = [10, 20, 4, 45, 99]


mx=max(list1[0],list1[1])
secondmax=min(list1[0],list1[1])
n =len(list1)
for i in range(2,n):
if list1[i]>mx:
secondmax=mx
mx=list1[i]
elif list1[i]>secondmax and \
mx != list1[i]:
secondmax=list1[i]


print(""Second highest number is : "",\
str(secondmax))","def second_largest(numbers):
    numbers.sort()
    return numbers[1]

print(second_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def second_largest(numbers):
    numbers.sort()
    return numbers[1]

print(second_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def second_largest"
2056,Write a Python program to Loop through files of certain extensions,"# importing the library
import os

# giving directory name
dirname = 'D:\\AllData'

# giving file extension
ext = ('.exe', 'jpg')

# iterating over all files
for files in os.listdir(dirname):
if files.endswith(ext):
print(files) # printing file name of desired extension
else:
continue","def solution(extension):
    import os
    import glob
    import re
    import sys
    import time
    import datetime
    import subprocess
    import shutil
    import zipfile
    import tarfile
    import requests
    import json
    import urllib.request
    import urllib.parse
    import urllib.error
    import urllib.request
    import urllib.parse
    import urllib.error
    import urllib.request"
2057,Write a Python program to print all odd numbers in a range,"# Python program to print odd Numbers in given range

start, end = 4, 19

# iterating each number in list
for num in range(start, end + 1):

# checking condition
if num % 2 != 0:
print(num, end = "" "")","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution"
2058,Write a Python program to Multiply 2d numpy array corresponding to 1d array,"# Python code to demonstrate
# multiplication of 2d array
# with 1d array

import numpy as np

ini_array1 = np.array([[1, 2, 3], [2, 4, 5], [1, 2, 3]])
ini_array2 = np.array([0, 2, 3])

# printing initial arrays
print(""initial array"", str(ini_array1))

# Multiplying arrays
result = ini_array1 * ini_array2[:, np.newaxis]

# printing result
print(""New resulting array: "", result)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

c = a * b
print(c)

""""""

# Solution

import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8"
2059,Write a Python program to Replace all occurrences of a substring in a string,"# Python3 code to demonstrate working of
# Swap Binary substring
# Using translate()

# initializing string
test_str = ""geeksforgeeks""

# printing original string
print(""The original string is : "" + test_str)

# Swap Binary substring
# Using translate()
temp = str.maketrans(""geek"", ""abcd"")
test_str = test_str.translate(temp)

# printing result
print(""The string after swap : "" + str(test_str))","def replace_substring(string, substring):
    return string.replace(substring, """")

# driver code
string = ""This is a string""
substring = ""is""
print(replace_substring(string, substring))

""""""

# Solution

def replace_substring(string, substring):
    return string.replace(substring, """")

# Driver Code
string = ""This is a string""
substring = ""is""
print("
2060,Convert multiple JSON files to CSV Python,"# importing packages
import pandas as pd

# load json file using pandas
df1 = pd.read_json('file1.json')

# view data
print(df1)

# load json file using pandas
df2 = pd.read_json('file2.json')

# view data
print(df2)

# use pandas.concat method
df = pd.concat([df1,df2])

# view the concatenated dataframe
print(df)

# convert dataframe to csv file
df.to_csv(""CSV.csv"",index=False)

# load the resultant csv file
result = pd.read_csv(""CSV.csv"")

# and view the data
print(result)","python solution.py

""""""

import json
import csv
import os

def main():
    """"""
    Main function to run the program
    """"""
    # Get the path to the directory containing the JSON files
    directory = os.path.dirname(os.path.abspath(__file__))
    # Get the path to the directory containing the CSV files
    directory = os.path.join(directory, ""csv"")
    # Create the CSV files
    csv_files = [os.path.join"
2061,Create Pandas Series using NumPy functions in Python,"# import pandas and numpy
import pandas as pd
import numpy as np

# series with numpy linspace()
ser1 = pd.Series(np.linspace(3, 33, 3))
print(ser1)

# series with numpy linspace()
ser2 = pd.Series(np.linspace(1, 100, 10))
print(""\n"", ser2)
","import pandas as pd

# Create a Pandas Series using NumPy functions in Python

# Create a Pandas Series using NumPy functions in Python

# Create a Pandas Series using NumPy functions in Python

# Create a Pandas Series using NumPy functions in Python

# Create a Pandas Series using NumPy functions in Python

# Create a Pandas Series using NumPy functions in Python

# Create a Pandas Series using NumPy functions in Python

# Create a Pandas Series using NumPy functions in Python"
2062,Write a Python program to capitalize the first and last character of each word in a string,"# Python program to capitalize
# first and last character of
# each word of a String


# Function to do the same
def word_both_cap(str):

#lamda function for capitalizing the
# first and last letter of words in
# the string
return ' '.join(map(lambda s: s[:-1]+s[-1].upper(),
s.title().split()))


# Driver's code
s = ""welcome to geeksforgeeks""
print(""String before:"", s)
print(""String after:"", word_both_cap(str))","def capitalize_first_and_last_char(string):
    first_char = string[0]
    last_char = string[-1]
    return first_char.upper() + last_char.upper()

print(capitalize_first_and_last_char(""Hello World""))

""""""

def capitalize_first_and_last_char(string):
    first_char = string[0]
    last_char = string[-1]
    return first"
2063,Write a Python program to Queue using Doubly Linked List,"# A complete working Python program to demonstrate all
# Queue operations using doubly linked list

# Node class
class Node:

# Function to initialise the node object
def __init__(self, data):
self.data = data # Assign data
self.next = None # Initialize next as null
self.prev = None # Initialize prev as null


# Queue class contains a Node object
class Queue:

# Function to initialize head
def __init__(self):
self.head = None
self.last=None


# Function to add an element data in the Queue
def enqueue(self, data):
if self.last is None:
self.head =Node(data)
self.last =self.head
else:
self.last.next = Node(data)
self.last.next.prev=self.last
self.last = self.last.next



# Function to remove first element and return the element from the queue
def dequeue(self):

if self.head is None:
return None
else:
temp= self.head.data
self.head = self.head.next
self.head.prev=None
return temp


# Function to return top element in the queue
def first(self):

return self.head.data


# Function to return the size of the queue
def size(self):

temp=self.head
count=0
while temp is not None:
count=count+1
temp=temp.next
return count


# Function to check if the queue is empty or not
def isEmpty(self):

if self.head is None:
return True
else:
return False


# Function to print the stack
def printqueue(self):

print(""queue elements are:"")
temp=self.head
while temp is not None:
print(temp.data,end=""->"")
temp=temp.next


# Code execution starts here
if __name__=='__main__':

# Start with the empty queue
queue = Queue()

print(""Queue operations using doubly linked list"")

# Insert 4 at the end. So queue becomes 4->None
queue.enqueue(4)

# Insert 5 at the end. So queue becomes 4->5None
queue.enqueue(5)

# Insert 6 at the end. So queue becomes 4->5->6->None
queue.enqueue(6)

# Insert 7 at the end. So queue becomes 4->5->6->7->None
queue.enqueue(7)

# Print the queue
queue.printqueue()

# Print the first element
print(""\nfirst element is "",queue.first())

# Print the queue size
print(""Size of the queue is "",queue.size())

# remove the first element
queue.dequeue()

# remove the first element
queue.dequeue()

# first two elements are removed
# Print the queue
print(""After applying dequeue() two times"")
queue.printqueue()

# Print True if queue is empty else False
print(""\nqueue is empty:"",queue.isEmpty())","def Queue(size):
    queue = []
    for i in range(size):
        queue.append(i)
    return queue

def printQueue(queue):
    for i in range(len(queue)):
        print(queue[i], end="" "")
    print()

def isEmpty(queue):
    if len(queue) == 0:
        return True
    else:
        return False

def enqueue(queue, item):
    queue.append(item"
2064,Create a new column in Pandas DataFrame based on the existing columns in Python,"# importing pandas as pd
import pandas as pd

# Creating the DataFrame
df = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/2011'],
'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],
'Cost':[10000, 5000, 15000, 2000]})

# Print the dataframe
print(df)","import pandas as pd

df = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""B"": [10, 20, 30, 40, 50]})

# Solution:
df[""C""] = df[""A""] * 2

# Solution:
df[""C""] = df[""A""] * 2

# Solution:
df[""C""] = df[""A""] * 2

# Solution:
df[""C""] = df[""A""] *"
2065,Write a Python Code for time Complexity plot of Heap Sort,"# Python Code for Implementation and running time Algorithm
# Complexity plot of Heap Sort
# by Ashok Kajal
# This python code intends to implement Heap Sort Algorithm
# Plots its time Complexity on list of different sizes


# ---------------------Important Note -------------------
# numpy, time and matplotlib.pyplot are required to run this code
import time
from numpy.random import seed
from numpy.random import randint
import matplotlib.pyplot as plt




# find left child of node i
def left(i):
return 2 * i + 1


# find right child of node i
def right(i):
return 2 * i + 2


# calculate and return array size
def heapSize(A):
return len(A)-1




# This function takes an array and Heapyfies
# the at node i
def MaxHeapify(A, i):
# print(""in heapy"", i)
l = left(i)
r = right(i)

# heapSize = len(A)
# print(""left"", l, ""Rightt"", r, ""Size"", heapSize)
if l<= heapSize(A) and A[l] > A[i] :
largest = l
else:
largest = i
if r<= heapSize(A) and A[r] > A[largest]:
largest = r
if largest != i:
# print(""Largest"", largest)
A[i], A[largest]= A[largest], A[i]
# print(""List"", A)
MaxHeapify(A, largest)

# this function makes a heapified array
def BuildMaxHeap(A):
for i in range(int(heapSize(A)/2)-1, -1, -1):
MaxHeapify(A, i)

# Sorting is done using heap of array
def HeapSort(A):
BuildMaxHeap(A)
B = list()
heapSize1 = heapSize(A)
for i in range(heapSize(A), 0, -1):
A[0], A[i]= A[i], A[0]
B.append(A[heapSize1])
A = A[:-1]
heapSize1 = heapSize1-1
MaxHeapify(A, 0)



# randomly generates list of different
# sizes and call HeapSort function
elements = list()
times = list()
for i in range(1, 10):


# generate some integers
a = randint(0, 1000 * i, 1000 * i)
# print(i)
start = time.clock()
HeapSort(a)
end = time.clock()


# print(""Sorted list is "", a)
print(len(a), ""Elements Sorted by HeapSort in "", end-start)
elements.append(len(a))
times.append(end-start)


plt.xlabel('List Length')
plt.ylabel('Time Complexity')
plt.plot(elements, times, label ='Heap Sort')
plt.grid()
plt.legend()
plt.show()
# This code is contributed by Ashok Kajal","def heap_sort(arr):
    for i in range(len(arr)//2, -1, -1):
        heapify(arr, i, len(arr))
    for i in range(len(arr) - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, 0, i)

def heapify(arr, i, n):
    l = 2 * i + 1
    r"
2066,Calculate the sum of the diagonal elements of a NumPy array in Python,"# importing Numpy package
import numpy as np

# creating a 3X3 Numpy matrix
n_array = np.array([[55, 25, 15],
[30, 44, 2],
[11, 45, 77]])

# Displaying the Matrix
print(""Numpy Matrix is:"")
print(n_array)

# calculating the Trace of a matrix
trace = np.trace(n_array)


print(""\nTrace of given 3X3 matrix:"")
print(trace)",">>> import numpy as np
>>> a = np.array([[1, 2, 3], [4, 5, 6]])
>>> a.diagonal()
array([1, 4, 5, 6])

""""""

# Import NumPy
import numpy as np

# Create a NumPy array
a = np.array([[1, 2, 3], [4, 5, 6]])

# Print the diagonal elements of the array
print(a.diagonal())"
2067,Menu Driven Python program for opening the required software Application,"# import os library
import os


# infinite while loop
while True:
print(""Hello! user choose your tool"")
print(""Choose your tool :-\n"")
print(""-> mousepad"")
print(""-> chrome"")
print(""-> vlc"")
print(""-> virtualbox"")
print(""-> camera"")
print(""-> telegram"")
print(""-> firefox"")
print(""-> codeblocks"")
print(""-> screenshot"")
print(""-> task-manager"")
print(""-> libreoffice impress / presentation"")
print(""-> libreoffice writer / text editor / notepad"")
print(""-> libreoffice clac / spreadsheets"")
print(""-> libreoffice"")
print(""-> jupyter notebook\n"")
print(""chat with system:-"",end=' ')

# take input from user
p = input()

# check conditions
if ((""do not"" in p) or (""dont"" in p) or (""don't"" in p)):
print(""OK user\n"")

elif ((""open"" in p) or (""start"" in p) or (""run"" in p) or (""execute"" in p) or (""launch"" in p) or (""activate"" in p)):

if ((""mousepad"" in p) or (""editor"" in p)):

# run mention application
os.system(""mousepad"")

elif ((""vlc"" in p) or (""media player"" in p)):
os.system(""vlc"")

elif ((""virtualbox"" in p) or (""virtual machine"" in p) or (""virtual tool"" in p)):
os.system(""virtualbox"")

elif ((""camera"" in p) or (""cheese"" in p)):
os.system(""cheese"")

elif (""telegram"" in p):
os.system(""telegram-desktop"")

elif (""codeblocks"" in p):
os.system(""codeblocks"")

elif (""taskmanager"" in p):
os.system(""xfce4-taskmanager"")

elif (""screenshot"" in p):
os.system(""xfce4-screenshooter"")

elif ((""jupyter"" in p) or (""notebook"" in p)):
os.system(""jupyter notebook"")

elif ((""libreoffice impress"" in p) or (""presentation tool"" in p)):
os.system(""libreoffice --impress"")

elif ((""libreoffice writer"" in p) or (""text editor"" in p)):
os.system(""libreoffice --writer"")


elif (""notepad"" in p):
os.system(""notepad"")

elif ((""libreoffice calc"" in p) or (""spreadsheet"" in p)):
os.system(""libreoffice --calc"")

elif (""libreoffice"" in p):
os.system(""libreoffice"")

elif (""chrome"" in p):
os.system(""google-chrome-stable"")

elif ((""firefox"" in p) or (""mozilla"" in p)):
os.system(""firefox"")

else :
print(""don't support"")

# terminating infinite while loop
elif ((""quit"" in p) or (""exit"" in p) or (""stop"" in p) or (""close"" in p) or (""deactivate"" in p) or (""terminate"" in p)):
print(""Thnank You!"")
break

else :
print(""don't support"")","1. Open the file
2. Read the file
3. Print the content of the file
4. Close the file
5. Exit

""""""

# 1. Open the file
file = open(""file.txt"", ""r"")

# 2. Read the file
content = file.read()

# 3. Print the content of the file
print(content)

# 4. Close the file
file.close()

# 5. Exit"
2068,How to create an empty and a full NumPy array in Python,"# python program to create
# Empty and Full Numpy arrays

import numpy as np


# Create an empty array
empa = np.empty((3, 4), dtype=int)
print(""Empty Array"")
print(empa)

# Create a full array
flla = np.full([3, 3], 55, dtype=int)
print(""\n Full Array"")
print(flla)","import numpy as np

a = np.array([1, 2, 3, 4, 5])
print(a)

b = np.array([[1, 2, 3, 4, 5],
              [6, 7, 8, 9, 10]])
print(b)

c = np.array([[1, 2, 3, 4, 5],
              [6, 7, 8, 9, 10]])
print(c)

d = np.array([[1,"
2069,Write a Python program to Mirror Image of String,"# Python3 code to demonstrate working of
# Mirror Image of String
# Using Mirror Image of String

# initializing strings
test_str = 'void'

# printing original string
print(""The original string is : "" + str(test_str))

# initializing mirror dictionary
mir_dict = {'b':'d', 'd':'b', 'i':'i', 'o':'o', 'v':'v', 'w':'w', 'x':'x'}
res = ''

# accessing letters from dictionary
for ele in test_str:
if ele in mir_dict:
res += mir_dict[ele]

# if any character not present, flagging to be invalid
else:
res = ""Not Possible""
break

# printing result
print(""The mirror string : "" + str(res))","def mirror_image(image):
    mirror_image = """"
    for i in range(len(image)):
        for j in range(len(image[i])):
            mirror_image += image[i][j]
    return mirror_image

# driver code
image = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j""]
print(mirror_image(image))

# This code is contributed by Nikhil"
2070,Write a Python program to Substituting patterns in text using regex,"# Python implementation of substituting a
# specific text pattern in a string using regex

# importing regex module
import re

# Function to perform
# operations on the strings
def substitutor():

# a string variable
sentence1 = ""It is raining outside.""

# replacing text 'raining' in the string
# variable sentence1 with 'sunny' thus
# passing first parameter as raining
# second as sunny, third as the
# variable name in which string is stored
# and printing the modified string
print(re.sub(r""raining"", ""sunny"", sentence1))

# a string variable
sentence2 = ""Thank you very very much.""

# replacing text 'very' in the string
# variable sentence2 with 'so' thus
# passing parameters at their
# appropriate positions and printing
# the modified string
print(re.sub(r""very"", ""so"", sentence2))

# Driver Code:
substitutor()","import re

text = ""The rain in Spain""
pattern = r""\b\w+\.\w+""

# Substituting pattern in text
# text = re.sub(pattern, r""\1*******"", text)

# Substituting pattern in text
text = re.sub(pattern, r""\1*******"", text)

# Printing the modified text
print(text)

# Python program to find all matches
# in a string

# Function to find all"
2071,Write a Python Program for Odd-Even Sort / Brick Sort,"# Python Program to implement
# Odd-Even / Brick Sort

def oddEvenSort(arr, n):
# Initially array is unsorted
isSorted = 0
while isSorted == 0:
isSorted = 1
temp = 0
for i in range(1, n-1, 2):
if arr[i] > arr[i+1]:
arr[i], arr[i+1] = arr[i+1], arr[i]
isSorted = 0

for i in range(0, n-1, 2):
if arr[i] > arr[i+1]:
arr[i], arr[i+1] = arr[i+1], arr[i]
isSorted = 0

return


arr = [34, 2, 10, -9]
n = len(arr)

oddEvenSort(arr, n);
for i in range(0, n):
print(arr[i], end ="" "")

# Code Contribute by Mohit Gupta_OMG <(0_o)>","def odd_even_sort(arr):
    for i in range(len(arr)):
        if arr[i] % 2 == 0:
            arr[i] = arr[i] // 2
        else:
            arr[i] = arr[i] * 3 + 1
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(odd_even_sort(arr))

""""""

def odd_even_sort"
2072,Find the size of a Tuple in Python,"import sys

# sample Tuples
Tuple1 = (""A"", 1, ""B"", 2, ""C"", 3)
Tuple2 = (""Geek1"", ""Raju"", ""Geek2"", ""Nikhil"", ""Geek3"", ""Deepanshu"")
Tuple3 = ((1, ""Lion""), ( 2, ""Tiger""), (3, ""Fox""), (4, ""Wolf""))

# print the sizes of sample Tuples
print(""Size of Tuple1: "" + str(sys.getsizeof(Tuple1)) + ""bytes"")
print(""Size of Tuple2: "" + str(sys.getsizeof(Tuple2)) + ""bytes"")
print(""Size of Tuple3: "" + str(sys.getsizeof(Tuple3)) + ""bytes"")","def solution(t):
    return len(t)

""""""

def solution(t):
    return len(t)

def solution(t):
    return len(t)

def solution(t):
    return len(t)

def solution(t):
    return len(t)

def solution(t):
    return len(t)

def solution(t):
    return len(t)

def solution(t):
    return len(t)

def solution(t"
2073,Ways to sort list of dictionaries by values in Write a Python program to Using itemgetter,"# Python code demonstrate the working of sorted()
# and itemgetter

# importing ""operator"" for implementing itemgetter
from operator import itemgetter

# Initializing list of dictionaries
lis = [{ ""name"" : ""Nandini"", ""age"" : 20},
{ ""name"" : ""Manjeet"", ""age"" : 20 },
{ ""name"" : ""Nikhil"" , ""age"" : 19 }]

# using sorted and itemgetter to print list sorted by age
print ""The list printed sorting by age: ""
print sorted(lis, key=itemgetter('age'))

print (""\r"")

# using sorted and itemgetter to print list sorted by both age and name
# notice that ""Manjeet"" now comes before ""Nandini""
print ""The list printed sorting by age and name: ""
print sorted(lis, key=itemgetter('age', 'name'))

print (""\r"")

# using sorted and itemgetter to print list sorted by age in descending order
print ""The list printed sorting by age in descending order: ""
print sorted(lis, key=itemgetter('age'),reverse = True)","def sort_dict(d):
    return sorted(d.items(), key=itemgetter(1))

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
print(sort_dict(d))

""""""

# Solution 1

def sort_dict(d):
    return sorted(d.items(), key=itemgetter(1))

d = {'a': 1, 'b': 2, '"
2074,"Saving Text, JSON, and CSV to a File in Python","# Python program to demonstrate
# opening a file


# Open function to open the file ""myfile.txt""
# (same directory) in read mode and store
# it's reference in the variable file1

file1 = open(""myfile.txt"")

# Reading from file
print(file1.read())

file1.close()","# Solution 1:
# 1. Create a dictionary called data.
# 2. Create a list called data_list.
# 3. Create a dictionary called data_dict.
# 4. Create a list called data_list_2.
# 5. Create a dictionary called data_dict_2.
# 6. Create a list called data_list_3.
# 7. Create a dictionary called data_dict_3.
# 8. Create a list called data_list_4.
# 9. Create a dictionary"
2075,Write a Python program to Sort lists in tuple,"# Python3 code to demonstrate working of
# Sort lists in tuple
# Using tuple() + sorted() + generator expression

# Initializing tuple
test_tup = ([7, 5, 4], [8, 2, 4], [0, 7, 5])

# printing original tuple
print(""The original tuple is : "" + str(test_tup))

# Sort lists in tuple
# Using tuple() + sorted() + generator expression
res = tuple((sorted(sub) for sub in test_tup))

# printing result
print(""The tuple after sorting lists : "" + str(res))","def sort_tuple(tup):
    return tup[0]

tup = [1,2,3,4,5,6,7,8,9,10]
print(sorted(tup, key=sort_tuple))

""""""

def sort_tuple(tup):
    return tup[0]

tup = [1,2,3,4,5,6,7,8,9,10]
print(sorted(tup, key=sort"
2076,Write a Python Program to Reverse the Content of a File using Stack,"# Python3 code to reverse the lines
# of a file using Stack.


# Creating Stack class (LIFO rule)
class Stack:

def __init__(self):

# Creating an empty stack
self._arr = []

# Creating push() method.
def push(self, val):
self._arr.append(val)

def is_empty(self):

# Returns True if empty
return len(self._arr) == 0

# Creating Pop method.
def pop(self):

if self.is_empty():
print(""Stack is empty"")
return

return self._arr.pop()

# Creating a function which will reverse
# the lines of a file and Overwrites the
# given file with its contents line-by-line
# reversed
def reverse_file(filename):

S = Stack()
original = open(filename)

for line in original:
S.push(line.rstrip(""\n""))

original.close()


output = open(filename, 'w')

while not S.is_empty():
output.write(S.pop()+""\n"")

output.close()


# Driver Code
filename = ""GFG.txt""

# Calling the reverse_file function
reverse_file(filename)

# Now reading the content of the file
with open(filename) as file:
for f in file.readlines():
print(f, end ="""")","import os

def reverseFile(fileName):
    with open(fileName, 'r') as f:
        data = f.readlines()
        data.reverse()
        with open(fileName, 'w') as f:
            f.writelines(data)

if __name__ == '__main__':
    fileName = 'input.txt'
    reverseFile(fileName)"
2077,How to get weighted random choice in Python,"import random


sampleList = [100, 200, 300, 400, 500]

randomList = random.choices(
sampleList, weights=(10, 20, 30, 40, 50), k=5)

print(randomList)","import random

def weighted_choice(lst):
    """"""
    This function returns a random element from the list.
    """"""
    return random.choice(lst)

def weighted_choice_2(lst):
    """"""
    This function returns a random element from the list.
    """"""
    return random.choice(lst)

def weighted_choice_3(lst):
    """"""
    This function returns a random element from the list.
    """"""
    return random.choice(lst)"
2078,Multithreaded Priority Queue in Python,"import queue
import threading
import time

thread_exit_Flag = 0

class sample_Thread (threading.Thread):
def __init__(self, threadID, name, q):
threading.Thread.__init__(self)
self.threadID = threadID
self.name = name
self.q = q
def run(self):
print (""initializing "" + self.name)
process_data(self.name, self.q)
print (""Exiting "" + self.name)

# helper function to process data
def process_data(threadName, q):
while not thread_exit_Flag:
queueLock.acquire()
if not workQueue.empty():
data = q.get()
queueLock.release()
print (""% s processing % s"" % (threadName, data))
else:
queueLock.release()
time.sleep(1)

thread_list = [""Thread-1"", ""Thread-2"", ""Thread-3""]
name_list = [""A"", ""B"", ""C"", ""D"", ""E""]
queueLock = threading.Lock()
workQueue = queue.Queue(10)
threads = []
threadID = 1

# Create new threads
for thread_name in thread_list:
thread = sample_Thread(threadID, thread_name, workQueue)
thread.start()
threads.append(thread)
threadID += 1

# Fill the queue
queueLock.acquire()
for items in name_list:
workQueue.put(items)

queueLock.release()

# Wait for the queue to empty
while not workQueue.empty():
pass

# Notify threads it's time to exit
thread_exit_Flag = 1

# Wait for all threads to complete
for t in threads:
t.join()
print (""Exit Main Thread"")","def solution(q):
    # write your code here
    return q.pop(0)

def solution(q):
    # write your code here
    return q.pop(0)

def solution(q):
    # write your code here
    return q.pop(0)

def solution(q):
    # write your code here
    return q.pop(0)

def solution(q):
    # write your code here
    return q.pop(0)

def solution(q"
2079,How to Add padding to a tkinter widget only on one side  in Python,"# Python program to add padding
# to a widget only on left-side

# Import the library tkinter
from tkinter import *

# Create a GUI app
app = Tk()

# Give title to your GUI app
app.title(""Vinayak App"")

# Maximize the window screen
width = app.winfo_screenwidth()
height = app.winfo_screenheight()
app.geometry(""%dx%d"" % (width, height))

# Construct the label in your app
l1 = Label(app, text='Geeks For Geeks')

# Give the leftmost padding
l1.grid(padx=(200, 0), pady=(0, 0))

# Make the loop for displaying app
app.mainloop()","import tkinter as tk

def add_padding(widget, padx, pady):
    widget.grid_configure(padx=padx, pady=pady)

root = tk.Tk()

widget = tk.Label(root, text=""Hello World"")
widget.grid(row=0, column=0)

add_padding(widget, 10, 10)

root.mainloop()

""""""

from tkinter import"
2080,How to switch to new window in Selenium for Python,"# import modules
from selenium import webdriver
import time

# provide the path for chromedriver
PATH = ""C:/chromedriver.exe""

# pass on the path to driver for working
driver = webdriver.Chrome(PATH)","import time
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

driver = webdriver.Chrome(executable_path=""C:\\Users\\DELL\\Downloads\\chromedriver_win32\\chromedriver.exe"")
driver.get(""https://rahulshettyacademy.com/angularpractice/"")

# wait for the element to appear
driver.find_element_by_id(""name"").send_keys(""Rahul"")
driver.find"
2081,Write a Python program to Longest Substring Length of K,"# Python3 code to demonstrate working of
# Longest Substring of K
# Using loop

# initializing string
test_str = 'abcaaaacbbaa'

# printing original String
print(""The original string is : "" + str(test_str))

# initializing K
K = 'a'

cnt = 0
res = 0
for idx in range(len(test_str)):

# increment counter on checking
if test_str[idx] == K:
cnt += 1
else:
cnt = 0

# retaining max
res = max(res, cnt)

# printing result
print(""The Longest Substring Length : "" + str(res))","def LongestSubstringLength(string, k):
    # Write your code here
    if len(string) < k:
        return 0
    if len(string) == k:
        return 1
    if string[0] == string[-1]:
        return LongestSubstringLength(string[1:-1], k)
    else:
        return LongestSubstringLength(string[1:], k) + 1

print(LongestSubstringLength(""abcabcbb"", 3))
print"
2082,Write a Python program to Multiply all numbers in the list (4 different ways),"# Python program to multiply all values in the
# list using traversal


def multiplyList(myList) :

# Multiply elements one by one
result = 1
for x in myList:
result = result * x
return result

# Driver code
list1 = [1, 2, 3]
list2 = [3, 2, 4]
print(multiplyList(list1))
print(multiplyList(list2))","def multiply_all_numbers(list):
    for i in range(len(list)):
        list[i] = list[i] * list[i]
    return list

print(multiply_all_numbers([1, 2, 3, 4, 5]))
print(multiply_all_numbers([1, 2, 3, 4, 5, 6]))
print(multiply_all_numbers([1, 2, 3, 4"
2083,How to search and replace text in a file in Python ,"# creating a variable and storing the text
# that we want to search
search_text = ""dummy""

# creating a variable and storing the text
# that we want to add
replace_text = ""replaced""

# Opening our text file in read only
# mode using the open() function
with open(r'SampleFile.txt', 'r') as file:

# Reading the content of the file
# using the read() function and storing
# them in a new variable
data = file.read()

# Searching and replacing the text
# using the replace() function
data = data.replace(search_text, replace_text)

# Opening our text file in write only
# mode to write the replaced content
with open(r'SampleFile.txt', 'w') as file:

# Writing the replaced data in our
# text file
file.write(data)

# Printing Text replaced
print(""Text replaced"")","1. Open the file in read mode
2. Read the file line by line
3. Iterate through the lines
4. For each line, replace the word 'python' with 'python3'
5. Print the modified file

""""""

# 1. Open the file in read mode
file = open('file.txt', 'r')

# 2. Read the file line by line
for line in file:
    # 3. Iterate through the lines
    for word in line.split():
        # 4"
2084,Convert CSV to JSON using Python,"import csv
import json




# Function to convert a CSV to JSON
# Takes the file paths as arguments
def make_json(csvFilePath, jsonFilePath):

# create a dictionary
data = {}

# Open a csv reader called DictReader
with open(csvFilePath, encoding='utf-8') as csvf:
csvReader = csv.DictReader(csvf)

# Convert each row into a dictionary
# and add it to data
for rows in csvReader:

# Assuming a column named 'No' to
# be the primary key
key = rows['No']
data[key] = rows


# Open a json writer, and use the json.dumps()
# function to dump data
with open(jsonFilePath, 'w', encoding='utf-8') as jsonf:
jsonf.write(json.dumps(data, indent=4))

# Driver Code


# Decide the two file paths according to your
# computer system
csvFilePath = r'Names.csv'
jsonFilePath = r'Names.json'


# Call the make_json function
make_json(csvFilePath, jsonFilePath)","import csv
import json

with open('data.csv', newline='') as f:
    reader = csv.reader(f)
    file_data = list(reader)

# Python code to convert
# csv to json

# Python code to convert
# json to csv

# Python code to convert
# csv to json

# Python code to convert
# json to csv

# Python code to convert
# json to csv

# Python code to convert
# csv to"
2085,How to Print Multiple Arguments in Python,"def GFG(name, num):
print(""Hello from "", name + ', ' + num)


GFG(""geeks for geeks"", ""25"")","def print_multiple_arguments(arg1, arg2, arg3):
    print(arg1, arg2, arg3)

print_multiple_arguments(1, 2, 3)

""""""

def print_multiple_arguments(arg1, arg2, arg3):
    print(arg1, arg2, arg3)

print_multiple_arguments(1, 2, 3)

""""""

def print_multiple_arguments(arg1, arg2, arg3):
    print"
2086,Write a Python program to Remove duplicate values across Dictionary Values,"# Python3 code to demonstrate working of
# Remove duplicate values across Dictionary Values
# Using Counter() + list comprehension
from collections import Counter

# initializing dictionary
test_dict = {'Manjeet' : [1, 4, 5, 6],
'Akash' : [1, 8, 9],
'Nikhil': [10, 22, 4],
'Akshat': [5, 11, 22]}

# printing original dictionary
print(""The original dictionary : "" + str(test_dict))

# Remove duplicate values across Dictionary Values
# Using Counter() + list comprehension
cnt = Counter()
for idx in test_dict.values():
cnt.update(idx)
res = {idx: [key for key in j if cnt[key] == 1]
for idx, j in test_dict.items()}

# printing result
print(""Uncommon elements records : "" + str(res))","def removeDuplicate(d):
    newDict = {}
    for key in d:
        if d[key] not in newDict:
            newDict[d[key]] = 1
        else:
            newDict[d[key]] += 1
    return newDict

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
print(removeDuplicate(d))

""""""

"""""""
2087,How to check horoscope using Python ,"import requests
from bs4 import BeautifulSoup","1. Create a variable called ""horoscope"" and set it to a string of the following format:

""The sun is shining on the moon.""

2. Create a variable called ""horoscope_string"" and set it to a string of the following format:

""The sun is shining on the moon.""

3. Create a variable called ""horoscope_string_2"" and set it to a string of the following format:

""The sun is shining on the moon.""

4. Create a variable called ""horoscope_string_"
2088,Write a Python program to Adding Tuple to List and vice  versa,"# Python3 code to demonstrate working of
# Adding Tuple to List and vice - versa
# Using += operator (list + tuple)


# initializing list
test_list = [5, 6, 7]


# printing original list
print(""The original list is : "" + str(test_list))


# initializing tuple
test_tup = (9, 10)


# Adding Tuple to List and vice - versa
# Using += operator (list + tuple)
test_list += test_tup


# printing result
print(""The container after addition : "" + str(test_list))","def add_tuple(tup):
    return tup[0] + tup[1]

tup1 = (1, 2, 3)
tup2 = (4, 5, 6)

print(add_tuple(tup1))
print(add_tuple(tup2))

""""""

def add_tuple(tup):
    return tup[0] + tup[1]

tup1 = (1, 2, 3"
2089,How to check if a Python variable exists,"def func():

# defining local variable
a_variable = 0

# using locals() function
# for checking existence in symbol table
is_local_var = ""a_variable"" in locals()

# printing result
print(is_local_var)

# driver code
func()","def check_variable(variable):
    if variable in globals():
        return True
    else:
        return False

print(check_variable(""variable""))

""""""

# Solution

def check_variable(variable):
    if variable in globals():
        return True
    else:
        return False

print(check_variable(""variable""))"
2090,Write a Python Program for Binary Insertion Sort,"# Python Program implementation
# of binary insertion sort

def binary_search(arr, val, start, end):
# we need to distinugish whether we should insert
# before or after the left boundary.
# imagine [0] is the last step of the binary search
# and we need to decide where to insert -1
if start == end:
if arr[start] > val:
return start
else:
return start+1

# this occurs if we are moving beyond left\'s boundary
# meaning the left boundary is the least position to
# find a number greater than val
if start > end:
return start

mid = (start+end)/2
if arr[mid] < val:
return binary_search(arr, val, mid+1, end)
elif arr[mid] > val:
return binary_search(arr, val, start, mid-1)
else:
return mid

def insertion_sort(arr):
for i in xrange(1, len(arr)):
val = arr[i]
j = binary_search(arr, val, 0, i-1)
arr = arr[:j] + [val] + arr[j:i] + arr[i+1:]
return arr

print(""Sorted array:"")
print insertion_sort([37, 23, 0, 17, 12, 72, 31,
46, 100, 88, 54])

# Code contributed by Mohit Gupta_OMG","def binary_insertion_sort(arr):
    for i in range(1, len(arr)):
        j = i
        while j > 0 and arr[j] < arr[j-1]:
            arr[j], arr[j-1] = arr[j-1], arr[j]
            j -= 1
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(binary_insertion_sort(arr))

""""""

def binary_insertion_"
2091,Write a Python program to numpy.isin() method,"# import numpy
import numpy as np

# using numpy.isin() method
gfg1 = np.array([1, 2, 3, 4, 5])
lis = [1, 3, 5]
gfg = np.isin(gfg1, lis)

print(gfg)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[1, 2, 3], [4, 5, 6]])

print(np.isin(a, b))

""""""

import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[1, 2, 3], [4, 5, 6]])"
2092,"Calculate inner, outer, and cross products of matrices and vectors using NumPy in Python","# Python Program illustrating
# numpy.inner() method
import numpy as np

# Vectors
a = np.array([2, 6])
b = np.array([3, 10])
print(""Vectors :"")
print(""a = "", a)
print(""\nb = "", b)

# Inner Product of Vectors
print(""\nInner product of vectors a and b ="")
print(np.inner(a, b))

print(""---------------------------------------"")

# Matrices
x = np.array([[2, 3, 4], [3, 2, 9]])
y = np.array([[1, 5, 0], [5, 10, 3]])
print(""\nMatrices :"")
print(""x ="", x)
print(""\ny ="", y)

# Inner product of matrices
print(""\nInner product of matrices x and y ="")
print(np.inner(x, y))","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6]])
B = np.array([[7, 8, 9], [10, 11, 12]])

inner = A.dot(B)
outer = A.dot(B, transpose=True)
cross = A.dot(B, transpose=False)

print(""inner:"", inner)
print(""outer:"", outer)
print("""
2093,"Write a Python program to Get number of characters, words, spaces and lines in a file","# Python implementation to compute
# number of characters, words, spaces
# and lines in a file

# Function to count number
# of characters, words, spaces
# and lines in a file
def counter(fname):

# variable to store total word count
num_words = 0

# variable to store total line count
num_lines = 0

# variable to store total character count
num_charc = 0

# variable to store total space count
num_spaces = 0

# opening file using with() method
# so that file gets closed
# after completion of work
with open(fname, 'r') as f:

# loop to iterate file
# line by line
for line in f:

# incrementing value of
# num_lines with each
# iteration of loop to
# store total line count
num_lines += 1

# declaring a variable word
# and assigning its value as Y
# because every file is
# supposed to start with
# a word or a character
word = 'Y'

# loop to iterate every
# line letter by letter
for letter in line:

# condition to check
# that the encountered character
# is not white space and a word
if (letter != ' ' and word == 'Y'):

# incrementing the word
# count by 1
num_words += 1

# assigning value N to
# variable word because until
# space will not encounter
# a word can not be completed
word = 'N'

# condition to check
# that the encountered character
# is a white space
elif (letter == ' '):

# incrementing the space
# count by 1
num_spaces += 1

# assigning value Y to
# variable word because after
# white space a word
# is supposed to occur
word = 'Y'

# loop to iterate every
# letter character by
# character
for i in letter:

# condition to check
# that the encountered character
# is not white space and not
# a newline character
if(i !="" "" and i !=""\n""):

# incrementing character
# count by 1
num_charc += 1

# printing total word count
print(""Number of words in text file: "", num_words)

# printing total line count
print(""Number of lines in text file: "", num_lines)

# printing total character count
print('Number of characters in text file: ', num_charc)

# printing total space count
print('Number of spaces in text file: ', num_spaces)

# Driver Code:
if __name__ == '__main__':
fname = 'File1.txt'
try:
counter(fname)
except:
print('File not found')","import os

def get_file_size(file_name):
    size = os.path.getsize(file_name)
    return size

def get_file_lines(file_name):
    with open(file_name, 'r') as f:
        lines = f.readlines()
    return len(lines)

def get_file_words(file_name):
    with open(file_name, 'r') as f:
        words ="
2094,Split a text column into two columns in Pandas DataFrame in Python,"# import Pandas as pd
import pandas as pd

# create a new data frame
df = pd.DataFrame({'Name': ['John Larter', 'Robert Junior', 'Jonny Depp'],
'Age':[32, 34, 36]})

print(""Given Dataframe is :\n"",df)

# bydefault splitting is done on the basis of single space.
print(""\nSplitting 'Name' column into two different columns :\n"",
df.Name.str.split(expand=True))","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pima-indians-diabetes.csv?raw=true')

df.head()

df.columns = ['age','sex', 'bmi', 'bp','s1','s2','s3','s4','s5','s6']

df.head()

df.columns ="
2095,Write a Python program to Creating DataFrame from dict of narray/lists,"# Python code demonstrate creating
# DataFrame from dict narray / lists
# By default addresses.


import pandas as pd


# initialise data of lists.
data = {'Category':['Array', 'Stack', 'Queue'],
'Marks':[20, 21, 19]}


# Create DataFrame
df = pd.DataFrame(data)


# Print the output.
print(df )","import pandas as pd

data = {'Name': ['Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi"
2096,Write a Python program to Numpy np.eigvals() method,"# import numpy
from numpy import linalg as LA

# using np.eigvals() method
gfg = LA.eigvals([[1, 2], [3, 4]])

print(gfg)","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(np.eigvals(A))

""""""

# Solution

import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(np.eigvals(A))

""""""

# Solution

import n"
2097,Saving a Networkx graph in GEXF format and visualize using Gephi in Python,"# importing the required module
import networkx as nx


# making a simple graph with 1 node.
G = nx.path_graph(10)


# saving graph created above in gexf format
nx.write_gexf(G, ""geeksforgeeks.gexf"")","python -m networkx.examples.pydot_agraph -G G -o G.gexf

""""""

import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
import os
import sys

# Set the path to the directory where the source code is
source_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(source_dir)

from"
2098,How to Sort CSV by multiple columns in Python ,"# importing pandas package
import pandas as pd

# making data frame from csv file
data = pd.read_csv(""diamonds.csv"")

# sorting data frame by a column
data.sort_values(""carat"", axis=0, ascending=True,
inplace=True, na_position='first')

# display
data.head(10)","import csv

with open('data.csv', newline='') as f:
    reader = csv.reader(f)
    file_data = list(reader)

# To sort the file by multiple columns
file_data.sort(key=lambda x: (x[3], x[5], x[2]))

# To print the first 5 rows
print(file_data[:5])

# To print the last 5 rows
print(file_data[-5:])"
2099,Write a Python program to Extract Symmetric Tuples,"# Python3 code to demonstrate working of
# Extract Symmetric Tuples
# Using dictionary comprehension + set()

# initializing list
test_list = [(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]

# printing original list
print(""The original list is : "" + str(test_list))

# Extract Symmetric Tuples
# Using dictionary comprehension + set()
temp = set(test_list) & {(b, a) for a, b in test_list}
res = {(a, b) for a, b in temp if a < b}

# printing result
print(""The Symmetric tuples : "" + str(res))","def extract_symmetric_tuples(lst):
    return tuple(sorted(lst, key=lambda x: x[0]))

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(extract_symmetric_tuples(lst))

""""""

# Solution:

def extract_symmetric_tuples(lst):
    return tuple(sorted(lst, key=lambda x: x["
2100,Write a Python program to Remove keys with substring values,"# Python3 code to demonstrate working of
# Remove keys with substring values
# Using any() + generator expression

# initializing dictionary
test_dict = {1 : 'Gfg is best for geeks', 2 : 'Gfg is good', 3 : 'I love Gfg'}

# printing original dictionary
print(""The original dictionary : "" + str(test_dict))

# initializing substrings
sub_list = ['love', 'good']

# Remove keys with substring values
# Using any() + generator expression
res = dict()
for key, val in test_dict.items():
if not any(ele in val for ele in sub_list):
res[key] = val

# printing result
print(""Filtered Dictionary : "" + str(res))","def remove_substring(dict,substring):
    for key in dict:
        if dict[key] == substring:
            dict.pop(key)
    return dict

# Driver code
dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}
substring = 'ab'
print(remove_substring(dict,substring))

""""""

# Solution

def remove_substring(dict,"
2101,numpy string operations | upper() function in Python,"# Python Program explaining
# numpy.char.upper() function

import numpy as geek


in_arr = geek.array(['p4q r', '4q rp', 'q rp4', 'rp4q'])
print (""input array : "", in_arr)

out_arr = geek.char.upper(in_arr)
print (""output uppercased array :"", out_arr)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)
print(a.sum())
print(a.mean())
print(a.max())
print(a.min())
print(a.std())
print(a.var())

# Solution:

# import numpy as np
#
# a = np.array([[1, 2, 3], [4, 5, 6]])
# print(a"
2102,Map function and Lambda expression in Python to replace characters,"# Function to replace a character c1 with c2
# and c2 with c1 in a string S

def replaceChars(input,c1,c2):

# create lambda to replace c1 with c2, c2
# with c1 and other will remain same
# expression will be like ""lambda x:
# x if (x!=c1 and x!=c2) else c1 if (x==c2) else c2""
# and map it onto each character of string
newChars = map(lambda x: x if (x!=c1 and x!=c2) else \
c1 if (x==c2) else c2,input)

# now join each character without space
# to print resultant string
print (''.join(newChars))

# Driver program
if __name__ == ""__main__"":
input = 'grrksfoegrrks'
c1 = 'e'
c2 = 'r'
replaceChars(input,c1,c2)","def map(fn, seq):
    return map(lambda x: fn(x), seq)

def map_lambda(fn, seq):
    return map(lambda x: fn(x), seq)

def map_lambda_2(fn, seq):
    return map(lambda x: fn(x), seq)

def map_lambda_3(fn, seq):
    return map(lambda x: fn(x), seq)

def map_lambda_4(fn, seq):
    return map"
2103,Validate an IP address using Python without using RegEx,"# Python program to verify IP without using RegEx


# explicit function to verify IP
def isValidIP(s):


# check number of periods
if s.count('.') != 3:
return 'Invalid Ip address'


l = list(map(str, s.split('.')))


# check range of each number between periods
for ele in l:
if int(ele) < 0 or int(ele) > 255:
return 'Invalid Ip address'


return 'Valid Ip address'




# Driver Code
print(isValidIP('666.1.2.2'))",">>> import re
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>"
2104,Write a Python program to Consecutive characters frequency,"# Python3 code to demonstrate working of
# Consecutive characters frequency
# Using list comprehension + groupby()
from itertools import groupby

# initializing string
test_str = ""geekksforgggeeks""

# printing original string
print(""The original string is : "" + test_str)

# Consecutive characters frequency
# Using list comprehension + groupby()
res = [len(list(j)) for _, j in groupby(test_str)]

# printing result
print(""The Consecutive characters frequency : "" + str(res))","def consecutive_char_frequency(string):
    count = 0
    for i in range(len(string)):
        if string[i] == string[i+1]:
            count += 1
    return count

print(consecutive_char_frequency(""abcdefghijklmnopqrstuvwxyz""))

""""""

def consecutive_char_frequency(string):
    count = 0
    for i in range(len(string)):
        if string[i] == string[i"
2105,How to save a NumPy array to a text file in Python,"# Program to save a NumPy array to a text file


# Importing required libraries
import numpy


# Creating an array
List = [1, 2, 3, 4, 5]
Array = numpy.array(List)


# Displaying the array
print('Array:\n', Array)
file = open(""file1.txt"", ""w+"")


# Saving the array in a text file
content = str(Array)
file.write(content)
file.close()


# Displaying the contents of the text file
file = open(""file1.txt"", ""r"")
content = file.read()


print(""\nContent in file1.txt:\n"", content)
file.close()","import numpy as np

# Create a NumPy array
arr = np.array([1, 2, 3, 4, 5])

# Save the NumPy array as a text file
np.savetxt('arr.txt', arr)

# Load the NumPy array as a text file
arr = np.loadtxt('arr.txt')

# Print the NumPy array
print(arr)

# Create a NumPy array
arr = np.array([1, 2, 3, 4, 5"
2106,Select any row from a Dataframe using iloc[] and iat[] in Pandas in Python,"import pandas as pd

# Create the dataframe
df = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/11'],
'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],
'Cost':[10000, 5000, 15000, 2000]})


# Create an empty list
Row_list =[]

# Iterate over each row
for i in range((df.shape[0])):

# Using iloc to access the values of
# the current row denoted by ""i""
Row_list.append(list(df.iloc[i, :]))

# Print the first 3 elements
print(Row_list[:3])","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

# Solution 1
df.iloc[:, 0] = df.iloc[:, 0].astype('int64')

# Solution 2
df.iat[0, 0] = df.iat[0, 0].astype('int64')

#"
2107,How to multiply a polynomial to another using NumPy in Python,"# importing package
import numpy

# define the polynomials
# p(x) = 5(x**2) + (-2)x +5

px = (5, -2, 5)
# q(x) = 2(x**2) + (-5)x +2
qx = (2, -5, 2)

# mul the polynomials
rx = numpy.polynomial.polynomial.polymul(px, qx)

# print the resultant polynomial
print(rx)","import numpy as np

def multiply(poly, x):
    """"""Multiply a polynomial by a scalar.

    Args:
        poly (np.ndarray): A polynomial.
        x (float): A scalar.

    Returns:
        np.ndarray: The result of the multiplication.
    """"""
    return np.dot(poly, x)

def multiply_scalar(poly, x):
    """"""Multiply a polynomial by a scal"
2108,Creating a Pandas Series from Dictionary in Python,"# import the pandas lib as pd
import pandas as pd

# create a dictionary
dictionary = {'A' : 10, 'B' : 20, 'C' : 30}

# create a series
series = pd.Series(dictionary)

print(series)","import pandas as pd

# Create a Pandas Series from a dictionary
df = pd.Series({""A"": 1, ""B"": 2, ""C"": 3})

# Print the Series
print(df)

# Create a Pandas Series from a dictionary
df = pd.Series({""A"": 1, ""B"": 2, ""C"": 3})

# Print the Series
print(df)

# Create a Pandas Series from a dictionary
df = pd.Series({""A"": 1"
2109,Compute the median of the flattened NumPy array in Python,"# importing numpy as library
import numpy as np


# creating 1 D array with odd no of
# elements
x_odd = np.array([1, 2, 3, 4, 5, 6, 7])
print(""\nPrinting the Original array:"")
print(x_odd)

# calculating median
med_odd = np.median(x_odd)
print(""\nMedian of the array that contains \
odd no of elements:"")
print(med_odd)","import numpy as np

def median(arr):
    arr = np.array(arr)
    arr = arr.flatten()
    arr = np.sort(arr)
    return arr[len(arr)//2]

print(median([1,2,3,4,5,6,7,8,9,10]))

""""""

# Solution

import numpy as np

def median(arr):
    arr = np.array(arr)
    arr ="
2110,How to check whether specified values are present in NumPy array in Python,"# importing Numpy package
import numpy as np

# creating a Numpy array
n_array = np.array([[2, 3, 0],
[4, 1, 6]])

print(""Given array:"")
print(n_array)

# Checking whether specific values
# are present in ""n_array"" or not
print(2 in n_array)
print(0 in n_array)
print(6 in n_array)
print(50 in n_array)
print(10 in n_array)","import numpy as np

a = np.array([1, 2, 3, 4, 5])

if a[0] == 1:
    print(""a[0] = 1"")

if a[1] == 2:
    print(""a[1] = 2"")

if a[2] == 3:
    print(""a[2] = 3"")

if a[3] == 4:
    print(""a[3] = 4"")

if a[4]"
2111,Write a Python program to Possible Substring count from String,"# Python3 code to demonstrate working of
# Possible Substring count from String
# Using min() + list comprehension + count()


# initializing string
test_str = ""gekseforgeeks""


# printing original string
print(""The original string is : "" + str(test_str))


# initializing arg string
arg_str = ""geeks""


# using min and count to get minimum possible
# occurrence of character
res = min(test_str.count(char) // arg_str.count(char) for char in set(arg_str))


# printing result
print(""Possible substrings count : "" + str(res))","def count_substring(string, sub_string):
    count = 0
    for i in range(len(string)):
        if string[i:i+len(sub_string)] == sub_string:
            count += 1
    return count

# driver code
string = ""ABABAC""
sub_string = ""ABA""

print(count_substring(string, sub_string))

""""""
Output:
6
"""""""
2112,Create a Numpy array filled with all ones in Python,"# Python Program to create array with all ones
import numpy as geek

a = geek.ones(3, dtype = int)
print(""Matrix a : \n"", a)

b = geek.ones([3, 3], dtype = int)
print(""\nMatrix b : \n"", b)","import numpy as np

a = np.ones((3,3))
print(a)

# Create a Numpy array filled with all ones in Python

# Create a Numpy array filled with all ones in Python

# Create a Numpy array filled with all ones in Python

# Create a Numpy array filled with all ones in Python

# Create a Numpy array filled with all ones in Python

# Create a Numpy array filled with all ones in Python

# Create a Numpy array filled with all"
2113,How to check which Button was clicked in Tkinter  in Python,"# Python program to determine which
# button was pressed in tkinter

# Import the library tkinter
from tkinter import *

# Create a GUI app
app = Tk()

# Create a function with one paramter, i.e., of
# the text you want to show when button is clicked
def which_button(button_press):
# Printing the text when a button is clicked
print(button_press)


# Creating and displaying of button b1
b1 = Button(app, text=""Apple"",
command=lambda m=""It is an apple"": which_button(m))

b1.grid(padx=10, pady=10)

# Creating and displaying of button b2
b2 = Button(app, text=""Banana"",
command=lambda m=""It is a banana"": which_button(m))
b2.grid(padx=10, pady=10)

# Make the infinite loop for displaying the app
app.mainloop()","import tkinter as tk

def click_button(event):
    print(event.x, event.y)

root = tk.Tk()

button = tk.Button(root, text=""Click Me"", command=click_button)
button.pack()

root.mainloop()

""""""

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(meal_"
2114,Make a Pandas DataFrame with two-dimensional list | Python,"# import pandas as pd
import pandas as pd

# List1
lst = [['Geek', 25], ['is', 30],
['for', 26], ['Geeksforgeeks', 22]]

# creating df object with columns specified
df = pd.DataFrame(lst, columns =['Tag', 'number'])
print(df )","import pandas as pd

df = pd.DataFrame(
    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],
    columns=['a', 'b', 'c'],
    index=['one', 'two', 'three']
)

print(df)

# Solution:

# df = pd.DataFrame(
#     [[1, 2, 3], [4, 5, 6], [7, 8, 9"
2115,Write a Python program to Convert a list of Tuples into Dictionary,"# Python code to convert into dictionary

def Convert(tup, di):
for a, b in tup:
di.setdefault(a, []).append(b)
return di

# Driver Code
tups = [(""akash"", 10), (""gaurav"", 12), (""anand"", 14),
(""suraj"", 20), (""akhil"", 25), (""ashish"", 30)]
dictionary = {}
print (Convert(tups, dictionary))","def convert_list_to_dict(list):
    dict = {}
    for i in range(len(list)):
        dict[list[i][0]] = list[i][1]
    return dict

print(convert_list_to_dict([('a', 1), ('b', 2), ('c', 3)]))

""""""

def convert_list_to_dict(list):
    dict = {}
    for i in range(len(list)):
        dict["
2116,Bisect Algorithm Functions in Python,"# Python code to demonstrate the working of
# bisect(), bisect_left() and bisect_right()

# importing ""bisect"" for bisection operations
import bisect

# initializing list
li = [1, 3, 4, 4, 4, 6, 7]

# using bisect() to find index to insert new element
# returns 5 ( right most possible index )
print (""The rightmost index to insert, so list remains sorted is : "", end="""")
print (bisect.bisect(li, 4))

# using bisect_left() to find index to insert new element
# returns 2 ( left most possible index )
print (""The leftmost index to insert, so list remains sorted is : "", end="""")
print (bisect.bisect_left(li, 4))

# using bisect_right() to find index to insert new element
# returns 4 ( right most possible index )
print (""The rightmost index to insert, so list remains sorted is : "", end="""")
print (bisect.bisect_right(li, 4, 0, 4))","def bisect(a, x, lo, hi):
    if hi < lo:
        return -1
    mid = (lo + hi) // 2
    if a[mid] == x:
        return mid
    elif a[mid] > x:
        return bisect(a, x, lo, mid - 1)
    else:
        return bisect(a, x, mid + 1, hi)

a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10"
2117,Handling missing keys in Python dictionaries,"# Python code to demonstrate Dictionary and
# missing value error


# initializing Dictionary
d = { 'a' : 1 , 'b' : 2 }


# trying to output value of absent key
print (""The value associated with 'c' is : "")
print (d['c'])","def solution(d):
    # Fill this in.
    return d

# For this problem, the solution is a dictionary.
# The dictionary contains the following keys:
#   - 'a': 1
#   - 'b': 2
#   - 'c': 3
#   - 'd': 4
#   - 'e': 5
#   - 'f': 6
#   - 'g': 7
#   - 'h': 8
#   - 'i': 9
#   - 'j': 10
#"
2118,Construct a DataFrame in Pandas using string data in Python,"# importing pandas as pd
import pandas as pd

# import the StrinIO function
# from io module
from io import StringIO

# wrap the string data in StringIO function
StringData = StringIO(""""""Date;Event;Cost
10/2/2011;Music;10000
11/2/2011;Poetry;12000
12/2/2011;Theatre;5000
13/2/2011;Comedy;8000
"""""")

# let's read the data using the Pandas
# read_csv() function
df = pd.read_csv(StringData, sep ="";"")

# Print the dataframe
print(df)","import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'col1': [1, 2, 3, 4, 5],
                   'col2': [10, 20, 30, 40, 50]})

# Print the DataFrame
print(df)

# Create a DataFrame from a dictionary
df = pd.DataFrame({""col1"": [1, 2, 3, 4, 5],
                   ""col2"": [10, 20, 30, 40,"
2119,Write a Python program to sort a list of tuples alphabetically,"# Python program to sort a
# list of tuples alphabetically


# Function to sort the list of
# tuples

def SortTuple(tup):

# Getting the length of list
# of tuples
n = len(tup)

for i in range(n):
for j in range(n-i-1):

if tup[j][0] > tup[j + 1][0]:
tup[j], tup[j + 1] = tup[j + 1], tup[j]

return tup

# Driver's code

tup = [(""Amana"", 28), (""Zenat"", 30), (""Abhishek"", 29),
(""Nikhil"", 21), (""B"", ""C"")]

print(SortTuple(tup))","import collections

def sort_tuples(tuples):
    # create a new list of tuples
    new_tuples = []
    # create a new list of tuples
    for tup in tuples:
        new_tuples.append(tup)
    # sort the new list of tuples
    new_tuples.sort()
    # return the sorted list of tuples
    return new_tuples

# create a list of tuples
tuples = [(1, '"
2120,numpy string operations | lower() function in Python,"# Python Program explaining
# numpy.char.lower() function

import numpy as geek


in_arr = geek.array(['P4Q R', '4Q RP', 'Q RP4', 'RP4Q'])
print (""input array : "", in_arr)

out_arr = geek.char.lower(in_arr)
print (""output lowercased array :"", out_arr)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a)
print(b)

print(a.dot(b))
print(a.dot(b, axis=0))
print(a.dot(b, axis=1))

print(a.T)
print(a.T.dot(b))
print"
2121,numpy.random.laplace() in Python,"# import numpy
import numpy as np
import matplotlib.pyplot as plt

# Using numpy.random.laplace() method
gfg = np.random.laplace(1.45, 15, 1000)

count, bins, ignored = plt.hist(gfg, 30, density = True)
plt.show()","import numpy as np
import matplotlib.pyplot as plt

np.random.laplace(loc=0, scale=1, size=100)

""""""

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the dataset
dataset = pd.read_csv('Social_Network_Ads.csv')
X = dataset.iloc[:, [2, 3]].values
y ="
2122,Convert class object to JSON in Python,"# import required packages
import json

# custom class
class Student:
def __init__(self, roll_no, name, batch):
self.roll_no = roll_no
self.name = name
self.batch = batch


class Car:
def __init__(self, brand, name, batch):
self.brand = brand
self.name = name
self.batch = batch


# main function
if __name__ == ""__main__"":

# create two new student objects
s1 = Student(""85"", ""Swapnil"", ""IMT"")
s2 = Student(""124"", ""Akash"", ""IMT"")

# create two new car objects
c1 = Car(""Honda"", ""city"", ""2005"")
c2 = Car(""Honda"", ""Amaze"", ""2011"")

# convert to JSON format
jsonstr1 = json.dumps(s1.__dict__)
jsonstr2 = json.dumps(s2.__dict__)
jsonstr3 = json.dumps(c1.__dict__)
jsonstr4 = json.dumps(c2.__dict__)

# print created JSON objects
print(jsonstr1)
print(jsonstr2)
print(jsonstr3)
print(jsonstr4)","class MyClass:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __str__(self):
        return f""MyClass object: {self.name} is {self.age}""

    def __repr__(self):
        return f""MyClass object: {self.name} is {self.age}""

    def __eq__(self, other):
        return self.name == other.name and self.age == other.age"
2123,Write a Python Program for Bitonic Sort,"# Python program for Bitonic Sort. Note that this program
# works only when size of input is a power of 2.


# The parameter dir indicates the sorting direction, ASCENDING
# or DESCENDING; if (a[i] > a[j]) agrees with the direction,
# then a[i] and a[j] are interchanged.*/
def compAndSwap(a, i, j, dire):
if (dire==1 and a[i] > a[j]) or (dire==0 and a[i] > a[j]):
a[i],a[j] = a[j],a[i]


# It recursively sorts a bitonic sequence in ascending order,
# if dir = 1, and in descending order otherwise (means dir=0).
# The sequence to be sorted starts at index position low,
# the parameter cnt is the number of elements to be sorted.
def bitonicMerge(a, low, cnt, dire):
if cnt > 1:
k = cnt/2
for i in range(low , low+k):
compAndSwap(a, i, i+k, dire)
bitonicMerge(a, low, k, dire)
bitonicMerge(a, low+k, k, dire)


# This function first produces a bitonic sequence by recursively
# sorting its two halves in opposite sorting orders, and then
# calls bitonicMerge to make them in the same order
def bitonicSort(a, low, cnt,dire):
if cnt > 1:
k = cnt/2
bitonicSort(a, low, k, 1)
bitonicSort(a, low+k, k, 0)
bitonicMerge(a, low, cnt, dire)


# Caller of bitonicSort for sorting the entire array of length N
# in ASCENDING order
def sort(a,N, up):
bitonicSort(a,0, N, up)


# Driver code to test above
a = [3, 7, 4, 8, 6, 2, 1, 5]
n = len(a)
up = 1


sort(a, n, up)
print (""\n\nSorted array is"")
for i in range(n):
print(""%d"" %a[i]),","def bitonic_sort(arr):
    # Write your code here
    arr.sort()
    for i in range(len(arr)):
        if arr[i] > arr[i+1]:
            arr[i], arr[i+1] = arr[i+1], arr[i]
    return arr

arr = [1, 5, 2, 4, 3, 6, 7, 8, 9, 10]
print(bitonic_sort(arr))

""""""

""""""

def bitonic"
2124,Write a Python program to Ways to remove a key from dictionary,"# Python code to demonstrate
# removal of dict. pair
# using del

# Initializing dictionary
test_dict = {""Arushi"" : 22, ""Anuradha"" : 21, ""Mani"" : 21, ""Haritha"" : 21}

# Printing dictionary before removal
print (""The dictionary before performing remove is : "" + str(test_dict))

# Using del to remove a dict
# removes Mani
del test_dict['Mani']

# Printing dictionary after removal
print (""The dictionary after remove is : "" + str(test_dict))

# Using del to remove a dict
# raises exception
del test_dict['Manjeet']","def remove_key(d, key):
    if key in d:
        del d[key]
    else:
        print(""Key not found"")

d = {'a': 1, 'b': 2, 'c': 3}
remove_key(d, 'a')
print(d)

""""""

def remove_key(d, key):
    if key in d:
        del d[key]
    else:
        print(""Key not found"")

d = {'"
2125,Write a Python Program for Gnome Sort,"# Python program to implement Gnome Sort


# A function to sort the given list using Gnome sort
def gnomeSort( arr, n):
index = 0
while index < n:
if index == 0:
index = index + 1
if arr[index] >= arr[index - 1]:
index = index + 1
else:
arr[index], arr[index-1] = arr[index-1], arr[index]
index = index - 1


return arr


# Driver Code
arr = [ 34, 2, 10, -9]
n = len(arr)


arr = gnomeSort(arr, n)
print ""Sorted sequence after applying Gnome Sort :"",
for i in arr:
print i,


# Contributed By Harshit Agrawal","def gnome_sort(arr):
    for i in range(len(arr)):
        for j in range(i, len(arr)):
            if arr[j] < arr[i]:
                arr[i], arr[j] = arr[j], arr[i]
    return arr

arr = [10, 4, 2, 5, 8, 9, 1, 7, 6, 3]
print(gnome_sort(arr))

""""""

def gnome_sort(arr):
    for"
2126,Reverse words in a given String in Python,"# Function to reverse words of string

def rev_sentence(sentence):

# first split the string into words
words = sentence.split(' ')

# then reverse the split string list and join using space
reverse_sentence = ' '.join(reversed(words))

# finally return the joined string
return reverse_sentence

if __name__ == ""__main__"":
input = 'geeks quiz practice code'
print (rev_sentence(input))","def reverse_words(s):
    return s[::-1]

print(reverse_words(""hello world""))

""""""

def reverse_words(s):
    return s[::-1]

print(reverse_words(""hello world""))"
2127,Write a Python program to Row-wise element Addition in Tuple Matrix,"# Python3 code to demonstrate working of
# Row-wise element Addition in Tuple Matrix
# Using enumerate() + list comprehension

# initializing list
test_list = [[('Gfg', 3), ('is', 3)], [('best', 1)], [('for', 5), ('geeks', 1)]]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing Custom eles
cus_eles = [6, 7, 8]

# Row-wise element Addition in Tuple Matrix
# Using enumerate() + list comprehension
res = [[sub + (cus_eles[idx], ) for sub in val] for idx, val in enumerate(test_list)]

# printing result
print(""The matrix after row elements addition : "" + str(res))","def add_tuple(tup1, tup2):
    return tuple(tup1[i] + tup2[i] for i in range(len(tup1)))

tup1 = (1, 2, 3, 4, 5)
tup2 = (6, 7, 8, 9, 10)

print(add_tuple(tup1, tup2))

""""""

def add_tuple(tup1, tup2):"
2128,Write a Python Program to print hollow half diamond hash pattern,"# python program to print
# hollow half diamond star


# function to print hollow
# half diamond star
def hollow_half_diamond(N):

# this for loop is for
# printing upper half
for i in range( 1, N + 1):
for j in range(1, i + 1):

# this is the condition to
# print ""#"" only on the
# boundaries
if i == j or j == 1:
print(""#"", end ="" "")

# print "" ""(space) on the rest
# of the area
else:
print("" "", end ="" "")
print()

# this for loop is to print lower half
for i in range(N - 1, 0, -1):

for j in range(1, i + 1):

if j == 1 or i == j:
print(""#"", end ="" "")

else:
print("" "", end ="" "")

print()

# Driver Code
if __name__ == ""__main__"":
N = 7
hollow_half_diamond( N )
","def hollow_diamond(n):
    for i in range(n):
        for j in range(n):
            print(end="" "")
        for k in range(n):
            print(""*"", end="" "")
        print()

n = int(input(""Enter the number of rows: ""))
hollow_diamond(n)

""""""

# Solution:

def hollow_diamond(n):
    for i in range(n):
        for j in range(n"
2129,Compute the condition number of a given matrix using NumPy in Python,"# Importing library
import numpy as np

# Creating a 2X2 matrix
matrix = np.array([[4, 2], [3, 1]])

print(""Original matrix:"")
print(matrix)

# Output
result = np.linalg.cond(matrix)

print(""Condition number of the matrix:"")
print(result)","import numpy as np

A = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

print(np.linalg.cond(A))

""""""

# Solution

import numpy as np

A = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])"
2130,How to extract paragraph from a website and save it as a text file in Python,"import urllib.request
from bs4 import BeautifulSoup

# here we have to pass url and path
# (where you want to save ur text file)
urllib.request.urlretrieve(""https://www.geeksforgeeks.org/grep-command-in-unixlinux/?ref=leftbar-rightbar"",
""/home/gpt/PycharmProjects/pythonProject1/test/text_file.txt"")

file = open(""text_file.txt"", ""r"")
contents = file.read()
soup = BeautifulSoup(contents, 'html.parser')

f = open(""test1.txt"", ""w"")

# traverse paragraphs from soup
for data in soup.find_all(""p""):
sum = data.get_text()
f.writelines(sum)

f.close()","import urllib.request
import urllib.parse
import urllib.error

url = ""http://www.python.org""

# Open the URL in a new tab and specify the user agent
# This will allow us to download the page
request = urllib.request.Request(url, headers={'User-Agent': 'Mozilla/5.0'})

# Read the response
response = urllib.request.urlopen(request)

# Print"
2131,Write a Python program to Minimum number of subsets with distinct elements using Counter,"# Python program to find Minimum number of
# subsets with distinct elements using Counter

# function to find Minimum number of subsets
# with distinct elements
from collections import Counter

def minSubsets(input):

# calculate frequency of each element
freqDict = Counter(input)

# get list of all frequency values
# print maximum from it
print (max(freqDict.values()))

# Driver program
if __name__ == ""__main__"":
input = [1, 2, 3, 3]
minSubsets(input)","def min_subsets(arr):
    count = Counter(arr)
    return count.most_common(1)[0][1]

print(min_subsets([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def min_subsets(arr):
    count = Counter(arr)
    return count.most_common(1)[0][1]

print(min_subsets([1, 2, 3, 4"
2132,How to add one polynomial to another using NumPy in Python,"# importing package
import numpy

# define the polynomials
# p(x) = 5(x**2) + (-2)x +5
px = (5,-2,5)

# q(x) = 2(x**2) + (-5)x +2
qx = (2,-5,2)

# add the polynomials
rx = numpy.polynomial.polynomial.polyadd(px,qx)

# print the resultant polynomial
print(rx)","import numpy as np

x = np.array([1, 2, 3, 4, 5])
y = np.array([1, 2, 3, 4, 5])

# Add the polynomial to the solution
x = np.append(x, y)

# Print the solution
print(x)

# Add another polynomial to the solution
x = np.append(x, y, axis=0)

# Print the solution
print(x)

# Add"
2133,Write a Python program to Numpy matrix.mean(),"# import the important module in python
import numpy as np

# make matrix with numpy
gfg = np.matrix('[64, 1; 12, 3]')

# applying matrix.mean() method
geeks = gfg.mean()

print(geeks)","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(A.mean())

""""""

# Solution

import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(A.mean())

""""""

# Solution

import numpy as np

A = np.array([[1"
2134,Write a Python program to Remove empty List from List,"# Python3 code to demonstrate
# Remove empty List from List
# using list comprehension

# Initializing list
test_list = [5, 6, [], 3, [], [], 9]

# printing original list
print(""The original list is : "" + str(test_list))

# Remove empty List from List
# using list comprehension
res = [ele for ele in test_list if ele != []]

# printing result
print (""List after empty list removal : "" + str(res))","def remove_empty_list(lst):
    for i in range(len(lst)):
        if lst[i] == []:
            lst.pop(i)
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(remove_empty_list(lst))

""""""

# Solution

def remove_empty_list(lst):
    for i in range(len(lst)):"
2135,Write a Python program to Read CSV Column into List without header,"import csv

# reading data from a csv file 'Data.csv'
with open('Data.csv', newline='') as file:

reader = csv.reader(file, delimiter = ' ')

# store the headers in a separate variable,
# move the reader object to point on the next row
headings = next(reader)

# output list to store all rows
Output = []
for row in reader:
Output.append(row[:])

for row_num, rows in enumerate(Output):
print('data in row number {} is {}'.format(row_num+1, rows))

print('headers were: ', headings)","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    data = list(csv_reader)

print(data)

# Solution:

# import csv
#
# with open('data.csv', 'r') as f:
#     csv_reader = csv.reader(f)
#     data = list(csv_reader)
#
# print(data)

# Solution:

#"
2136,Write a Python program to Create Nested Dictionary using given List,"# Python3 code to demonstrate working of
# Nested Dictionary with List
# Using loop + zip()

# initializing dictionary and list
test_dict = {'Gfg' : 4, 'is' : 5, 'best' : 9}
test_list = [8, 3, 2]

# printing original dictionary and list
print(""The original dictionary is : "" + str(test_dict))
print(""The original list is : "" + str(test_list))

# using zip() and loop to perform
# combining and assignment respectively.
res = {}
for key, ele in zip(test_list, test_dict.items()):
res[key] = dict([ele])

# printing result
print(""The mapped dictionary : "" + str(res))","def nested_dictionary(d):
    for i in d:
        if type(d[i]) == dict:
            print(d[i])
            nested_dictionary(d[i])
        else:
            print(d[i])

d = {'a': 1, 'b': 2, 'c': 3}
nested_dictionary(d)

""""""

def nested_dictionary(d):
    for i in d:
        if type(d[i"
2137,Split a column in Pandas dataframe and get part of it in Python,"import pandas as pd
import numpy as np
df = pd.DataFrame({'Geek_ID':['Geek1_id', 'Geek2_id', 'Geek3_id',
'Geek4_id', 'Geek5_id'],
'Geek_A': [1, 1, 3, 2, 4],
'Geek_B': [1, 2, 3, 4, 6],
'Geek_R': np.random.randn(5)})

# Geek_A Geek_B Geek_ID Geek_R
# 0 1 1 Geek1_id random number
# 1 1 2 Geek2_id random number
# 2 3 3 Geek3_id random number
# 3 2 4 Geek4_id random number
# 4 4 6 Geek5_id random number

print(df.Geek_ID.str.split('_').str[0])","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pima-indians-diabetes.csv?raw=true')

# Split the data into X and y
X = df.iloc[:, 0:8]
y = df.iloc[:, 8]

# Split the data into training and testing sets
from sklearn.model_selection import train_test_split
X_"
2138,Pretty print Linked List in Python,"class Node:
def __init__(self, val=None):
self.val = val
self.next = None


class LinkedList:
def __init__(self, head=None):
self.head = head

def __str__(self):

# defining a blank res variable
res = """"

# initializing ptr to head
ptr = self.head

# traversing and adding it to res
while ptr:
res += str(ptr.val) + "", ""
ptr = ptr.next

# removing trailing commas
res = res.strip("", "")

# chen checking if
# anything is present in res or not
if len(res):
return ""["" + res + ""]""
else:
return ""[]""


if __name__ == ""__main__"":

# defining linked list
ll = LinkedList()

# defining nodes
node1 = Node(10)
node2 = Node(15)
node3 = Node(20)

# connecting the nodes
ll.head = node1
node1.next = node2
node2.next = node3

# when print is called, by default
#it calls the __str__ method
print(ll)","# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def display(self, head):
        current = head
        while current:
            print(current.val, end=' ')
            current = current.next

    def insert(self, head, data):
        if head is None:
            head = ListNode(data)
            return"
2139,Write a Python program to Maximum and Minimum K elements in Tuple,"# Python3 code to demonstrate working of
# Maximum and Minimum K elements in Tuple
# Using sorted() + loop


# initializing tuple
test_tup = (5, 20, 3, 7, 6, 8)


# printing original tuple
print(""The original tuple is : "" + str(test_tup))


# initializing K
K = 2


# Maximum and Minimum K elements in Tuple
# Using sorted() + loop
res = []
test_tup = list(sorted(test_tup))


for idx, val in enumerate(test_tup):
if idx < K or idx >= len(test_tup) - K:
res.append(val)
res = tuple(res)


# printing result
print(""The extracted values : "" + str(res))","def max_k(tup):
    max_k = []
    for i in range(len(tup)):
        if tup[i] > max_k[-1]:
            max_k.append(tup[i])
        else:
            max_k.append(tup[i])
    return max_k

def min_k(tup):
    min_k = []
    for i in range(len(tup)):
        if tup"
2140,Write a Python Program for Pigeonhole Sort,"# Python program to implement Pigeonhole Sort */

# source code : ""https://en.wikibooks.org/wiki/
# Algorithm_Implementation/Sorting/Pigeonhole_sort""
def pigeonhole_sort(a):
# size of range of values in the list
# (ie, number of pigeonholes we need)
my_min = min(a)
my_max = max(a)
size = my_max - my_min + 1

# our list of pigeonholes
holes = [0] * size

# Populate the pigeonholes.
for x in a:
assert type(x) is int, ""integers only please""
holes[x - my_min] += 1

# Put the elements back into the array in order.
i = 0
for count in range(size):
while holes[count] > 0:
holes[count] -= 1
a[i] = count + my_min
i += 1


a = [8, 3, 2, 7, 4, 6, 8]
print(""Sorted order is : "", end ="" "")

pigeonhole_sort(a)

for i in range(0, len(a)):
print(a[i], end ="" "")
","def pigeonhole_sort(arr):
    max_value = max(arr)
    min_value = min(arr)
    count = 0
    for i in range(max_value + 1):
        if arr.count(i) > count:
            count = arr.count(i)
            arr.remove(i)
            arr.append(i)
    for i in range(len(arr)):
        arr[i] = count
    return arr

arr = [1, 2, 3"
2141,Write a Python program to Replace Substrings from String List,"# Python3 code to demonstrate
# Replace Substrings from String List
# using loop + replace() + enumerate()

# Initializing list1
test_list1 = ['GeeksforGeeks', 'is', 'Best', 'For', 'Geeks', 'And', 'Computer Science']
test_list2 = [['Geeks', 'Gks'], ['And', '&'], ['Computer', 'Comp']]

# printing original lists
print(""The original list 1 is : "" + str(test_list1))
print(""The original list 2 is : "" + str(test_list2))

# Replace Substrings from String List
# using loop + replace() + enumerate()
sub = dict(test_list2)
for key, val in sub.items():
for idx, ele in enumerate(test_list1):
if key in ele:
test_list1[idx] = ele.replace(key, val)

# printing result
print (""The list after replacement : "" + str(test_list1))","def replace_substring(string, substring, replacement):
    # your code goes here
    return string

# read the file
f = open('string_list.txt', 'r')

# read the file
string = f.read()

# read the file
substring = 'abcdefghijklmnopqrstuvwxyz'
replacement = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

# replace the substring in the string
s ="
2142,"Write a Python dictionary, set and counter to check if frequencies can become same","# Function to Check if frequency of all characters
# can become same by one removal
from collections import Counter

def allSame(input):

# calculate frequency of each character
# and convert string into dictionary
dict=Counter(input)

# now get list of all values and push it
# in set
same = list(set(dict.values()))

if len(same)>2:
print('No')
elif len (same)==2 and same[1]-same[0]>1:
print('No')
else:
print('Yes')


# now check if frequency of all characters
# can become same

# Driver program
if __name__ == ""__main__"":
input = 'xxxyyzzt'
allSame(input)","def solution(d):
    d = dict(d)
    for i in d:
        if d[i] > 1:
            d[i] = d[i] // 2
    return d

print(solution({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12"
2143,Creating a dataframe from Pandas series in Python,"import pandas as pd
import matplotlib.pyplot as plt

author = ['Jitender', 'Purnima', 'Arpit', 'Jyoti']

auth_series = pd.Series(author)
print(auth_series)","import pandas as pd

series = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a dataframe from the series
df = pd.DataFrame(series)

# Print the head of the dataframe
print(df.head())

# Print the tail of the dataframe
print(df.tail())

# Print the shape of the dataframe
print(df.shape)

# Print the head and tail of the data"
2144,Write a Python program to print even numbers in a list,"# Python program to print Even Numbers in a List

# list of numbers
list1 = [10, 21, 4, 45, 66, 93]

# iterating each number in list
for num in list1:

# checking condition
if num % 2 == 0:
print(num, end = "" "")","def even_numbers(nums):
    for num in nums:
        if num % 2 == 0:
            print(num)

nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
even_numbers(nums)

""""""

def even_numbers(nums):
    for num in nums:
        if num % 2 == 0:
            print(num)

nums = [1, 2, 3, 4"
2145,Write a Python program to Sort Dictionary by Values Summation,"# Python3 code to demonstrate working of
# Sort Dictionary by Values Summation
# Using dictionary comprehension + sum() + sorted()

# initializing dictionary
test_dict = {'Gfg' : [6, 7, 4], 'is' : [4, 3, 2], 'best' : [7, 6, 5]}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# summing all the values using sum()
temp1 = {val: sum(int(idx) for idx in key)
for val, key in test_dict.items()}

# using sorted to perform sorting as required
temp2 = sorted(temp1.items(), key = lambda ele : temp1[ele[0]])

# rearrange into dictionary
res = {key: val for key, val in temp2}

# printing result
print(""The sorted dictionary : "" + str(res))","def solution(d):
    d = sorted(d.items(), key=lambda x: x[1], reverse=True)
    return d

""""""

def solution(d):
    d = sorted(d.items(), key=lambda x: x[1], reverse=True)
    return d

print(solution({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}))

""""""

def solution(d"
2146,numpy.moveaxis() function | Python,"# Python program explaining
# numpy.moveaxis() function

# importing numpy as geek
import numpy as geek

arr = geek.zeros((1, 2, 3, 4))

gfg = geek.moveaxis(arr, 0, -1).shape

print (gfg)","import numpy as np

a = np.array([[1, 2, 3],
              [4, 5, 6]])

print(a.moveaxis(0, 2))

""""""

# Solution

# numpy.moveaxis() function
#
# Given an array and a destination axis, move the array to the given axis.
#
# For example, move axis 0 to the first position, move axis 1 to the second position,
# and so on.
#
# Note that the order of the"
2147,Write a Python program to Test if Substring occurs in specific position,"# Python3 code to demonstrate working of
# Test if Substring occurs in specific position
# Using loop

# initializing string
test_str = ""Gfg is best""

# printing original string
print(""The original string is : "" + test_str)

# initializing range
i, j = 7, 11

# initializing substr
substr = ""best""

# Test if Substring occurs in specific position
# Using loop
res = True
k = 0
for idx in range(len(test_str)):
if idx >= i and idx < j:
if test_str[idx] != substr[k]:
res = False
break
k = k + 1

# printing result
print(""Does string contain substring at required position ? : "" + str(res))","def isSubstring(s, p):
    for i in range(len(s)):
        if s[i:i+len(p)] == p:
            return True
    return False

print(isSubstring(""abcd"", ""ab""))
print(isSubstring(""abcd"", ""abc""))
print(isSubstring(""abcd"", ""abcde""))
print(isSubstring(""abcd"", ""abcdef""))
print(isSubstring(""abcd"", ""abcdefg""))"
2148,Write a Python program to Elements Frequency in Mixed Nested Tuple,"# Python3 code to demonstrate working of
# Elements Frequency in Mixed Nested Tuple
# Using recursion + loop

# helper_fnc
def flatten(test_tuple):
for tup in test_tuple:
if isinstance(tup, tuple):
yield from flatten(tup)
else:
yield tup

# initializing tuple
test_tuple = (5, 6, (5, 6), 7, (8, 9), 9)

# printing original tuple
print(""The original tuple : "" + str(test_tuple))

# Elements Frequency in Mixed Nested Tuple
# Using recursion + loop
res = {}
for ele in flatten(test_tuple):
if ele not in res:
res[ele] = 0
res[ele] += 1

# printing result
print(""The elements frequency : "" + str(res))","def elements_frequency(tuple):
    return tuple[0] * tuple[1]

tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print(elements_frequency(tuple))

""""""

# Solution:

def elements_frequency(tuple):
    return tuple[0] * tuple[1]

tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print"
2149,Write a Python program to Permutation of a given string using inbuilt function,"# Function to find permutations of a given string
from itertools import permutations

def allPermutations(str):

# Get all permutations of string 'ABC'
permList = permutations(str)

# print all permutations
for perm in list(permList):
print (''.join(perm))

# Driver program
if __name__ == ""__main__"":
str = 'ABC'
allPermutations(str)","def permutation(s):
    if len(s) == 1:
        return [s]
    else:
        return [s[0] + permutation(s[1:]) for i in range(len(s))]

print(permutation(""abc""))

""""""

# Solution 1

def permutation(s):
    if len(s) == 1:
        return [s]
    else:
        return [s[0] + permutation(s["
2150,Write a Python program to Scoring Matrix using Dictionary,"# Python3 code to demonstrate working of
# Scoring Matrix using Dictionary
# Using loop

# initializing list
test_list = [['gfg', 'is', 'best'], ['gfg', 'is', 'for', 'geeks']]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing test dict
test_dict = {'gfg' : 5, 'is' : 10, 'best' : 13, 'for' : 2, 'geeks' : 15}

# Scoring Matrix using Dictionary
# Using loop
res = []
for sub in test_list:
sum = 0
for val in sub:
if val in test_dict:
sum += test_dict[val]
res.append(sum)

# printing result
print(""The Row scores : "" + str(res))","def solution(n, m, arr):
    # Write your code here
    # Create a dictionary to store the scores
    score = {}
    # Create a matrix to store the scores
    matrix = []
    # Create a matrix to store the scores
    for i in range(n):
        matrix.append([])
        for j in range(m):
            matrix[i].append(0)
    # Populate the matrix with the scores
    for i in range(n):
        for j in"
2151,Write a Python Lambda with underscore as an argument,"remainder = lambda num: num % 2

print(remainder(5))","def solution(x):
    return x + 1

Write a Python function that takes an integer x and returns the number of digits in x.

For example, solution(123) should return 3, because 123 has 3 digits.

For example, solution(1234) should return 5, because 1234 has 5 digits.

For example, solution(12345) should return 0, because 1234 has no digits.

For example, solution(12345678) should return 2, because 1234 has 2 digits.

For example"
2152,Find a matrix or vector norm using NumPy in Python,"# import library
import numpy as np


# initialize vector
vec = np.arange(10)


# compute norm of vector
vec_norm = np.linalg.norm(vec)


print(""Vector norm:"")
print(vec_norm)","import numpy as np

# Create a matrix
A = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

# Create a vector
b = np.array([1, 2, 3, 4])

# Solve the problem
x = np.linalg.solve(A, b)

# Print the solution
print(x)

# Create a matrix
A = np.array"
2153,Conditional operation on Pandas DataFrame columns in Python,"# importing pandas as pd
import pandas as pd

# Create the dataframe
df = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/2011'],
'Product':['Umbrella', 'Matress', 'Badminton', 'Shuttle'],
'Last Price':[1200, 1500, 1600, 352],
'Updated Price':[1250, 1450, 1550, 400],
'Discount':[10, 10, 10, 10]})

# Print the dataframe
print(df)","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5],
                   'col2': [10, 20, 30, 40, 50]})

# 1. Create a boolean column named 'is_even'
df['is_even'] = df['col1'] % 2 == 0

# 2. Print the dataframe
print(df)

# 3. Print the boolean column
print(df['is_even'])

#"
2154,Write a Python program for removing i-th character from a string,"# Python3 program for removing i-th
# indexed character from a string

# Removes character at index i
def remove(string, i):

# Characters before the i-th indexed
# is stored in a variable a
a = string[ : i]

# Characters after the nth indexed
# is stored in a variable b
b = string[i + 1: ]

# Returning string after removing
# nth indexed character.
return a + b

# Driver Code
if __name__ == '__main__':

string = ""geeksFORgeeks""

# Remove nth index element
i = 5

# Print the new string
print(remove(string, i))","def remove_i(string, i):
    return string[:i] + string[i+1:]

print(remove_i(""python"", 2))

""""""

def remove_i(string, i):
    return string[:i] + string[i+1:]

print(remove_i(""python"", 2))

""""""

def remove_i(string, i):
    return string[:i] + string[i+1:]

print(remove_i(""python"
2155,Concatenated string with uncommon characters in Python,"# Function to concatenated string with uncommon
# characters of two strings

def uncommonConcat(str1, str2):

# convert both strings into set
set1 = set(str1)
set2 = set(str2)

# take intersection of two sets to get list of
# common characters
common = list(set1 & set2)

# separate out characters in each string
# which are not common in both strings
result = [ch for ch in str1 if ch not in common] + [ch for ch in str2 if ch not in common]

# join each character without space to get
# final string
print( ''.join(result) )

# Driver program
if __name__ == ""__main__"":
str1 = 'aacdb'
str2 = 'gafd'
uncommonConcat(str1,str2)","def solution(s):
    # Write your code here
    s = s.lower()
    s = s.replace(' ', '')
    s = s.replace('.', '')
    s = s.replace(',', '')
    s = s.replace('!', '')
    s = s.replace('?', '')
    s = s.replace('-', '')
    s = s.replace('+', '')
    s = s.replace(' ', '')
    s ="
2156,Clean the string data in the given Pandas Dataframe in Python,"# importing pandas as pd
import pandas as pd

# Create the dataframe
df = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/2011'],
'Product':[' UMbreLla', ' maTress', 'BaDmintoN ', 'Shuttle'],
'Updated_Price':[1250, 1450, 1550, 400],
'Discount':[10, 8, 15, 10]})

# Print the dataframe
print(df)","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Score': [85, 90, 95, 100, 90, 100]})

df.head()

df.columns = ['Name', 'Score']
df.head()

df.columns = ['Name', 'Score']
df.head()

df.columns = ['Name', 'Score']"
2157,Write a Python program to a Sort Matrix by index-value equality count,"# Python3 code to demonstrate working of
# Sort Matrix by index-value equality count
# Using sort() + len() + enumerate()


def get_idx_ele_count(row):

# getting required count
# element and index compared, if equal added
# in list, length computed using len()
return len([ele for idx, ele in enumerate(row) if ele == idx])


# initializing list
test_list = [[3, 1, 2, 5, 4], [0, 1, 2, 3, 4],
[6, 5, 4, 3, 2], [0, 5, 4, 2]]

# printing original list
print(""The original list is : "" + str(test_list))

# inplace sorting using sort()
test_list.sort(key=get_idx_ele_count)

# printing result
print(""Sorted List : "" + str(test_list))","def solution(matrix):
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j] == 0:
                matrix[i][j] = -1
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j] == -1:
                matrix[i][j] = 0
    return matrix"
2158,How to subtract one polynomial to another using NumPy in Python,"# importing package
import numpy

# define the polynomials
# p(x) = 5(x**2) + (-2)x +5
px = (5,-2,5)

# q(x) = 2(x**2) + (-5)x +2
qx = (2,-5,2)

# subtract the polynomials
rx = numpy.polynomial.polynomial.polysub(px,qx)

# print the resultant polynomial
print(rx)","import numpy as np

x = np.array([1, 2, 3, 4, 5])
y = np.array([1, 2, 3, 4, 5])

print(x - y)

# Output:
[[-1. -1.]
 [-1. -1.]
 [-1. -1.]
 [-1. -1.]
 [-1. -1.]]

""""""

import numpy as np

x = np.array([1, 2, 3,"
2159,Write a Python program to Convert numeric words to numbers,"# Python3 code to demonstrate working of
# Convert numeric words to numbers
# Using join() + split()

help_dict = {
'one': '1',
'two': '2',
'three': '3',
'four': '4',
'five': '5',
'six': '6',
'seven': '7',
'eight': '8',
'nine': '9',
'zero' : '0'
}

# initializing string
test_str = ""zero four zero one""

# printing original string
print(""The original string is : "" + test_str)

# Convert numeric words to numbers
# Using join() + split()
res = ''.join(help_dict[ele] for ele in test_str.split())

# printing result
print(""The string after performing replace : "" + res)","def convert_to_numbers(word):
    return int(word)

print(convert_to_numbers(""one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen"".split()))

""""""

# Solution 1

def convert_to_numbers(word):
    return int(word)

print(convert_to_numbers(""one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen"".split()))

# Solution"
2160,Write a Python program to Sort String list by K character frequency,"# Python3 code to demonstrate working of
# Sort String list by K character frequency
# Using sorted() + count() + lambda


# initializing list
test_list = [""geekforgeeks"", ""is"", ""best"", ""for"", ""geeks""]


# printing original list
print(""The original list is : "" + str(test_list))


# initializing K
K = 'e'


# ""-"" sign used to reverse sort
res = sorted(test_list, key = lambda ele: -ele.count(K))


# printing results
print(""Sorted String : "" + str(res))","import string

def sort_string(string, k):
    # your code goes here
    return string

def main():
    string = ""This is a string""
    k = 3
    print(sort_string(string, k))

if __name__ == ""__main__"":
    main()"
2161,Write a Python program to Swap elements in String list,"# Python3 code to demonstrate
# Swap elements in String list
# using replace() + list comprehension

# Initializing list
test_list = ['Gfg', 'is', 'best', 'for', 'Geeks']

# printing original lists
print(""The original list is : "" + str(test_list))

# Swap elements in String list
# using replace() + list comprehension
res = [sub.replace('G', '-').replace('e', 'G').replace('-', 'e') for sub in test_list]

# printing result
print (""List after performing character swaps : "" + str(res))","def swap_elements(list1, list2):
    list1[0], list1[1] = list1[1], list1[0]
    list2[0], list2[1] = list2[1], list2[0]
    return list1, list2

list1 = [""a"", ""b"", ""c""]
list2 = [""d"", ""e"", ""f""]

print(swap_elements(list1, list2))

""""""

def swap_e"
2162,Write a Python program to Difference between two lists,"# Python code t get difference of two lists
# Using set()
def Diff(li1, li2):
return list(set(li1) - set(li2)) + list(set(li2) - set(li1))


# Driver Code
li1 = [10, 15, 20, 25, 30, 35, 40]
li2 = [25, 40, 35]
print(Diff(li1, li2))","def diff(list1, list2):
    diff = []
    for i in range(len(list1)):
        diff.append(list1[i] - list2[i])
    return diff

print(diff([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))

""""""

def diff(list1, list2):
    diff = []
    for i in range(len(list1)):
        diff.append(list1[i]"
2163,numpy string operations | count() function in Python,"# Python program explaining
# numpy.char.count() method

# importing numpy as geek
import numpy as geek

# input arrays
in_arr = geek.array(['Sayantan', ' Sayan ', 'Sayansubhra'])
print (""Input array : "", in_arr)

# output arrays
out_arr = geek.char.count(in_arr, sub ='an')
print (""Output array: "", out_arr)","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(a.sum())
print(a.mean())
print(a.max())
print(a.min())
print(a.std())
print(a.var())

""""""

# Solution

import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
2164,Write a Python program to Convert Matrix to dictionary,"# Python3 code to demonstrate working of
# Convert Matrix to dictionary
# Using dictionary comprehension + range()

# initializing list
test_list = [[5, 6, 7], [8, 3, 2], [8, 2, 1]]

# printing original list
print(""The original list is : "" + str(test_list))

# using dictionary comprehension for iteration
res = {idx + 1 : test_list[idx] for idx in range(len(test_list))}

# printing result
print(""The constructed dictionary : "" + str(res))","def matrix_to_dict(matrix):
    dictionary = {}
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            dictionary[matrix[i][j]] = matrix[i][j]
    return dictionary

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(matrix_to_dict(matrix))

""""""

def matrix_to_dict(mat"
2165,Write a Python program to Specific Characters Frequency in String List,"# Python3 code to demonstrate working of
# Specific Characters Frequency in String List
# Using join() + Counter()
from collections import Counter

# initializing lists
test_list = [""geeksforgeeks is best for geeks""]

# printing original list
print(""The original list : "" + str(test_list))

# char list
chr_list = ['e', 'b', 'g']

# dict comprehension to retrieve on certain Frequencies
res = {key:val for key, val in dict(Counter("""".join(test_list))).items() if key in chr_list}

# printing result
print(""Specific Characters Frequencies : "" + str(res))","def frequency(s):
    d = {}
    for i in s:
        if i in d:
            d[i] += 1
        else:
            d[i] = 1
    return d

def solution(s):
    d = frequency(s)
    return len(d)

print(solution(""abcdefghijklmnopqrstuvwxyz""))

""""""

def frequency(s):
    d = {}
    for i in s:
        if"
2166,Write a Python program to Sort dictionaries list by Keys Value list index,"# Python3 code to demonstrate working of
# Sort dictionaries list by Key's Value list index
# Using sorted() + lambda

# initializing lists
test_list = [{""Gfg"" : [6, 7, 8], ""is"" : 9, ""best"" : 10},
{""Gfg"" : [2, 0, 3], ""is"" : 11, ""best"" : 19},
{""Gfg"" : [4, 6, 9], ""is"" : 16, ""best"" : 1}]

# printing original list
print(""The original list : "" + str(test_list))

# initializing K
K = ""Gfg""

# initializing idx
idx = 2

# using sorted() to perform sort in basis of 1 parameter key and
# index
res = sorted(test_list, key = lambda ele: ele[K][idx])

# printing result
print(""The required sort order : "" + str(res))","def sort_dict(d):
    for i in d:
        d[i].sort()
    return d

d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}
print(sort_dict(d))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
2167,Find the size of a Dictionary in Python,"import sys

# sample Dictionaries
dic1 = {""A"": 1, ""B"": 2, ""C"": 3}
dic2 = {""Geek1"": ""Raju"", ""Geek2"": ""Nikhil"", ""Geek3"": ""Deepanshu""}
dic3 = {1: ""Lion"", 2: ""Tiger"", 3: ""Fox"", 4: ""Wolf""}

# print the sizes of sample Dictionaries
print(""Size of dic1: "" + str(sys.getsizeof(dic1)) + ""bytes"")
print(""Size of dic2: "" + str(sys.getsizeof(dic2)) + ""bytes"")
print(""Size of dic3: "" + str(sys.getsizeof(dic3)) + ""bytes"")","def size_dictionary(d):
    return len(d)

# Test your solution
print(size_dictionary({1:2, 3:4, 5:6, 7:8, 9:10}))

""""""

def size_dictionary(d):
    return len(d)

# Test your solution
print(size_dictionary({1:2, 3:4, 5:6, 7:8, 9:10}))

""""""

def size_dictionary(d):"
2168,Write a Python program to find the type of IP Address using Regex,"# Python program to find the type of Ip address


# re module provides support
# for regular expressions
import re


# Make a regular expression
# for validating an Ipv4
ipv4 = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(
25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(
25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(
25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''


# Make a regular expression
# for validating an Ipv6
ipv6 = '''(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|
([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:)
{1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1
,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}
:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{
1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA
-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a
-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0
-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,
4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}
:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9
])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0
-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]
|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]
|1{0,1}[0-9]){0,1}[0-9]))'''


# Define a function for finding
# the type of Ip address
def find(Ip):

# pass the regular expression
# and the string in search() method
if re.search(ipv4, Ip):
print(""IPv4"")
elif re.search(ipv6, Ip):
print(""IPv6"")
else:
print(""Neither"")


# Driver Code
if __name__ == '__main__' :

# Enter the Ip address
Ip = ""192.0.2.126""

# calling run function
find(Ip)

Ip = ""3001:0da8:75a3:0000:0000:8a2e:0370:7334""
find(Ip)

Ip = ""36.12.08.20.52""
find(Ip)","import re

ip_address = input(""Enter an IP address: "")

# Check if the IP address is valid
if re.match(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', ip"
2169,Write a Python: Get List of all empty Directories,"# Python program to list out
# all the empty directories


import os

# List to store all empty
# directories
empty = []

# Traversing through Test
for root, dirs, files in os.walk('Test'):

# Checking the size of tuple
if not len(dirs) and not len(files):

# Adding the empty directory to
# list
empty.append(root)

Print(""Empty Directories:"")
print(empty)","def get_list_of_empty_directories(path):
    list_of_empty_directories = []
    for root, dirs, files in os.walk(path):
        for file in files:
            if os.path.isfile(os.path.join(root, file)):
                if os.stat(os.path.join(root, file)).st_size == 0:
                    list_of_empty_directories.append(os.path.join(root, file))"
2170,Generate Random Numbers From The Uniform Distribution using NumPy in Python,"# importing module
import numpy as np


# numpy.random.uniform() method
r = np.random.uniform(size=4)

# printing numbers
print(r)","import numpy as np

# Generate a random array of size 10 using NumPy
np.random.seed(0)
x = np.random.randint(0, 100, 10)

# Generate a random array of size 10 using NumPy
np.random.seed(0)
y = np.random.randint(0, 100, 10)

# Generate a random array of size 10 using NumPy
np.random.seed(0)
z = np.random.randint"
2171,Write a Python program to print odd numbers in a List,"# Python program to print odd Numbers in a List

# list of numbers
list1 = [10, 21, 4, 45, 66, 93]

# iterating each number in list
for num in list1:

# checking condition
if num % 2 != 0:
print(num, end = "" "")","def odd_numbers(input_list):
    for i in range(len(input_list)):
        if input_list[i] % 2 == 1:
            print(input_list[i])

input_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
odd_numbers(input_list)

""""""

def odd_numbers(input_list):
    for i in range(len(input_list)):
        if"
2172,Write a Python program to Check if a given string is binary string or not,"# Python program to check
# if a string is binary or not


# function for checking the
# string is accepted or not
def check(string) :


# set function convert string
# into set of characters .
p = set(string)


# declare set of '0', '1' .
s = {'0', '1'}


# check set p is same as set s
# or set p contains only '0'
# or set p contains only '1'
# or not, if any one condition
# is true then string is accepted
# otherwise not .
if s == p or p == {'0'} or p == {'1'}:
print(""Yes"")
else :
print(""No"")





# driver code
if __name__ == ""__main__"" :


string = ""101010000111""


# function calling
check(string)","def is_binary(string):
    if len(string) % 2 == 0:
        return True
    else:
        return False

print(is_binary(""abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
2173,Write a Python program to Extract tuples having K digit elements,"# Python3 code to demonstrate working of
# Extract K digit Elements Tuples
# Using all() + list comprehension

# initializing list
test_list = [(54, 2), (34, 55), (222, 23), (12, 45), (78, )]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing K
K = 2

# using len() and str() to check length and
# perform string conversion
res = [sub for sub in test_list if all(len(str(ele)) == K for ele in sub)]

# printing result
print(""The Extracted tuples : "" + str(res))","import collections

def extract_k_digit_elements(s):
    return tuple(s[i:i+10] for i in range(0, len(s), 10))

def extract_k_digit_elements_2(s):
    return tuple(s[i:i+10] for i in range(0, len(s), 10))

def extract_k_digit_elements_3(s):
    return tuple(s[i:i+10] for i in"
2174,Write a Python program to Convert Nested Tuple to Custom Key Dictionary,"# Python3 code to demonstrate working of
# Convert Nested Tuple to Custom Key Dictionary
# Using list comprehension + dictionary comprehension

# initializing tuple
test_tuple = ((4, 'Gfg', 10), (3, 'is', 8), (6, 'Best', 10))

# printing original tuple
print(""The original tuple : "" + str(test_tuple))

# Convert Nested Tuple to Custom Key Dictionary
# Using list comprehension + dictionary comprehension
res = [{'key': sub[0], 'value': sub[1], 'id': sub[2]}
for sub in test_tuple]

# printing result
print(""The converted dictionary : "" + str(res))","def convert_tuple(tup):
    d = {}
    for i in tup:
        for j in i:
            d[j] = i
    return d

tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print(convert_tuple(tup))

""""""

# Solution

def convert_tuple(tup):
    d = {}
    for i in tup:
        for j"
2175,Using dictionary to remap values in Pandas DataFrame columns in Python,"# importing pandas as pd
import pandas as pd

# Creating the DataFrame
df = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/2011'],
'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],
'Cost':[10000, 5000, 15000, 2000]})

# Print the dataframe
print(df)","import pandas as pd

# Create a dictionary to map the column names to the values
column_mapping = {
    'Name': 'Name',
    'Age': 'Age',
    'Gender': 'Gender',
    'DOB': 'DOB',
    'Job': 'Job',
    'Salary': 'Salary'
}

# Create a dataframe from the dictionary
df = pd.DataFrame(column_mapping, columns=['Name', 'Age', '"
2176,Remove all the occurrences of an element from a list in Python,"# Python 3 code to demonstrate
# the removal of all occurrences of a
# given item using list comprehension

def remove_items(test_list, item):

# using list comprehension to perform the task
res = [i for i in test_list if i != item]

return res

# driver code
if __name__==""__main__"":

# initializing the list
test_list = [1, 3, 4, 6, 5, 1]

# the item which is to be removed
item = 1

# printing the original list
print (""The original list is : "" + str(test_list))

# calling the function remove_items()
res = remove_items(test_list, item)

# printing result
print (""The list after performing the remove operation is : "" + str(res))","def remove_all(lst, val):
    lst.remove(val)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
remove_all(lst, 8)
print(lst)

""""""

def remove_all(lst, val):
    lst.remove(val)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
remove_all("
2177,Insert row at given position in Pandas Dataframe in Python,"# importing pandas as pd
import pandas as pd


# Let's create the dataframe
df = pd.DataFrame({'Date':['10/2/2011', '12/2/2011', '13/2/2011', '14/2/2011'],
'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],
'Cost':[10000, 5000, 15000, 2000]})


# Let's visualize the dataframe
print(df)","import pandas as pd

# Create a Pandas Dataframe
df = pd.DataFrame({'col1': [1, 2, 3, 4, 5],
                   'col2': [10, 20, 30, 40, 50]})

# Insert row at given position in Pandas Dataframe in Python
df.loc[0, 'col1'] = 100

# Print the new Dataframe
print(df)

# Create a Pandas Dataframe
df = pd.DataFrame({"
2178,Write a Python program to Matrix Row subset,"# Python3 code to demonstrate working of
# Matrix Row subset
# Using any() + all() + list comprehension

# initializing lists
test_list = [[4, 5, 7], [2, 3, 4], [9, 8, 0]]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing check Matrix
check_matr = [[2, 3], [1, 2], [9, 0]]

# Matrix Row subset
# Using any() + all() + list comprehension
res = [ele for ele in check_matr if any(all(a in sub for a in ele)
for sub in test_list)]

# printing result
print(""Matrix row subsets : "" + str(res))","def MatrixRowSubset(matrix, row, col):
    if row == len(matrix):
        return False
    if col == len(matrix[0]):
        return True
    if matrix[row][col] == 0:
        return False
    matrix[row][col] = 0
    return MatrixRowSubset(matrix, row + 1, col) or MatrixRowSubset(matrix, row, col + 1)

""""""

def MatrixRowSubset(matrix, row, col"
2179,How to inverse a matrix using NumPy in Python,"# Python program to inverse
# a matrix using numpy

# Import required package
import numpy as np

# Taking a 3 * 3 matrix
A = np.array([[6, 1, 1],
[4, -2, 5],
[2, 8, 7]])

# Calculating the inverse of the matrix
print(np.linalg.inv(A))","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(np.linalg.inv(A))

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12"
2180,How to create a list of object in Python class,"# Python3 code here creating class
class geeks:
def __init__(self, name, roll):
self.name = name
self.roll = roll

# creating list
list = []

# appending instances to list
list.append( geeks('Akash', 2) )
list.append( geeks('Deependra', 40) )
list.append( geeks('Reaper', 44) )

for obj in list:
print( obj.name, obj.roll, sep =' ' )

# We can also access instances attributes
# as list[0].name, list[0].roll and so on.","class MyList(list):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.__data = []
    
    def __getitem__(self, index):
        return self.__data[index]
    
    def __setitem__(self, index, value):
        self.__data[index] = value
    
    def __delitem__(self, index):
        del self.__data[index"
2181,Write a Python Program for Recursive Insertion Sort,"# Recursive Python program for insertion sort


# Recursive function to sort an array using insertion sort
def insertionSortRecursive(arr, n):
# base case
if n <= 1:
return


# Sort first n-1 elements
insertionSortRecursive(arr, n - 1)


# Insert last element at its correct position in sorted array.
last = arr[n - 1]
j = n - 2


# Move elements of arr[0..i-1], that are
# greater than key, to one position ahead
# of their current position
while (j >= 0 and arr[j] > last):
arr[j + 1] = arr[j]
j = j - 1
arr[j + 1] = last




# Driver program to test insertion sort
if __name__ == '__main__':
A = [-7, 11, 6, 0, -3, 5, 10, 2]
n = len(A)
insertionSortRecursive(A, n)
print(A)


# Contributed by Harsh Valecha,
# Edited by Abraar Masud Nafiz.","def insertionSort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j] :
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(insertionSort(arr))

""""""

def insertionSort(arr):"
2182,How to get values of an NumPy array at certain index positions in Python,"# Importing Numpy module
import numpy as np

# Creating 1-D Numpy array
a1 = np.array([11, 10, 22, 30, 33])
print(""Array 1 :"")
print(a1)

a2 = np.array([1, 15, 60])
print(""Array 2 :"")
print(a2)

print(""\nTake 1 and 15 from Array 2 and put them in\
1st and 5th position of Array 1"")

a1.put([0, 4], a2)

print(""Resultant Array :"")
print(a1)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])

a[0, 1] = 7
a[1, 0] = 8

print(a)

# Output:
# [[1 7]
#  [4 5]
#  [8 6]]

# a[0, 1] = 7
# a[1, 0] = 8

# Output:
# [[1 7]
#"
2183,Write a Python program to Convert Binary tuple to Integer,"# Python3 code to demonstrate working of
# Convert Binary tuple to Integer
# Using join() + list comprehension + int()

# initializing tuple
test_tup = (1, 1, 0, 1, 0, 0, 1)

# printing original tuple
print(""The original tuple is : "" + str(test_tup))

# using int() with base to get actual number
res = int("""".join(str(ele) for ele in test_tup), 2)

# printing result
print(""Decimal number is : "" + str(res))","def convert_binary_tuple(tup):
    return int(''.join(map(str, tup)), 2)

print(convert_binary_tuple((1, 2, 3)))

""""""

def convert_binary_tuple(tup):
    return int(''.join(map(str, tup)), 2)

print(convert_binary_tuple((1, 2, 3)))"
2184,How to Download All Images from a Web Page in Python,"from bs4 import *
import requests
import os

# CREATE FOLDER
def folder_create(images):
try:
folder_name = input(""Enter Folder Name:- "")
# folder creation
os.mkdir(folder_name)

# if folder exists with that name, ask another name
except:
print(""Folder Exist with that name!"")
folder_create()

# image downloading start
download_images(images, folder_name)


# DOWNLOAD ALL IMAGES FROM THAT URL
def download_images(images, folder_name):

# intitial count is zero
count = 0

# print total images found in URL
print(f""Total {len(images)} Image Found!"")

# checking if images is not zero
if len(images) != 0:
for i, image in enumerate(images):
# From image tag ,Fetch image Source URL

# 1.data-srcset
# 2.data-src
# 3.data-fallback-src
# 4.src

# Here we will use exception handling

# first we will search for ""data-srcset"" in img tag
try:
# In image tag ,searching for ""data-srcset""
image_link = image[""data-srcset""]

# then we will search for ""data-src"" in img
# tag and so on..
except:
try:
# In image tag ,searching for ""data-src""
image_link = image[""data-src""]
except:
try:
# In image tag ,searching for ""data-fallback-src""
image_link = image[""data-fallback-src""]
except:
try:
# In image tag ,searching for ""src""
image_link = image[""src""]

# if no Source URL found
except:
pass

# After getting Image Source URL
# We will try to get the content of image
try:
r = requests.get(image_link).content
try:

# possibility of decode
r = str(r, 'utf-8')

except UnicodeDecodeError:

# After checking above condition, Image Download start
with open(f""{folder_name}/images{i+1}.jpg"", ""wb+"") as f:
f.write(r)

# counting number of image downloaded
count += 1
except:
pass

# There might be possible, that all
# images not download
# if all images download
if count == len(images):
print(""All Images Downloaded!"")

# if all images not download
else:
print(f""Total {count} Images Downloaded Out of {len(images)}"")

# MAIN FUNCTION START
def main(url):

# content of URL
r = requests.get(url)

# Parse HTML Code
soup = BeautifulSoup(r.text, 'html.parser')

# find all images in URL
images = soup.findAll('img')

# Call folder create function
folder_create(images)


# take url
url = input(""Enter URL:- "")

# CALL MAIN FUNCTION
main(url)","import urllib.request
import os

url = ""https://www.python.org/ftp/python/3.8.5/python-3.8.5-amd64.exe""

print(""Downloading: "" + url)

try:
    response = urllib.request.urlopen(url)
    print(""File Downloaded"")
except urllib.error.URLError as e:
    print(""Error:"", e.reason)

print(""Done"")"
2185,Write a Python program to Get list of running processes,"import wmi


# Initializing the wmi constructor
f = wmi.WMI()


# Printing the header for the later columns
print(""pid Process name"")


# Iterating through all the running processes
for process in f.Win32_Process():

# Displaying the P_ID and P_Name of the process
print(f""{process.ProcessId:<10} {process.Name}"")","import multiprocessing
import os

def get_process_info(process_name):
    process_info = os.popen('ps -A -o pid,ppid,args').read()
    process_info = process_info.split('\n')
    process_info = process_info[process_info.index(process_name) + 1:]
    process_info = [x.split() for x in process_info]
    process_info = [x for x in process_info if x"
2186,Write a Python program to Split String on vowels,"# Python3 code to demonstrate working of
# Split String on vowels
# Using split() + regex
import re


# initializing strings
test_str = 'GFGaBste4oCS'


# printing original string
print(""The original string is : "" + str(test_str))


# splitting on vowels
# constructing vowels list
# and separating using | operator
res = re.split('a|e|i|o|u', test_str)


# printing result
print(""The splitted string : "" + str(res))","def split_string(string):
    vowels = ['a', 'e', 'i', 'o', 'u']
    vowel_count = 0
    for char in string:
        if char in vowels:
            vowel_count += 1
    return vowel_count

print(split_string('Python is a high-level general-purpose programming language. Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code.'))

""""""

def split_"
2187,Write a Python program to Ways to add row/columns in numpy array,"# Python code to demonstrate
# adding columns in numpy array


import numpy as np


ini_array = np.array([[1, 2, 3], [45, 4, 7], [9, 6, 10]])


# printing initial array
print(""initial_array : "", str(ini_array));


# Array to be added as column
column_to_be_added = np.array([1, 2, 3])


# Adding column to numpy array
result = np.hstack((ini_array, np.atleast_2d(column_to_be_added).T))


# printing result
print (""resultant array"", str(result))","import numpy as np

a = np.array([[1,2,3],[4,5,6]])
print(a)

a = np.array([[1,2,3],[4,5,6]])
print(a.shape)

a = np.array([[1,2,3],[4,5,6]])
print(a.ndim)

a = np.array([[1,2,3],[4,5,6]]"
2188,Write a Python program to Flatten a 2d numpy array into 1d array,"# Python code to demonstrate
# flattening a 2d numpy array
# into 1d array

import numpy as np

ini_array1 = np.array([[1, 2, 3], [2, 4, 5], [1, 2, 3]])

# printing initial arrays
print(""initial array"", str(ini_array1))

# Multiplying arrays
result = ini_array1.flatten()

# printing result
print(""New resulting array: "", result)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a.flatten())

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a.flatten())

a = np.array([[1, 2, 3], ["
2189,Calculate the sum of all columns in a 2D NumPy array in Python,"# importing required libraries
import numpy


# explicit function to compute column wise sum
def colsum(arr, n, m):
for i in range(n):
su = 0;
for j in range(m):
su += arr[j][i]
print(su, end = "" "")


# creating the 2D Array
TwoDList = [[1, 2, 3], [4, 5, 6],
[7, 8, 9], [10, 11, 12]]
TwoDArray = numpy.array(TwoDList)


# displaying the 2D Array
print(""2D Array:"")
print(TwoDArray)


# printing the sum of each column
print(""\nColumn-wise Sum:"")
colsum(TwoDArray, len(TwoDArray[0]), len(TwoDArray))","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a.sum())

""""""

# Solution

# Python code to solve the following problem:

# Python code to solve the following problem:

# Python code to solve the following problem:

# Python code to solve the following problem:

# Python code to solve the following problem:

# Python code to solve the following problem:

#"
2190,Returning a function from a function  Python,"# define two methods


# second method that will be returned
# by first method
def B():
print(""Inside the method B."")

# first method that return second method
def A():
print(""Inside the method A."")

# return second method
return B


# form a object of first method
# i.e; second method
returned_function = A()


# call second method by first method
returned_function()","def my_function(x):
    return x**2

print(my_function(3))

""""""

def my_function(x):
    return x**2

print(my_function(3))

""""""

def my_function(x):
    return x**2

print(my_function(3))

""""""

def my_function(x):
    return x**2

print(my_function(3))

""""""

def my_function(x):"
2191,Write a Python program to numpy.fill_diagonal() method,"# import numpy
import numpy as np

# using numpy.fill_diagonal() method
array = np.array([[1, 2], [2, 1]])
np.fill_diagonal(array, 5)

print(array)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

np.fill_diagonal(a, b)

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution"
2192,Write a Python program to Count occurrences of an element in a list,"# Python code to count the number of occurrences
def countX(lst, x):
count = 0
for ele in lst:
if (ele == x):
count = count + 1
return count


# Driver Code
lst = [8, 6, 8, 10, 8, 20, 10, 8, 8]
x = 8
print('{} has occurred {} times'.format(x, countX(lst, x)))","def count_occurrences(lst, element):
    count = 0
    for i in lst:
        if i == element:
            count += 1
    return count

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
element = 5
print(count_occurrences(lst, element))

""""""

def count_occurrences(lst, element):
    count = 0
    for i in lst:"
2193,Write a Python program to print all negative numbers in a range,"# Python program to print negative Numbers in given range

start, end = -4, 19

# iterating each number in list
for num in range(start, end + 1):

# checking condition
if num < 0:
print(num, end = "" "")","def negative_numbers(start, end):
    for i in range(start, end + 1):
        if i < 0:
            print(i)

start = int(input(""Enter the start number: ""))
end = int(input(""Enter the end number: ""))

negative_numbers(start, end)

""""""

def negative_numbers(start, end):
    for i in range(start, end + 1):
        if i < 0:
            print(i"
2194,Formatting float column of Dataframe in Pandas in Python,"# import pandas lib as pd
import pandas as pd

# create the data dictionary
data = {'Month' : ['January', 'February', 'March', 'April'],
'Expense': [ 21525220.653, 31125840.875, 23135428.768, 56245263.942]}

# create the dataframe
dataframe = pd.DataFrame(data, columns = ['Month', 'Expense'])

print(""Given Dataframe :\n"", dataframe)

# round to two decimal places in python pandas
pd.options.display.float_format = '{:.2f}'.format

print('\nResult :\n', dataframe)","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5],
                   'col2': [10, 20, 30, 40, 50]})

print(df)

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5],
#                   'col2': [10, 20, 30, 40, 50]})

# print(df)

# Solution"
2195,Write a Python program to Flatten Tuples List to String,"# Python3 code to demonstrate working of
# Flatten Tuples List to String
# using join() + list comprehension

# initialize list of tuple
test_list = [('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]

# printing original tuples list
print(""The original list : "" + str(test_list))

# Flatten Tuples List to String
# using join() + list comprehension
res = ' '.join([idx for tup in test_list for idx in tup])

# printing result
print(""Tuple list converted to String is : "" + res)","def flatten(lst):
    return ''.join(lst)

print(flatten([1, 2, 3, 4, 5]))

""""""

# Solution 1

def flatten(lst):
    return ''.join(lst)

print(flatten([1, 2, 3, 4, 5]))

# Solution 2

def flatten(lst):
    return ''.join(lst[0]) + ''.join(lst[1])"
2196,Write a Python program to Remove Dictionary Key Words,"# Python3 code to demonstrate working of
# Remove Dictionary Key Words
# Using split() + loop + replace()

# initializing string
test_str = 'gfg is best for geeks'

# printing original string
print(""The original string is : "" + str(test_str))

# initializing Dictionary
test_dict = {'geeks' : 1, 'best': 6}

# Remove Dictionary Key Words
# Using split() + loop + replace()
for key in test_dict:
if key in test_str.split(' '):
test_str = test_str.replace(key, """")

# printing result
print(""The string after replace : "" + str(test_str))","def remove_keywords(dict, keywords):
    for key in keywords:
        if key in dict:
            dict.pop(key)
    return dict

print(remove_keywords({""a"": ""apple"", ""b"": ""banana"", ""c"": ""car""}, [""apple"", ""banana""]))

""""""

def remove_keywords(dict, keywords):
    for key in keywords:
        if key in dict:
            dict.pop(key)
    return dict

print(remove_"
2197,Convert unknown format strings to datetime objects in Python,"# Python3 code to illustrate the conversion of
# ""unknown format"" strings to DateTime objects

# Importing parser from the dateutil.parser
import dateutil.parser as parser

# Initializing an unknown format date string
date_string = ""19750503T080120""

# Calling the parser to parse the above
# specified unformatted date string
# into a datetime objects
date_time = parser.parse(date_string)

# Printing the converted datetime object
print(date_time)","def convert_unknown_format_string_to_datetime(unknown_format_string):
    # Your code here
    return datetime.strptime(unknown_format_string, '%Y-%m-%d %H:%M:%S')

print(convert_unknown_format_string_to_datetime('2021-01-01T00:00:00Z'))

""""""

# Solution

def convert_unknown_format_string_to_datetime(unknown"
2198,Compute the outer product of two given vectors using NumPy in Python,"# Importing library
import numpy as np

# Creating two 1-D arrays
array1 = np.array([6,2])
array2 = np.array([2,5])
print(""Original 1-D arrays:"")
print(array1)
print(array2)

# Output
print(""Outer Product of the two array is:"")
result = np.outer(array1, array2)
print(result)","a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

outer_product = np.dot(a, b)
print(outer_product)

""""""

# Solution

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12"
2199,Write a Python Program for Linear Search,"# Searching an element in a list/array in python
# can be simply done using \'in\' operator
# Example:
# if x in arr:
# print arr.index(x)

# If you want to implement Linear Search in python

# Linearly search x in arr[]
# If x is present then return its location
# else return -1

def search(arr, x):

for i in range(len(arr)):

if arr[i] == x:
return i

return -1","def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
target = 10

print(linear_search(arr, target))

""""""

def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i"
2200,How to resize Image in Write a Python program to Tkinter,"# Import Module
from tkinter import *
from PIL import Image, ImageTk","import tkinter as tk
import PIL.Image as Image

def resize_image(image, width=None, height=None):
    if width is None:
        width = image.size[0]
    if height is None:
        height = image.size[1]
    new_image = image.resize((width, height))
    return new_image

def main():
    root = tk.Tk()
    root.title(""Resize Image"")
    root"
2201,Implementation of XOR Linked List in Python,"# import required module
import ctypes



# create node class
class Node:
def __init__(self, value):
self.value = value
self.npx = 0



# create linked list class
class XorLinkedList:

# constructor
def __init__(self):
self.head = None
self.tail = None
self.__nodes = []

# method to insert node at beginning
def InsertAtStart(self, value):
node = Node(value)
if self.head is None: # If list is empty
self.head = node
self.tail = node
else:
self.head.npx = id(node) ^ self.head.npx
node.npx = id(self.head)
self.head = node
self.__nodes.append(node)

# method to insert node at end
def InsertAtEnd(self, value):
node = Node(value)
if self.head is None: # If list is empty
self.head = node
self.tail = node
else:
self.tail.npx = id(node) ^ self.tail.npx
node.npx = id(self.tail)
self.tail = node
self.__nodes.append(node)

# method to remove node at beginning
def DeleteAtStart(self):
if self.isEmpty(): # If list is empty
return ""List is empty !""
elif self.head == self.tail: # If list has 1 node
self.head = self.tail = None
elif (0 ^ self.head.npx) == id(self.tail): # If list has 2 nodes
self.head = self.tail
self.head.npx = self.tail.npx = 0
else: # If list has more than 2 nodes
res = self.head.value
x = self.__type_cast(0 ^ self.head.npx) # Address of next node
y = (id(self.head) ^ x.npx) # Address of next of next node
self.head = x
self.head.npx = 0 ^ y
return res

# method to remove node at end
def DeleteAtEnd(self):
if self.isEmpty(): # If list is empty
return ""List is empty !""
elif self.head == self.tail: # If list has 1 node
self.head = self.tail = None
elif self.__type_cast(0 ^ self.head.npx) == (self.tail): # If list has 2 nodes
self.tail = self.head
self.head.npx = self.tail.npx = 0
else: # If list has more than 2 nodes
prev_id = 0
node = self.head
next_id = 1
while next_id:
next_id = prev_id ^ node.npx
if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
res = node.value
x = self.__type_cast(prev_id).npx ^ id(node)
y = self.__type_cast(prev_id)
y.npx = x ^ 0
self.tail = y
return res

# method to traverse linked list
def Print(self):
""""""We are printing values rather than returning it bacause
for returning we have to append all values in a list
and it takes extra memory to save all values in a list.""""""

if self.head != None:
prev_id = 0
node = self.head
next_id = 1
print(node.value, end=' ')
while next_id:
next_id = prev_id ^ node.npx
if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
print(node.value, end=' ')
else:
return
else:
print(""List is empty !"")

# method to traverse linked list in reverse order
def ReversePrint(self):

# Print Values is reverse order.
""""""We are printing values rather than returning it bacause
for returning we have to append all values in a list
and it takes extra memory to save all values in a list.""""""

if self.head != None:
prev_id = 0
node = self.tail
next_id = 1
print(node.value, end=' ')
while next_id:
next_id = prev_id ^ node.npx
if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
print(node.value, end=' ')
else:
return
else:
print(""List is empty !"")

# method to get length of linked list
def Length(self):
if not self.isEmpty():
prev_id = 0
node = self.head
next_id = 1
count = 1
while next_id:
next_id = prev_id ^ node.npx
if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
count += 1
else:
return count
else:
return 0

# method to get node data value by index
def PrintByIndex(self, index):
prev_id = 0
node = self.head
for i in range(index):
next_id = prev_id ^ node.npx

if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
else:
return ""Value dosn't found index out of range.""
return node.value

# method to check if the liked list is empty or not
def isEmpty(self):
if self.head is None:
return True
return False

# method to return a new instance of type
def __type_cast(self, id):
return ctypes.cast(id, ctypes.py_object).value



# Driver Code

# create object
obj = XorLinkedList()

# insert nodes
obj.InsertAtEnd(2)
obj.InsertAtEnd(3)
obj.InsertAtEnd(4)
obj.InsertAtStart(0)
obj.InsertAtStart(6)
obj.InsertAtEnd(55)

# display length
print(""\nLength:"", obj.Length())

# traverse
print(""\nTraverse linked list:"")
obj.Print()

print(""\nTraverse in reverse order:"")
obj.ReversePrint()

# display data values by index
print('\nNodes:')
for i in range(obj.Length()):
print(""Data value at index"", i, 'is', obj.PrintByIndex(i))

# removing nodes
print(""\nDelete Last Node: "", obj.DeleteAtEnd())
print(""\nDelete First Node: "", obj.DeleteAtStart())

# new length
print(""\nUpdated length:"", obj.Length())

# display data values by index
print('\nNodes:')
for i in range(obj.Length()):
print(""Data value at index"", i, 'is', obj.PrintByIndex(i))

# traverse
print(""\nTraverse linked list:"")
obj.Print()

print(""\nTraverse in reverse order:"")
obj.ReversePrint()","def xor_linked_list(head, k):
    if head is None:
        return None
    if head.next is None:
        return head
    if head.next.next is None:
        return head
    if head.next.next.next is None:
        return head
    if head.next.next.next.next is None:
        return head
    if head.next.next.next.next.next is None:
        return head
    if head.next.next.next"
2202,Visualizing Quick Sort using Tkinter in Python,"# Extension Quick Sort Code
# importing time module
import time


# to implement divide and conquer
def partition(data, head, tail, drawData, timeTick):
border = head
pivot = data[tail]


drawData(data, getColorArray(len(data), head,
tail, border, border))
time.sleep(timeTick)


for j in range(head, tail):
if data[j] < pivot:
drawData(data, getColorArray(
len(data), head, tail, border, j, True))
time.sleep(timeTick)


data[border], data[j] = data[j], data[border]
border += 1


drawData(data, getColorArray(len(data), head,
tail, border, j))
time.sleep(timeTick)


# swapping pivot with border value
drawData(data, getColorArray(len(data), head,
tail, border, tail, True))
time.sleep(timeTick)


data[border], data[tail] = data[tail], data[border]


return border




# head --> Starting index,
# tail --> Ending index
def quick_sort(data, head, tail,
drawData, timeTick):
if head < tail:
partitionIdx = partition(data, head,
tail, drawData,
timeTick)


# left partition
quick_sort(data, head, partitionIdx-1,
drawData, timeTick)


# right partition
quick_sort(data, partitionIdx+1,
tail, drawData, timeTick)


# Function to apply colors to bars while sorting:
# Grey - Unsorted elements
# Blue - Pivot point element
# White - Sorted half/partition
# Red - Starting pointer
# Yellow - Ending pointer
# Green - Sfter all elements are sorted


# assign color representation to elements




def getColorArray(dataLen, head, tail, border,
currIdx, isSwaping=False):
colorArray = []
for i in range(dataLen):
# base coloring
if i >= head and i <= tail:
colorArray.append('Grey')
else:
colorArray.append('White')


if i == tail:
colorArray[i] = 'Blue'
elif i == border:
colorArray[i] = 'Red'
elif i == currIdx:
colorArray[i] = 'Yellow'


if isSwaping:
if i == border or i == currIdx:
colorArray[i] = 'Green'


return colorArray","from tkinter import *

def quickSort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        less = [i for i in arr[1:] if i <= pivot]
        greater = [i for i in arr[1:] if i > pivot]
        return quickSort(less) + [pivot] + quickSort(greater)

arr = [10, 7, 8, 9, 1, 5, 6, 4"
2203,Write a Python program to Convert Nested dictionary to Mapped Tuple,"# Python3 code to demonstrate working of
# Convert Nested dictionary to Mapped Tuple
# Using list comprehension + generator expression

# initializing dictionary
test_dict = {'gfg' : {'x' : 5, 'y' : 6}, 'is' : {'x' : 1, 'y' : 4},
'best' : {'x' : 8, 'y' : 3}}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# Convert Nested dictionary to Mapped Tuple
# Using list comprehension + generator expression
res = [(key, tuple(sub[key] for sub in test_dict.values()))
for key in test_dict['gfg']]

# printing result
print(""The grouped dictionary : "" + str(res))","def nested_dict_to_tuple(nested_dict):
    # create a tuple from the nested dictionary
    return tuple(nested_dict.items())

# create a dictionary from the nested dictionary
nested_dict = {
    'a': {
        'b': {
            'c': 1
        }
    }
}

# convert the nested dictionary to a tuple
print(nested_dict_to_tuple(nested_dict))

# create a dictionary"
2204,Write a Python program to Remove K length Duplicates from String,"# Python3 code to demonstrate working of
# Remove K length Duplicates from String
# Using loop + slicing

# initializing strings
test_str = 'geeksforfreeksfo'

# printing original string
print(""The original string is : "" + str(test_str))

# initializing K
K = 3

memo = set()
res = []
for idx in range(0, len(test_str) - K):

# slicing K length substrings
sub = test_str[idx : idx + K]

# checking for presence
if sub not in memo:
memo.add(sub)
res.append(sub)

res = ''.join(res[ele] for ele in range(0, len(res), K))

# printing result
print(""The modified string : "" + str(res))","def remove_duplicates(str):
    # your code goes here
    return str

# keep this function call here 
print(remove_duplicates(""abcabcbb""))
print(remove_duplicates(""bbbbb""))
print(remove_duplicates(""pwwkew""))
print(remove_duplicates(""""))
print(remove_duplicates(""""))
print(remove_duplicates(""""))
print(remove_duplicates(""""))
print(remove_dupl"
2205,Calculate the QR decomposition of a given matrix using NumPy in Python,"import numpy as np


# Original matrix
matrix1 = np.array([[1, 2, 3], [3, 4, 5]])
print(matrix1)

# Decomposition of the said matrix
q, r = np.linalg.qr(matrix1)
print('\nQ:\n', q)
print('\nR:\n', r)","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

Q, R = np.linalg.qr(A)

print(Q)
print(R)

# Output:
[[ 1.  2.  3.]
 [ 4.  5.  6.]
 [ 7.  8.  9.]]

[[ 1.  2.  3.]
 ["
2206,Count of groups having largest size while grouping according to sum of its digits in Python,"// C++ implementation to Count the
// number of groups having the largest
// size where groups are according
// to the sum of its digits
#include <bits/stdc++.h>
using namespace std;


// function to return sum of digits of i
int sumDigits(int n){
int sum = 0;
while(n)
{
sum += n%10;
n /= 10;
}


return sum;
}


// Create the dictionary of unique sum
map<int,int> constDict(int n){

// dictionary that contain
// unique sum count
map<int,int> d;


for(int i = 1; i < n + 1; ++i){
// calculate the sum of its digits
int sum1 = sumDigits(i);


if(d.find(sum1) == d.end())
d[sum1] = 1;
else
d[sum1] += 1;
}


return d;
}


// function to find the
// largest size of group
int countLargest(int n){

map<int,int> d = constDict(n);

int size = 0;


// count of largest size group
int count = 0;


for(auto it = d.begin(); it != d.end(); ++it){
int k = it->first;
int val = it->second;


if(val > size){
size = val;
count = 1;
}
else if(val == size)
count += 1;
}


return count;
}

// Driver code
int main()
{
int n = 13;


int group = countLargest(n);


cout << group << endl;


return 0;
}","def solution(n):
    answer = 0
    for i in range(1, n+1):
        answer += sum(map(int, str(i)))
    return answer

""""""

def solution(n):
    answer = 0
    for i in range(1, n+1):
        answer += sum(map(int, str(i)))
    return answer

""""""

def solution(n):
    answer = 0
    for i in range(1, n"
2207,Capitalize first letter of a column in Pandas dataframe in Python,"# Create a simple dataframe

# importing pandas as pd
import pandas as pd


# creating a dataframe
df = pd.DataFrame({'A': ['john', 'bODAY', 'minA', 'Peter', 'nicky'],
'B': ['masters', 'graduate', 'graduate',
'Masters', 'Graduate'],
'C': [27, 23, 21, 23, 24]})

df","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pima-indians-diabetes.csv?raw=true')

df.columns = ['age','sex', 'bmi', 'bp','s1','s2','s3','s4','s5','s6']

df['bmi'] = df['bmi'].str.lower()"
2208,Write a Python program to Replace negative value with zero in numpy array,"# Python code to demonstrate
# to replace negative value with 0
import numpy as np

ini_array1 = np.array([1, 2, -3, 4, -5, -6])

# printing initial arrays
print(""initial array"", ini_array1)

# code to replace all negative value with 0
ini_array1[ini_array1<0] = 0

# printing result
print(""New resulting array: "", ini_array1)","import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr[arr < 0] = 0

print(arr)

""""""

# Solution

import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr[arr < 0] = 0

print(arr)"
2209,Write a Python Program for Cocktail Sort,"# Python program for implementation of Cocktail Sort

def cocktailSort(a):
n = len(a)
swapped = True
start = 0
end = n-1
while (swapped==True):

# reset the swapped flag on entering the loop,
# because it might be true from a previous
# iteration.
swapped = False

# loop from left to right same as the bubble
# sort
for i in range (start, end):
if (a[i] > a[i+1]) :
a[i], a[i+1]= a[i+1], a[i]
swapped=True

# if nothing moved, then array is sorted.
if (swapped==False):
break

# otherwise, reset the swapped flag so that it
# can be used in the next stage
swapped = False

# move the end point back by one, because
# item at the end is in its rightful spot
end = end-1

# from right to left, doing the same
# comparison as in the previous stage
for i in range(end-1, start-1,-1):
if (a[i] > a[i+1]):
a[i], a[i+1] = a[i+1], a[i]
swapped = True

# increase the starting point, because
# the last stage would have moved the next
# smallest number to its rightful spot.
start = start+1

# Driver code to test above
a = [5, 1, 4, 2, 8, 0, 2]
cocktailSort(a)
print(""Sorted array is:"")
for i in range(len(a)):
print (""%d"" %a[i]),","def cocktail_sort(arr):
    swapped = True
    while swapped:
        swapped = False
        for i in range(len(arr) - 1):
            if arr[i] > arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                swapped = True
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(cocktail_sort(arr))

""""""

"""""""
2210,Changing the colour of Tkinter Menu Bar in Python,"# Import the library tkinter
from tkinter import *

# Create a GUI app
app = Tk()

# Set the title and geometry to your app
app.title(""Geeks For Geeks"")
app.geometry(""800x500"")

# Create menubar by setting the color
menubar = Menu(app, background='blue', fg='white')

# Declare file and edit for showing in menubar
file = Menu(menubar, tearoff=False, background='yellow')
edit = Menu(menubar, tearoff=False, background='pink')

# Add commands in in file menu
file.add_command(label=""New"")
file.add_command(label=""Exit"", command=app.quit)

# Add commands in edit menu
edit.add_command(label=""Cut"")
edit.add_command(label=""Copy"")
edit.add_command(label=""Paste"")

# Display the file and edit declared in previous step
menubar.add_cascade(label=""File"", menu=file)
menubar.add_cascade(label=""Edit"", menu=edit)

# Displaying of menubar in the app
app.config(menu=menubar)

# Make infinite loop for displaying app on screen
app.mainloop()","import tkinter as tk
from tkinter import ttk

root = tk.Tk()
root.title(""Simple Calculator"")

# Create a frame inside the root window
frame = ttk.Frame(root, padding=""10 10 10"")
frame.grid()

# Create a label widget inside the frame
label = ttk.Label(frame, text=""Enter a number:"")
label.grid(column=0, row=0)

# Create a entry widget inside the frame
entry ="
2211,Write a Python program to Check order of character in string using OrderedDict( ),"# Function to check if string follows order of
# characters defined by a pattern
from collections import OrderedDict

def checkOrder(input, pattern):

# create empty OrderedDict
# output will be like {'a': None,'b': None, 'c': None}
dict = OrderedDict.fromkeys(input)

# traverse generated OrderedDict parallel with
# pattern string to check if order of characters
# are same or not
ptrlen = 0
for key,value in dict.items():
if (key == pattern[ptrlen]):
ptrlen = ptrlen + 1

# check if we have traverse complete
# pattern string
if (ptrlen == (len(pattern))):
return 'true'

# if we come out from for loop that means
# order was mismatched
return 'false'

# Driver program
if __name__ == ""__main__"":
input = 'engineers rock'
pattern = 'egr'
print (checkOrder(input,pattern))","def check_order(string):
    d = OrderedDict()
    for i in string:
        if i not in d:
            d[i] = 1
        else:
            d[i] += 1
    return d

print(check_order(""abcd""))

""""""

def check_order(string):
    d = OrderedDict()
    for i in string:
        if i not in d:
            d[i] = 1"
2212,Get the index of minimum value in DataFrame column in Python,"# importing pandas module
import pandas as pd

# making data frame
df = pd.read_csv(""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv"")

df.head(10)","import pandas as pd
import numpy as np

df = pd.read_csv(""data.csv"")

# Create a new column in DataFrame called ""min_value""
df[""min_value""] = df[""value""].transform(min)

# Print the DataFrame
print(df)

# Create a new column in DataFrame called ""max_value""
df[""max_value""] = df[""value""].transform(max)

# Print the DataFrame
print(df"
2213,Write a Python program to Multiply Adjacent elements,"# Python3 code to demonstrate working of
# Adjacent element multiplication
# using zip() + generator expression + tuple

# initialize tuple
test_tup = (1, 5, 7, 8, 10)

# printing original tuple
print(""The original tuple : "" + str(test_tup))

# Adjacent element multiplication
# using zip() + generator expression + tuple
res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))

# printing result
print(""Resultant tuple after multiplication : "" + str(res))","def multiply_adjacent(arr):
    # Write your code here
    if len(arr) == 1:
        return arr[0]
    else:
        return arr[0] * multiply_adjacent(arr[1:])

print(multiply_adjacent([1, 2, 3, 4]))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
2214,numpy string operations | not_equal() function in Python,"# Python program explaining
# numpy.char.not_equal() method

# importing numpy
import numpy as geek

# input arrays
in_arr1 = geek.array('numpy')
print (""1st Input array : "", in_arr1)

in_arr2 = geek.array('nump')
print (""2nd Input array : "", in_arr2)

# checking if they are not equal
out_arr = geek.char.not_equal(in_arr1, in_arr2)
print (""Output array: "", out_arr)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a)
print(b)

print(a!= b)

print(a == b)

print(a!= b)

print(a!= b)

print(a!= b)

print(a!= b)

print(a!= b"
2215,How to compute the eigenvalues and right eigenvectors of a given square array using NumPY in Python,"# importing numpy library
import numpy as np

# create numpy 2d-array
m = np.array([[1, 2],
[2, 3]])

print(""Printing the Original square array:\n"",
m)

# finding eigenvalues and eigenvectors
w, v = np.linalg.eig(m)

# printing eigen values
print(""Printing the Eigen values of the given square array:\n"",
w)

# printing eigen vectors
print(""Printing Right eigenvectors of the given square array:\n""
v)","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

eigenvalues, eigenvectors = np.linalg.eig(A)

print(eigenvalues)
print(eigenvectors)

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution"
2216,Write a Python Program for Cycle Sort,"# Python program to impleament cycle sort

def cycleSort(array):
writes = 0

# Loop through the array to find cycles to rotate.
for cycleStart in range(0, len(array) - 1):
item = array[cycleStart]

# Find where to put the item.
pos = cycleStart
for i in range(cycleStart + 1, len(array)):
if array[i] < item:
pos += 1

# If the item is already there, this is not a cycle.
if pos == cycleStart:
continue

# Otherwise, put the item there or right after any duplicates.
while item == array[pos]:
pos += 1
array[pos], item = item, array[pos]
writes += 1

# Rotate the rest of the cycle.
while pos != cycleStart:

# Find where to put the item.
pos = cycleStart
for i in range(cycleStart + 1, len(array)):
if array[i] < item:
pos += 1

# Put the item there or right after any duplicates.
while item == array[pos]:
pos += 1
array[pos], item = item, array[pos]
writes += 1

return writes

# driver code
arr = [1, 8, 3, 9, 10, 10, 2, 4 ]
n = len(arr)
cycleSort(arr)

print(""After sort : "")
for i in range(0, n) :
print(arr[i], end = \' \')

# Code Contributed by Mohit Gupta_OMG <(0_o)>","def cycle_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

arr = [64, 34, 25, 12, 22, 11, 90]
print(cycle_sort(arr))

""""""

def cycle_sort(arr):"
2217,"Write a Python dictionary, set and counter to check if frequencies can become same","# Function to Check if frequency of all characters
# can become same by one removal
from collections import Counter

def allSame(input):

# calculate frequency of each character
# and convert string into dictionary
dict=Counter(input)

# now get list of all values and push it
# in set
same = list(set(dict.values()))

if len(same)>2:
print('No')
elif len (same)==2 and same[1]-same[0]>1:
print('No')
else:
print('Yes')


# now check if frequency of all characters
# can become same

# Driver program
if __name__ == ""__main__"":
input = 'xxxyyzzt'
allSame(input)","def solution(d):
    d = dict(d)
    for i in d:
        if d[i] > 1:
            d[i] = d[i] // 2
    return d

print(solution({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12"
2218,Describe a NumPy Array in Python,"import numpy as np




# sample array
arr = np.array([4, 5, 8, 5, 6, 4,
9, 2, 4, 3, 6])
print(arr)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a.shape)

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a.dtype)

a = np.array([[1, 2, 3], [4, 5, 6]])
print("
2219,How to split the element of a given NumPy array with spaces in Python,"import numpy as np


# Original Array
array = np.array(['PHP C# Python C Java C++'], dtype=np.str)
print(array)

# Split the element of the said array with spaces
sparr = np.char.split(array)
print(sparr)","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a.split())

# Output:
# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# %%
# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:"
2220,Numpy size() function | Python,"# Python program explaining
# numpy.size() method


# importing numpy
import numpy as np


# Making a random array
arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])


# By default, give the total number of elements.
print(np.size(arr))","import numpy as np

x = np.array([[1, 2, 3], [4, 5, 6]])
print(x.shape)

# Output:
# (2, 3)

# Input:
# [[1 2 3]
#  [4 5 6]]

# Output:
# (2, 3)

# Input:
# [[1 2 3]
#  [4 5 6]]

# Output:
# (2, 3)

# Input:
# [[1 2"
2221,Write a Python program to Successive Characters Frequency,"# Python3 code to demonstrate working of
# Successive Characters Frequency
# Using count() + loop + re.findall()
import re

# initializing string
test_str = 'geeksforgeeks is best for geeks. A geek should take interest.'

# printing original string
print(""The original string is : "" + str(test_str))

# initializing word
que_word = ""geek""

# Successive Characters Frequency
# Using count() + loop + re.findall()
temp = []
for sub in re.findall(que_word + '.', test_str):
temp.append(sub[-1])

res = {que_word : temp.count(que_word) for que_word in temp}

# printing result
print(""The Characters Frequency is : "" + str(res))","def solution(s):
    count = 0
    for i in range(len(s)):
        for j in range(i+1, len(s)):
            if s[i] == s[j]:
                count += 1
    return count

print(solution(""abcabcbb""))
print(solution(""bbbbb""))
print(solution(""pwwkew""))

""""""

def solution(s):
    count = 0
    for i in range(len(s)):"
2222,Write a Python program to Right and Left Shift characters in String,"# Python3 code to demonstrate working of
# Right and Left Shift characters in String
# Using String multiplication + string slicing

# initializing string
test_str = 'geeksforgeeks'

# printing original string
print(""The original string is : "" + test_str)

# initializing right rot
r_rot = 7

# initializing left rot
l_rot = 3

# Right and Left Shift characters in String
# Using String multiplication + string slicing
res = (test_str * 3)[len(test_str) + r_rot - l_rot :
2 * len(test_str) + r_rot - l_rot]

# printing result
print(""The string after rotation is : "" + str(res))","def rightShift(s):
    return s[::-1]

def leftShift(s):
    return s[::-1]

def main():
    s = input(""Enter the string: "")
    print(rightShift(s))
    print(leftShift(s))

if __name__ == ""__main__"":
    main()

""""""

# Time complexity: O(n)
# Space Complexity: O(n)

def rightShift(s):"
2223,Write a Python program to Stack using Doubly Linked List,"# A complete working Python program to demonstrate all
# stack operations using a doubly linked list

# Node class
class Node:

# Function to initialise the node object
def __init__(self, data):
self.data = data # Assign data
self.next = None # Initialize next as null
self.prev = None # Initialize prev as null

# Stack class contains a Node object
class Stack:
# Function to initialize head
def __init__(self):
self.head = None

# Function to add an element data in the stack
def push(self, data):

if self.head is None:
self.head = Node(data)
else:
new_node = Node(data)
self.head.prev = new_node
new_node.next = self.head
new_node.prev = None
self.head = new_node


# Function to pop top element and return the element from the stack
def pop(self):

if self.head is None:
return None
elif self.head.next is None:
temp = self.head.data
self.head = None
return temp
else:
temp = self.head.data
self.head = self.head.next
self.head.prev = None
return temp




# Function to return top element in the stack
def top(self):

return self.head.data


# Function to return the size of the stack
def size(self):

temp = self.head
count = 0
while temp is not None:
count = count + 1
temp = temp.next
return count


# Function to check if the stack is empty or not
def isEmpty(self):

if self.head is None:
return True
else:
return False


# Function to print the stack
def printstack(self):

print(""stack elements are:"")
temp = self.head
while temp is not None:
print(temp.data, end =""->"")
temp = temp.next


# Code execution starts here
if __name__=='__main__':

# Start with the empty stack
stack = Stack()

# Insert 4 at the beginning. So stack becomes 4->None
print(""Stack operations using Doubly LinkedList"")
stack.push(4)

# Insert 5 at the beginning. So stack becomes 4->5->None
stack.push(5)

# Insert 6 at the beginning. So stack becomes 4->5->6->None
stack.push(6)

# Insert 7 at the beginning. So stack becomes 4->5->6->7->None
stack.push(7)

# Print the stack
stack.printstack()

# Print the top element
print(""\nTop element is "", stack.top())

# Print the stack size
print(""Size of the stack is "", stack.size())

# pop the top element
stack.pop()

# pop the top element
stack.pop()

# two elements are popped
# Print the stack
stack.printstack()

# Print True if the stack is empty else False
print(""\nstack is empty:"", stack.isEmpty())

#This code is added by Suparna Raut","def solve(self, head):
    if head is None:
        return head
    if head.next is None:
        return head
    slow = head
    fast = head.next
    while fast.next is not None:
        slow = slow.next
        fast = fast.next.next
    slow.next = None
    return slow"
2224,Different ways to convert a Python dictionary to a NumPy array,"# importing required librariess
import numpy as np
from ast import literal_eval

# creating class of string
name_list = """"""{
""column0"": {""First_Name"": ""Akash"",
""Second_Name"": ""kumar"", ""Interest"": ""Coding""},

""column1"": {""First_Name"": ""Ayush"",
""Second_Name"": ""Sharma"", ""Interest"": ""Cricket""},

""column2"": {""First_Name"": ""Diksha"",
""Second_Name"": ""Sharma"",""Interest"": ""Reading""},

""column3"": {""First_Name"":"" Priyanka"",
""Second_Name"": ""Kumari"", ""Interest"": ""Dancing""}

}""""""
print(""Type of name_list created:\n"",
type(name_list))

# converting string type to dictionary
t = literal_eval(name_list)

# printing the original dictionary
print(""\nPrinting the original Name_list dictionary:\n"",
t)

print(""Type of original dictionary:\n"",
type(t))

# converting dictionary to numpy array
result_nparra = np.array([[v[j] for j in ['First_Name', 'Second_Name',
'Interest']] for k, v in t.items()])

print(""\nConverted ndarray from the Original dictionary:\n"",
result_nparra)

# printing the type of converted array
print(""Type:\n"", type(result_nparra))","import numpy as np

d = {'a': 1, 'b': 2, 'c': 3}

np_array = np.array(d)

print(np_array)

# Output:
# array([1, 2, 3])

# Note:
# The order of the elements in the array is not important.
# The array is already in the correct order.
# The array is not a view of the original array.
# The array is not a copy of the original array."
2225,Write a Python Set | Check whether a given string is Heterogram or not,"# Function to Check whether a given string is Heterogram or not

def heterogram(input):

# separate out list of alphabets using list comprehension
# ord function returns ascii value of character
alphabets = [ ch for ch in input if ( ord(ch) >= ord('a') and ord(ch) <= ord('z') )]

# convert list of alphabets into set and
# compare lengths
if len(set(alphabets))==len(alphabets):
print ('Yes')
else:
print ('No')

# Driver program
if __name__ == ""__main__"":
input = 'the big dwarf only jumps'
heterogram(input)","def is_heterogram(string):
    if len(string) == 1:
        return True
    else:
        return False

print(is_heterogram(""abc""))
print(is_heterogram(""abcd""))
print(is_heterogram(""abcdef""))
print(is_heterogram(""abcdefghijklmnopqrstuvwxyz""))

""""""

def is_heterogram(string):
    if len(string)"
2226,How to find the number of arguments in a Python function,"def no_of_argu(*args):

# using len() method in args to count
return(len(args))




a = 1
b = 3


# arguments passed
n = no_of_argu(1, 2, 4, a)


# result printed
print("" The number of arguments are: "", n)","def my_function(arg1, arg2, arg3):
    print(arg1, arg2, arg3)

my_function(1, 2, 3)

""""""

def my_function(arg1, arg2, arg3):
    print(arg1, arg2, arg3)

my_function(1, 2, 3)

""""""

def my_function(arg1, arg2, arg3):
    print(arg1, arg2, arg3)"
2227,Return the Index label if some condition is satisfied over a column in Pandas Dataframe in Python,"# importing pandas as pd
import pandas as pd

# Create the dataframe
df = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/2011'],
'Product':['Umbrella', 'Matress', 'Badminton', 'Shuttle'],
'Last_Price':[1200, 1500, 1600, 352],
'Updated_Price':[1250, 1450, 1550, 400],
'Discount':[10, 10, 10, 10]})

# Create the indexes
df.index =['Item 1', 'Item 2', 'Item 3', 'Item 4']

# Print the dataframe
print(df)","import pandas as pd

df = pd.read_csv(""C:/Users/DELL/Downloads/pandas_data_visualization/data/data.csv"")

# 1. Create a function that takes a Pandas Dataframe as an argument and returns the index label.
# 2. Create a function that takes a Pandas Dataframe as an argument and returns the index label.
# 3. Create a function that takes a Pandas Dataframe as an argument and returns the"
2228,Program to check if a string contains any special character in Python,"// C++ program to check if a string
// contains any special character

// import required packages
#include <iostream>
#include <regex>
using namespace std;

// Function checks if the string
// contains any special character
void run(string str)
{

// Make own character set
regex regx(""[@_!#$%^&*()<>?/|}{~:]"");

// Pass the string in regex_search
// method
if(regex_search(str, regx) == 0)
cout << ""String is accepted"";
else
cout << ""String is not accepted."";
}

// Driver Code
int main()
{

// Enter the string
string str = ""Geeks$For$Geeks"";

// Calling run function
run(str);

return 0;
}

// This code is contributed by Yash_R","s = ""abcdefghijklmnopqrstuvwxyz""

def is_special_char(s):
    for i in s:
        if i in ""!@#$%^&*()_+-=[]{}|"":
            return True
    return False

print(is_special_char(s))

""""""

# Solution:

def is_special_char(s):
    for i in s:
        if i in ""!@#$%^"
2229,Convert Python datetime to epoch,"# import datetime module
import datetime

# convert datetime to epoch using strftime from
# time stamp 2021/7/7/1/2/1
# for linux:
epoch = datetime.datetime(2021, 7, 7, 1, 2, 1).strftime('%s')
# for windows:
# epoch = datetime.datetime(2021, 7,7 , 1,2,1).strftime('%S')
print(epoch)

# convert datetime to epoch using strftime from
# time stamp 2021/3/3/4/3/4
epoch = datetime.datetime(2021, 3, 3, 4, 3, 4).strftime('%s')
print(epoch)

# convert datetime to epoch using strftime from
# time stamp 2021/7/7/12/12/34
epoch = datetime.datetime(2021, 7, 7, 12, 12, 34).strftime('%s')
print(epoch)

# convert datetime to epoch using strftime from
# time stamp 2021/7/7/12/56/00
epoch = datetime.datetime(2021, 7, 7, 12, 56, 0).strftime('%s')
print(epoch)","import datetime

def convert_python_datetime(dt):
    return dt.replace(tzinfo=datetime.timezone.utc).timestamp()

print(convert_python_datetime(datetime.datetime.now()))

""""""

# Solution

import datetime

def convert_python_datetime(dt):
    return dt.replace(tzinfo=datetime.timezone.utc).timestamp()

print(convert_python_datetime(datetime."
2230,How to get the Daily News using Python,"import requests
from bs4 import BeautifulSoup","def get_daily_news(url):
    import requests
    from bs4 import BeautifulSoup
    import re
    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns
    import time
    from datetime import datetime
    from datetime import timedelta
    from datetime import date
    from datetime import time
    from datetime import date
    from datetime import time
    from datetime import timedelta"
2231,Convert Set to String in Python,"# create a set
s = {'a', 'b', 'c', 'd'}
print(""Initially"")
print(""The datatype of s : "" + str(type(s)))
print(""Contents of s : "", s)

# convert Set to String
s = str(s)
print(""\nAfter the conversion"")
print(""The datatype of s : "" + str(type(s)))
print(""Contents of s : "" + s)","def solution(S):
    return str(len(set(S)))

""""""

def solution(S):
    return str(len(set(S)))

def solution(S):
    return str(len(set(S)))

def solution(S):
    return str(len(set(S)))

def solution(S):
    return str(len(set(S)))

def solution(S):
    return str(len(set(S)))

def solution(S):
    return str("
2232,Write a Python Program to print all Possible Combinations from the three Digits,"# Python program to print all
# the possible combinations

def comb(L):

for i in range(3):
for j in range(3):
for k in range(3):

# check if the indexes are not
# same
if (i!=j and j!=k and i!=k):
print(L[i], L[j], L[k])

# Driver Code
comb([1, 2, 3])","def solution(n):
    if n == 0:
        return []
    if n == 1:
        return [1]
    if n == 2:
        return [1, 2]
    if n == 3:
        return [1, 2, 3]
    if n == 4:
        return [1, 2, 3, 4]
    if n == 5:
        return [1, 2, 3, 4, 5]
    if n == 6:
        return [1"
2233,Write a Python program to Check if String Contain Only Defined Characters using Regex,"# _importing module
import re


def check(str, pattern):

# _matching the strings
if re.search(pattern, str):
print(""Valid String"")
else:
print(""Invalid String"")

# _driver code
pattern = re.compile('^[1234]+$')
check('2134', pattern)
check('349', pattern)","import re

def check_if_string_contains_only_defined_characters(string):
    # your code goes here
    return True

if __name__ == '__main__':
    print(check_if_string_contains_only_defined_characters('abcdefghijklmnopqrstuvwxyz'))
    print(check_if_string_contains_only_defined_characters('abcdefghijklmnopqr"
2234,Write a Python program to Maximum and Minimum in a Set,"# Python code to get the maximum element from a set
def MAX(sets):
return (max(sets))

# Driver Code
sets = set([8, 16, 24, 1, 25, 3, 10, 65, 55])
print(MAX(sets))","def max_min(set):
    max = set[0]
    min = set[0]
    for i in set:
        if i > max:
            max = i
        if i < min:
            min = i
    return max, min

set = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_min(set))

""""""

def max_min(set):
    max = set[0]
    min"
2235,Remove all duplicates from a given string in Python,"from collections import OrderedDict

# Function to remove all duplicates from string
# and order does not matter
def removeDupWithoutOrder(str):

# set() --> A Set is an unordered collection
# data type that is iterable, mutable,
# and has no duplicate elements.
# """".join() --> It joins two adjacent elements in
# iterable with any symbol defined in
# """" ( double quotes ) and returns a
# single string
return """".join(set(str))

# Function to remove all duplicates from string
# and keep the order of characters same
def removeDupWithOrder(str):
return """".join(OrderedDict.fromkeys(str))

# Driver program
if __name__ == ""__main__"":
str = ""geeksforgeeks""
print (""Without Order = "",removeDupWithoutOrder(str))
print (""With Order = "",removeDupWithOrder(str))","def remove_duplicates(str):
    # Write your code here
    str = str.replace("" "", """")
    str = str.replace(""("", """")
    str = str.replace("")"", """")
    str = str.replace(""["", """")
    str = str.replace(""]"", """")
    str = str.replace(""{"", """")
    str = str.replace(""}"", """")
    str = str.replace(""<"", """")
    str = str.replace"
2236,Write a Python Program for Iterative Merge Sort,"# Recursive Python Program for merge sort

def merge(left, right):
if not len(left) or not len(right):
return left or right

result = []
i, j = 0, 0
while (len(result) < len(left) + len(right)):
if left[i] < right[j]:
result.append(left[i])
i+= 1
else:
result.append(right[j])
j+= 1
if i == len(left) or j == len(right):
result.extend(left[i:] or right[j:])
break

return result

def mergesort(list):
if len(list) < 2:
return list

middle = len(list)/2
left = mergesort(list[:middle])
right = mergesort(list[middle:])

return merge(left, right)

seq = [12, 11, 13, 5, 6, 7]
print(""Given array is"")
print(seq);
print(""\n"")
print(""Sorted array is"")
print(mergesort(seq))

# Code Contributed by Mohit Gupta_OMG","def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = arr[:mid]
    right = arr[mid:]
    left = merge_sort(left)
    right = merge_sort(right)
    return merge(left, right)

def merge(left, right):
    result = []
    while len(left) > 0 and len(right) > 0:
        if left[0] < right[0"
2237,Repeat all the elements of a NumPy array of strings in Python,"# importing the module
import numpy as np

# created array of strings
arr = np.array(['Akash', 'Rohit', 'Ayush',
'Dhruv', 'Radhika'], dtype = np.str)
print(""Original Array :"")
print(arr)

# with the help of np.char.multiply()
# repeating the characters 3 times
new_array = np.char.multiply(arr, 3)
print(""\nNew array :"")
print(new_array)",">>> import numpy as np
>>> a = np.array(['a', 'b', 'c', 'd'])
>>> a
array([ 'a', 'b', 'c', 'd'])
>>> a.dtype
dtype('<U3')
>>> a.size
3
>>> a.itemsize
3
>>> a.shape
(3,)
>>> a.strides
(3,)
>>> a.strides[0]
3
>>> a.strides[1]"
2238,Write a Python Program to Reverse Every Kth row in a Matrix,"# Python3 code to demonstrate working of
# Reverse Kth rows in Matrix
# Using reversed() + loop

# initializing list
test_list = [[5, 3, 2], [8, 6, 3], [3, 5, 2],
[3, 6], [3, 7, 4], [2, 9]]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing K
K = 3

res = []
for idx, ele in enumerate(test_list):

# checking for K multiple
if (idx + 1) % K == 0:

# reversing using reversed
res.append(list(reversed(ele)))
else:
res.append(ele)

# printing result
print(""After reversing every Kth row: "" + str(res))","def reverse_every_kth_row(matrix, k):
    for i in range(k):
        for j in range(len(matrix[i])):
            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]
    return matrix

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
k = 2
print(reverse_every_kth_row(matrix"
2239,How to scrape multiple pages using Selenium in Python,"# importing necessary packages
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager

# for holding the resultant list
element_list = []

for page in range(1, 3, 1):

page_url = ""https://webscraper.io/test-sites/e-commerce/static/computers/laptops?page="" + str(page)
driver = webdriver.Chrome(ChromeDriverManager().install())
driver.get(page_url)
title = driver.find_elements_by_class_name(""title"")
price = driver.find_elements_by_class_name(""price"")
description = driver.find_elements_by_class_name(""description"")
rating = driver.find_elements_by_class_name(""ratings"")

for i in range(len(title)):
element_list.append([title[i].text, price[i].text, description[i].text, rating[i].text])

print(element_list)

#closing the driver
driver.close()","import selenium
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import"
2240,Write a Python program to Order Tuples by List,"# Python3 code to demonstrate working of
# Order Tuples by List
# Using dict() + list comprehension

# initializing list
test_list = [('Gfg', 3), ('best', 9), ('CS', 10), ('Geeks', 2)]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing order list
ord_list = ['Geeks', 'best', 'CS', 'Gfg']

# Order Tuples by List
# Using dict() + list comprehension
temp = dict(test_list)
res = [(key, temp[key]) for key in ord_list]

# printing result
print(""The ordered tuple list : "" + str(res))","def order_tuples(tuples):
    # your code goes here
    return sorted(tuples, key=lambda x: x[0])

# test your code
print(order_tuples([(1, 2), (3, 4), (5, 6)]))
print(order_tuples([(1, 2), (3, 4), (5, 6), (7, 8)]))
print(order_tuples([(1, 2), (3, 4), (5, 6), (7,"
2241,Write a Python program to select Random value form list of lists,"# Python3 code to demonstrate working of
# Random Matrix Element
# Using chain.from_iterables() + random.choice()
from itertools import chain
import random

# initializing list
test_list = [[4, 5, 5], [2, 7, 4], [8, 6, 3]]

# printing original list
print(""The original list is : "" + str(test_list))

# choice() for random number, from_iterables for flattening
res = random.choice(list(chain.from_iterable(test_list)))

# printing result
print(""Random number from Matrix : "" + str(res))","import random

def random_list(n):
    l = []
    for i in range(n):
        l.append(random.randint(0,n))
    return l

def main():
    n = int(input(""Enter the number of elements in the list: ""))
    l = random_list(n)
    print(l)

if __name__ == ""__main__"":
    main()"
2242,Write a Python program to Check if a given string is binary string or not,"# Python program to check
# if a string is binary or not


# function for checking the
# string is accepted or not
def check(string) :


# set function convert string
# into set of characters .
p = set(string)


# declare set of '0', '1' .
s = {'0', '1'}


# check set p is same as set s
# or set p contains only '0'
# or set p contains only '1'
# or not, if any one condition
# is true then string is accepted
# otherwise not .
if s == p or p == {'0'} or p == {'1'}:
print(""Yes"")
else :
print(""No"")





# driver code
if __name__ == ""__main__"" :


string = ""101010000111""


# function calling
check(string)","def is_binary(string):
    if len(string) % 2 == 0:
        return True
    else:
        return False

print(is_binary(""abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
2243,How to make a NumPy array read-only in Python,"import numpy as np


a = np.zeros(11)
print(""Before any change "")
print(a)

a[1] = 2
print(""Before after first change "")
print(a)

a.flags.writeable = False
print(""After making array immutable on attempting second change "")
a[1] = 7","import numpy as np

a = np.array([1, 2, 3, 4, 5])

a.flags.writeable = False

print(a)

a.flags.writeable = True

print(a)

a.flags.writeable = False

print(a)

a.flags.writeable = True

print(a)

a.flags.writeable = False

print(a)

a.flags.writeable = True

print"
2244,Write a Python program to Convert Lists of List to Dictionary,"# Python3 code to demonstrate working of
# Convert Lists of List to Dictionary
# Using loop

# initializing list
test_list = [['a', 'b', 1, 2], ['c', 'd', 3, 4], ['e', 'f', 5, 6]]

# printing original list
print(""The original list is : "" + str(test_list))

# Convert Lists of List to Dictionary
# Using loop
res = dict()
for sub in test_list:
res[tuple(sub[:2])] = tuple(sub[2:])

# printing result
print(""The mapped Dictionary : "" + str(res))","l1 = [1, 2, 3, 4, 5]
l2 = [1, 2, 3, 4, 5]
l3 = [1, 2, 3, 4, 5]
l4 = [1, 2, 3, 4, 5]
l5 = [1, 2, 3, 4, 5]
l6 = [1, 2, 3, 4, 5]
l7 = [1, 2, 3, 4, 5]
l8 = [1, 2, 3, 4,"
2245,Limited rows selection with given column in Pandas | Python,"# Import pandas package
import pandas as pd

# Define a dictionary containing employee data
data = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj'],
'Age':[27, 24, 22, 32],
'Address':['Delhi', 'Kanpur', 'Allahabad', 'Kannauj'],
'Qualification':['Msc', 'MA', 'MCA', 'Phd']}

# Convert the dictionary into DataFrame
df = pd.DataFrame(data)

# select three rows and two columns
print(df.loc[1:3, ['Name', 'Qualification']])","import pandas as pd

# Read the data
df = pd.read_csv('https://github.com/datasets/titanic/raw/master/train.csv')

# Create a new column with the first name
df['first_name'] = df['first_name'].str.lower()

# Create a new column with the last name
df['last_name'] = df['last_name'].str.lower()

# Create a new column with the title
df['"
2246,Write a Python program to print Pascals Triangle,"# Print Pascal's Triangle in Python
from math import factorial


# input n
n = 5
for i in range(n):
for j in range(n-i+1):


# for left spacing
print(end="" "")


for j in range(i+1):


# nCr = n!/((n-r)!*r!)
print(factorial(i)//(factorial(j)*factorial(i-j)), end="" "")


# for new line
print()","def pascal_triangle(n):
    if n == 0:
        return []
    else:
        return [
            [1],
            [1, 1],
            [1, 1, 1]
        ]

n = int(input(""Enter the number of rows: ""))
print(pascal_triangle(n))

""""""

# Solution

def pascal_triangle(n):
    if n == 0:
        return []
    else:
        lst = []"
2247,How to Extract Wikipedia Data in Python,"import wikipedia




wikipedia.summary(""Python (programming language)"")","import wikipedia

wikipedia.set_lang(""en"")

print(wikipedia.summary(""The Python Programming Language"", sentences=2))

""""""

# Solution 1

import wikipedia

wikipedia.set_lang(""en"")

print(wikipedia.summary(""The Python Programming Language"", sentences=2))

# Solution 2

import wikipedia

wikipedia.set_lang(""en"")

print(wikipedia.summary(""The Python Programming Language"", sentences=2))

# Solution 3

import wikipedia

wikipedia."
2248,Get all rows in a Pandas DataFrame containing given substring in Python,"# importing pandas
import pandas as pd

# Creating the dataframe with dict of lists
df = pd.DataFrame({'Name': ['Geeks', 'Peter', 'James', 'Jack', 'Lisa'],
'Team': ['Boston', 'Boston', 'Boston', 'Chele', 'Barse'],
'Position': ['PG', 'PG', 'UG', 'PG', 'UG'],
'Number': [3, 4, 7, 11, 5],
'Age': [33, 25, 34, 35, 28],
'Height': ['6-2', '6-4', '5-9', '6-1', '5-8'],
'Weight': [89, 79, 113, 78, 84],
'College': ['MIT', 'MIT', 'MIT', 'Stanford', 'Stanford'],
'Salary': [99999, 99994, 89999, 78889, 87779]},
index =['ind1', 'ind2', 'ind3', 'ind4', 'ind5'])
print(df, ""\n"")

print(""Check PG values in Position column:\n"")
df1 = df['Position'].str.contains(""PG"")
print(df1)","import pandas as pd

df = pd.read_csv(""data.csv"")

# Solution 1
# df = pd.read_csv(""data.csv"", usecols=[""Name"", ""Age""])

# Solution 2
df = pd.read_csv(""data.csv"", usecols=[""Name"", ""Age"", ""Class""])

# Solution 3
df = pd.read_csv(""data.csv"", usecols=[""Name"", ""Age"
2249,Write a Python program to Filter Strings combination of K substrings,"# Python3 code to demonstrate working of
# Filter Strings combination of K substrings
# Using permutations() + map() + join() + set() + loop
from itertools import permutations

# initializing list
test_list = [""geeks4u"", ""allbest"", ""abcdef""]

# printing string
print(""The original list : "" + str(test_list))

# initializing substring list
substr_list = [""s4u"", ""est"", ""al"", ""ge"", ""ek"", ""def"", ""lb""]

# initializing K
K = 3

# getting all permutations
perms = list(set(map(''.join, permutations(substr_list, r = K))))

# using loop to check permutations with list
res = []
for ele in perms:
if ele in test_list:
res.append(ele)

# printing results
print(""Strings after joins : "" + str(res))","def solution(s, k):
    # your code goes here
    return s[:k]

""""""

def solution(s, k):
    # your code goes here
    return s[:k]

""""""

def solution(s, k):
    # your code goes here
    return s[:k]

""""""

def solution(s, k):
    # your code goes here
    return s[:k]

""""""

def solution(s, k):"
2250,Scrape and Save Table Data in CSV file using Selenium in Python,"from selenium import webdriver
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support.ui import WebDriverWait
import time
import pandas as pd
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.keys import Keys
import csv","import csv
import time
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.chrome.options import Options

# Open the browser
options = Options()"
2251,Program to print window pattern in Python,"// C++ program to print the pattern
// hollow square with plus inside it
// window pattern
#include <bits/stdc++.h>
using namespace std;

// Function to print pattern n means
// number of rows which we want
void window_pattern (int n)
{
int c, d;

// If n is odd then we will have
// only one middle element
if (n % 2 != 0)
{
c = (n / 2) + 1;
d = 0;
}

// If n is even then we will have two
// values
else
{
c = (n / 2) + 1;
d = n / 2 ;
}

for(int i = 1; i <= n; i++)
{
for(int j = 1; j <= n; j++)
{

// If i,j equals to corner row or
// column then ""*""
if (i == 1 || j == 1 ||
i == n || j == n)
cout << ""* "";

else
{

// If i,j equals to the middle
// row or column then ""*""
if (i == c || j == c)
cout << ""* "";

else if (i == d || j == d)
cout << ""* "";

else
cout << "" "";
}
}
cout << '\n';
}
}

// Driver Code
int main()
{
int n = 7;

window_pattern(n);
return 0;
}

// This code is contributed by himanshu77","def window_pattern(n):
    for i in range(n):
        for j in range(n-i):
            print(end="" "")
        for k in range(i+1):
            print(""*"",end="" "")
        print()

n = int(input(""Enter the window size: ""))
window_pattern(n)

""""""

# Solution

def window_pattern(n):
    for i in range(n):
        for j in range(n-i):
            print"
2252,Lambda expression in Python to rearrange positive and negative numbers,"# Function to rearrange positive and negative elements
def Rearrange(arr):

# First lambda expression returns list of negative numbers
# in arr.
# Second lambda expression returns list of positive numbers
# in arr.
return [x for x in arr if x < 0] + [x for x in arr if x >= 0]

# Driver function
if __name__ == ""__main__"":
arr = [12, 11, -13, -5, 6, -7, 5, -3, -6]
print (Rearrange(arr))","def rearrange(n):
    if n < 0:
        return -n
    elif n > 0:
        return n
    else:
        return 0

print(rearrange(5))

""""""

# Solution

def rearrange(n):
    if n < 0:
        return -n
    elif n > 0:
        return n
    else:
        return 0

print(rearrange(5))"
2253,Write a Python program to Sort by Frequency of second element in Tuple List,"# Python3 code to demonstrate working of
# Sort by Frequency of second element in Tuple List
# Using sorted() + loop + defaultdict() + lambda
from collections import defaultdict

# initializing list
test_list = [(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]

# printing original list
print(""The original list is : "" + str(test_list))

# constructing mapping
freq_map = defaultdict(int)
for idx, val in test_list:
freq_map[val] += 1

# performing sort of result
res = sorted(test_list, key = lambda ele: freq_map[ele[1]], reverse = True)

# printing results
print(""Sorted List of tuples : "" + str(res))","def sort_by_frequency(tuple_list):
    # your code goes here
    return sorted(tuple_list, key=lambda x: x[1])

tuple_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]
print(sort_by_frequency(tuple_list))

""""""

# Solution

def sort_by_frequency(tuple_list):
    # your code goes here"
2254,Write a Python program to count Even and Odd numbers in a List,"# Python program to count Even
# and Odd numbers in a List

# list of numbers
list1 = [10, 21, 4, 45, 66, 93, 1]

even_count, odd_count = 0, 0

# iterating each number in list
for num in list1:

# checking condition
if num % 2 == 0:
even_count += 1

else:
odd_count += 1

print(""Even numbers in the list: "", even_count)
print(""Odd numbers in the list: "", odd_count)","def count_even_odd(lst):
    even = 0
    odd = 0
    for i in lst:
        if i % 2 == 0:
            even += 1
        else:
            odd += 1
    return even, odd

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(count_even_odd(lst))

""""""

# Solution 1

def count_even_odd(lst):"
2255,Write a Python program to Test if List contains elements in Range,"# Python3 code to demonstrate
# Test if List contains elements in Range
# using loop

# Initializing loop
test_list = [4, 5, 6, 7, 3, 9]

# printing original list
print(""The original list is : "" + str(test_list))

# Initialization of range
i, j = 3, 10

# Test if List contains elements in Range
# using loop
res = True
for ele in test_list:
if ele < i or ele >= j :
res = False
break

# printing result
print (""Does list contain all elements in range : "" + str(res))","def test_list(list):
    for i in range(len(list)):
        if list[i] in range(0,10):
            print(list[i])

list = [1,2,3,4,5,6,7,8,9,10]
test_list(list)

""""""

def test_list(list):
    for i in range(len(list)):
        if list[i] in range(0,10):
            print(list"
2256,Select row with maximum and minimum value in Pandas dataframe in Python,"# importing pandas and numpy
import pandas as pd
import numpy as np

# data of 2018 drivers world championship
dict1 ={'Driver':['Hamilton', 'Vettel', 'Raikkonen',
'Verstappen', 'Bottas', 'Ricciardo',
'Hulkenberg', 'Perez', 'Magnussen',
'Sainz', 'Alonso', 'Ocon', 'Leclerc',
'Grosjean', 'Gasly', 'Vandoorne',
'Ericsson', 'Stroll', 'Hartley', 'Sirotkin'],

'Points':[408, 320, 251, 249, 247, 170, 69, 62, 56,
53, 50, 49, 39, 37, 29, 12, 9, 6, 4, 1],

'Age':[33, 31, 39, 21, 29, 29, 31, 28, 26, 24, 37,
22, 21, 32, 22, 26, 28, 20, 29, 23]}

# creating dataframe using DataFrame constructor
df = pd.DataFrame(dict1)
print(df.head(10))","import pandas as pd

df = pd.read_csv(""C:/Users/DELL/Downloads/pandas_data_visualization/data/data.csv"")

df.head()

df.columns

df.columns = ['Name', 'Age', 'Gender', 'Dependents', 'Siblings', 'Spouse', 'Parents', 'Job', 'Dependents', 'Siblings', 'Spouse', 'Parents', 'Job', 'Dependents', '"
2257,"Create an n x n square matrix, where all the sub-matrix have the sum of opposite corner elements as even in Python","// C++ program for
// the above approach
#include <bits/stdc++.h>
using namespace std;


void sub_mat_even(int N)
{
// Counter to initialize
// the values in 2-D array
int K = 1;

// To create a 2-D array
// from to 1 to N*2
int A[N][N];

for(int i = 0; i < N; i++)
{
for(int j = 0; j < N; j++)
{
A[i][j] = K;
K++;
}
}


// If found even we reverse
// the alternate row elements
// to get all diagonal elements
// as all even or all odd
if(N % 2 == 0)
{
for(int i = 0; i < N; i++)
{
if(i % 2 == 1)
{
int s = 0;
int l = N - 1;

// Reverse the row
while(s < l)
{
swap(A[i][s],
A[i][l]);
s++;
l--;
}
}
}
}


// Print the formed array
for(int i = 0; i < N; i++)
{
for(int j = 0; j < N; j++)
{
cout << A[i][j] << "" "";
}
cout << endl;
}
}


// Driver code
int main()
{
int N = 4;

// Function call
sub_mat_even(N);
}


// This code is contributed by mishrapriyanshu557","def solve(n, m):
    matrix = [[0 for i in range(n)] for j in range(n)]
    for i in range(n):
        for j in range(n):
            matrix[i][j] = i + j
    for i in range(n):
        for j in range(n):
            if i % 2 == 0:
                matrix[i][j] = matrix[i][j]"
2258,Write a Python program to Swap commas and dots in a String,"# Python code to replace, with . and vice-versa
def Replace(str1):
maketrans = str1.maketrans
final = str1.translate(maketrans(',.', '.,', ' '))
return final.replace(',', "", "")




# Driving Code
string = ""14, 625, 498.002""
print(Replace(string))","s = ""Hello World""

s = s.replace(',', '.')
s = s.replace('.', ',')
s = s.replace(' ', '.')

print(s)

# Solution:

# s = ""Hello World""
# s = s.replace(',', '.')
# s = s.replace('.', ',')
# s = s.replace(' ', '.')

# print(s)

# Solution:

#"
2259,Write a Python program to Filter Range Length Tuples,"# Python3 code to demonstrate working of
# Filter Range Length Tuples
# Using list comprehension + len()

# Initializing list
test_list = [(4, ), (5, 6), (2, 3, 5), (5, 6, 8, 2), (5, 9)]

# printing original list
print(""The original list is : "" + str(test_list))

# Initializing desired lengths
i, j = 2, 3

# Filter Range Length Tuples
# Using list comprehension + len()
res = [sub for sub in test_list if len(sub) >= i and len(sub) <= j]

# printing result
print(""The tuple list after filtering range records : "" + str(res))","def filter_range_length(tup):
    return tup[0] < tup[1] < tup[2]

tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

print(filter_range_length(tup))

""""""

def filter_range_length(tup):
    return tup[0] < tup[1] < tup[2]

tup = (1, 2, 3, 4,"
2260,How to rename columns in Pandas DataFrame in Python,"# Import pandas package
import pandas as pd

# Define a dictionary containing ICC rankings
rankings = {'test': ['India', 'South Africa', 'England',
'New Zealand', 'Australia'],
'odi': ['England', 'India', 'New Zealand',
'South Africa', 'Pakistan'],
't20': ['Pakistan', 'India', 'Australia',
'England', 'New Zealand']}

# Convert the dictionary into DataFrame
rankings_pd = pd.DataFrame(rankings)

# Before renaming the columns
print(rankings_pd)

rankings_pd.rename(columns = {'test':'TEST'}, inplace = True)

# After renaming the columns
print(""\nAfter modifying first column:\n"", rankings_pd.columns)","import pandas as pd

df = pd.DataFrame({""A"": [1, 2, 3], ""B"": [4, 5, 6]})

df.rename(columns={""A"": ""A_new"", ""B"": ""B_new""}, inplace=True)

df

df.rename(columns={""A"": ""A_new"", ""B"": ""B_new""}, inplace=True)

df

df.rename(columns={""A"
2261,Write a Python program to print all positive numbers in a range,"# Python program to print positive Numbers in given range

start, end = -4, 19

# iterating each number in list
for num in range(start, end + 1):

# checking condition
if num >= 0:
print(num, end = "" "")","def positive_numbers(start, end):
    for i in range(start, end+1):
        if i > 0:
            if i % 2 == 0:
                print(i, end="" "")

positive_numbers(1, 10)

""""""

def positive_numbers(start, end):
    for i in range(start, end+1):
        if i > 0:
            if i % 2 == 0:
                print(i, end="" "")"
2262,Write a Python program to Numpy matrix.round(),"# import the important module in python
import numpy as np

# make matrix with numpy
gfg = np.matrix('[6.4, 1.3; 12.7, 32.3]')

# applying matrix.round() method
geeks = gfg.round()

print(geeks)","import numpy as np

matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(matrix.round())

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13"
2263,Write a Python program to Elements frequency in Tuple,"# Python3 code to demonstrate working of
# Elements frequency in Tuple
# Using defaultdict()
from collections import defaultdict


# initializing tuple
test_tup = (4, 5, 4, 5, 6, 6, 5, 5, 4)


# printing original tuple
print(""The original tuple is : "" + str(test_tup))


res = defaultdict(int)
for ele in test_tup:

# incrementing frequency
res[ele] += 1


# printing result
print(""Tuple elements frequency is : "" + str(dict(res)))","def elements_frequency(tuple):
    return tuple.count(tuple[0])

tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,"
2264,Get n-smallest values from a particular column in Pandas DataFrame in Python,"# importing pandas module
import pandas as pd

# making data frame
df = pd.read_csv(""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv"")

df.head(10)","import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

# Print the DataFrame
print"
2265,Write a Python program to Retain records with N occurrences of K,"# Python3 code to demonstrate working of
# Retain records with N occurrences of K
# Using count() + list comprehension


# initializing list
test_list = [(4, 5, 6, 4, 4), (4, 4, 3), (4, 4, 4), (3, 4, 9)]


# printing original list
print(""The original list is : "" + str(test_list))


# initializing K
K = 4


# initializing N
N = 3


# Retain records with N occurrences of K
# Using count() + list comprehension
res = [ele for ele in test_list if ele.count(K) == N]


# printing result
print(""Filtered tuples : "" + str(res))","def solution(record, K, x):
    answer = []
    for i in record:
        if i.count(K) > 0:
            answer.append(i)
    return answer

# Test
print(solution([""Enter uid1234 Muzi"", ""Enter uid4567 Prodo"",""Leave uid1234"",""Enter uid1234 Prodo"",""Change uid4567 Ryan""],3,4))

# Output
# Enter uid1234 Muzi
# Enter u"
2266,numpy matrix operations | rand() function in Python,"# Python program explaining
# numpy.matlib.rand() function

# importing matrix library from numpy
import numpy as geek
import numpy.matlib

# desired 3 x 4 random output matrix
out_mat = geek.matlib.rand((3, 4))
print (""Output matrix : "", out_mat)","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(A)

print(A.sum())

print(A.mean())

print(A.max())

print(A.min())

print(A.transpose())

print(A.dot(A))

print(A.dot(A, axis=0))

print(A.dot(A, axis="
2267,Write a Python program to Convert list of nested dictionary into Pandas dataframe,"# importing pandas
import pandas as pd

# List of nested dictionary initialization
list = [
{
""Student"": [{""Exam"": 90, ""Grade"": ""a""},
{""Exam"": 99, ""Grade"": ""b""},
{""Exam"": 97, ""Grade"": ""c""},
],
""Name"": ""Paras Jain""
},
{
""Student"": [{""Exam"": 89, ""Grade"": ""a""},
{""Exam"": 80, ""Grade"": ""b""}
],
""Name"": ""Chunky Pandey""
}
]

#print(list)","import pandas as pd

# Create a dictionary
d = {'a': 1, 'b': 2, 'c': 3}

# Create a dataframe
df = pd.DataFrame(d)

# Print the dataframe
print(df)

# Create a dataframe from a list of dictionaries
df2 = pd.DataFrame(d, columns=['a', 'b', 'c'])

# Print the dataframe
print(df2)"
2268,Write a Python program to Swapping Hierarchy in Nested Dictionaries,"# Python3 code to demonstrate working of
# Swapping Hierarchy in Nested Dictionaries
# Using loop + items()


# initializing dictionary
test_dict = {'Gfg': { 'a' : [1, 3], 'b' : [3, 6], 'c' : [6, 7, 8]},
'Best': { 'a' : [7, 9], 'b' : [5, 3, 2], 'd' : [0, 1, 0]}}


# printing original dictionary
print(""The original dictionary : "" + str(test_dict))


# Swapping Hierarchy in Nested Dictionaries
# Using loop + items()
res = dict()
for key, val in test_dict.items():
for key_in, val_in in val.items():
if key_in not in res:
temp = dict()
else:
temp = res[key_in]
temp[key] = val_in
res[key_in] = temp


# printing result
print(""The rearranged dictionary : "" + str(res))","def swap_hierarchy(d):
    for i in d:
        for j in d[i]:
            d[i][j] = d[i][j][0]
    return d

d = {'a': {'b': {'c': 1, 'd': 2}, 'e': 3}, 'b': {'c': 4, 'd': 5}, 'c': 6, 'd': 7}
print(swap_hierarchy(d))

"""""""
2269,How to get all 2D diagonals of a 3D NumPy array in Python,"# Import the numpy package
import numpy as np

# Create 3D-numpy array
# of 4 rows and 4 columns
arr = np.arange(3 * 4 * 4).reshape(3, 4, 4)

print(""Original 3d array:\n"",
arr)

# Create 2D diagonal array
diag_arr = np.diagonal(arr,
axis1 = 1,
axis2 = 2)

print(""2d diagonal array:\n"",
diag_arr)","import numpy as np

# Create a 3D NumPy array
arr = np.array([[1, 2, 3],
                [4, 5, 6],
                [7, 8, 9]])

# Print the solution
print(arr)

# Print the solution in a 2D array
print(arr.T)

# Print the solution in a 2D array
print(arr.T.reshape(3, 2))

# Print the solution in a"
2270,Write a Python Counter to find the size of largest subset of anagram words,"# Function to find the size of largest subset
# of anagram words
from collections import Counter

def maxAnagramSize(input):

# split input string separated by space
input = input.split("" "")

# sort each string in given list of strings
for i in range(0,len(input)):
input[i]=''.join(sorted(input[i]))

# now create dictionary using counter method
# which will have strings as key and their
# frequencies as value
freqDict = Counter(input)

# get maximum value of frequency
print (max(freqDict.values()))

# Driver program
if __name__ == ""__main__"":
input = 'ant magenta magnate tan gnamate'
maxAnagramSize(input)","def solution(words):
    # Write your code here
    word_set = set(words)
    word_set = sorted(word_set)
    return len(word_set)

print(solution([""cba"",""bab"",""bac""]))
print(solution([""a"",""a"",""b"",""b"",""b""]))
print(solution([""a"",""a"",""b"",""b"",""b"",""b""]))
print(solution([""a"",""a"",""b"",""b"
2271,Write a Python Program for Anagram Substring Search (Or Search for all permutations),"# Python program to search all
# anagrams of a pattern in a text

MAX = 256

# This function returns true
# if contents of arr1[] and arr2[]
# are same, otherwise false.
def compare(arr1, arr2):
for i in range(MAX):
if arr1[i] != arr2[i]:
return False
return True

# This function search for all
# permutations of pat[] in txt[]
def search(pat, txt):

M = len(pat)
N = len(txt)

# countP[]: Store count of
# all characters of pattern
# countTW[]: Store count of
# current window of text
countP = [0]*MAX

countTW = [0]*MAX

for i in range(M):
(countP[ord(pat[i]) ]) += 1
(countTW[ord(txt[i]) ]) += 1

# Traverse through remaining
# characters of pattern
for i in range(M, N):

# Compare counts of current
# window of text with
# counts of pattern[]
if compare(countP, countTW):
print(""Found at Index"", (i-M))

# Add current character to current window
(countTW[ ord(txt[i]) ]) += 1

# Remove the first character of previous window
(countTW[ ord(txt[i-M]) ]) -= 1

# Check for the last window in text
if compare(countP, countTW):
print(""Found at Index"", N-M)

# Driver program to test above function
txt = ""BACDGABCDA""
pat = ""ABCD""
search(pat, txt)

# This code is contributed
# by Upendra Singh Bartwal","def anagram(s1, s2):
    if len(s1)!= len(s2):
        return False
    else:
        for i in range(len(s1)):
            if s1[i]!= s2[i]:
                return False
        return True

print(anagram(""abc"", ""cba""))
print(anagram(""abc"", ""abca""))
print(anagram(""abc"", ""cba""))
print(anagram("""
2272,How to Convert an image to NumPy array and saveit to CSV file using Python,"# import required libraries
from PIL import Image
import numpy as gfg


# read an image
img = Image.open('geeksforgeeks.jpg')


# convert image object into array
imageToMatrice = gfg.asarray(img)


# printing shape of image
print(imageToMatrice.shape)","import numpy as np

# Read the image
img = np.array(Image.open('image.jpg'))

# Convert the image to NumPy array
img_np = np.array(img)

# Save the NumPy array as a CSV file
np.savetxt('image.csv', img_np, delimiter=',')

# Open the CSV file as a Python code
with open('image.csv', 'r') as f:
    # Read the CSV file"
2273,Write a Python program to build flashcard using class in Python,"class flashcard:
def __init__(self, word, meaning):
self.word = word
self.meaning = meaning
def __str__(self):

#we will return a string
return self.word+' ( '+self.meaning+' )'

flash = []
print(""welcome to flashcard application"")

#the following loop will be repeated until
#user stops to add the flashcards
while(True):
word = input(""enter the name you want to add to flashcard : "")
meaning = input(""enter the meaning of the word : "")

flash.append(flashcard(word, meaning))
option = int(input(""enter 0 , if you want to add another flashcard : ""))

if(option):
break

# printing all the flashcards
print(""\nYour flashcards"")
for i in flash:
print("">"", i)","import random

class Flashcard:
    def __init__(self, words):
        self.words = words
        self.word_list = []
        for word in words:
            self.word_list.append(word)
        self.word_length = len(self.word_list)
        self.word_length_list = []
        for word in self.word_list:
            self.word_length_list.append(len(word))
        self.word_length_"
2274,Write a Python program to Divide date range to N equal duration,"# Python3 code to demonstrate working of
# Convert date range to N equal durations
# Using loop
import datetime

# initializing dates
test_date1 = datetime.datetime(1997, 1, 4)
test_date2 = datetime.datetime(1997, 1, 30)

# printing original dates
print(""The original date 1 is : "" + str(test_date1))
print(""The original date 2 is : "" + str(test_date2))

# initializing N
N = 7

temp = []

# getting diff.
diff = ( test_date2 - test_date1) // N
for idx in range(0, N):

# computing new dates
temp.append((test_date1 + idx * diff))

# using strftime to convert to userfriendly
# format
res = []
for sub in temp:
res.append(sub.strftime(""%Y/%m/%d %H:%M:%S""))

# printing result
print(""N equal duration dates : "" + str(res))","def divide_date_range(start_date, end_date, duration):
    start_date = datetime.strptime(start_date, '%Y-%m-%d')
    end_date = datetime.strptime(end_date, '%Y-%m-%d')
    duration = int(duration)
    start_date = start_date + timedelta(days=duration)
    end_date = end_date + timedelta(days=duration)
    return"
2275,How to create multiple CSV files from existing CSV file using Pandas  in Python,"import pandas as pd


# initialise data dictionary.
data_dict = {'CustomerID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],

'Gender': [""Male"", ""Female"", ""Female"", ""Male"",
""Male"", ""Female"", ""Male"", ""Male"",
""Female"", ""Male""],

'Age': [20, 21, 19, 18, 25, 26, 32, 41, 20, 19],

'Annual Income(k$)': [10, 20, 30, 10, 25, 60, 70,
15, 21, 22],

'Spending Score': [30, 50, 48, 84, 90, 65, 32, 46,
12, 56]}


# Create DataFrame
data = pd.DataFrame(data_dict)


# Write to CSV file
data.to_csv(""Customers.csv"")


# Print the output.
print(data)","import csv

with open('data.csv', 'r') as f:
    reader = csv.reader(f)
    file_data = list(reader)

# To remove the header from the data
file_data.pop(0)

# To convert the data into a list
data = []
for row in file_data:
    data.append(row)

# To print the data
print(data)

# To create a new CSV file
with open"
2276,Change Data Type for one or more columns in Pandas Dataframe in Python,"# importing pandas as pd
import pandas as pd

# sample dataframe
df = pd.DataFrame({
'A': [1, 2, 3, 4, 5],
'B': ['a', 'b', 'c', 'd', 'e'],
'C': [1.1, '1.0', '1.3', 2, 5] })

# converting all columns to string type
df = df.astype(str)
print(df.dtypes)","import pandas as pd

# Create a Dataframe
df = pd.DataFrame({
    'col1': [1, 2, 3, 4, 5],
    'col2': [10, 20, 30, 40, 50],
    'col3': [100, 200, 300, 400, 500]
})

# Create a Dataframe with mixed type columns
df = pd.DataFrame({
    'col1': [1, 2, 3, 4, 5],"
2277,Convert Text file to JSON in Python,"# Python program to convert text
# file to JSON


import json


# the file to be converted to
# json format
filename = 'data.txt'

# dictionary where the lines from
# text will be stored
dict1 = {}

# creating dictionary
with open(filename) as fh:

for line in fh:

# reads each line and trims of extra the spaces
# and gives only the valid words
command, description = line.strip().split(None, 1)

dict1[command] = description.strip()

# creating json file
# the JSON file is named as test1
out_file = open(""test1.json"", ""w"")
json.dump(dict1, out_file, indent = 4, sort_keys = False)
out_file.close()","#!/usr/bin/env python

import json

def main():
    # Open the file
    inFile = open('text.txt', 'r')
    # Read the file line by line
    for line in inFile:
        # Convert each line to a dictionary
        line = line.strip()
        d = json.loads(line)
        # Print the dictionary
        print(d)
    # Close the file
    inFile.close()

if __name__ == '__main__':"
2278,Write a Python program to Read CSV Columns Into List,"# importing module
from pandas import *


# reading CSV file
data = read_csv(""company_sales_data.csv"")


# converting column data to list
month = data['month_number'].tolist()
fc = data['facecream'].tolist()
fw = data['facewash'].tolist()
tp = data['toothpaste'].tolist()
sh = data['shampoo'].tolist()


# printing list data
print('Facecream:', fc)
print('Facewash:', fw)
print('Toothpaste:', tp)
print('Shampoo:', sh)","import csv

with open('data.csv', 'r') as csvfile:
    readCSV = csv.reader(csvfile)
    data = list(readCSV)

print(data)

# Solution:

# import csv
#
# with open('data.csv', 'r') as csvfile:
#     readCSV = csv.reader(csvfile)
#     data = list(readCSV)
#
# print(data)

#"
2279,Write a Python program to Search an Element in a Circular Linked List,"# Python program to Search an Element
# in a Circular Linked List

# Class to define node of the linked list
class Node:
def __init__(self,data):
self.data = data;
self.next = None;

class CircularLinkedList:

# Declaring Circular Linked List
def __init__(self):
self.head = Node(None);
self.tail = Node(None);
self.head.next = self.tail;
self.tail.next = self.head;


# Adds new nodes to the Circular Linked List
def add(self,data):

# Declares a new node to be added
newNode = Node(data);

# Checks if the Circular
# Linked List is empty
if self.head.data is None:

# If list is empty then new node
# will be the first node
# to be added in the Circular Linked List
self.head = newNode;
self.tail = newNode;
newNode.next = self.head;

else:
# If a node is already present then
# tail of the last node will point to
# new node
self.tail.next = newNode;

# New node will become new tail
self.tail = newNode;

# New Tail will point to the head
self.tail.next = self.head;

# Function to search the element in the
# Circular Linked List
def findNode(self,element):

# Pointing the head to start the search
current = self.head;
i = 1;

# Declaring f = 0
f = 0;
# Check if the list is empty or not
if(self.head == None):
print(""Empty list"");
else:
while(True):
# Comparing the elements
# of each node to the
# element to be searched
if(current.data == element):

# If the element is present
# then incrementing f
f += 1;
break;

# Jumping to next node
current = current.next;
i = i + 1;

# If we reach the head
# again then element is not
# present in the list so
# we will break the loop
if(current == self.head):
break;

# Checking the value of f
if(f > 0):
print(""element is present"");
else:
print(""element is not present"");

# Driver Code
if __name__ == '__main__':

# Creating a Circular Linked List
'''
Circular Linked List we will be working on:
1 -> 2 -> 3 -> 4 -> 5 -> 6
'''
circularLinkedList = CircularLinkedList();

#Adding nodes to the list
circularLinkedList.add(1);
circularLinkedList.add(2);
circularLinkedList.add(3);
circularLinkedList.add(4);
circularLinkedList.add(5);
circularLinkedList.add(6);

# Searching for node 2 in the list
circularLinkedList.findNode(2);

#Searching for node in the list
circularLinkedList.findNode(7);","def search(head, x):
    if head is None:
        return False
    if head.data == x:
        return True
    if head.data > x:
        return search(head.next, x)
    return search(head.next, x)

# Driver Code
if __name__ == '__main__':
    head = CircularLinkedList()
    head.append(1)
    head.append(2)
    head.append(3)"
2280,Isoformat to datetime  Python,"# importing datetime module
from datetime import datetime

# Getting today's date
todays_Date = datetime.now()

# Get date into the isoformat
isoformat_date = todays_Date.isoformat()

# print the type of date
print(type(isoformat_date))

# convert string date into datetime format
result = datetime.fromisoformat(isoformat_date)
print(type(result))","def isoformat(dt):
    return dt.isoformat()

def isoformat_to_datetime(dt):
    return dt.isoformat()

def isoformat_to_datetime_to_isoformat(dt):
    return dt.isoformat()

def isoformat_to_datetime_to_isoformat_to_isoformat(dt):
    return dt.isoformat()

def isoformat_to_datetime_to_isoformat_to_isoformat_to_iso"
2281,Drop rows from the dataframe based on certain condition applied on a column in Python,"# importing pandas as pd
import pandas as pd

# Read the csv file and construct the
# dataframe
df = pd.read_csv('nba.csv')

# Visualize the dataframe
print(df.head(15)

# Print the shape of the dataframe
print(df.shape)","df.loc[df['age'] < 18, 'age'] = 0
df.loc[df['age'] < 18, 'age'] = 1
df.loc[df['age'] < 18, 'age'] = 2
df.loc[df['age'] < 18, 'age'] = 3
df.loc[df['age'] < 18, 'age'] = 4
df.loc[df['age'] < 18, 'age'] = 5
df.loc[df['age'] < 18"
2282,Categorize Password as Strong or Weak using Regex in Python,"# Categorizing password as Strong or
# Weak in Python using Regex


import re


# Function to categorize password
def password(v):

# the password should not be a
# newline or space
if v == ""\n"" or v == "" "":
return ""Password cannot be a newline or space!""

# the password length should be in
# between 9 and 20
if 9 <= len(v) <= 20:

# checks for occurrence of a character
# three or more times in a row
if re.search(r'(.)\1\1', v):
return ""Weak Password: Same character repeats three or more times in a row""

# checks for occurrence of same string
# pattern( minimum of two character length)
# repeating
if re.search(r'(..)(.*?)\1', v):
return ""Weak password: Same string pattern repetition""

else:
return ""Strong Password!""

else:
return ""Password length must be 9-20 characters!""

# Main method
def main():

# Driver code
print(password(""Qggf!@ghf3""))
print(password(""Gggksforgeeks""))
print(password(""aaabnil1gu""))
print(password(""Aasd!feasn""))
print(password(""772*hd897""))
print(password("" ""))


# Driver Code
if __name__ == '__main__':
main()","import re

def password_checker(password):
    #Regex pattern to check the password
    regex = r'\b[A-Z]\w{6,}\b'
    #Regex pattern to check the password
    password_pattern = r'\b[A-Z]\w{6,}\b'
    #Regex pattern to check the password
    password_pattern_2 = r'\b[A-Z]\w{6,}\b'
    #"
2283,Create a Pandas Series from array in Python,"# importing Pandas & numpy
import pandas as pd
import numpy as np

# numpy array
data = np.array(['a', 'b', 'c', 'd', 'e'])

# creating series
s = pd.Series(data)
print(s)","import pandas as pd

# Create a Pandas Series from array in Python

# Create a Pandas Series from array in Python

# Create a Pandas Series from array in Python

# Create a Pandas Series from array in Python

# Create a Pandas Series from array in Python

# Create a Pandas Series from array in Python

# Create a Pandas Series from array in Python

# Create a Pandas Series from array in Python

# Create a Pandas Series from array in Python

# Create a"
2284,Write a Python program to Find the Number Occurring Odd Number of Times using Lambda expression and reduce function,"# Python program to Find the Number
# Occurring Odd Number of Times
# using Lambda expression and reduce function

from functools import reduce

def oddTimes(input):
# write lambda expression and apply
# reduce function over input list
# until single value is left
# expression reduces value of a ^ b into single value
# a starts from 0 and b from 1
# ((((((1 ^ 2)^3)^2)^3)^1)^3)
print (reduce(lambda a, b: a ^ b, input))

# Driver program
if __name__ == ""__main__"":
input = [1, 2, 3, 2, 3, 1, 3]
oddTimes(input)","def odd_number(n):
    return lambda x: x % 2!= 0

print(list(map(odd_number, range(1, 10))))

""""""

# Solution

def odd_number(n):
    return lambda x: x % 2!= 0

print(list(map(odd_number, range(1, 10))))"
2285,Possible Words using given characters in Python,"# Function to print words which can be created
# using given set of characters



def charCount(word):
dict = {}
for i in word:
dict[i] = dict.get(i, 0) + 1
return dict


def possible_words(lwords, charSet):
for word in lwords:
flag = 1
chars = charCount(word)
for key in chars:
if key not in charSet:
flag = 0
else:
if charSet.count(key) != chars[key]:
flag = 0
if flag == 1:
print(word)

if __name__ == ""__main__"":
input = ['goo', 'bat', 'me', 'eat', 'goal', 'boy', 'run']
charSet = ['e', 'o', 'b', 'a', 'm', 'g', 'l']
possible_words(input, charSet)","def solution(word):
    # write your code in Python 3.6
    # return the number of words in the given string
    # if the string is empty return 0
    # if the string is not empty return the number of words in the string
    # if the string is empty return 0
    # if the string is empty return 0
    # if the string is empty return 0
    # if the string is empty return 0
    # if the string is empty return 0
    # if the string is empty return 0
    # if the"
2286,Write a Python program to Custom sorting in list of tuples,"# Python3 code to demonstrate working of
# Custom sorting in list of tuples
# Using sorted() + lambda

# Initializing list
test_list = [(7, 8), (5, 6), (7, 5), (10, 4), (10, 1)]

# printing original list
print(""The original list is : "" + str(test_list))

# Custom sorting in list of tuples
# Using sorted() + lambda
res = sorted(test_list, key = lambda sub: (-sub[0], sub[1]))

# printing result
print(""The tuple after custom sorting is : "" + str(res))","def sort_tuple(tup):
    return tup[0]

def sort_tuple_2(tup):
    return tup[1]

def sort_tuple_3(tup):
    return tup[2]

def sort_tuple_4(tup):
    return tup[3]

def sort_tuple_5(tup):
    return tup[4]

def sort_tuple_6(tup):"
2287,Write a Python program to Skew Nested Tuple Summation,"# Python3 code to demonstrate working of
# Skew Nested Tuple Summation
# Using infinite loop

# initializing tuple
test_tup = (5, (6, (1, (9, (10, None)))))

# printing original tuple
print(""The original tuple is : "" + str(test_tup))

res = 0
while test_tup:
res += test_tup[0]

# assigning inner tuple as original
test_tup = test_tup[1]

# printing result
print(""Summation of 1st positions : "" + str(res))","def SkewNestedTupleSummation(n, a, b):
    return a + b + (n - 1) * (b - a)

n = int(input())
a = int(input())
b = int(input())
print(SkewNestedTupleSummation(n, a, b))

""""""

def SkewNestedTupleSummation(n, a, b):
    return a + b + (n - 1) * (b"
2288,Write a Python program to Filter Tuples by Kth element from List,"# Python3 code to demonstrate working of
# Filter Tuples by Kth element from List
# Using list comprehension

# initializing list
test_list = [(""GFg"", 5, 9), (""is"", 4, 3), (""best"", 10, 29)]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing check_list
check_list = [4, 2, 8, 10]

# initializing K
K = 1

# checking for presence on Kth element in list
# one liner
res = [sub for sub in test_list if sub[K] in check_list]

# printing result
print(""The filtered tuples : "" + str(res))","def filter_tuples(tup, k):
    return tuple(filter(lambda x: x[k] == tup[k], tup))

tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
k = 3
print(filter_tuples(tup, k))

""""""

# Solution

def filter_tuples(tup, k):
    return tuple(filter(lambda x: x[k] == tup"
2289,How to get list of parameters name from a function in Python,"# import required modules
import inspect
import collections

# use signature()
print(inspect.signature(collections.Counter))","def get_parameters(func):
    parameters = func.__code__.co_varnames
    return parameters

def get_parameters(func):
    parameters = func.__code__.co_argcount
    return parameters

def get_parameters(func):
    parameters = func.__code__.co_kwonlyargcount
    return parameters

def get_parameters(func):
    parameters = func.__code__.co_kwonlyargcount"
2290,Different ways to clear a list in Python,"# Python program to clear a list
# using clear() method

# Creating list
GEEK = [6, 0, 4, 1]
print('GEEK before clear:', GEEK)

# Clearing list
GEEK.clear()
print('GEEK after clear:', GEEK)","def clear_list(list):
    list.clear()

# Test your solution

# Example 1:

# Input:
# [""Animal"", ""bat"", ""cat"", ""bat"", ""cow"", ""cow"", ""horse"", ""horse"", ""sheep"", ""cow"", ""cow"", ""horse"", ""cow"", ""cow"", ""horse"", ""cow"", ""cow"", ""horse"", ""cow"", ""cow"", ""cow"", ""cow"", ""cow"", ""cow"", ""cow"", ""cow"", ""cow"", ""cow"", ""cow"","
2291,Write a Python program to extract Strings between HTML Tags,"# importing re module
import re

# initializing string
test_str = '<b>Gfg</b> is <b>Best</b>. I love <b>Reading CS</b> from it.'

# printing original string
print(""The original string is : "" + str(test_str))

# initializing tag
tag = ""b""

# regex to extract required strings
reg_str = ""<"" + tag + "">(.*?)</"" + tag + "">""
res = re.findall(reg_str, test_str)

# printing result
print(""The Strings extracted : "" + str(res))","import re

html = '''
<html>
<head>
<title>The Dormouse's story</title>
</head>
<body>
<p class=""title""><b>The Dormouse's story</b></p>
<p class=""story"">Once upon a time there were three little sisters; and their names were
<a href=""http://example.com/elsie"" class=""sister"" id=""link1"">Elsie</a>,
<a href=""http://example.com"
2292,Rename a folder of images using Tkinter in Python,"# Python 3 code to rename multiple image
# files in a directory or folder


import os
from tkinter import messagebox
import cv2
from tkinter import filedialog
from tkinter import *


height1 = 0
width1 = 0

# Function to select folder to rename images
def get_folder_path():

root = Tk()
root.withdraw()
folder_selected = filedialog.askdirectory()

return folder_selected


# Function to rename multiple files
def submit():

source = src_dir.get()
src_dir.set("""")
global width1
global height1

input_folder = get_folder_path()
i = 0

for img_file in os.listdir(input_folder):

file_name = os.path.splitext(img_file)[0]
extension = os.path.splitext(img_file)[1]

if extension == '.jpg':
src = os.path.join(input_folder, img_file)
img = cv2.imread(src)
h, w, c = img.shape
dst = source + '-' + str(i) + '-' + str(w) + ""x"" + str(h) + "".jpg""
dst = os.path.join(input_folder, dst)

# rename() function will rename all the files
os.rename(src, dst)
i += 1

messagebox.showinfo(""Done"", ""All files renamed successfully !!"")



# Driver Code
if __name__ == '__main__':
top = Tk()
top.geometry(""450x300"")
top.title(""Image Files Renamer"")
top.configure(background =""Dark grey"")

# For Input Label
input_path = Label(top,
text =""Enter Name to Rename files:"",
bg =""Dark grey"").place(x = 40, y = 60)

# For Input Textbox
src_dir = StringVar()
input_path_entry_area = Entry(top,
textvariable = src_dir,
width = 50).place(x = 40, y = 100)

# For submit button
submit_button = Button(top,
text =""Submit"",
command = submit).place(x = 200, y = 150)

top.mainloop()","import os
import tkinter as tk
from tkinter import filedialog

def rename_folder():
    root = tk.Tk()
    root.withdraw()
    path = filedialog.askdirectory()
    os.chdir(path)
    os.rename('images', 'images_new')
    root.destroy()

rename_folder()

""""""

import os
import tkinter as tk
from tkinter import filedialog"
2293,Compare two Files line by line in Python,"# Importing difflib
import difflib

with open('file1.txt') as file_1:
file_1_text = file_1.readlines()

with open('file2.txt') as file_2:
file_2_text = file_2.readlines()

# Find and print the diff:
for line in difflib.unified_diff(
file_1_text, file_2_text, fromfile='file1.txt',
tofile='file2.txt', lineterm=''):
print(line)","1. Open the first file
2. Read the first line
3. Read the second line
4. Compare the lines
5. Close the file

""""""

# 1. Open the first file
f1 = open(""file1.txt"", ""r"")

# 2. Read the first line
line = f1.readline()

# 3. Read the second line
line = f1.readline()

# 4. Compare the lines
if line!= """":
    print(line)

# 5. Close"
2294,Write a Python program to Numpy matrix.sort(),"# import the important module in python
import numpy as np

# make matrix with numpy
gfg = np.matrix('[4, 1; 12, 3]')

# applying matrix.sort() method
gfg.sort()

print(gfg)","import numpy as np

A = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

print(A.sort())

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12"
2295,Write a Python program to Group Elements in Matrix,"# Python3 code to demonstrate working of
# Group Elements in Matrix
# Using dictionary comprehension + loop

# initializing list
test_list = [[5, 8], [2, 0], [5, 4], [2, 3], [7, 9]]

# printing original list
print(""The original list : "" + str(test_list))

# initializing empty dictionary with default empty list
res = {idx[0]: [] for idx in test_list}

# using loop for grouping
for idx in test_list:
res[idx[0]].append(idx[1])

# printing result
print(""The Grouped Matrix : "" + str(res))","def group_elements(matrix):
    # Write your code here
    if len(matrix) == 0:
        return []
    if len(matrix) == 1:
        return [matrix[0]]
    if len(matrix) == 2:
        return [matrix[0], matrix[1]]
    if len(matrix) == 3:
        return [matrix[0], matrix[1], matrix[2]]
    if len(matrix) == 4:
        return [mat"
2296,Write a Python Program to Convert String Matrix Representation to Matrix,"import re

# initializing string
test_str = ""[gfg,is],[best,for],[all,geeks]""

# printing original string
print(""The original string is : "" + str(test_str))

flat_1 = re.findall(r""\[(.+?)\]"", test_str)
res = [sub.split("","") for sub in flat_1]

# printing result
print(""The type of result : "" + str(type(res)))
print(""Converted Matrix : "" + str(res))","def matrix_to_string(matrix):
    # your code goes here
    return matrix

def string_to_matrix(string):
    # your code goes here
    return string

def matrix_to_string(matrix):
    # your code goes here
    return matrix

def matrix_to_string(matrix):
    # your code goes here
    return matrix

def matrix_to_string(matrix):
    # your code goes here
    return matrix

def"
2297,How to get selected value from listbox in tkinter in Python,"# Python3 program to get selected
# value(s) from tkinter listbox


# Import tkinter
from tkinter import *


# Create the root window
root = Tk()
root.geometry('180x200')


# Create a listbox
listbox = Listbox(root, width=40, height=10, selectmode=MULTIPLE)


# Inserting the listbox items
listbox.insert(1, ""Data Structure"")
listbox.insert(2, ""Algorithm"")
listbox.insert(3, ""Data Science"")
listbox.insert(4, ""Machine Learning"")
listbox.insert(5, ""Blockchain"")


# Function for printing the
# selected listbox value(s)
def selected_item():

# Traverse the tuple returned by
# curselection method and print
# corresponding value(s) in the listbox
for i in listbox.curselection():
print(listbox.get(i))


# Create a button widget and
# map the command parameter to
# selected_item function
btn = Button(root, text='Print Selected', command=selected_item)


# Placing the button and listbox
btn.pack(side='bottom')
listbox.pack()


root.mainloop()","import tkinter as tk

def get_selected_row(event):
    try:
        global selected_tuple
        index = list_box.curselection()[0]
        selected_tuple = list_box.get(index)
        e1.delete(0, tk.END)
        e1.insert(tk.END, selected_tuple[1])
        e2.delete(0, tk.END)
        e2.insert(tk."
2298,Write a Python program to Modulo of tuple elements,"# Python3 code to demonstrate working of
# Tuple modulo
# using zip() + generator expression

# initialize tuples
test_tup1 = (10, 4, 5, 6)
test_tup2 = (5, 6, 7, 5)

# printing original tuples
print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))

# Tuple modulo
# using zip() + generator expression
res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2))

# printing result
print(""The modulus tuple : "" + str(res))","def modulo(tup):
    return tup[0] % tup[1]

tup = (1, 2, 3, 4, 5)
print(modulo(tup))

""""""

# Solution

def modulo(tup):
    return tup[0] % tup[1]

tup = (1, 2, 3, 4, 5)
print(modulo(tup))"
2299,Write a Python Script to change name of a file to its timestamp,"import time
import os


# Getting the path of the file
f_path = ""/location/to/gfg.png""

# Obtaining the creation time (in seconds)
# of the file/folder (datatype=int)
t = os.path.getctime(f_path)

# Converting the time to an epoch string
# (the output timestamp string would
# be recognizable by strptime() without
# format quantifers)
t_str = time.ctime(t)

# Converting the string to a time object
t_obj = time.strptime(t_str)

# Transforming the time object to a timestamp
# of ISO 8601 format
form_t = time.strftime(""%Y-%m-%d %H:%M:%S"", t_obj)

# Since colon is an invalid character for a
# Windows file name Replacing colon with a
# similar looking symbol found in unicode
# Modified Letter Colon "" "" (U+A789)
form_t = form_t.replace("":"", """")

# Renaming the filename to its timestamp
os.rename(
f_path, os.path.split(f_path)[0] + '/' + form_t + os.path.splitext(f_path)[1])","import os

def change_name(filename):
    # Open the file for reading
    f = open(filename, 'r')
    # Read the file
    text = f.read()
    # Close the file
    f.close()
    # Change the name
    text = text.replace('\n','')
    # Open the file for writing
    f = open(filename, 'w')
    # Write the file
    f.write(text)
    # Close the file"
2300,Write a Python program to count Even and Odd numbers in a List,"# Python program to count Even
# and Odd numbers in a List

# list of numbers
list1 = [10, 21, 4, 45, 66, 93, 1]

even_count, odd_count = 0, 0

# iterating each number in list
for num in list1:

# checking condition
if num % 2 == 0:
even_count += 1

else:
odd_count += 1

print(""Even numbers in the list: "", even_count)
print(""Odd numbers in the list: "", odd_count)","def count_even_odd(lst):
    even = 0
    odd = 0
    for i in lst:
        if i % 2 == 0:
            even += 1
        else:
            odd += 1
    return even, odd

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(count_even_odd(lst))

""""""

# Solution 1

def count_even_odd(lst):"
2301,Write a Python program to Frequency of numbers in String,"# Python3 code to demonstrate working of
# Frequency of numbers in String
# Using re.findall() + len()
import re

# initializing string
test_str = ""geeks4feeks is No. 1 4 geeks""

# printing original string
print(""The original string is : "" + test_str)

# Frequency of numbers in String
# Using re.findall() + len()
res = len(re.findall(r'\d+', test_str))

# printing result
print(""Count of numerics in string : "" + str(res))","def frequency(string):
    freq = {}
    for char in string:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    return freq

def main():
    string = input(""Enter the string: "")
    freq = frequency(string)
    print(freq)

if __name__ == ""__main__"":
    main()

""""""

def frequency(string):
    freq = {}"
2302,Write a Python Program to Sort the list according to the column using lambda,"# Python code to sorting list
# according to the column

# sortarray function is defined
def sortarray(array):

for i in range(len(array[0])):

# sorting array in ascending
# order specific to column i,
# here i is the column index
sortedcolumn = sorted(array, key = lambda x:x[i])

# After sorting array Column 1
print(""Sorted array specific to column {}, \
{}"".format(i, sortedcolumn))

# Driver code
if __name__ == '__main__':

# array of size 3 X 2
array = [['java', 1995], ['c++', 1983],
['python', 1989]]

# passing array in sortarray function
sortarray(array)","def sort_by_column(lst, column):
    return sorted(lst, key=lambda x: x[column])

lst = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]
print(sort_by_column(lst, 0))

""""""

# Solution

def sort_by_column(lst, column):
    return sorted(lst, key=lambda x: x[column])

lst = [('"
2303,Reversing a List in Python,"# Reversing a list using reversed()
def Reverse(lst):
return [ele for ele in reversed(lst)]

# Driver Code
lst = [10, 11, 12, 13, 14, 15]
print(Reverse(lst))","def reverse_list(lst):
    lst.reverse()
    return lst

lst = [1, 2, 3, 4, 5]
print(reverse_list(lst))

""""""

# Solution 1

def reverse_list(lst):
    lst.reverse()
    return lst

lst = [1, 2, 3, 4, 5]
print(reverse_list(lst))

# Solution 2

def reverse_list(lst):
    lst"
2304,Dictionary and counter in Python to find winner of election,"# Function to find winner of an election where votes
# are represented as candidate names
from collections import Counter


def winner(input):


# convert list of candidates into dictionary
# output will be likes candidates = {'A':2, 'B':4}
votes = Counter(input)

# create another dictionary and it's key will
# be count of votes values will be name of
# candidates
dict = {}


for value in votes.values():


# initialize empty list to each key to
# insert candidate names having same
# number of votes
dict[value] = []


for (key,value) in votes.items():
dict[value].append(key)


# sort keys in descending order to get maximum
# value of votes
maxVote = sorted(dict.keys(),reverse=True)[0]


# check if more than 1 candidates have same
# number of votes. If yes, then sort the list
# first and print first element
if len(dict[maxVote])>1:
print (sorted(dict[maxVote])[0])
else:
print (dict[maxVote][0])


# Driver program
if __name__ == ""__main__"":
input =['john','johnny','jackie','johnny',
'john','jackie','jamie','jamie',
'john','johnny','jamie','johnny',
'john']
winner(input)","def solution(d, c):
    d = sorted(d.items(), key=lambda x: x[1], reverse=True)
    c = sorted(c.items(), key=lambda x: x[1], reverse=True)
    return d[0][0]

""""""

def solution(d, c):
    d = sorted(d.items(), key=lambda x: x[1], reverse=True)
    c = sorted(c.items(), key=lambda x: x[1], reverse"
2305,Write a Python program to Sort Python Dictionaries by Key or Value,"# Function calling
def dictionairy():
# Declare hash function
key_value ={}


# Initializing value
key_value[2] = 56
key_value[1] = 2
key_value[5] = 12
key_value[4] = 24
key_value[6] = 18
key_value[3] = 323


print (""Task 1:-\n"")
print (""Keys are"")

# iterkeys() returns an iterator over the
# dictionarys keys.
for i in sorted (key_value.keys()) :
print(i, end = "" "")


def main():
# function calling
dictionairy()

# Main function calling
if __name__==""__main__"":
main()","python solution.py

""""""

# Python program to sort a dictionary
# using Lambda
def sortDict(d):
    # return sorted(d.items(), key=lambda item: item[1])
    return sorted(d.items(), key=lambda item: item[1], reverse=True)

# Python program to print
# sorted dictionary
def printDict(d):
    for key, value in d:
        print(""%s : %s"" % (key, value))"
2306,How to convert a list and tuple into NumPy arrays in Python,"import numpy as np


# list
list1 = [3, 4, 5, 6]
print(type(list1))
print(list1)
print()

# conversion
array1 = np.asarray(list1)
print(type(array1))
print(array1)
print()

# tuple
tuple1 = ([8, 4, 6], [1, 2, 3])
print(type(tuple1))
print(tuple1)
print()

# conversion
array2 = np.asarray(tuple1)
print(type(array2))
print(array2)","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([6, 7, 8, 9, 10])

c = np.array([[1, 2, 3, 4, 5],
              [6, 7, 8, 9, 10],
              [11, 12, 13, 14, 15]])

d = np.array([[1, 2, 3, 4, 5],
              [6, 7, 8, 9"
2307,Write a Python program to find largest number in a list,"# Python program to find largest
# number in a list

# list of numbers
list1 = [10, 20, 4, 45, 99]

# sorting the list
list1.sort()

# printing the last element
print(""Largest element is:"", list1[-1])","def largest_number(numbers):
    return max(numbers)

print(largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def largest_number(numbers):
    return max(numbers)

print(largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def largest_number(numbers):
    return max(numbers)"
2308,Write a Python program to Removing duplicates from tuple,"# Python3 code to demonstrate working of
# Removing duplicates from tuple
# using tuple() + set()

# initialize tuple
test_tup = (1, 3, 5, 2, 3, 5, 1, 1, 3)

# printing original tuple
print(""The original tuple is : "" + str(test_tup))

# Removing duplicates from tuple
# using tuple() + set()
res = tuple(set(test_tup))

# printing result
print(""The tuple after removing duplicates : "" + str(res))","def remove_duplicates(t):
    # your code goes here
    return t

t = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,"
2309,Write a Python program to Find missing and additional values in two lists,"# Python program to find the missing
# and additional elements

# examples of lists
list1 = [1, 2, 3, 4, 5, 6]
list2 = [4, 5, 6, 7, 8]

# prints the missing and additional elements in list2
print(""Missing values in second list:"", (set(list1).difference(list2)))
print(""Additional values in second list:"", (set(list2).difference(list1)))

# prints the missing and additional elements in list1
print(""Missing values in first list:"", (set(list2).difference(list1)))
print(""Additional values in first list:"", (set(list1).difference(list2)))","import random

def find_missing_values(list1, list2):
    list1.sort()
    list2.sort()
    missing_values = []
    for i in range(len(list1)):
        if list1[i] not in list2:
            missing_values.append(list1[i])
    return missing_values

def find_additional_values(list1, list2):
    list1.sort()
    list2.sort()"
2310,Shuffle a deck of card with OOPS in Python,"# Import required modules
from random import shuffle


# Define a class to create
# all type of cards
class Cards:
global suites, values
suites = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']

def __init__(self):
pass


# Define a class to categorize each card
class Deck(Cards):
def __init__(self):
Cards.__init__(self)
self.mycardset = []
for n in suites:
for c in values:
self.mycardset.append((c)+"" ""+""of""+"" ""+n)

# Method to remove a card from the deck
def popCard(self):
if len(self.mycardset) == 0:
return ""NO CARDS CAN BE POPPED FURTHER""
else:
cardpopped = self.mycardset.pop()
print(""Card removed is"", cardpopped)


# Define a class gto shuffle the deck of cards
class ShuffleCards(Deck):

# Constructor
def __init__(self):
Deck.__init__(self)

# Method to shuffle cards
def shuffle(self):
if len(self.mycardset) < 52:
print(""cannot shuffle the cards"")
else:
shuffle(self.mycardset)
return self.mycardset

# Method to remove a card from the deck
def popCard(self):
if len(self.mycardset) == 0:
return ""NO CARDS CAN BE POPPED FURTHER""
else:
cardpopped = self.mycardset.pop()
return (cardpopped)


# Driver Code
# Creating objects
objCards = Cards()
objDeck = Deck()

# Player 1
player1Cards = objDeck.mycardset
print('\n Player 1 Cards: \n', player1Cards)

# Creating object
objShuffleCards = ShuffleCards()

# Player 2
player2Cards = objShuffleCards.shuffle()
print('\n Player 2 Cards: \n', player2Cards)

# Remove some cards
print('\n Removing a card from the deck:', objShuffleCards.popCard())
print('\n Removing another card from the deck:', objShuffleCards.popCard())","import random

def shuffle(deck):
    for i in range(len(deck)):
        random.shuffle(deck[i])
    return deck

def main():
    deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36"
2311,How to extract youtube data in Python,"from youtube_statistics import YTstats

# paste the API key generated by you here
API_KEY = ""AIzaSyA-0KfpLK04NpQN1XghxhSlzG-WkC3DHLs""

# paste the channel id here
channel_id = ""UC0RhatS1pyxInC00YKjjBqQ""

yt = YTstats(API_KEY, channel_id)
yt.get_channel_statistics()
yt.dump()","import urllib.request
import urllib.parse
import urllib.error

url = ""http://www.python.org""

# Open the URL in a new tab and specify the user-agent
# Python 3.x
# Python 2.x
# Python 2.x
# Python 2.x
# Python 2.x
# Python 2.x
# Python 2.x
# Python 2.x
# Python 2.x
# Python 2.x
# Python 2.x
# Python 2.x"
2312,Check whether the given string is Palindrome using Stack in Python,"// C++ implementation of the approach
#include <bits/stdc++.h>
using namespace std;


// Function that returns true
// if string is a palindrome
bool isPalindrome(string s)
{
int length = s.size();


// Creating a Stack
stack<char> st;


// Finding the mid
int i, mid = length / 2;


for (i = 0; i < mid; i++) {
st.push(s[i]);
}


// Checking if the length of the string
// is odd, if odd then neglect the
// middle character
if (length % 2 != 0) {
i++;
}

char ele;
// While not the end of the string
while (s[i] != '\0')
{
ele = st.top();
st.pop();


// If the characters differ then the
// given string is not a palindrome
if (ele != s[i])
return false;
i++;
}


return true;
}


// Driver code
int main()
{
string s = ""madam"";


if (isPalindrome(s)) {
cout << ""Yes"";
}
else {
cout << ""No"";
}


return 0;
}


// This Code is Contributed by Harshit Srivastava","def isPalindrome(s):
    # Write your code here
    stack = []
    for i in s:
        if i.isalnum():
            stack.append(i)
        else:
            if len(stack) == 0:
                return False
            if stack[-1] == i:
                stack.pop()
            else:
                return False
    if len(stack) == 0:
        return True
    else:
        return False

print(isPalind"
2313,Write a Python program to Maximum occurring Substring from list,"# Python3 code to demonstrate working of
# Maximum occurring Substring from list
# Using regex() + groupby() + max() + lambda
import re
import itertools


# initializing string
test_str = ""gfghsisbjknlmkesbestgfgsdcngfgcsdjnisdjnlbestdjsklgfgcdsbestbnjdsgfgdbhisbhsbestdkgfgb""
test_list = ['gfg', 'is', 'best']


# printing original string and list
print(""The original string is : "" + test_str)
print(""The original list is : "" + str(test_list))


# Maximum occurring Substring from list
# Using regex() + groupby() + max() + lambda
seqs = re.findall(str.join('|', test_list), test_str)
grps = [(key, len(list(j))) for key, j in itertools.groupby(seqs)]
res = max(grps, key = lambda ele : ele[1])

# printing result
print(""Maximum frequency substring : "" + str(res[0]))","def max_substring(string):
    max_substring = 0
    for i in range(len(string)):
        for j in range(i, len(string)):
            if string[i:j+1] not in string:
                if string[i:j+1] > max_substring:
                    max_substring = string[i:j+1]
    return max_substring

print(max_substring(""abcdefghijklmnopqrstuvw"
2314,Write a Python program to check if a string has at least one letter and one number,"def checkString(str):

# intializing flag variable
flag_l = False
flag_n = False

# checking for letter and numbers in
# given string
for i in str:

# if string has letter
if i.isalpha():
flag_l = True

# if string has number
if i.isdigit():
flag_n = True

# returning and of flag
# for checking required condition
return flag_l and flag_n


# driver code
print(checkString('thishasboth29'))
print(checkString('geeksforgeeks'))","def is_valid_string(string):
    if len(string) < 3 or len(string) > 10:
        return False
    if string.isdigit():
        return False
    if string.count('0') > 0 or string.count('1') > 0:
        return False
    return True

print(is_valid_string('1234'))
print(is_valid_string('123'))
print(is_valid_string('12'))"
2315,Write a Python program to count number of vowels using sets in given string,"# Python3 code to count vowel in
# a string using set

# Function to count vowel
def vowel_count(str):

# Initializing count variable to 0
count = 0

# Creating a set of vowels
vowel = set(""aeiouAEIOU"")

# Loop to traverse the alphabet
# in the given string
for alphabet in str:

# If alphabet is present
# in set vowel
if alphabet in vowel:
count = count + 1

print(""No. of vowels :"", count)

# Driver code
str = ""GeeksforGeeks""

# Function Call
vowel_count(str)","def count_vowels(string):
    vowels = set(['a', 'e', 'i', 'o', 'u'])
    count = 0
    for i in string:
        if i in vowels:
            count += 1
    return count

print(count_vowels(""Python is a high-level general-purpose programming language"")
print(count_vowels(""The quick brown fox jumps over the lazy dog""))
print(count_vowels(""The"
2316,Write a Python program to Convert Matrix to Custom Tuple Matrix,"# Python3 code to demonstrate working of
# Convert Matrix to Custom Tuple Matrix
# Using zip() + loop

# initializing lists
test_list = [[4, 5, 6], [6, 7, 3], [1, 3, 4]]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing List elements
add_list = ['Gfg', 'is', 'best']

# Convert Matrix to Custom Tuple Matrix
# Using zip() + loop
res = []
for idx, ele in zip(add_list, test_list):
for e in ele:
res.append((idx, e))

# printing result
print(""Matrix after conversion : "" + str(res))","def matrix_to_tuple(matrix):
    """"""Convert Matrix to tuple""""""
    rows = len(matrix)
    if rows == 0:
        raise ValueError(""matrix must have at least one row"")
    cols = len(matrix[0])
    if cols == 0:
        raise ValueError(""matrix must have at least one column"")
    result = []
    for row in range(rows):
        result.append([])
        for col in range(cols"
2317,Write a Python program to List product excluding duplicates,"# Python 3 code to demonstrate
# Duplication Removal List Product
# using naive methods


# getting Product
def prod(val) :
res = 1
for ele in val:
res *= ele
return res


# initializing list
test_list = [1, 3, 5, 6, 3, 5, 6, 1]
print (""The original list is : "" + str(test_list))


# using naive method
# Duplication Removal List Product
res = []
for i in test_list:
if i not in res:
res.append(i)
res = prod(res)


# printing list after removal
print (""Duplication removal list product : "" + str(res))","""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution 23"
2318,Write a Python program to Cloning or Copying a list,"# Python program to copy or clone a list
# Using the Slice Operator
def Cloning(li1):
li_copy = li1[:]
return li_copy

# Driver Code
li1 = [4, 8, 2, 10, 15, 18]
li2 = Cloning(li1)
print(""Original List:"", li1)
print(""After Cloning:"", li2)","def solution(lst):
    return lst[:]

lst = [1, 2, 3, 4, 5]
print(solution(lst))

""""""

def solution(lst):
    return lst[:]

lst = [1, 2, 3, 4, 5]
print(solution(lst))

""""""

def solution(lst):
    return lst[:]

lst = [1, 2, 3, 4, 5]"
2319,How to add timestamp to CSV file in Python,"# Importing required modules
import csv
from datetime import datetime


# Here we are storing our data in a
# variable. We'll add this data in
# our csv file
rows = [['GeeksforGeeks1', 'GeeksforGeeks2'],
['GeeksforGeeks3', 'GeeksforGeeks4'],
['GeeksforGeeks5', 'GeeksforGeeks6']]

# Opening the CSV file in read and
# write mode using the open() module
with open(r'YOUR_CSV_FILE.csv', 'r+', newline='') as file:

# creating the csv writer
file_write = csv.writer(file)

# storing current date and time
current_date_time = datetime.now()

# Iterating over all the data in the rows
# variable
for val in rows:

# Inserting the date and time at 0th
# index
val.insert(0, current_date_time)

# writing the data in csv file
file_write.writerow(val)","import csv

with open('timestamp.csv', 'w') as csvfile:
    csvwriter = csv.writer(csvfile)
    csvwriter.writerow(['Name', 'Age', 'Job', 'Salary'])
    csvwriter.writerow(['John', 25, 'Engineer', 2000])
    csvwriter.writerow(['Anna', 30, 'Data Scientist', 30000])
    csvwriter.writerow(['Peter', 40, 'Data Scientist', 40000])
    csvwriter"
2320,Write a Python Program to Count Words in Text File,"# creating variable to store the
# number of words
number_of_words = 0

# Opening our text file in read only
# mode using the open() function
with open(r'SampleFile.txt','r') as file:

# Reading the content of the file
# using the read() function and storing
# them in a new variable
data = file.read()

# Splitting the data into seperate lines
# using the split() function
lines = data.split()

# Adding the length of the
# lines in our number_of_words
# variable
number_of_words += len(lines)


# Printing total number of words
print(number_of_words)","import re

def count_words(filename):
    """"""
    Count the number of words in a text file.
    """"""
    try:
        with open(filename, 'r') as f:
            contents = f.read()
    except FileNotFoundError:
        print(f""Sorry, the file {filename} does not exist."")
    else:
        words = re.findall(r'\w+', contents)
        print(f""The file {filename} has {len(words)}"
2321,Convert a NumPy array into a csv file in Python,"# import necessary libraries
import pandas as pd
import numpy as np

# create a dummy array
arr = np.arange(1,11).reshape(2,5)

# display the array
print(arr)

# convert array into dataframe
DF = pd.DataFrame(arr)

# save the dataframe as a csv file
DF.to_csv(""data1.csv"")","import numpy as np
import csv

# Create a NumPy array
arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Create a csv file
with open('my_file.csv', 'w') as f:
    # Create the csv writer
    csv_writer = csv.writer(f)
    # Write the data
    csv_writer.writerows(arr)

# Open the file in"
2322,How to add a border around a NumPy array in Python,"# importing Numpy package
import numpy as np

# Creating a 2X2 Numpy matrix
array = np.ones((2, 2))

print(""Original array"")
print(array)

print(""\n0 on the border and 1 inside the array"")

# constructing border of 0 around 2D identity matrix
# using np.pad()
array = np.pad(array, pad_width=1, mode='constant',
constant_values=0)

print(array)","import numpy as np

# Create a NumPy array with shape (3, 4)
arr = np.arange(12).reshape(3, 4)

# Create a NumPy array with shape (3, 4) with the value of 1
arr_1 = np.ones((3, 4))

# Create a NumPy array with shape (3, 4) with the value of 2
arr_2 = np.zeros((3, 4))

# Create a NumPy array with shape (3"
2323,Write a Python program to Filter out integers from float numpy array,"# Python code to demonstrate
# filtering integers from numpy array
# containing integers and float


import numpy as np


# initialising array
ini_array = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0])


# printing initial array
print (""initial array : "", str(ini_array))


# filtering integers
result = ini_array[ini_array != ini_array.astype(int)]


# printing resultant
print (""final array"", result)","import numpy as np

n = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

def filter_numpy(n):
    return n[n>5]

print(filter_numpy(n))

""""""

# Solution

import numpy as np

n = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

def filter_numpy(n):"
2324,Write a Python program to Remove Tuples of Length K,"# Python3 code to demonstrate working of
# Remove Tuples of Length K
# Using list comprehension

# initializing list
test_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)]

# printing original list
print(""The original list : "" + str(test_list))

# initializing K
K = 1

# 1 liner to perform task
# filter just lengths other than K
# len() used to compute length
res = [ele for ele in test_list if len(ele) != K]

# printing result
print(""Filtered list : "" + str(res))","def remove_tuples(k):
    return tuple(tuple(t) for t in list(enumerate(range(k))))

print(remove_tuples(3))

""""""

# Solution

def remove_tuples(k):
    return tuple(tuple(t) for t in list(enumerate(range(k))))

print(remove_tuples(3))"
2325,Write a Python program to Program to accept the strings which contains all vowels,"# Python program to accept the strings
# which contains all the vowels


# Function for check if string
# is accepted or not
def check(string) :


string = string.lower()


# set() function convert ""aeiou""
# string into set of characters
# i.e.vowels = {'a', 'e', 'i', 'o', 'u'}
vowels = set(""aeiou"")


# set() function convert empty
# dictionary into empty set
s = set({})


# looping through each
# character of the string
for char in string :


# Check for the character is present inside
# the vowels set or not. If present, then
# add into the set s by using add method
if char in vowels :
s.add(char)
else:
pass

# check the length of set s equal to length
# of vowels set or not. If equal, string is
# accepted otherwise not
if len(s) == len(vowels) :
print(""Accepted"")
else :
print(""Not Accepted"")




# Driver code
if __name__ == ""__main__"" :

string = ""SEEquoiaL""


# calling function
check(string)","def solution(s):
    vowels = ['a', 'e', 'i', 'o', 'u']
    for i in s:
        if i in vowels:
            print(i, end="""")

solution(""aAaEeIiOoUu"")

""""""

def solution(s):
    vowels = ['a', 'e', 'i', 'o', 'u']
    for i in s:
        if i in vowels:"
2326,What are the allowed characters in Python function names,"# Python program to demonstrate
# that keywords cant be used as
# identifiers


def calculate_sum(a, b):
return a + b


x = 2
y = 5
print(calculate_sum(x,y))


# def and if is a keyword, so
# this would give invalid
# syntax error
def = 12
if = 2


print(calculate_sum(def, if))","def solution(name):
    # your code here
    return name.lower()

print(solution(""Python""))
print(solution(""PYTHON""))
print(solution(""PYTHON""))
print(solution(""python""))
print(solution(""Python""))
print(solution(""Python""))
print(solution(""Python""))
print(solution(""Python""))
print(solution(""Python""))
print(solution(""Python""))
print(solution(""Python""))
print(solution("""
2327,Find the number of rows and columns of a given matrix using NumPy in Python,"import numpy as np


matrix= np.arange(1,9).reshape((3, 3))

# Original matrix
print(matrix)

# Number of rows and columns of the said matrix
print(matrix.shape)","import numpy as np

matrix = np.array([[1, 2, 3, 4, 5],
                   [6, 7, 8, 9, 10],
                   [11, 12, 13, 14, 15],
                   [16, 17, 18, 19, 20]])

print(matrix.shape)

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

#"
2328,Write a Python program to Group Sublists by another List,"# Python3 code to demonstrate
# Group Sublists by another List
# using loop + generator(yield)

# helper function
def grp_ele(test_list1, test_list2):
temp = []
for i in test_list1:
if i in test_list2:
if temp:
yield temp
temp = []
yield i
else:
temp.append(i)
if temp:
yield temp

# Initializing lists
test_list1 = [8, 5, 9, 11, 3, 7]
test_list2 = [9, 11]

# printing original lists
print(""The original list 1 is : "" + str(test_list1))
print(""The original list 2 is : "" + str(test_list2))

# Group Sublists by another List
# using loop + generator(yield)
res = list(grp_ele(test_list1, test_list2))

# printing result
print (""The Grouped list is : "" + str(res))","def group_sublists(lst):
    d = {}
    for i in range(len(lst)):
        if lst[i] not in d:
            d[lst[i]] = []
        d[lst[i]].append(i)
    return d

lst = [1,2,3,4,5,6,7,8,9,10]
print(group_sublists(lst))

""""""

def group_sublists(l"
2329,Kill a Process by name using Python,"import os, signal

def process():

# Ask user for the name of process
name = input(""Enter process Name: "")
try:

# iterating through each instance of the process
for line in os.popen(""ps ax | grep "" + name + "" | grep -v grep""):
fields = line.split()

# extracting Process ID from the output
pid = fields[0]

# terminating process
os.kill(int(pid), signal.SIGKILL)
print(""Process Successfully terminated"")

except:
print(""Error Encountered while running script"")

process()","import os
import sys

def kill_process(process_name):
    # Open a pipe to the process
    os.system('kill'+ process_name)

if __name__ == '__main__':
    # Process name
    process_name = sys.argv[1]
    # Kill process
    kill_process(process_name)"
2330,Write a Python program to Print an Inverted Star Pattern,"# python 3 code to print inverted star
# pattern

# n is the number of rows in which
# star is going to be printed.
n=11

# i is going to be enabled to
# range between n-i t 0 with a
# decrement of 1 with each iteration.
# and in print function, for each iteration,
#   is multiplied with n-i and * is
# multiplied with i to create correct
# space before of the stars.
for i in range (n, 0, -1):
print((n-i) * ' ' + i * '*')","def invert_pattern(n):
    if n == 0:
        return "" ""
    else:
        return invert_pattern(n-1) + ""*"" + invert_pattern(n-1)

print(invert_pattern(5))

""""""

# Solution:

def invert_pattern(n):
    if n == 0:
        return "" ""
    else:
        return invert_pattern(n-1) + ""*"" + invert_pattern("
2331,Combining a one and a two-dimensional NumPy Array in Python,"# importing Numpy package
import numpy as np

num_1d = np.arange(5)
print(""One dimensional array:"")
print(num_1d)

num_2d = np.arange(10).reshape(2,5)
print(""\nTwo dimensional array:"")
print(num_2d)

# Combine 1-D and 2-D arrays and display
# their elements using numpy.nditer()
for a, b in np.nditer([num_1d, num_2d]):
print(""%d:%d"" % (a, b),)","import numpy as np

# Create a NumPy array of shape (3, 3)
a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Create a NumPy array of shape (3, 3)
b = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Create a NumPy array of shape (3, 3)
c = np.array"
2332,Write a Python program to Ways to find length of list,"# Python code to demonstrate
# length of list
# using naive method

# Initializing list
test_list = [ 1, 4, 5, 7, 8 ]

# Printing test_list
print (""The list is : "" + str(test_list))

# Finding length of list
# using loop
# Initializing counter
counter = 0
for i in test_list:

# incrementing counter
counter = counter + 1

# Printing length of list
print (""Length of list using naive method is : "" + str(counter))","def length(lst):
    return len(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(length(lst))

""""""

def length(lst):
    return len(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(length(lst))

""""""

def length(lst):
    return len("
2333,Write a Python program to Sorting string using order defined by another string,"# Python program to sort a string and return
# its reverse string according to pattern string

# This function will return the reverse of sorted string
# according to the pattern

def sortbyPattern(pat, str):

priority = list(pat)

# Create a dictionary to store priority of each character
myDict = { priority[i] : i for i in range(len(priority))}

str = list(str)

# Pass lambda function as key in sort function
str.sort( key = lambda ele : myDict[ele])

# Reverse the string using reverse()
str.reverse()

new_str = ''.join(str)
return new_str


if __name__=='__main__':
pat = ""asbcklfdmegnot""
str = ""eksge""
new_str = sortbyPattern(pat, str)
print(new_str)","def sort_string(string1, string2):
    if string1 > string2:
        return string2
    elif string1 < string2:
        return string1
    else:
        return string1

print(sort_string(""a"", ""b""))
print(sort_string(""a"", ""c""))
print(sort_string(""c"", ""b""))
print(sort_string(""c"", ""a""))

""""""

def sort_string(string1, string2):"
2334,Ways to convert string to dictionary in Python,"# Python implementation of converting
# a string into a dictionary

# initialising string
str = "" Jan = January; Feb = February; Mar = March""

# At first the string will be splitted
# at the occurence of ';' to divide items
# for the dictionaryand then again splitting
# will be done at occurence of '=' which
# generates key:value pair for each item
dictionary = dict(subString.split(""="") for subString in str.split("";""))

# printing the generated dictionary
print(dictionary)","def solution(s):
    d = {}
    for i in s:
        if i not in d:
            d[i] = 1
        else:
            d[i] += 1
    return d

print(solution(""abcdefg""))
print(solution(""abcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdef"
2335,Functions that accept variable length key value pair as arguments in Python,"# using kwargs
# in functions




def printKwargs(**kwargs):
print(kwargs)




# driver code
if __name__ == ""__main__"":
printKwargs(Argument_1='gfg', Argument_2='GFG')","def my_function(x, y, z):
    return x + y + z

print(my_function(1, 2, 3))

""""""

def my_function(x, y, z):
    return x + y + z

print(my_function(1, 2, 3))

""""""

def my_function(x, y, z):
    return x + y + z

print(my_function(1, 2, 3))

""""""

def"
2336,Lambda with if but without else in Python,"# Lambda function with if but without else.
square = lambda x : x*x if(x > 0)


print(square(6))","def solution(Lambda):
    if Lambda == 0:
        return 1
    else:
        return Lambda + solution(Lambda - 1)

""""""

def solution(Lambda):
    if Lambda == 0:
        return 1
    else:
        return Lambda + solution(Lambda - 1)

print(solution(5))"
2337,Counting the frequencies in a list using dictionary in Python,"# Python program to count the frequency of
# elements in a list using a dictionary


def CountFrequency(my_list):


# Creating an empty dictionary
freq = {}
for item in my_list:
if (item in freq):
freq[item] += 1
else:
freq[item] = 1


for key, value in freq.items():
print (""% d : % d""%(key, value))


# Driver function
if __name__ == ""__main__"":
my_list =[1, 1, 1, 5, 5, 3, 1, 3, 3, 1, 4, 4, 4, 2, 2, 2, 2]


CountFrequency(my_list)","def count_frequencies(lst):
    d = {}
    for i in lst:
        if i in d:
            d[i] += 1
        else:
            d[i] = 1
    return d

lst = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10"
2338,Sorting objects of user defined class in Python,"print(sorted([1,26,3,9]))

print(sorted(""Geeks foR gEEks"".split(), key=str.lower))","class User:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __str__(self):
        return f""User {self.name} is {self.age} years old""

    def __lt__(self, other):
        return self.age < other.age

    def __gt__(self, other):
        return self.age > other.age

    def __eq__(self, other):
        return self.age =="
2339,Write a Python program to Numpy matrix.tolist(),"# import the important module in python
import numpy as np

# make matrix with numpy
gfg = np.matrix('[4, 1, 12, 3]')

# applying matrix.tolist() method
geek = gfg.tolist()

print(geek)","import numpy as np

matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(matrix.tolist())

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12"
2340,Write a Python program to Maximum record value key in dictionary,"# Python3 code to demonstrate working of
# Maximum record value key in dictionary
# Using loop

# initializing dictionary
test_dict = {'gfg' : {'Manjeet' : 5, 'Himani' : 10},
'is' : {'Manjeet' : 8, 'Himani' : 9},
'best' : {'Manjeet' : 10, 'Himani' : 15}}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# initializing search key
key = 'Himani'

# Maximum record value key in dictionary
# Using loop
res = None
res_max = 0
for sub in test_dict:
if test_dict[sub][key] > res_max:
res_max = test_dict[sub][key]
res = sub

# printing result
print(""The required key is : "" + str(res))","def max_record_value(d):
    max_value = 0
    for key in d:
        if d[key] > max_value:
            max_value = d[key]
    return max_value

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
print(max_record_value(d))

""""""

""""""

def max_record_value(d):
    max_value = 0
    for key in d"
2341,How to build an array of all combinations of two NumPy arrays in Python,"# importing Numpy package
import numpy as np

# creating 2 numpy arrays
array_1 = np.array([1, 2])
array_2 = np.array([4, 6])

print(""Array-1"")
print(array_1)

print(""\nArray-2"")
print(array_2)

# combination of elements of array_1 and array_2
# using numpy.meshgrid().T.reshape()
comb_array = np.array(np.meshgrid(array_1, array_2)).T.reshape(-1, 2)

print(""\nCombine array:"")
print(comb_array)","import numpy as np

a = np.array([[1,2,3],[4,5,6]])
b = np.array([[1,2,3],[4,5,6]])

print(a)
print(b)

# Solution:

# a = np.array([[1,2,3],[4,5,6]])
# b = np.array([[1,2,3],[4,5,6]])

# print"
2342,Write a Python program to Sum of tuple elements,"# Python3 code to demonstrate working of
# Tuple summation
# Using list() + sum()

# initializing tup
test_tup = (7, 8, 9, 1, 10, 7)

# printing original tuple
print(""The original tuple is : "" + str(test_tup))

# Tuple elements inversions
# Using list() + sum()
res = sum(list(test_tup))

# printing result
print(""The summation of tuple elements are : "" + str(res))","def sum_tuple(tup):
    return sum(tup)

print(sum_tuple((1, 2, 3, 4, 5)))

""""""

def sum_tuple(tup):
    return sum(tup)

print(sum_tuple((1, 2, 3, 4, 5)))"
2343,Print anagrams together in Python using List and Dictionary,"# Function to return all anagrams together
def allAnagram(input):

# empty dictionary which holds subsets
# of all anagrams together
dict = {}

# traverse list of strings
for strVal in input:

# sorted(iterable) method accepts any
# iterable and rerturns list of items
# in ascending order
key = ''.join(sorted(strVal))

# now check if key exist in dictionary
# or not. If yes then simply append the
# strVal into the list of it's corresponding
# key. If not then map empty list onto
# key and then start appending values
if key in dict.keys():
dict[key].append(strVal)
else:
dict[key] = []
dict[key].append(strVal)

# traverse dictionary and concatenate values
# of keys together
output = """"
for key,value in dict.items():
output = output + ' '.join(value) + ' '

return output

# Driver function
if __name__ == ""__main__"":
input=['cat', 'dog', 'tac', 'god', 'act']
print (allAnagram(input))","def solve(s):
    d = {}
    for i in s:
        d[i] = d.get(i, 0) + 1
    return d

def solve2(s):
    d = {}
    for i in s:
        d[i] = d.get(i, 0) + 1
    return d

def solve3(s):
    d = {}
    for i in s:
        d[i] = d.get(i, 0) + 1"
2344,Write a Python program to Check if a Substring is Present in a Given String,"# function to check if small string is
# there in big string
def check(string, sub_str):
if (string.find(sub_str) == -1):
print(""NO"")
else:
print(""YES"")

# driver code
string = ""geeks for geeks""
sub_str =""geek""
check(string, sub_str)","def isSubstring(s, t):
    if len(s)!= len(t):
        return False
    for i in range(len(s)):
        if s[i]!= t[i]:
            return False
    return True

print(isSubstring(""abc"", ""abc""))
print(isSubstring(""abc"", ""abd""))
print(isSubstring(""abc"", ""abd""))
print(isSubstring(""abc"", ""abd""))
print("
2345,NumPy  Fibonacci Series using Binet Formula in Python,"import numpy as np

# We are creating an array contains n = 10 elements
# for getting first 10 Fibonacci numbers
a = np.arange(1, 11)
lengthA = len(a)

# splitting of terms for easiness
sqrtFive = np.sqrt(5)
alpha = (1 + sqrtFive) / 2
beta = (1 - sqrtFive) / 2

# Implementation of formula
# np.rint is used for rounding off to integer
Fn = np.rint(((alpha ** a) - (beta ** a)) / (sqrtFive))
print(""The first {} numbers of Fibonacci series are {} . "".format(lengthA, Fn))","import numpy as np

def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

n = int(input(""Enter the number of terms: ""))
print(""Fibonacci series: "")
for i in range(n):
    print(fib(i))

# Solution:
#
# def fib(n):"
2346,Count distinct substrings of a string using Rabin Karp algorithm in Python,"# importing libraries
import sys
import math as mt
t = 1
# store prime to reduce overflow
mod = 9007199254740881


for ___ in range(t):


# string to check number of distinct substring
s = 'abcd'


# to store substrings
l = []


# to store hash values by Rabin Karp algorithm
d = {}


for i in range(len(s)):
suma = 0
pre = 0


# Number of input alphabets
D = 256


for j in range(i, len(s)):


# calculate new hash value by adding next element
pre = (pre*D+ord(s[j])) % mod


# store string length if non repeat
if d.get(pre, -1) == -1:
l.append([i, j])
d[pre] = 1


# resulting length
print(len(l))


# resulting distinct substrings
for i in range(len(l)):
print(s[l[i][0]:l[i][1]+1], end="" "")","def count_distinct_substrings(string):
    # Write your code here
    count = 0
    for i in range(len(string)):
        for j in range(i, len(string)):
            if string[i:j+1] == string[i:j+1][::-1]:
                count += 1
    return count

print(count_distinct_substrings(""abcdef""))
print(count_distinct_substrings(""abcdefghijkl"
2347,Write a Python program to Check if two lists have at-least one element common,"# Python program to check
# if two lists have at-least
# one element common
# using traversal of list

def common_data(list1, list2):
result = False

# traverse in the 1st list
for x in list1:

# traverse in the 2nd list
for y in list2:

# if one common
if x == y:
result = True
return result

return result

# driver code
a = [1, 2, 3, 4, 5]
b = [5, 6, 7, 8, 9]
print(common_data(a, b))

a = [1, 2, 3, 4, 5]
b = [6, 7, 8, 9]
print(common_data(a, b))","""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22"
2348,Find length of a string in python (4 ways),"# Python code to demonstrate string length
# using len

str = ""geeks""
print(len(str))","def length_of_string(string):
    if len(string) == 0:
        return 0
    else:
        return len(string)

print(length_of_string(""Python""))
print(length_of_string(""Python""))
print(length_of_string(""Python""))
print(length_of_string(""Python""))
print(length_of_string(""Python""))
print(length_of_string(""Python""))
print(length_of_string(""Python""))
print(length_"
2349,Write a Python program to Convert List of Dictionaries to List of Lists,"# Python3 code to demonstrate working of
# Convert List of Dictionaries to List of Lists
# Using loop + enumerate()

# initializing list
test_list = [{'Nikhil' : 17, 'Akash' : 18, 'Akshat' : 20},
{'Nikhil' : 21, 'Akash' : 30, 'Akshat' : 10},
{'Nikhil' : 31, 'Akash' : 12, 'Akshat' : 19}]

# printing original list
print(""The original list is : "" + str(test_list))

# Convert List of Dictionaries to List of Lists
# Using loop + enumerate()
res = []
for idx, sub in enumerate(test_list, start = 0):
if idx == 0:
res.append(list(sub.keys()))
res.append(list(sub.values()))
else:
res.append(list(sub.values()))

# printing result
print(""The converted list : "" + str(res))","def convert_list_to_list_of_lists(list_of_dictionaries):
    list_of_lists = []
    for dictionary in list_of_dictionaries:
        list_of_lists.append([dictionary['name'], dictionary['age'], dictionary['gender'], dictionary['height'], dictionary['weight']])
    return list_of_lists

print(convert_list_to_list_of_lists([{'name': 'John', '"
2350,"Write a Python program to Extract Keys Value, if Key Present in List and Dictionary","# Python3 code to demonstrate working of
# Extract Key's Value, if Key Present in List and Dictionary
# Using all() + list comprehension

# initializing list
test_list = [""Gfg"", ""is"", ""Good"", ""for"", ""Geeks""]

# initializing Dictionary
test_dict = {""Gfg"" : 2, ""is"" : 4, ""Best"" : 6}

# initializing K
K = ""Gfg""

# printing original list and Dictionary
print(""The original list : "" + str(test_list))
print(""The original Dictionary : "" + str(test_dict))

# using all() to check for occurrence in list and dict
# encapsulating list and dictionary keys in list
res = None
if all(K in sub for sub in [test_dict, test_list]):
res = test_dict[K]

# printing result
print(""Extracted Value : "" + str(res))","import json

def extract_keys_value(dictionary):
    for key, value in dictionary.items():
        print(key, value)

dictionary = {'a': 1, 'b': 2, 'c': 3}
extract_keys_value(dictionary)

# Output:
# a
# b
# c

# Python Code to Extract Keys Value

# import json

# def extract_keys_value(dictionary):
#     for key,"
2351,Write a Python Program to print digit pattern,"# function to print the pattern
def pattern(n):

# traverse through the elements
# in n assuming it as a string
for i in n:

# print | for every line
print(""|"", end = """")

# print i number of * s in
# each line
print(""*"" * int(i))

# get the input as string
n = ""41325""
pattern(n)","def digit_pattern(n):
    if n == 0:
        return''
    else:
        return digit_pattern(n//10) + str(n%10)

print(digit_pattern(123))

""""""

def digit_pattern(n):
    if n == 0:
        return''
    else:
        return digit_pattern(n//10) + str(n%10)

print(digit_pattern(123))

""""""

def digit_pattern(n):"
2352,Finding the k smallest values of a NumPy array in Python,"# importing the modules
import numpy as np

# creating the array
arr = np.array([23, 12, 1, 3, 4, 5, 6])
print(""The Original Array Content"")
print(arr)

# value of k
k = 4

# sorting the array
arr1 = np.sort(arr)

# k smallest number of array
print(k, ""smallest elements of the array"")
print(arr1[:k])","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Solution:

# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

# Solution 11:

# Solution 12:

# Solution"
2353,How to Build a Simple Auto-Login Bot with Python,"# Used to import the webdriver from selenium
from selenium import webdriver
import os


# Get the path of chromedriver which you have install


def startBot(username, password, url):
path = ""C:\\Users\\hp\\Downloads\\chromedriver""

# giving the path of chromedriver to selenium websriver
driver = webdriver.Chrome(path)

# opening the website in chrome.
driver.get(url)

# find the id or name or class of
# username by inspecting on username input
driver.find_element_by_name(
""id/class/name of username"").send_keys(username)

# find the password by inspecting on password input
driver.find_element_by_name(
""id/class/name of password"").send_keys(password)

# click on submit
driver.find_element_by_css_selector(
""id/class/name/css selector of login button"").click()




# Driver Code
# Enter below your login credentials
username = ""Enter your username""
password = ""Enter your password""


# URL of the login page of site
# which you want to automate login.
url = ""Enter the URL of login page of website""


# Call the function
startBot(username, password, url)","import sys
import os
import time
import random
import string
import hashlib
import json
import requests
import base64
import datetime
import threading
import json
import time
import random
import string
import hashlib
import json
import requests
import base64
import datetime
import threading
import json
import time
import random
import string
import hashlib
import json
import requests
import base64
import datetime
import threading
import json
import time
import random
import string"
2354,Write a Python program to Print Heart Pattern,"# define size n = even only
n = 8

# so this heart can be made n//2 part left,
# n//2 part right, and one middle line
# i.e; columns m = n + 1
m = n+1

# loops for upper part
for i in range(n//2-1):
for j in range(m):

# condition for printing stars to GFG upper line
if i == n//2-2 and (j == 0 or j == m-1):
print(""*"", end="" "")

# condition for printing stars to left upper
elif j <= m//2 and ((i+j == n//2-3 and j <= m//4) \
or (j-i == m//2-n//2+3 and j > m//4)):
print(""*"", end="" "")

# condition for printing stars to right upper
elif j > m//2 and ((i+j == n//2-3+m//2 and j < 3*m//4) \
or (j-i == m//2-n//2+3+m//2 and j >= 3*m//4)):
print(""*"", end="" "")

# condition for printing spaces
else:
print("" "", end="" "")
print()

# loops for lower part
for i in range(n//2-1, n):
for j in range(m):

# condition for printing stars
if (i-j == n//2-1) or (i+j == n-1+m//2):
print('*', end="" "")

# condition for printing GFG
elif i == n//2-1:

if j == m//2-1 or j == m//2+1:
print('G', end="" "")
elif j == m//2:
print('F', end="" "")
else:
print(' ', end="" "")

# condition for printing spaces
else:
print(' ', end="" "")

print()","""""""

import random

def heart_pattern(n):
    """"""
    This function prints the heart pattern of the given number n.
    """"""
    for i in range(n):
        print(""*"", end="""")
    print()

def main():
    """"""
    This function prints the heart pattern of the given number n.
    """"""
    n = int(input(""Enter the number of rows: ""))
    heart_pattern(n)

if __name__ == ""__main__"":
    main"
2355,How to open two files together in Python,"# opening both the files in reading modes
with open(""file1.txt"") as f1, open(""file2.txt"") as f2:

# reading f1 contents
line1 = f1.readline()

# reading f2 contents
line2 = f2.readline()

# printing contents of f1 followed by f2
print(line1, line2)","1. Open the first file
2. Open the second file
3. Read the contents of both files
4. Write the contents of the file to the second file
5. Close both files

""""""

# 1. Open the first file
f1 = open(""file1.txt"", ""r"")

# 2. Open the second file
f2 = open(""file2.txt"", ""r"")

# 3. Read the contents of both files
print(f1.read())
print(f2.read())

#"
2356,Access the elements of a Series in Pandas in Python,"# importing pandas module
import pandas as pd

# making data frame
df = pd.read_csv(""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv"")

ser = pd.Series(df['Name'])
ser.head(10)
# or simply df['Name'].head(10)","import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'col1': [1, 2, 3, 4], 'col2': [5, 6, 7, 8]})

# Create a Series
s = pd.Series([1, 2, 3, 4])

# Access the elements of a Series in Python
print(s[0])
print(s[1])
print(s[2])
print(s[3])

# Access the elements of"
2357,Write a Python program to Numpy matrix.min(),"# import the important module in python
import numpy as np

# make matrix with numpy
gfg = np.matrix('[64, 1; 12, 3]')

# applying matrix.min() method
geeks = gfg.min()

print(geeks)","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(A.min())

""""""

# Solution

import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(A.min())

""""""

# Solution

import numpy as np

A = np.array([[1"
2358,Write a Python Library for Linked List,"# importing module
import collections


# initialising a deque() of arbitary length
linked_lst = collections.deque()


# filling deque() with elements
linked_lst.append('first')
linked_lst.append('second')
linked_lst.append('third')


print(""elements in the linked_list:"")
print(linked_lst)


# adding element at an arbitary position
linked_lst.insert(1, 'fourth')


print(""elements in the linked_list:"")
print(linked_lst)


# deleting the last element
linked_lst.pop()


print(""elements in the linked_list:"")
print(linked_lst)


# removing a specific element
linked_lst.remove('fourth')


print(""elements in the linked_list:"")
print(linked_lst)","def solution(head):
    # Write your code here
    if head is None:
        return None
    
    slow = head
    fast = head
    
    while fast.next is not None and fast.next.next is not None:
        slow = slow.next
        fast = fast.next.next
    
    slow.next = None
    
    return slow

# This is the class of the input linked list.
# class ListNode:
#     def __init__(self, x):
#"
2359,Creating a Pandas Series from Lists in Python,"# import pandas as pd
import pandas as pd

# create Pandas Series with default index values
# default index ranges is from 0 to len(list) - 1
x = pd.Series(['Geeks', 'for', 'Geeks'])

# print the Series
print(x)","solution = [
    ['a', 'b', 'c'],
    ['d', 'e', 'f'],
    ['g', 'h', 'i']
]

solution = pd.Series(solution)

print(solution)

""""""

# Solution

solution = [
    ['a', 'b', 'c'],
    ['d', 'e', 'f'],
    ['g', 'h', 'i']
]

solution = pd."
2360,Write a Python program to All substrings Frequency in String,"# Python3 code to demonstrate working of
# All substrings Frequency in String
# Using loop + list comprehension

# initializing string
test_str = ""abababa""

# printing original string
print(""The original string is : "" + str(test_str))

# list comprehension to extract substrings
temp = [test_str[idx: j] for idx in range(len(test_str))
for j in range(idx + 1, len(test_str) + 1)]

# loop to extract final result of frequencies
res = {}
for idx in temp:
if idx not in res.keys():
res[idx] = 1
else:
res[idx] += 1

# printing result
print(""Extracted frequency dictionary : "" + str(res))","def all_substrings(string):
    substrings = []
    for i in range(len(string)):
        for j in range(i+1, len(string)):
            substrings.append(string[i:j])
    return substrings

print(all_substrings(""abcdefghijklmnopqrstuvwxyz""))

""""""

def all_substrings(string):
    substrings = []
    for i in range(len(string)):"
2361,Write a Python program to Join Tuples if similar initial element,"# Python3 code to demonstrate working of
# Join Tuples if similar initial element
# Using loop

# initializing list
test_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)]

# printing original list
print(""The original list is : "" + str(test_list))

# Join Tuples if similar initial element
# Using loop
res = []
for sub in test_list:
if res and res[-1][0] == sub[0]:
res[-1].extend(sub[1:])
else:
res.append([ele for ele in sub])
res = list(map(tuple, res))

# printing result
print(""The extracted elements : "" + str(res))","def join_tuples(tup1, tup2):
    return tup1 + tup2

print(join_tuples(('a', 'b'), ('c', 'd')))

""""""

def join_tuples(tup1, tup2):
    return tup1 + tup2

print(join_tuples(('a', 'b'), ('c', 'd')))"
2362,Write a Python Set | Pairs of complete strings in two sets,"# Function to find pairs of complete strings
# in two sets of strings

def completePair(set1,set2):

# consider all pairs of string from
# set1 and set2
count = 0
for str1 in set1:
for str2 in set2:
result = str1 + str2

# push all alphabets of concatenated
# string into temporary set
tmpSet = set([ch for ch in result if (ord(ch)>=ord('a') and ord(ch)<=ord('z'))])
if len(tmpSet)==26:
count = count + 1
print (count)

# Driver program
if __name__ == ""__main__"":
set1 = ['abcdefgh', 'geeksforgeeks','lmnopqrst', 'abc']
set2 = ['ijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz','defghijklmnopqrstuvwxyz']
completePair(set1,set2)","def solution(p):
    # Write your code here
    p = set(p)
    return len(p)

def solution(p):
    # Write your code here
    p = set(p)
    return len(p)

def solution(p):
    # Write your code here
    p = set(p)
    return len(p)

def solution(p):
    # Write your code here
    p = set(p)
    return len(p)"
2363,Write a Python Selenium  Find Button by text,"# Import Library
from selenium import webdriver
import time

# set webdriver path here it may vary
# Its the location where you have downloaded the ChromeDriver
driver = webdriver.Chrome(executable_path=r""C:\\chromedriver.exe"")

# Get the target URL
driver.get('https://html.com/tags/button/')

# Wait for 5 seconds to load the webpage completely
time.sleep(5)

# Find the button using text
driver.find_element_by_xpath('//button[normalize-space()=""Click me!""]').click()

time.sleep(5)

# Close the driver
driver.close()","import time
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

driver = webdriver.Chrome(executable_path=""C:\\Users\\DELL\\Downloads\\chromedriver_win32\\chromedriver.exe"")
driver.get(""https://rahulshettyacademy.com/angularpractice/"")

# Find the Find Button
find_button = driver.find_element_by_id(""autocomplete"")

# Enter the text
find"
2364,Check if element exists in list in Python,"# Python code to demonstrate
# checking of element existence
# using loops and in


# Initializing list
test_list = [ 1, 6, 3, 5, 3, 4 ]


print(""Checking if 4 exists in list ( using loop ) : "")


# Checking if 4 exists in list
# using loop
for i in test_list:
if(i == 4) :
print (""Element Exists"")


print(""Checking if 4 exists in list ( using in ) : "")


# Checking if 4 exists in list
# using in
if (4 in test_list):
print (""Element Exists"")","def solution(arr):
    for i in range(len(arr)):
        if arr[i] in arr:
            return arr.index(arr[i])
    return -1

#Provide different values for arr and test your program
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(arr))

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(arr"
2365,Box Blur Algorithm  With Python implementation,"def square_matrix(square):
"""""" This function will calculate the value x
(i.e. blurred pixel value) for each 3 * 3 blur image.
""""""
tot_sum = 0

# Calculate sum of all the pixels in 3 * 3 matrix
for i in range(3):
for j in range(3):
tot_sum += square[i][j]

return tot_sum // 9 # return the average of the sum of pixels

def boxBlur(image):
""""""
This function will calculate the blurred
image for given n * n image.
""""""
square = [] # This will store the 3 * 3 matrix
# which will be used to find its blurred pixel

square_row = [] # This will store one row of a 3 * 3 matrix and
# will be appended in square

blur_row = [] # Here we will store the resulting blurred
# pixels possible in one row
# and will append this in the blur_img

blur_img = [] # This is the resulting blurred image

# number of rows in the given image
n_rows = len(image)

# number of columns in the given image
n_col = len(image[0])

# rp is row pointer and cp is column pointer
rp, cp = 0, 0

# This while loop will be used to
# calculate all the blurred pixel in the first row
while rp <= n_rows - 3:
while cp <= n_col-3:

for i in range(rp, rp + 3):

for j in range(cp, cp + 3):

# append all the pixels in a row of 3 * 3 matrix
square_row.append(image[i][j])

# append the row in the square i.e. 3 * 3 matrix
square.append(square_row)
square_row = []

# calculate the blurred pixel for given 3 * 3 matrix
# i.e. square and append it in blur_row
blur_row.append(square_matrix(square))
square = []

# increase the column pointer
cp = cp + 1

# append the blur_row in blur_image
blur_img.append(blur_row)
blur_row = []
rp = rp + 1 # increase row pointer
cp = 0 # start column pointer from 0 again

# Return the resulting pixel matrix
return blur_img

# Driver code
image = [[7, 4, 0, 1],
[5, 6, 2, 2],
[6, 10, 7, 8],
[1, 4, 2, 0]]

print(boxBlur(image))","def box_blur(image):
    # Your code here
    pass

""""""

import cv2
import numpy as np

# Read image
img = cv2.imread('../Photos/cat.jpg')
cv2.imshow('Cat', img)

# Convert image to grayscale
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
cv2.imshow('Gray', gray)

# Blur the image
bl"
2366,How to get element-wise true division of an array using Numpy in Python,"# import library
import numpy as np

# create 1d-array
x = np.arange(5)

print(""Original array:"",
x)

# apply true division
# on each array element
rslt = np.true_divide(x, 4)

print(""After the element-wise division:"",
rslt)","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([6, 7, 8, 9, 10])

c = a / b
print(c)

""""""

# Solution

import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([6, 7, 8, 9, 10])

c = a / b
print(c"
2367,Evaluate Einsteins summation convention of two multidimensional NumPy arrays in Python,"# Importing library
import numpy as np

# Creating two 2X2 matrix
matrix1 = np.array([[1, 2], [0, 2]])
matrix2 = np.array([[0, 1], [3, 4]])

print(""Original matrix:"")
print(matrix1)
print(matrix2)

# Output
result = np.einsum(""mk,kn"", matrix1, matrix2)

print(""Einsteins summation convention of the two matrix:"")
print(result)",">>> import numpy as np
>>> from numpy import array
>>> from numpy import arange
>>> from numpy import asarray
>>> from numpy import asmatrix
>>> from numpy import asmatrix
>>> from numpy import asarray
>>> from numpy import asmatrix
>>> from numpy import asmatrix
>>> from numpy import asarray
>>> from numpy import asmatrix
>>> from numpy import asmatrix
>>> from numpy import asarray"
2368,numpy.searchsorted() in Python,"# Python program explaining
# searchsorted() function

import numpy as geek

# input array
in_arr = [2, 3, 4, 5, 6]
print (""Input array : "", in_arr)

# the number which we want to insert
num = 4
print(""The number which we want to insert : "", num)

out_ind = geek.searchsorted(in_arr, num)
print (""Output indices to maintain sorted array : "", out_ind)","import numpy as np

def searchsorted(a, v):
    """"""
    Find the indices where element v should be inserted in a sorted array.

    Parameters
    ----------
    a : ndarray
        Input array.
    v : float
        Value to insert into a.

    Returns
    -------
    indices : ndarray of ints
        Indices of elements to insert.

    See Also
    --------
    searchsorted_left

    """"""
    ind = (a == v).non"
2369,Write a Python program to Merging two Dictionaries,"# Python code to merge dict using update() method
def Merge(dict1, dict2):
return(dict2.update(dict1))

# Driver code
dict1 = {'a': 10, 'b': 8}
dict2 = {'d': 6, 'c': 4}


# This return None
print(Merge(dict1, dict2))


# changes made in dict2
print(dict2)","def merge_dict(dict1, dict2):
    dict1.update(dict2)
    return dict1

# Take two dictionaries as input and print the result
dict1 = {'a': 1, 'b': 2, 'c': 3}
dict2 = {'d': 4, 'e': 5, 'f': 6}
print(merge_dict(dict1, dict2))

# Take two dictionaries as input and print the result
dict1 = {'a': 1, '"
2370,Pretty print Linked List in Python,"class Node:
def __init__(self, val=None):
self.val = val
self.next = None


class LinkedList:
def __init__(self, head=None):
self.head = head

def __str__(self):

# defining a blank res variable
res = """"

# initializing ptr to head
ptr = self.head

# traversing and adding it to res
while ptr:
res += str(ptr.val) + "", ""
ptr = ptr.next

# removing trailing commas
res = res.strip("", "")

# chen checking if
# anything is present in res or not
if len(res):
return ""["" + res + ""]""
else:
return ""[]""


if __name__ == ""__main__"":

# defining linked list
ll = LinkedList()

# defining nodes
node1 = Node(10)
node2 = Node(15)
node3 = Node(20)

# connecting the nodes
ll.head = node1
node1.next = node2
node2.next = node3

# when print is called, by default
#it calls the __str__ method
print(ll)","# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def display(self, head):
        current = head
        while current:
            print(current.val, end=' ')
            current = current.next

    def insert(self, head, data):
        if head is None:
            head = ListNode(data)
            return"
2371,numpy.var() in Python,"# Python Program illustrating
# numpy.var() method
import numpy as np

# 1D array
arr = [20, 2, 7, 1, 34]

print(""arr : "", arr)
print(""var of arr : "", np.var(arr))

print(""\nvar of arr : "", np.var(arr, dtype = np.float32))
print(""\nvar of arr : "", np.var(arr, dtype = np.float64))","import numpy as np

def var(x):
    return np.var(x)

def mean(x):
    return np.mean(x)

def std(x):
    return np.std(x)

def test_var():
    assert var([1, 2, 3]) == 3
    assert var([1, 2, 3, 4]) == 4
    assert var([1, 2, 3, 4, 5]) == 5
    assert var([1, 2, 3, 4, 5, 6"
2372,How to add time onto a DateTime object in Python,"# Python3 code to illustrate the addition
# of time onto the datetime object

# Importing datetime
import datetime

# Initializing a date and time
date_and_time = datetime.datetime(2021, 8, 22, 11, 2, 5)

print(""Original time:"")
print(date_and_time)

# Calling the timedelta() function
time_change = datetime.timedelta(minutes=75)
new_time = date_and_time + time_change

# Printing the new datetime object
print(""changed time:"")
print(new_time)","import datetime

def add_time(start, duration):
    """"""
    :type start: datetime.datetime
    :type duration: datetime.timedelta
    :rtype: datetime.datetime
    """"""
    start_time = start.strftime(""%H:%M"")
    end_time = start + duration
    return end_time

# driver code
start = datetime.datetime.now()
duration = datetime.timedelta(hours=1, minutes"
2373,Convert JSON to CSV in Python,"# Python program to convert
# JSON file to CSV




import json
import csv




# Opening JSON file and loading the data
# into the variable data
with open('data.json') as json_file:
data = json.load(json_file)


employee_data = data['emp_details']


# now we will open a file for writing
data_file = open('data_file.csv', 'w')


# create the csv writer object
csv_writer = csv.writer(data_file)


# Counter variable used for writing
# headers to the CSV file
count = 0


for emp in employee_data:
if count == 0:


# Writing headers of CSV file
header = emp.keys()
csv_writer.writerow(header)
count += 1


# Writing data of CSV file
csv_writer.writerow(emp.values())


data_file.close()","import json
import csv

with open('solution.json') as f:
    data = json.load(f)

with open('solution.csv', 'w') as f:
    csv_writer = csv.writer(f)
    csv_writer.writerow(['name', 'age', 'gender'])
    for person in data:
        csv_writer.writerow([person['name'], person['age'], person['gender']])

""""""

import json
import csv"
2374,Extract IP address from file using Python,"# importing the module
import re


# opening and reading the file
with open('C:/Users/user/Desktop/New Text Document.txt') as fh:
fstring = fh.readlines()


# declaring the regex pattern for IP addresses
pattern = re.compile(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})')


# initializing the list object
lst=[]


# extracting the IP addresses
for line in fstring:
lst.append(pattern.search(line)[0])


# displaying the extracted IP addresses
print(lst)","def extract_ip_address(filename):
    with open(filename) as f:
        for line in f:
            if line.startswith('X-DNS:'):
                return line.split(':')[1].strip()

print(extract_ip_address('/etc/hosts'))

""""""

# Solution:

def extract_ip_address(filename):
    with open(filename) as f:
        for line in f:
            if line.startswith('X-"
2375,Write a Python program to Sort String by Custom Integer Substrings,"# Python3 code to demonstrate working of
# Sort String by Custom Substrings
# Using sorted() + zip() + lambda + regex()
import re


# initializing list
test_list = [""Good at 4"", ""Wake at 7"", ""Work till 6"", ""Sleep at 11""]


# printing original list
print(""The original list : "" + str(test_list))


# initializing substring list
subord_list = [""6"", ""7"", ""4"", ""11""]




# creating inverse mapping with index
temp_dict = {val: key for key, val in enumerate(subord_list)}


# custom sorting
temp_list = sorted([[ele, temp_dict[re.search(""(\d+)$"", ele).group()]] \
for ele in test_list], key = lambda x: x[1])
# compiling result
res = [ele for ele in list(zip(*temp_list))[0]]

# printing result
print(""The sorted list : "" + str(res))","def custom_integer_substrings(string):
    # your code goes here
    return string.count('0') + string.count('1')

# print(custom_integer_substrings('0123456789'))

# Write a Python program to sort a list of strings using the custom integer substring method.

# def custom_integer_substrings(string):
#     # your code goes here
#     return string.count('0') + string.count('1')

# print("
2376,numpy.var() in Python,"# Python Program illustrating
# numpy.var() method
import numpy as np

# 1D array
arr = [20, 2, 7, 1, 34]

print(""arr : "", arr)
print(""var of arr : "", np.var(arr))

print(""\nvar of arr : "", np.var(arr, dtype = np.float32))
print(""\nvar of arr : "", np.var(arr, dtype = np.float64))","import numpy as np

def var(x):
    return np.var(x)

def mean(x):
    return np.mean(x)

def std(x):
    return np.std(x)

def test_var():
    assert var([1, 2, 3]) == 3
    assert var([1, 2, 3, 4]) == 4
    assert var([1, 2, 3, 4, 5]) == 5
    assert var([1, 2, 3, 4, 5, 6"
2377,numpy.loadtxt() in Python,"# Python program explaining
# loadtxt() function
import numpy as geek

# StringIO behaves like a file object
from io import StringIO

c = StringIO(""0 1 2 \n3 4 5"")
d = geek.loadtxt(c)

print(d)","import numpy as np

# Load the data
X = np.loadtxt('data-01-X.txt', delimiter=',')
y = np.loadtxt('data-01-y.txt', delimiter=',')

# Create a linear regression object
regr = linear_model.LinearRegression()

# Train the model using the training sets
regr.fit(X, y)

# Make predictions using the testing set
yhat = regr.predict(X)

# Calculate"
2378,Retweet Tweet using Selenium in Python,"from selenium import webdriver
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support.ui import WebDriverWait
import time
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import ElementClickInterceptedException
from selenium.common.exceptions import StaleElementReferenceException
from selenium.webdriver.common.keys import Keys
from selenium.webdriver import ActionChains
import getpass","import selenium
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.chrome.options import Options
import time

# Enter your credentials here
username = ""your_username"""
2379,Write a Python lambda,"# Python program to demonstrate
# lambda functions


string ='GeeksforGeeks'

# lambda returns a function object
print(lambda string : string)","def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*"
2380,Write a Python program to Replace String by Kth Dictionary value,"# Python3 code to demonstrate working of
# Replace String by Kth Dictionary value
# Using list comprehension

# initializing list
test_list = [""Gfg"", ""is"", ""Best""]

# printing original list
print(""The original list : "" + str(test_list))

# initializing subs. Dictionary
subs_dict = {
""Gfg"" : [5, 6, 7],
""is"" : [7, 4, 2],
}

# initializing K
K = 2

# using list comprehension to solve
# problem using one liner
res = [ele if ele not in subs_dict else subs_dict[ele][K]
for ele in test_list]

# printing result
print(""The list after substitution : "" + str(res))","def replace_string(string, k):
    d = {}
    for i in string:
        d[i] = k
    return d

print(replace_string(""python"", 2))

""""""

def replace_string(string, k):
    d = {}
    for i in string:
        d[i] = k
    return d

print(replace_string(""python"", 2))

""""""

def replace_string(string, k):
    d = {}"
2381,Lambda and filter in Python Examples,"# Python Program to find numbers divisible
# by thirteen from a list using anonymous
# function

# Take a list of numbers.
my_list = [12, 65, 54, 39, 102, 339, 221, 50, 70, ]

# use anonymous function to filter and comparing
# if divisible or not
result = list(filter(lambda x: (x % 13 == 0), my_list))

# printing the result
print(result)","def solution(L, A):
    # Your solution goes here
    return [A[i] for i in range(len(A)) if A[i] not in L]

""""""

def solution(L, A):
    # Your solution goes here
    return [A[i] for i in range(len(A)) if A[i] not in L]

""""""

def solution(L, A):
    # Your solution goes here
    return [A[i] for i in range(len(A"
2382,Get n-largest values from a particular column in Pandas DataFrame in Python,"# importing pandas module
import pandas as pd

# making data frame
df = pd.read_csv(""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv"")

df.head(10)","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution"
2383,Write a Python program to Replace Different characters in String at Once,"# Python3 code to demonstrate working of
# Replace Different characters in String at Once
# using join() + generator expression


# initializing string
test_str = 'geeksforgeeks is best'


# printing original String
print(""The original string is : "" + str(test_str))


# initializing mapping dictionary
map_dict = {'e':'1', 'b':'6', 'i':'4'}


# generator expression to construct vals
# join to get string
res = ''.join(idx if idx not in map_dict else map_dict[idx] for idx in test_str)


# printing result
print(""The converted string : "" + str(res))","def replace_different_char(string):
    # your code goes here
    return string.replace('a', 'b')

# read the string
s = input()

# call the function
result = replace_different_char(s)

# print the result
print(result)

'''
Sample Input

abcd

Sample Output

abcd
'''"
2384,Write a Python program to Replace all Characters of a List Except the given character,"# Python3 code to demonstrate working of
# Replace all Characters Except K
# Using list comprehension and conditional expressions

# initializing lists
test_list = ['G', 'F', 'G', 'I', 'S', 'B', 'E', 'S', 'T']

# printing original list
print(""The original list : "" + str(test_list))

# initializing repl_chr
repl_chr = '$'

# initializing retain chararter
ret_chr = 'G'

# list comprehension to remake list after replacement
res = [ele if ele == ret_chr else repl_chr for ele in test_list]

# printing result
print(""List after replacement : "" + str(res))","def solution(str, char):
    return str.replace(char, """")

print(solution(""abcdefg"", ""e""))

""""""

def solution(str, char):
    return str.replace(char, """")

print(solution(""abcdefg"", ""e""))

""""""

def solution(str, char):
    return str.replace(char, """")

print(solution(""abcdefg"", ""e""))

""""""

def solution"
2385,Write a Python program to Group Similar items to Dictionary Values List,"# Python3 code to demonstrate working of
# Group Similar items to Dictionary Values List
# Using defaultdict + loop
from collections import defaultdict

# initializing list
test_list = [4, 6, 6, 4, 2, 2, 4, 4, 8, 5, 8]

# printing original list
print(""The original list : "" + str(test_list))

# using defaultdict for default list
res = defaultdict(list)
for ele in test_list:

# appending Similar values
res[ele].append(ele)

# printing result
print(""Similar grouped dictionary : "" + str(dict(res)))","def group_similar(d, v):
    return sorted(d.items(), key=lambda x: x[1], reverse=True)

d = {'a': 1, 'b': 2, 'c': 3}
v = ['a', 'b', 'c']
print(group_similar(d, v))

""""""

# Solution:

def group_similar(d, v):
    return sorted(d.items(), key=lambda x: x[1], reverse=True)"
2386,Write a Python program to Extract values of Particular Key in Nested Values,"# Python3 code to demonstrate working of
# Extract values of Particular Key in Nested Values
# Using list comprehension

# initializing dictionary
test_dict = {'Gfg' : {""a"" : 7, ""b"" : 9, ""c"" : 12},
'is' : {""a"" : 15, ""b"" : 19, ""c"" : 20},
'best' :{""a"" : 5, ""b"" : 10, ""c"" : 2}}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# initializing key
temp = ""c""

# using item() to extract key value pair as whole
res = [val[temp] for key, val in test_dict.items() if temp in val]

# printing result
print(""The extracted values : "" + str(res))","def extract_values(dictionary, key):
    for key, value in dictionary.items():
        if key == key:
            print(value)

dictionary = {
    ""a"": 1,
    ""b"": 2,
    ""c"": 3,
    ""d"": 4,
    ""e"": 5,
    ""f"": 6,
    ""g"": 7,
    ""h"": 8,
    ""i"": 9,
    ""j"": 10,
    """
2387,Pandas | Basic of Time Series Manipulation in Python,"import pandas as pd
from datetime import datetime
import numpy as np


range_date = pd.date_range(start ='1/1/2019', end ='1/08/2019',
freq ='Min')
print(range_date)","import pandas as pd
import numpy as np

# Create a Pandas DataFrame
df = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})

# Create a Pandas Series
s = pd.Series([1, 2, 3, 4, 5])

# Create a Pandas DataFrame with a Series
df2 = pd.DataFrame({'x': [1, 2, 3,"
2388,Write a Python program to print all even numbers in a range,"# Python program to print Even Numbers in given range

start, end = 4, 19

# iterating each number in list
for num in range(start, end + 1):

# checking condition
if num % 2 == 0:
print(num, end = "" "")","def even_numbers(start, end):
    for i in range(start, end + 1):
        if i % 2 == 0:
            print(i)

if __name__ == '__main__':
    start = int(input(""Enter the start number: ""))
    end = int(input(""Enter the end number: ""))
    even_numbers(start, end)

""""""

def even_numbers(start, end):
    for i in range(start, end"
2389,numpy string operations | swapcase() function in Python,"# Python Program explaining
# numpy.char.swapcase() function

import numpy as geek


in_arr = geek.array(['P4Q R', '4q Rp', 'Q Rp4', 'rp4q'])
print (""input array : "", in_arr)

out_arr = geek.char.swapcase(in_arr)
print (""output swapcasecased array :"", out_arr)","solution = ""Hello World""
print(solution.swapcase())

""""""

# Solution:

def swapcase(s):
    return s.swapcase()

print(swapcase(""Hello World""))"
2390,Write a Python program to find tuples which have all elements divisible by K from a list of tuples,"# Python3 code to demonstrate working of
# K Multiple Elements Tuples
# Using list comprehension + all()

# initializing list
test_list = [(6, 24, 12), (7, 9, 6), (12, 18, 21)]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing K
K = 6

# all() used to filter elements
res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]

# printing result
print(""K Multiple elements tuples : "" + str(res))","def solution(a, k):
    answer = []
    for i in a:
        if i[0] % k == 0:
            answer.append(i)
    return answer

print(solution([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 3))

""""""

def solution(a, k):
    answer = []
    for i in a:
        if i"
2391,Write a Python program to Convert Tuple to Tuple Pair,"# Python3 code to demonstrate working of
# Convert Tuple to Tuple Pair
# Using product() + next()
from itertools import product

# initializing tuple
test_tuple = ('G', 'F', 'G')

# printing original tuple
print(""The original tuple : "" + str(test_tuple))

# Convert Tuple to Tuple Pair
# Using product() + next()
test_tuple = iter(test_tuple)
res = list(product(next(test_tuple), test_tuple))

# printing result
print(""The paired records : "" + str(res))","def convert_tuple(tuple):
    return tuple[0], tuple[1]

print(convert_tuple((1, 2)))

""""""

def convert_tuple(tuple):
    return tuple[0], tuple[1]

print(convert_tuple((1, 2)))

""""""

def convert_tuple(tuple):
    return tuple[0], tuple[1]

print(convert_tuple((1, 2)))

"""""""
2392,Write a Python program to Remove Reduntant Substrings from Strings List,"# Python3 code to demonstrate working of
# Remove Reduntant Substrings from Strings List
# Using enumerate() + join() + sort()


# initializing list
test_list = [""Gfg"", ""Gfg is best"", ""Geeks"", ""Gfg is for Geeks""]


# printing original list
print(""The original list : "" + str(test_list))


# using loop to iterate for each string
test_list.sort(key = len)
res = []
for idx, val in enumerate(test_list):

# concatenating all next values and checking for existence
if val not in ', '.join(test_list[idx + 1:]):
res.append(val)


# printing result
print(""The filtered list : "" + str(res))","def remove_redundant_substrings(str1, str2):
    # Write your code here
    str1 = str1.replace(' ', '')
    str2 = str2.replace(' ', '')
    str1 = str1.replace(' ', '')
    str2 = str2.replace(' ', '')
    str1 = str1.replace(' ', '')
    str2 = str2.replace(' ', '')
    str1 = str1.replace(' ', ''"
2393,How to compute numerical negative value for all elements in a given NumPy array in Python,"# importing library
import numpy as np


# creating a array
x = np.array([-1, -2, -3,
1, 2, 3, 0])


print(""Printing the Original array:"",
x)


# converting array elements to
# its corresponding negative value
r1 = np.negative(x)


print(""Printing the negative value of the given array:"",
r1)","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Compute the negative value of all elements in a NumPy array
np.negative(a)

# Compute the negative value of all elements in a NumPy array
np.negative(a, out=a)

# Compute the negative value of all elements in a NumPy array
np.negative(a, out=a, where"
2394,Convert binary to string using Python,"# Python3 code to demonstrate working of
# Converting binary to string
# Using BinarytoDecimal(binary)+chr()


# Defining BinarytoDecimal() function
def BinaryToDecimal(binary):

binary1 = binary
decimal, i, n = 0, 0, 0
while(binary != 0):
dec = binary % 10
decimal = decimal + dec * pow(2, i)
binary = binary//10
i += 1
return (decimal)

# Driver's code
# initializing binary data
bin_data ='10001111100101110010111010111110011'

# print binary data
print(""The binary value is:"", bin_data)

# initializing a empty string for
# storing the string data
str_data =' '

# slicing the input and converting it
# in decimal and then converting it in string
for i in range(0, len(bin_data), 7):

# slicing the bin_data from index range [0, 6]
# and storing it as integer in temp_data
temp_data = int(bin_data[i:i + 7])

# passing temp_data in BinarytoDecimal() function
# to get decimal value of corresponding temp_data
decimal_data = BinaryToDecimal(temp_data)

# Deccoding the decimal value returned by
# BinarytoDecimal() function, using chr()
# function which return the string corresponding
# character for given ASCII value, and store it
# in str_data
str_data = str_data + chr(decimal_data)

# printing the result
print(""The Binary value after string conversion is:"",
str_data)","def binary_to_string(binary):
    # Your code here
    return binary

# Test your code
binary = ""10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
2395,Working with large CSV files in Python,"# import required modules
import pandas as pd
import numpy as np
import time

# time taken to read data
s_time = time.time()
df = pd.read_csv(""gender_voice_dataset.csv"")
e_time = time.time()

print(""Read without chunks: "", (e_time-s_time), ""seconds"")

# data
df.sample(10)","# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

# Solution 11:

# Solution 12:

# Solution 13:

# Solution 14:

# Solution 15:

# Solution 16:

# Solution 17:

# Solution 18:

# Solution 19:

# Solution 20:

#"
2396,Write a Python program to find the Strongest Neighbour,"# define a function for finding
# the maximum for adjacent
# pairs in the array
def maximumAdjacent(arr1, n):

# array to store the max
# value between adjacent pairs
arr2 = []

# iterate from 1 to n - 1
for i in range(1, n):

# find max value between
# adjacent pairs gets
# stored in r
r = max(arr1[i], arr1[i-1])

# add element
arr2.append(r)

# printing the elements
for ele in arr2 :
print(ele,end="" "")

if __name__ == ""__main__"" :

# size of the input array
n = 6

# input array
arr1 = [1,2,2,3,4,5]

# function calling
maximumAdjacent(arr1, n)","""""""

import math
import sys

def find_strongest_neighbour(arr, n):
    # Write your code here
    max_val = -math.inf
    max_index = -1
    for i in range(n):
        if arr[i] > max_val:
            max_val = arr[i]
            max_index = i
    return max_index

if __name__ == '__main__':
    n = int(input())
    arr ="
2397,Write a Python Program for BogoSort or Permutation Sort,"# Python program for implementation of Bogo Sort
import random


# Sorts array a[0..n-1] using Bogo sort
def bogoSort(a):
n = len(a)
while (is_sorted(a)== False):
shuffle(a)


# To check if array is sorted or not
def is_sorted(a):
n = len(a)
for i in range(0, n-1):
if (a[i] > a[i+1] ):
return False
return True


# To generate permutation of the array
def shuffle(a):
n = len(a)
for i in range (0,n):
r = random.randint(0,n-1)
a[i], a[r] = a[r], a[i]


# Driver code to test above
a = [3, 2, 4, 1, 0, 5]
bogoSort(a)
print(""Sorted array :"")
for i in range(len(a)):
print (""%d"" %a[i]),","def bubble_sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr)-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

def bubble_sort_2(arr):
    for i in range(len(arr)):
        for j in range(len(arr)-1):
            if arr[j"
2398,Write a Python program to Convert Character Matrix to single String,"# Python3 code to demonstrate working of
# Convert Character Matrix to single String
# Using join() + list comprehension

# initializing list
test_list = [['g', 'f', 'g'], ['i', 's'], ['b', 'e', 's', 't']]

# printing original list
print(""The original list is : "" + str(test_list))

# Convert Character Matrix to single String
# Using join() + list comprehension
res = ''.join(ele for sub in test_list for ele in sub)

# printing result
print(""The String after join : "" + res)","def matrix_to_string(matrix):
    return ''.join(matrix)

def string_to_matrix(string):
    return [list(i) for i in string.split()]

def matrix_to_string(matrix):
    return ''.join([''.join(i) for i in matrix])

def string_to_matrix(string):
    return [list(i) for i in string.split()]

def matrix_to_string(matrix"
2399,Write a Python program to Flatten tuple of List to tuple,"# Python3 code to demonstrate working of
# Flatten tuple of List to tuple
# Using sum() + tuple()

# initializing tuple
test_tuple = ([5, 6], [6, 7, 8, 9], [3])

# printing original tuple
print(""The original tuple : "" + str(test_tuple))

# Flatten tuple of List to tuple
# Using sum() + tuple()
res = tuple(sum(test_tuple, []))

# printing result
print(""The flattened tuple : "" + str(res))","def flatten(tup):
    return tuple(tup)

print(flatten([1, 2, 3, 4, 5]))

""""""

def flatten(tup):
    return tuple(tup)

print(flatten([1, 2, 3, 4, 5]))"
2400,Program to reverse a linked list using Stack in Python,"// C/C++ program to reverse linked list
// using stack


#include <bits/stdc++.h>
using namespace std;


/* Link list node */
struct Node {
int data;
struct Node* next;
};


/* Given a reference (pointer to pointer) to
the head of a list and an int, push a new
node on the front of the list. */
void push(struct Node** head_ref, int new_data)
{
struct Node* new_node = new Node;


new_node->data = new_data;
new_node->next = (*head_ref);
(*head_ref) = new_node;
}


// Function to reverse linked list
Node *reverseList(Node* head)
{
// Stack to store elements of list
stack<Node *> stk;


// Push the elements of list to stack
Node* ptr = head;
while (ptr->next != NULL) {
stk.push(ptr);
ptr = ptr->next;
}


// Pop from stack and replace
// current nodes value'
head = ptr;
while (!stk.empty()) {
ptr->next = stk.top();


ptr = ptr->next;
stk.pop();
}

ptr->next = NULL;

return head;
}


// Function to print the Linked list
void printList(Node* head)
{
while (head) {
cout << head->data << "" "";
head = head->next;
}
}


// Driver Code
int main()
{
/* Start with the empty list */
struct Node* head = NULL;


/* Use push() to construct below list
1->2->3->4->5 */
push(&head, 5);
push(&head, 4);
push(&head, 3);
push(&head, 2);
push(&head, 1);


head = reverseList(head);


printList(head);


return 0;
}","# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if head is None:
            return head
        
        slow = head
        fast = head.next
        
        while fast is not None and fast.next is not None:
            slow = slow."
2401,Write a Python program to Unique Tuple Frequency (Order Irrespective),"# Python3 code to demonstrate working of
# Unique Tuple Frequency [ Order Irrespective ]
# Using tuple() + list comprehension + sorted() + len()

# initializing lists
test_list = [(3, 4), (1, 2), (4, 3), (5, 6)]

# printing original list
print(""The original list is : "" + str(test_list))

# Using tuple() + list comprehension + sorted() + len()
# Size computed after conversion to set
res = len(list(set(tuple(sorted(sub)) for sub in test_list)))

# printing result
print(""Unique tuples Frequency : "" + str(res))","def unique_tuple(tup):
    return tup[0]

def unique_tuple_freq(tup):
    return tup[1]

def unique_tuple_freq(tup):
    return tup[1]

def unique_tuple_freq(tup):
    return tup[1]

def unique_tuple_freq(tup):
    return tup[1]

def unique_tuple_fre"
2402,Write a Python program to find the character position of Kth word from a list of strings,"# Python3 code to demonstrate working of
# Word Index for K position in Strings List
# Using enumerate() + list comprehension

# initializing list
test_list = [""geekforgeeks"", ""is"", ""best"", ""for"", ""geeks""]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing K
K = 20

# enumerate to get indices of all inner and outer list
res = [ele[0] for sub in enumerate(test_list) for ele in enumerate(sub[1])]

# getting index of word
res = res[K]

# printing result
print(""Index of character at Kth position word : "" + str(res))","def find_word(word, word_list):
    for i in range(len(word_list)):
        if word_list[i] == word:
            return i
    return -1

word = ""python""
word_list = [""python"", ""java"", ""kotlin"", ""javascript""]

print(find_word(word, word_list))

""""""

# Solution 1

def find_word(word, word_list):
    for"
2403,Ways to remove ith character from string in Python,"# Python code to demonstrate
# method to remove i'th character
# Naive Method

# Initializing String
test_str = ""GeeksForGeeks""

# Printing original string
print (""The original string is : "" + test_str)

# Removing char at pos 3
# using loop
new_str = """"

for i in range(len(test_str)):
if i != 2:
new_str = new_str + test_str[i]

# Printing string after removal
print (""The string after removal of i'th character : "" + new_str)","def remove_ith_char(string, i):
    return string[:i] + string[i+1:]

print(remove_ith_char(""abcdefghijklmnopqrstuvwxyz"", 2))

""""""

def remove_ith_char(string, i):
    return string[:i] + string[i+1:]

print(remove_ith_char(""abcdefghijklmnopqrstuvwxyz"", 2))"
2404,Ways to sort list of dictionaries by values in Write a Python program to Using lambda function,"# Python code demonstrate the working of
# sorted() with lambda


# Initializing list of dictionaries
lis = [{ ""name"" : ""Nandini"", ""age"" : 20},
{ ""name"" : ""Manjeet"", ""age"" : 20 },
{ ""name"" : ""Nikhil"" , ""age"" : 19 }]


# using sorted and lambda to print list sorted
# by age
print ""The list printed sorting by age: ""
print sorted(lis, key = lambda i: i['age'])


print (""\r"")


# using sorted and lambda to print list sorted
# by both age and name. Notice that ""Manjeet""
# now comes before ""Nandini""
print ""The list printed sorting by age and name: ""
print sorted(lis, key = lambda i: (i['age'], i['name']))


print (""\r"")


# using sorted and lambda to print list sorted
# by age in descending order
print ""The list printed sorting by age in descending order: ""
print sorted(lis, key = lambda i: i['age'],reverse=True)","def sort_dict(d):
    return sorted(d.items(), key=lambda item: item[1])

d = {'a': 1, 'b': 2, 'c': 3}
print(sort_dict(d))

""""""

# Solution

def sort_dict(d):
    return sorted(d.items(), key=lambda item: item[1])

d = {'a': 1, 'b': 2, 'c': 3}"
2405,How to read numbers in CSV files in Python,"import csv

# creating a nested list of roll numbers,
# subjects and marks scored by each roll number
marks = [
[""RollNo"", ""Maths"", ""Python""],
[1000, 80, 85],
[2000, 85, 89],
[3000, 82, 90],
[4000, 83, 98],
[5000, 82, 90]
]

# using the open method with 'w' mode
# for creating a new csv file 'my_csv' with .csv extension
with open('my_csv.csv', 'w', newline = '') as file:
writer = csv.writer(file, quoting = csv.QUOTE_NONNUMERIC,
delimiter = ' ')
writer.writerows(marks)

# opening the 'my_csv' file to read its contents
with open('my_csv.csv', newline = '') as file:

reader = csv.reader(file, quoting = csv.QUOTE_NONNUMERIC,
delimiter = ' ')

# storing all the rows in an output list
output = []
for row in reader:
output.append(row[:])

for rows in output:
print(rows)","import csv

with open('numbers.csv', 'r') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        print(row)

""""""

import csv

with open('numbers.csv', 'r') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        print(row)

""""""

""""""

import csv

with open('numbers.csv', '"
2406,Find the roots of the polynomials using NumPy in Python,"# import numpy library
import numpy as np


# Enter the coefficients of the poly in the array
coeff = [1, 2, 1]
print(np.roots(coeff))","import numpy as np

def roots(p):
    # compute roots of polynomial
    roots = np.roots(p)
    # return roots
    return roots

# test
p = np.array([1, 2, 3, 4])
roots = roots(p)
print(roots)

# test
p = np.array([1, 2, 3, 4])
roots = roots(p)
print(roots)

# test
p = np.array([1"
2407,Write a Python program to find the sum of all items in a dictionary,"# Python3 Program to find sum of
# all items in a Dictionary


# Function to print sum
def returnSum(myDict):

list = []
for i in myDict:
list.append(myDict[i])
final = sum(list)

return final


# Driver Function
dict = {'a': 100, 'b':200, 'c':300}
print(""Sum :"", returnSum(dict))","def sum_dict(d):
    sum = 0
    for key in d:
        sum += d[key]
    return sum

d = {'a': 1, 'b': 2, 'c': 3}
print(sum_dict(d))

""""""

# Solution 1

def sum_dict(d):
    sum = 0
    for key in d:
        sum += d[key]
    return sum

d = {'a': 1, 'b':"
2408,Write a Python program to Extract words starting with K in String List,"# Python3 code to demonstrate working of
# Extract words starting with K in String List
# Using loop + split()

# initializing list
test_list = [""Gfg is best"", ""Gfg is for geeks"", ""I love G4G""]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing K
K = ""g""

res = []
for sub in test_list:
# splitting phrases
temp = sub.split()
for ele in temp:

# checking for matching elements
if ele[0].lower() == K.lower():
res.append(ele)

# printing result
print(""The filtered elements : "" + str(res))","def extract_words(s, k):
    words = []
    for word in s.split():
        if word[:k] == k:
            words.append(word)
    return words

print(extract_words(""The quick brown fox jumps over the lazy dog"", 3))

""""""

# Solution:

def extract_words(s, k):
    words = []
    for word in s.split():
        if word[:k] == k:
            words."
2409,Write a Python program to Find Mean of a List of Numpy Array,"# Python code to find mean of every numpy array in list

# Importing module
import numpy as np

# List Initialization
Input = [np.array([1, 2, 3]),
np.array([4, 5, 6]),
np.array([7, 8, 9])]

# Output list initialization
Output = []

# using np.mean()
for i in range(len(Input)):
Output.append(np.mean(Input[i]))

# Printing output
print(Output)","import numpy as np

arr = np.array([[1,2,3,4,5,6,7,8,9,10],
                [11,12,13,14,15,16,17,18,19,20],
                [21,22,23,24,25,26,27,28,29,30]])

print(""Mean of the array is:"",np.mean(arr))

""""""

import numpy as np

arr = np"
2410,Write a Python program to Numpy np.char.endswith() method,"# import numpy
import numpy as np

# using np.char.endswith() method
a = np.array(['geeks', 'for', 'geeks'])
gfg = np.char.endswith(a, 'ks')

print(gfg)","import numpy as np

solution = np.char.endswith('abc', 'def')

print(solution)

""""""

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

# Solution

#"
2411,Write a Python program to Find common elements in three sorted arrays by dictionary intersection,"# Function to find common elements in three
# sorted arrays
from collections import Counter

def commonElement(ar1,ar2,ar3):
# first convert lists into dictionary
ar1 = Counter(ar1)
ar2 = Counter(ar2)
ar3 = Counter(ar3)

# perform intersection operation
resultDict = dict(ar1.items() & ar2.items() & ar3.items())
common = []

# iterate through resultant dictionary
# and collect common elements
for (key,val) in resultDict.items():
for i in range(0,val):
common.append(key)

print(common)

# Driver program
if __name__ == ""__main__"":
ar1 = [1, 5, 10, 20, 40, 80]
ar2 = [6, 7, 20, 80, 100]
ar3 = [3, 4, 15, 20, 30, 70, 80, 120]
commonElement(ar1,ar2,ar3)","def common_elements(arr1, arr2, arr3):
    arr1 = sorted(arr1)
    arr2 = sorted(arr2)
    arr3 = sorted(arr3)
    common = []
    for i in range(len(arr1)):
        for j in range(len(arr2)):
            for k in range(len(arr3)):
                if arr1[i] == arr2[j] and arr2[j] == arr3["
2412,Write a Python program to Remove duplicate lists in tuples (Preserving Order),"# Python3 code to demonstrate working of
# Remove duplicate lists in tuples(Preserving Order)
# Using list comprehension + set()


# Initializing tuple
test_tup = ([4, 7, 8], [1, 2, 3], [4, 7, 8], [9, 10, 11], [1, 2, 3])


# printing original tuple
print(""The original tuple is : "" + str(test_tup))


# Remove duplicate lists in tuples(Preserving Order)
# Using list comprehension + set()
temp = set()
res = [ele for ele in test_tup if not(tuple(ele) in temp or temp.add(tuple(ele)))]


# printing result
print(""The unique lists tuple is : "" + str(res))","def removeDuplicates(t):
    # Your code here
    return t

# Use a for loop to iterate over the list of tuples.
# Use the removeDuplicates function to remove duplicate elements from the list.
# Print the list of tuples after removing duplicate elements.

# Use a for loop to iterate over the list of tuples.
# Use the removeDuplicates function to remove duplicate elements from the list.
# Print the list of tuples after removing duplicate elements."
2413,Program to print the diamond shape in Python,"// C++ program to print diamond shape
// with 2n rows
#include <bits/stdc++.h>
using namespace std;


// Prints diamond pattern with 2n rows
void printDiamond(int n)
{
int space = n - 1;


// run loop (parent loop)
// till number of rows
for (int i = 0; i < n; i++)
{
// loop for initially space,
// before star printing
for (int j = 0;j < space; j++)
cout << "" "";


// Print i+1 stars
for (int j = 0; j <= i; j++)
cout << ""* "";


cout << endl;
space--;
}


// Repeat again in reverse order
space = 0;


// run loop (parent loop)
// till number of rows
for (int i = n; i > 0; i--)
{
// loop for initially space,
// before star printing
for (int j = 0; j < space; j++)
cout << "" "";


// Print i stars
for (int j = 0;j < i;j++)
cout << ""* "";


cout << endl;
space++;
}
}


// Driver code
int main()
{
printDiamond(5);
return 0;
}


// This is code is contributed
// by rathbhupendra","def print_diamond(n):
    for i in range(n):
        for j in range(n):
            print(i, end="" "")
        print()

n = int(input(""Enter the number of rows: ""))
print_diamond(n)

""""""

# Solution

def print_diamond(n):
    for i in range(n):
        for j in range(n):
            print(i, end="" "")
        print()

n = int(input"
2414,Write a Python program to Extract Indices of substring matches,"# Python3 code to demonstrate working of
# Extract Indices of substring matches
# Using loop + enumerate()

# initializing list
test_list = [""Gfg is good"", ""for Geeks"", ""I love Gfg"", ""Its useful""]

# initializing K
K = ""Gfg""

# printing original list
print(""The original list : "" + str(test_list))

# using loop to iterate through list
res = []
for idx, ele in enumerate(test_list):
if K in ele:
res.append(idx)

# printing result
print(""The indices list : "" + str(res))","def solution(s, p):
    # Write your code here
    # return [i for i, c in enumerate(s) if c == p[0]]
    return [i for i, c in enumerate(s) if c == p[0]]

# print(solution(""abcde"", ""e""))
# print(solution(""abcde"", ""b""))
# print(solution(""abcde"", ""d""))
# print(solution(""abcde"", ""c""))
# print("
2415,Write a Python program to Test if tuple is distinct,"# Python3 code to demonstrate working of
# Test if tuple is distinct
# Using loop

# initialize tuple
test_tup = (1, 4, 5, 6, 1, 4)

# printing original tuple
print(""The original tuple is : "" + str(test_tup))

# Test if tuple is distinct
# Using loop
res = True
temp = set()
for ele in test_tup:
if ele in temp:
res = False
break
temp.add(ele)

# printing result
print(""Is tuple distinct ? : "" + str(res))","def is_distinct(t):
    if len(t)!= len(set(t)):
        return False
    else:
        return True

print(is_distinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(is_distinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23"
2416,Write a Python program to Creating DataFrame from dict of narray/lists,"# Python code demonstrate creating
# DataFrame from dict narray / lists
# By default addresses.


import pandas as pd


# initialise data of lists.
data = {'Category':['Array', 'Stack', 'Queue'],
'Marks':[20, 21, 19]}


# Create DataFrame
df = pd.DataFrame(data)


# Print the output.
print(df )","import pandas as pd

data = {'Name': ['Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi"
2417,Create a list from rows in Pandas DataFrame | Set 2 in Python,"# importing pandas as pd
import pandas as pd

# Create the dataframe
df = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/11'],
'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],
'Cost':[10000, 5000, 15000, 2000]})

# Print the dataframe
print(df)","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pima-indians-diabetes.csv')

# Create a list from rows in Pandas DataFrame

# Set 2 in Python

# Create a list from rows in Pandas DataFrame

# Set 2 in Python

# Create a list from rows in Pandas DataFrame

# Set 2 in Python

# Create a list"
2418,Selenium  Search for text on page in Python,"# import webdriver
from selenium import webdriver

# create webdriver object
driver = webdriver.Chrome()

# URL of the website
url = ""https://www.geeksforgeeks.org/""

# Opening the URL
driver.get(url)

# Getting current URL source code
get_source = driver.page_source

# Text you want to search
search_text = ""Floor""

# print True if text is present else False
print(search_text in get_source)","import selenium
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

# Open the browser
browser = webdriver.Chrome()

# Open the website
browser.get('https://www.seleniumeasy.com/test/basic-first-form-demo.html')

# Find the input box
input_box = browser.find_element_by_id('sldNumber')

# Send the input value to the input box
input_box.send"
2419,Write a Python program to Reverse Row sort in Lists of List,"# Python3 code to demonstrate
# Reverse Row sort in Lists of List
# using loop

# initializing list
test_list = [[4, 1, 6], [7, 8], [4, 10, 8]]

# printing original list
print (""The original list is : "" + str(test_list))

# Reverse Row sort in Lists of List
# using loop
for ele in test_list:
ele.sort(reverse = True)

# printing result
print (""The reverse sorted Matrix is : "" + str(test_list))","def reverse_row(lst):
    for i in range(len(lst)):
        for j in range(len(lst) - i - 1):
            if lst[j][0] > lst[j + 1][0]:
                lst[j], lst[j + 1] = lst[j + 1], lst[j]
    return lst

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
2420,Print with your own font using Python !!,"# Python3 code to print input in your own font


name = ""GEEK""


# To take input from User
# name = input(""Enter your name: \n\n"")


length = len(name)
l = """"


for x in range(0, length):
c = name[x]
c = c.upper()

if (c == ""A""):
print(""..######..\n..#....#..\n..######.."", end = "" "")
print(""\n..#....#..\n..#....#..\n\n"")

elif (c == ""B""):
print(""..######..\n..#....#..\n..#####..."", end = "" "")
print(""\n..#....#..\n..######..\n\n"")

elif (c == ""C""):
print(""..######..\n..#.......\n..#......."", end = "" "")
print(""\n..#.......\n..######..\n\n"")

elif (c == ""D""):
print(""..#####...\n..#....#..\n..#....#.."", end = "" "")
print(""\n..#....#..\n..#####...\n\n"")

elif (c == ""E""):
print(""..######..\n..#.......\n..#####..."", end = "" "")
print(""\n..#.......\n..######..\n\n"")

elif (c == ""F""):
print(""..######..\n..#.......\n..#####..."", end = "" "")
print(""\n..#.......\n..#.......\n\n"")

elif (c == ""G""):
print(""..######..\n..#.......\n..#.####.."", end = "" "")
print(""\n..#....#..\n..#####...\n\n"")

elif (c == ""H""):
print(""..#....#..\n..#....#..\n..######.."", end = "" "")
print(""\n..#....#..\n..#....#..\n\n"")

elif (c == ""I""):
print(""..######..\n....##....\n....##...."", end = "" "")
print(""\n....##....\n..######..\n\n"")

elif (c == ""J""):
print(""..######..\n....##....\n....##...."", end = "" "")
print(""\n..#.##....\n..####....\n\n"")

elif (c == ""K""):
print(""..#...#...\n..#..#....\n..##......"", end = "" "")
print(""\n..#..#....\n..#...#...\n\n"")

elif (c == ""L""):
print(""..#.......\n..#.......\n..#......."", end = "" "")
print(""\n..#.......\n..######..\n\n"")

elif (c == ""M""):
print(""..#....#..\n..##..##..\n..#.##.#.."", end = "" "")
print(""\n..#....#..\n..#....#..\n\n"")

elif (c == ""N""):
print(""..#....#..\n..##...#..\n..#.#..#.."", end = "" "")
print(""\n..#..#.#..\n..#...##..\n\n"")

elif (c == ""O""):
print(""..######..\n..#....#..\n..#....#.."", end = "" "")
print(""\n..#....#..\n..######..\n\n"")

elif (c == ""P""):
print(""..######..\n..#....#..\n..######.."", end = "" "")
print(""\n..#.......\n..#.......\n\n"")

elif (c == ""Q""):
print(""..######..\n..#....#..\n..#.#..#.."", end = "" "")
print(""\n..#..#.#..\n..######..\n\n"")

elif (c == ""R""):
print(""..######..\n..#....#..\n..#.##..."", end = "" "")
print(""\n..#...#...\n..#....#..\n\n"")

elif (c == ""S""):
print(""..######..\n..#.......\n..######.."", end = "" "")
print(""\n.......#..\n..######..\n\n"")

elif (c == ""T""):
print(""..######..\n....##....\n....##...."", end = "" "")
print(""\n....##....\n....##....\n\n"")

elif (c == ""U""):
print(""..#....#..\n..#....#..\n..#....#.."", end = "" "")
print(""\n..#....#..\n..######..\n\n"")

elif (c == ""V""):
print(""..#....#..\n..#....#..\n..#....#.."", end = "" "")
print(""\n...#..#...\n....##....\n\n"")

elif (c == ""W""):
print(""..#....#..\n..#....#..\n..#.##.#.."", end = "" "")
print(""\n..##..##..\n..#....#..\n\n"")

elif (c == ""X""):
print(""..#....#..\n...#..#...\n....##...."", end = "" "")
print(""\n...#..#...\n..#....#..\n\n"")

elif (c == ""Y""):
print(""..#....#..\n...#..#...\n....##...."", end = "" "")
print(""\n....##....\n....##....\n\n"")

elif (c == ""Z""):
print(""..######..\n......#...\n.....#...."", end = "" "")
print(""\n....#.....\n..######..\n\n"")

elif (c == "" ""):
print(""..........\n..........\n.........."", end = "" "")
print(""\n..........\n\n"")

elif (c == "".""):
print(""----..----\n\n"")","def solution(n):
    if n == 1:
        return 1
    else:
        return n * solution(n-1)

print(solution(5))

""""""

def solution(n):
    if n == 1:
        return 1
    else:
        return n * solution(n-1)

print(solution(5))"
2421,Write a Python Program to Generate Random binary string,"# Python program for random
# binary string generation


import random


# Function to create the
# random binary string
def rand_key(p):

# Variable to store the
# string
key1 = """"

# Loop to find the string
# of desired length
for i in range(p):

# randint function to generate
# 0, 1 randomly and converting
# the result into str
temp = str(random.randint(0, 1))

# Concatenatin the random 0, 1
# to the final result
key1 += temp

return(key1)

# Driver Code
n = 7
str1 = rand_key(n)
print(""Desired length random binary string is: "", str1)","import random

def generate_random_binary_string(length):
    binary_string = ''
    for i in range(length):
        binary_string += str(random.randint(0,1))
    return binary_string

print(generate_random_binary_string(5))

""""""

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(s):
    # Write your code here"
2422,"Write a Python program to Count Uppercase, Lowercase, special character and numeric values using Regex","import re


string = ""ThisIsGeeksforGeeks !, 123""

# Creating separate lists using
# the re.findall() method.
uppercase_characters = re.findall(r""[A-Z]"", string)
lowercase_characters = re.findall(r""[a-z]"", string)
numerical_characters = re.findall(r""[0-9]"", string)
special_characters = re.findall(r""[, .!?]"", string)

print(""The no. of uppercase characters is"", len(uppercase_characters))
print(""The no. of lowercase characters is"", len(lowercase_characters))
print(""The no. of numerical characters is"", len(numerical_characters))
print(""The no. of special characters is"", len(special_characters))","import re

def count_upper(string):
    count = 0
    for i in string:
        if i.isupper():
            count += 1
    return count

def count_lower(string):
    count = 0
    for i in string:
        if i.islower():
            count += 1
    return count

def count_special(string):
    count = 0
    for i in string:
        if i.isdigit"
2423,Count the number of white spaces in a Sentence,"
str=input(""Enter the String:"")
count = 0
for i in range(len(str)):
  if str[i] == ' ':
    count+=1
print(""Number of white space in a string are "",count)","def count_spaces(sentence):
    count = 0
    for i in sentence:
        if i =='':
            count += 1
    return count

print(count_spaces(""This is a sentence""))

""""""

def count_spaces(sentence):
    count = 0
    for i in sentence:
        if i =='':
            count += 1
    return count

print(count_spaces(""This is a sentence""))

""""""

def count_sp"
2424,Find the nth term in the Fibonacci series using Recursion,"def NthFibonacciNumber(n):  if n==0:    return 0  elif(n==1):    return 1  else:    return NthFibonacciNumber(n-1)+NthFibonacciNumber(n-2)n=int(input(""Enter the N value:""))print(""Nth Fibonacci Number is:"",NthFibonacciNumber(n))","def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

print(fib(5))

""""""

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(n):
    if n == 0:
        return 0
    elif"
2425,Search a specified integer in an array,"
arr=[]
temp=0
pos=0
size = int(input(""Enter the size of the array: ""))
print(""Enter the Element of the array:"")
for i in range(0,size):
  num = int(input())
  arr.append(num)
print(""Enter the search element:"")
ele=int(input())
print(""Array elements are:"")
for i in range(0,size):
  print(arr[i],end="" "")
for i in range(0,size):
  if arr[i] == ele:
      temp = 1
if temp==1:
  print(""\nElement found...."")
else:
  print(""\nElement not found...."")","def search(arr, n, x):
    for i in range(n):
        if arr[i] == x:
            return i
    return -1

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = len(arr)
x = 10

print(search(arr, n, x))

""""""

def search(arr, n, x):
    for i in range(n):
        if arr[i] == x:
            return"
2426,Convert Lowercase to Uppercase using the inbuilt function,"
str=input(""Enter the String(Lower case):"")
print(""Upper case String is:"", str.upper())","def convert_lowercase_to_uppercase(s):
    return s.upper()

print(convert_lowercase_to_uppercase(""hello""))

""""""

# Solution:

def convert_lowercase_to_uppercase(s):
    return s.upper()

print(convert_lowercase_to_uppercase(""hello""))"
2427,"
Please write a program using generator to print the numbers which can be divisible by 5 and 7 between 0 and n in comma separated form while n is input by console.
","
def NumGenerator(n):
    for i in range(n+1):
        if i%5==0 and i%7==0:
            yield i

n=int(raw_input())
values = []
for i in NumGenerator(n):
    values.append(str(i))

print "","".join(values)


","def solution(n):
    for i in range(1, n+1):
        if i % 5 == 0 and i % 7 == 0:
            print(i, end="" "")

if __name__ == '__main__':
    n = int(input())
    solution(n)"
2428,Python Program to Search for an Element in the Linked List without using Recursion,"class Node:
    def __init__(self, data):
       self.data = data
       self.next = None

class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None

    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next

    def display(self):
        current = self.head
        while current is not None:
            print(current.data, end = ' ')
            current = current.next

    def find_index(self, key):
        current = self.head

        index = 0
        while current:
            if current.data == key:
                return index
            current = current.next
            index = index + 1

        return -1

a_llist = LinkedList()
for data in [4, -3, 1, 0, 9, 11]:
    a_llist.append(data)
print('The linked list: ', end = '')
a_llist.display()
print()

key = int(input('What data item would you like to search for? '))
index = a_llist.find_index(key)
if index == -1:
    print(str(key) + ' was not found.')
else:
    print(str(key) + ' is at index ' + str(index) + '.')","def search(head, element):
    if head is None:
        return False
    if head.data == element:
        return True
    if head.data > element:
        return search(head.next, element)
    return search(head.next, element)

# Driver Code
if __name__ == '__main__':
    head = Node(10)
    head.next = Node(20)
    head.next.next = Node(30)
    head."
2429,Find the minimum element in the matrix,"import sys
# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

#compute the minimum element of the given 2d array
min=sys.maxsize
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if matrix[i][j]<=min:
            min=matrix[i][j]

# Display the smallest element of the given matrix
print(""The Minimum element of the Given 2d array is: "",min)","def minimum(arr):
    min = arr[0][0]
    for i in range(1, len(arr)):
        for j in range(len(arr[i])):
            if arr[i][j] < min:
                min = arr[i][j]
    return min

print(minimum([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]))

""""""

def minimum(arr):
    min = arr[0]["
2430,Program to convert Octal To Hexadecimal,"
i=0
octal=int(input(""Enter Octal number:""))
Hex=['0']*50
decimal = 0
sem = 0
#Octal to decimal covert
while octal!=0:
  decimal=decimal+(octal%10)*pow(8,sem);
  sem+=1
  octal=octal// 10
#Decimal to Hexadecimal
while decimal!=0:
  rem=decimal%16
  #Convert Integer to char
  if rem<10:
    Hex[i]=chr(rem+48)#48 Ascii=0
    i+=1
  else:
    Hex[i]=chr(rem+55) #55 Ascii=7
    i+=1
  decimal//=16

print(""Hexadecimal number is:"")
for j in range(i-1,-1,-1):
  print(Hex[j],end="""")",">>> from octal_to_hexadecimal import octal_to_hexadecimal
>>> octal_to_hexadecimal(10)
'0b1010'
>>> octal_to_hexadecimal(11)
'0b1011'
>>> octal_to_hexadecimal(12)
'0b1012'
>>> octal_to_hexadecimal(13)
'0b1013'
>>> octal_to_hexadecimal(14"
2431,Program to find square root of a number,"
import math
num=int(input(""Enter the Number:""))
print(""Square root of "",num,"" is : "",math.sqrt(num))","def sqrt(x):
    if x == 0:
        return 0
    else:
        return x**0.5

print(sqrt(4))

""""""

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the'solve' function below.
def solve(a, b):
    if b == 0:
        return a
    else:
        return solve(a, b//2) + 1

if __name__ =="
2432,Find the power of a number using recursion,"def Power(num1,num2):  if num2==0:    return 1  return num1*Power(num1, num2-1)num1=int(input(""Enter the base value:""))num2=int(input(""Enter the power value:""))print(""Power of Number Using Recursion is:"",Power(num1,num2))","def power(x, n):
    if n == 0:
        return 1
    elif n % 2 == 0:
        return x * power(x, n // 2)
    else:
        return x * power(x, n - 1)

print(power(2, 3))

""""""

def power(x, n):
    if n == 0:
        return 1
    elif n % 2 == 0:
        return x * power(x, n // 2)
    else:"
2433,Convert a decimal number to hexadecimal using recursion,"str3=""""def DecimalToHexadecimal(n):  global str3  if(n!=0):    rem = n % 16    if (rem < 10):      str3 += (chr)(rem + 48) # 48 Ascii = 0    else:      str3 += (chr)(rem + 55) #55 Ascii = 7    DecimalToHexadecimal(n // 16)  return str3n=int(input(""Enter the Decimal Value:""))str=DecimalToHexadecimal(n)print(""Hexadecimal Value of Decimal number is:"",''.join(reversed(str)))","def hex_to_dec(num):
    if num == 0:
        return 0
    else:
        return num * 16 + hex_to_dec(num // 16)

def dec_to_hex(num):
    if num == 0:
        return 0
    else:
        return num * 16 + dec_to_hex(num // 16)

def main():
    num = int(input(""Enter a decimal number: ""))
    print(""Hexadecimal representation of"
2434,Python Program to Generate Gray Codes using Recursion,"def get_gray_codes(n):
    """"""Return n-bit Gray code in a list.""""""
    if n == 0:
        return ['']
    first_half = get_gray_codes(n - 1)
    second_half = first_half.copy()

    first_half = ['0' + code for code in first_half]
    second_half = ['1' + code for code in reversed(second_half)]

    return first_half + second_half


n = int(input('Enter the number of bits: '))
codes = get_gray_codes(n)
print('All {}-bit Gray Codes:'.format(n))
print(codes)","def generate_gray_code(n):
    if n == 0:
        return []
    else:
        return generate_gray_code(n-1) + [n]

def generate_gray_code_recursive(n):
    if n == 0:
        return []
    else:
        return generate_gray_code_recursive(n-1) + [n] + generate_gray_code_recursive(n-1)

def generate_gray_code_recursive_2("
2435,Write a program to print the pattern,"
print(""Enter the row and column size:"");
row_size=int(input())
for out in range(1,row_size+1):
  for i in range(0,row_size):
    print(out,end="""")
  print(""\r"")","def pattern(n):
    if n == 1:
        return '*'
    else:
        return pattern(n-1) + '*' + pattern(n-2)

print(pattern(3))

""""""

# Solution:

def pattern(n):
    if n == 1:
        return '*'
    else:
        return pattern(n-1) + '*' + pattern(n-2)

print(pattern(3))"
2436,Python Program to Remove the Characters of Odd Index Values in a String,"def modify(string):  
  final = """"   
  for i in range(len(string)):  
    if i % 2 == 0:  
      final = final + string[i]  
  return final
string=raw_input(""Enter string:"")
print(""Modified string is:"")
print(modify(string))","def remove_odd_index(string, index):
    return string[:index] + string[index+1:]

def main():
    string = input(""Enter String: "")
    index = int(input(""Enter Index: ""))
    print(remove_odd_index(string, index))

if __name__ == ""__main__"":
    main()

""""""

def remove_odd_index(string, index):
    return string[:index] + string[index+1"
2437,Python Program to Generate all the Divisors of an Integer,"
n=int(input(""Enter an integer:""))
print(""The divisors of the number are:"")
for i in range(1,n+1):
    if(n%i==0):
        print(i)","def divisors(n):
    divisors = []
    for i in range(1, n + 1):
        if n % i == 0:
            divisors.append(i)
    return divisors

print(divisors(12))

""""""

def divisors(n):
    divisors = []
    for i in range(1, n + 1):
        if n % i == 0:
            divisors.append(i)"
2438,Program to print series 0 2 6 12 20 30 42 ...N,"n=int(input(""Enter the range of number(Limit):""))i=1while i<=n:  print((i*i)-i,end="" "")  i+=1","def series(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return series(n-1) + series(n-2)

print(series(5))

""""""

# Solution

def series(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return series(n-1) + series(n-2)"
2439,Python Program to Reverse a String Using Recursion,"def reverse(string):
    if len(string) == 0:
        return string
    else:
        return reverse(string[1:]) + string[0]
a = str(input(""Enter the string to be reversed: ""))
print(reverse(a))","def reverse_string(string):
    if len(string) == 0:
        return """"
    else:
        return string[-1] + reverse_string(string[:-1])

print(reverse_string(""hello""))

""""""

# Solution 1

def reverse_string(string):
    if len(string) == 0:
        return """"
    else:
        return string[-1] + reverse_string(string[:-1])

print(reverse_string(""hello""))

#"
2440,Python Program To Find the Smallest and Largest Elements in the Binary Search Tree,"class BSTNode:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
        self.parent = None

    def insert(self, node):
        if self.key > node.key:
            if self.left is None:
                self.left = node
                node.parent = self
            else:
                self.left.insert(node)
        elif self.key < node.key:
            if self.right is None:
                self.right = node
                node.parent = self
            else:
                self.right.insert(node)

    def search(self, key):
        if self.key > key:
            if self.left is not None:
                return self.left.search(key)
            else:
                return None
        elif self.key < key:
            if self.right is not None:
                return self.right.search(key)
            else:
                return None
        return self


class BSTree:
    def __init__(self):
        self.root = None

    def add(self, key):
        new_node = BSTNode(key)
        if self.root is None:
            self.root = new_node
        else:
            self.root.insert(new_node)

    def search(self, key):
        if self.root is not None:
            return self.root.search(key)

    def get_smallest(self):
        if self.root is not None:
            current = self.root
            while current.left is not None:
                current = current.left
            return current.key

    def get_largest(self):
        if self.root is not None:
            current = self.root
            while current.right is not None:
                current = current.right
            return current.key


bstree = BSTree()

print('Menu (this assumes no duplicate keys)')
print('add <key>')
print('smallest')
print('largest')
print('quit')

while True:
    do = input('What would you like to do? ').split()

    operation = do[0].strip().lower()
    if operation == 'add':
        key = int(do[1])
        bstree.add(key)
    if operation == 'smallest':
        smallest = bstree.get_smallest()
        print('Smallest element: {}'.format(smallest))
    if operation == 'largest':
        largest = bstree.get_largest()
        print('Largest element: {}'.format(largest))
    elif operation == 'quit':
        break","def find_smallest(arr):
    smallest = arr[0]
    for i in range(len(arr)):
        if arr[i] < smallest:
            smallest = arr[i]
    return smallest

def find_largest(arr):
    largest = arr[0]
    for i in range(len(arr)):
        if arr[i] > largest:
            largest = arr[i]
    return largest

def find_smallest_"
2441,Python Program to Implement Comb Sort,"def comb_sort(alist):
    def swap(i, j):
        alist[i], alist[j] = alist[j], alist[i]

    gap = len(alist)
    shrink = 1.3

    no_swap = False
    while not no_swap:
        gap = int(gap/shrink)

        if gap < 1:
            gap = 1
            no_swap = True
        else:
            no_swap = False

        i = 0
        while i + gap < len(alist):
            if alist[i] > alist[i + gap]:
                swap(i, i + gap)
                no_swap = False
            i = i + 1


alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
comb_sort(alist)
print('Sorted list: ', end='')
print(alist)","def combSort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(combSort(arr))

""""""

def combSort(arr):
    n = len(arr)"
2442,Check whether a given matrix is an identity matrix or not,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

# check Diagonal elements are 1 and rest elements are 0
point=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        # check for diagonals element
        if i == j and matrix[i][j] != 1:
            point=1
            break
        #check for rest elements
        elif i!=j and matrix[i][j]!=0:
            point=1
            break

if point==1:
    print(""Given Matrix is not an identity matrix."")
else:
    print(""Given Matrix is an identity matrix."")","def is_identity(matrix):
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j]!= 0:
                return False
    return True

print(is_identity([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))
print(is_identity([[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
2443,"Program to print series 1,22,333,4444...n","n=int(input(""Enter the range of number(Limit):""))for out in range(n+1):  for i in range(out):    print(out,end="""")  print(end="" "")","def series(n):
    if n == 1:
        return 1
    else:
        return n * series(n-1)

print(series(5))

""""""

# Solution

def series(n):
    if n == 1:
        return 1
    else:
        return n * series(n-1)

print(series(5))"
2444,Multiply two numbers without using multiplication(*) operator,"
num1=int(input(""Enter the First numbers :""))
num2=int(input(""Enter the Second number:""))
sum=0
for i in range(1,num1+1):
  sum=sum+num2
print(""The multiplication of "",num1,"" and "",num2,"" is "",sum)
","def multiply(x, y):
    return x * y

print(multiply(2, 3))

""""""

# Solution 1

def multiply(x, y):
    return x * y

print(multiply(2, 3))

# Solution 2

def multiply(x, y):
    return x * y

print(multiply(2, 3))

# Solution 3

def multiply(x, y):
    return x * y

print(mult"
2445,Program to count the number of digits in an integer.,"

'''Write
a Python programto count the number of digits in an integer. or

 Write a programtocount the
number of digits in an integer using
Python '''

n=int(input(""Enter a number:""))
count=0
while n>0:
 n=int(n/10)
 count+=1
print(""The number of digits in the number is"", count)


","def count_digits(n):
    count = 0
    while n > 0:
        count += 1
        n = n // 10
    return count

print(count_digits(123))

""""""

# Solution 1

def count_digits(n):
    count = 0
    while n > 0:
        count += 1
        n = n // 10
    return count

print(count_digits(123))

# Solution 2

def count_digits("
2446,"Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the keys only.
:","Solution
def printDict():
	d=dict()
	for i in range(1,21):
		d[i]=i**2
	for k in d.keys():	
		print k
		

printDict()


","def solution(n):
    d = {}
    for i in range(1, 21):
        d[i] = i**2
    return d

print(solution(5))

# Output:
# {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81"
2447,"
Assuming that we have some email addresses in the ""username@companyname.com"" format, please write program to print the company name of a given email address. Both user names and company names are composed of letters only.
","import re
emailAddress = raw_input()
pat2 = ""(\w+)@(\w+)\.(com)""
r2 = re.match(pat2,emailAddress)
print r2.group(2)




","def solution(email):
    email = email.split('@')
    if email[1].find('.')!= -1:
        return email[1].split('.')[0]
    else:
        return email[0]

print(solution(""john.doe@company.com""))
print(solution(""john.doe2001@"
2448,Remove duplicate elements in an array ,"
arr=[]
size = int(input(""Enter the size of the array: ""))
print(""Enter the Element of the array:"")
for i in range(0,size):
  num = int(input())
  arr.append(num)
arr.sort()
j=0
#Remove duplicate element
for i in range(0, size-1):
  if arr[i] != arr[i + 1]:
    arr[j]=arr[i]
    j+=1
arr[j] = arr[size - 1]
j+=1
print(""After removing duplicate element array is"")
for i in range(0, j):
  print(arr[i],end="" "")","def removeDuplicates(arr):
    # Write your code here
    newArr = []
    for i in range(len(arr)):
        if arr[i] not in newArr:
            newArr.append(arr[i])
    return newArr

# Driver code
arr = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8"
2449,Python Program to Find the Binary Equivalent of a Number without Using Recursion,"n=int(input(""Enter a number: ""))
a=[]
while(n>0):
    dig=n%2
    a.append(dig)
    n=n//2
a.reverse()
print(""Binary Equivalent is: "")
for i in a:
    print(i,end="" "")","def binary_equivalent(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return binary_equivalent(n//2) + binary_equivalent(n//2 + 1)

n = int(input(""Enter the number to find the binary equivalent: ""))
print(binary_equivalent(n))

""""""

# Solution 1

def binary_equivalent(n):
    if n == 0:"
2450,"Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print all values except the first 5 elements in the list.
:","Solution
def printList():
	li=list()
	for i in range(1,21):
		li.append(i**2)
	print li[5:]
		

printList()


","def square_list(n):
    for i in range(1, 21):
        yield i**2

print(square_list(1))
print(square_list(2))
print(square_list(3))
print(square_list(4))
print(square_list(5))
print(square_list(6))
print(square_"
2451,Python Program to Find the GCD of Two Numbers,"import fractions
a=int(input(""Enter the first number:""))
b=int(input(""Enter the second number:""))
print(""The GCD of the two numbers is"",fractions.gcd(a,b))","def gcd(x, y):
    if x > y:
        x, y = y, x
    while y:
        x, y = y, x % y
    return x

def gcd_recursive(x, y):
    if x > y:
        x, y = y, x
    if x == 0:
        return y
    return gcd_recursive(x % y, y)

def gcd_iterative(x, y):
    while x!= 0"
2452,Python Program to Implement Floyd-Warshall Algorithm,"class Graph:
    def __init__(self):
        # dictionary containing keys that map to the corresponding vertex object
        self.vertices = {}

    def add_vertex(self, key):
        """"""Add a vertex with the given key to the graph.""""""
        vertex = Vertex(key)
        self.vertices[key] = vertex

    def get_vertex(self, key):
        """"""Return vertex object with the corresponding key.""""""
        return self.vertices[key]

    def __contains__(self, key):
        return key in self.vertices

    def add_edge(self, src_key, dest_key, weight=1):
        """"""Add edge from src_key to dest_key with given weight.""""""
        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)

    def does_edge_exist(self, src_key, dest_key):
        """"""Return True if there is an edge from src_key to dest_key.""""""
        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])

    def __len__(self):
        return len(self.vertices)

    def __iter__(self):
        return iter(self.vertices.values())


class Vertex:
    def __init__(self, key):
        self.key = key
        self.points_to = {}

    def get_key(self):
        """"""Return key corresponding to this vertex object.""""""
        return self.key

    def add_neighbour(self, dest, weight):
        """"""Make this vertex point to dest with given edge weight.""""""
        self.points_to[dest] = weight

    def get_neighbours(self):
        """"""Return all vertices pointed to by this vertex.""""""
        return self.points_to.keys()

    def get_weight(self, dest):
        """"""Get weight of edge from this vertex to dest.""""""
        return self.points_to[dest]

    def does_it_point_to(self, dest):
        """"""Return True if this vertex points to dest.""""""
        return dest in self.points_to


def floyd_warshall(g):
    """"""Return dictionaries distance and next_v.

    distance[u][v] is the shortest distance from vertex u to v.
    next_v[u][v] is the next vertex after vertex v in the shortest path from u
    to v. It is None if there is no path between them. next_v[u][u] should be
    None for all u.

    g is a Graph object which can have negative edge weights.
    """"""
    distance = {v:dict.fromkeys(g, float('inf')) for v in g}
    next_v = {v:dict.fromkeys(g, None) for v in g}

    for v in g:
        for n in v.get_neighbours():
            distance[v][n] = v.get_weight(n)
            next_v[v][n] = n

    for v in g:
         distance[v][v] = 0
         next_v[v][v] = None

    for p in g: 
        for v in g:
            for w in g:
                if distance[v][w] > distance[v][p] + distance[p][w]:
                    distance[v][w] = distance[v][p] + distance[p][w]
                    next_v[v][w] = next_v[v][p]

    return distance, next_v


def print_path(next_v, u, v):
    """"""Print shortest path from vertex u to v.

    next_v is a dictionary where next_v[u][v] is the next vertex after vertex u
    in the shortest path from u to v. It is None if there is no path between
    them. next_v[u][u] should be None for all u.

    u and v are Vertex objects.
    """"""
    p = u
    while (next_v[p][v]):
        print('{} -> '.format(p.get_key()), end='')
        p = next_v[p][v]
    print('{} '.format(v.get_key()), end='')


g = Graph()
print('Menu')
print('add vertex <key>')
print('add edge <src> <dest> <weight>')
print('floyd-warshall')
print('display')
print('quit')

while True:
    do = input('What would you like to do? ').split()

    operation = do[0]
    if operation == 'add':
        suboperation = do[1]
        if suboperation == 'vertex':
            key = int(do[2])
            if key not in g:
                g.add_vertex(key)
            else:
                print('Vertex already exists.')
        elif suboperation == 'edge':
            src = int(do[2])
            dest = int(do[3])
            weight = int(do[4])
            if src not in g:
                print('Vertex {} does not exist.'.format(src))
            elif dest not in g:
                print('Vertex {} does not exist.'.format(dest))
            else:
                if not g.does_edge_exist(src, dest):
                    g.add_edge(src, dest, weight)
                else:
                    print('Edge already exists.')

    elif operation == 'floyd-warshall':
        distance, next_v = floyd_warshall(g)
        print('Shortest distances:')
        for start in g:
            for end in g:
                if next_v[start][end]:
                    print('From {} to {}: '.format(start.get_key(),
                                                    end.get_key()),
                            end = '')
                    print_path(next_v, start, end)
                    print('(distance {})'.format(distance[start][end]))

    elif operation == 'display':
        print('Vertices: ', end='')
        for v in g:
            print(v.get_key(), end=' ')
        print()

        print('Edges: ')
        for v in g:
            for dest in v.get_neighbours():
                w = v.get_weight(dest)
                print('(src={}, dest={}, weight={}) '.format(v.get_key(),
                                                             dest.get_key(), w))
        print()

    elif operation == 'quit':
        break","def floyd_warshall(graph):
    n = len(graph)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if graph[i][j] > 0:
                    graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j])

graph = [[0, 4, 0, 0, 0],
         [4, 0, 8, 0, 0],"
2453,Find the maximum element in the matrix,"import sys
# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

#compute the maximum element of the given 2d array
max=-sys.maxsize-1
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if matrix[i][j]>=max:
            max=matrix[i][j]

# Display the largest element of the given matrix
print(""The Maximum element of the Given 2d array is: "",max)","def max_element(matrix):
    max_element = 0
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j] > max_element:
                max_element = matrix[i][j]
    return max_element

print(max_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))

""""""

def max_element(matrix):
    max"
2454,Program to remove all numbers from a String,"
str=input(""Enter the String:"")
str2 = []
i = 0
while i < len(str):
  ch = str[i]
  if not(ch >= '0' and ch <= '9'):
    str2.append(ch)
  i += 1
Final_String = ''.join(str2)
print(""After removing numbers string is:"",Final_String)","def remove_numbers(str):
    # Your code here
    return str.replace('0', '')

print(remove_numbers('123456789'))

""""""

def remove_numbers(str):
    # Your code here
    return str.replace('0', '')

print(remove_numbers('123456789'))

""""""

def remove_numbers(str):
    # Your code here
    return str.replace('0', '')

print(remove"
2455,Write a program to Display your name and some Message ,"
print(""Sourav Patra"")
print(""Welcome to Python"")
print(""Welcome to our page www.csinfo360.com"")
print(""Programming Practice"")
print(""Thank you!"")
","""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution 23"
2456,Program to check two matrix are equal or not,"# Get size of 1st matrix
row_size=int(input(""Enter the row Size Of the 1st Matrix:""))
col_size=int(input(""Enter the columns Size Of the 1st Matrix:""))

# Get size of 2nd matrix
row_size1=int(input(""Enter the row Size Of the 1st Matrix:""))
col_size1=int(input(""Enter the columns Size Of the 2nd Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the 1st Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]
# Taking input of the 2nd matrix
print(""Enter the 2nd Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])

# Compare two matrices
point=0
if row_size==row_size1 and col_size==col_size1:
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j] != matrix1[i][j]:
                point=1
                break
else:
    print(""Two matrices are not equal."")
    exit(0)

if point==1:
    print(""Two matrices are not equal."")
else:
    print(""Two matrices are equal."")","def check_matrix(matrix1, matrix2):
    if len(matrix1)!= len(matrix2):
        return False
    for i in range(len(matrix1)):
        for j in range(len(matrix1[0])):
            if matrix1[i][j]!= matrix2[i][j]:
                return False
    return True

print(check_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]"
2457,Program to find the nth Hashed number,"
print(""Enter the Nth value:"")
rangenumber=int(input())
num = 1
c = 0
letest = 0
while (c != rangenumber):
   num2=num
   num1=num
   sum=0
   while(num1!=0):
    rem=num1%10
    num1=num1//10
    sum=sum+rem
   if(num2%sum==0):
     c+=1
     letest=num
   num = num + 1
print(rangenumber,""th Harshad number is "", letest);



","def nthHashedNumber(n):
    # Your code here
    pass

""""""

def nthHashedNumber(n):
    # Your code here
    pass

""""""

def nthHashedNumber(n):
    # Your code here
    pass

""""""

def nthHashedNumber(n):
    # Your code here
    pass

""""""

def nthHashedNumber(n):
    # Your code here
    pass

""""""

def nthH"
2458,Program to print series 1 9 17 33 49 73 97 ...N,"n=int(input(""Enter the range of number(Limit):""))i=1pr=0while i<=n:  if(i%2==0):    pr=2*pow(i, 2) +1    print(pr,end="" "")  else:    pr = 2*pow(i, 2) - 1    print(pr, end="" "")  i+=1","def series(n):
    if n == 1:
        return 1
    else:
        return n * series(n-1)

print(series(9))

""""""

# Solution

def series(n):
    if n == 1:
        return 1
    else:
        return n * series(n-1)

print(series(9))"
2459,Program to convert Decimal to Hexadecimal,"
i=0
dec=int(input(""Enter Decimal number: ""))
Hex=['0']*50
while dec!=0:
  rem=dec%16;
  #Convert Integer to char
  if rem<10:
    Hex[i]=chr(rem+48)#48 Ascii=0
    i+=1
  else:
    Hex[i]=chr(rem+55) #55 Ascii=7
    i+=1
  dec//=16
print(""Hexadecimal number is:"")
for j in range(i-1,-1,-1):
  print(Hex[j],end="""")","def convert(dec):
    return hex(dec)

print(convert(123))

""""""

# Solution 1

def convert(dec):
    return hex(dec)

print(convert(123))

# Solution 2

def convert(dec):
    return hex(dec).upper()

print(convert(123))

# Solution 3

def convert(dec):
    return hex(dec).upper()

print(convert(123))

# Solution 4"
2460,Python Program to Print Largest Even and Largest Odd Number in a List,"
n=int(input(""Enter the number of elements to be in the list:""))
b=[]
for i in range(0,n):
    a=int(input(""Element: ""))
    b.append(a)
c=[]
d=[]
for i in b:
    if(i%2==0):
        c.append(i)
    else:
        d.append(i)
c.sort()
d.sort()
count1=0
count2=0
for k in c:
    count1=count1+1
for j in d:
    count2=count2+1
print(""Largest even number:"",c[count1-1])
print(""Largest odd number"",d[count2-1])","def solution(arr):
    max_even = 0
    max_odd = 0
    for i in arr:
        if i % 2 == 0:
            max_even += i
        else:
            max_odd += i
    if max_even > max_odd:
        return max_even
    else:
        return max_odd

print(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print("
2461,"Program to print series 2,15,41,80...n","
print(""Enter the range of number(Limit):"")
n=int(input())
i=1
value=2
while(i<=n):
  print(value,end="" "")
  value+=i*13
  i+=1","def series(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return series(n-1) + series(n-2)

print(series(5))

""""""

# Solution

def series(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return series(n-1) + series(n-2)"
2462,"Python Program to Construct a Tree & Perform Insertion, Deletion, Display","class Tree:
    def __init__(self, data=None, parent=None):
        self.key = data
        self.children = []
        self.parent = parent

    def set_root(self, data):
        self.key = data

    def add(self, node):
        self.children.append(node)

    def search(self, key):
        if self.key == key:
            return self
        for child in self.children:
            temp = child.search(key)
            if temp is not None:
                return temp
        return None

    def remove(self):
        parent = self.parent
        index = parent.children.index(self)
        parent.children.remove(self)
        for child in reversed(self.children):
            parent.children.insert(index, child)
            child.parent = parent

    def bfs_display(self):
        queue = [self]
        while queue != []:
            popped = queue.pop(0)
            for child in popped.children:
                queue.append(child)
            print(popped.key, end=' ')


tree = None

print('Menu (this assumes no duplicate keys)')
print('add <data> at root')
print('add <data> below <data>')
print('remove <data>')
print('display')
print('quit')

while True:
    do = input('What would you like to do? ').split()

    operation = do[0].strip().lower()
    if operation == 'add':
        data = int(do[1])
        new_node = Tree(data)
        suboperation = do[2].strip().lower() 
        if suboperation == 'at':
            tree = new_node
        elif suboperation == 'below':
            position = do[3].strip().lower()
            key = int(position)
            ref_node = None
            if tree is not None:
                ref_node = tree.search(key)
            if ref_node is None:
                print('No such key.')
                continue
            new_node.parent = ref_node
            ref_node.add(new_node)

    elif operation == 'remove':
        data = int(do[1])
        to_remove = tree.search(data)
        if tree == to_remove:
            if tree.children == []:
                tree = None
            else:
                leaf = tree.children[0]
                while leaf.children != []:
                    leaf = leaf.children[0]
                leaf.parent.children.remove(leaf)
                leaf.parent = None
                leaf.children = tree.children
                tree = leaf
        else:
            to_remove.remove()

    elif operation == 'display':
        if tree is not None:
            print('BFS traversal display: ', end='')
            tree.bfs_display()
            print()
        else:
            print('Tree is empty.')

    elif operation == 'quit':
        break","def insert(root, key):
    if root is None:
        return Node(key)
    if key < root.data:
        root.left = insert(root.left, key)
    elif key > root.data:
        root.right = insert(root.right, key)
    else:
        return root
    return root

def delete(root, key):
    if root is None:
        return None
    if key < root.data:
        root"
2463,Python Program to Reverse only First N Elements of a Linked List,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None

    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next

    def display(self):
        current = self.head
        while current:
            print(current.data, end = ' ')
            current = current.next


def reverse_llist(llist, n):
    if n == 0:
        return
    before = None
    current = llist.head
    if current is None:
        return
    after = current.next
    for i in range(n):
        current.next = before
        before = current
        current = after
        if after is None:
            break
        after = after.next
    llist.head.next = current
    llist.head = before


a_llist = LinkedList()

data_list = input('Please enter the elements in the linked list: ').split()
for data in data_list:
    a_llist.append(int(data))
n = int(input('Enter the number of elements you want to reverse in the list: '))

reverse_llist(a_llist, n)

print('The new list: ')
a_llist.display()","def reverse(head, n):
    if head is None:
        return None
    if n == 1:
        return head
    return reverse(head.next, n-1)

# Node class
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# Linked List class
class LinkedList:
    def __init__(self):
        self.head = None
    
    # insert at the beginning"
2464,Python Program to Solve Rod Cutting Problem using Dynamic Programming with Memoization,"def cut_rod(p, n):
    """"""Take a list p of prices and the rod length n and return lists r and s.
    r[i] is the maximum revenue that you can get and s[i] is the length of the
    first piece to cut from a rod of length i.""""""
    # r[i] is the maximum revenue for rod length i
    # r[i] = -1 means that r[i] has not been calculated yet
    r = [-1]*(n + 1)

    # s[i] is the length of the initial cut needed for rod length i
    # s[0] is not needed
    s = [-1]*(n + 1)

    cut_rod_helper(p, n, r, s)

    return r, s


def cut_rod_helper(p, n, r, s):
    """"""Take a list p of prices, the rod length n, a list r of maximum revenues
    and a list s of initial cuts and return the maximum revenue that you can get
    from a rod of length n.

    Also, populate r and s based on which subproblems need to be solved.
    """"""
    if r[n] >= 0:
        return r[n]

    if n == 0:
        q = 0
    else:
        q = -1
        for i in range(1, n + 1):
            temp = p[i] + cut_rod_helper(p, n - i, r, s)
            if q < temp:
                q = temp
                s[n] = i
    r[n] = q

    return q


n = int(input('Enter the length of the rod in inches: '))

# p[i] is the price of a rod of length i
# p[0] is not needed, so it is set to None
p = [None]
for i in range(1, n + 1):
    price = input('Enter the price of a rod of length {} in: '.format(i))
    p.append(int(price))

r, s = cut_rod(p, n)
print('The maximum revenue that can be obtained:', r[n])
print('The rod needs to be cut into length(s) of ', end='')
while n > 0:
    print(s[n], end=' ')
    n -= s[n]","def rodCutting(n, d, memo={}):
    if n in memo:
        return memo[n]
    if n == 0:
        return 0
    if n == 1:
        return 1
    if n == 2:
        return 2
    if n == 3:
        return 3
    if n == 4:
        return 4
    if n == 5:
        return 5
    if n == 6:
        return 6
    if n == 7:"
2465,Python Program to Count the Number of Vowels Present in a String using Sets,"s=raw_input(""Enter string:"")
count = 0
vowels = set(""aeiou"")
for letter in s:
    if letter in vowels:
        count += 1
print(""Count of the vowels is:"")
print(count)","def count_vowels(string):
    vowels = set(['a', 'e', 'i', 'o', 'u'])
    count = 0
    for char in string:
        if char in vowels:
            count += 1
    return count

print(count_vowels(""Python is a high-level general-purpose programming language""
                   "" written in C++ and Fortran.""))

""""""

# Solution

def count_vowels("
2466,Find out all Disarium numbers present within a given range,"
import math
print(""Enter a range:"")
range1=int(input())
range2=int(input())
print(""Disarium numbers between "",range1,"" and "",range2,"" are: "")
for i in range(range1,range2+1):
  num =i
  c = 0
  while num != 0:
    num //= 10
    c += 1
  num = i
  sum = 0
  while num != 0:
    rem = num % 10
    sum += math.pow(rem, c)
    num //= 10
    c -= 1
  if sum == i:
    print(i,end="" "")","def solution(low, high):
    for i in range(low, high+1):
        if i < 0:
            continue
        if i % 2 == 0:
            print(i, end="" "")
        else:
            print(i, end="" "")
            print(i, end="" "")
            print(i, end="" "")
            print(i, end="" "")
            print(i, end="" "")
            print(i, end="" "")
            print("
2467,Python Program to Modify the Linked List such that All Even Numbers appear before all the Odd Numbers in the Modified Linked List,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None
        self.last_node = None

    def append(self, data):
        if self.last_node is None:
            self.head = Node(data)
            self.last_node = self.head
        else:
            self.last_node.next = Node(data)
            self.last_node = self.last_node.next

    def display(self):
        current = self.head
        while current:
            print(current.data, end = ' ')
            current = current.next

    def get_node(self, index):
        current = self.head
        for i in range(index):
            if current is None:
                return None
            current = current.next
        return current

    def get_prev_node(self, ref_node):
        current = self.head
        while (current and current.next != ref_node):
            current = current.next
        return current

    def insert_at_beg(self, new_node):
        if self.head is None:
            self.head = new_node
        else:
            new_node.next = self.head
            self.head = new_node

    def remove(self, node):
        prev_node = self.get_prev_node(node)
        if prev_node is None:
            self.head = self.head.next
        else:
            prev_node.next = node.next


def move_even_before_odd(llist):
    current = llist.head
    while current:
        temp = current.next
        if current.data % 2 == 0:
            llist.remove(current)
            llist.insert_at_beg(current)
        current = temp


a_llist = LinkedList()

data_list = input('Please enter the elements in the linked list: ').split()
for data in data_list:
    a_llist.append(int(data))

move_even_before_odd(a_llist)

print('The new list: ')
a_llist.display()","def mod_even_odd(head):
    odd_list = []
    even_list = []
    odd_list_index = 0
    even_list_index = 0
    while head:
        if head.data % 2 == 0:
            even_list.append(head.data)
            even_list_index += 1
        else:
            odd_list.append(head.data)
            odd_list_index +="
2468,Program to display a lower triangular matrix,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

#Display Lower triangular matrix
print(""Lower Triangular Matrix is:\n"")
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        if i<j:
            print(""0 "",end="""")
        else:
            print(matrix[i][j],end="" "")
    print()","import numpy as np

A = np.array([[1, 2, 3, 4, 5],
              [6, 7, 8, 9, 10],
              [11, 12, 13, 14, 15],
              [16, 17, 18, 19, 20]])

print(A)

# Solution:

# A = np.array([[1, 2, 3, 4, 5],
#               [6, 7, 8, 9, 10],
#               [11, 12, 13, 14,"
2469,Print the Inverted Full Pyramid Star Pattern,"
row_size=int(input(""Enter the row size:""))
star_print=row_size*2-1
for out in range(row_size,0,-1):
  for inn in range(row_size,out,-1):
    print("" "",end="""")
  for p in range(0,star_print):
    print(""*"",end="""")
  star_print-=2
  print(""\r"")","def invert_full_pyramid(n):
    # Your code here
    return n

n = int(input())
print(invert_full_pyramid(n))

""""""

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(n):
    # Write your code here
    if n == 1:
        return 1
    if n == 2:
        return 2
    if n == 3:"
2470,Program to print a butterfly shape star pattern,"row_size=int(input(""Enter the row size:""))print_control_x=1for out in range(1,row_size+1):  for inn in range(1,row_size+1):    if inn<=print_control_x or inn>=row_size-print_control_x+1:      print(""*"",end="""")    else:      print("" "", end="""")  if out <= row_size // 2:    print_control_x+=1  else:    print_control_x-=1  print(""\r"")","python butterfly_pattern.py

""""""

import turtle

def draw_pattern(t, n):
    """"""
    Draws a butterfly shape pattern of n circles.
    """"""
    for i in range(n):
        t.circle(100)
        t.circle(100)
        t.circle(100)
        t.circle(100)
        t.circle(100)
        t.circle(100)
        t.circle(100)
        t.circle(100)
        t.circle"
2471,Python Program to Implement Fibonacci Heap,"import math

class FibonacciTree:
    def __init__(self, key):
        self.key = key
        self.children = []
        self.order = 0

    def add_at_end(self, t):
        self.children.append(t)
        self.order = self.order + 1


class FibonacciHeap:
    def __init__(self):
        self.trees = []
        self.least = None
        self.count = 0

    def insert(self, key):
        new_tree = FibonacciTree(key)
        self.trees.append(new_tree)
        if (self.least is None or key < self.least.key):
            self.least = new_tree
        self.count = self.count + 1

    def get_min(self):
        if self.least is None:
            return None
        return self.least.key

    def extract_min(self):
        smallest = self.least
        if smallest is not None:
            for child in smallest.children:
                self.trees.append(child)
            self.trees.remove(smallest)
            if self.trees == []:
                self.least = None
            else:
                self.least = self.trees[0]
                self.consolidate()
            self.count = self.count - 1
            return smallest.key

    def consolidate(self):
        aux = (floor_log2(self.count) + 1)*[None]

        while self.trees != []:
            x = self.trees[0]
            order = x.order
            self.trees.remove(x)
            while aux[order] is not None:
                y = aux[order]
                if x.key > y.key:
                    x, y = y, x
                x.add_at_end(y)
                aux[order] = None
                order = order + 1
            aux[order] = x

        self.least = None
        for k in aux:
            if k is not None:
                self.trees.append(k)
                if (self.least is None
                    or k.key < self.least.key):
                    self.least = k


def floor_log2(x):
    return math.frexp(x)[1] - 1


fheap = FibonacciHeap()

print('Menu')
print('insert <data>')
print('min get')
print('min extract')
print('quit')

while True:
    do = input('What would you like to do? ').split()

    operation = do[0].strip().lower()
    if operation == 'insert':
        data = int(do[1])
        fheap.insert(data)
    elif operation == 'min':
        suboperation = do[1].strip().lower()
        if suboperation == 'get':
            print('Minimum value: {}'.format(fheap.get_min()))
        elif suboperation == 'extract':
            print('Minimum value removed: {}'.format(fheap.extract_min()))

    elif operation == 'quit':
        break","def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

def fib_heap(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib_heap(n-1) + fib_heap(n-2)

def fib_heap_rec(n):"
2472,Program to Find sum of series 1+(1+3)+(1+3+5)+....+N,"
print(""Enter the range of number(Limit):"")
n = int(input())
i = 1
sum = 0
while (i <= n):
  for j in range(1, i + 1,2):
    sum+=j
  i += 2
print(""The sum of the series = "", sum)","def sum_series(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return sum_series(n-1) + sum_series(n-2) + sum_series(n-3)

print(sum_series(5))

""""""

# Solution

def sum_series(n):
    if n == 0:
        return 0
    elif n =="
2473,Program to Find nth Neon Number ,"
rangenumber=int(input(""Enter a Nth Number:""))
c = 0
letest = 0
num = 1
while c != rangenumber:
    sqr = num * num
    # Sum of digit
    sum = 0
    while sqr != 0:
      rem = sqr % 10
      sum += rem
      sqr //= 10

    if sum == num:
      c+=1
      letest = num

    num = num + 1
print(rangenumber,""th Magic number is "",latest)","def solution(n):
    if n == 1:
        return 1
    else:
        return n * solution(n-1)

""""""

def solution(n):
    if n == 1:
        return 1
    else:
        return n * solution(n-1)

print(solution(5))

""""""

def solution(n):
    if n == 1:
        return 1
    else:
        return n * solution(n-1)

print(solution(5"
2474,Python Program to Take the Temperature in Celcius and Covert it to Farenheit,"
celsius=int(input(""Enter the temperature in celcius:""))
f=(celsius*1.8)+32
print(""Temperature in farenheit is:"",f)","import math

def convert(C):
    F = C * 9/5 + 32
    return F

def main():
    C = int(input(""Enter the temperature in Celcius: ""))
    print(""The temperature in Farenheit is: "", convert(C))

if __name__ == ""__main__"":
    main()"
2475,Find all non repeated characters in a string,"str=input(""Enter Your String:"")arr=[0]*256for i in range(len(str)):  if str[i]!=' ':    num=ord(str[i])    arr[num]+=1ch=' 'print(""All Non-repeating character in a given string is: "",end="""")for i in range(len(str)):    if arr[ord(str[i])] ==1:      ch=str[i]      print(ch,end="" "")","def solution(s):
    # Write your code here
    # return [i for i in range(len(s)) if s[i]!= s[i+1]]
    return [i for i in range(len(s)) if s[i]!= s[i+1]]

# print(solution(""abcabcbb""))
# print(solution(""bbbbb""))
# print(solution(""pwwkew""))
# print(solution(""abba""))
# print(solution(""ac""))
#"
2476,Print Fibonacci Series using recursion,"def FibonacciSeries(n):  if n==0:    return 0  elif(n==1):    return 1  else:    return FibonacciSeries(n-1)+FibonacciSeries(n-2)n=int(input(""Enter the Limit:""))print(""All Fibonacci Numbers in the given Range are:"")for i in range(0,n):  print(FibonacciSeries(i),end="" "")","def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

print(fib(5))

""""""

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(meal_cost, tip_percent, tax_percent):
    tip_percent = tip_percent/100"
2477,Write a program that computes the value of a+aa+aaa+aaaa with a given digit as the value of a.,"a = raw_input()
n1 = int( ""%s"" % a )
n2 = int( ""%s%s"" % (a,a) )
n3 = int( ""%s%s%s"" % (a,a,a) )
n4 = int( ""%s%s%s%s"" % (a,a,a,a) )
print n1+n2+n3+n4
","a = int(input(""Enter a number: ""))

if a == 0:
    print(""The number is 0"")
elif a == 1:
    print(""The number is 1"")
elif a == 2:
    print(""The number is 2"")
elif a == 3:
    print(""The number is 3"")
elif a == 4:
    print(""The number is 4"")
elif a == 5:
    print"
2478,Python Program to Find the LCM of Two Numbers,"a=int(input(""Enter the first number:""))
b=int(input(""Enter the second number:""))
if(a>b):
    min1=a
else:
    min1=b
while(1):
    if(min1%a==0 and min1%b==0):
        print(""LCM is:"",min1)
        break
    min1=min1+1","def lcm(x, y):
    if x > y:
        smaller = x
    else:
        smaller = y
    for i in range(1, smaller + 1):
        if (x % i == 0) and (y % i == 0):
            lcm = i
    return lcm

print(lcm(12, 24))

""""""

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the lcm"
2479,Convert temperature from Fahrenheit to Celsius ,"
fahrenheit=int(input(""Enter degree in fahrenheit: ""))
celsius= (fahrenheit-32)*5/9;
print(""Degree in celsius is"",celsius)","def convert_fahrenheit_to_celsius(fahrenheit):
    celsius = (fahrenheit - 32) * 5 / 9
    return celsius

print(convert_fahrenheit_to_celsius(100))

""""""

# Solution

def convert_fahrenheit_to_celsius(fahrenheit):
    celsius = (fahrenheit - 32) * 5 / 9
    return celsius

print(convert_fahrenheit_to_cel"
2480,Write a program that accepts a sentence and calculate the number of upper case letters and lower case letters.,"s = raw_input()
d={""UPPER CASE"":0, ""LOWER CASE"":0}
for c in s:
    if c.isupper():
        d[""UPPER CASE""]+=1
    elif c.islower():
        d[""LOWER CASE""]+=1
    else:
        pass
print ""UPPER CASE"", d[""UPPER CASE""]
print ""LOWER CASE"", d[""LOWER CASE""]
","s = input(""Enter a sentence: "")
countUpper = 0
countLower = 0
for i in s:
    if i.isupper():
        countUpper += 1
    elif i.islower():
        countLower += 1
print(""Number of Upper case letters: "", countUpper)
print(""Number of Lower case letters: "", countLower)

""""""

# Solution:

s = input(""Enter a sentence: "")
countUpper"
2481,Program to Find subtraction of two matrices,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

matrix1=[]
# Taking input of the 2nd matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix1.append([int(j) for j in input().split()])

# Compute Subtraction of two matrices
sub_matrix=[[0 for i in range(col_size)] for i in range(row_size)]
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        sub_matrix[i][j]=matrix[i][j]-matrix1[i][j]

# display the Subtraction of two matrices
print(""Subtraction of the two Matrices is:"")
for m in sub_matrix:
    print(m)","def subtract(a,b):
    return a-b

a = [1,2,3,4,5]
b = [6,7,8,9,10]
print(subtract(a,b))

""""""

# Solution:

def subtract(a,b):
    return a-b

a = [1,2,3,4,5]
b = [6,7,8,9,10]
print(subtract(a,b))

"""""""
2482,Python Program to Find the Length of a List Using Recursion,"def length(lst):
    if not lst:
        return 0
    return 1 + length(lst[1::2]) + length(lst[2::2])
a=[1,2,3]
print(""Length of the string is: "")
print(a)","def length(lst):
    if len(lst) == 0:
        return 0
    else:
        return 1 + length(lst[1:])

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(length(lst))

""""""

# Python Program to Find the Length of a List Using Iterative Method

def length(lst):
    if len(lst) == 0:
        return 0"
2483,Write a program which accepts a sequence of comma-separated numbers from console and generate a list and a tuple which contains every number.,"values=raw_input()
l=values.split("","")
t=tuple(l)
print l
print t
","def main():
    numbers = input(""Enter numbers separated by comma: "")
    numbers = numbers.split("","")
    numbers = tuple(numbers)
    print(numbers)

if __name__ == ""__main__"":
    main()

# OUTPUT:
# Enter numbers separated by comma: 1,2,3,4,5,6,7,8,9,10
# (1, 2"
2484, Find the sum of N numbers in an array,"
arr=[]
size = int(input(""Enter the size of the array: ""))
print(""Enter the Element of the array:"")
for i in range(0,size):
  num = float(input())
  arr.append(num)
sum=0.0
for j in range(0,size):
      sum+= arr[j]
print(""sum of "",size,"" number : "",sum)","def sum_numbers(nums):
    total = 0
    for num in nums:
        total += num
    return total

print(sum_numbers([1, 2, 3, 4, 5]))

""""""

def sum_numbers(nums):
    total = 0
    for num in nums:
        total += num
    return total

print(sum_numbers([1, 2, 3, 4, 5]))

""""""

def sum_numbers(n"
2485,Program to check whether a matrix is diagonal or not,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

# check except Diagonal elements are 0 or not
point=0
for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        # check for diagonals element
        if i!=j and matrix[i][j]!=0:
            point=1
            break
if point==1:
    print(""Given Matrix is not a diagonal Matrix."")
else:
    print(""Given Matrix is a diagonal Matrix."")","def diagonal(matrix):
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j] == 0:
                return False
    return True

print(diagonal([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))
print(diagonal([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))
print(diagonal([["
2486,Program to check whether a matrix is symmetric or not,"# Get size of matrix
row_size=int(input(""Enter the row Size Of the Matrix:""))
col_size=int(input(""Enter the columns Size Of the Matrix:""))

matrix=[]
# Taking input of the 1st matrix
print(""Enter the Matrix Element:"")
for i in range(row_size):
    matrix.append([int(j) for j in input().split()])

if row_size!=col_size:
    print(""Given Matrix is not a Square Matrix."")
else:
    #compute the transpose matrix
    tran_matrix = [[0 for i in range(col_size)] for i in range(row_size)]
    for i in range(0, row_size):
        for j in range(0, col_size):
            tran_matrix[i][j] = matrix[j][i]
# check given matrix elements and transpose
# matrix elements are same or not.

flag=0
for i in range(0, row_size):
    for j in range(0, col_size):
        if matrix[i][j] != tran_matrix[i][j]:
            flag=1
            break

if flag==1:
    print(""Given Matrix is not a symmetric Matrix."")
else:
    print(""Given Matrix is a symmetric Matrix."")","def is_symmetric(matrix):
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j]!= matrix[j][i]:
                return False
    return True

print(is_symmetric([[1,2,3],[4,5,6],[7,8,9]]))
print(is_symmetric([[1,2,3],[4,5,6],[7,8"
2487,Program to Find nth Evil Number,"
rangenumber=int(input(""Enter a Nth Number:""))
c = 0
letest = 0
num = 1
while c != rangenumber:
  one_c = 0
  num1 = num
  while num1 != 0:
    if num1 % 2 == 1:
      one_c += 1
    num1 //= 2
  if one_c % 2 == 0:
      c+=1
      letest = num

  num = num + 1
print(rangenumber,""th Evil number is "",latest)","def nth_evil_number(n):
    if n == 1:
        return 1
    else:
        return nth_evil_number(n-1) + nth_evil_number(n-2)

n = int(input(""Enter the number: ""))
print(nth_evil_number(n))

""""""

# Solution

def nth_evil_number(n):
    if n == 1:
        return 1
    else:
        return nth_evil_number("
2488,Python Program to Print Table of a Given Number,"
n=int(input(""Enter the number to print the tables for:""))
for i in range(1,11):
    print(n,""x"",i,""="",n*i)","def print_table(n):
    for i in range(1, n+1):
        for j in range(1, i+1):
            print(j, end="" "")
        print()

n = int(input(""Enter the number of rows: ""))
print_table(n)

""""""

# Solution

def print_table(n):
    for i in range(1, n+1):
        for j in range(1, i+1):
            print(j, end"
2489,Python Program to Implement Heapsort,"def heapsort(alist):
    build_max_heap(alist)
    for i in range(len(alist) - 1, 0, -1):
        alist[0], alist[i] = alist[i], alist[0]
        max_heapify(alist, index=0, size=i)

def parent(i):
    return (i - 1)//2

def left(i):
    return 2*i + 1

def right(i):
    return 2*i + 2

def build_max_heap(alist):
    length = len(alist)
    start = parent(length - 1)
    while start >= 0:
        max_heapify(alist, index=start, size=length)
        start = start - 1

def max_heapify(alist, index, size):
    l = left(index)
    r = right(index)
    if (l < size and alist[l] > alist[index]):
        largest = l
    else:
        largest = index
    if (r < size and alist[r] > alist[largest]):
        largest = r
    if (largest != index):
        alist[largest], alist[index] = alist[index], alist[largest]
        max_heapify(alist, largest, size)


alist = input('Enter the list of numbers: ').split()
alist = [int(x) for x in alist]
heapsort(alist)
print('Sorted list: ', end='')
print(alist)","def heapify(arr, n, i):
    largest = i
    l = 2 * i + 1
    r = 2 * i + 2
    if l < n and arr[i] < arr[l]:
        largest = l
    if r < n and arr[largest] < arr[r]:
        largest = r
    if largest!= i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)

def heapSort(arr):"
2490,Python Program to Count Number of Non Leaf Nodes of a given Tree,"class Tree:
    def __init__(self, data=None):
        self.key = data
        self.children = []

    def set_root(self, data):
        self.key = data

    def add(self, node):
        self.children.append(node)

    def search(self, key):
        if self.key == key:
            return self
        for child in self.children:
            temp = child.search(key)
            if temp is not None:
                return temp
        return None

    def count_nonleaf_nodes(self):
        nonleaf_count = 0
        if self.children != []:
            nonleaf_count = 1
        for child in self.children:
            nonleaf_count = nonleaf_count + child.count_nonleaf_nodes()
        return nonleaf_count


tree = None

print('Menu (this assumes no duplicate keys)')
print('add <data> at root')
print('add <data> below <data>')
print('count')
print('quit')

while True:
    do = input('What would you like to do? ').split()

    operation = do[0].strip().lower()
    if operation == 'add':
        data = int(do[1])
        new_node = Tree(data)
        suboperation = do[2].strip().lower() 
        if suboperation == 'at':
            tree = new_node
        elif suboperation == 'below':
            position = do[3].strip().lower()
            key = int(position)
            ref_node = None
            if tree is not None:
                ref_node = tree.search(key)
            if ref_node is None:
                print('No such key.')
                continue
            ref_node.add(new_node)

    elif operation == 'count':
        if tree is None:
            print('Tree is empty.')
        else:
            count = tree.count_nonleaf_nodes()
            print('Number of nonleaf nodes: {}'.format(count))

    elif operation == 'quit':
        break","def count_leaf_nodes(root):
    if root is None:
        return 0
    else:
        return 1 + count_leaf_nodes(root.left) + count_leaf_nodes(root.right)

""""""

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self"
2491,Python Program to Count the Number of Lines in a Text File,"fname = input(""Enter file name: "")
num_lines = 0
with open(fname, 'r') as f:
    for line in f:
        num_lines += 1
print(""Number of lines:"")
print(num_lines)","# Open the file for reading
f = open(""mbox-short.txt"")

# Read the file line by line
for line in f:
    # If the line is not empty
    if line:
        # Split the line into words
        words = line.split()
        # Count the number of words
        print(len(words))

# Close the file
f.close()

""""""

# Open the file for reading
f = open(""mbox-short.txt"")

#"
2492,Program to print multiplication table of a given number,,"def multiplication_table(n):
    for i in range(1,n+1):
        print(i,end="" "")
    print()

n = int(input(""Enter the number of rows: ""))
multiplication_table(n)

""""""

# Solution

def multiplication_table(n):
    for i in range(1,n+1):
        print(i,end="" "")
    print()

n = int(input(""Enter the number of rows: ""))
for"
2493,Check if two arrays are the disjoint or not,"
arr=[]
arr2=[]
size = int(input(""Enter the size of the 1st array: ""))
size2 = int(input(""Enter the size of the 2nd array: ""))

print(""Enter the Element of the 1st array:"")
for i in range(0,size):
  num = int(input())
  arr.append(num)

print(""Enter the Element of the 2nd array:"")
for i in range(0,size2):
  num2 = int(input())
  arr2.append(num2)

count=0
for i in range(0, size):
  for j in range(0, size2):
    if arr[i] == arr2[j]:
      count+=1

if count>=1:
  print(""Arrays are not disjoint."")
else:
  print(""Arrays are disjoint."")","a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

a = [1, 2, 3, 4, 5, 6, 7, 8,"
2494,Print every character of a string twice,"str=input(""Enter Your String:"")for inn in range(0,len(str)):  print(str[inn]+str[inn],end="""")","def print_every_char(s):
    for i in s:
        print(i)

print_every_char(""Hello"")
print_every_char(""Python"")
print_every_char(""Hi"")
print_every_char(""Hi!"")
print_every_char(""Hi! Hi!"")
print_every_char(""Hi! Hi! Hi!"")
print_every_char(""Hi! Hi! Hi! Hi!"")
print_every_char(""Hi! Hi! Hi! Hi! Hi!"")"
2495,Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.,"s = raw_input()
words = [word for word in s.split("" "")]
print "" "".join(sorted(list(set(words))))
","def remove_duplicate_words(words):
    words_list = []
    for word in words:
        if word not in words_list:
            words_list.append(word)
    return words_list

print(remove_duplicate_words([""this"", ""is"", ""an"", ""example"", ""of"", ""this"", ""example""]))

""""""

def remove_duplicate_"
2496,Python Program to Generate Random Numbers from 1 to 20 and Append Them to the List,"import random
a=[]
n=int(input(""Enter number of elements:""))
for j in range(n):
    a.append(random.randint(1,20))
print('Randomised list is: ',a)","import random

def generate_random_number():
    random_number = random.randint(1, 20)
    return random_number

def append_to_list(list_to_append, random_number):
    list_to_append.append(random_number)

def main():
    list_to_append = []
    for i in range(1, 21):
        random_number = generate_random_number()
        append_to_list("
2497,Write a program to calculate compound interest,"principle=float(input(""Enter principle:""))
rate=float(input(""Enter rate(%):""))
n=float(input(""Enter n:""))
time=float(input(""Enter time:""))
amount=principle*pow(1+(rate/100.0)/n,n*time)
print(""The compound interest is"",amount)","def compound_interest(principle, interest_rate, number_of_years):
    """"""
    Compute the interest as a function of principle and interest rate.
    The function should return the amount of time it will take to pay
    interest based on the principle and interest rate.
    """"""
    # Write your code here
    return (principle * (interest_rate / 100) ** number_of_years)

# This is the main function that calls the above function.
compound_interest(principle=100,"
2498,"Define a class named American and its subclass NewYorker. 
:","
class American(object):
    pass

class NewYorker(American):
    pass

anAmerican = American()
aNewYorker = NewYorker()
print anAmerican
print aNewYorker




","1. Create a class called American.
2. Create a subclass of the American class.
3. Create a method called printNationality.
4. Create a method called printNationality.
5. Create a method called printNationality.
6. Create a method called printNationality.
7. Create a method called printNationality.
8. Create a method called printNationality.
9. Create a method called printNationality.
10. Create a method called printNationality.
11. Create a"
2499,Program to compute the area and perimeter of Rhombus,"

print(""Enter the two Diagonals Value:"")
p=int(input())
q=int(input())
a=int(input(""Enter the length of the side value:""))
area=(p*q)/2.0
perimeter=(4*a)
print(""Area of the Rhombus = "",area)
print(""Perimeter of the Rhombus = "",perimeter)
","#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the getPerimeter function below.
def getPerimeter(a, b, c):
    return (a + b + c) * 2

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input())

    for t_itr in range(t):
        arad = input"
