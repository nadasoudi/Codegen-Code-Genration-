Unnamed: 0,Problem,Python Code,Generated_Code
1501,Write a Pandas program to create a combination from two dataframes where a column id combination appears more than once in both dataframes.,"import pandas as pd
data1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],
                     'key2': ['K0', 'K1', 'K0', 'K1'],
                     'P': ['P0', 'P1', 'P2', 'P3'],
                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) 
data2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],
                      'key2': ['K0', 'K0', 'K0', 'K0'],
                      'R': ['R0', 'R1', 'R2', 'R3'],
                      'S': ['S0', 'S1', 'S2', 'S3']})
print(""Original DataFrames:"")
print(data1)
print(""--------------------"")
print(data2)
print(""\nMerged Data (many-to-many join case):"")
result = pd.merge(data1, data2, on='key1')
print(result)
","import pandas as pd
import numpy as np

df1 = pd.DataFrame({'id': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                    'name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue', 'Charlie', 'Rolf', 'Charlie', 'Anna']})
df2 = pd.DataFrame({'id': [1"
1502,"Write a Python program to create a new Arrow object, representing the ""ceiling"" of the timespan of the Arrow object in a given timeframe using arrow module. The timeframe can be any datetime property like day, hour, minute. ","import arrow
print(arrow.utcnow())
print(""Hour ceiling:"")
print(arrow.utcnow().ceil('hour'))
print(""\nMinute ceiling:"")
print(arrow.utcnow().ceil('minute'))
print(""\nSecond ceiling:"")
print(arrow.utcnow().ceil('second')) 
","import arrow

def create_arrow(time_span):
    return arrow.get(time_span)

def get_arrow(time_span):
    return arrow.get(time_span)

def get_arrow_time_span(time_span):
    return arrow.get(time_span).time_span

def get"
1503,Write a Python program to move all spaces to the front of a given string in single traversal. ,"def moveSpaces(str1): 
    no_spaces = [char for char in str1 if char!=' ']   
    space= len(str1) - len(no_spaces)
    # Create string with spaces
    result = ' '*space    
    return result + ''.join(no_spaces)
  
s1 = ""Python Exercises""
print(""Original String:\n"",s1)

print(""\nAfter moving all spaces to the front:"")
print(moveSpaces(s1))
","def move_spaces(s):
    # your code goes here
    return s.lstrip()

# driver code
s = ""  hello world  ""
print(move_spaces(s))

# Output:
# hello world
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
#"
1504,Write a Python program to check if all the elements of a list are included in another given list. ,"def test_includes_all(nums, lsts):
  for x in lsts:
    if x not in nums:
      return False
  return True
print(test_includes_all([10, 20, 30, 40, 50, 60], [20, 40]))
print(test_includes_all([10, 20, 30, 40, 50, 60], [20, 80]))
","def check_all(list1, list2):
    for i in list1:
        if i not in list2:
            return False
    return True

print(check_all([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))

""""""

def check_all(list1, list2):
    for i in list1:
        if i not in list2:
            return False
    return True"
1505,"Write a NumPy program to create a 3x3 identity matrix, i.e. diagonal elements are 1, the rest are 0. ","import numpy as np
x = np.eye(3)
print(x)
","import numpy as np

A = np.array([[1, 2, 3],
              [4, 5, 6],
              [7, 8, 9]])

print(A)

# Solution:

# A = np.eye(3)
# print(A)

# Solution:

# A = np.diag([1, 2, 3])
# print(A)

# Solution:"
1506,Write a Python program to create a 3X3 grid with numbers. ,"nums = []
for i in range(3):
    nums.append([])
    for j in range(1, 4):
        nums[i].append(j)
print(""3X3 grid with numbers:"")
print(nums)
","grid = [[1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]]

""""""

grid = [[1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]]

def print_grid(grid):
    for i in range(len(grid)):
        for j in range(len(grid[i])):
            print(grid[i][j], end="" "")
        print()"
1507,Write a Python program that sum the length of the names of a given list of names after removing the names that starts with an lowercase letter. Use lambda function. ,"sample_names = ['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']
sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))
print(""Result:"")
print(len(''.join(sample_names)))
","def solution(names):
    return sum([len(name.split('.')[0].lower()) for name in names])

""""""

def solution(names):
    return sum([len(name.split('.')[0].lower()) for name in names])

print(solution([""Alex"", ""Brian"", ""Chris"", ""Dave"", ""Eve"", ""Fred"", ""George"", ""George"", ""George"","
1508,"Write a Python program to extract year, month and date value from current datetime using arrow module. ","import arrow
a = arrow.utcnow()
print(""Year:"")
print(a.year)
print(""\nMonth:"")
print(a.month)
print(""\nDate:"")
print(a.day)
","import arrow

current_date = arrow.now()
print(current_date.year)
print(current_date.month)
print(current_date.day)

# Solution:

import arrow

current_date = arrow.now()
print(current_date.year)
print(current_date.month)
print(current_date.day)

# Solution:

import arrow

current_date = arrow.now()
print("
1509,"Write a Pandas program to create a histograms plot of opening, closing, high, low stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Open','Close','High','Low']]
#df3 = df2.set_index('Date')
plt.figure(figsize=(25,25))
df2.plot.hist(alpha=0.5)
plt.suptitle('Opening/Closing/High/Low stock prices of Alphabet Inc.,\n From 01-04-2020 to 30-09-2020', fontsize=12, color='blue')
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

# Read the data
df = pd.read_csv('Alphabet Inc.csv')

# Create a histogram plot
plt.hist(df['Open'], bins=30)

# Format the plot
plt.title('Histogram of Alphabet Inc. Opening Price')
plt.xlabel('Opening Price')
plt."
1510, Write a Python program to list all language names and number of related articles in the order they appear in wikipedia.org. ,"#https://bit.ly/2lVhlLX
# via: https://analytics.usa.gov/
import requests
url = 'https://analytics.usa.gov/data/live/realtime.json'
j = requests.get(url).json()
print(""Number of people visiting a U.S. government website-"")
print(""Active Users Right Now:"")
print(j['data'][0]['active_visitors'])
  ","import re

def get_language_names(url):
    language_names = []
    page = requests.get(url)
    soup = BeautifulSoup(page.content, 'html.parser')
    for link in soup.find_all('a', class_='wikitable'):
        language_names.append(link.text)
    return language_names

def get_number_of_related_articles(url):"
1511,"Write a NumPy program to count the number of dimensions, number of elements and number of bytes for each element in a given array. ","import numpy as np    
print(""\nOriginal arrays:"")
x = np.array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])
print(x)
print(""\nNumber of dimensions:"")
print(x.ndim)
print(""Number of elements:"")
print(x.size)
print(""Number of bytes for each element in the said array:"")
print(x.itemsize) 
","import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(arr.ndim)
print(arr.size)
print(arr.itemsize)

# Solution:

# arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
# print(arr."
1512,Write a Pandas program to find the all the business quarterly begin and end dates of a specified year. ,"import pandas as pd
q_start_dates = pd.date_range('2020-01-01', '2020-12-31', freq='BQS-JUN')
q_end_dates = pd.date_range('2020-01-01', '2020-12-31', freq='BQ-JUN')
print(""All the business quarterly begin dates of 2020:"")
print(q_start_dates.values)
print(""\nAll the business quarterly end dates of 2020:"")
print(q_end_dates.values)
","import pandas as pd

# Read the data from the csv file
df = pd.read_csv('business_quaterly_data.csv')

# Create a new dataframe with the business quarter dates
business_quarter_dates = df[['Business quarter', 'Business quarter date']]

# Create a new dataframe with the business quarter dates
business_quarter_dates_new = business_quarter_dates.groupby(['Business quarter']).agg"
1513,Write a Python program to replace dictionary values with their average. ,"def sum_math_v_vi_average(list_of_dicts):
    for d in list_of_dicts:
        n1 = d.pop('V')
        n2 = d.pop('VI')
        d['V+VI'] = (n1 + n2)/2
    return list_of_dicts 
student_details= [
  {'id' : 1, 'subject' : 'math', 'V' : 70, 'VI' : 82},
  {'id' : 2, 'subject' : 'math', 'V' : 73, 'VI' : 74},
  {'id' : 3, 'subject' : 'math', 'V' : 75, 'VI' : 86}
]
print(sum_math_v_vi_average(student_details))
","def solution(d):
    return sum(d.values()) / len(d)

""""""

def solution(d):
    return sum(d.values()) / len(d)

d = {'a': 1, 'b': 2, 'c': 3}
print(solution(d))"
1514,"Write a Python program to convert string values of a given dictionary, into integer/float datatypes. ","def convert_to_int(lst):
    result = [dict([a, int(x)] for a, x in b.items()) for b in lst]
    return result

def convert_to_float(lst):
    result = [dict([a, float(x)] for a, x in b.items()) for b in lst]
    return result

nums =[{ 'x':'10' , 'y':'20' , 'z':'30' }, { 'p':'40', 'q':'50', 'r':'60'}]
print(""Original list:"")
print(nums)
print(""\nString values of a given dictionary, into integer types:"")
print(convert_to_int(nums))
nums =[{ 'x':'10.12', 'y':'20.23', 'z':'30'}, { 'p':'40.00', 'q':'50.19', 'r':'60.99'}]
print(""\nOriginal list:"")
print(nums)
print(""\nString values of a given dictionary, into float types:"")
print(convert_to_float(nums))
","def convert_dict(d):
    for key, value in d.items():
        if isinstance(value, dict):
            d[key] = convert_dict(value)
        elif isinstance(value, list):
            d[key] = [convert_dict(i) for i in value]
    return d

d = {'a': 1, 'b': 2, 'c': 3}
print(convert_dict(d))"
1515,Write a Python program to remove specific words from a given list. ,"def remove_words(list1, remove_words):
    for word in list(list1):
        if word in remove_words:
            list1.remove(word)
    return list1        
colors = ['red', 'green', 'blue', 'white', 'black', 'orange']
remove_colors = ['white', 'orange']
print(""Original list:"")
print(colors)
print(""\nRemove words:"")
print(remove_colors)
print(""\nAfter removing the specified words from the said list:"")
print(remove_words(colors, remove_colors))
","def remove_words(words, words_to_remove):
    for word in words:
        if word in words_to_remove:
            words.remove(word)
    return words

print(remove_words(['apple', 'banana', 'orange', 'grape', 'pear'], ['banana', 'apple']))

""""""

def remove_words(words, words_to_remove):
    for word in words:
        if word in words_to_remove:"
1516,"Write a NumPy program to test equal, not equal, greater equal, greater and less test of all the elements of two given arrays. ","import numpy as np
x1 = np.array(['Hello', 'PHP', 'JS', 'examples', 'html'], dtype=np.str)
x2 = np.array(['Hello', 'php', 'Java', 'examples', 'html'], dtype=np.str)
print(""\nArray1:"")
print(x1)
print(""Array2:"")
print(x2)
print(""\nEqual test:"")
r = np.char.equal(x1, x2)
print(r)
print(""\nNot equal test:"")
r = np.char.not_equal(x1, x2)
print(r)
print(""\nLess equal test:"")
r = np.char.less_equal(x1, x2)
print(r)
print(""\nGreater equal test:"")
r = np.char.greater_equal(x1, x2)
print(r)
print(""\nLess test:"")
r = np.char.less(x1, x2)
print(r)
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([1, 2, 3, 4, 5])

print(a == b)
print(a!= b)
print(a >= b)
print(a <= b)
print(a > b)
print(a < b)

# Output:
# True
# True
# True
#"
1517,Write a Python program to reverse each list in a given list of lists. ,"def reverse_list_lists(nums):
    for l in nums:
        l.sort(reverse = True)
    return nums    
nums = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
print(""Original list of lists:"")
print(nums)
print(""\nReverse each list in the said list of lists:"")
print(reverse_list_lists(nums))
","def reverse_list(lst):
    for i in range(len(lst)):
        lst[i] = lst[i][::-1]
    return lst

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(reverse_list(lst))

""""""

# Solution 1

def reverse_list(lst):
    for i in range(len(lst)):"
1518,Write a Pandas program to compute the autocorrelations of a given numeric series. ,"import pandas as pd
import numpy as np
num_series = pd.Series(np.arange(15) + np.random.normal(1, 10, 15))
print(""Original series:"")
print(num_series)
autocorrelations = [num_series.autocorr(i).round(2) for i in range(11)]
print(""\nAutocorrelations of the said series:"")
print(autocorrelations[1:])
","import pandas as pd

# Read the data
df = pd.read_csv('../data/data.csv')

# Create a new dataframe with the autocorrelation of the numeric columns
autocorr = df.corr()

# Print the first 5 rows of the dataframe
autocorr.head()

# Create a new dataframe with the autocorrelation of the numeric columns
autocorr = df.corr()

# Print the"
1519,Write a NumPy program to split the element of a given array to multiple lines. ,"import numpy as np
x = np.array(['Python\Exercises, Practice, Solution'], dtype=np.str)
print(""Original Array:"")
print(x)
r = np.char.splitlines(x)
print(r)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr)

# Solution:

# arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
# print(arr)
# print(arr.shape)
# print(arr.ndim)
# print(arr.size)
# print(arr."
1520,Write a Python program to find the text of the first <a> tag of a given html text. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc, 'html.parser')
print(""Text of the first <a> tag:"")
print(soup.find('a').text)

","import re

html = '''
<html>
<head>
<title>First Title</title>
</head>
<body>
<p>First paragraph.</p>
<p>Second paragraph.</p>
<p>Third paragraph.</p>
</body>
</html>
'''

# Solution:

# Solution 1:
# regex = re.compile(r'<a.*?>')
# result = regex.find"
1521,Write a Python program to combine two dictionary adding values for common keys. ,"from collections import Counter
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 300, 'b': 200, 'd':400}
d = Counter(d1) + Counter(d2)
print(d)
","def solution(d1, d2):
    d1.update(d2)
    return d1

""""""

def solution(d1, d2):
    d1.update(d2)
    return d1

d1 = {'a': 1, 'b': 2, 'c': 3}
d2 = {'a': 1, 'b': 2, 'd': 4}

print(solution(d1, d2))"
1522,Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and to sort the records by the hire_date column. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx')
result = df.sort_values('hire_date')
result
","import pandas as pd

# Read the data into a pandas dataframe
df = pd.read_excel('employee.xlsx')

# Sort the dataframe by the hire_date column
df.sort_values(by='hire_date', inplace=True)

# Print the dataframe
print(df)

# Create a Pandas dataframe from the dataframe"
1523,Write a NumPy program to create a one dimensional array of forty pseudo-randomly generated values. Select random numbers from a uniform distribution between 0 and 1. ,"import numpy as np  
np.random.seed(10)
print(np.random.rand(40))
","import numpy as np

# Create an array of random numbers between 0 and 1
np.random.seed(0)
x = np.random.uniform(0, 1, size=40)

# Create a one dimensional array of forty pseudo-randomly generated values
y = np.zeros(40)
for i in range(40):
    y[i] = x[i]

# Display the"
1524,Write a NumPy program to convert numpy dtypes to native python types. ,"import numpy as np
print(""numpy.float32 to python float"")
x = np.float32(0)
print(type(x))
pyval = x.item()
print(type(pyval))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
print(a.dtype)

b = np.array([1, 2, 3, 4, 5], dtype=np.int64)
print(b.dtype)

c = np.array([1, 2, 3, 4, 5], dtype=np.float64)
print(c.dtype)

d = np.array([1, 2,"
1525,Write a Python program to get the every nth element in a given list. ,"def every_nth(nums, nth):
  return nums[nth - 1::nth]
print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))
print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))
print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))
print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))
","def get_nth_element(lst, n):
    return lst[n]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
print(get_nth_element(lst, n))

""""""

def get_nth_element(lst, n):
    return lst[n]

lst = [1, 2, 3, 4, 5, 6, 7"
1526,Write a NumPy program to find the number of weekdays in March 2017. ,"import numpy as np
print(""Number of weekdays in March 2017:"")
print(np.busday_count('2017-03', '2017-04'))
","import numpy as np

# Input:
#   data = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
#                    [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
#                    [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]])
# Output:
#   weekdays = np.array([[1, 2, 3, 4"
1527,Write a Python program to sort a given mixed list of integers and strings. Numbers must be sorted before strings. ,"def sort_mixed_list(mixed_list):
    int_part = sorted([i for i in mixed_list if type(i) is int])
    str_part = sorted([i for i in mixed_list if type(i) is str])
    return int_part + str_part
mixed_list = [19,'red',12,'green','blue', 10,'white','green',1]
print(""Original list:"")
print(mixed_list)
print(""\nSort the said  mixed list of integers and strings:"")
print(sort_mixed_list(mixed_list))
","import random

def sort_mixed_list(mixed_list):
    # your code goes here
    mixed_list.sort()
    return mixed_list

# keep this function call here 
print(sort_mixed_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(sort_mixed_list([1, 2, 3, 'a', 'b', 'c', '"
1528,Write a Python program to reverse a string. ,"def reverse_string(str1):
    return ''.join(reversed(str1))
print()
print(reverse_string(""abcdef""))
print(reverse_string(""Python Exercises.""))
print()
","def reverse_string(string):
    return string[::-1]

print(reverse_string(""hello""))

""""""

def reverse_string(string):
    return string[::-1]

print(reverse_string(""hello""))"
1529,Write a Python program to insert an element before each element of a list. ,"color = ['Red', 'Green', 'Black']
print(""Original List: "",color)
color = [v for elt in color for v in ('c', elt)]
print(""Original List: "",color)
","def insert_before(list, element):
    for i in range(len(list)):
        list[i] = list[i] + element
    return list

print(insert_before([1, 2, 3, 4, 5], 6))

""""""

def insert_before(list, element):
    for i in range(len(list)):
        list[i] = list[i] + element
    return list

print(insert_before([1, 2"
1530,Write a NumPy program to get the row numbers in given array where at least one item is larger than a specified value. ,"import numpy as np
num = np.arange(36)
arr1 = np.reshape(num, [4, 9])
print(""Original array:"")
print(arr1)
result  = np.where(np.any(arr1>10, axis=1))
print(""\nRow numbers where at least one item is larger than 10:"")
print(result)
","import numpy as np

arr = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]])

print(arr[arr > 5])

# Output:
# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# [10, 9"
1531,Write a NumPy program to get the indices of the sorted elements of a given array. ,"import numpy as np
student_id = np.array([1023, 5202, 6230, 1671, 1682, 5241, 4532])
print(""Original array:"")
print(student_id)
i = np.argsort(student_id)
print(""Indices of the sorted elements of a given array:"")
print(i)
","python solution.py

""""""

import numpy as np

def get_indices(arr, key):
    """"""
    Returns the indices of the elements of arr that match the key.
    
    Parameters
    ----------
    arr : ndarray
        The array to search.
    key : function
        The key function to use to compare the elements.
    
    Returns
    -------
    indices : ndarray
        The indices of the elements of arr that"
1532,Write a Python program to remove all strings from a given list of tuples. ,"def test(list1):
    result =   [tuple(v for v in i if not isinstance(v, str)) for i in list1]
    return list(result)

marks = [(100, 'Math'), (80, 'Math'), (90, 'Math'), (88, 'Science', 89), (90, 'Science', 92)]
print(""\nOriginal list:"")
print(marks)
print(""\nRemove all strings from the said list of tuples:"")
print(test(marks))
","def remove_strings(lst):
    for i in lst:
        lst.remove(i)
    return lst

lst = [('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i')]
print(remove_strings(lst))

""""""

def remove_strings(lst):
    for i in lst:
        lst.remove(i)
    return lst"
1533,Write a Python program to sort Counter by value. ,"from collections import Counter
x = Counter({'Math':81, 'Physics':83, 'Chemistry':87})
print(x.most_common())
","def counter(x):
    return x[0]

def counter2(x):
    return x[1]

def counter3(x):
    return x[2]

def counter4(x):
    return x[3]

def counter5(x):
    return x[4]

def counter6(x):
    return x[5]

def counter7(x):
    return x[6]

def counter8(x):
    return x[7]"
1534,Write a Python program to remove the parenthesis area in a string. ,"import re
items = [""example (.com)"", ""w3resource"", ""github (.com)"", ""stackoverflow (.com)""]
for item in items:
    print(re.sub(r"" ?\([^)]+\)"", """", item))
	","def remove_parenthesis(s):
    # your code goes here
    return s[1:-1]

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nik"
1535,Write a NumPy program to compute the median of flattened given array. ,"import numpy as np
x = np.arange(12).reshape((2, 6))
print(""\nOriginal array:"")
print(x)
r1 =  np.median(x)
print(""\nMedian of said array:"")
print(r1)
","import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12]])

print(np.median(arr))

# Output:
# [5.5 6.5 8.5]

# Hint:
# Use np.median() to compute the median of flattened given array.
# Use np.mean() to compute the mean of flattened given array."
1536,Write a Python program to convert a given Bytearray to Hexadecimal string. ,"def bytearray_to_hexadecimal(list_val):
     result = ''.join('{:02x}'.format(x) for x in list_val)  
     return(result)

list_val = [111, 12, 45, 67, 109] 
print(""Original Bytearray :"")
print(list_val)
print(""\nHexadecimal string:"")
print(bytearray_to_hexadecimal(list_val))
","bytearray_to_hexadecimal(bytearray)

""""""

def bytearray_to_hexadecimal(bytearray):
    """"""
    Convert a given Bytearray to Hexadecimal string.

    :param bytearray: A Bytearray to convert.
    :return: A Hexadecimal string.
    """"""
    hex_string = """"
    for byte in bytearray"
1537,Write a Python program to calculate the maximum and minimum sum of a sublist in a given list of lists. ,"def max_min_sublist(lst):
    max_result = (max(lst, key=sum))
    min_result = (min(lst, key=sum))
    return max_result,min_result

nums = [[1,2,3,5], [2,3,5,4], [0,5,4,1], [3,7,2,1], [1,2,1,2]]
print(""Original list:"")
print(nums)
result = max_min_sublist(nums)
print(""\nMaximum sum of sub list of the said list of lists:"")
print(result[0])
print(""\nMinimum sum of sub list of the said list of lists:"")
print(result[1])
","def max_sum(lst):
    max_sum = 0
    for i in range(len(lst)):
        for j in range(i, len(lst)):
            if lst[i] + lst[j] > max_sum:
                max_sum = lst[i] + lst[j]
    return max_sum

def min_sum(lst):
    min_sum = 0
    for"
1538,"Write a Python program to sum of two given integers. However, if the sum is between 15 to 20 it will return 20. ","def sum(x, y):
    sum = x + y
    if sum in range(15, 20):
        return 20
    else:
        return sum

print(sum(10, 6))
print(sum(10, 2))
print(sum(10, 12))
","def sum_of_two(a, b):
    if a > b:
        return a + b
    else:
        return b + a

print(sum_of_two(15, 20))

""""""

# Solution 1

def sum_of_two(a, b):
    if a > b:
        return a + b
    else:
        return b + a

print(sum_of_two"
1539,Write a Python program to convert a given decimal number to binary list. ,"def decimal_to_binary_list(n):
    result = [int(x) for x in list('{0:0b}'.format(n))]
    return result
n = 8
print(""Original Number:"",n)
print(""Decimal number ("",n,"") to binary list:"")
print(decimal_to_binary_list(n))
n = 45
print(""\nOriginal Number:"",n)
print(""Decimal number ("",n,"") to binary list:"")
print(decimal_to_binary_list(n))
n = 100
print(""\nOriginal Number:"",n)
print(""Decimal number ("",n,"") to binary list:"")
print(decimal_to_binary_list(n))
","def convert_to_binary(num):
    binary_list = []
    while num > 0:
        binary_list.append(num % 2)
        num = num // 2
    return binary_list

num = int(input(""Enter a decimal number: ""))
print(convert_to_binary(num))

""""""

def convert_to_binary(num):
    binary_list = []
    while num > 0:
        binary_list.append(num %"
1540,Write a Pandas program to compare the elements of the two Pandas Series. ,"import pandas as pd
ds1 = pd.Series([2, 4, 6, 8, 10])
ds2 = pd.Series([1, 3, 5, 7, 10])
print(""Series1:"")
print(ds1)
print(""Series2:"")
print(ds2)
print(""Compare the elements of the said Series:"")
print(""Equals:"")
print(ds1 == ds2)
print(""Greater than:"")
print(ds1 > ds2)
print(""Less than:"")
print(ds1 < ds2)
","solution = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

solution.index = pd.Index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

solution.values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(solution)

""""""

import pandas as pd
import numpy as"
1541,Write a NumPy program to calculate the Frobenius norm and the condition number of a given array. ,"import numpy as np
a = np.arange(1, 10).reshape((3, 3))
print(""Original array:"")
print(a)
print(""Frobenius norm and the condition number:"")
print(np.linalg.norm(a, 'fro'))
print(np.linalg.cond(a, 'fro'))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(""Frobenius norm is:"", np.linalg.norm(a))
print(""Condition number is:"", np.linalg.cond(a))

""""""

# Solution

import numpy as np

a = np.array([[1, 2, 3], [4"
1542,Write a Python program to generate all possible permutations of n different objects. ,"import itertools
def permutations_all(l):
    for values in itertools.permutations(l):
        print(values)

permutations_all([1])
print(""\n"")
permutations_all([1,2])
print(""\n"")
permutations_all([1,2,3])
","import itertools

def permutations(n):
    return list(itertools.permutations(range(1, n+1)))

print(permutations(5))

""""""

# Solution 1

def permutations(n):
    if n == 1:
        return [[1]]
    else:
        return [list(itertools.permutations(range(1, n+1))) for i in range(n)]

print(permutations(5))"
1543,"Write a Python program to create a localized, humanized representation of a relative difference in time using arrow module. ","import arrow
print(""Current datetime:"")
print(arrow.utcnow())
earlier = arrow.utcnow().shift(hours=-4)
print(earlier.humanize())
later = earlier.shift(hours=3)
print(later.humanize(earlier))
","import arrow

def time_difference(time1, time2):
    time1 = arrow.get(time1)
    time2 = arrow.get(time2)
    diff = time1 - time2
    return diff.humanize()

print(time_difference(""2021-05-01"", ""2021-05-02""))

""""""

# Solution:

from datetime import datetime

def time_difference("
1544,Write a NumPy program to create a vector with values from 0 to 20 and change the sign of the numbers in the range from 9 to 15. ,"import numpy as np
x = np.arange(21)
print(""Original vector:"")
print(x)
print(""After changing the sign of the numbers in the range from 9 to 15:"")
x[(x >= 9) & (x <= 15)] *= -1
print(x)
","import numpy as np

x = np.arange(0,21,1)
x[9] = np.sign(x[9])
print(x)

""""""

# Solution

import numpy as np

x = np.arange(0,21,1)
x[9] = np.sign(x[9])
print(x)

"""""""
1545,Write a NumPy program to create an array using scientific notation numbers. Set the precision value to 6 and print the array. ,"import numpy as np
nums = np.array([1.2e-7, 1.5e-6, 1.7e-5])
print(""Original arrays:"")
print(nums)
print(""Set the precision value to 10:"")
np.set_printoptions(suppress=True, precision=10)
print(nums)
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a)

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a)

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
1546,Write a Pandas program to manipulate and convert date times with timezone information. ,"import pandas as pd
dtt = pd.date_range('2018-01-01', periods=3, freq='H')
dtt = dtt.tz_localize('UTC')
print(dtt)
print(""\nFrom UTC to America/Los_Angeles:"")
dtt = dtt.tz_convert('America/Los_Angeles')
print(dtt)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({""Date"": [""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan 31, 2018"", ""Jan"
1547,Write a Python program to print the even numbers from a given list. ,"def is_even_num(l):
    enum = []
    for n in l:
        if n % 2 == 0:
            enum.append(n)
    return enum
print(is_even_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))
","def even_numbers(lst):
    for i in lst:
        if i % 2 == 0:
            print(i)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
even_numbers(lst)

""""""

def even_numbers(lst):
    for i in lst:
        if i % 2 == 0:
            print(i)

lst = [1, 2"
1548,Write a Pandas program to split the following dataframe into groups based on first column and set other column values into a list of values. ,"import pandas as pd
df = pd.DataFrame( {'X' : [10, 10, 10, 20, 30, 30, 10], 
                    'Y' : [10, 15, 11, 20, 21, 12, 14], 
                    'Z' : [22, 20, 18, 20, 13, 10, 0]})
print(""Original DataFrame:"")
print(df)
result= df.groupby('X').aggregate(lambda tdf: tdf.unique().tolist())
print(result)
","df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]})

df.groupby(['col1']).agg({'col2': ['sum']})

df.groupby(['col1', 'col2'])."
1549,Write a Python program to sort one list based on another list containing the desired indexes. ,"def sort_by_indexes(lst, indexes, reverse=False):
  return [val for (_, val) in sorted(zip(indexes, lst), key=lambda x: \
          x[0], reverse=reverse)]

l1 = ['eggs', 'bread', 'oranges', 'jam', 'apples', 'milk']
l2 = [3, 2, 6, 4, 1, 5]
print(sort_by_indexes(l1, l2))  
print(sort_by_indexes(l1, l2, True))
","def sort_list(list1, list2):
    for i in range(len(list1)):
        for j in range(len(list2)):
            if list1[i] == list2[j]:
                list1[i] = list2[j]
                list2[j] = list1[i]
    return list1, list2

list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10"
1550,Write a Python script to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys. ,"d=dict()
for x in range(1,16):
    d[x]=x**2
print(d)  
","# Enter your code here. Read input from STDIN. Print output to STDOUT
import math

def square_keys(d):
    for i in d:
        print(i, math.pow(i, 2))

if __name__ == '__main__':
    d = {}
    for i in range(1, 16):
        d[i] = i**2
    square_keys(d)"
1551,Write a Python program to check if a given value is a method of a user-defined class. Use types.MethodType(),"import types
class C:
    def x():
        return 1
    def y():
        return 1    
        
def b():
    return 2

print(isinstance(C().x, types.MethodType))
print(isinstance(C().y, types.MethodType))
print(isinstance(b, types.MethodType))
print(isinstance(max, types.MethodType))
print(isinstance(abs, types.MethodType))
","def is_method(obj):
    if type(obj) == types.MethodType:
        return True
    else:
        return False

print(is_method(1))
print(is_method(1.0))
print(is_method(1.0 + 2.0))
print(is_method(1.0 + 2.0 + 3.0))
print(is_method(1.0 + 2.0 +"
1552,"Write a Python program to generate and print a list except for the first 5 elements, where the values are square of numbers between 1 and 30 (both included). ","def printValues():
	l = list()
	for i in range(1,31):
		l.append(i**2)
	print(l[5:])
printValues()
","import random

lst = []

for i in range(1, 31):
    lst.append(i**2)

print(lst[5:])

# Solution:

lst = []

for i in range(1, 31):
    lst.append(i**2)

print(lst[5:])

# Solution:

lst = []"
1553,Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and find a list of employees of a specified year. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx')
df2 = df.set_index(['hire_date'])
result = df2[""2005""]
result
","import pandas as pd

df = pd.read_excel('employee.xlsx')

df.head()

df.columns

df.columns = ['Name', 'Age', 'Salary']

df.head()

df.columns = ['Name', 'Age', 'Salary']

df.head()

df.columns = ['Name',"
1554,Write a Python program to rotate a Deque Object specified number (negative) of times. ,"import collections
# declare an empty deque object
dq_object = collections.deque()
# Add elements to the deque - left to right
dq_object.append(2)
dq_object.append(4)
dq_object.append(6)
dq_object.append(8)
dq_object.append(10)
print(""Deque before rotation:"")
print(dq_object)
# Rotate once in negative direction
dq_object.rotate(-1)
print(""\nDeque after 1 negative rotation:"")
print(dq_object)
# Rotate twice in negative direction
dq_object.rotate(-2)
print(""\nDeque after 2 negative rotations:"")
print(dq_object)
","def rotate(d, n):
    for i in range(n):
        d.append(d.popleft())
    return d

# Driver Code
d = deque([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(rotate(d, 3))

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)"
1555,"Write a NumPy program to generate inner, outer, and cross products of matrices and vectors. ","import numpy as np
x = np.array([1, 4, 0], float)
y = np.array([2, 2, 1], float)
print(""Matrices and vectors."")
print(""x:"")
print(x)
print(""y:"")
print(y)
print(""Inner product of x and y:"")
print(np.inner(x, y))
print(""Outer product of x and y:"")
print(np.outer(x, y))
print(""Cross product of x and y:"")
print(np.cross(x, y))
","import numpy as np

# Create a matrix
A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Create a vector
B = np.array([1, 2, 3])

# Create a matrix
C = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Create a vector
D = np.array(["
1556,Write a NumPy program to create a 1-D array going from 0 to 50 and an array from 10 to 50. ,"import numpy as np
x = np.arange(50)
print(""Array from 0 to 50:"")
print(x)
x = np.arange(10, 50)
print(""Array from 10 to 50:"")
print(x)
","import numpy as np

arr = np.arange(0,51)
print(arr)

arr = np.arange(10,51)
print(arr)

arr = np.arange(0,50,2)
print(arr)

arr = np.arange(10,50,2)
print(arr)

arr = np.arange(0,50,2)
print(arr)"
1557,Write a Python program to split an iterable and generate iterables specified number of times. ,"import itertools as it
def tee_data(iter, n):
    return it.tee(iter, n)
#List
result = tee_data(['A','B','C','D'], 5)
print(""Generate iterables specified number of times:"")
for i in result:
    print(list(i))

#String
result = tee_data(""Python itertools"", 4)
print(""\nGenerate iterables specified number of times:"")
for i in result:
    print(list(i))
","def split_iter(iterable, n):
    """"""Split an iterable into n iterables.

    >>> split_iter(range(10), 3)
    [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]
    >>> split_iter(range(10), 4)
    [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9]]
    """"""
    return [iter(iter"
1558,"Write a NumPy program to sort the student id with increasing height of the students from given students id and height. Print
the integer indices that describes the sort order by multiple columns and the sorted data. ","import numpy as np
student_id = np.array([1023, 5202, 6230, 1671, 1682, 5241, 4532])
student_height = np.array([40., 42., 45., 41., 38., 40., 42.0])
#Sort by studen_id then by student_height
indices = np.lexsort((student_id, student_height))
print(""Sorted indices:"")
print(indices)
print(""Sorted data:"")
for n in indices:
  print(student_id[n], student_height[n])
","#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(a, b, c):
    # Write your code here
    a.sort()
    b.sort()
    c.sort()
    return a, b, c

if __name__ == '__main__':"
1559,Write a Python program to get the smallest number from a list. ,"def smallest_num_in_list( list ):
    min = list[ 0 ]
    for a in list:
        if a < min:
            min = a
    return min
print(smallest_num_in_list([1, 2, -8, 0]))
","def smallest(numbers):
    smallest = numbers[0]
    for i in range(1, len(numbers)):
        if numbers[i] < smallest:
            smallest = numbers[i]
    return smallest

print(smallest(numbers))

""""""

# Solution

def smallest(numbers):
    smallest = numbers[0]
    for i in range(1, len(numbers)):
        if numbers[i] < smallest:"
1560,Write a Python program to sort a list of elements using Cycle sort. ,"# License: https://bit.ly/2V5W81t 
def cycleSort(vector):
    ""Sort a vector in place and return the number of writes.""
    writes = 0
 
    # Loop through the vector to find cycles to rotate.
    for cycleStart, item in enumerate(vector):
 
        # Find where to put the item.
        pos = cycleStart
        for item2 in vector[cycleStart + 1:]:
            if item2 < item:
                pos += 1
 
        # If the item is already there, this is not a cycle.
        if pos == cycleStart:
            continue
 
        # Otherwise, put the item there or right after any duplicates.
        while item == vector[pos]:
            pos += 1
        vector[pos], item = item, vector[pos]
        writes += 1
 
        # Rotate the rest of the cycle.
        while pos != cycleStart:
 
            # Find where to put the item.
            pos = cycleStart
            for item2 in vector[cycleStart + 1:]:
                if item2 < item:
                    pos += 1
 
            # Put the item there or right after any duplicates.
            while item == vector[pos]:
                pos += 1
            vector[pos], item = item, vector[pos]
            writes += 1
 
    return writes
 
 
if __name__ == '__main__':
    x = [0, 1, 2, 2, 2, 2, 1, 9, 3.5, 5, 8, 4, 7, 0, 6]
    xcopy = x[::]
    writes = cycleSort(xcopy)
    if xcopy != sorted(x):
        print('Wrong order!')
    else:
        print('%r\nIs correctly sorted using cycleSort to'
              '\n%r\nUsing %i writes.' % (x, xcopy, writes))
","def sort(lst):
    for i in range(len(lst)):
        for j in range(i, len(lst)):
            if lst[i] > lst[j]:
                lst[i], lst[j] = lst[j], lst[i]
    return lst

lst = [5, 4, 3, 2, 1]
print(sort(lst))

""""""

# Time complexity: O(n^"
1561,Write a NumPy program to extract all the elements of the first row from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: First row"")
print(arra_data[0])
","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12],
              [13, 14, 15, 16]])

print(a[0, :])

# Output:
# [1 2 3 4]
# [5 6 7 8]
# [9 10 11 12]
# [13 14 15 16]"
1562,Write a Pandas program to create a histogram to visualize daily return distribution of Alphabet Inc. stock price between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Date', 'Adj Close']]
df3 = df2.set_index('Date')
daily_changes = df3.pct_change(periods=1)
sns.distplot(daily_changes['Adj Close'].dropna(),bins=100,color='purple')
plt.suptitle('Daily % return of Alphabet Inc. stock price,\n01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.grid(True)
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc_stock_price_data.csv')

df['Date'] = pd.to_datetime(df['Date'])
df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')

plt.hist(df['Close'], bins=30)"
1563,Write a Python program to find tag(s) directly beneath other tag(s) in a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc,""lxml"")
print(""\nBeneath directly head tag:"")
print(soup.select(""head > title""))
print()
print(""\nBeneath directly p tag:"")
print(soup.select(""p > a"")) 
","import re

# regex pattern to match tag(s)
tag_pattern = r'<[^>]+>'

# regex pattern to match other tags
other_tag_pattern = r'<[^>]+>'

# regex pattern to match tag(s)
tag_pattern_2 = r'<[^>]+>'

# regex pattern to match other tags
other_tag_pattern_2 = r'<[^>]+"
1564,"Write a Python program generate permutations of specified elements, drawn from specified values. ","from itertools import product 

def permutations_colors(inp, n):
    for x in product(inp, repeat=n):
        c = ''.join(x)
        print(c,end=', ')

str1 = ""Red""
print(""Original String: "",str1)
print(""Permutations of specified elements, drawn from specified values:"")
n=1
print(""\nn = 1"")
permutations_colors(str1,n)
n=2
print(""\nn = 2"")
permutations_colors(str1,n)
n=3
print(""\nn = 3"")
permutations_colors(str1,n)

lst1 = [""Red"",""Green"",""Black""]
print(""\n\nOriginal list: "",lst1)
print(""Permutations of specified elements, drawn from specified values:"")
n=1
print(""\nn = 1"")
permutations_colors(lst1,n)
n=2
print(""\nn = 2"")
permutations_colors(lst1,n)
n=3
print(""\nn = 3"")
permutations_colors(lst1,n)
","import itertools

def permutations(elements, values):
    if len(elements) == 0:
        return []
    if len(elements) == 1:
        return [elements]
    
    result = []
    for i in range(len(values)):
        for j in itertools.combinations(elements, i + 1):
            result.append(j)
    return result

print(permutations(['a', 'b',"
1565,Write a Python program to remove all elements from a given list present in another list using lambda. ,"def index_on_inner_list(list1, list2):
    result = list(filter(lambda x: x not in list2, list1))
    return result
list1 = [1,2,3,4,5,6,7,8,9,10]
list2 = [2,4,6,8]
print(""Original lists:"")
print(""list1:"", list1)
print(""list2:"", list2)
print(""\nRemove all elements from 'list1' present in 'list2:"")
print(index_on_inner_list(list1, list2))
","def remove_elements(lst, ele):
    return [i for i in lst if i!= ele]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
ele = 7

print(remove_elements(lst, ele))

""""""

# Solution:

def remove_elements(lst, ele):
    return [i for i in lst if i!= ele]"
1566,Write a NumPy program to shuffle numbers between 0 and 10 (inclusive). ,"import numpy as np
x = np.arange(10)
np.random.shuffle(x)
print(x)
print(""Same result using permutation():"")
print(np.random.permutation(10))
","import numpy as np

n = np.arange(10)
np.random.shuffle(n)
print(n)

""""""

# Solution

import numpy as np

n = np.arange(10)
np.random.shuffle(n)
print(n)

# Python code to shuffle numbers between 0 and 10 (inclusive)

n = np.arange(10)
np.random.shuffle(n)
print("
1567,Write a Pandas program to compute difference of differences between consecutive numbers of a given series. ,"import pandas as pd
series1 = pd.Series([1, 3, 5, 8, 10, 11, 15])
print(""Original Series:"")
print(series1)
print(""\nDifference of differences between consecutive numbers of the said series:"")
print(series1.diff().tolist())
print(series1.diff().diff().tolist())
","import pandas as pd

series = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(series.diff())

series = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(series.diff(periods=2))

series = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9"
1568,Write a Pandas program to extract the sentences where a specific word is present in a given column of a given DataFrame. ,"import pandas as pd
import re as re
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],
    'address': ['9910 Surrey Avenue','92 N. Bishop Avenue','9910 Golden Star Avenue', '102 Dunbar St.', '17 West Livingston Court']
})
print(""Original DataFrame:"")
print(df)
def pick_only_key_sentence(str1, word):
    result = re.findall(r'([^.]*'+word+'[^.]*)', str1)
    return result
df['filter_sentence']=df['address'].apply(lambda x : pick_only_key_sentence(x,'Avenue'))
print(""\nText with the word 'Avenue':"")
print(df)
","import pandas as pd
import numpy as np

df = pd.read_csv('/Users/srinivasan/Desktop/Python/data/data.csv')

# Create a function to extract the sentences where a specific word is present in a given column of a given DataFrame.
def extract_sentences(df, column, word):
    # Create a list of all the sentences where the word is present in the given column of a given"
1569,"Write a Python program to get the size, permissions, owner, device, created, last modified and last accessed date time of a specified path. ","import os
import sys
import time
path = 'g:\\testpath\\'
print('Path Name ({}):'.format(path))
print('Size:', stat_info.st_size)
print('Permissions:', oct(stat_info.st_mode))
print('Owner:', stat_info.st_uid)
print('Device:', stat_info.st_dev)
print('Created     :', time.ctime(stat_info.st_ctime))
print('Last modified:', time.ctime(stat_info.st_mtime))
print('Last accessed:', time.ctime(stat_info.st_atime))
","import os

def get_size(path):
    size = os.path.getsize(path)
    print(""Size of the file is: "", size)

def get_permissions(path):
    permissions = os.stat(path).st_mode
    print(""Permissions of the file is: "", permissions)

def get_owner(path):
    owner = os.stat(path).st_uid"
1570,Write a NumPy program to test whether any array element along a given axis evaluates to True.,"import numpy as np
print(np.any([[False,False],[False,False]]))
print(np.any([[True,True],[True,True]]))
print(np.any([10, 20, 0, -50]))
print(np.any([10, 20, -50]))
","import numpy as np

a = np.array([[True, False, True],
              [False, False, True],
              [True, True, False]])

print(np.any(a, axis=0))

# OUTPUT:
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
#"
1571,Write a NumPy program to convert 1-D arrays as columns into a 2-D array. ,"import numpy as np
a = np.array((10,20,30))
b = np.array((40,50,60))
c = np.column_stack((a, b))
print(c)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

b = np.array([[1, 2, 3], [4, 5, 6]])
print(b)

c = np.array([[1, 2, 3], [4, 5, 6]])
print(c)

d = np.array([[1, 2, 3], [4,"
1572,Write a NumPy program to convert a NumPy array into a csv file. ,"import numpy
data = numpy.asarray([ [10,20,30], [40,50,60], [70,80,90] ])
numpy.savetxt(""test.csv"", data, delimiter="","")
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
np.savetxt('a.csv', a, delimiter=',')

""""""

import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
np.savetxt('a.csv', a, delimiter=',')

""""""

# Solution

import numpy as np"
1573,Write a Python function to insert a string in the middle of a string. ,"def insert_sting_middle(str, word):
	return str[:2] + word + str[2:]

print(insert_sting_middle('[[]]', 'Python'))
print(insert_sting_middle('{{}}', 'PHP'))
print(insert_sting_middle('<<>>', 'HTML'))
","def insert_middle(s, d):
    return s[:len(s)//2] + d + s[len(s)//2:]

print(insert_middle(""Python"", ""Java""))

""""""

def insert_middle(s, d):
    return s[:len(s)//2] + d + s[len(s)//2:]

print(insert_middle(""Python"", ""Java""))"
1574,"Write a Python program to calculate the average of a given list, after mapping each element to a value using the provided function. ","def average_by(lst, fn = lambda x: x):
  return sum(map(fn, lst), 0.0) / len(lst)

print(average_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda x: x['n']))
print(average_by([{ 'n': 10 }, { 'n': 20 }, { 'n': -30 }, { 'n': 60 }], lambda x: x['n']))
","def average(lst):
    return sum(lst) / len(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(average(lst))

""""""

# Solution 1

def average(lst):
    return sum(lst) / len(lst)

lst = [1, 2, 3, 4, 5, 6,"
1575,"Write a Pandas program to create a line plot of the opening, closing stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-09-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df2 = df.loc[new_df]
plt.figure(figsize=(10,10))
df2.plot(x='Date', y=['Open', 'Close']);
plt.suptitle('Opening/Closing stock prices of Alphabet Inc.,\n 01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.xlabel(""Date"",fontsize=12, color='black')
plt.ylabel(""$ price"", fontsize=12, color='black')
plt.show()

","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])

df.set_index('Date', inplace=True)

df.plot(kind='line', figsize=(10, 6))

plt.show()

""""""

import pandas"
1576,Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and find all records that include two specific MSHA ID. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')    
df[df[""MSHA ID""].isin([102976,103380])].head()
","import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')

df = df[df['MSHA_ID'].isin(['2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18',"
1577,Write a Python function that takes a number as a parameter and check the number is prime or not. ,"def test_prime(n):
    if (n==1):
        return False
    elif (n==2):
        return True;
    else:
        for x in range(2,n):
            if(n % x==0):
                return False
        return True             
print(test_prime(9))
","def is_prime(num):
    if num == 1:
        return False
    for i in range(2, num):
        if num % i == 0:
            return False
    return True

print(is_prime(4))
print(is_prime(5))
print(is_prime(6))
print(is_prime(7))
print(is_prime(8))
print(is_prime(9))
print(is_prime"
1578,Write a Python program to print a dictionary in table format. ,"my_dict = {'C1':[1,2,3],'C2':[5,6,7],'C3':[9,10,11]}
for row in zip(*([key] + (value) for key, value in sorted(my_dict.items()))):
    print(*row)
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

#"
1579,"Write a Python code to send a request to a web page, and print the information of headers. Also parse these values and print key-value pairs holding various information. ","import requests
r = requests.get('https://api.github.com/')
response = r.headers
print(""Headers information of the said response:"")
print(response)
print(""\nVarious Key-value pairs information of the said resource and request:"")

print(""Date: "",r.headers['date'])
print(""server: "",r.headers['server'])
print(""status: "",r.headers['status'])
print(""cache-control: "",r.headers['cache-control'])
print(""vary: "",r.headers['vary'])
print(""x-github-media-type: "",r.headers['x-github-media-type'])
print(""access-control-expose-headers: "",r.headers['access-control-expose-headers'])
print(""strict-transport-security: "",r.headers['strict-transport-security'])
print(""x-content-type-options: "",r.headers['x-content-type-options'])
print(""x-xss-protection: "",r.headers['x-xss-protection'])
print(""referrer-policy: "",r.headers['referrer-policy'])
print(""content-security-policy: "",r.headers['content-security-policy'])
print(""content-encoding: "",r.headers['content-encoding'])
print(""X-Ratelimit-Remaining: "",r.headers['X-Ratelimit-Remaining'])
print(""X-Ratelimit-Reset: "",r.headers['X-Ratelimit-Reset'])
print(""X-Ratelimit-Used: "",r.headers['X-Ratelimit-Used'])
print(""Accept-Ranges:"",r.headers['Accept-Ranges'])
print(""X-GitHub-Request-Id:"",r.headers['X-GitHub-Request-Id'])
","import urllib.request
import urllib.parse
import urllib.error

url = ""http://data.pr4e.org/romeo.txt""

try:
    fhand = urllib.request.urlopen(url)
except urllib.error.URLError as e:
    if hasattr(e, ""code""):
        print(""Error code"
1580,Write a NumPy program to test whether specified values are present in an array. ,"import numpy as np
x = np.array([[1.12, 2.0, 3.45], [2.33, 5.12, 6.0]], float) 
print(""Original array:"")
print(x)
print(2 in x)
print(0 in x)
print(6 in x)
print(2.3 in x)
print(5.12 in x)
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a[2])

# Output:
# 2

# Explanation:
# 2 is present at index 2.

# Hint:
# Use the built-in function np.where() to find the indices of the elements that are present in the array.

# Hint:
# Use the built-in function np"
1581,Write a Python program to define a string containing special characters in various forms. ,"print()
print(""\#{'}${\""}@/"")
print(""\#{'}${""'""'""}@/"")
print(r""""""\#{'}${""}@/"""""")
print('\#{\'}${""}@/')
print('\#{'""'""'}${""}@/')
print(r'''\#{'}${""}@/''')
print()
","def special_char(s):
    if s =='':
        return''
    elif s == '!':
        return '!'
    elif s == '?':
        return '?'
    elif s == '.':
        return '.'
    elif s == ',':
        return ','
    elif s == ';':
        return ';'
    elif s == ':':
        return ':'
    elif s == '"
1582,Write a Python program to create a list taking alternate elements from a given list. ,"def alternate_elements(list_data):
    result=[]
    for item in list_data[::2]:
        result.append(item)
    return result 
colors = [""red"", ""black"", ""white"", ""green"", ""orange""]
print(""Original list:"")
print(colors)
print(""List with alternate elements from the said list:"")
print(alternate_elements(colors))
nums = [2,0,3,4,0,2,8,3,4,2]
print(""\nOriginal list:"")
print(nums)
print(""List with alternate elements from the said list:"")
print(alternate_elements(nums))
","def alternate_elements(lst):
    lst.sort()
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(alternate_elements(lst))

""""""

# Solution:

def alternate_elements(lst):
    lst.sort()
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8"
1583,Write a Python program to convert a given list of tuples to a list of strings. ,"def tuples_to_list_str(lst):
    result = [(""%s ""*len(el)%el).strip() for el in lst]
    return result   
colors = [('red', 'green'), ('black', 'white'), ('orange', 'pink')]
print(""Original list of tuples:"")
print(colors)
print(""\nConvert the said list of tuples to a list of strings:"")
print(tuples_to_list_str(colors))
names = [('Laiba','Delacruz'), ('Mali','Stacey','Drummond'), ('Raja','Welch'), ('Saarah','Stone')]
print(""\nOriginal list of tuples:"")
print(names)
print(""\nConvert the said list of tuples to a list of strings:"")
print(tuples_to_list_str(names))
","def convert_list_to_string(list):
    return [str(item) for item in list]

print(convert_list_to_string([(1, 2), (3, 4), (5, 6)]))

""""""

def convert_list_to_string(list):
    return [str(item) for item in list]

print(convert_list_to_string([(1, 2), (3, 4), (5, 6"
1584,"Write a Python program to make two given strings (lower case, may or may not be of the same length) anagrams removing any characters from any of the strings. ","def make_map(s):
    temp_map = {}
    for char in s:
        if char not in temp_map:
            temp_map[char] = 1
        else:
            temp_map[char] +=1 
    return temp_map        
def make_anagram(str1, str2):
    str1_map1 = make_map(str1)
    str2_map2 = make_map(str2)
 
    ctr = 0
    for key in str2_map2.keys():
        if key not in str1_map1:
            ctr += str2_map2[key]
        else:
            ctr += max(0, str2_map2[key]-str1_map1[key])
 
    for key in str1_map1.keys():
        if key not in str2_map2:
            ctr += str1_map1[key]
        else:
            ctr += max(0, str1_map1[key]-str2_map2[key]) 
    return ctr 
str1 = input(""Input string1: "")
str2 = input(""Input string2: "")
print(make_anagram(str1, str2))
","def anagram(s1, s2):
    s1 = s1.lower()
    s2 = s2.lower()
    s1 = s1.replace(' ', '')
    s2 = s2.replace(' ', '')
    s1 = s1.replace('-', '')
    s2 = s2.replace('-', '')
    s1 = s1."
1585,Write a Python program to convert JSON encoded data into Python objects. ,"import json

jobj_dict =  '{""name"": ""David"", ""age"": 6, ""class"": ""I""}'
jobj_list =   '[""Red"", ""Green"", ""Black""]'
jobj_string = '""Python Json""'
jobj_int = '1234'
jobj_float =  '21.34'
python_dict =  json.loads(jobj_dict)
python_list = json.loads(jobj_list)
python_str =  json.loads(jobj_string)
python_int =   json.loads(jobj_int)
python_float = json.loads(jobj_float)

print(""Python dictionary: "", python_dict)
print(""Python list: "", python_list)
print(""Python string: "", python_str)
print(""Python integer: "", python_int)
print(""Python float: "", python_float)
","import json

# Opening JSON file
f = open('data.json')

# Reading the file
data = json.load(f)

# Closing the file
f.close()

# Python code to convert JSON encoded data into Python objects

# Python code to convert JSON encoded data into Python objects

# Python code to convert JSON encoded data into Python objects

# Python code to convert JSON encoded data into Python objects

# Python code to convert JSON encoded data into Python objects

# Python code to"
1586,Write a Python program to extract all the URLs from the webpage python.org that are nested within <li> tags from . ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')

urls = []
for h in soup.find_all('li'):
    a = h.find('a')
    urls.append(a.attrs['href'])
print(urls)

","import urllib.request

url = ""https://www.python.org/~guido/python-projects/python-projects.html""

with urllib.request.urlopen(url) as response:
    html = response.read()
    print(html.decode())

""""""

import urllib.request

url = ""https://www.python.org/~guido/python-projects/python-projects"
1587,Write a Python program for counting sort. ,"def counting_sort(array1, max_val):
    m = max_val + 1
    count = [0] * m                
    
    for a in array1:
    # count occurences
        count[a] += 1             
    i = 0
    for a in range(m):            
        for c in range(count[a]):  
            array1[i] = a
            i += 1
    return array1

print(counting_sort( [1, 2, 7, 3, 2, 1, 4, 2, 3, 2, 1], 7 ))
","def countingSort(arr, exp):
    count = [0 for i in range(exp+1)]
    for i in arr:
        count[i] += 1
    
    for i in range(1, exp+1):
        count[i] += count[i-1]
    
    result = [0 for i in range(len(arr))]
    for i in range(len(arr)):
        result[count[arr[i]]-1] = arr[i]
        count[arr"
1588,Write a NumPy program to create a NumPy array of 10 integers from a generator. ,"import numpy as np
iterable = (x for x in range(10))
print(np.fromiter(iterable, np.int))
","import numpy as np

def generator():
    for i in range(10):
        yield i

arr = np.array(generator())

print(arr)

# Output:
# [0 1 2 3 4 5 6 7 8 9]

# Note:
# The generator function is a generator function that returns a generator object.
# The generator function is a generator object that returns a value.
# The generator function is a generator object that returns a value."
1589,"Write a Python program to create a 3-tuple ISO year, ISO week number, ISO weekday and an ISO 8601 formatted representation of the date and time. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\n3-tuple - ISO year, ISO week number, ISO weekday:"")
print(arrow.utcnow().isocalendar())
print(""\nISO 8601 formatted representation of the date and time:"")
print(arrow.utcnow().isoformat())
","import datetime

def iso_week_number(iso_year, iso_week):
    iso_week_number = datetime.datetime(iso_year, 1, 1).isocalendar()[1]
    return iso_week_number

def iso_weekday(iso_year, iso_week):
    iso_weekday = datetime.datetime(iso_year, 1, 1)."
1590,Write a Python program to get the frequency of the elements in a given list of lists. Use collections module. ,"from collections import Counter
from itertools import chain
nums = [
        [1,2,3,2],
        [4,5,6,2],
        [7,1,9,5],
       ]
    
print(""Original list of lists:"")
print(nums)
print(""\nFrequency of the elements in the said list of lists:"")
result = Counter(chain.from_iterable(nums))
print(result)
","def get_frequency(lst):
    freq = {}
    for i in lst:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    return freq

lst = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,"
1591,Write a Python program to concatenate N strings. ,"list_of_colors = ['Red', 'White', 'Black']  
colors = '-'.join(list_of_colors)
print()
print(""All Colors: ""+colors)
print()
","def concatenate(str1, str2):
    return str1 + str2

print(concatenate(""Hello"", ""World""))

""""""

def concatenate(str1, str2):
    return str1 + str2

print(concatenate(""Hello"", ""World""))

""""""

def concatenate(str1, str2):
    return str1 + str2

print(concatenate(""Hello"", ""World""))

""""""

def conc"
1592,Write a Python program to calculate the harmonic sum of n-1. ,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1))
    
print(harmonic_sum(7))
print(harmonic_sum(4))
","def harmonic_sum(n):
    return n * (1 + (n - 1) / 2)

n = int(input(""Enter the number of terms: ""))
print(harmonic_sum(n))

""""""

# Solution 1

def harmonic_sum(n):
    return n * (1 + (n - 1) / 2)

n = int(input(""Enter the number of terms: ""))
print(harmonic_sum(n))

# Solution 2"
1593,Write a Python program to create a given flat list of all the keys in a flat dictionary. ,"def keys_only(students):
  return list(students.keys()) 
students = {
  'Laura': 10,
  'Spencer': 11,
  'Bridget': 9,
  'Howard ': 10,
}
print(""Original directory elements:"")
print(students)
print(""\nFlat list of all the keys of the said dictionary:"")
print(keys_only(students))
","python solution.py

""""""

# Solution 1

def create_flat_list(dictionary):
    flat_list = []
    for key in dictionary:
        flat_list.append(key)
    return flat_list

# Solution 2

def create_flat_list(dictionary):
    flat_list = []
    for key in dictionary:
        flat_list.append(key)
    return flat_list

# Solution 3"
1594,"Write a NumPy program to create an array of (3, 4) shape and convert the array elements in smaller chunks. ","import numpy as np
x= np.arange(12).reshape(3, 4)
print(""Original array elements:"")
print(x)
print(""Above array in small chuncks:"")
for a in np.nditer(x, flags=['external_loop'], order='F'):
    print(a)
","import numpy as np

arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

# create a new array of (3, 4) shape
arr_new = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

# convert the array elements in smaller chunks"
1595,Write a Python program to test whether a given path exists or not. If the path exist find the filename and directory portion of the said path. ,"import os
print(""Test a path exists or not:"")
path = r'g:\\testpath\\a.txt'
print(os.path.exists(path))
path = r'g:\\testpath\\p.txt'
print(os.path.exists(path))
print(""\nFile name of the path:"")
print(os.path.basename(path))
print(""\nDir name of the path:"")
print(os.path.dirname(path))
","def solution(path):
    if os.path.exists(path):
        return path
    else:
        return None

print(solution(""/home/karthi/Downloads/test.txt""))

""""""

def solution(path):
    if os.path.exists(path):
        return path
    else:
        return None

print(solution(""/home/karthi/"
1596,Write a Python program to retrieve the current working directory and change the dir (moving up one). ,"import os
print('Current dir:', os.getcwd())
print('\nChange the dir (moving up one):', os.pardir)
os.chdir(os.pardir)
print('Current dir:', os.getcwd())
print('\nChange the dir (moving up one):', os.pardir)
os.chdir(os.pardir)
print('Current dir:', os.getcwd())
","import os
os.chdir('C:\\Users\\srin\\OneDrive\\Desktop\\Python\\Python_Project\\')

print(os.getcwd())

os.chdir('C:\\Users\\srin\\OneDrive\\Desktop\\Python\\Python_Project\\')

print(os.getcwd())

os.chdir('C:\\Users\\srin\\OneDrive\\Desktop\\Python\\Python_Project\\')

print(os."
1597,Write a Pandas program to create a time series using three months frequency. ,"import pandas as pd
time_series = pd.date_range('1/1/2021', periods = 36, freq='3M')
print(""Time series using three months frequency:"")
print(time_series) 
","import pandas as pd

# Create a time series with three months frequency
ts = pd.Series(range(1, 13), index=pd.date_range('1/1/2000', periods=3))

# Create a time series with three months frequency
ts2 = pd.Series(range(1, 13), index=pd.date_range('1/1/2000', periods=3))

# Create a time series with three months frequency
ts3 = pd.Series"
1598,Write a Pandas program to create a comparison of the top 10 years in which the UFO was sighted vs the hours of the day. ,"import pandas as pd
#Source: https://bit.ly/1l9yjm9
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
most_sightings_years = df['Date_time'].dt.year.value_counts().head(10)
def is_top_years(year):
   if year in most_sightings_years.index:
       return year
hour_v_year = df.pivot_table(columns=df['Date_time'].dt.hour,index=df['Date_time'].dt.year.apply(is_top_years),aggfunc='count',values='city')
hour_v_year.columns = hour_v_year.columns.astype(int)
hour_v_year.columns = hour_v_year.columns.astype(str) + "":00""
hour_v_year.index = hour_v_year.index.astype(int)
print(""\nComparison of the top 10 years in which the UFO was sighted vs the hours of the day:"")
print(hour_v_year.head(10))
","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/ufo.csv?raw=true')

df['hour'] = df['hour'].astype(int)

df['year'] = df['year'].astype(int)

df['year'] = df['year'].astype(str)

df"
1599,Write a NumPy program to create a 3X4 array using and iterate over it. ,"import numpy as np
a = np.arange(10,22).reshape((3, 4))
print(""Original array:"")
print(a)
print(""Each element of the array is:"")
for x in np.nditer(a):
  print(x,end="" "")
","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

print(a)

# Solution:

# a = np.array([[1, 2, 3, 4],
#               [5, 6, 7, 8],
#               [9, 10, 11, 12]])

# for i in range(3"
1600,Write a NumPy program to calculate average values of two given NumPy arrays. ,"import numpy as np
array1 = [[0, 1], [2, 3]]
array2 = [[4, 5], [0, 3]]
print(""Original arrays:"")
print(array1)
print(array2)
print(""Average values of two said numpy arrays:"")
result = (np.array(array1) + np.array(array2)) / 2
print(result)
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([6, 7, 8, 9, 10])

print(""Average of a and b is: "", np.average(a, b))

Average of a and b is:  array([6.5, 7.5, 8.5, 9.5, 10.5])

""""""

import numpy as np

a = np.array([1"
1601,Write a NumPy program to search the index of a given array in another given array. ,"import numpy as np
np_array = np.array([[1,2,3], [4,5,6] , [7,8,9], [10, 11, 12]])
test_array = np.array([4,5,6])
print(""Original Numpy array:"")
print(np_array)
print(""Searched array:"")
print(test_array)
print(""Index of the searched array in the original array:"")
print(np.where((np_array == test_array).all(1))[0])
","def search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
target = 5

print(search(arr, target))

""""""

# Solution 1

def search(arr, target):
    for i in range(len(arr)):
        if"
1602,Write a Python program to get the frequency of the elements in a given list of lists. ,"def count_elements_lists(nums):
    nums = [item for sublist in nums for item in sublist]
    dic_data = {}
    for num in nums:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data

nums = [
        [1,2,3,2],
        [4,5,6,2],
        [7,8,9,5],
       ]    
print(""Original list of lists:"")
print(nums)
print(""\nFrequency of the elements in the said list of lists:"")
print(count_elements_lists(nums))
","def get_frequency(lst):
    freq = {}
    for i in lst:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    return freq

lst = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,"
1603,Write a Python program to perform Counter arithmetic and set operations for aggregating results. ,"import collections
c1 = collections.Counter([1, 2, 3, 4, 5])
c2 = collections.Counter([4, 5, 6, 7, 8])
print('C1:', c1)
print('C2:', c2)
print('\nCombined counts:')
print(c1 + c2)
print('\nSubtraction:')
print(c1 - c2)
print('\nIntersection (taking positive minimums):')
print(c1 & c2)
print('\nUnion (taking maximums):')
print(c1 | c2)
","def counter_aggregation(a, b):
    c = 0
    for i in range(len(a)):
        c += a[i] * b[i]
    return c

a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(counter_aggregation(a, b))

"""""""
1604,Write a Python program to create group of similar items of a given list. ,"import itertools as it 

def group_similar_items(seq):
    result =  [list(el) for _, el in it.groupby(seq, lambda x: x.split('_')[0])]
    return result 

colors = ['red_1', 'red_2', 'green_1', 'green_2', 'green_3', 'orange_1', 'orange_2']
print(""Original list:"")
print(colors)
print(""\nGroup similar items of the said list:"")
print(group_similar_items(colors))

colors = ['red_1', 'green-1', 'green_2', 'green_3', 'orange-1', 'orange_2']
print(""\nOriginal list:"")
print(colors)
print(""\nGroup similar items of the said list:"")
print(group_similar_items(colors))
","def group_similar(lst):
    lst_copy = lst.copy()
    lst_copy.sort()
    for i in range(len(lst_copy)):
        for j in range(i+1, len(lst_copy)):
            if lst_copy[i] == lst_copy[j]:
                lst_copy[i], lst_copy[j] = lst_copy[j], lst_copy[i]"
1605,Write a Python program to count and display the vowels of a given text. ,"def vowel(text):
    vowels = ""aeiuoAEIOU""
    print(len([letter for letter in text if letter in vowels]))
    print([letter for letter in text if letter in vowels])
vowel('w3resource');
","s = input(""Enter a string: "")
count = 0
for i in s:
    if i in ""aeiouAEIOU"":
        count += 1
print(""The number of vowels is:"", count)

""""""

s = input(""Enter a string: "")
count = 0
for i in s:
    if i in ""aeiouAEIOU"":
        count += 1
print(""The number of vowels is:"", count)"
1606,Write a Python program to calculate surface volume and area of a cylinder. ,"pi=22/7
height = float(input('Height of cylinder: '))
radian = float(input('Radius of cylinder: '))
volume = pi * radian * radian * height
sur_area = ((2*pi*radian) * height) + ((pi*radian**2)*2)
print(""Volume is: "", volume)
print(""Surface Area is: "", sur_area)
","import math

def cylinder_volume(r, h):
    return math.pi * r**2 * h

def cylinder_area(r, h):
    return math.pi * r**2 * h

print(cylinder_volume(3, 2))
print(cylinder_area(3, 2))

# Output:
# 25.0
# 25.0

# Input:
# r = 3
# h = 2

# Output:
# 25.0"
1607,"Write a Pandas program to create a Pivot table and find the total sale amount region wise, manager wise. ","import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
print(pd.pivot_table(df,index = [""Region"",""Manager""], values = [""Sale_amt""],aggfunc=np.sum))
","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21"
1608,Write a Python program to sort a list of elements using Gnome sort. ,"def  gnome_sort(nums):
    if len(nums) <= 1:
        return nums
        
    i = 1
    
    while i < len(nums):
        if nums[i-1] <= nums[i]:
            i += 1
        else:
            nums[i-1], nums[i] = nums[i], nums[i-1]
            i -= 1
            if (i == 0):
                i = 1
           
user_input = input(""Input numbers separated by a comma:\n"").strip()
nums = [int(item) for item in user_input.split(',')]
gnome_sort(nums)
print(nums)
","def gnome_sort(lst):
    for i in range(len(lst)):
        for j in range(i, len(lst)):
            if lst[j] < lst[i]:
                lst[j], lst[i] = lst[i], lst[j]
    return lst

lst = [10, 5, 2, 3, 1, 7, 4, 6, 8, 9]
print(gnome_sort"
1609,Write a Pandas program to split a given dataframe into groups and list all the keys from the GroupBy object. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])
print(""Original DataFrame:"")
print(df)
print(""\nSplit the data on school_code:"");
gp = df.groupby('school_code')
print(""\nList of all the keys:"")
print(gp.groups.keys())
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

df.groupby('col1').size()

df.groupby('col1').size().sort_values(ascending=False)

df.groupby('col1').size().sort_values(ascending=False).head("
1610,Write a Pandas program to join the two dataframes using the common column of both dataframes. ,"import pandas as pd
student_data1 = pd.DataFrame({
        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5'],
         'name': ['Danniella Fenton', 'Ryder Storey', 'Bryce Jensen', 'Ed Bernal', 'Kwame Morin'], 
        'marks': [200, 210, 190, 222, 199]})

student_data2 = pd.DataFrame({
        'student_id': ['S4', 'S5', 'S6', 'S7', 'S8'],
        'name': ['Scarlette Fisher', 'Carla Williamson', 'Dante Morse', 'Kaiser William', 'Madeeha Preston'], 
        'marks': [201, 200, 198, 219, 201]})

print(""Original DataFrames:"")
print(student_data1)
print(student_data2)
merged_data = pd.merge(student_data1, student_data2, on='student_id', how='inner')
print(""Merged data (inner join):"")
print(merged_data)
","import pandas as pd
import numpy as np

df1 = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})
df2 = pd.DataFrame({'col1': [7, 8, 9], 'col2': [10, 11, 12]})

df = pd.concat([df1, df2])
print(df)

# Solution:"
1611,Write a NumPy program to count a given word in each row of a given array of string values. ,"import numpy as np 

str1 = np.array([['Python','NumPy','Exercises'],
                 ['Python','Pandas','Exercises'],
                 ['Python','Machine learning','Python']])
print(""Original array of string values:"") 
print(str1)
print(""\nCount 'Python' row wise in the above array of string values:"")
print(np.char.count(str1, 'Python'))
","def count_words(values, word):
    count = 0
    for i in range(len(values)):
        if values[i] == word:
            count += 1
    return count

values = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s',"
1612,Write a NumPy program to create an array of 10's with the same shape and type of a given array. ,"import numpy as np
x = np.arange(4, dtype=np.int64)
y = np.full_like(x, 10)
print(y)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], dtype=np.int64)

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], dtype=np.float64"
1613,Write a NumPy program to find and store non-zero unique rows in an array after comparing each row with other row in a given matrix. ,"import numpy as np
arra = np.array([[ 1,  1,  0],
                 [ 0,  0,  0],
                 [ 0,  2,  3],
                 [ 0,  0,  0],
                 [ 0, -1,  1],
                 [ 0,  0,  0]])

print(""Original array:"")
print(arra)
temp = {(0, 0, 0)}
result = []
for idx, row in enumerate(map(tuple, arra)):
    if row not in temp:
        result.append(idx)
print(""\nNon-zero unique rows:"")
print(arra[result])
","import numpy as np

# Create an array of zeros
a = np.zeros((3,3))

# Create an array of ones
b = np.ones((3,3))

# Create an array of random numbers
c = np.random.randint(0,10,(3,3))

# Create a boolean array
d = np.array([[True,False,True],[False,True,"
1614,Write a Python program to print a list of space-separated elements. ,"num = [1, 2, 3, 4, 5]
print(*num)
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21"
1615,Write a Python program to get the top three items in a shop. ,"from heapq import nlargest
from operator import itemgetter
items = {'item1': 45.50, 'item2':35, 'item3': 41.30, 'item4':55, 'item5': 24}
for name, value in nlargest(3, items.items(), key=itemgetter(1)):
    print(name, value)
	","def get_top_three(shop):
    return shop[:3]

print(get_top_three(['apple', 'banana', 'orange']))

""""""

def get_top_three(shop):
    return shop[:3]

print(get_top_three(['apple', 'banana', 'orange']))

""""""

def get_top_three(shop):
    return shop[:3]

print(get_top_three("
1616,Write a Python program to insert an element at a specified position into a given list. ,"def insert_spec_position(x, n_list, pos):
    return n_list[:pos-1]+[x]+n_list[pos-1:]
n_list = [1,1,2,3,4,4,5,1]
print(""Original list:"") 
print(n_list)
kth_position = 3
x = 12
result = insert_spec_position(x, n_list, kth_position)
print(""\nAfter inserting an element at kth position in the said list:"")
print(result)
","def insert_at_position(list, element, position):
    list.insert(position, element)

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
insert_at_position(list, 10, 2)
print(list)

""""""

def insert_at_position(list, element, position):
    list.insert(position, element)

list = [1, 2, 3, 4, 5, 6"
1617,Write a Python program to check if a given function returns True for every element in a list. ,"def every(lst, fn = lambda x: x):
  return all(map(fn, lst))
print(every([4, 2, 3], lambda x: x > 1))
print(every([4, 2, 3], lambda x: x < 1))
print(every([4, 2, 3], lambda x: x == 1))
","def is_prime(n):
    if n == 2 or n == 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(math.sqrt(n)) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True

print(is_prime(2))
print(is_prime("
1618,Write a Pandas program to calculate the frequency counts of each unique value of a given series. ,"import pandas as pd
import numpy as np
num_series = pd.Series(np.take(list('0123456789'), np.random.randint(10, size=40)))
print(""Original Series:"")
print(num_series)
print(""Frequency of each unique value of the said series."")
result = num_series.value_counts()
print(result)
","import pandas as pd

# Create a dataframe from the given data
df = pd.DataFrame({""A"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], ""B"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

# Create a new column in the dataframe called ""Frequency""
df[""Frequency""] = df[""A""].apply(lambda x:"
1619,"Write a NumPy program to sort pairs of first name and last name return their indices. (first by last name, then by first name). ","import numpy as np
first_names =    ('Margery', 'Betsey', 'Shelley', 'Lanell', 'Genesis')
last_names = ('Woolum', 'Battle', 'Plotner', 'Brien', 'Stahl')
x = np.lexsort((first_names, last_names))
print(x)
","import numpy as np

first_name = np.array(['John', 'Jane', 'Jack', 'Jill', 'Jasmine'])
last_name = np.array(['Smith', 'Brown', 'Davis', 'Rodriguez', 'Wilson'])

first_name.sort()
last_name.sort()

print(first_name)
print(last_name)

# Output:
#"
1620,"Write a Pandas program to split the following datasets into groups on customer id and calculate the number of customers starting with 'C', the list of all products and the difference of maximum purchase amount and minimum purchase amount. ","import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'ord_date': ['05-10-2012','09-10-2012','05-10-2012','08-17-2012','10-09-2012','07-27-2012','10-09-2012','10-10-2012','10-10-2012','06-17-2012','07-08-2012','04-25-2012'],
'customer_id':['C3001','C3001','D3005','D3001','C3005','D3001','C3005','D3001','D3005','C3001','D3005','D3005'],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
def customer_id_C(x):
    return (x.str[0] == 'C').sum()
result = df.groupby(['salesman_id'])\
  .agg(customer_id_start_C = ('customer_id', customer_id_C),
       customer_id_list = ('customer_id', lambda x: ', '.join(x)),
       purchase_amt_gap   = ('purch_amt', lambda x: x.max()-x.min())
      )
print(""\nNumber of customers  starting with C, the list of all products and the difference of maximum purchase amount and minimum purchase amount:"")
print(result)
","import pandas as pd
import numpy as np

df = pd.read_csv(""C:\\Users\\DELL\\Desktop\\Python\\Data_Science\\Assignment_2\\Customer_Data.csv"")

df.head()

df.columns

df.shape

df.info()

df.describe()

df."
1621,Write a Python program to read a given CSV file as a dictionary. ,"import csv
data = csv.DictReader(open(""departments.csv""))
print(""CSV file as a dictionary:\n"")
for row in data:
   print(row)
","import csv

with open('data.csv', 'r') as f:
    csv_dict = csv.DictReader(f)
    for row in csv_dict:
        print(row)

""""""

import csv

with open('data.csv', 'r') as f:
    csv_dict = csv.DictReader(f)
    for row in csv_dict:
        print(row)

""""""

import csv"
1622,Write a Pandas program create a series with a PeriodIndex which represents all the calendar month periods in 2029 and 2031. Also print the values for all periods in 2030. ,"import pandas as pd
import numpy as np
pi = pd.Series(np.random.randn(36), 
               pd.period_range('1/1/2029', 
                               '12/31/2031', freq='M'))
print(""PeriodIndex which represents all the calendar month periods in 2029 and 2030:"")
print(pi)
print(""\nValues for all periods in 2030:"")
print(pi['2030'])
","import pandas as pd

# Create a dataframe with the following columns:
# Period Index
# Period
# Year
# Month
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday
# Weekday"
1623,Write a Python program to sort a given list of strings(numbers) numerically using lambda. ,"def sort_numeric_strings(nums_str):
    result = sorted(nums_str, key=lambda el: int(el))
    return result
nums_str = ['4','12','45','7','0','100','200','-12','-500']
print(""Original list:"")
print(nums_str)
print(""\nSort the said list of strings(numbers) numerically:"")
print(sort_numeric_strings(nums_str))
","def sort_numbers(numbers):
    numbers.sort(key=lambda x: x*x)

print(sort_numbers([1, 2, 3, 4, 5]))

""""""

def sort_numbers(numbers):
    numbers.sort(key=lambda x: x*x)

print(sort_numbers([1, 2, 3, 4, 5]))"
1624,Write a Python program to count number of lists in a given list of lists. ,"def count_list(input_list): 
    return len(input_list) 
      
list1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] 
list2 = [[2, 4], [[6,8], [4,5,8]], [10, 12, 14]]   
print(""Original list:"")
print(list1)
print(""\nNumber of lists in said list of lists:"")
print(count_list(list1))
print(""\nOriginal list:"")
print(list2)
print(""\nNumber of lists in said list of lists:"")
print(count_list(list2))
","def count_lists(lst):
    count = 0
    for i in range(len(lst)):
        for j in range(len(lst[i])):
            if lst[i][j] == 'L':
                count += 1
    return count

lst = [['L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L"
1625,"Write a Python program to create a datetime object, converted to the specified timezone using arrow module. ","import arrow
utc = arrow.utcnow()
pacific=arrow.now('US/Pacific')
nyc=arrow.now('America/Chicago').tzinfo
print(pacific.astimezone(nyc))
","import datetime

# Convert the datetime object to a string
print(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))

# Convert the string to a datetime object
print(datetime.datetime.strptime('2021-10-10 12:12:12', '%Y-%m-%d %H:%M:%S'))

# Convert the"
1626,Write a Python program to sort each sublist of strings in a given list of lists. ,"def sort_sublists(input_list):
    result = list(map(sorted, input_list)) 
    return result
color1 = [[""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]]
print(""\nOriginal list:"")
print(color1)  
print(""\nAfter sorting each sublist of the said list of lists:"")
print(sort_sublists(color1))
","def sort_sublists(lst):
    lst.sort()
    return lst

lst = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]
print(sort_sublists(lst))

""""""

def sort_sublists(lst):
    lst.sort()
    return lst

lst = [['a', 'b', 'c'"
1627,"Write a Pandas program to create a Pivot table and find the region wise, item wise unit sold. ","import numpy as np
import pandas as pd
df = pd.read_excel('E:\SaleData.xlsx')
print(pd.pivot_table(df,index=[""Region"", ""Item""], values=""Units"", aggfunc=np.sum))
","import pandas as pd
import numpy as np

df = pd.read_csv(""https://github.com/jbrownlee/Datasets/blob/master/pivot_table.csv?raw=true"")

df.head()

df.columns = ['Region', 'Item', 'Unit Sold']

df.head()

df.head(5)

df.head(5).Region

df.head("
1628,Write a Python program to group the elements of a list based on the given function and returns the count of elements in each group. ,"from collections import defaultdict
def count_by(lst, fn = lambda x: x):
  count = defaultdict(int)
  for val in map(fn, lst):
    count[val] += 1
  return dict(count)
from math import floor
print(count_by([6.1, 4.2, 6.3], floor)) 
print(count_by(['one', 'two', 'three'], len))
","def group_elements(lst, func):
    return len(list(filter(func, lst)))

print(group_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], lambda x: x % 2))

""""""

def group_elements(lst, func):
    return len(list(filter(func, lst)))

print(group_elements([1"
1629,Write a Python program to find tag(s) beneath other tag(s) in a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc,""lxml"")
print(""\na tag(s) Beneath body tag:"")
print(soup.select(""body a""))
print(""\nBeneath html head:"")
print(soup.select(""html head title""))
","import re

# regex pattern to match tag(s)
tag_pattern = r'<[^>]+>'

# regex pattern to match other tags
other_tag_pattern = r'<[^>]+>'

# regex pattern to match tag(s)
tag_pattern_2 = r'<[^>]+>'

# regex pattern to match other tags
other_tag_pattern_2 = r'<[^>]+>"
1630,Write a Python program to sort a given mixed list of integers and strings using lambda. Numbers must be sorted before strings. ,"def sort_mixed_list(mixed_list):
    mixed_list.sort(key=lambda e: (isinstance(e, str), e))
    return mixed_list
mixed_list = [19,'red',12,'green','blue', 10,'white','green',1]
print(""Original list:"")
print(mixed_list)
print(""\nSort the said  mixed list of integers and strings:"")
print(sort_mixed_list(mixed_list))
","def sort_mixed_list(mixed_list):
    mixed_list.sort(key=lambda x: x[0])
    mixed_list.sort(key=lambda x: x[1])
    mixed_list.sort(key=lambda x: x[2])
    mixed_list.sort(key=lambda x: x[3])
    return mixed_list

print(sort_mixed_list([["
1631,Write a Python program to decode a run-length encoded given list. ,"def decode(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]
n_list = [[2, 1], 2, 3, [2, 4], 5, 1]
print(""Original encoded list:"") 
print(n_list)
print(""\nDecode a run-length encoded said list:"")
print(decode(n_list))
","def decode(l):
    # Your code here
    return l

l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47"
1632,Write a Pandas program to convert given datetime to timestamp. ,"import pandas as pd
import datetime as dt
import numpy as np
df = pd.DataFrame(index=pd.DatetimeIndex(start=dt.datetime(2019,1,1,0,0,1),
   end=dt.datetime(2019,1,1,10,0,1), freq='H'))\
   .reset_index().rename(columns={'index':'datetime'})
print(""Sample datetime data:"")
print(df.head(10))
df['ts'] = df.datetime.values.astype(np.int64) // 10 ** 9
print(""\nConvert datetime to timestamp:"")
print (df)
","import datetime

def convert_timestamp(timestamp):
    return datetime.datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')

print(convert_timestamp(1554686400))

""""""

# Solution 1

import datetime

def convert_timestamp(timestamp):
    return datetime.datetime.fromtimestamp(timestamp).strftime('%Y-%m"
1633,"Write a NumPy program to compute the mean, standard deviation, and variance of a given array along the second axis. ","import numpy as np
x = np.arange(6)
print(""\nOriginal array:"")
print(x)
r1 = np.mean(x)
r2 = np.average(x)
assert np.allclose(r1, r2)
print(""\nMean: "", r1)
r1 = np.std(x)
r2 = np.sqrt(np.mean((x - np.mean(x)) ** 2 ))
assert np.allclose(r1, r2)
print(""\nstd: "", 1)
r1= np.var(x)
r2 = np.mean((x - np.mean(x)) ** 2 )
assert np.allclose(r1, r2)
print(""\nvariance: "", r1)
","import numpy as np

arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(arr.mean())
print(arr.std())
print(arr.var())

# Output:
# [2.5 3.5 4.5]
# [5.0 6.0 7.0 8.0]
# [9.0 10"
1634,Write a Pandas program to drop the rows where at least one element is missing in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})

print(""Original Orders DataFrame:"")
print(df)
print(""\nDrop the rows where at least one element is missing:"")
result = df.dropna()
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

df.dropna(axis=0, inplace=True)

df.dropna(axis=1, inplace=True)

df.dropna(axis=1, how='all')

df.dropna(axis=1,"
1635,Write a NumPy program to find the position of the index of a specified value greater than existing value in NumPy array. ,"import numpy as np    
n= 4
nums = np.arange(-6, 6)
print(""\nOriginal array:"")
print(nums)
print(""\nPosition of the index:"")
print(np.argmax(nums>n/2))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Solution:
print(arr.argmax())

# Output:
# 3

# Explanation:
# The index of the 3rd element is 3.

# Solution:
print(arr.argmax())

# Output:
# 3

# Explanation:
# The"
1636,"Write a Python program to get a list of elements that exist in both lists, after applying the provided function to each list element of both. ","def intersection_by(a, b, fn):
  _b = set(map(fn, b))
  return [item for item in a if fn(item) in _b]
from math import floor
print(intersection_by([2.1, 1.2], [2.3, 3.4], floor))
","def get_elements(list1, list2):
    return list1 + list2

print(get_elements([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))

""""""

def get_elements(list1, list2):
    return list1 + list2

print(get_elements([1, 2, 3, 4, 5], [2, 3"
1637,"Write a Python program to create datetime from integers, floats and strings timestamps using arrow module. ","import arrow
i = arrow.get(1857900545)
print(""Date from integers: "")
print(i)
f = arrow.get(1857900545.234323)
print(""\nDate from floats: "")
print(f)
s = arrow.get('1857900545')
print(""\nDate from Strings: "")
print(s)
","import arrow

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp"
1638,Write a Python program to insert an item in front of a given doubly linked list. ,"class Node(object):
    # Singly linked node
    def __init__(self, data=None, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev

class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, data):
        # Append an item 
        new_item = Node(data, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item
        self.count += 1
    
    def iter(self):
        # Iterate the list
        current = self.head
        while current:
            item_val = current.data
            current = current.next
            yield item_val

    def print_foward(self):
        for node in self.iter():
            print(node)   
        
    def insert_start(self, data):        
        if self.head is not None:
            new_node = Node(data, None, None)
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node
            self.count += 1

items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')
items.append_item('SQL')

print(""Original list:"")
items.print_foward()
print(""\nAppend item in front of the list:"")
items.insert_start(""Perl"")
items.print_foward()
","def insertFront(doublyLinkedList, data):
    doublyLinkedList.insert_front(data)

def insertBack(doublyLinkedList, data):
    doublyLinkedList.insert_back(data)

def getFront(doublyLinkedList):
    return doublyLinkedList.get_front()

def getBack(doublyLinkedList):
    return doublyLinkedList.get_back"
1639,Write a Python program to select the odd items of a list. ,"x = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(x[::2])
","def odd_items(lst):
    odd_items = []
    for i in lst:
        if i % 2!= 0:
            odd_items.append(i)
    return odd_items

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(odd_items(lst))

""""""

# Solution:

def odd_items(lst):
    odd_items = []
    for i in"
1640,Write a NumPy program to create an array that represents the rank of each item of a given array. ,"import numpy as numpy
array = numpy.array([24, 27, 30, 29, 18, 14])
print(""Original array:"")
print(array)
argsort_array = array.argsort()
ranks_array = numpy.empty_like(argsort_array)
ranks_array[argsort_array] = numpy.arange(len(array))
print(""\nRank of each item of the said array:"")
print(ranks_array)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.shape)

# rank of each item of arr
print(arr.ndim)

# rank of each item of arr
print(arr.size)

# rank of each item of arr
print(arr.max())

# rank of each item of arr
print(arr.min())"
1641,Write a Pandas program to split a dataset to group by two columns and count by each row. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
orders_data = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3005,3001,3002,3009,3005,3007,3002,3004,3009,3008,3003,3002],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(orders_data)
print(""\nGroup by two columns and count by each row:"")
result = orders_data.groupby(['salesman_id','customer_id']).size().reset_index().groupby(['salesman_id','customer_id'])[[0]].max()
print(result)
","import pandas as pd

# Read the data
df = pd.read_csv(""data/height-weight.csv"")

# Create a groupby object
groupby_object = df.groupby(['Height', 'Weight'])

# Count the rows
print(groupby_object.size())

# Create a dictionary to store the result
result = {}

# Iterate over the groupby object
for name, group in groupby_object:"
1642,Write a NumPy program to encode all the elements of a given array in cp500 and decode it again. ,"import numpy as np
x = np.array(['python exercises', 'PHP', 'java', 'C++'], dtype=np.str)
print(""Original Array:"")
print(x)
encoded_char = np.char.encode(x, 'cp500')
decoded_char = np.char.decode(encoded_char,'cp500')
print(""\nencoded ="", encoded_char)
print(""decoded ="", decoded_char)
","import numpy as np

def encode(arr):
    encoded = np.zeros(len(arr), dtype=int)
    for i in range(len(arr)):
        encoded[i] = arr[i]
    return encoded

def decode(arr):
    decoded = np.zeros(len(arr), dtype=int)
    for i in range(len(arr)):
        decoded[i] ="
1643,"Write a Python program to find the parent's process id, real user ID of the current process and change real user ID. ","import os
print(""Parents process id:"",os.getppid())
uid = os.getuid()
print(""\nUser ID of the current process:"", uid)
uid = 1400
os.setuid(uid)
print(""\nUser ID changed"")
print(""User ID of the current process:"", os.getuid())
","import os
import sys

def get_pid(process_name):
    pid = os.getpid()
    if process_name == ""python"":
        pid = os.getppid()
    return pid

def change_user_id(process_name, user_id):
    pid = get_pid(process_name)
    os.setpgrp(pid, user_id)

if __name__ == ""__"
1644,Write a Python program to valid a IP address. ,"import socket
addr = '127.0.0.2561'
try:
    socket.inet_aton(addr)
    print(""Valid IP"")
except socket.error:
    print(""Invalid IP"")
","def valid_ip(ip):
    if len(ip)!= 8:
        return False
    for i in range(0, len(ip)):
        if not ip[i].isdigit():
            return False
        if not ip[i].isalpha():
            return False
        if not ip[i].isupper():
            return False
        if not ip[i].islower():
            return False
        if not ip[i].isnumeric():
            return False
        if not ip"
1645,Write a Python program to split a list every Nth element. ,"C = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']
def list_slice(S, step):
    return [S[i::step] for i in range(step)]
print(list_slice(C,3))
","def split_every_nth(lst, n):
    return [lst[i:i+n] for i in range(0, len(lst), n)]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
print(split_every_nth(lst, n))

""""""

def split_every_nth(lst, n):
    return [lst[i:i+"
1646,"Write a Python program to add two given lists of different lengths, start from left , using itertools module. ","from itertools import zip_longest

def elementswise_left_join(l1, l2):
    result = [a + b for a,b in zip_longest(l1, l2, fillvalue=0)][::1]
    return result

nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [3, 3, -1, 7]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""\nAdd said two lists from left:"")
print(elementswise_left_join(nums1, nums2))

nums3 = [1, 2, 3, 4, 5, 6]
nums4 = [2, 4, -3]
print(""\nOriginal lists:"")
print(nums3)
print(nums4)
print(""\nAdd said two lists from left:"")
print(elementswise_left_join(nums3, nums4))
","def add_two_lists(list1, list2):
    result = []
    for i in range(len(list1)):
        result.append(list1[i] + list2[i])
    return result

print(add_two_lists([1, 2, 3], [4, 5, 6]))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
1647,Write a Python program to write a list to a file. ,"color = ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']
with open('abc.txt', ""w"") as myfile:
        for c in color:
                myfile.write(""%s\n"" % c)

content = open('abc.txt')
print(content.read())
","import os

def write_list_to_file(list, filename):
    with open(filename, 'w') as file:
        for item in list:
            file.write(str(item) + '\n')

def main():
    filename = 'list.txt'
    write_list_to_file(['Python', 'is', 'awesome'], filename)
    print('File {} created.'.format(filename))

if __name__ == '__main__':"
1648,Write a Python program to find the item with maximum occurrences in a given list. ,"def max_occurrences(nums):
    max_val = 0
    result = nums[0] 
    for i in nums:
        occu = nums.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result

nums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]
print (""Original list:"")
print(nums)
print(""\nItem with maximum occurrences of the said list:"")
print(max_occurrences(nums)) 
","def max_occurrences(lst, item):
    max_occurrences = 0
    for i in lst:
        if i == item:
            max_occurrences += 1
    return max_occurrences

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
item = 9
print(max_occurrences(lst, item))

""""""

def max_occurrences(lst"
1649,Write a NumPy program to compute the covariance matrix of two given arrays. ,"import numpy as np
x = np.array([0, 1, 2])
y = np.array([2, 1, 0])
print(""\nOriginal array1:"")
print(x)
print(""\nOriginal array1:"")
print(y)
print(""\nCovariance matrix of the said arrays:\n"",np.cov(x, y))
","import numpy as np

a = np.array([1, 2, 3, 4])
b = np.array([5, 6, 7, 8])

c = np.cov(a, b)
print(c)

# Output:
[[1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0."
1650,Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a Pandas dataframe and display the last ten rows. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')
df.tail(n=10)
","import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')
df.head(10)

""""""

# Solution 1

import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')
df.head(10)

# Solution 2

import pandas as pd

df = pd."
1651,Write a NumPy program to save a NumPy array to a text file. ,"import numpy as np
a = np.arange(1.0, 2.0, 36.2)
np.savetxt('file.out', a, delimiter=',')
","import numpy as np

arr = np.array([1, 2, 3, 4, 5])

np.savetxt('arr.txt', arr)

arr = np.loadtxt('arr.txt')

arr = np.array([1, 2, 3, 4, 5])

np.savetxt('arr.txt', arr)

arr = np.loadtxt('arr.txt')

arr = np.array([1, 2, 3, 4, 5])"
1652,Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and convert the data to use the hire_date as the index. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx')
result = df.set_index(['hire_date'])
result
","import pandas as pd

employee = pd.read_excel('employee.xlsx')

employee.index = pd.to_datetime(employee.hire_date)

employee.index.name = 'Date'

print(employee)

# Solution:

# import pandas as pd
# import datetime as dt"
1653,Write a Python program to create a datetime from a given timezone-aware datetime using arrow module. ,"import arrow
from datetime import datetime
from dateutil import tz
print(""\nCreate a date from a given date and a given time zone:"")
d1 = arrow.get(datetime(2018, 7, 5), 'US/Pacific')
print(d1)
print(""\nCreate a date from a given date and a time zone object from a string representation:"")
d2 = arrow.get(datetime(2017, 7, 5), tz.gettz('America/Chicago'))
print(d2)
d3 = arrow.get(datetime.now(tz.gettz('US/Pacific')))
print(""\nCreate a date using current datetime and a specified time zone:"")
print(d3)
","import datetime

def datetime_to_arrow(dt):
    return dt.replace(tzinfo=datetime.timezone.utc).astimezone(datetime.timezone.utc)

dt = datetime.datetime(2021, 1, 1, 12, 30, 0, tzinfo=datetime.timezone.utc)
print(datetime_to_arrow(dt))

""""""

# Solution:"
1654,Write a NumPy program to extract all the rows to compute the student weight from a given array (student information) where a specific column starts with a given character. ,"import numpy as np
np.set_printoptions(linewidth=100)
student =  np.array([['01', 'V', 'Debby Pramod', 30.21],
 ['02', 'V', 'Artemiy Ellie', 29.32],
 ['03', 'V', 'Baptist Kamal', 31.00],
 ['04', 'V', 'Lavanya Davide', 30.22],
 ['05', 'V', 'Fulton Antwan', 30.21],
 ['06', 'V', 'Euanthe Sandeep', 31.00],
 ['07', 'V', 'Endzela Sanda', 32.00],
 ['08', 'V', 'Victoire Waman', 29.21],
 ['09', 'V', 'Briar Nur', 30.00],
 ['10', 'V', 'Rose Lykos', 32.00]])
print(""Original array:"")
print(student)
char='E'
result = student[np.char.startswith(student[:,2], char)]
print(""\nTotal weight, where student name starting with"",char)
print(np.round(result[:, 3].astype(float).sum(), 2))
char='D'
result = student[np.char.startswith(student[:,2], char)]
print(""\nTotal weight, where student name starting with"",char)
print(np.round(result[:, 3].astype(float).sum(), 2))
","import numpy as np

arr = np.array([[1,2,3,4,5,6,7,8,9,10],
                [11,12,13,14,15,16,17,18,19,20],
                [21,22,23,24,25,26,27,28,29,30]])

print(arr[:,0])

# Solution"
1655,Write a NumPy program to find the memory size of a NumPy array. ,"import numpy as np
n = np.zeros((4,4))
print(""%d bytes"" % (n.size * n.itemsize))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(arr.nbytes)

# Solution:
# arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
# print(arr.nbytes)

# Solution:
# arr = np.array([1, 2, 3, 4, 5, 6, 7, 8"
1656,Write a Python program to check whether an instance is complex or not. ,"import json

def encode_complex(object):
    # check using isinstance method
    if isinstance(object, complex):
        return [object.real, object.imag]
    # raised error if object is not complex
    raise TypeError(repr(object) + "" is not JSON serialized"")

complex_obj = json.dumps(2 + 3j, default=encode_complex)
print(complex_obj) 
","def is_complex(obj):
    if type(obj) == complex:
        return True
    else:
        return False

print(is_complex(1+2j))

""""""

# Solution:

def is_complex(obj):
    if type(obj) == complex:
        return True
    else:
        return False

print(is_complex(1+2j))"
1657,Write a Python program to print the numbers of a specified list after removing even numbers from it. ,"num = [7,8, 120, 25, 44, 20, 27]
num = [x for x in num if x%2!=0]
print(num)
","import math

def remove_even(lst):
    for i in range(len(lst)):
        if lst[i] % 2 == 0:
            lst.remove(lst[i])
    return lst

print(remove_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

# Output: [1, 3, 5, 7, 9]

# Time complexity: O("
1658,Write a Python program to insert tags or strings immediately before specified tags or strings. ,"from bs4 import BeautifulSoup
soup = BeautifulSoup(""<b>w3resource.com</b>"", ""lxml"")
print(""Original Markup:"")
print(soup.b)
tag = soup.new_tag(""i"")
tag.string = ""Python""
print(""\nNew Markup, before inserting the text:"")
soup.b.string.insert_before(tag)
print(soup.b)
","def insert_tags(s, tags):
    return s.replace(tags, '<{}>'.format(tags))

print(insert_tags('<b>Hello</b>', 'bold'))

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

''"
1659,Write a Python program to convert an array to an ordinary list with the same items. ,"from array import *
array_num = array('i', [1, 3, 5, 3, 7, 1, 9, 3])
print(""Original array: ""+str(array_num))
num_list = array_num.tolist()
print(""Convert the said array to an ordinary list with the same items:"")
print(num_list)
","arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

arr = list(arr)

arr[0] = 100

arr[1:4] = [100, 200, 300]

arr[4:7] = [100, 200, 300, 400]

arr[7:9] = [100, 200, 300, 400, 500, 600, 700]

arr[9:11] = [100, 200"
1660,Write a Python function to check whether a string is a pangram or not. ,"import string, sys
def ispangram(str1, alphabet=string.ascii_lowercase):
    alphaset = set(alphabet)
    return alphaset <= set(str1.lower())
 
print ( ispangram('The quick brown fox jumps over the lazy dog')) 
","def is_pangram(string):
    for i in range(len(string)):
        if string[i] not in alphabet:
            return False
    return True

print(is_pangram(""The quick brown fox jumps over the lazy dog""))

""""""

def is_pangram(string):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    for i in range(len(string)):
        if"
1661,Write a Python program to create a new deque with three items and iterate over the deque's elements. ,"from collections import deque
dq = deque('aeiou')
for element in dq:
   print(element)
","def deque(items):
    new_deque = deque()
    for i in items:
        new_deque.append(i)
    return new_deque

items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(deque(items))

""""""

# Solution 1

def deque(items):
    new_deque = deque()
    for i"
1662,Write a NumPy program to convert a PIL Image into a NumPy array. ,"import numpy as np
import PIL
img_data = PIL.Image.open('w3resource-logo.png' )
img_arr = np.array(img_data) 
print(img_arr)
","import numpy as np

img = Image.open('lena.png')
arr = np.array(img)

arr.shape

arr.dtype

arr.size

arr.ndim

arr.shape[0]

arr.shape[1]

arr.shape[2]

arr.size

arr.size

arr.size

arr.size

arr.size

arr.size

arr.size"
1663,Write a Pandas program to create a Timewheel of Hour Vs Year comparison of the top 10 years in which the UFO was sighted. ,"import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.cm as cm
#Source: https://bit.ly/2XDY2XN
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
most_sightings_years = df['Date_time'].dt.year.value_counts().head(10)
def is_top_years(year):
   if year in most_sightings_years.index:
       return year
month_vs_year = df.pivot_table(columns=df['Date_time'].dt.month,index=df['Date_time'].dt.year.apply(is_top_years),aggfunc='count',values='city')
month_vs_year.index = month_vs_year.index.astype(int)
month_vs_year.columns = month_vs_year.columns.astype(int)
print(""\nComparison of the top 10 years in which the UFO was sighted vs each month:"")
def pie_heatmap(table, cmap='coolwarm_r', vmin=None, vmax=None,inner_r=0.25, pie_args={}):
   n, m = table.shape
   vmin= table.min().min() if vmin is None else vmin
   vmax= table.max().max() if vmax is None else vmax

   centre_circle = plt.Circle((0,0),inner_r,edgecolor='black',facecolor='white',fill=True,linewidth=0.25)
   plt.gcf().gca().add_artist(centre_circle)
   norm = mpl.colors.Normalize(vmin=vmin, vmax=vmax)
   cmapper = cm.ScalarMappable(norm=norm, cmap=cmap)

   for i, (row_name, row) in enumerate(table.iterrows()):
       labels = None if i > 0 else table.columns
       wedges = plt.pie([1] * m,radius=inner_r+float(n-i)/n, colors=[cmapper.to_rgba(x) for x in row.values],
           labels=labels, startangle=90, counterclock=False, wedgeprops={'linewidth':-1}, **pie_args)
       plt.setp(wedges[0], edgecolor='grey',linewidth=1.5)
       wedges = plt.pie([1], radius=inner_r+float(n-i-1)/n, colors=['w'], labels=[row_name], startangle=-90, wedgeprops={'linewidth':0})
       plt.setp(wedges[0], edgecolor='grey',linewidth=1.5)
plt.figure(figsize=(8,8))
plt.title(""Timewheel of Hour Vs Year"",y=1.08,fontsize=30)
pie_heatmap(month_vs_year, vmin=-20,vmax=80,inner_r=0.2)
","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/UFO%20Visits.csv?raw=true')

df['Year'] = df['Year'].astype(str)
df['Year'] = df['Year'].str.replace('[^0-9]', '')
df['Year'] = df"
1664,Write a NumPy program to check whether two arrays are equal (element wise) or not. ,"import numpy as np
nums1 = np.array([0.5, 1.5, 0.2])
nums2 = np.array([0.4999999999, 1.500000000, 0.2])
np.set_printoptions(precision=15)
print(""Original arrays:"")
print(nums1)
print(nums2)
print(""\nTest said two arrays are equal (element wise) or not:?"")
print(nums1 == nums2)
nums1 = np.array([0.5, 1.5, 0.23])
nums2 = np.array([0.4999999999, 1.5000000001, 0.23])
print(""\nOriginal arrays:"")
np.set_printoptions(precision=15)
print(nums1)
print(nums2)
print(""\nTest said two arrays are equal (element wise) or not:?"")
print(np.equal(nums1, nums2))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([1, 2, 3, 4, 5])

print(a == b)

# Output:
# True
# True
# True
# True

# Hint: You can use the built-in function np.array_equal to check whether two arrays are equal.

# Hint: You can use the built-in function np."
1665,"Write a Python program to add two given lists of different lengths, start from right. ","def elementswise_right_join(l1, l2):
    f_len = len(l1)-(len(l2) - 1)
    for i in range(len(l1), 0, -1):
        if i-f_len < 0:
            break
        else:
            l1[i-1] = l1[i-1] + l2[i-f_len]
    return l1

nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [3, 3, -1, 7]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""\nAdd said two lists from left:"")
print(elementswise_right_join(nums1, nums2))

nums3 = [1, 2, 3, 4, 5, 6]
nums4 = [2, 4, -3]
print(""\nOriginal lists:"")
print(nums3)
print(nums4)
print(""\nAdd said two lists from left:"")
print(elementswise_right_join(nums3, nums4))
","def add_two_lists(list1, list2):
    list1.append(list2[0])
    list1.append(list2[1])
    return list1

print(add_two_lists([1, 2, 3], [4, 5, 6]))

""""""

def add_two_lists(list1, list2):
    list1.append(list2[0])
    list1.append(list2[1])"
1666,Write a Python program find the sorted sequence from a set of permutations of a given input. ,"from itertools import permutations
from more_itertools import windowed 
def is_seq_sorted(lst):
  print(lst)  
  return all(
    x <= y
    for x, y in windowed(lst, 2)
  )
def permutation_sort(lst):
  return next(
    permutation_seq
    for permutation_seq in permutations(lst)
    if is_seq_sorted(permutation_seq)
  )
print(""All the sequences:"")
print(""\nSorted sequence: "",permutation_sort([12, 10, 9]))

print(""\n\nAll the sequences:"")
print(""\nSorted sequence: "",permutation_sort([2, 3, 1, 0]))
","import sys

def find_permutation(permutation, input_list):
    for i in range(len(permutation)):
        if permutation[i] in input_list:
            return permutation[i]
    return -1

def main():
    input_list = []
    input_list = sys.stdin.readline().strip().split()
    input_list = list(map(int, input_list))
    permutation = []"
1667,Write a Pandas program to calculate all the sighting days of the unidentified flying object (ufo) from current date. ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
now = pd.to_datetime('today')
print(""Original Dataframe:"")
print(df.head())
print(""\nCurrent date:"")
print(now)
","# Solution:

# Input:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date:
# Date"
1668,"Write a Python program to add two given lists of different lengths, start from right , using itertools module. ","from itertools import zip_longest

def elementswise_right_join(l1, l2):
    result = [a + b for a,b in zip_longest(reversed(l1), reversed(l2), fillvalue=0)][::-1]
    return result

nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [3, 3, -1, 7]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""\nAdd said two lists from right:"")
print(elementswise_right_join(nums1, nums2))

nums3 = [1, 2, 3, 4, 5, 6]
nums4 = [2, 4, -3]
print(""\nOriginal lists:"")
print(nums3)
print(nums4)
print(""\nAdd said two lists from right:"")
print(elementswise_right_join(nums3, nums4))
","def add_two_lists(list1, list2):
    for i in range(len(list1)):
        list1[i] += list2[i]
    return list1

print(add_two_lists([1, 2, 3], [4, 5, 6]))

""""""

def add_two_lists(list1, list2):
    for i in range(len(list1)):
        list1["
1669,Write a Pandas program to replace NaNs with median or mean of the specified columns in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""Using median in purch_amt to replace NaN:"")
df['purch_amt'].fillna(df['purch_amt'].median(), inplace=True)
print(df)
print(""Using mean to replace NaN:"")
df['sale_amt'].fillna(int(df['sale_amt'].mean()), inplace=True)
print(df)
","import pandas as pd

# Read the data
df = pd.read_csv(""data/data.csv"")

# Replace NaNs with median or mean of the specified columns
df.fillna(df.median(), inplace=True)

# Print the dataframe
print(df)

# Create a new dataframe with the median or mean of the specified columns
df_median = df.copy()
df_median.fill"
1670,Write a Python program to change the tag's contents and replace with the given string. ,"from bs4 import BeautifulSoup
html_doc = '<a href=""http://example.com/"">HTML<i>example.com</i></a>'
soup = BeautifulSoup(html_doc, ""lxml"")
tag = soup.a
print(""\nOriginal Markup:"")
print(tag)
print(""\nOriginal Markup with new text:"")
tag.string = ""CSS""
print(tag)
","import re

def solution(s):
    s = re.sub(r'<[^<>]+>', '', s)
    s = re.sub(r'<[^<>]+>', '', s)
    s = re.sub(r'<[^<>]+>', '', s)
    s = re.sub(r'<[^<>]+>', '', s)
    s = re.sub(r'<[^"
1671,"Write a Python program to get the symmetric difference between two lists, after applying the provided function to each list element of both. ","def symmetric_difference_by(a, b, fn):
  (_a, _b) = (set(map(fn, a)), set(map(fn, b)))
  return [item for item in a if fn(item) not in _b] + [item
          for item in b if fn(item) not in _a]
from math import floor
print(symmetric_difference_by([2.1, 1.2], [2.3, 3.4], floor))
","def symmetricDifference(list1, list2):
    list1.sort()
    list2.sort()
    return list1[0] - list2[0]

print(symmetricDifference([1, 2, 3], [2, 3, 4]))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
1672,Write a NumPy program to collapse a 3-D array into one dimension array. ,"import numpy as np
x = np.eye(3)
print(""3-D array:"")
print(x)
f = np.ravel(x, order='F')
print(""One dimension array:"")
print(f)
","import numpy as np

x = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(x)

# Solution:
x = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(x.reshape(3, -1))

# Solution:
x = np.array([[1, 2, 3], [4, 5"
1673,"Write a Python script to generate and print a dictionary that contains a number (between 1 and n) in the form (x, x*x). ","n=int(input(""Input a number ""))
d = dict()

for x in range(1,n+1):
    d[x]=x*x

print(d) 
","# Solution:

# Sample Input:

# 5

# Sample Output:

# {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

# Expected Output:

# {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

# Solution:

# Solution:

# Sample Input:

# 3

#"
1674,Write a Pandas program to find out the records where consumption of beverages per person average >=5 and Beverage Types is Beer from world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details: average consumption of \nbeverages per person >=5 and Beverage Types is Beer:"")
print(w_a_con[(w_a_con['Display Value'] >= 5) & (w_a_con['Beverage Types'] == 'Beer')].head(10))
","import pandas as pd

# Read the data
df = pd.read_csv('world_beverages.csv')

# Create a new column 'Beer'
df['Beer'] = df['World_Beverages'].apply(lambda x: 'Beer' if x >= 5 else 'Not Beer')

# Create a new column 'Beer_Types'
df['Beer_Types'] = df['Beer'"
1675,"Write a Python program to a list of all the h1, h2, h3 tags from the webpage python.org. ","import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""List of all the h1, h2, h3 :"")
for heading in soup.find_all([""h1"", ""h2"", ""h3""]):
    print(heading.name + ' ' + heading.text.strip())

","python solution.py

""""""

import requests
import bs4

def get_html(url):
    r = requests.get(url)
    return r.text

def get_soup(html):
    soup = bs4.BeautifulSoup(html, 'html.parser')
    return soup

def get_h1_tags(soup):
    h1_tags = soup.find_all"
1676,Write a Python program to print a given doubly linked list in reverse order. ,"class Node(object):
    # Singly linked node
    def __init__(self, data=None, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev

class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, data):
        # Append an item 
        new_item = Node(data, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item
        self.count += 1
    
    def iter(self):
        # Iterate the list
        current = self.head
        while current:
            item_val = current.data
            current = current.next
            yield item_val

    def print_foward(self):
        for node in self.iter():
            print(node)   
        
    def reverse(self):
        """""" Reverse linked list. """"""
        current = self.head
        while current:
            temp = current.next
            current.next = current.prev
            current.prev = temp
            current = current.prev
        temp = self.head
        self.head = self.tail
        self.tail = temp

items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')
items.append_item('SQL')

print(""Reverse list "")
items.reverse()
items.print_foward()
","# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None, prev=None):
#         self.val = val
#         self.next = next
#         self.prev = prev
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if head is None:
            return head
        
        prev = None
        curr = head
        
        while"
1677,"Write a NumPy program to replace ""PHP"" with ""Python"" in the element of a given array. ","import numpy as np
x = np.array(['PHP Exercises, Practice, Solution'], dtype=np.str)
print(""\nOriginal Array:"")
print(x)
r = np.char.replace(x, ""PHP"", ""Python"")
print(""\nNew array:"")
print(r)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr[arr == ""PHP""] = ""Python""

print(arr)

""""""

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr[arr == ""PHP""] = ""Python""

print(arr)"
1678,Write a Python program to create multiple lists. ,"obj = {}
for i in range(1, 21):
    obj[str(i)] = []
print(obj)
","def create_list(n):
    lst = []
    for i in range(n):
        lst.append(i)
    return lst

n = int(input(""Enter the number of elements: ""))
print(create_list(n))

""""""

# Solution 1

def create_list(n):
    lst = []
    for i in range(n):
        lst.append(i)
    return lst

n = int(input(""Enter the number"
1679,Write a Python program to remove duplicate words from a given list of strings. ,"def unique_list(l):
    temp = []
    for x in l:
        if x not in temp:
            temp.append(x)
    return temp

text_str = [""Python"", ""Exercises"", ""Practice"", ""Solution"", ""Exercises""]
print(""Original String:"")
print(text_str)
print(""\nAfter removing duplicate words from the said list of strings:"")
print(unique_list(text_str))
","def remove_duplicate_words(words):
    words_set = set(words)
    return list(words_set)

print(remove_duplicate_words([""apple"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", ""app"", """
1680,Write a Python program to split a variable length string into variables. ,"var_list = ['a', 'b', 'c']
x, y, z = (var_list + [None] * 3)[:3]
print(x, y, z)
var_list = [100, 20.25]
x, y = (var_list + [None] * 2)[:2]
print(x, y)
","def split_string(string):
    return string.split()

print(split_string(""This is a string with spaces""))

""""""

def split_string(string):
    return string.split()

print(split_string(""This is a string with spaces""))

""""""

def split_string(string):
    return string.split()

print(split_string(""This is a string with spaces""))

""""""

def split_string(string):
    return string."
1681,br/>,"row_num = int(input(""Input number of rows: ""))
col_num = int(input(""Input number of columns: ""))
multi_list = [[0 for col in range(col_num)] for row in range(row_num)]

for row in range(row_num):
    for col in range(col_num):
        multi_list[row][col]= row*col

print(multi_list)
","def solution(n):
    if n == 1:
        return 1
    else:
        return n * solution(n-1)

print(solution(5))

# Output:
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# 1"
1682,Difference between List comprehension and Lambda in Python,"lst = [x ** 2 for x in range (1, 11) if x % 2 == 1]
print(lst)","def solution(A):
    return [A[i] for i in range(len(A)) if A[i] % 2 == 0]

""""""

def solution(A):
    return [A[i] for i in range(len(A)) if A[i] % 2 == 0]

print(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(solution([1, 2, 3, 4, 5, 6, 7, 8"
1683,Write a Python program to Convert Snake case to Pascal case,"# Python3 code to demonstrate working of
# Convert Snake case to Pascal case
# Using title() + replace()

# initializing string
test_str = 'geeksforgeeks_is_best'

# printing original string
print(""The original string is : "" + test_str)

# Convert Snake case to Pascal case
# Using title() + replace()
res = test_str.replace(""_"", "" "").title().replace("" "", """")

# printing result
print(""The String after changing case : "" + str(res))","def convert_snake_case(s):
    return s.title()

print(convert_snake_case(""SNAKE_CASE""))

""""""

# Solution 1

def convert_snake_case(s):
    return s.title()

print(convert_snake_case(""SNAKE_CASE""))

# Solution 2

def convert_snake_case(s):
    return s.title().replace(""_"", "" "").replace(""-"","
1684,Check whether a Numpy array contains a specified row in Python,"# importing package
import numpy

# create numpy array
arr = numpy.array([[1, 2, 3, 4, 5],
[6, 7, 8, 9, 10],
[11, 12, 13, 14, 15],
[16, 17, 18, 19, 20]
])

# view array
print(arr)

# check for some lists
print([1, 2, 3, 4, 5] in arr.tolist())
print([16, 17, 20, 19, 18] in arr.tolist())
print([3, 2, 5, -4, 5] in arr.tolist())
print([11, 12, 13, 14, 15] in arr.tolist())","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])

if a[0, 0] == 1:
    print(""Row 0 contains 1"")
else:
    print(""Row 0 does not contain 1"")

if a[1, 0] == 2:
    print(""Row 1 contains 2"")
else:
    print(""Row 1 does not contain 2"")

if a[0, 1] == 3:
    print(""Row 0"
1685,Write a Python program to convert Set into Tuple and Tuple into Set,"# program to convert set to tuple
# create set
s = {'a', 'b', 'c', 'd', 'e'}

# print set
print(type(s), "" "", s)

# call tuple() method
# this method convert set to tuple
t = tuple(s)

# print tuple
print(type(t), "" "", t)","def set_tuple(set_tuple):
    return tuple(set_tuple)

def set_tuple_into_set(set_tuple):
    return set(set_tuple)

def set_tuple_into_tuple(set_tuple):
    return tuple(set_tuple)

def set_tuple_into_set_into_set(set_tuple):
    return set(set_tuple)

def set_t"
1686,Write a Python datetime to integer timestamp,"from datetime import datetime
curr_dt = datetime.now()


print(""Current datetime: "", curr_dt)
timestamp = int(round(curr_dt.timestamp()))


print(""Integer timestamp of current datetime: "",
timestamp)","import datetime

def datetime_to_timestamp(dt):
    return int(dt.timestamp())

def timestamp_to_datetime(ts):
    return datetime.datetime.fromtimestamp(ts)

def timestamp_to_datetime_str(ts):
    return datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')

def timestamp_to_datetime_str_with_tz(ts):"
1687,Different ways to iterate over rows in Pandas Dataframe in Python,"# import pandas package as pd
import pandas as pd

# Define a dictionary containing students data
data = {'Name': ['Ankit', 'Amit', 'Aishwarya', 'Priyanka'],
'Age': [21, 19, 20, 18],
'Stream': ['Math', 'Commerce', 'Arts', 'Biology'],
'Percentage': [88, 92, 95, 70]}

# Convert the dictionary into DataFrame
df = pd.DataFrame(data, columns = ['Name', 'Age', 'Stream', 'Percentage'])

print(""Given Dataframe :\n"", df)

print(""\nIterating over rows using index attribute :\n"")

# iterate through each row and select
# 'Name' and 'Stream' column respectively.
for ind in df.index:
print(df['Name'][ind], df['Stream'][ind])","df = pd.DataFrame({'A': [1, 2, 3, 4, 5],
                   'B': [10, 20, 30, 40, 50]})

# Iterate over rows in the Dataframe
for row in df.iterrows():
    print(row)

# Iterate over columns in the Dataframe
for col in df.columns:
    print(col)

# Iterate over rows and columns in the Dataframe
for row, col in df.iterrows"
1688,Write a Python program to Sort Nested keys by Value,"# Python3 code to demonstrate working of
# Sort Nested keys by Value
# Using sorted() + generator expression + lamda

# initializing dictionary
test_dict = {'Nikhil' : {'English' : 5, 'Maths' : 2, 'Science' : 14},
'Akash' : {'English' : 15, 'Maths' : 7, 'Science' : 2},
'Akshat' : {'English' : 5, 'Maths' : 50, 'Science' : 20}}

# printing original dictionary
print(""The original dictionary : "" + str(test_dict))

# Sort Nested keys by Value
# Using sorted() + generator expression + lamda
res = {key : dict(sorted(val.items(), key = lambda ele: ele[1]))
for key, val in test_dict.items()}

# printing result
print(""The sorted dictionary : "" + str(res))","def sort_nested_keys(dictionary):
    for key, value in dictionary.items():
        if isinstance(value, dict):
            sort_nested_keys(value)
        else:
            dictionary[key] = value
    return dictionary

dictionary = {'a': 1, 'b': 2, 'c': 3}
print(sort_nested_keys(dictionary))

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
1689,Download Google Image Using Python and Selenium,"from selenium import webdriver
from selenium.webdriver.common.keys import Keys
import time

# What you enter here will be searched for in
# Google Images
query = ""dogs""

# Creating a webdriver instance
driver = webdriver.Chrome('Enter-Location-Of-Your-Webdriver')

# Maximize the screen
driver.maximize_window()

# Open Google Images in the browser
driver.get('https://images.google.com/')

# Finding the search box
box = driver.find_element_by_xpath('//*[@id=""sbtc""]/div/div[2]/input')

# Type the search query in the search box
box.send_keys(query)

# Pressing enter
box.send_keys(Keys.ENTER)

# Fumction for scrolling to the bottom of Google
# Images results
def scroll_to_bottom():

last_height = driver.execute_script('\
return document.body.scrollHeight')

while True:
driver.execute_script('\
window.scrollTo(0,document.body.scrollHeight)')

# waiting for the results to load
# Increase the sleep time if your internet is slow
time.sleep(3)

new_height = driver.execute_script('\
return document.body.scrollHeight')

# click on ""Show more results"" (if exists)
try:
driver.find_element_by_css_selector("".YstHxe input"").click()

# waiting for the results to load
# Increase the sleep time if your internet is slow
time.sleep(3)

except:
pass

# checking if we have reached the bottom of the page
if new_height == last_height:
break

last_height = new_height


# Calling the function

# NOTE: If you only want to capture a few images,
# there is no need to use the scroll_to_bottom() function.
scroll_to_bottom()


# Loop to capture and save each image
for i in range(1, 50):

# range(1, 50) will capture images 1 to 49 of the search results
# You can change the range as per your need.
try:

# XPath of each image
img = driver.find_element_by_xpath(
'//*[@id=""islrg""]/div[1]/div[' +
str(i) + ']/a[1]/div[1]/img')

# Enter the location of folder in which
# the images will be saved
img.screenshot('Download-Location' +
query + ' (' + str(i) + ').png')
# Each new screenshot will automatically
# have its name updated

# Just to avoid unwanted errors
time.sleep(0.2)

except:

# if we can't find the XPath of an image,
# we skip to the next image
continue

# Finally, we close the driver
driver.close()","import requests
from bs4 import BeautifulSoup

url = ""https://www.google.com/search?q=python+image+download&sxsrf=ALeKk00ZWxkKFk0KVQqYTJKVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV"
1690,How to compare two NumPy arrays in Python,"import numpy as np

an_array = np.array([[1, 2], [3, 4]])
another_array = np.array([[1, 2], [3, 4]])

comparison = an_array == another_array
equal_arrays = comparison.all()

print(equal_arrays)","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([6, 7, 8, 9, 10])

print(a == b)

# Output:
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True"
1691,Write a Python program to Avoid Last occurrence of delimitter,"# Python3 code to demonstrate working of
# Avoid Last occurrence of delimitter
# Using map() + join() + str()

# initializing list
test_list = [4, 7, 8, 3, 2, 1, 9]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing delim
delim = ""$""

# appending delim to join
# will leave stray ""$"" at end
res = ''
for ele in test_list:
res += str(ele) + ""$""

# removing last using slicing
res = res[:len(res) - 1]

# printing result
print(""The joined string : "" + str(res))","def solution(delimiter, source):
    # your code goes here
    return source.replace(delimiter, "" "")

print(solution(""."", ""Hello World!""))

""""""

def solution(delimiter, source):
    # your code goes here
    return source.replace(delimiter, "" "")

print(solution(""."", ""Hello World!""))

""""""

def solution(delimiter, source):
    # your code goes here
    return source."
1692,Get unique values from a column in Pandas DataFrame in Python,"# Import pandas package
import pandas as pd

# create a dictionary with five fields each
data = {
'A':['A1', 'A2', 'A3', 'A4', 'A5'],
'B':['B1', 'B2', 'B3', 'B4', 'B4'],
'C':['C1', 'C2', 'C3', 'C3', 'C3'],
'D':['D1', 'D2', 'D2', 'D2', 'D2'],
'E':['E1', 'E1', 'E1', 'E1', 'E1'] }

# Convert the dictionary into DataFrame
df = pd.DataFrame(data)

# Get the unique values of 'B' column
df.B.unique()","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})
print(df)

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})
# print(df)
# unique_values = df.col1"
1693,GUI to generate and store passwords in SQLite using Python,"import random
import webbrowser
from tkinter import *
from tkinter import ttk
from tkinter import messagebox
import back
import csv
from ttkbootstrap import *




class window:
# these are lists of initialized characters
digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']


lc = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
'm', 'n', 'o', 'p', 'q',
'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

uc = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
'I', 'J', 'K', 'M', 'N', 'O', 'p', 'Q',
'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

sym = ['@', '#', '$', '%', '=', ':', '?', '.', '/', '|',
'~', '>', '*', '<']

def __init__(self, root, geo, title) -> None:
self.root = root
self.root.title(title)
self.root.geometry(geo)
self.root.resizable(width=False, height=False)


Label(self.root, text='Your Password').grid(
row=0, column=0, padx=10, pady=10)
Label(self.root, text='Corresponding User_id').grid(
row=1, column=0, padx=10, pady=10)
Label(self.root, text='Of').grid(row=2, column=0, padx=10, pady=10)
self.pa = StringVar()
self.user_id = StringVar()
self.site = StringVar()
ttk.Entry(self.root, width=30, textvariable=self.pa
).grid(row=0, column=1, padx=10, pady=10)
ttk.Entry(self.root, width=30, textvariable=self.user_id
).grid(row=1, column=1, padx=10, pady=10)
ttk.Entry(self.root, width=30, textvariable=self.site
).grid(row=2, column=1, padx=10, pady=10)
self.length = StringVar()


e = ttk.Combobox(self.root, values=['4', '8', '12', '16', '20', '24'],
textvariable=self.length)
e.grid(row=0, column=2)
e['state'] = 'readonly'
self.length.set('Set password length')


ttk.Button(self.root, text='Generate', padding=5,
style='success.Outline.TButton', width=20,
command=self.generate).grid(row=1, column=2)

ttk.Button(self.root, text='Save to Database', style='success.TButton',
width=20, padding=5, command=self.save).grid(row=3, column=2)

ttk.Button(self.root, text='Delete', width=20, style='danger.TButton',
padding=5, command=self.erase).grid(row=2, column=2)

ttk.Button(self.root, text='Show All', width=20, padding=5,
command=self.view).grid(row=3, column=0)

ttk.Button(self.root, text='Update', width=20, padding=5,
command=self.update).grid(row=3, column=1)


# ========self.tree view=============
self.tree = ttk.Treeview(self.root, height=5)
self.tree['columns'] = ('site', 'user', 'pas')
self.tree.column('#0', width=0, stretch=NO)
self.tree.column('site', width=160, anchor=W)
self.tree.column('user', width=140, anchor=W)
self.tree.column('pas', width=180, anchor=W)
self.tree.heading('#0', text='')
self.tree.heading('site', text='Site name')
self.tree.heading('user', text='User Id')
self.tree.heading('pas', text='Password')
self.tree.grid(row=4, column=0, columnspan=3, pady=10)
self.tree.bind(""<ButtonRelease-1>"", self.catch)
# this command will call the catch function


# this is right click pop-up menu
self.menu = Menu(self.root, tearoff=False)
self.menu.add_command(label='Refresh', command=self.refresh)
self.menu.add_command(label='Insert', command=self.save)
self.menu.add_command(label='Update', command=self.update)
self.menu.add_separator()
self.menu.add_command(label='Show All', command=self.view)
self.menu.add_command(label='Clear Fields', command=self.clear)
self.menu.add_command(label='Clear Table', command=self.table)
self.menu.add_command(label='Export', command=self.export)
self.menu.add_separator()
self.menu.add_command(label='Delete', command=self.erase)
self.menu.add_command(label='Help', command=self.help)
self.menu.add_separator()
self.menu.add_command(label='Exit', command=self.root.quit)
# this binds the button 3 of the mouse with
self.root.bind(""<Button-3>"", self.poppin)
# poppin function


def help(self):
# this function will open the help.txt in
# notepad when called
webbrowser.open('help.txt')


def refresh(self):
# this function basically refreshes the table
# or tree view
self.table()
self.view()


def table(self):
# this function will clear all the values
# displayed in the table
for r in self.tree.get_children():
self.tree.delete(r)


def clear(self):
# this function will clear all the entry
# fields
self.pa.set('')
self.user_id.set('')
self.site.set('')


def poppin(self, e):
# it triggers the right click pop-up menu
self.menu.tk_popup(e.x_root, e.y_root)


def catch(self, event):
# this function will take all the selected data
# from the table/ tree view and will fill up the
# respective entry fields
self.pa.set('')
self.user_id.set('')
self.site.set('')
selected = self.tree.focus()
value = self.tree.item(selected, 'value')
self.site.set(value[0])
self.user_id.set(value[1])
self.pa.set(value[2])


def update(self):
# this function will update database with new
# values given by the user
selected = self.tree.focus()
value = self.tree.item(selected, 'value')
back.edit(self.site.get(), self.user_id.get(), self.pa.get())
self.refresh()


def view(self):
# this will show all the data from the database
# this is similar to ""SELECT * FROM TABLE"" sql
# command
if back.check() is False:
messagebox.showerror('Attention Amigo!', 'Database is EMPTY!')
else:
for row in back.show():
self.tree.insert(parent='', text='', index='end',
values=(row[0], row[1], row[2]))


def erase(self):
# this will delete or remove the selected tuple or
# row from the database
selected = self.tree.focus()
value = self.tree.item(selected, 'value')
back.Del(value[2])
self.refresh()


def save(self):
# this function will insert all the data into the
# database
back.enter(self.site.get(), self.user_id.get(), self.pa.get())
self.tree.insert(parent='', index='end', text='',
values=(self.site.get(), self.user_id.get(), self.pa.get()))


def generate(self):
# this function will produce a random string which
# will be used as password
if self.length.get() == 'Set password length':
messagebox.showerror('Attention!', ""You forgot to SELECT"")
else:
a = ''
for x in range(int(int(self.length.get())/4)):
a0 = random.choice(self.uc)
a1 = random.choice(self.lc)
a2 = random.choice(self.sym)
a3 = random.choice(self.digits)
a = a0+a1+a2+a3+a
self.pa.set(a)


def export(self):
# this function will save all the data from the
# database in a csv format which can be opened
# in excel
pop = Toplevel(self.root)
pop.geometry('300x100')
self.v = StringVar()
Label(pop, text='Save File Name as').pack()
ttk.Entry(pop, textvariable=self.v).pack()
ttk.Button(pop, text='Save', width=18,
command=lambda: exp(self.v.get())).pack(pady=5)


def exp(x):
with open(x + '.csv', 'w', newline='') as f:
chompa = csv.writer(f, dialect='excel')
for r in back.show():
chompa.writerow(r)
messagebox.showinfo(""File Saved"", ""Saved as "" + x + "".csv"")




if __name__ == '__main__':
win = Style(theme='darkly').master
name = 'Password Generator'
dimension = '565x320'


app = window(win, dimension, name)
win.mainloop()","import sqlite3

def create_connection(db_file):
    conn = None
    try:
        conn = sqlite3.connect(db_file)
    except Error as e:
        print(e)
    return conn

def create_table(conn, create_table_sql):
    try:
        c = conn.cursor()
        c.execute(create_table_sql)
    except Error as e:
        print(e)

def main():
    db_"
1694,Write a Python program to How to Concatenate tuples to nested tuples,"# Python3 code to demonstrate working of
# Concatenating tuples to nested tuples
# using + operator + "", "" operator during initialization

# initialize tuples
test_tup1 = (3, 4),
test_tup2 = (5, 6),

# printing original tuples
print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))

# Concatenating tuples to nested tuples
# using + operator + "", "" operator during initialization
res = test_tup1 + test_tup2

# printing result
print(""Tuples after Concatenating : "" + str(res))","def concatenate_tuples(tuple1, tuple2):
    return tuple1 + tuple2

print(concatenate_tuples(('a', 'b'), ('c', 'd')))

""""""

def concatenate_tuples(tuple1, tuple2):
    return tuple1 + tuple2

print(concatenate_tuples(('a', 'b'), ('c', 'd')))

""""""

def concatenate_"
1695,How to change background color of Tkinter OptionMenu widget in Python,"# Python program to change menu background
# color of Tkinter's Option Menu

# Import the library tkinter
from tkinter import *

# Create a GUI app
app = Tk()

# Give title to your GUI app
app.title(""Vinayak App"")

# Construct the label in your app
l1 = Label(app, text=""Choose the the week day here"")

# Display the label l1
l1.grid()

# Construct the Options Menu widget in your app
text1 = StringVar()

# Set the value you wish to see by default
text1.set(""Choose here"")

# Create options from the Option Menu
w = OptionMenu(app, text1, ""Sunday"", ""Monday"", ""Tuesday"",
""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"")

# Se the background color of Options Menu to green
w.config(bg=""GREEN"", fg=""WHITE"")

# Set the background color of Displayed Options to Red
w[""menu""].config(bg=""RED"")

# Display the Options Menu
w.grid(pady=20)

# Make the loop for displaying app
app.mainloop()","import tkinter as tk

def change_bg_color(event):
    print(""Background color changed"")
    color_var.set(color_var.get() + 1)
    color_var.trace(""w"", change_bg_color)

color_var = tk.IntVar()
color_var.set(0)
color_label = tk.Label(text=""Background color:"", font=(""Arial"", 12))
color_label.pack()
color_"
1696,Write a Python program to find common elements in three lists using sets,"# Python3 program to find common elements
# in three lists using sets

def IntersecOfSets(arr1, arr2, arr3):
# Converting the arrays into sets
s1 = set(arr1)
s2 = set(arr2)
s3 = set(arr3)

# Calculates intersection of
# sets on s1 and s2
set1 = s1.intersection(s2) #[80, 20, 100]

# Calculates intersection of sets
# on set1 and s3
result_set = set1.intersection(s3)

# Converts resulting set to list
final_list = list(result_set)
print(final_list)

# Driver Code
if __name__ == '__main__' :

# Elements in Array1
arr1 = [1, 5, 10, 20, 40, 80, 100]

# Elements in Array2
arr2 = [6, 7, 20, 80, 100]

# Elements in Array3
arr3 = [3, 4, 15, 20, 30, 70, 80, 120]

# Calling Function
IntersecOfSets(arr1, arr2, arr3)","l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
l3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

l1 = set(l1)
l2 = set(l2)
l3 = set(l3)

print(l1)
print(l2)"
1697,Write a Python program to Dictionary with maximum count of pairs,"# Python3 code to demonstrate working of
# Dictionary with maximum keys
# Using loop + len()

# initializing list
test_list = [{""gfg"": 2, ""best"" : 4},
{""gfg"": 2, ""is"" : 3, ""best"" : 4},
{""gfg"": 2}]

# printing original list
print(""The original list is : "" + str(test_list))

res = {}
max_len = 0
for ele in test_list:

# checking for lengths
if len(ele) > max_len:
res = ele
max_len = len(ele)

# printing results
print(""Maximum keys Dictionary : "" + str(res))","def max_count(d):
    max_count = 0
    for key in d:
        count = d[key]
        if count > max_count:
            max_count = count
    return max_count

d = {'a': 1, 'b': 2, 'c': 3}
print(max_count(d))

""""""

def max_count(d):
    max_count = 0
    for key in d:
        count = d[key]
        if"
1698,Write a Python program to print the Inverted heart pattern,"# determining the size of the heart
size = 15


# printing the inverted triangle
for a in range(0, size):
for b in range(a, size):
print("" "", end = """")
for b in range(1, (a * 2)):
print(""*"", end = """")
print("""")


# printing rest of the heart
for a in range(size, int(size / 2) - 1 , -2):


# printing the white space right-triangle
for b in range(1, size - a, 2):
print("" "", end = """")


# printing the first trapezium
for b in range(1, a + 1):
print(""*"", end = """")


# printing the white space triangle
for b in range(1, (size - a) + 1):
print("" "", end = """")


# printing the second trapezium
for b in range(1, a):
print(""*"", end = """")


# new line
print("""")","def invert_heart_pattern(heart_pattern):
    # Your code here
    pass

""""""

# Solution 1

def invert_heart_pattern(heart_pattern):
    # Your code here
    pass

# Solution 2

def invert_heart_pattern(heart_pattern):
    # Your code here
    pass

# Solution 3

def invert_heart_pattern(heart_pattern):
    # Your code here
    pass

# Solution 4

def in"
1699,Kth Non-repeating Character in Python using List Comprehension and OrderedDict,"# Function to find k'th non repeating character
# in string
from collections import OrderedDict

def kthRepeating(input,k):

# OrderedDict returns a dictionary data
# structure having characters of input
# string as keys in the same order they
# were inserted and 0 as their default value
dict=OrderedDict.fromkeys(input,0)

# now traverse input string to calculate
# frequency of each character
for ch in input:
dict[ch]+=1

# now extract list of all keys whose value
# is 1 from dict Ordered Dictionary
nonRepeatDict = [key for (key,value) in dict.items() if value==1]

# now return (k-1)th character from above list
if len(nonRepeatDict) < k:
return 'Less than k non-repeating characters in input.'
else:
return nonRepeatDict[k-1]

# Driver function
if __name__ == ""__main__"":
input = ""geeksforgeeks""
k = 3
print (kthRepeating(input, k))","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22"
1700,Write a Python Set difference to find lost element from a duplicated array,"# Function to find lost element from a duplicate
# array

def lostElement(A,B):

# convert lists into set
A = set(A)
B = set(B)

# take difference of greater set with smaller
if len(A) > len(B):
print (list(A-B))
else:
print (list(B-A))

# Driver program
if __name__ == ""__main__"":
A = [1, 4, 5, 7, 9]
B = [4, 5, 7, 9]
lostElement(A,B)","def solution(arr):
    # Write your code here
    return arr[0]

# Test your solution
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(arr))

# Test your solution
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(arr))

# Test your solution
arr = [1, 2, 3, 4, 5"
1701,Split a String into columns using regex in pandas DataFrame in Python,"# import the regex library
import pandas as pd
import re

# Create a list with all the strings
movie_data = [""Name: The_Godfather Year: 1972 Rating: 9.2"",
""Name: Bird_Box Year: 2018 Rating: 6.8"",
""Name: Fight_Club Year: 1999 Rating: 8.8""]

# Create a dictionary with the required columns
# Used later to convert to DataFrame
movies = {""Name"":[], ""Year"":[], ""Rating"":[]}

for item in movie_data:

# For Name field
name_field = re.search(""Name: .*"",item)

if name_field is not None:
name = re.search('\w*\s\w*',name_field.group())
else:
name = None
movies[""Name""].append(name.group())

# For Year field
year_field = re.search(""Year: .*"",item)
if year_field is not None:
year = re.search('\s\d\d\d\d',year_field.group())
else:
year = None
movies[""Year""].append(year.group().strip())

# For rating field
rating_field = re.search(""Rating: .*"",item)
if rating_field is not None:
rating = re.search('\s\d.\d',rating_field.group())
else:
rating - None
movies[""Rating""].append(rating.group().strip())

# Creating DataFrame
df = pd.DataFrame(movies)
print(df)","import re

def solution(s):
    # Solution 1:
    # s = re.sub(r'\s+','', s)
    # s = re.sub(r'\s+','', s)
    # s = re.sub(r'\s+','', s)
    # s = re.sub(r'\s+','', s)
    # s = re.sub(r'\s+','', s)
    # s"
1702,Program to check if a string contains any special character in Python,"// C++ program to check if a string
// contains any special character

// import required packages
#include <iostream>
#include <regex>
using namespace std;

// Function checks if the string
// contains any special character
void run(string str)
{

// Make own character set
regex regx(""[@_!#$%^&*()<>?/|}{~:]"");

// Pass the string in regex_search
// method
if(regex_search(str, regx) == 0)
cout << ""String is accepted"";
else
cout << ""String is not accepted."";
}

// Driver Code
int main()
{

// Enter the string
string str = ""Geeks$For$Geeks"";

// Calling run function
run(str);

return 0;
}

// This code is contributed by Yash_R","s = ""abcdefghijklmnopqrstuvwxyz""

def is_special_char(s):
    for i in s:
        if i in ""!@#$%^&*()_+-=[]{}|"":
            return True
    return False

print(is_special_char(s))

""""""

# Solution:

def is_special_char(s):
    for i in s:
        if i in ""!@#$%^"
1703,Write a Python program to Tuple XOR operation,"# Python3 code to demonstrate working of
# Tuple XOR operation
# using zip() + generator expression

# initialize tuples
test_tup1 = (10, 4, 6, 9)
test_tup2 = (5, 2, 3, 3)

# printing original tuples
print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))

# Tuple XOR operation
# using zip() + generator expression
res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))

# printing result
print(""The XOR tuple : "" + str(res))","x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
y = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

x = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
y = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

x = (1, 2, 3, 4, 5, 6, 7, 8, 9"
1704,Calculate the mean across dimension in a 2D NumPy array in Python,"# Importing Library
import numpy as np

# creating 2d array
arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Calculating mean across Rows
row_mean = np.mean(arr, axis=1)

row1_mean = row_mean[0]
print(""Mean of Row 1 is"", row1_mean)

row2_mean = row_mean[1]
print(""Mean of Row 2 is"", row2_mean)

row3_mean = row_mean[2]
print(""Mean of Row 3 is"", row3_mean)


# Calculating mean across Columns
column_mean = np.mean(arr, axis=0)

column1_mean = column_mean[0]
print(""Mean of column 1 is"", column1_mean)

column2_mean = column_mean[1]
print(""Mean of column 2 is"", column2_mean)

column3_mean = column_mean[2]
print(""Mean of column 3 is"", column3_mean)","import numpy as np

# Create a 2D NumPy array
arr = np.array([[1, 2, 3, 4, 5],
                [6, 7, 8, 9, 10],
                [11, 12, 13, 14, 15],
                [16, 17, 18, 19, 20]])

# Calculate the mean across dimension in arr
print(arr.mean(axis=0))

# Calculate the mean across dimension in arr
print(arr.mean"
1705,How to Build Web scraping bot in Python,"# These are the imports to be made
import time
from selenium import webdriver
from datetime import datetime","import requests
from bs4 import BeautifulSoup

url = ""https://www.amazon.in/Apple-iPhone-11-GB-2TB-8GB-Graphics-Display/dp/B08KLKGZG8/ref=sr_1_1?__mk_de_DE=%C3%85M%C3%85%C5%BD%C3%95%C3%A7%C3%B3%C3%B5%C3%B8&__mk_fr_"
1706,Sorting rows in pandas DataFrame in Python,"# import modules
import pandas as pd

# create dataframe
data = {'name': ['Simon', 'Marsh', 'Gaurav', 'Alex', 'Selena'],
'Maths': [8, 5, 6, 9, 7],
'Science': [7, 9, 5, 4, 7],
'English': [7, 4, 7, 6, 8]}

df = pd.DataFrame(data)

# Sort the dataframes rows by Science,
# in descending order
a = df.sort_values(by ='Science', ascending = 0)
print(""Sorting rows by Science:\n \n"", a)","# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

# Solution 11:

# Solution 12:

# Solution 13:

# Solution 14:

# Solution 15:

# Solution 16:

# Solution 17:

# Solution 18:

# Solution 19:

# Solution 20:"
1707,How to get the indices of the sorted array using NumPy in Python,"import numpy as np


# Original array
array = np.array([10, 52, 62, 16, 16, 54, 453])
print(array)

# Indices of the sorted elements of a
# given array
indices = np.argsort(array)
print(indices)","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Print the indices of the array
print(arr.argsort())

# Print the indices of the array
print(arr.argsort(kind='mergesort'))

# Print the indices of the array
print(arr.argsort(kind='quicksort'))

# Print the indices of the array
print(arr.argsort"
1708,Write a Python program to Get file id of windows file,"# importing popen from the os library
from os import popen


# Path to the file whose id we would
# be obtaining (relative / absolute)
file = r""C:\Users\Grandmaster\Desktop\testing.py""


# Running the command for obtaining the fileid,
# and saving the output of the command
output = popen(fr""fsutil file queryfileid {file}"").read()


# printing the output of the previous command
print(output)","import os

def get_file_id(file_name):
    # Open the file
    with open(file_name, 'r') as f:
        # Read the file
        data = f.read()
        # Return the file id
        return data.split()[0]

# Call the function
print(get_file_id('C:\\Users\\srin\\Desktop\\Python\\Python_Project\\file_id.txt'))

""""""

""""""

""""""

"""""""
1709,Write a Python program to Convert Matrix to dictionary,"# Python3 code to demonstrate working of
# Convert Matrix to dictionary
# Using dictionary comprehension + range()

# initializing list
test_list = [[5, 6, 7], [8, 3, 2], [8, 2, 1]]

# printing original list
print(""The original list is : "" + str(test_list))

# using dictionary comprehension for iteration
res = {idx + 1 : test_list[idx] for idx in range(len(test_list))}

# printing result
print(""The constructed dictionary : "" + str(res))","def matrix_to_dict(matrix):
    dictionary = {}
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            dictionary[matrix[i][j]] = matrix[i][j]
    return dictionary

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(matrix_to_dict(matrix))

""""""

def matrix_to_dict(mat"
1710,Write a Python program to Convert a set into dictionary,"# Python code to demonstrate
# converting set into dictionary
# using fromkeys()


# initializing set
ini_set = {1, 2, 3, 4, 5}


# printing initialized set
print (""initial string"", ini_set)
print (type(ini_set))


# Converting set to dictionary
res = dict.fromkeys(ini_set, 0)


# printing final result and its type
print (""final list"", res)
print (type(res))","def solution(s):
    d = {}
    for i in s:
        d[i] = s.count(i)
    return d

print(solution(set(""abcd"")))

""""""

def solution(s):
    d = {}
    for i in s:
        d[i] = s.count(i)
    return d

print(solution(set(""abcd"")))"
1711,Write a Python program to Pair elements with Rear element in Matrix Row,"# Python3 code to demonstrate
# Pair elements with Rear element in Matrix Row
# using list comprehension

# Initializing list
test_list = [[4, 5, 6], [2, 4, 5], [6, 7, 5]]

# printing original list
print(""The original list is : "" + str(test_list))

# Pair elements with Rear element in Matrix Row
# using list comprehension
res = []
for sub in test_list:
res.append([[ele, sub[-1]] for ele in sub[:-1]])

# printing result
print (""The list after pairing is : "" + str(res))","def pair_elements(matrix):
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            if matrix[i][j] == 1:
                matrix[i][j] = 0
            else:
                matrix[i][j] = 1
    return matrix

matrix = [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
1712,Write a Python program to Uppercase Half String,"# Python3 code to demonstrate working of
# Uppercase Half String
# Using upper() + loop + len()

# initializing string
test_str = 'geeksforgeeks'

# printing original string
print(""The original string is : "" + str(test_str))

# computing half index
hlf_idx = len(test_str) // 2

res = ''
for idx in range(len(test_str)):

# uppercasing later half
if idx >= hlf_idx:
res += test_str[idx].upper()
else :
res += test_str[idx]

# printing result
print(""The resultant string : "" + str(res))","def upper_half_string(s):
    return s.upper()

print(upper_half_string(""Python""))

""""""

# Solution:

def upper_half_string(s):
    return s.upper()

print(upper_half_string(""Python""))"
1713,"Reshape a pandas DataFrame using stack,unstack and melt method in Python","# import pandas module
import pandas as pd

# making dataframe
df = pd.read_csv(""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv"")

# it was print the first 5-rows
print(df.head())","import pandas as pd

df = pd.DataFrame({""A"": [1, 2, 3, 4, 5],
                  ""B"": [10, 20, 30, 40, 50],
                  ""C"": [100, 200, 300, 400, 500]})

df.stack()
df.unstack()
df.melt()

# Solution:

import pandas as pd

df = pd.DataFrame({""A"": [1,"
1714,Write a Python program to Remove keys with Values Greater than K ( Including mixed values ),"# Python3 code to demonstrate working of
# Remove keys with Values Greater than K ( Including mixed values )
# Using loop + isinstance()

# initializing dictionary
test_dict = {'Gfg' : 3, 'is' : 7, 'best' : 10, 'for' : 6, 'geeks' : 'CS'}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# initializing K
K = 6

# using loop to iterate keys of dictionary
res = {}
for key in test_dict:

# testing for data type and then condition, order is imp.
if not (isinstance(test_dict[key], int) and test_dict[key] > K):
res[key] = test_dict[key]

# printing result
print(""The constructed dictionary : "" + str(res))","def remove_keys_with_values_greater_than_k(dict, k):
    for key, value in dict.items():
        if value >= k:
            dict.pop(key)
    return dict

print(remove_keys_with_values_greater_than_k({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 2))

""""""

def remove_keys_with_values_great"
1715,Write a Python program to Replace duplicate Occurrence in String,"# Python3 code to demonstrate working of
# Replace duplicate Occurrence in String
# Using split() + enumerate() + loop

# initializing string
test_str = 'Gfg is best . Gfg also has Classes now. \
Classes help understand better . '

# printing original string
print(""The original string is : "" + str(test_str))

# initializing replace mapping
repl_dict = {'Gfg' : 'It', 'Classes' : 'They' }

# Replace duplicate Occurrence in String
# Using split() + enumerate() + loop
test_list = test_str.split(' ')
res = set()
for idx, ele in enumerate(test_list):
if ele in repl_dict:
if ele in res:
test_list[idx] = repl_dict[ele]
else:
res.add(ele)
res = ' '.join(test_list)

# printing result
print(""The string after replacing : "" + str(res))","def replace_duplicate(string):
    # your code goes here
    return string

# read the file
f = open(""string.txt"", ""r"")

# read the file
string = f.read()

# replace the duplicate occurrence
string = replace_duplicate(string)

# write the file
f.close()

# print the result
print(string)

# print the result
print(string)"
1716,Write a Python program to find all the Combinations in the list with the given condition,"# Python3 code to demonstrate working of
# Optional Elements Combinations
# Using loop

# initializing list
test_list = [""geekforgeeks"", [5, 4, 3, 4], ""is"",
[""best"", ""good"", ""better"", ""average""]]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing size of inner Optional list
K = 4

res = []
cnt = 0
while cnt <= K - 1:
temp = []

# inner elements selections
for idx in test_list:

# checks for type of Elements
if not isinstance(idx, list):
temp.append(idx)
else:
temp.append(idx[cnt])
cnt += 1
res.append(temp)

# printing result
print(""All index Combinations : "" + str(res))","def combinations(lst, condition):
    if condition == 0:
        return [''.join(i) for i in itertools.permutations(lst)]
    elif condition == 1:
        return [''.join(i) for i in itertools.combinations(lst, 2)]
    elif condition == 2:
        return [''.join(i) for i in itertools.combinations(lst, 3)]
    elif condition == 3:"
1717,numpy.inner() in python,"# Python Program illustrating
# numpy.inner() method

import numpy as geek

# Scalars
product = geek.inner(5, 4)
print(""inner Product of scalar values : "", product)

# 1D array
vector_a = 2 + 3j
vector_b = 4 + 5j

product = geek.inner(vector_a, vector_b)
print(""inner Product : "", product)","def inner(a, b):
    return a*b

print(inner(2, 3))

""""""

# Solution:

def inner(a, b):
    return a*b

print(inner(2, 3))"
1718,How to set the tab size in Text widget in Tkinter in Python,"# Import Module
from tkinter import *

# Create Object
root = Tk()

# Set Geometry
root.geometry(""400x400"")

# Execute Tkinter
root.mainloop()","import tkinter as tk

def main():
    root = tk.Tk()
    root.geometry(""300x300"")
    root.title(""Python Code"")
    root.configure(background=""white"")
    label = tk.Label(root, text=""Enter the tab size"", bg=""white"", fg=""black"")
    label.pack()
    label.configure(font=(""Courier"", 20))
    label.configure(width=20"
1719,Write a Python Program for Comb Sort,"# Python program for implementation of CombSort

# To find next gap from current
def getNextGap(gap):

# Shrink gap by Shrink factor
gap = (gap * 10)/13
if gap < 1:
return 1
return gap

# Function to sort arr[] using Comb Sort
def combSort(arr):
n = len(arr)

# Initialize gap
gap = n

# Initialize swapped as true to make sure that
# loop runs
swapped = True

# Keep running while gap is more than 1 and last
# iteration caused a swap
while gap !=1 or swapped == 1:

# Find next gap
gap = getNextGap(gap)

# Initialize swapped as false so that we can
# check if swap happened or not
swapped = False

# Compare all elements with current gap
for i in range(0, n-gap):
if arr[i] > arr[i + gap]:
arr[i], arr[i + gap]=arr[i + gap], arr[i]
swapped = True


# Driver code to test above
arr = [ 8, 4, 1, 3, -44, 23, -6, 28, 0]
combSort(arr)

print (""Sorted array:"")
for i in range(len(arr)):
print (arr[i]),


# This code is contributed by Mohit Kumra","def combSort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(combSort(arr))

""""""

def combSort(arr):
    n = len(arr)"
1720,Mapping external values to dataframe values in Pandas in Python,"# Creating new dataframe
import pandas as pd

initial_data = {'First_name': ['Ram', 'Mohan', 'Tina', 'Jeetu', 'Meera'],
'Last_name': ['Kumar', 'Sharma', 'Ali', 'Gandhi', 'Kumari'],
'Age': [42, 52, 36, 21, 23],
'City': ['Mumbai', 'Noida', 'Pune', 'Delhi', 'Bihar']}

df = pd.DataFrame(initial_data, columns = ['First_name', 'Last_name',
'Age', 'City'])

# Create new column using dictionary
new_data = { ""Ram"":""B.Com"",
""Mohan"":""IAS"",
""Tina"":""LLB"",
""Jeetu"":""B.Tech"",
""Meera"":""MBBS"" }

# combine this new data with existing DataFrame
df[""Qualification""] = df[""First_name""].map(new_data)

print(df)","# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

# Solution 11:

# Solution 12:

# Solution 13:

# Solution 14:

# Solution 15:

# Solution 16:

# Solution 17:

# Solution 18:

# Solution 19:

#"
1721,Write a Python program to Filter dictionary values in heterogeneous dictionary,"# Python3 code to demonstrate working of
# Filter dictionary values in heterogeneous dictionary
# Using type() + dictionary comprehension

# initializing dictionary
test_dict = {'Gfg' : 4, 'is' : 2, 'best' : 3, 'for' : 'geeks'}

# printing original dictionary
print(""The original dictionary : "" + str(test_dict))

# initializing K
K = 3

# Filter dictionary values in heterogeneous dictionary
# Using type() + dictionary comprehension
res = {key : val for key, val in test_dict.items()
if type(val) != int or val > K}

# printing result
print(""Values greater than K : "" + str(res))","def filter_dict(d, key):
    return d[key]

d = {'a': 1, 'b': 2, 'c': 3}
print(filter_dict(d, 'a'))

""""""

# Solution:

def filter_dict(d, key):
    return d[key]

d = {'a': 1, 'b': 2, 'c': 3}
print(filter_dict(d, 'a'))"
1722,Write a Python program to Split Strings on Prefix Occurrence,"# Python3 code to demonstrate working of
# Split Strings on Prefix Occurrence
# Using loop + startswith()


# initializing list
test_list = [""geeksforgeeks"", ""best"", ""geeks"", ""and"", ""geeks"", ""love"", ""CS""]


# printing original list
print(""The original list is : "" + str(test_list))


# initializing prefix
pref = ""geek""




res = []
for val in test_list:

# checking for prefix
if val.startswith(pref):

# if pref found, start new list
res.append([val])
else:

# else append in current list
res[-1].append(val)


# printing result
print(""Prefix Split List : "" + str(res))","def split_string(string):
    # your code goes here
    return string.split(' ')

# driver code
string = 'hello world'
print(split_string(string))

# Output: ['hello', 'world']

# driver code
string = 'hello world'
print(split_string(string))

# Output: ['hello', 'world']

# driver code
string = 'hello world'
print(split_string(string))

# Output: ['hello"
1723,Write a Python program to Group dates in K ranges,"# Python3 code to demonstrate working of
# Group dates in K ranges
# Using groupby() + sort()
from itertools import groupby
from datetime import datetime

# initializing list
test_list = [datetime(2020, 1, 4),
datetime(2019, 12, 30),
datetime(2020, 1, 7),
datetime(2019, 12, 27),
datetime(2020, 1, 20),
datetime(2020, 1, 10)]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing K
K = 7

# initializing start date
min_date = min(test_list)

# utility fnc to form groupings
def group_util(date):
return (date-min_date).days // K

# sorting before grouping
test_list.sort()

temp = []
# grouping by utility function to group by K days
for key, val in groupby(test_list , key = lambda date : group_util(date)):
temp.append((key, list(val)))

# using strftime to convert to userfriendly
# format
res = []
for sub in temp:
intr = []
for ele in sub[1]:
intr.append(ele.strftime(""%Y/%m/%d""))
res.append((sub[0], intr))

# printing result
print(""Grouped Digits : "" + str(res))","import datetime

def group_dates(start, end, k):
    start_date = datetime.datetime.strptime(start, '%Y-%m-%d')
    end_date = datetime.datetime.strptime(end, '%Y-%m-%d')
    for i in range(k):
        yield start_date + datetime.timedelta(days=i)

print(list(group_dates('2021-01-01', '"
1724,Write a Python program to Combinations of sum with tuples in tuple list,"# Python3 code to demonstrate working of
# Summation combination in tuple lists
# Using list comprehension + combinations
from itertools import combinations

# initialize list
test_list = [(2, 4), (6, 7), (5, 1), (6, 10)]

# printing original list
print(""The original list : "" + str(test_list))

# Summation combination in tuple lists
# Using list comprehension + combinations
res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]

# printing result
print(""The Summation combinations are : "" + str(res))","def combinations(n, k):
    if k == 0:
        return [[]]
    else:
        return combinations(n, k-1) + [[n, k]]

n = int(input())
k = int(input())
print(combinations(n, k))

# Solution:

def combinations(n, k):
    if k == 0:
        return [[]]
    else:
        return [[n] + list(combinations(n, k-1))"
1725,Plot line graph from NumPy array in Python,"# importing the modules
import numpy as np
import matplotlib.pyplot as plt


# data to be plotted
x = np.arrange(1, 11)
y = x * x


# plotting
plt.title(""Line graph"")
plt.xlabel(""X axis"")
plt.ylabel(""Y axis"")
plt.plot(x, y, color =""red"")
plt.show()","import numpy as np

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
y = np.array([1, 4, 9, 16, 25, 36, 49, 64, 81, 100])

# Plot line graph from NumPy array in Python

# Plot line graph from Python

# Plot line graph from Python

# Plot line graph from Python

# Plot line graph from Python

# Plot line graph from Python

# Plot line graph from"
1726,Write a Python program to Count the Number of matching characters in a pair of string,"# Python code to count number of matching
# characters in a pair of strings

# count function
def count(str1, str2):
c, j = 0, 0

# loop executes till length of str1 and
# stores value of str1 character by character
# and stores in i at each iteration.
for i in str1:

# this will check if character extracted from
# str1 is present in str2 or not(str2.find(i)
# return -1 if not found otherwise return the
# starting occurrence index of that character
# in str2) and j == str1.find(i) is used to
# avoid the counting of the duplicate characters
# present in str1 found in str2
if str2.find(i)>= 0 and j == str1.find(i):
c += 1
j += 1
print ('No. of matching characters are : ', c)

# Main function
def main():
str1 ='aabcddekll12@' # first string
str2 ='bb2211@55k' # second string
count(str1, str2) # calling count function

# Driver Code
if __name__==""__main__"":
main()","def count_matching_char(s1, s2):
    count = 0
    for i in range(len(s1)):
        if s1[i] == s2[i]:
            count += 1
    return count

print(count_matching_char('abcd', 'abcd'))

""""""

def count_matching_char(s1, s2):
    count = 0
    for i in range(len(s1)):"
1727,Write a Python program to Extract digits from Tuple list,"# Python3 code to demonstrate working of
# Extract digits from Tuple list
# Using map() + chain.from_iterable() + set() + loop
from itertools import chain


# initializing list
test_list = [(15, 3), (3, 9), (1, 10), (99, 2)]


# printing original list
print(""The original list is : "" + str(test_list))


# Extract digits from Tuple list
# Using map() + chain.from_iterable() + set() + loop
temp = map(lambda ele: str(ele), chain.from_iterable(test_list))
res = set()
for sub in temp:
for ele in sub:
res.add(ele)


# printing result
print(""The extracted digits : "" + str(res))","def extract_digits(tuple_list):
    return tuple_list[0]

tuple_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(extract_digits(tuple_list))

""""""

# Solution

def extract_digits(tuple_list):
    return tuple_list[0]

tuple_list = [1, 2, 3, 4, 5, 6, 7, 8, 9,"
1728,Write a Python program to Count tuples occurrence in list of tuples,"# Python code to count unique
# tuples in list of list

import collections
Output = collections.defaultdict(int)

# List initialization
Input = [[('hi', 'bye')], [('Geeks', 'forGeeks')],
[('a', 'b')], [('hi', 'bye')], [('a', 'b')]]

# Using iteration
for elem in Input:
Output[elem[0]] += 1

# Printing output
print(Output)","def count_tuple(tup):
    return tup.count(tup)

tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

print(count_tuple(tup))

""""""

def count_tuple(tup):
    return tup.count(tup)

tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

print(count"
1729,Change data type of given numpy array in Python,"# importing the numpy library as np
import numpy as np

# Create a numpy array
arr = np.array([10, 20, 30, 40, 50])

# Print the array
print(arr)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)
a = a.astype(np.int64)
print(a)

""""""

# Solution

import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)
a = a.astype(np.int64)
print(a)

# Solution

import"
1730,Write a Python program to Sort Tuples by their Maximum element,"# Python3 code to demonstrate working of
# Sort Tuples by Maximum element
# Using max() + sort()

# helper function
def get_max(sub):
return max(sub)

# initializing list
test_list = [(4, 5, 5, 7), (1, 3, 7, 4), (19, 4, 5, 3), (1, 2)]

# printing original list
print(""The original list is : "" + str(test_list))

# sort() is used to get sorted result
# reverse for sorting by max - first element's tuples
test_list.sort(key = get_max, reverse = True)

# printing result
print(""Sorted Tuples : "" + str(test_list))","def sort_tuples(tuples):
    for i in range(len(tuples)):
        for j in range(i+1, len(tuples)):
            if tuples[i][1] > tuples[j][1]:
                tuples[i], tuples[j] = tuples[j], tuples[i]
    return tuples

print(sort_tuples([(1, 5), (2, 4), (3, 2), (4, 1)]))"
1731,Binary Search (bisect) in Python,"# Python code to demonstrate working
# of binary search in library
from bisect import bisect_left

def BinarySearch(a, x):
i = bisect_left(a, x)
if i != len(a) and a[i] == x:
return i
else:
return -1

a = [1, 2, 4, 4, 8]
x = int(4)
res = BinarySearch(a, x)
if res == -1:
print(x, ""is absent"")
else:
print(""First occurrence of"", x, ""is present at"", res)","def binary_search(arr, target):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
target = 10"
1732,Student management system in Python,"# This is simplest Student data management program in python
# Create class ""Student""
class Student:
# Constructor
def __init__(self, name, rollno, m1, m2):
self.name = name
self.rollno = rollno
self.m1 = m1
self.m2 = m2

# Function to create and append new student
def accept(self, Name, Rollno, marks1, marks2 ):
# use ' int(input()) ' method to take input from user
ob = Student(Name, Rollno, marks1, marks2 )
ls.append(ob)

# Function to display student details
def display(self, ob):
print(""Name : "", ob.name)
print(""RollNo : "", ob.rollno)
print(""Marks1 : "", ob.m1)
print(""Marks2 : "", ob.m2)
print(""\n"")

# Search Function
def search(self, rn):
for i in range(ls.__len__()):
if(ls[i].rollno == rn):
return i

# Delete Function
def delete(self, rn):
i = obj.search(rn)
del ls[i]

# Update Function
def update(self, rn, No):
i = obj.search(rn)
roll = No
ls[i].rollno = roll;

# Create a list to add Students
ls =[]
# an object of Student class
obj = Student('', 0, 0, 0)

print(""\nOperations used, "")
print(""\n1.Accept Student details\n2.Display Student Details\n"" /
/ ""3.Search Details of a Student\n4.Delete Details of Student"" /
/ ""\n5.Update Student Details\n6.Exit"")

# ch = int(input(""Enter choice:""))
# if(ch == 1):
obj.accept(""A"", 1, 100, 100)
obj.accept(""B"", 2, 90, 90)
obj.accept(""C"", 3, 80, 80)

# elif(ch == 2):
print(""\n"")
print(""\nList of Students\n"")
for i in range(ls.__len__()):
obj.display(ls[i])

# elif(ch == 3):
print(""\n Student Found, "")
s = obj.search(2)
obj.display(ls[s])

# elif(ch == 4):
obj.delete(2)
print(ls.__len__())
print(""List after deletion"")
for i in range(ls.__len__()):
obj.display(ls[i])

# elif(ch == 5):
obj.update(3, 2)
print(ls.__len__())
print(""List after updation"")
for i in range(ls.__len__()):
obj.display(ls[i])

# else:
print(""Thank You !"")
","1. Create a function called solution() that takes two parameters:
    - a string of the student's name
    - a string of the student's surname
    - a string of the student's age
    - a string of the student's gender
    - a string of the student's address
    - a string of the student's phone number
    - a string of the student's email
    - a string of the student's password
    - a string of the student's password hash
    - a string of the student's password hash
    - a string of the"
1733,Priority Queue using Queue and Heapdict module in Python,"from queue import PriorityQueue

q = PriorityQueue()

# insert into queue
q.put((2, 'g'))
q.put((3, 'e'))
q.put((4, 'k'))
q.put((5, 's'))
q.put((1, 'e'))

# remove and return
# lowest priority item
print(q.get())
print(q.get())

# check queue size
print('Items in queue :', q.qsize())

# check if queue is empty
print('Is queue empty :', q.empty())

# check if queue is full
print('Is queue full :', q.full())","def solution(priorities, location):
    heap = []
    for i in range(len(priorities)):
        heapq.heappush(heap, priorities[i])
    
    for i in range(location, len(priorities)):
        if heapq.heappop(heap) > heapq.heappop(priorities):
            return i
    return -1

# Test
print(solution([1, 1, 9,"
1734,How To Convert Python Dictionary To JSON,"import json

# Data to be written
dictionary ={
""id"": ""04"",
""name"": ""sunil"",
""department"": ""HR""
}

# Serializing json
json_object = json.dumps(dictionary, indent = 4)
print(json_object)","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution"
1735,Write a Python program to find Indices of Overlapping Substrings,"# Import required module
import re


# Function to depict use of finditer() method
def CntSubstr(pattern, string):

# Array storing the indices
a = [m.start() for m in re.finditer(pattern, string)]
return a


# Driver Code
string = 'geeksforgeeksforgeeks'
pattern = 'geeksforgeeks'

# Printing index values of non-overlapping pattern
print(CntSubstr(pattern, string))","def find_overlapping_substrings(s, t):
    # Write your code here
    # return [i for i in range(len(s)) if s[i:i+len(t)] == t]
    return [i for i in range(len(s)) if s[i:i+len(t)] == t]

if __name__ == '__main__':
    print(find_overlapping_substrings('abc', 'ab'))
    print(find"
1736,Find the most frequent value in a NumPy array in Python,"import numpy as np


# create array
x = np.array([1,2,3,4,5,1,2,1,1,1])
print(""Original array:"")
print(x)

print(""Most frequent value in the above array:"")
print(np.bincount(x).argmax())","import numpy as np

# Create a NumPy array with the following data:
a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a NumPy array with the following data:
b = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a NumPy array with the following data:
c = np.array([1, 2, 3, 4, 5, 6"
1737,How to add a border color to a button in Tkinter in Python,"import tkinter as tk

root = tk.Tk()
root.geometry('250x150')
root.title(""Button Border"")

# Label
l = tk.Label(root, text = ""Enter your Roll No. :"",
font = ((""Times New Roman""), 15))
l.pack()

# Entry Widget
tk.Entry(root).pack()

# for space between widgets
tk.Label(root, text="" "").pack()

# Frame for button border with black border color
button_border = tk.Frame(root, highlightbackground = ""black"",
highlightthickness = 2, bd=0)
bttn = tk.Button(button_border, text = 'Submit', fg = 'black',
bg = 'yellow',font = ((""Times New Roman""),15))
bttn.pack()
button_border.pack()

root.mainloop()","import tkinter as tk

def add_border(button, color):
    button.config(bg=color)

def main():
    root = tk.Tk()
    root.title(""Add Border"")
    root.geometry(""300x300"")
    button = tk.Button(root, text=""Add Border"", command=add_border)
    button.pack()
    root.mainloop()

if __name__ == ""__main__"":
    main"
1738,Write a Python program to Convert Key-Value list Dictionary to List of Lists,"# Python3 code to demonstrate working of
# Convert Key-Value list Dictionary to Lists of List
# Using loop + items()

# initializing Dictionary
test_dict = {'gfg' : [1, 3, 4], 'is' : [7, 6], 'best' : [4, 5]}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# Convert Key-Value list Dictionary to Lists of List
# Using loop + items()
res = []
for key, val in test_dict.items():
res.append([key] + val)

# printing result
print(""The converted list is : "" + str(res))","def convert_dict_to_list(dictionary):
    list_of_lists = []
    for key, value in dictionary.items():
        list_of_lists.append([key, value])
    return list_of_lists

dictionary = {
    ""a"": 1,
    ""b"": 2,
    ""c"": 3,
    ""d"": 4,
    ""e"": 5,
    ""f"": 6,
    ""g"": 7,
    ""h"
1739,How to move Files and Directories in Python,"# Python program to move
# files and directories


import shutil

# Source path
source = ""D:\Pycharm projects\gfg\Test\B""

# Destination path
destination = ""D:\Pycharm projects\gfg\Test\A""

# Move the content of
# source to destination
dest = shutil.move(source, destination)

# print(dest) prints the
# Destination of moved directory","1. Create a file named ""myfile.txt""
2. Create a directory named ""mydir""
3. Create a file named ""myfile.txt""
4. Move the file ""myfile.txt"" to the directory ""mydir""
5. Move the file ""myfile.txt"" to the directory ""mydir""
6. Move the file ""myfile.txt"" to the directory ""mydir""
7. Move the file ""myfile.txt"" to the directory ""mydir""
8. Move the file """
1740,How to get file creation and modification date or time in Python,"import os
import time

# Path to the file/directory
path = r""C:\Program Files (x86)\Google\pivpT.png""

# Both the variables would contain time
# elapsed since EPOCH in float
ti_c = os.path.getctime(path)
ti_m = os.path.getmtime(path)

# Converting the time in seconds to a timestamp
c_ti = time.ctime(ti_c)
m_ti = time.ctime(ti_m)

print(
f""The file located at the path {path}
was created at {c_ti} and was last modified at {m_ti}"")","import os

def get_file_creation_date(file_name):
    """"""
    Returns the creation date of the file.
    """"""
    try:
        f = open(file_name, 'r')
        return f.read()
    except IOError:
        return None

def get_file_modification_date(file_name):
    """"""
    Returns the modification date of the file.
    """"""
    try:
        f = open(file_name, 'r')"
1741,Write a Python program to convert unix timestamp string to readable date,"# Python program to illustrate the
# convertion of unix timestamp string
# to its readable date


# Importing datetime module
import datetime


# Calling the fromtimestamp() function to
# extract datetime from the given timestamp


# Calling the strftime() function to convert
# the extracted datetime into its string format
print(datetime.datetime.fromtimestamp(int(""1294113662""))
.strftime('%Y-%m-%d %H:%M:%S'))","import time

def unix_to_date(unix_time):
    return time.strftime(""%Y-%m-%d %H:%M:%S"", time.localtime(unix_time))

print(unix_to_date(1568692800))

""""""

# Solution 1

import time

def unix_to_date(unix_time):
    return time.strftime(""%Y-%m-%d %H:"
1742,Write a Python program to Keys associated with Values in Dictionary,"# Python3 code to demonstrate working of
# Values Associated Keys
# Using defaultdict() + loop
from collections import defaultdict

# initializing dictionary
test_dict = {'gfg' : [1, 2, 3], 'is' : [1, 4], 'best' : [4, 2]}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# Values Associated Keys
# Using defaultdict() + loop
res = defaultdict(list)
for key, val in test_dict.items():
for ele in val:
res[ele].append(key)

# printing result
print(""The values associated dictionary : "" + str(dict(res)))","def solution(d, v):
    answer = []
    for i in d:
        if d[i] == v:
            answer.append(i)
    return answer

d = {'a': 1, 'b': 2, 'c': 3}
v = 'a'
print(solution(d, v))

""""""

def solution(d, v):
    answer = []
    for i in d:
        if d[i] == v:
            answer.append("
1743,Controlling the Web Browser with Python,"# Import the required modules
from selenium import webdriver
import time

# Main Function
if __name__ == '__main__':

# Provide the email and password
email = 'example@example.com'
password = 'password'

options = webdriver.ChromeOptions()
options.add_argument(""--start-maximized"")
options.add_argument('--log-level=3')

# Provide the path of chromedriver present on your system.
driver = webdriver.Chrome(executable_path=""C:/chromedriver/chromedriver.exe"",
chrome_options=options)
driver.set_window_size(1920,1080)

# Send a get request to the url
driver.get('https://auth.geeksforgeeks.org/')
time.sleep(5)

# Finds the input box by name in DOM tree to send both
# the provided email and password in it.
driver.find_element_by_name('user').send_keys(email)
driver.find_element_by_name('pass').send_keys(password)

# Find the signin button and click on it.
driver.find_element_by_css_selector(
'button.btn.btn-green.signin-button').click()
time.sleep(5)

# Returns the list of elements
# having the following css selector.
container = driver.find_elements_by_css_selector(
'div.mdl-cell.mdl-cell--9-col.mdl-cell--12-col-phone.textBold')

# Extracts the text from name,
# institution, email_id css selector.
name = container[0].text
try:
institution = container[1].find_element_by_css_selector('a').text
except:
institution = container[1].text
email_id = container[2].text

# Output Example 1
print(""Basic Info"")
print({""Name"": name,
""Institution"": institution,
""Email ID"": email})

# Clicks on Practice Tab
driver.find_elements_by_css_selector(
'a.mdl-navigation__link')[1].click()
time.sleep(5)

# Selected the Container containing information
container = driver.find_element_by_css_selector(
'div.mdl-cell.mdl-cell--7-col.mdl-cell--12-col-phone.\
whiteBgColor.mdl-shadow--2dp.userMainDiv')

# Selected the tags from the container
grids = container.find_elements_by_css_selector(
'div.mdl-grid')

# Iterate each tag and append the text extracted from it.
res = set()
for grid in grids:
res.add(grid.text.replace('\n',':'))

# Output Example 2
print(""Practice Info"")
print(res)

# Quits the driver
driver.close()
driver.quit()","1. Create a variable called'solution' and set it equal to the string 'Python is awesome!'
2. Create a variable called'solution_length' and set it equal to the length of the solution variable.
3. Create a variable called'solution_index' and set it equal to the index of the solution variable.
4. Create a variable called'solution_index_length' and set it equal to the length of the solution_index variable.
5. Create a variable called'solution_index_string' and set it equal to"
1744,Write a Python program to All pair combinations of 2 tuples,"# Python3 code to demonstrate working of
# All pair combinations of 2 tuples
# Using list comprehension

# initializing tuples
test_tuple1 = (4, 5)
test_tuple2 = (7, 8)

# printing original tuples
print(""The original tuple 1 : "" + str(test_tuple1))
print(""The original tuple 2 : "" + str(test_tuple2))

# All pair combinations of 2 tuples
# Using list comprehension
res = [(a, b) for a in test_tuple1 for b in test_tuple2]
res = res + [(a, b) for a in test_tuple2 for b in test_tuple1]

# printing result
print(""The filtered tuple : "" + str(res))","def all_pairs(tup):
    return tuple(tup)

print(all_pairs((1, 2, 3)))

""""""

def all_pairs(tup):
    return tuple(tup)

print(all_pairs((1, 2, 3)))

""""""

def all_pairs(tup):
    return tuple(tup)

print(all_pairs((1, 2, 3)))

""""""

def all_pairs"
1745,Write a Python program to Avoid Spaces in string length,"# Python3 code to demonstrate working of
# Avoid Spaces in Characters Frequency
# Using isspace() + sum()

# initializing string
test_str = 'geeksforgeeks 33 is best'

# printing original string
print(""The original string is : "" + str(test_str))

# isspace() checks for space
# sum checks count
res = sum(not chr.isspace() for chr in test_str)

# printing result
print(""The Characters Frequency avoiding spaces : "" + str(res))","def solution(s):
    return s.replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ', '').replace(' ',"
1746,How to create an empty class in Python,"# Incorrect empty class in
# Python

class Geeks:","class Empty:
    pass

# Create an empty class called 'MyClass'
class MyClass:
    pass

# Create an instance of the class 'MyClass'
my_class = MyClass()

# Create an instance of the class 'MyClass'
my_class = MyClass()

# Create an instance of the class 'MyClass'
my_class = MyClass()

# Create an instance of the class 'MyClass'
my_class = MyClass()

# Create an instance of the class '"
1747,Write a Python program to Generate k random dates between two other dates,"# Python3 code to demonstrate working of
# Random K dates in Range
# Using choices() + timedelta() + loop
from datetime import date, timedelta
from random import choices

# initializing dates ranges
test_date1, test_date2 = date(2015, 6, 3), date(2015, 7, 1)

# printing dates
print(""The original range : "" + str(test_date1) + "" "" + str(test_date2))

# initializing K
K = 7

res_dates = [test_date1]

# loop to get each date till end date
while test_date1 != test_date2:
test_date1 += timedelta(days=1)
res_dates.append(test_date1)

# random K dates from pack
res = choices(res_dates, k=K)

# printing
print(""K random dates in range : "" + str(res))","import random

def generate_dates(start, end, k):
    """"""
    Generate dates between two other dates
    """"""
    dates = []
    for i in range(k):
        date = random.randint(start, end)
        dates.append(date)
    return dates

def main():
    """"""
    Main function to generate dates between two other dates
    """"""
    start = int(input(""Enter the start date: ""))
    end = int(input("""
1748,Write a Python program to Convert List to List of dictionaries,"# Python3 code to demonstrate working of
# Convert List to List of dictionaries
# Using dictionary comprehension + loop

# initializing lists
test_list = [""Gfg"", 3, ""is"", 8, ""Best"", 10, ""for"", 18, ""Geeks"", 33]

# printing original list
print(""The original list : "" + str(test_list))

# initializing key list
key_list = [""name"", ""number""]

# loop to iterate through elements
# using dictionary comprehension
# for dictionary construction
n = len(test_list)
res = []
for idx in range(0, n, 2):
res.append({key_list[0]: test_list[idx], key_list[1] : test_list[idx + 1]})

# printing result
print(""The constructed dictionary list : "" + str(res))","def list_to_dict(l):
    d = {}
    for i in l:
        d[i] = l.count(i)
    return d

l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(list_to_dict(l))

""""""

# Solution 1

def list_to_dict(l):
    d = {}
    for i in l:
        d[i] = l.count("
1749,Building an undirected graph and finding shortest path using Dictionaries in Python,"# Python3 implementation to build a
# graph using Dictonaries


from collections import defaultdict


# Function to build the graph
def build_graph():
edges = [
[""A"", ""B""], [""A"", ""E""],
[""A"", ""C""], [""B"", ""D""],
[""B"", ""E""], [""C"", ""F""],
[""C"", ""G""], [""D"", ""E""]
]
graph = defaultdict(list)

# Loop to iterate over every
# edge of the graph
for edge in edges:
a, b = edge[0], edge[1]

# Creating the graph
# as adjacency list
graph[a].append(b)
graph[b].append(a)
return graph


if __name__ == ""__main__"":
graph = build_graph()

print(graph)","def shortest_path(graph, start, end):
    # Write your code here
    path = {}
    visited = {}
    for node in graph:
        path[node] = []
        visited[node] = False
    path[start] = []
    visited[start] = True
    while len(path[start])!= 0:
        current = path[start].pop(0)
        for node in graph[current]:
            if not visited[node]:"
1750,Write a Python program to Prefix frequency in string List,"# Python3 code to demonstrate
# Prefix frequency in List
# using loop + startswith()

# Initializing list
test_list = ['gfgisbest', 'geeks', 'gfgfreak', 'gfgCS', 'Gcourses']

# printing original list
print(""The original list is : "" + str(test_list))

# Initializing substring
test_sub = 'gfg'

# Prefix frequency in List
# using loop + startswith()
res = 0
for ele in test_list:
if ele.startswith(test_sub):
res = res + 1

# printing result
print (""Strings count with matching frequency : "" + str(res))","def prefix_frequency(string):
    freq = {}
    for char in string:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    return freq

def prefix_frequency_2(string):
    freq = {}
    for char in string:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    return freq

def"
1751,Write a Python program to Update each element in tuple list,"# Python3 code to demonstrate working of
# Update each element in tuple list
# Using list comprehension

# initialize list
test_list = [(1, 3, 4), (2, 4, 6), (3, 8, 1)]

# printing original list
print(""The original list : "" + str(test_list))

# initialize add element
add_ele = 4

# Update each element in tuple list
# Using list comprehension
res = [tuple(j + add_ele for j in sub ) for sub in test_list]

# printing result
print(""List after bulk update : "" + str(res))","def update_tuple(tuple):
    for i in range(len(tuple)):
        tuple[i] = tuple[i] + 1
    return tuple

tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print(update_tuple(tuple))

""""""

# Solution:

def update_tuple(tuple):
    for i in range(len(tuple)):
        tuple[i] ="
1752,How to Scrape Multiple Pages of a Website Using Python,"import requests
from bs4 import BeautifulSoup as bs

URL = 'https://www.geeksforgeeks.org/page/1/'

req = requests.get(URL)
soup = bs(req.text, 'html.parser')

titles = soup.find_all('div',attrs = {'class','head'})

print(titles[4].text)","import requests

url = ""https://www.python.org/blogs/python-dev/""

# Open the URL in a browser
browser = requests.get(url)

# Print the status code of the response
print(browser.status_code)

# Print the content of the response
print(browser.content)

# Print the headers of the response
print(browser.headers)

# Print the headers of the response
print(browser.headers)

# Print the content of the response
print"
1753,Test the given page is found or not on the server Using Python,"# import module
from urllib.request import urlopen
from urllib.error import *


# try block to read URL
try:
html = urlopen(""https://www.geeksforgeeks.org/"")

# except block to catch
# exception
# and identify error
except HTTPError as e:
print(""HTTP error"", e)

except URLError as e:
print(""Opps ! Page not found!"", e)


else:
print('Yeah ! found ')","import urllib.request
import urllib.parse
import urllib.error

def main():
    # Open the URL
    url = input('Enter - ')
    print('Retrieving', url)
    uh = urllib.request.urlopen(url)

    # Read the data from the URL and print it out.
    data = uh.read()
    print('Retrieved', len(data), 'characters')

    # Close the connection
    uh.close()"
1754,Write a Python program to Convert List of Lists to Tuple of Tuples,"# Python3 code to demonstrate working of
# Convert List of Lists to Tuple of Tuples
# Using tuple + list comprehension

# initializing list
test_list = [['Gfg', 'is', 'Best'], ['Gfg', 'is', 'love'],
['Gfg', 'is', 'for', 'Geeks']]

# printing original list
print(""The original list is : "" + str(test_list))

# Convert List of Lists to Tuple of Tuples
# Using tuple + list comprehension
res = tuple(tuple(sub) for sub in test_list)

# printing result
print(""The converted data : "" + str(res))","def convert_list_to_tuple(lst):
    tuple_list = []
    for i in lst:
        tuple_list.append(tuple(i))
    return tuple_list

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(convert_list_to_tuple(lst))

""""""

# Solution 1

def convert_list_to_tuple(lst"
1755,Write a Python program to Numpy dstack() method,"# import numpy
import numpy as np

gfg1 = np.array([1, 2, 3])
gfg2 = np.array([4, 5, 6])

# using numpy.dstack() method
print(np.dstack((gfg1, gfg2)))","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(np.dstack((a, b)))

""""""

# Solution

import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10,"
1756,Compute the covariance matrix of two given NumPy arrays in Python,"import numpy as np


array1 = np.array([0, 1, 1])
array2 = np.array([2, 2, 1])

# Original array1
print(array1)

# Original array2
print(array2)

# Covariance matrix
print(""\nCovariance matrix of the said arrays:\n"",
np.cov(array1, array2))","import numpy as np

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

c = np.cov(a, b)

print(c)

# Output:
[[1.25  0.        ]
 [0.666667  0.333333]
 [0.333333  0.666667]]

""""""

import numpy as np

a = np.array([1, 2, 3])"
1757,Extract punctuation from the specified column of Dataframe using Regex in Python,"# import required libraries
import pandas as pd
import re

# creating Dataframe with
# name and their comments
df = pd.DataFrame({
'Name' : ['Akash', 'Ashish', 'Ayush',
'Diksha' , 'Radhika'],

'Comments': ['Hey! Akash how r u' ,
'Why are you asking this to me?' ,
'Today, what we are going to do.' ,
'No plans for today why?' ,
'Wedding plans, what are you saying?']},

columns = ['Name', 'Comments']
)

# show the Dataframe
df","import re

df = pd.read_csv('../data/data.csv', sep=',')

# Extract the column of the Dataframe
df_column = df.columns

# Extract the column of the Dataframe
df_column = df.columns

# Extract the column of the Dataframe
df_column = df.columns

# Extract the column of the Dataframe
df_column = df.columns

# Extract the column of the Dataframe
df"
1758,How to add timestamp to excel file in Python,"# Import the required modules
import datetime
from openpyxl import Workbook
import time


# Main Function
if __name__ == '__main__':

# Create a worbook object
wb = Workbook()

# Select the active sheet
ws = wb.active

# Heading of Cell A1
ws.cell(row=1, column=1).value = ""Current Date and Time""

# Cell A2 containing the Current Date and Time
ws.cell(row=2, column=1).value = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

# Sleep of 2 seconds
time.sleep(2)

# Cell A3 containing the Current Date and Time
ws.cell(row=3, column=1).value = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
time.sleep(2)

# Cell A4 containing the Current Date and Time
ws.cell(row=4, column=1).value = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

# Save the workbook with a
# filename and close the object
wb.save('gfg.xlsx')
wb.close()","import datetime

def add_timestamp(filename):
    # Open the file in read mode
    with open(filename, 'r') as f:
        # Read the file content
        content = f.read()
        # Convert the content to a list of strings
        content = content.split('\n')
        # Iterate over the list of strings
        for line in content:
            # If the line is not empty
            if line:
                # Split the line into a list of words
                words = line"
1759,Defining a Python function at runtime,"# importing the module
from types import FunctionType

# functttion during run-time
f_code = compile('def gfg(): return ""GEEKSFORGEEKS""', ""<string>"", ""exec"")
f_func = FunctionType(f_code.co_consts[0], globals(), ""gfg"")

# calling the function
print(f_func())","def solution(n):
    return n % 2 == 0

The solution function should return True if the number is even, and False if it is odd.

For example, if n = 12, the function should return True.

If n = 13, the function should return False.

If n = 14, the function should return True.

If n = 15, the function should return False.

If n = 16, the function should return True.

If n = 17, the function should return False.

If n = 18"
1760,Find indices of elements equal to zero in a NumPy array in Python,"# importing Numpy package
import numpy as np

# creating a 1-D Numpy array
n_array = np.array([1, 0, 2, 0, 3, 0, 0, 5,
6, 7, 5, 0, 8])

print(""Original array:"")
print(n_array)

# finding indices of null elements using np.where()
print(""\nIndices of elements equal to zero of the \
given 1-D array:"")

res = np.where(n_array == 0)[0]
print(res)","a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

a[a == 0] = np.nan

a[a == 0] = np.nan

a[a == 0] = np.nan

a[a == 0] = np.nan

a[a == 0] = np.nan

a[a == 0] = np.nan

a[a == 0] = np.nan

a["
1761,Getting all CSV files from a directory using Python,"# importing the required modules
import glob
import pandas as pd

# specifying the path to csv files
path = ""csvfoldergfg""

# csv files in the path
files = glob.glob(path + ""/*.csv"")

# defining an empty list to store
# content
data_frame = pd.DataFrame()
content = []

# checking all the csv files in the
# specified path
for filename in files:

# reading content of csv file
# content.append(filename)
df = pd.read_csv(filename, index_col=None)
content.append(df)

# converting content to data frame
data_frame = pd.concat(content)
print(data_frame)","import os
import csv

csvpath = os.path.join('.', 'Resources', 'election_data.csv')

with open(csvpath, 'r') as csvfile:
    csvreader = csv.reader(csvfile, delimiter=',')
    csv_header = next(csvreader)
    total_votes = 0
    candidate_votes = {}
    candidate_votes_list = []
    candidate_votes_percentage = {}
    candidate_votes_percentage"
1762,numpy.where() in Python,"# Python program explaining
# where() function

import numpy as np

np.where([[True, False], [True, True]],
[[1, 2], [3, 4]], [[5, 6], [7, 8]])","import numpy as np

x = np.array([[1, 2, 3], [4, 5, 6]])
y = np.array([[7, 8, 9], [10, 11, 12]])

print(np.where(x > 5))

# Output:
# [[1 3]
#  [4 5]]

print(np.where(x > 5, y, x))

# Output:
# [[1 2 3]
#  [4 5 6]]

print(np"
1763,Write a Python program to Multiple indices Replace in String,"# Python3 code to demonstrate working of
# Multiple indices Replace in String
# Using loop + join()

# initializing string
test_str = 'geeksforgeeks is best'

# printing original string
print(""The original string is : "" + test_str)

# initializing list
test_list = [2, 4, 7, 10]

# initializing repl char
repl_char = '*'

# Multiple indices Replace in String
# Using loop + join()
temp = list(test_str)
for idx in test_list:
temp[idx] = repl_char
res = ''.join(temp)

# printing result
print(""The String after performing replace : "" + str(res))","def multiple_index_replace(string, index, replacement):
    return string[:index] + replacement + string[index + len(replacement):]

print(multiple_index_replace('abcdef', 2, 'b'))
print(multiple_index_replace('abcdef', 2, 'b'))
print(multiple_index_replace('abcdef', 2, 'b'))
print(multiple_index_replace('abcdef', 2, 'b'))
print(multiple_index_replace('abcdef"
1764,Automate Youtube with Python,"from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import speech_recognition as sr
import pyttsx3
import time


def automateYoutube(searchtext):

# giving the path of chromedriver to selenium websriver
path = ""C:\\Users\\hp\\Downloads\\chromedriver""

url = ""https://www.youtube.com/""

# opening the youtube in chromedriver
driver = webdriver.Chrome(path)
driver.get(url)

# find the search bar using selenium find_element function
driver.find_element_by_name(""search_query"").send_keys(searchtext)

# clicking on the search button
driver.find_element_by_css_selector(
""#search-icon-legacy.ytd-searchbox"").click()

# For findding the right match search
WebDriverWait(driver, 0).until(expected_conditions.title_contains(MyText))

# clicking on the match search having same as in searched query
WebDriverWait(driver, 30).until(
expected_conditions.element_to_be_clickable((By.ID, ""img""))).click()

# while(True):
# pass


speak = sr.Recognizer()
try:
with sr.Microphone() as speaky:

# adjust the energy threshold based on
# the surrounding noise level
speak.adjust_for_ambient_noise(speaky, duration=0.2)
print(""listening..."")

# listens for the user's input
searchquery = speak.listen(speaky)

# Using ggogle to recognize audio
MyText = speak.recognize_google(searchquery)
MyText = MyText.lower()

except sr.RequestError as e:
print(""Could not request results; {0}"".format(e))

except sr.UnknownValueError:
print(""unknown error occured"")

# Calling thr function
automateYoutube(MyText)","def solution(n):
    if n == 1:
        return 1
    else:
        return n * solution(n-1)

""""""

def solution(n):
    if n == 1:
        return 1
    else:
        return n * solution(n-1)

print(solution(5))"
1765,Write a Python program to Intersection in Tuple Records Data,"# Python3 code to demonstrate working of
# Intersection in Tuple Records Data
# Using list comprehension

# Initializing lists
test_list1 = [('gfg', 1), ('is', 2), ('best', 3)]
test_list2 = [('i', 3), ('love', 4), ('gfg', 1)]

# printing original lists
print(""The original list 1 is : "" + str(test_list1))
print(""The original list 2 is : "" + str(test_list2))

# Intersection in Tuple Records Data
# Using list comprehension
res = [ele1 for ele1 in test_list1
for ele2 in test_list2 if ele1 == ele2]

# printing result
print(""The Intersection of data records is : "" + str(res))","def intersection(t1, t2):
    return t1[0]

t1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
t2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

print(intersection(t1, t2))

""""""

# Solution:

def intersection(t1, t2):
    return t1[0]

t1 = (1,"
1766,Create a pandas column using for loop in Python,"# importing libraries
import pandas as pd
import numpy as np

raw_Data = {'Voter_name': ['Geek1', 'Geek2', 'Geek3', 'Geek4',
'Geek5', 'Geek6', 'Geek7', 'Geek8'],
'Voter_age': [15, 23, 25, 9, 67, 54, 42, np.NaN]}

df = pd.DataFrame(raw_Data, columns = ['Voter_name', 'Voter_age'])
# //DataFrame will look like
#
# Voter_name Voter_age
# Geek1 15
# Geek2 23
# Geek3 25
# Geek4 09
# Geek5 67
# Geek6 54
# Geek7 42
# Geek8 not a number

eligible = []

# For each row in the column
for age in df['Voter_age']:
if age >= 18: # if Voter eligible
eligible.append('Yes')
elif age < 18: # if voter is not eligible
eligible.append(""No"")
else:
eligible.append(""Not Sure"")

# Create a column from the list
df['Voter'] = eligible

print(df)","import pandas as pd

# Create a dataframe
df = pd.DataFrame({""Name"": [""John"", ""Jane"", ""John"", ""Jane"", ""John"", ""Jane"", ""Jane"", ""Jane"", ""Jane""],
                   ""Age"": [30, 32, 33, 34, 35, 36, 37, 38, 39],
                   ""Class"": [""First"", ""Second"", ""First"", ""Second"", ""First"", ""Second"", ""First"", ""Second"", ""First""]})

# Create a new column
df"
1767,Create a Pandas DataFrame from List of Dicts in Python,"# Python code demonstrate how to create
# Pandas DataFrame by lists of dicts.
import pandas as pd

# Initialise data to lists.
data = [{'Geeks': 'dataframe', 'For': 'using', 'geeks': 'list'},
{'Geeks':10, 'For': 20, 'geeks': 30}]

# Creates DataFrame.
df = pd.DataFrame(data)

# Print the data
df","import pandas as pd

data = [
    {'name': 'John', 'age': 30, 'city': 'San Francisco'},
    {'name': 'Anna', 'age': 35, 'city': 'Los Angeles'},
    {'name': 'Peter', 'age': 25, 'city': 'Boston'},
    {'name': 'George', 'age': 35, 'city': 'Atlanta'}
]

df = pd.DataFrame(data)

print("
1768,How to keep old content when Writing to Files in Python,"# Python program to keep the old content of the file
# when using write.

# Opening the file with append mode
file = open(""gfg input file.txt"", ""a"")

# Content to be added
content = ""\n\n# This Content is added through the program #""

# Writing the file
file.write(content)

# Closing the opened file
file.close()","def solution(files):
    answer = []
    for file in files:
        with open(file, 'r') as f:
            content = f.read()
        answer.append(content)
    return answer

print(solution([""a.txt"", ""b.txt"", ""c.txt""]))

""""""

def solution(files):
    answer = []
    for file in files:
        with open(file, 'r') as f:
            content = f.read()"
1769,Convert String to Set in Python,"# create a string str
string = ""geeks""
print(""Initially"")
print(""The datatype of string : "" + str(type(string)))
print(""Contents of string : "" + string)

# convert String to Set
string = set(string)
print(""\nAfter the conversion"")
print(""The datatype of string : "" + str(type(string)))
print(""Contents of string : "", string)","def convert_string_to_set(string):
    return set(string.split())

print(convert_string_to_set(""1 2 3 4 5 6 7 8 9 10""))

""""""

def convert_string_to_set(string):
    return set(string.split())

print(convert_string_to_set(""1 2 3 4 5 6 7 8 9 10""))

""""""

def convert_string_to_set(string):
    return set(string.split())

print"
1770,Create a Numpy array filled with all zeros | Python,"# Python Program to create array with all zeros
import numpy as geek

a = geek.zeros(3, dtype = int)
print(""Matrix a : \n"", a)

b = geek.zeros([3, 3], dtype = int)
print(""\nMatrix b : \n"", b)","import numpy as np

a = np.zeros((3,4))
print(a)

# Create a Numpy array filled with all zeros | Python

# Create a Numpy array filled with all zeros | Python

# Create a Numpy array filled with all zeros | Python

# Create a Numpy array filled with all zeros | Python

# Create a Numpy array filled with all zeros | Python

# Create a Numpy array filled with all zeros | Python

#"
1771,Write a Python program to Replace words from Dictionary,"# Python3 code to demonstrate working of
# Replace words from Dictionary
# Using split() + join() + get()

# initializing string
test_str = 'geekforgeeks best for geeks'

# printing original string
print(""The original string is : "" + str(test_str))

# lookup Dictionary
lookp_dict = {""best"" : ""good and better"", ""geeks"" : ""all CS aspirants""}

# performing split()
temp = test_str.split()
res = []
for wrd in temp:

# searching from lookp_dict
res.append(lookp_dict.get(wrd, wrd))

res = ' '.join(res)

# printing result
print(""Replaced Strings : "" + str(res))","def replace_words(dictionary, words):
    for word in words:
        dictionary[word] = dictionary.get(word, 0) + 1
    return dictionary

dictionary = {'apple': 2, 'banana': 1, 'orange': 1, 'grape': 1}
print(replace_words(dictionary, ['apple', 'banana', 'orange']))

""""""

def replace_words(dictionary, words):
    for word in words:
        dictionary[word] = dictionary"
1772,Write a Python program to print negative numbers in a list,"# Python program to print negative Numbers in a List

# list of numbers
list1 = [11, -21, 0, 45, 66, -93]

# iterating each number in list
for num in list1:

# checking condition
if num < 0:
print(num, end = "" "")","def negative_numbers(lst):
    for i in lst:
        if i < 0:
            print(i)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
negative_numbers(lst)

""""""

def negative_numbers(lst):
    for i in lst:
        if i < 0:
            print(i)

lst = [1, 2, 3, 4, 5, 6"
1773,Write a Python program to Find all duplicate characters in string,"from collections import Counter

def find_dup_char(input):

# now create dictionary using counter method
# which will have strings as key and their
# frequencies as value
WC = Counter(input)
j = -1


# Finding no. of occurrence of a character
# and get the index of it.
for i in WC.values():
j = j + 1
if( i > 1 ):
print WC.keys()[j],

# Driver program
if __name__ == ""__main__"":
input = 'geeksforgeeks'
find_dup_char(input)","def find_duplicate(string):
    duplicate = []
    for i in string:
        if i in duplicate:
            duplicate.remove(i)
        else:
            duplicate.append(i)
    return duplicate

print(find_duplicate(""abcdefg""))

""""""

def find_duplicate(string):
    duplicate = []
    for i in string:
        if i in duplicate:
            duplicate.remove(i)"
1774,Write a Python program to Records with Value at K index,"# Python3 code to demonstrate working of
# Records with Value at K index
# Using loop

# initialize list
test_list = [(3, 1, 5), (1, 3, 6), (2, 5, 7), (5, 2, 8), (6, 3, 0)]

# printing original list
print(""The original list is : "" + str(test_list))

# initialize ele
ele = 3

# initialize K
K = 1

# Records with Value at K index
# Using loop
# using y for K = 1
res = []
for x, y, z in test_list:
if y == ele:
res.append((x, y, z))

# printing result
print(""The tuples of element at Kth position : "" + str(res))","def solution(arr, k):
    for i in range(len(arr)):
        if arr[i] == k:
            return i
    return -1

""""""

def solution(arr, k):
    for i in range(len(arr)):
        if arr[i] == k:
            return i
    return -1

""""""

def solution(arr, k):
    for i in range(len(arr)):
        if arr[i] == k:"
1775,Write a Python program to convert tuple into list by adding the given string after every element,"# Python3 code to demonstrate working of
# Convert tuple to List with succeeding element
# Using list comprehension


# initializing tuple
test_tup = (5, 6, 7, 4, 9)


# printing original tuple
print(""The original tuple is : "", test_tup)


# initializing K
K = ""Gfg""


# list comprehension for nested loop for flatten
res = [ele for sub in test_tup for ele in (sub, K)]


# printing result
print(""Converted Tuple with K : "", res)","def solution(t):
    return list(t) + [t[0] + t[1]]

""""""

def solution(t):
    return list(t) + [t[0] + t[1]]

def solution(t):
    return list(t) + [t[0] + t[1]] + [t[0] + t[2]]

def solution(t):
    return list(t) + [t[0] + t[1"
1776,numpy matrix operations | randn() function in Python,"# Python program explaining
# numpy.matlib.randn() function

# importing matrix library from numpy
import numpy as geek
import numpy.matlib

# desired 3 x 4 random output matrix
out_mat = geek.matlib.randn((3, 4))
print (""Output matrix : "", out_mat)","import numpy as np

A = np.random.randn(3,3)
B = np.random.randn(3,3)

print(A+B)
print(A-B)
print(A*B)
print(A/B)
print(A.dot(B))
print(A.T.dot(B))
print(A.T.dot(A))
print(A.T.dot(A.T))
print(A.T.dot(A"
1777,How to scroll down followers popup in Instagram  in Python,"import selenium
print(selenium.__version__)","import webbrowser
webbrowser.open('https://www.instagram.com/p/C9WZVJZVV/')

""""""

import webbrowser
import os
import time

def open_browser():
    webbrowser.open('https://www.instagram.com/p/C9WZVJZVV/')

def open_instagram():
    os.system('python insta.py')

def main():
    print("""""""
1778,Write a Python program to Tuple List intersection (Order irrespective),"# Python3 code to demonstrate working of
# Tuple List intersection [ Order irrespective ]
# Using sorted() + set() + & operator + list comprehension

# initializing lists
test_list1 = [(3, 4), (5, 6), (9, 10), (4, 5)]
test_list2 = [(5, 4), (3, 4), (6, 5), (9, 11)]

# printing original list
print(""The original list 1 is : "" + str(test_list1))
print(""The original list 2 is : "" + str(test_list2))

# Using sorted() + set() + & operator + list comprehension
# Using & operator to intersect, sorting before performing intersection
res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])

# printing result
print(""List after intersection : "" + str(res))","""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution"
1779,Write a Python Library for Linked List,"# importing module
import collections


# initialising a deque() of arbitary length
linked_lst = collections.deque()


# filling deque() with elements
linked_lst.append('first')
linked_lst.append('second')
linked_lst.append('third')


print(""elements in the linked_list:"")
print(linked_lst)


# adding element at an arbitary position
linked_lst.insert(1, 'fourth')


print(""elements in the linked_list:"")
print(linked_lst)


# deleting the last element
linked_lst.pop()


print(""elements in the linked_list:"")
print(linked_lst)


# removing a specific element
linked_lst.remove('fourth')


print(""elements in the linked_list:"")
print(linked_lst)","def solution(head):
    # Write your code here
    if head is None:
        return None
    
    slow = head
    fast = head
    
    while fast.next is not None and fast.next.next is not None:
        slow = slow.next
        fast = fast.next.next
    
    slow.next = None
    
    return slow

# This is the class of the input linked list.
# class ListNode:
#     def __init__(self, x):
#"
1780,Write a Python program to convert any base to decimal by using int() method,"# Python program to convert any base
# number to its corresponding decimal
# number

# Function to convert any base number
# to its corresponding decimal number
def any_base_to_decimal(number, base):

# calling the builtin function
# int(number, base) by passing
# two arguments in it number in
# string form and base and store
# the output value in temp
temp = int(number, base)

# printing the corresponding decimal
# number
print(temp)

# Driver's Code
if __name__ == '__main__' :
hexadecimal_number = '1A'
base = 16
any_base_to_decimal(hexadecimal_number, base)","def base_convert(base, num):
    if base == '1':
        return num
    else:
        return base_convert(base, num // base) + str(num % base)

print(base_convert('1', 5))

""""""

# Solution:

def base_convert(base, num):
    if base == '1':
        return num
    else:
        return base_convert(base, num // base) + str("
1781,How to create filename containing date or time in Python,"# import module
from datetime import datetime

# get current date and time
current_datetime = datetime.now()
print(""Current date & time : "", current_datetime)

# convert datetime obj to string
str_current_datetime = str(current_datetime)

# create a file object along with extension
file_name = str_current_datetime+"".txt""
file = open(file_name, 'w')

print(""File created : "", file.name)
file.close()","import datetime

def solution(files):
    answer = []
    for file in files:
        with open(file, 'r') as f:
            date = f.readline().split()
            time = f.readline().split()
            date = datetime.datetime.strptime(date[0], '%Y-%m-%d %H:%M:%S')
            time = datetime.datetime.strptime(time[0], '%H:%M:"
1782,Write a Python program to Replace NaN values with average of columns,"# Python code to demonstrate
# to replace nan values
# with an average of columns

import numpy as np

# Initialising numpy array
ini_array = np.array([[1.3, 2.5, 3.6, np.nan],
[2.6, 3.3, np.nan, 5.5],
[2.1, 3.2, 5.4, 6.5]])

# printing initial array
print (""initial array"", ini_array)

# column mean
col_mean = np.nanmean(ini_array, axis = 0)

# printing column mean
print (""columns mean"", str(col_mean))

# find indices where nan value is present
inds = np.where(np.isnan(ini_array))

# replace inds with avg of column
ini_array[inds] = np.take(col_mean, inds[1])

# printing final array
print (""final array"", ini_array)","import numpy as np
import pandas as pd

# Read the data
data = pd.read_csv('data.csv')

# Replace NaN values with average of columns
data.fillna(data.mean(), inplace=True)

# Print the data
print(data)

# Create a new dataframe
new_data = data.copy()

# Replace NaN values with average of columns
new_data.fillna(new_data.mean(), inplace=True"
1783,Write a Python program to String till Substring,"# Python3 code to demonstrate
# String till Substring
# using partition()


# initializing string
test_string = ""GeeksforGeeks is best for geeks""


# initializing split word
spl_word = 'best'


# printing original string
print(""The original string : "" + str(test_string))


# printing split string
print(""The split string : "" + str(spl_word))


# using partition()
# String till Substring
res = test_string.partition(spl_word)[0]


# print result
print(""String before the substring occurrence : "" + res)","""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution 23

#"
1784,Find the number of occurrences of a sequence in a NumPy array in Python,"# importing package
import numpy

# create numpy array
arr = numpy.array([[2, 8, 9, 4],
[9, 4, 9, 4],
[4, 5, 9, 7],
[2, 9, 4, 3]])

# Counting sequence
output = repr(arr).count(""9, 4"")

# view output
print(output)","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a.count(3))

# Output:
# 3

# Explanation:
# The array contains the following occurrences:
#
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9
# 10

# Solution:
#
# def count_occurrences"
1785,Write a Python program to Remove substring list from String,"# Python3 code to demonstrate working of
# Remove substring list from String
# Using loop + replace()

# initializing string
test_str = ""gfg is best for all geeks""

# printing original string
print(""The original string is : "" + test_str)

# initializing sub list
sub_list = [""best"", ""all""]

# Remove substring list from String
# Using loop + replace()
for sub in sub_list:
test_str = test_str.replace(' ' + sub + ' ', ' ')

# printing result
print(""The string after substring removal : "" + test_str)","def remove_substring(str, sub):
    return str.replace(sub, """")

print(remove_substring(""abcdefg"", ""e""))

""""""

def remove_substring(str, sub):
    return str.replace(sub, """")

print(remove_substring(""abcdefg"", ""e""))"
1786,numpy.random.geometric() in Python,"# import numpy and geometric
import numpy as np
import matplotlib.pyplot as plt

# Using geometric() method
gfg = np.random.geometric(0.65, 1000)

count, bins, ignored = plt.hist(gfg, 40, density = True)
plt.show()","import numpy as np

def geometric(n):
    """"""
    Returns the geometric sequence of n numbers.
    """"""
    if n == 0:
        return []
    elif n == 1:
        return [1]
    else:
        return [1 + geometric(n - 1)] + geometric(n - 1)

print(geometric(5))

""""""
Output:
[1, 1, 1, 2, 4, 9, 16, 25, 36, 49, 64, 81, 100"
1787,numpy.trim_zeros() in Python,"import numpy as geek

gfg = geek.array((0, 0, 0, 0, 1, 5, 7, 0, 6, 2, 9, 0, 10, 0, 0))

# without trim parameter
# returns an array without leading and trailing zeros

res = geek.trim_zeros(gfg)
print(res)","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

a.trim_zeros()

a.trim_zeros()

a.trim_zeros()

a.trim_zeros()

a.trim_zeros()

a.trim_zeros()

a.trim_zeros()

a.trim_zeros()

a."
1788,Write a Python program to Numpy matrix.take(),"# import the important module in python
import numpy as np

# make matrix with numpy
gfg = np.matrix('[4, 1, 12, 3, 4, 6, 7]')

# applying matrix.take() method
geek = gfg.take(2)

print(geek)","import numpy as np

matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(matrix.take([0, 1, 2], axis=0))

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11"
1789,"What is a clean, Pythonic way to have multiple constructors in Python","class example:

def __init__(self):
print(""One"")

def __init__(self):
print(""Two"")

def __init__(self):
print(""Three"")


e = example()","def solution(n):
    def is_prime(n):
        if n == 1:
            return False
        for i in range(2, n):
            if n % i == 0:
                return False
        return True

    def is_prime_recursive(n):
        if n == 1:
            return False
        if n == 2:
            return True
        if n % 2 == 0:
            return False
        for i in range(3, n, 2):"
1790,Implementation of XOR Linked List in Python,"# import required module
import ctypes



# create node class
class Node:
def __init__(self, value):
self.value = value
self.npx = 0



# create linked list class
class XorLinkedList:

# constructor
def __init__(self):
self.head = None
self.tail = None
self.__nodes = []

# method to insert node at beginning
def InsertAtStart(self, value):
node = Node(value)
if self.head is None: # If list is empty
self.head = node
self.tail = node
else:
self.head.npx = id(node) ^ self.head.npx
node.npx = id(self.head)
self.head = node
self.__nodes.append(node)

# method to insert node at end
def InsertAtEnd(self, value):
node = Node(value)
if self.head is None: # If list is empty
self.head = node
self.tail = node
else:
self.tail.npx = id(node) ^ self.tail.npx
node.npx = id(self.tail)
self.tail = node
self.__nodes.append(node)

# method to remove node at beginning
def DeleteAtStart(self):
if self.isEmpty(): # If list is empty
return ""List is empty !""
elif self.head == self.tail: # If list has 1 node
self.head = self.tail = None
elif (0 ^ self.head.npx) == id(self.tail): # If list has 2 nodes
self.head = self.tail
self.head.npx = self.tail.npx = 0
else: # If list has more than 2 nodes
res = self.head.value
x = self.__type_cast(0 ^ self.head.npx) # Address of next node
y = (id(self.head) ^ x.npx) # Address of next of next node
self.head = x
self.head.npx = 0 ^ y
return res

# method to remove node at end
def DeleteAtEnd(self):
if self.isEmpty(): # If list is empty
return ""List is empty !""
elif self.head == self.tail: # If list has 1 node
self.head = self.tail = None
elif self.__type_cast(0 ^ self.head.npx) == (self.tail): # If list has 2 nodes
self.tail = self.head
self.head.npx = self.tail.npx = 0
else: # If list has more than 2 nodes
prev_id = 0
node = self.head
next_id = 1
while next_id:
next_id = prev_id ^ node.npx
if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
res = node.value
x = self.__type_cast(prev_id).npx ^ id(node)
y = self.__type_cast(prev_id)
y.npx = x ^ 0
self.tail = y
return res

# method to traverse linked list
def Print(self):
""""""We are printing values rather than returning it bacause
for returning we have to append all values in a list
and it takes extra memory to save all values in a list.""""""

if self.head != None:
prev_id = 0
node = self.head
next_id = 1
print(node.value, end=' ')
while next_id:
next_id = prev_id ^ node.npx
if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
print(node.value, end=' ')
else:
return
else:
print(""List is empty !"")

# method to traverse linked list in reverse order
def ReversePrint(self):

# Print Values is reverse order.
""""""We are printing values rather than returning it bacause
for returning we have to append all values in a list
and it takes extra memory to save all values in a list.""""""

if self.head != None:
prev_id = 0
node = self.tail
next_id = 1
print(node.value, end=' ')
while next_id:
next_id = prev_id ^ node.npx
if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
print(node.value, end=' ')
else:
return
else:
print(""List is empty !"")

# method to get length of linked list
def Length(self):
if not self.isEmpty():
prev_id = 0
node = self.head
next_id = 1
count = 1
while next_id:
next_id = prev_id ^ node.npx
if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
count += 1
else:
return count
else:
return 0

# method to get node data value by index
def PrintByIndex(self, index):
prev_id = 0
node = self.head
for i in range(index):
next_id = prev_id ^ node.npx

if next_id:
prev_id = id(node)
node = self.__type_cast(next_id)
else:
return ""Value dosn't found index out of range.""
return node.value

# method to check if the liked list is empty or not
def isEmpty(self):
if self.head is None:
return True
return False

# method to return a new instance of type
def __type_cast(self, id):
return ctypes.cast(id, ctypes.py_object).value



# Driver Code

# create object
obj = XorLinkedList()

# insert nodes
obj.InsertAtEnd(2)
obj.InsertAtEnd(3)
obj.InsertAtEnd(4)
obj.InsertAtStart(0)
obj.InsertAtStart(6)
obj.InsertAtEnd(55)

# display length
print(""\nLength:"", obj.Length())

# traverse
print(""\nTraverse linked list:"")
obj.Print()

print(""\nTraverse in reverse order:"")
obj.ReversePrint()

# display data values by index
print('\nNodes:')
for i in range(obj.Length()):
print(""Data value at index"", i, 'is', obj.PrintByIndex(i))

# removing nodes
print(""\nDelete Last Node: "", obj.DeleteAtEnd())
print(""\nDelete First Node: "", obj.DeleteAtStart())

# new length
print(""\nUpdated length:"", obj.Length())

# display data values by index
print('\nNodes:')
for i in range(obj.Length()):
print(""Data value at index"", i, 'is', obj.PrintByIndex(i))

# traverse
print(""\nTraverse linked list:"")
obj.Print()

print(""\nTraverse in reverse order:"")
obj.ReversePrint()","def xor_linked_list(head, k):
    if head is None:
        return None
    if head.next is None:
        return head
    if head.next.next is None:
        return head
    if head.next.next.next is None:
        return head
    if head.next.next.next.next is None:
        return head
    if head.next.next.next.next.next is None:
        return head
    if head.next.next.next"
1791,Write a Python program to Check for URL in a String,"# Python code to find the URL from an input string
# Using the regular expression
import re

def Find(string):

# findall() has been used
# with valid conditions for urls in string
regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?]))""
url = re.findall(regex,string)
return [x[0] for x in url]

# Driver Code
string = 'My Profile: https://auth.geeksforgeeks.org/user/Chinmoy%20Lenka/articles in the portal of http://www.geeksforgeeks.org/'
print(""Urls: "", Find(string))","def check_url(url):
    if 'http' in url:
        return True
    else:
        return False

print(check_url('http://google.com'))
print(check_url('http://www.google.com'))
print(check_url('http://www.google.com'))
print(check_url('http://www.google.com'))
print(check_url('http://www.google.com'))
print(check_url('http://www"
1792,How to Calculate the determinant of a matrix using NumPy in Python,"# importing Numpy package
import numpy as np

# creating a 2X2 Numpy matrix
n_array = np.array([[50, 29], [30, 44]])

# Displaying the Matrix
print(""Numpy Matrix is:"")
print(n_array)

# calculating the determinant of matrix
det = np.linalg.det(n_array)

print(""\nDeterminant of given 2X2 matrix:"")
print(int(det))","import numpy as np

# Create a matrix
A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Calculate the determinant
det = np.linalg.det(A)

# Print the determinant
print(det)

# Create a matrix
A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Calculate"
1793,Replace values in Pandas dataframe using regex in Python,"# importing pandas as pd
import pandas as pd

# Let's create a Dataframe
df = pd.DataFrame({'City':['New York', 'Parague', 'New Delhi', 'Venice', 'new Orleans'],
'Event':['Music', 'Poetry', 'Theatre', 'Comedy', 'Tech_Summit'],
'Cost':[10000, 5000, 15000, 2000, 12000]})

# Let's create the index
index_ = [pd.Period('02-2018'), pd.Period('04-2018'),
pd.Period('06-2018'), pd.Period('10-2018'), pd.Period('12-2018')]

# Set the index
df.index = index_

# Let's print the dataframe
print(df)","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pima-indians-diabetes.csv?raw=true')

df['Gender'] = df['Sex'].map({'female': 0,'male': 1})
df['Age'] = df['Age'].fillna(df['Age'].median())
df['EstimatedSalary'] = df['Age'] * df['BMI']"
1794,Write a Python program to Factors Frequency Dictionary,"# Python3 code to demonstrate working of
# Factors Frequency Dictionary
# Using loop

# initializing list
test_list = [2, 4, 6, 8, 3, 9, 12, 15, 16, 18]

# printing original list
print(""The original list : "" + str(test_list))

res = dict()

# iterating till max element
for idx in range(1, max(test_list)):
res[idx] = 0
for key in test_list:

# checking for factor
if key % idx == 0:
res[idx] += 1

# printing result
print(""The constructed dictionary : "" + str(res))","def factors(n):
    factors = []
    for i in range(1, n + 1):
        if n % i == 0:
            factors.append(i)
    return factors

def FFD(n):
    factors = factors(n)
    F = {}
    for i in range(1, len(factors) + 1):
        F[i] = factors.count(i)
    return F

n = int(input(""Enter the number: ""))
print(FD"
1795,Write a Python program to Convert Integer Matrix to String Matrix,"# Python3 code to demonstrate working of
# Convert Integer Matrix to String Matrix
# Using str() + list comprehension

# initializing list
test_list = [[4, 5, 7], [10, 8, 3], [19, 4, 6], [9, 3, 6]]

# printing original list
print(""The original list : "" + str(test_list))

# using str() to convert each element to string
res = [[str(ele) for ele in sub] for sub in test_list]

# printing result
print(""The data type converted Matrix : "" + str(res))","def matrix_to_string(matrix):
    # your code goes here
    return matrix

# driver code
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(matrix_to_string(matrix))

# solution
def matrix_to_string(matrix):
    # your code goes here
    return '\n'.join([' '.join(map(str, row)) for row in matrix])

# driver code
mat"
1796,Write a Python program to find smallest number in a list,"# Python program to find smallest
# number in a list


# list of numbers
list1 = [10, 20, 4, 45, 99]


# sorting the list
list1.sort()


# printing the first element
print(""Smallest element is:"", *list1[:1])","def smallest(numbers):
    smallest = numbers[0]
    for i in range(1, len(numbers)):
        if numbers[i] < smallest:
            smallest = numbers[i]
    return smallest

print(smallest(numbers))

""""""

# Solution 1

def smallest(numbers):
    smallest = numbers[0]
    for i in range(1, len(numbers)):
        if numbers[i] < smallest:
            smallest"
1797,How to Change Tkinter LableFrame Border Color in Python,"# import tkinter
import tkinter as tk

# import ttk theme module for styling
import tkinter.ttk as ttk","import tkinter as tk

def change_border_color(event):
    color = event.widget.cget(""bg"")
    event.widget.config(bg=color)

root = tk.Tk()

frame = tk.Frame(root)
frame.pack()

frame.bind(""<Button-1>"", change_border_color)

frame.bind(""<Configure>"", change_border_color)

frame.bind(""<FocusIn>"","
1798,Write a Python program to Filter the List of String whose index in second List contaons the given Substring,"# Python3 code to demonstrate working of
# Extract elements filtered by substring
# from other list Using zip() + loop + in
# operator

# initializing list
test_list1 = [""Gfg"", ""is"", ""not"", ""best"", ""and"",
""not"", ""for"", ""CS""]
test_list2 = [""Its ok"", ""all ok"", ""wrong"", ""looks ok"",
""ok"", ""wrong"", ""ok"", ""thats ok""]

# printing original lists
print(""The original list 1 is : "" + str(test_list1))
print(""The original list 2 is : "" + str(test_list2))

# initializing substr
sub_str = ""ok""

res = []
# using zip() to map by index
for ele1, ele2 in zip(test_list1, test_list2):

# checking for substring
if sub_str in ele2:
res.append(ele1)

# printing result
print(""The extracted list : "" + str(res))","def filter_string(string, sub_string):
    return string[string.index(sub_string):]

print(filter_string(""abcdefg"", ""e""))

""""""

def filter_string(string, sub_string):
    return string[string.index(sub_string):]

print(filter_string(""abcdefg"", ""e""))

""""""

def filter_string(string, sub_string):
    return string["
1799,Write a Python program to count positive and negative numbers in a list,"# Python program to count positive and negative numbers in a List

# list of numbers
list1 = [10, -21, 4, -45, 66, -93, 1]

pos_count, neg_count = 0, 0

# iterating each number in list
for num in list1:

# checking condition
if num >= 0:
pos_count += 1

else:
neg_count += 1

print(""Positive numbers in the list: "", pos_count)
print(""Negative numbers in the list: "", neg_count)","def count_positive_negative(list):
    count = 0
    for i in list:
        if i > 0:
            count += 1
        elif i < 0:
            count += 1
    return count

print(count_positive_negative([-1, -2, -3, -4, -5]))

""""""

def count_positive_negative(list):
    count = 0
    for i in list:
        if i > 0:
            count += 1"
1800,How to count unique values inside a list in Python,"# taking an input list
input_list = [1, 2, 2, 5, 8, 4, 4, 8]

# taking an input list
l1 = []

# taking an counter
count = 0

# travesing the array
for item in input_list:
if item not in l1:
count += 1
l1.append(item)

# printing the output
print(""No of unique items are:"", count)","def unique_values(lst):
    # Your code here
    return len(set(lst))

lst = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15,"
1801,Find the length of each string element in the Numpy array in Python,"# importing the numpy library as np
import numpy as np

# Create a numpy array
arr = np.array(['New York', 'Lisbon', 'Beijing', 'Quebec'])

# Print the array
print(arr)","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(a.size)

# Python code to solve the following problem:

# import numpy as np

# a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
# print(a.size)

# Python code to solve the following problem:

# import numpy as"
1802,Write a Python dictionary with keys having multiple inputs,"# Python code to demonstrate a dictionary
# with multiple inputs in a key.
import random as rn


# creating an empty dictionary
dict = {}


# Insert first triplet in dictionary
x, y, z = 10, 20, 30
dict[x, y, z] = x + y - z;


# Insert second triplet in dictionary
x, y, z = 5, 2, 4
dict[x, y, z] = x + y - z;


# print the dictionary
print(dict)","def solution(input_list):
    # Your code here
    return input_list

""""""

def solution(input_list):
    # Your code here
    return input_list

""""""

def solution(input_list):
    # Your code here
    return input_list

""""""

def solution(input_list):
    # Your code here
    return input_list

""""""

def solution(input_list):
    # Your code here
    return input_list

"""""""
1803,How to choose elements from the list with different probability using NumPy in Python,"# import numpy library
import numpy as np

# create a list
num_list = [10, 20, 30, 40, 50]

# uniformly select any element
# from the list
number = np.random.choice(num_list)

print(number)","import numpy as np

# Create a list of 10 random numbers between 0 and 1
np.random.seed(0)
a = np.random.rand(10)

# Create a list of 10 random numbers between 0 and 1
np.random.seed(0)
b = np.random.rand(10)

# Create a list of 10 random numbers between 0 and 1
np.random.seed(0)
c = np.random.rand(10)

# Create a list"
1804,Write a Python program to Words Frequency in String Shorthands,"# Python3 code to demonstrate working of
# Words Frequency in String Shorthands
# Using dictionary comprehension + count() + split()

# initializing string
test_str = 'Gfg is best . Geeks are good and Geeks like Gfg'

# printing original string
print(""The original string is : "" + str(test_str))

# Words Frequency in String Shorthands
# Using dictionary comprehension + count() + split()
res = {key: test_str.count(key) for key in test_str.split()}

# printing result
print(""The words frequency : "" + str(res))","def words_frequency(string):
    word_list = string.split()
    word_dict = {}
    for word in word_list:
        if word in word_dict:
            word_dict[word] += 1
        else:
            word_dict[word] = 1
    return word_dict

print(words_frequency(""The quick brown fox jumps over the lazy dog""))

""""""

def words_frequency(string):
    word_list = string.split()
    word_"
1805,Write a Python program to Count the frequency of matrix row length,"# Python3 code to demonstrate working of
# Row lengths counts
# Using dictionary + loop

# initializing list
test_list = [[6, 3, 1], [8, 9], [2],
[10, 12, 7], [4, 11]]

# printing original list
print(""The original list is : "" + str(test_list))

res = dict()
for sub in test_list:

# initializing incase of new length
if len(sub) not in res:
res[len(sub)] = 1

# increment in case of length present
else:
res[len(sub)] += 1

# printing result
print(""Row length frequencies : "" + str(res))","def count_row_length(matrix):
    count = 0
    for i in range(len(matrix)):
        count += len(matrix[i])
    return count

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(count_row_length(matrix))

""""""

def count_row_length(matrix):
    count = 0
    for i in range(len(matrix)):"
1806,Find the average of an unknown number of inputs in Python,"

# function that takes arbitary
# number of inputs
def avgfun(*n):
sums = 0

for t in n:
sums = sums + t

avg = sums / len(n)
return avg


# Driver Code
result1 = avgfun(1, 2, 3)
result2 = avgfun(2, 6, 4, 8)

# Printing average of the list
print(round(result1, 2))
print(round(result2, 2))","def solution(n):
    return n*(n+1)/2

""""""

def solution(n):
    return n*(n+1)/2

print(solution(5))"
1807,Get row numbers of NumPy array having element larger than X in Python,"# importing library
import numpy

# create numpy array
arr = numpy.array([[1, 2, 3, 4, 5],
[10, -3, 30, 4, 5],
[3, 2, 5, -4, 5],
[9, 7, 3, 6, 5]
])

# declare specified value
X = 6

# view array
print(""Given Array:\n"", arr)

# finding out the row numbers
output = numpy.where(numpy.any(arr > X,
axis = 1))

# view output
print(""Result:\n"", output)","import numpy as np

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

if x[x > 5] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:
    print(""Yes"")
else:
    print(""No"")

""""""

# Solution

import numpy as np

x = np.array([1, 2, 3, 4, 5, 6, 7"
1808,Write a Python program to get all subsets of given size of a set,"# Python Program to Print
# all subsets of given size of a set


import itertools


def findsubsets(s, n):
return list(itertools.combinations(s, n))


# Driver Code
s = {1, 2, 3}
n = 2


print(findsubsets(s, n))","def get_subsets(set, size):
    if size == 0:
        return [[]]
    else:
        return [subset + [set[i]] for i in range(size)]

def get_subsets_recursive(set, size, subset):
    if size == 0:
        return [[]]
    else:
        if len(subset) == size:
            return [subset + [set[i]] for i in range(size)]
        else:"
1809,Write a Python program to find uncommon words from two Strings,"# Python3 program to find a list of uncommon words

# Function to return all uncommon words
def UncommonWords(A, B):

# count will contain all the word counts
count = {}

# insert words of string A to hash
for word in A.split():
count[word] = count.get(word, 0) + 1

# insert words of string B to hash
for word in B.split():
count[word] = count.get(word, 0) + 1

# return required list of words
return [word for word in count if count[word] == 1]

# Driver Code
A = ""Geeks for Geeks""
B = ""Learning from Geeks for Geeks""

# Print required answer
print(UncommonWords(A, B))","def uncommon_words(str1, str2):
    str1 = str1.lower()
    str2 = str2.lower()
    str1_set = set(str1.split())
    str2_set = set(str2.split())
    common_words = str1_set.intersection(str2_set)
    return common_words

print(uncommon_words(""hello world"", ""hello world""))

""""""

def uncommon_words(str1, str2):"
1810,Creating a Pandas dataframe using list of tuples in Python,"# import pandas to use pandas DataFrame
import pandas as pd

# data in the form of list of tuples
data = [('Peter', 18, 7),
('Riff', 15, 6),
('John', 17, 8),
('Michel', 18, 7),
('Sheli', 17, 5) ]


# create DataFrame using data
df = pd.DataFrame(data, columns =['Name', 'Age', 'Score'])

print(df)","import pandas as pd

# Create a dataframe from the list of tuples
df = pd.DataFrame(list(tuple), columns=['Name', 'Age', 'Job', 'Rating'])

# Print the dataframe
print(df)

# Create a dataframe from the list of tuples
df = pd.DataFrame(list(tuple), columns=['Name', 'Age', 'Job', 'Rating'])

# Print the dataframe
print(df)"
1811,"How to get the floor, ceiling and truncated values of the elements of a numpy array in Python","# Import the numpy library
import numpy as np


# Initialize numpy array
a = np.array([1.2])

# Get floor value
a = np.floor(a)
print(a)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)
print(a.shape)
print(a.dtype)
print(a.flatten())
print(a.flatten().shape)
print(a.flatten().dtype)
print(a.flatten().flatten())
print(a.flatten().flatten().shape)
print(a.fl"
1812,How to iterate over files in directory using Python,"# import required module
import os
# assign directory
directory = 'files'


# iterate over files in
# that directory
for filename in os.listdir(directory):
f = os.path.join(directory, filename)
# checking if it is a file
if os.path.isfile(f):
print(f)","import os

def iterate_directory(directory):
    """"""
    :type directory: str
    :rtype: int
    """"""
    for root, dirs, files in os.walk(directory):
        for file in files:
            print(os.path.join(root, file))

if __name__ == '__main__':
    iterate_directory('/home/richard/Documents/python/python_projects/')"
1813,Write a Python program to Elementwise AND in tuples,"# Python3 code to demonstrate working of
# Elementwise AND in tuples
# using zip() + generator expression

# initialize tuples
test_tup1 = (10, 4, 6, 9)
test_tup2 = (5, 2, 3, 3)

# printing original tuples
print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))

# Elementwise AND in tuples
# using zip() + generator expression
res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))

# printing result
print(""The AND tuple : "" + str(res))","import itertools

def elementwise_and(a, b):
    return tuple(itertools.chain.from_iterable(itertools.combinations(a, 2)))

print(elementwise_and([1, 2, 3], [4, 5, 6]))

""""""

# Solution

def elementwise_and(a, b):
    return tuple(itertools.chain.from_iterable(itertools.combinations(a, 2)))

print(element"
1814,Write a Python program to Remove Tuples from the List having every element as None,"# Python3 code to demonstrate working of
# Remove None Tuples from List
# Using all() + list comprehension

# initializing list
test_list = [(None, 2), (None, None), (3, 4), (12, 3), (None, )]

# printing original list
print(""The original list is : "" + str(test_list))

# negating result for discarding all None Tuples
res = [sub for sub in test_list if not all(ele == None for ele in sub)]

# printing result
print(""Removed None Tuples : "" + str(res))","import collections

def remove_tuples(lst):
    # create a new list with all None values removed
    new_lst = []
    for i in lst:
        if i is not None:
            new_lst.append(i)
    return new_lst

lst = [1, 2, 3, None, None, 4, 5, 6, 7, 8, 9, 10]
print(remove_tuples(lst))

# Solution"
1815,Convert nested JSON to CSV in Python,"import json


def read_json(filename: str) -> dict:

try:
with open(filename, ""r"") as f:
data = json.loads(f.read())
except:
raise Exception(f""Reading {filename} file encountered an error"")

return data


def normalize_json(data: dict) -> dict:

new_data = dict()
for key, value in data.items():
if not isinstance(value, dict):
new_data[key] = value
else:
for k, v in value.items():
new_data[key + ""_"" + k] = v

return new_data


def generate_csv_data(data: dict) -> str:

# Defining CSV columns in a list to maintain
# the order
csv_columns = data.keys()

# Generate the first row of CSV
csv_data = "","".join(csv_columns) + ""\n""

# Generate the single record present
new_row = list()
for col in csv_columns:
new_row.append(str(data[col]))

# Concatenate the record with the column information
# in CSV format
csv_data += "","".join(new_row) + ""\n""

return csv_data


def write_to_file(data: str, filepath: str) -> bool:

try:
with open(filepath, ""w+"") as f:
f.write(data)
except:
raise Exception(f""Saving data to {filepath} encountered an error"")


def main():
# Read the JSON file as python dictionary
data = read_json(filename=""article.json"")

# Normalize the nested python dict
new_data = normalize_json(data=data)

# Pretty print the new dict object
print(""New dict:"", new_data)

# Generate the desired CSV data
csv_data = generate_csv_data(data=new_data)

# Save the generated CSV data to a CSV file
write_to_file(data=csv_data, filepath=""data.csv"")


if __name__ == '__main__':
main()","import json
import csv

def main():
    # Open the JSON file
    with open('/Users/soumya/Desktop/Python/JSON_to_CSV.json') as file:
        data = json.load(file)
    # Iterate through the data and print each key and value
    for key, value in data.items():
        print(key, value)

if __name__ == '__main__':
    main()

# Output:
# 1
# 2
# 3"
1816,numpy.squeeze() in Python,"# Python program explaining
# numpy.squeeze function

import numpy as geek

in_arr = geek.array([[[2, 2, 2], [2, 2, 2]]])

print (""Input array : "", in_arr)
print(""Shape of input array : "", in_arr.shape)

out_arr = geek.squeeze(in_arr)

print (""output squeezed array : "", out_arr)
print(""Shape of output array : "", out_arr.shape)","import numpy as np

x = np.array([[1, 2, 3], [4, 5, 6]])
print(x.squeeze())

""""""

# Solution

# x = np.array([[1, 2, 3], [4, 5, 6]])
# print(x.squeeze())

# Solution

# x = np.array([[1, 2, 3], [4, 5, 6]])
# print(x.squeeze())

#"
1817,Write a Python program to Program to accept the strings which contains all vowels,"# Python program to accept the strings
# which contains all the vowels


# Function for check if string
# is accepted or not
def check(string) :


string = string.lower()


# set() function convert ""aeiou""
# string into set of characters
# i.e.vowels = {'a', 'e', 'i', 'o', 'u'}
vowels = set(""aeiou"")


# set() function convert empty
# dictionary into empty set
s = set({})


# looping through each
# character of the string
for char in string :


# Check for the character is present inside
# the vowels set or not. If present, then
# add into the set s by using add method
if char in vowels :
s.add(char)
else:
pass

# check the length of set s equal to length
# of vowels set or not. If equal, string is
# accepted otherwise not
if len(s) == len(vowels) :
print(""Accepted"")
else :
print(""Not Accepted"")




# Driver code
if __name__ == ""__main__"" :

string = ""SEEquoiaL""


# calling function
check(string)","def solution(s):
    vowels = ['a', 'e', 'i', 'o', 'u']
    for i in s:
        if i in vowels:
            print(i, end="""")

solution(""aAaEeIiOoUu"")

""""""

def solution(s):
    vowels = ['a', 'e', 'i', 'o', 'u']
    for i in s:
        if i in vowels:"
1818,Write a Python program to Extract Unique values dictionary values,"# Python3 code to demonstrate working of
# Extract Unique values dictionary values
# Using set comprehension + values() + sorted()

# initializing dictionary
test_dict = {'gfg' : [5, 6, 7, 8],
'is' : [10, 11, 7, 5],
'best' : [6, 12, 10, 8],
'for' : [1, 2, 5]}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# Extract Unique values dictionary values
# Using set comprehension + values() + sorted()
res = list(sorted({ele for val in test_dict.values() for ele in val}))

# printing result
print(""The unique values list is : "" + str(res))","import collections

def unique_values(d):
    return collections.Counter(d)

print(unique_values({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}))

"""""""
1819,Write a Python program to find Tuples with positive elements in List of tuples,"# Python3 code to demonstrate working of
# Positive Tuples in List
# Using list comprehension + all()

# initializing list
test_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)]

# printing original list
print(""The original list is : "" + str(test_list))

# all() to check each element
res = [sub for sub in test_list if all(ele >= 0 for ele in sub)]

# printing result
print(""Positive elements Tuples : "" + str(res))","def find_tuples(lst):
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            if lst[i][0] > lst[j][0]:
                lst[i], lst[j] = lst[j], lst[i]
    return lst

lst = [(1, 2), (3, 4), (5, 6), (7, 8), (9"
1820,Replace NumPy array elements that doesnt satisfy the given condition in Python,"# Importing Numpy module
import numpy as np

# Creating a 1-D Numpy array
n_arr = np.array([75.42436315, 42.48558583, 60.32924763])
print(""Given array:"")
print(n_arr)

print(""\nReplace all elements of array which are greater than 50. to 15.50"")
n_arr[n_arr > 50.] = 15.50

print(""New array :\n"")
print(n_arr)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])

b = np.array([[7, 8, 9], [10, 11, 12]])

c = np.array([[13, 14, 15], [16, 17, 18]])

d = np.array([[19, 20, 21], [22, 23, 24]])

e = np.array([[25, 26, 27], [28"
1821,Write a Python Program to Replace Specific Line in File,"with open('example.txt', 'r', encoding='utf-8') as file:
data = file.readlines()

print(data)
data[1] = ""Here is my modified Line 2\n""

with open('example.txt', 'w', encoding='utf-8') as file:
file.writelines(data)","#!/usr/bin/env python

import os
import sys
import re
import time
import datetime
import subprocess
import json
import requests
import urllib.request
import urllib.parse
import urllib.error
import urllib.request
import urllib.parse
import urllib.error
import urllib.request
import urllib.error
import urllib.parse
import urllib.error
import urllib.request
import urllib."
1822,Write a Python program to Least Frequent Character in String,"# Python 3 code to demonstrate
# Least Frequent Character in String
# naive method

# initializing string
test_str = ""GeeksforGeeks""

# printing original string
print (""The original string is : "" + test_str)

# using naive method to get
# Least Frequent Character in String
all_freq = {}
for i in test_str:
if i in all_freq:
all_freq[i] += 1
else:
all_freq[i] = 1
res = min(all_freq, key = all_freq.get)

# printing result
print (""The minimum of all characters in GeeksforGeeks is : "" + str(res))","def solution(s):
    freq = {}
    for i in s:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    
    freq = sorted(freq.items(), key=lambda x: x[1])
    return freq[0][0]

print(solution(""abcabcbb""))
print(solution(""bbbbb""))
print(solution(""pwwkew""))
print("
1823,Write a Python program to print positive numbers in a list,"# Python program to print positive Numbers in a List

# list of numbers
list1 = [11, -21, 0, 45, 66, -93]

# iterating each number in list
for num in list1:

# checking condition
if num >= 0:
print(num, end = "" "")","def positive_numbers(lst):
    for i in lst:
        if i > 0:
            print(i)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
positive_numbers(lst)

""""""

def positive_numbers(lst):
    for i in lst:
        if i > 0:
            print(i)

lst = [1, 2, 3, 4, 5, 6"
1824,How to convert CSV File to PDF File using Python,"import pandas as pd
import pdfkit

# SAVE CSV TO HTML USING PANDAS
csv = 'MyCSV.csv'
html_file = csv_file[:-3]+'html'

df = pd.read_csv(csv_file, sep=',')
df.to_html(html_file)

# INSTALL wkhtmltopdf AND SET PATH IN CONFIGURATION
# These two Steps could be eliminated By Installing wkhtmltopdf -
# - and setting it's path to Environment Variables
path_wkhtmltopdf = r'D:\Softwares\wkhtmltopdf\bin\wkhtmltopdf.exe'
config = pdfkit.configuration(wkhtmltopdf=path_wkhtmltopdf)

# CONVERT HTML FILE TO PDF WITH PDFKIT
pdfkit.from_url(""MyCSV.html"", ""FinalOutput.pdf"", configuration=config)","import csv
import os

def csv_to_pdf(csv_file):
    with open(csv_file, 'r') as csvfile:
        csv_reader = csv.reader(csvfile, delimiter=',')
        next(csv_reader)
        for row in csv_reader:
            pdf_file = row[0] + '.pdf'
            pdf_file = pdf_file.replace(' ', '_')
            pdf_file = pdf_file.replace('.csv"
1825,Write a Python program to How to search for a string in text files,"string1 = 'coding'

# opening a text file
file1 = open(""geeks.txt"", ""r"")

# setting flag and index to 0
flag = 0
index = 0

# Loop through the file line by line
for line in file1:
index + = 1

# checking string is present in line or not
if string1 in line:

flag = 1
break

# checking condition for string found or not
if flag == 0:
print('String', string1 , 'Not Found')
else:
print('String', string1, 'Found In Line', index)

# closing text file
file1.close()","import re

def search(text, pattern):
    """"""
    Search for a string in text files.
    """"""
    for line in text:
        if re.search(pattern, line):
            print(line)

search(open('textfiles/textfile1.txt'), 'python')
search(open('textfiles/textfile2.txt'), 'python')
search(open('textfiles/textfile3.txt'), 'python')
search(open('textfiles/textfile4"
1826,Write a Python program to swap two elements in a list,"# Python3 program to swap elements
# at given positions


# Swap function
def swapPositions(list, pos1, pos2):

list[pos1], list[pos2] = list[pos2], list[pos1]
return list


# Driver function
List = [23, 65, 19, 90]
pos1, pos2 = 1, 3


print(swapPositions(List, pos1-1, pos2-1))","def swap(a,b):
    a,b = b,a
    return a,b

a = [1,2,3,4,5]
b = [6,7,8,9,10]

print(swap(a,b))

""""""

def swap(a,b):
    a,b = b,a
    return a,b

a = [1,2,3,4,5]
b = [6,7,8,9,10"
1827,Write a Python Program for ShellSort,"# Python program for implementation of Shell Sort

def shellSort(arr):

# Start with a big gap, then reduce the gap
n = len(arr)
gap = n/2

# Do a gapped insertion sort for this gap size.
# The first gap elements a[0..gap-1] are already in gapped
# order keep adding one more element until the entire array
# is gap sorted
while gap > 0:

for i in range(gap,n):

# add a[i] to the elements that have been gap sorted
# save a[i] in temp and make a hole at position i
temp = arr[i]

# shift earlier gap-sorted elements up until the correct
# location for a[i] is found
j = i
while j >= gap and arr[j-gap] >temp:
arr[j] = arr[j-gap]
j -= gap

# put temp (the original a[i]) in its correct location
arr[j] = temp
gap /= 2


# Driver code to test above
arr = [ 12, 34, 54, 2, 3]

n = len(arr)
print (""Array before sorting:"")
for i in range(n):
print(arr[i]),

shellSort(arr)

print (""\nArray after sorting:"")
for i in range(n):
print(arr[i]),

# This code is contributed by Mohit Kumra","def shellSort(arr):
    n = len(arr)
    gap = n // 2
    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]
            j = i
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp
        gap //= 2
    return arr

arr = [12, 11, 13, 5, 6, 7]"
1828,Write a Python program to Convert tuple to float value,"# Python3 code to demonstrate working of
# Convert tuple to float
# using join() + float() + str() + generator expression

# initialize tuple
test_tup = (4, 56)

# printing original tuple
print(""The original tuple : "" + str(test_tup))

# Convert tuple to float
# using join() + float() + str() + generator expression
res = float('.'.join(str(ele) for ele in test_tup))

# printing result
print(""The float after conversion from tuple is : "" + str(res))","def convert_tuple(tup):
    return float(tup[0])

print(convert_tuple((1, 2, 3)))

""""""

def convert_tuple(tup):
    return float(tup[0])

print(convert_tuple((1, 2, 3)))

""""""

def convert_tuple(tup):
    return float(tup[0])

print(convert_tuple((1, 2, 3)))

"""""""
1829,Write a Python program to Remove empty tuples from a list,"# Python program to remove empty tuples from a
# list of tuples function to remove empty tuples
# using list comprehension
def Remove(tuples):
tuples = [t for t in tuples if t]
return tuples

# Driver Code
tuples = [(), ('ram','15','8'), (), ('laxman', 'sita'),
('krishna', 'akbar', '45'), ('',''),()]
print(Remove(tuples))","def remove_empty_tuples(lst):
    for i in range(len(lst)):
        if lst[i] == ():
            lst.pop(i)
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(remove_empty_tuples(lst))

""""""

def remove_empty_tuples(lst):
    for i in range(len(lst)"
1830,Write a Python program to Assign Frequency to Tuples,"# Python3 code to demonstrate working of
# Assign Frequency to Tuples
# Using Counter() + items() + * operator + list comprehension
from collections import Counter

# initializing list
test_list = [(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)]

# printing original list
print(""The original list is : "" + str(test_list))

# one-liner to solve problem
# assign Frequency as last element of tuple
res = [(*key, val) for key, val in Counter(test_list).items()]

# printing results
print(""Frequency Tuple list : "" + str(res))","def frequency(t):
    return t[1]

t = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

print(frequency(t))

""""""

# Solution:

def frequency(t):
    return t[1]

t = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

print(frequency(t))

""""""

# Solution:

def frequency(t):"
1831,Maximum of two numbers in Python,"# Python program to find the
# maximum of two numbers




def maximum(a, b):

if a >= b:
return a
else:
return b

# Driver code
a = 2
b = 4
print(maximum(a, b))","def max_of_two_numbers(a, b):
    if a > b:
        return a
    else:
        return b

print(max_of_two_numbers(2, 3))
print(max_of_two_numbers(3, 4))
print(max_of_two_numbers(4, 5))

""""""

def max_of_two_numbers(a, b):
    if a > b:
        return a
    else:
        return b"
1832,Simple Diamond Pattern in Python,"# define the size (no. of columns)
# must be odd to draw proper diamond shape
size = 8


# initialize the spaces
spaces = size


# loops for iterations to create worksheet
for i in range(size//2+2):
for j in range(size):

# condition to left space
# condition to right space
# condition for making diamond
# else print *
if j < i-1:
print(' ', end="" "")
elif j > spaces:
print(' ', end="" "")
elif (i == 0 and j == 0) | (i == 0 and j == size-1):
print(' ', end="" "")
else:
print('*', end="" "")

# increase space area by decreasing spaces
spaces -= 1

# for line change
print()","def solve(n):
    if n == 1:
        return 1
    else:
        return n * solve(n-1)

print(solve(5))

""""""

# Solution

def solve(n):
    if n == 1:
        return 1
    else:
        return n * solve(n-1)

print(solve(5))"
1833,Write a Python program to Maximum frequency character in String,"# Python 3 code to demonstrate
# Maximum frequency character in String
# naive method

# initializing string
test_str = ""GeeksforGeeks""

# printing original string
print (""The original string is : "" + test_str)

# using naive method to get
# Maximum frequency character in String
all_freq = {}
for i in test_str:
if i in all_freq:
all_freq[i] += 1
else:
all_freq[i] = 1
res = max(all_freq, key = all_freq.get)

# printing result
print (""The maximum of all characters in GeeksforGeeks is : "" + str(res))","def max_freq_char(string):
    freq = {}
    for char in string:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    max_freq = max(freq.values())
    return max_freq

print(max_freq_char('abcdefghijklmnopqrstuvwxyz'))

""""""

def max_freq_char(string):"
1834,Write a Python program to check if the list contains three consecutive common numbers in Python,"# creating the array
arr = [4, 5, 5, 5, 3, 8]

# size of the list
size = len(arr)

# looping till length - 2
for i in range(size - 2):

# checking the conditions
if arr[i] == arr[i + 1] and arr[i + 1] == arr[i + 2]:

# printing the element as the
# conditions are satisfied
print(arr[i])","def check_consecutive(lst):
    for i in range(len(lst)):
        if lst[i] == lst[i+1] and lst[i] == lst[i+2]:
            return True
    return False

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(check_consecutive(lst))

""""""

# Solution 1

def check_"
1835,Visualize data from CSV file in Python,"import matplotlib.pyplot as plt
import csv

x = []
y = []

with open('biostats.csv','r') as csvfile:
plots = csv.reader(csvfile, delimiter = ',')

for row in plots:
x.append(row[0])
y.append(int(row[2]))

plt.bar(x, y, color = 'g', width = 0.72, label = ""Age"")
plt.xlabel('Names')
plt.ylabel('Ages')
plt.title('Ages of different persons')
plt.legend()
plt.show()","import csv

with open('data.csv', newline='') as f:
    reader = csv.reader(f)
    file_data = list(reader)

# To Do: Complete the solution so that it returns a list of lists.
# Hint: Use the list function to create a list of lists.
# Hint: Create a new list called new_list that has the first row (headers) of the file_data list.
# Hint: Add a print statement at the end of the solution to print"
1836,Write a Python Dictionary to find mirror characters in a string,"# function to mirror characters of a string


def mirrorChars(input,k):


# create dictionary
original = 'abcdefghijklmnopqrstuvwxyz'
reverse = 'zyxwvutsrqponmlkjihgfedcba'
dictChars = dict(zip(original,reverse))


# separate out string after length k to change
# characters in mirror
prefix = input[0:k-1]
suffix = input[k-1:]
mirror = ''


# change into mirror
for i in range(0,len(suffix)):
mirror = mirror + dictChars[suffix[i]]


# concat prefix and mirrored part
print (prefix+mirror)

# Driver program
if __name__ == ""__main__"":
input = 'paradox'
k = 3
mirrorChars(input,k)","def mirror_characters(string):
    mirror_dict = {}
    for char in string:
        if char in mirror_dict:
            mirror_dict[char] += 1
        else:
            mirror_dict[char] = 1
    return mirror_dict

print(mirror_characters(""abcdefghijklmnopqrstuvwxyz""))

""""""

def mirror_characters(string):
    mirror_dict = {}
    for char in string:"
1837,Write a Python program to find middle of a linked list using one traversal,"# Python 3 program to find the middle of a
# given linked list

# Node class
class Node:

# Function to initialise the node object
def __init__(self, data):
self.data = data
self.next = None

class LinkedList:

def __init__(self):
self.head = None

def push(self, new_data):
new_node = Node(new_data)
new_node.next = self.head
self.head = new_node

# Function to get the middle of
# the linked list
def printMiddle(self):
slow_ptr = self.head
fast_ptr = self.head

if self.head is not None:
while (fast_ptr is not None and fast_ptr.next is not None):
fast_ptr = fast_ptr.next.next
slow_ptr = slow_ptr.next
print(""The middle element is: "", slow_ptr.data)

# Driver code
list1 = LinkedList()
list1.push(5)
list1.push(4)
list1.push(2)
list1.push(3)
list1.push(1)
list1.printMiddle()","def middle(head):
    slow = head
    fast = head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
    return slow

head = [1, 2, 3, 4, 5]

print(middle(head))

# Output:
# 5
# 2
# 3
# 4
# 5

# Explanation:
# The middle element is 2.
# The middle element is the middle element.
#"
1838,How to check if a string starts with a substring using regex in Python,"# import library
import re

# define a function
def find(string, sample) :

# check substring present
# in a string or not
if (sample in string):

y = ""^"" + sample

# check if string starts
# with the substring
x = re.search(y, string)

if x :
print(""string starts with the given substring"")

else :
print(""string doesn't start with the given substring"")

else :
print(""entered string isn't a substring"")


# Driver code
string = ""geeks for geeks makes learning fun""
sample = ""geeks""

# function call
find(string, sample)

sample = ""makes""

# function call
find(string, sample)","import re

def is_start_with_substring(str, sub):
    return re.search(sub, str)

print(is_start_with_substring(""Python is a programming language"", ""P""))
print(is_start_with_substring(""Python is a programming language"", ""P""))
print(is_start_with_substring(""Python is a programming language"", ""P""))
print(is_start_with_substring(""Python is a programming language"", ""P"
1839,Write a Python program to Replace index elements with elements in Other List,"# Python3 code to demonstrate
# Replace index elements with elements in Other List
# using list comprehension

# Initializing lists
test_list1 = ['Gfg', 'is', 'best']
test_list2 = [0, 1, 2, 1, 0, 0, 0, 2, 1, 1, 2, 0]

# printing original lists
print(""The original list 1 is : "" + str(test_list1))
print(""The original list 2 is : "" + str(test_list2))

# Replace index elements with elements in Other List
# using list comprehension
res = [test_list1[idx] for idx in test_list2]

# printing result
print (""The lists after index elements replacements is : "" + str(res))","import sys

def replace_index(list, index, value):
    list[index] = value

def main():
    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    replace_index(list, 2, 10)
    print(list)

if __name__ == ""__main__"":
    main()"
1840,Dumping queue into list or array in Python,"# Python program to
# demonstrate queue implementation
# using collections.dequeue

from collections import deque

# Initializing a queue
q = deque()

# Adding elements to a queue
q.append('a')
q.append('b')
q.append('c')

# display the queue
print(""Initial queue"")
print(q,""\n"")

# display the type
print(type(q))","def solution(q):
    answer = []
    for i in range(len(q)):
        answer.append(q[i][0])
    return answer

""""""

def solution(q):
    answer = []
    for i in range(len(q)):
        answer.append(q[i][0])
    return answer

def solution(q):
    answer = []
    for i in range(len(q)):
        answer.append(q[i][0])"
1841,Write a Python program to Exceptional Split in String,"# Python3 code to demonstrate working of
# Exceptional Split in String
# Using loop + split()

# initializing string
test_str = ""gfg, is, (best, for), geeks""

# printing original string
print(""The original string is : "" + test_str)

# Exceptional Split in String
# Using loop + split()
temp = ''
res = []
check = 0
for ele in test_str:
if ele == '(':
check += 1
elif ele == ')':
check -= 1
if ele == ', ' and check == 0:
if temp.strip():
res.append(temp)
temp = ''
else:
temp += ele
if temp.strip():
res.append(temp)

# printing result
print(""The string after exceptional split : "" + str(res))","def except_split(s):
    try:
        return s.split()
    except ValueError:
        return s

print(except_split(""abcdefghi""))

""""""

def except_split(s):
    try:
        return s.split()
    except ValueError:
        return s

print(except_split(""abcdefghi""))

""""""

def except_split(s):
    try:
        return s.split()
    except ValueError:"
1842,Write a Python Lambda Functions,"# Python program to demonstrate
# lambda functions




string ='GeeksforGeeks'


# lambda returns a function object
print(lambda string : string)","def solution(n):
    return n*n

Write a Python function that takes an integer n and returns the number of primes below n.

For example, if n = 2, it should return 2, since 2 is the only number for which the function returns true.

def solution(n):
    return sum(filter(lambda x: x%2==0, range(1, n+1)))

""""""

def solution(n):
    return sum(filter(lambda x: x%2==0, range(1, n"
1843,Getting Unique values from a column in Pandas dataframe in Python,"# import pandas as pd
import pandas as pd

gapminder_csv_url ='http://bit.ly/2cLzoxH'
# load the data with pd.read_csv
record = pd.read_csv(gapminder_csv_url)

record.head()","import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randn(5, 3), columns=['a', 'b', 'c'])
print(df)

# Solution:

# df = pd.DataFrame(np.random.randn(5, 3), columns=['a', 'b', 'c'])
# print(df)
#
# # Solution:
#
# df = pd.DataFrame(np"
1844,Write a Python program to Find all duplicate characters in string,"from collections import Counter

def find_dup_char(input):

# now create dictionary using counter method
# which will have strings as key and their
# frequencies as value
WC = Counter(input)
j = -1


# Finding no. of occurrence of a character
# and get the index of it.
for i in WC.values():
j = j + 1
if( i > 1 ):
print WC.keys()[j],

# Driver program
if __name__ == ""__main__"":
input = 'geeksforgeeks'
find_dup_char(input)","def find_duplicate(string):
    duplicate = []
    for i in string:
        if i in duplicate:
            duplicate.remove(i)
        else:
            duplicate.append(i)
    return duplicate

print(find_duplicate(""abcdefg""))

""""""

def find_duplicate(string):
    duplicate = []
    for i in string:
        if i in duplicate:
            duplicate.remove(i)"
1845,How to get the n-largest values of an array using NumPy in Python,"# import library
import numpy as np

# create numpy 1d-array
arr = np.array([2, 0, 1, 5,
4, 1, 9])

print(""Given array:"", arr)

# sort an array in
# ascending order

# np.argsort() return
# array of indices for
# sorted array
sorted_index_array = np.argsort(arr)

# sorted array
sorted_array = arr[sorted_index_array]

print(""Sorted array:"", sorted_array)

# we want 1 largest value
n = 1

# we are using negative
# indexing concept

# take n largest value
rslt = sorted_array[-n : ]

# show the output
print(""{} largest value:"".format(n),
rslt[0])","import numpy as np

# Create an array of size 10.
a = np.random.randint(0, 100, size=10)

# Create an array of size 5.
b = np.random.randint(0, 100, size=5)

# Create an array of size 10.
c = np.random.randint(0, 100, size=10)

# Create an array of size 5.
d = np.random.randint(0, 100"
1846,Scrape IMDB movie rating and details using Python,"from bs4 import BeautifulSoup
import requests
import re","import requests
from bs4 import BeautifulSoup

url = ""https://www.imdb.com/title/tt0149096/reviews""

r = requests.get(url)
soup = BeautifulSoup(r.text, 'html.parser')

# print(soup.prettify())

# print(soup.find('div', class_='lister-list'))

# print(soup.find('div', class_='lister-list'))"
1847,Write a Python program to Merging two Dictionaries,"# Python code to merge dict using update() method
def Merge(dict1, dict2):
return(dict2.update(dict1))

# Driver code
dict1 = {'a': 10, 'b': 8}
dict2 = {'d': 6, 'c': 4}


# This return None
print(Merge(dict1, dict2))


# changes made in dict2
print(dict2)","def merge_dict(dict1, dict2):
    dict1.update(dict2)
    return dict1

# Take two dictionaries as input and print the result
dict1 = {'a': 1, 'b': 2, 'c': 3}
dict2 = {'d': 4, 'e': 5, 'f': 6}
print(merge_dict(dict1, dict2))

# Take two dictionaries as input and print the result
dict1 = {'a': 1, '"
1848,Write a Python Selenium  Find element by text,"<!DOCTYPE html>
<html>
<body>
<button type= button >Geeks For Geeks</button>
</body>
<html>","import selenium
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import"
1849,Write a Python program to Key with maximum unique values,"# Python3 code to demonstrate working of
# Key with maximum unique values
# Using loop

# initializing dictionary
test_dict = {""Gfg"" : [5, 7, 5, 4, 5],
""is"" : [6, 7, 4, 3, 3],
""Best"" : [9, 9, 6, 5, 5]}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

max_val = 0
max_key = None
for sub in test_dict:

# test for length using len()
# converted to set for duplicates removal
if len(set(test_dict[sub])) > max_val:
max_val = len(set(test_dict[sub]))
max_key = sub

# printing result
print(""Key with maximum unique values : "" + str(max_key))","def max_unique(arr):
    max_val = 0
    for i in range(len(arr)):
        if arr[i] > max_val:
            max_val = arr[i]
    return max_val

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_unique(arr))

""""""

def max_unique(arr):
    max_val = 0
    for i in range(len(arr)"
1850,Convert covariance matrix to correlation matrix using Python,"import numpy as np
import pandas as pd


# loading in the iris dataset for demo purposes


dataset = pd.read_csv(""iris.csv"")


dataset.head()","import numpy as np
import matplotlib.pyplot as plt

# Load data
data = np.loadtxt('covariance.txt', delimiter=',')

# Create a correlation matrix
corr = np.corrcoef(data[0], data[1])

# Plot the correlation matrix
plt.imshow(corr, cmap='gray')
plt.colorbar()
plt.show()

# Create a correlation matrix
corr = np.corrco"
1851,How to Remove rows in Numpy array that contains non-numeric values in Python,"# Importing Numpy module
import numpy as np

# Creating 2X3 2-D Numpy array
n_arr = np.array([[10.5, 22.5, 3.8],
[41, np.nan, np.nan]])

print(""Given array:"")
print(n_arr)

print(""\nRemove all rows containing non-numeric elements"")
print(n_arr[~np.isnan(n_arr).any(axis=1)])","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

a.shape = (3, 4)

a.dtype = 'int64'

a.sum()

a.sum(axis=0)

a.sum(axis=1)

a.sum(axis=1, dtype='int64')"
1852,How to create filename containing date or time in Python,"# import module
from datetime import datetime

# get current date and time
current_datetime = datetime.now()
print(""Current date & time : "", current_datetime)

# convert datetime obj to string
str_current_datetime = str(current_datetime)

# create a file object along with extension
file_name = str_current_datetime+"".txt""
file = open(file_name, 'w')

print(""File created : "", file.name)
file.close()","import datetime

def solution(files):
    answer = []
    for file in files:
        with open(file, 'r') as f:
            date = f.readline().split()
            time = f.readline().split()
            date = datetime.datetime.strptime(date[0], '%Y-%m-%d %H:%M:%S')
            time = datetime.datetime.strptime(time[0], '%H:%M:"
1853,Write a Python program to Intersection of two lists,"# Python program to illustrate the intersection
# of two lists in most simple way
def intersection(lst1, lst2):
lst3 = [value for value in lst1 if value in lst2]
return lst3


# Driver Code
lst1 = [4, 9, 1, 17, 11, 26, 28, 54, 69]
lst2 = [9, 9, 74, 21, 45, 11, 63, 28, 26]
print(intersection(lst1, lst2))","def intersection(l1, l2):
    l1.sort()
    l2.sort()
    i = 0
    j = 0
    while i < len(l1) and j < len(l2):
        if l1[i] < l2[j]:
            i += 1
        elif l1[i] > l2[j]:
            j += 1
        else:
            return l1[i], l2[j]
    return l1[i], l2["
1854,Write a Python program to Convert Matrix to Custom Tuple Matrix,"# Python3 code to demonstrate working of
# Convert Matrix to Custom Tuple Matrix
# Using zip() + loop

# initializing lists
test_list = [[4, 5, 6], [6, 7, 3], [1, 3, 4]]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing List elements
add_list = ['Gfg', 'is', 'best']

# Convert Matrix to Custom Tuple Matrix
# Using zip() + loop
res = []
for idx, ele in zip(add_list, test_list):
for e in ele:
res.append((idx, e))

# printing result
print(""Matrix after conversion : "" + str(res))","def matrix_to_tuple(matrix):
    """"""Convert Matrix to tuple""""""
    rows = len(matrix)
    if rows == 0:
        raise ValueError(""matrix must have at least one row"")
    cols = len(matrix[0])
    if cols == 0:
        raise ValueError(""matrix must have at least one column"")
    result = []
    for row in range(rows):
        result.append([])
        for col in range(cols"
1855,How to convert a Python datetime.datetime to excel serial date number,"# Python3 code to illustrate the conversion of
# datetime.datetime to excel serial date number


# Importing datetime module
import datetime


# Calling the now() function to return
# current date and time
current_datetime = datetime.datetime.now()


# Calling the strftime() function to convert
# the above current datetime into excel serial date number
print(current_datetime.strftime('%x %X'))","import datetime

def convert_datetime(dt):
    return dt.strftime('%Y-%m-%d %H:%M:%S')

dt = datetime.datetime(2021, 1, 1, 12, 30, 0)
print(convert_datetime(dt))

""""""

# Solution 1

import datetime

def convert_datetime(dt):
    return dt.strftime('%Y-%m-%d"
1856,How to round elements of the NumPy array to the nearest integer in Python,"import numpy as n

# create array
y = n.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7])
print(""Original array:"", end="" "")
print(y)

# rount to nearest integer
y = n.rint(y)
print(""After rounding off:"", end="" "")
print(y)","import numpy as np

a = np.array([1, 2, 3, 4, 5])

rounded = np.around(a)

rounded[rounded == 5] = 5

rounded[rounded == 4] = 3

rounded[rounded == 3] = 2

rounded[rounded == 2] = 1

rounded[rounded == 1] = 0

print(rounded)

""""""

# Solution

import numpy as np

a = np.array([1,"
1857,numpy string operations | find() function in Python,"# Python program explaining
# numpy.char.find() method

# importing numpy as geek
import numpy as geek

# input arrays
in_arr = geek.array(['aAaAaA', 'baA', 'abBABba'])
print (""Input array : "", in_arr)

# output arrays
out_arr = geek.char.find(in_arr, sub ='A')
print (""Output array: "", out_arr)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)
print(a.ndim)
print(a.shape)
print(a.size)
print(a.dtype)
print(a.itemsize)
print(a.nbytes)

# a = np.array([[1, 2, 3], [4, 5, 6]])
# print(a)
# print(a.ndim)"
1858,numpy string operations | join() function in Python,"# Python program explaining
# numpy.core.defchararray.join() method

# importing numpy
import numpy as geek

# input array
in_arr = geek.array(['Python', 'Numpy', 'Pandas'])
print (""Input original array : "", in_arr)

# creating the separator
sep = geek.array(['-', '+', '*'])


out_arr = geek.core.defchararray.join(sep, in_arr)
print (""Output joined array: "", out_arr)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(np.concatenate((a, b), axis=1))

# Output:
# [[1 2 3 4 5 6 7 8 9 10 11 12]
#  [4 5 6 7 8 9 10 11 12]]

# Output:
# [[1 2 3 4 5 6"
1859,numpy.negative() in Python,"# Python program explaining
# numpy.negative() function

import numpy as geek
in_num = 10

print (""Input number : "", in_num)

out_num = geek.negative(in_num)
print (""negative of input number : "", out_num)","import numpy as np

x = np.array([[1, 2, 3], [4, 5, 6]])
y = np.array([[-1, 2, -3], [4, 5, 6]])

print(np.negative(x))
print(np.negative(y))

# Output:
[[-1 -1 -1]
 [-1 -1 -1]
 [-1 -1 -1]]

# Output:
[[-1 -1]
 [-1 -1]
 [-"
1860,Flatten a Matrix in Python using NumPy,"# importing numpy as np
import numpy as np

# declare matrix with np
gfg = np.array([[2, 3], [4, 5]])

# using array.flatten() method
flat_gfg = gfg.flatten()
print(flat_gfg)","import numpy as np

# Create a 2x2 matrix
A = np.array([[1, 2], [3, 4]])

# Flatten the matrix
print(A.flatten())

# Create a 3x3 matrix
B = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Flatten the matrix
print(B.flatten())

# Create a 4x4 matrix
C = np.array([[1,"
1861,Write a Python Program for Binary Search (Recursive and Iterative),"# Python 3 program for recursive binary search.
# Modifications needed for the older Python 2 are found in comments.


# Returns index of x in arr if present, else -1
def binary_search(arr, low, high, x):


# Check base case
if high >= low:


mid = (high + low) // 2


# If element is present at the middle itself
if arr[mid] == x:
return mid


# If element is smaller than mid, then it can only
# be present in left subarray
elif arr[mid] > x:
return binary_search(arr, low, mid - 1, x)


# Else the element can only be present in right subarray
else:
return binary_search(arr, mid + 1, high, x)


else:
# Element is not present in the array
return -1


# Test array
arr = [ 2, 3, 4, 10, 40 ]
x = 10


# Function call
result = binary_search(arr, 0, len(arr)-1, x)


if result != -1:
print(""Element is present at index"", str(result))
else:
print(""Element is not present in array"")","def binary_search(arr, target):
    if len(arr) == 0:
        return -1
    else:
        mid = len(arr) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] > target:
            return binary_search(arr[:mid], target)
        else:
            return binary_search(arr[mid + 1:], target)

arr = [1, 2, 3, 4, 5, 6,"
1862,Scraping Reddit with Python and BeautifulSoup,"# import module
import requests
from bs4 import BeautifulSoup","import requests
from bs4 import BeautifulSoup

url = ""https://www.reddit.com/r/Python/comments/2qjvx/python_solution_to_scrape_the_reddit_comments_in_python/""

r = requests.get(url)

soup = BeautifulSoup(r.text, 'html.parser')

comments = soup.find_all('div', class_='comments-list-item')

for comment in comments:
    print(comment"
1863,Write a Python program to get all unique combinations of two Lists,"# python program to demonstrate
# unique combination of two lists
# using zip() and permutation of itertools


# import itertools package
import itertools
from itertools import permutations


# initialize lists
list_1 = [""a"", ""b"", ""c"",""d""]
list_2 = [1,4,9]


# create empty list to store the
# combinations
unique_combinations = []


# Getting all permutations of list_1
# with length of list_2
permut = itertools.permutations(list_1, len(list_2))


# zip() is called to pair each permutation
# and shorter list element into combination
for comb in permut:
zipped = zip(comb, list_2)
unique_combinations.append(list(zipped))


# printing unique_combination list
print(unique_combinations)","def get_unique_combination(l1, l2):
    l1.sort()
    l2.sort()
    result = []
    for i in range(len(l1)):
        for j in range(len(l2)):
            if l1[i] == l2[j]:
                result.append([l1[i], l2[j]])
    return result

l1 = [1, 2, 3, 4, 5]
l2 = [1"
1864,Create a list from rows in Pandas dataframe in Python,"# importing pandas as pd
import pandas as pd

# Create the dataframe
df = pd.DataFrame({'Date':['10/2/2011', '11/2/2011', '12/2/2011', '13/2/11'],
'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],
'Cost':[10000, 5000, 15000, 2000]})

# Print the dataframe
print(df)","import pandas as pd

df = pd.read_csv(""C:/Users/DELL/Downloads/data/data.csv"")

# Create a list from rows in Pandas dataframe in Python

# Create a list from rows in Pandas dataframe in Python

# Create a list from rows in Pandas dataframe in Python

# Create a list from rows in Pandas dataframe in Python

# Create a list from rows in Pandas dataframe in Python

# Create a list from rows"
1865,Write a Python program to Word location in String,"# Python3 code to demonstrate working of
# Word location in String
# Using findall() + index()
import re

# initializing string
test_str = 'geeksforgeeks is best for geeks'

# printing original string
print(""The original string is : "" + test_str)

# initializing word
wrd = 'best'

# Word location in String
# Using findall() + index()
test_str = test_str.split()
res = -1
for idx in test_str:
if len(re.findall(wrd, idx)) > 0:
res = test_str.index(idx) + 1

# printing result
print(""The location of word is : "" + str(res))","def solution(word):
    word = word.lower()
    word = word.replace(' ', '')
    word = word.replace('.', '')
    word = word.replace(',', '')
    word = word.replace('!', '')
    word = word.replace('?', '')
    word = word.replace('-', '')
    word = word.replace('.', '')
    word = word.replace(':', '')
    word = word.replace(';', ''"
1866,How to count number of instances of a class in Python,"# code
class geeks:

# this is used to print the number
# of instances of a class
counter = 0

# constructor of geeks class
def __init__(self):

# increment
geeks.counter += 1


# object or instance of geeks class
g1 = geeks()
g2 = geeks()
g3 = geeks()
print(geeks.counter)","class Solution:
    def countInstance(self, arr, x):
        count = 0
        for i in arr:
            if i == x:
                count += 1
        return count

# { 
#  Driver Code Starts
# Initial Template for Python 3

# Contributed by : Nagendra Jha

# } Driver Code Ends
# User function Template for Python 3

# Function to check if x is present in arr
def isPresent(arr, x):
    for i in arr:"
1867,Write a Python program to check whether the string is Symmetrical or Palindrome,"# Python program to demonstrate
# symmetry and palindrome of the
# string




# Function to check whether the
# string is palindrome or not
def palindrome(a):

# finding the mid, start
# and last index of the string
mid = (len(a)-1)//2 #you can remove the -1 or you add <= sign in line 21
start = 0 #so that you can compare the middle elements also.
last = len(a)-1
flag = 0


# A loop till the mid of the
# string
while(start <= mid):

# comparing letters from right
# from the letters from left
if (a[start]== a[last]):

start += 1
last -= 1

else:
flag = 1
break;

# Checking the flag variable to
# check if the string is palindrome
# or not
if flag == 0:
print(""The entered string is palindrome"")
else:
print(""The entered string is not palindrome"")

# Function to check whether the
# string is symmetrical or not
def symmetry(a):

n = len(a)
flag = 0

# Check if the string's length
# is odd or even
if n%2:
mid = n//2 +1
else:
mid = n//2

start1 = 0
start2 = mid

while(start1 < mid and start2 < n):

if (a[start1]== a[start2]):
start1 = start1 + 1
start2 = start2 + 1
else:
flag = 1
break

# Checking the flag variable to
# check if the string is symmetrical
# or not
if flag == 0:
print(""The entered string is symmetrical"")
else:
print(""The entered string is not symmetrical"")

# Driver code
string = 'amaama'
palindrome(string)
symmetry(string)","def is_palindrome(s):
    if len(s) == 1:
        return True
    if s[0] == s[-1]:
        return True
    else:
        return False

print(is_palindrome(""A man, a plan, a canal: Panama""))
print(is_palindrome(""race a car""))

""""""

# Solution 1

def is_palindrome(s):
    if len(s) == 1:"
1868,LRU Cache in Python using OrderedDict,"from collections import OrderedDict


class LRUCache:


# initialising capacity
def __init__(self, capacity: int):
self.cache = OrderedDict()
self.capacity = capacity


# we return the value of the key
# that is queried in O(1) and return -1 if we
# don't find the key in out dict / cache.
# And also move the key to the end
# to show that it was recently used.
def get(self, key: int) -> int:
if key not in self.cache:
return -1
else:
self.cache.move_to_end(key)
return self.cache[key]


# first, we add / update the key by conventional methods.
# And also move the key to the end to show that it was recently used.
# But here we will also check whether the length of our
# ordered dictionary has exceeded our capacity,
# If so we remove the first key (least recently used)
def put(self, key: int, value: int) -> None:
self.cache[key] = value
self.cache.move_to_end(key)
if len(self.cache) > self.capacity:
self.cache.popitem(last = False)




# RUNNER
# initializing our cache with the capacity of 2
cache = LRUCache(2)




cache.put(1, 1)
print(cache.cache)
cache.put(2, 2)
print(cache.cache)
cache.get(1)
print(cache.cache)
cache.put(3, 3)
print(cache.cache)
cache.get(2)
print(cache.cache)
cache.put(4, 4)
print(cache.cache)
cache.get(1)
print(cache.cache)
cache.get(3)
print(cache.cache)
cache.get(4)
print(cache.cache)


#This code was contributed by Sachin Negi","def LRU(cache, capacity):
    if cache.get(capacity) is not None:
        return cache[capacity]
    else:
        return None

cache = OrderedDict()
cache[1] = 1
cache[2] = 2
cache[3] = 3
cache[4] = 4
cache[5] = 5
cache[6] = 6
cache[7] = 7
cache[8] = 8
cache[9] = 9
cache[10] = 10
cache["
1869,Write a Python Program to find minimum number of rotations to obtain actual string,"def findRotations(str1, str2):

# To count left rotations
# of string
x = 0

# To count right rotations
# of string
y = 0
m = str1

while True:

# left rotating the string
m = m[len(m)-1] + m[:len(m)-1]

# checking if rotated and
# actual string are equal.
if(m == str2):
x += 1
break

else:
x += 1
if x > len(str2) :
break

while True:

# right rotating the string
str1 = str1[1:len(str1)]+str1[0]

# checking if rotated and actual
# string are equal.
if(str1 == str2):
y += 1
break

else:
y += 1
if y > len(str2):
break

if x < len(str2):

# printing the minimum
# number of rotations.
print(min(x,y))

else:
print(""given strings are not of same kind"")

# Driver code
findRotations('sgeek', 'geeks')","def solution(s):
    rotations = 0
    for i in range(len(s)):
        rotations += s[i]
    return rotations

print(solution(""abcdefghijklmnopqrstuvwxyz""))

""""""

def solution(s):
    rotations = 0
    for i in range(len(s)):
        rotations += s[i]
    return rotations

print(solution(""abcdefghijkl"
1870,Write a Python program to Ways to remove multiple empty spaces from string List,"# Python3 code to demonstrate working of
# Remove multiple empty spaces from string List
# Using loop + strip()

# initializing list
test_list = ['gfg', ' ', ' ', 'is', ' ', 'best']

# printing original list
print(""The original list is : "" + str(test_list))

# Remove multiple empty spaces from string List
# Using loop + strip()
res = []
for ele in test_list:
if ele.strip():
res.append(ele)

# printing result
print(""List after filtering non-empty strings : "" + str(res))","def remove_multiple_empty_spaces(list):
    for i in range(len(list)):
        if list[i] == "" "":
            list.remove(list[i])
    return list

print(remove_multiple_empty_spaces([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def remove_multiple_empty_spaces(list):
    for i in range(len(list)):"
1871,How to Change a Dictionary Into a Class in Python,"# Turns a dictionary into a class
class Dict2Class(object):

def __init__(self, my_dict):

for key in my_dict:
setattr(self, key, my_dict[key])

# Driver Code
if __name__ == ""__main__"":

# Creating the dictionary
my_dict = {""Name"": ""Geeks"",
""Rank"": ""1223"",
""Subject"": ""Python""}

result = Dict2Class(my_dict)

# printing the result
print(""After Converting Dictionary to Class : "")
print(result.Name, result.Rank, result.Subject)
print(type(result))","def change_dict(d):
    for key, value in d.items():
        d[key] = value + 1
    return d

d = {'a': 1, 'b': 2, 'c': 3}
print(change_dict(d))

""""""

# Solution

def change_dict(d):
    for key, value in d.items():
        d[key] = value + 1
    return d

d = {'a': 1, 'b': 2, '"
1872,How to change border color in Tkinter widget in Python,"# import tkinter
from tkinter import *

# Create Tk object
window = Tk()

# Set the window title
window.title('GFG')

# Create a Frame for border
border_color = Frame(window, background=""red"")

# Label Widget inside the Frame
label = Label(border_color, text=""This is a Label widget"", bd=0)

# Place the widgets with border Frame
label.pack(padx=1, pady=1)
border_color.pack(padx=40, pady=40)

window.mainloop()","import tkinter as tk

def change_border(event):
    print(""Border changed"")
    
    # Create a Tkinter window
    window = tk.Tk()
    
    # Create a Tkinter canvas
    canvas = tk.Canvas(window, width=200, height=200)
    canvas.pack()
    
    # Create a Tkinter Label
    label = tk.Label(window, text=""Hello World"")
    label.pack()"
1873,Write a Python program to Remove after substring in String,"# Python3 code to demonstrate working of
# Remove after substring in String
# Using index() + len() + slicing

# initializing strings
test_str = 'geeksforgeeks is best for geeks'

# printing original string
print(""The original string is : "" + str(test_str))

# initializing sub string
sub_str = ""best""

# slicing off after length computation
res = test_str[:test_str.index(sub_str) + len(sub_str)]

# printing result
print(""The string after removal : "" + str(res))","def remove_after(s, substring):
    return s.replace(substring, """")

print(remove_after(""abcdefg"", ""e""))

""""""

def remove_after(s, substring):
    return s.replace(substring, """")

print(remove_after(""abcdefg"", ""e""))"
1874,Create Address Book in Write a Python program to Using Tkinter,"# Import Module
from tkinter import *

# Create Object
root = Tk()

# Set geometry
root.geometry('400x500')

# Add Buttons, Label, ListBox
Name = StringVar()
Number = StringVar()

frame = Frame()
frame.pack(pady=10)

frame1 = Frame()
frame1.pack()

frame2 = Frame()
frame2.pack(pady=10)

Label(frame, text = 'Name', font='arial 12 bold').pack(side=LEFT)
Entry(frame, textvariable = Name,width=50).pack()

Label(frame1, text = 'Phone No.', font='arial 12 bold').pack(side=LEFT)
Entry(frame1, textvariable = Number,width=50).pack()

Label(frame2, text = 'Address', font='arial 12 bold').pack(side=LEFT)
address = Text(frame2,width=37,height=10)
address.pack()

Button(root,text=""Add"",font=""arial 12 bold"").place(x= 100, y=270)
Button(root,text=""View"",font=""arial 12 bold"").place(x= 100, y=310)
Button(root,text=""Delete"",font=""arial 12 bold"").place(x= 100, y=350)
Button(root,text=""Reset"",font=""arial 12 bold"").place(x= 100, y=390)

scroll_bar = Scrollbar(root, orient=VERTICAL)
select = Listbox(root, yscrollcommand=scroll_bar.set, height=12)
scroll_bar.config (command=select.yview)
scroll_bar.pack(side=RIGHT, fill=Y)
select.place(x=200,y=260)

# Execute Tkinter
root.mainloop()","1. Create a GUI window
2. Create a Tkinter window
3. Create a Label widget to display the address
4. Create a Entry widget to enter the address
5. Create a Button widget to enter the address
6. Create a Label widget to display the name
7. Create a Entry widget to enter the name
8. Create a Button widget to enter the name
9. Create a Label widget to display the phone number
10. Create a Entry widget to enter the phone number
11. Create a Button widget to enter the"
1875,Write a Python program to Remove Consecutive K element records,"# Python3 code to demonstrate working of
# Remove Consecutive K element records
# Using zip() + list comprehension

# initializing list
test_list = [(4, 5, 6, 3), (5, 6, 6, 9), (1, 3, 5, 6), (6, 6, 7, 8)]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing K
K = 6

# Remove Consecutive K element records
# Using zip() + list comprehension
res = [idx for idx in test_list if (K, K) not in zip(idx, idx[1:])]

# printing result
print(""The records after removal : "" + str(res))","def remove_consecutive_k_elements(arr, k):
    # Write your code here
    if len(arr) < k:
        return arr
    else:
        return remove_consecutive_k_elements(arr[1:], k) + [arr[0]] + remove_consecutive_k_elements(arr[1:], k)

# Driver Code
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
1876,Find the size of a Set in Python,"import sys

# sample Sets
Set1 = {""A"", 1, ""B"", 2, ""C"", 3}
Set2 = {""Geek1"", ""Raju"", ""Geek2"", ""Nikhil"", ""Geek3"", ""Deepanshu""}
Set3 = {(1, ""Lion""), ( 2, ""Tiger""), (3, ""Fox"")}

# print the sizes of sample Sets
print(""Size of Set1: "" + str(sys.getsizeof(Set1)) + ""bytes"")
print(""Size of Set2: "" + str(sys.getsizeof(Set2)) + ""bytes"")
print(""Size of Set3: "" + str(sys.getsizeof(Set3)) + ""bytes"")","def size(s):
    return len(s)

print(size('abcde'))

""""""

# Solution 1

def size(s):
    return len(s)

print(size('abcde'))

# Solution 2

def size(s):
    return len(s)

print(size('abcde'))

# Solution 3

def size(s):
    return len(s)

print(size('abcde'))

# Solution 4

def"
1877,Adding and Subtracting Matrices in Python,"# importing numpy as np
import numpy as np


# creating first matrix
A = np.array([[1, 2], [3, 4]])

# creating second matrix
B = np.array([[4, 5], [6, 7]])

print(""Printing elements of first matrix"")
print(A)
print(""Printing elements of second matrix"")
print(B)

# adding two matrix
print(""Addition of two matrix"")
print(np.add(A, B))","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
B = np.array([[10, 11, 12], [13, 14, 15], [16, 17, 18]])

print(A)
print(B)

print(A-B)
print(A+B)

# Output:
# [[1 2 3]
#  [4 5 6]
#  [7 8 9]]"
1878,Set update() in Python to do union of n arrays,"# Function to combine n arrays

def combineAll(input):

# cast first array as set and assign it
# to variable named as result
result = set(input[0])

# now traverse remaining list of arrays
# and take it's update with result variable
for array in input[1:]:
result.update(array)

return list(result)

# Driver program
if __name__ == ""__main__"":
input = [[1, 2, 2, 4, 3, 6],
[5, 1, 3, 4],
[9, 5, 7, 1],
[2, 4, 1, 3]]
print (combineAll(input))","def union(a, b):
    return [a[0] + b[0], a[1] + b[1]]

def intersection(a, b):
    return [min(a[0], b[0]), max(a[1], b[1])]

def difference(a, b):
    return [a[0] - b[0], a[1] - b[1]]

def main():
    n = int(input())
    arr = []
    for i in"
1879,Compute pearson product-moment correlation coefficients of two given NumPy arrays in Python,"# import library
import numpy as np

# create numpy 1d-array
array1 = np.array([0, 1, 2])
array2 = np.array([3, 4, 5])

# pearson product-moment correlation
# coefficients of the arrays
rslt = np.corrcoef(array1, array2)

print(rslt)","import numpy as np

a = np.array([1, 2, 3, 4])
b = np.array([1, 2, 3, 4])

print(np.corrcoef(a, b))

""""""

# %%
""""""

# %%
""""""

# %%
""""""

# %%
""""""

# %%
""""""

# %%
""""""

# %%
""""""

# %%
""""""

# %%
"""""""
1880,Write a Python program to Remove all duplicates words from a given sentence,"from collections import Counter


def remov_duplicates(input):


# split input string separated by space
input = input.split("" "")


# joins two adjacent elements in iterable way
for i in range(0, len(input)):
input[i] = """".join(input[i])


# now create dictionary using counter method
# which will have strings as key and their
# frequencies as value
UniqW = Counter(input)


# joins two adjacent elements in iterable way
s = "" "".join(UniqW.keys())
print (s)


# Driver program
if __name__ == ""__main__"":
input = 'Python is great and Java is also great'
remov_duplicates(input)","s = ""this is a sentence""

s = ""this is a sentence""

s = ""this is a sentence""

s = ""this is a sentence""

s = ""this is a sentence""

s = ""this is a sentence""

s = ""this is a sentence""

s = ""this is a sentence""

s = ""this is a sentence""

s = ""this is a sentence""

s = ""this is a sentence""

s = ""this"
1881,Ranking Rows of Pandas DataFrame in Python,"# import the required packages
import pandas as pd

# Define the dictionary for converting to dataframe
movies = {'Name': ['The Godfather', 'Bird Box', 'Fight Club'],
'Year': ['1972', '2018', '1999'],
'Rating': ['9.2', '6.8', '8.8']}

df = pd.DataFrame(movies)
print(df)","import pandas as pd

df = pd.DataFrame({'Name': ['John', 'Jane', 'John', 'Jane', 'John', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane"
1882,Write a Python program to Convert key-values list to flat dictionary,"# Python3 code to demonstrate working of
# Convert key-values list to flat dictionary
# Using dict() + zip()
from itertools import product

# initializing dictionary
test_dict = {'month' : [1, 2, 3],
'name' : ['Jan', 'Feb', 'March']}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# Convert key-values list to flat dictionary
# Using dict() + zip()
res = dict(zip(test_dict['month'], test_dict['name']))

# printing result
print(""Flattened dictionary : "" + str(res))","import json

def dict_to_json(d):
    return json.dumps(d)

def json_to_dict(s):
    return json.loads(s)

def main():
    d = {'a': 1, 'b': 2, 'c': 3}
    print(dict_to_json(d))
    print(json_to_dict(dict_to_json(d)))

if __name__ == '__main__':
    main()"
1883,Write a Python program to Convert Tuple Matrix to Tuple List,"# Python3 code to demonstrate working of
# Convert Tuple Matrix to Tuple List
# Using list comprehension + zip()

# initializing list
test_list = [[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]

# printing original list
print(""The original list is : "" + str(test_list))

# flattening
temp = [ele for sub in test_list for ele in sub]

# joining to form column pairs
res = list(zip(*temp))

# printing result
print(""The converted tuple list : "" + str(res))","def convert_tuple_to_tuple_list(tuple_list):
    return tuple_list

def convert_tuple_to_tuple_list_2(tuple_list):
    return tuple_list

def convert_tuple_to_tuple_list_3(tuple_list):
    return tuple_list

def convert_tuple_to_tuple_list_4(tuple_list):
    return tuple_list

def convert_tuple"
1884,Write a Python program to Inversion in nested dictionary,"# Python3 code to demonstrate working of
# Inversion in nested dictionary
# Using loop + recursion

# utility function to get all paths till end
def extract_path(test_dict, path_way):
if not test_dict:
return [path_way]
temp = []
for key in test_dict:
temp.extend(extract_path(test_dict[key], path_way + [key]))
return temp

# function to compute inversion
def hlper_fnc(test_dict):
all_paths = extract_path(test_dict, [])
res = {}
for path in all_paths:
front = res
for ele in path[::-1]:
if ele not in front :
front[ele] = {}
front = front[ele]
return res

# initializing dictionary
test_dict = {""a"" : {""b"" : {""c"" : {}}},
""d"" : {""e"" : {}},
""f"" : {""g"" : {""h"" : {}}}}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# calling helper function for task
res = hlper_fnc(test_dict)

# printing result
print(""The inverted dictionary : "" + str(res))","def invert_dict(d):
    for k, v in d.items():
        d[v] = k
    return d

d = {'a': 1, 'b': 2, 'c': 3}
print(invert_dict(d))

""""""

# Solution:

def invert_dict(d):
    for k, v in d.items():
        d[v] = k
    return d

d = {'a': 1, 'b': 2, '"
1885,Write a Python program to Change column names and row indexes in Pandas DataFrame,"# first import the libraries
import pandas as pd

# Create a dataFrame using dictionary
df=pd.DataFrame({""Name"":['Tom','Nick','John','Peter'],
""Age"":[15,26,17,28]})

# Creates a dataFrame with
# 2 columns and 4 rows
df","import pandas as pd

df = pd.DataFrame({""A"": [1, 2, 3], ""B"": [4, 5, 6], ""C"": [7, 8, 9]})

df.columns = [""A"", ""B"", ""C""]
df.index = [""Row 1"", ""Row 2"", ""Row 3""]

print(df)

# Solution:

df.columns = [""A"", ""B"", ""C""]
df.index ="
1886,How to get size of folder using Python,"# import module
import os


# assign size
size = 0


# assign folder path
Folderpath = 'C:/Users/Geetansh Sahni/Documents/R'


# get size
for path, dirs, files in os.walk(Folderpath):
for f in files:
fp = os.path.join(path, f)
size += os.path.getsize(fp)


# display size
print(""Folder size: "" + str(size))","import os

def get_size(path):
    size = 0
    for dirpath, dirnames, filenames in os.walk(path):
        for f in filenames:
            fp = os.path.join(dirpath, f)
            if os.path.isfile(fp):
                size += os.path.getsize(fp)
    return size

print(get_size('C:\\Users\\srin\\Desktop\\Python\\Python_Projects\\'))

"""""""
1887,Intersection of two arrays in Python ( Lambda expression and filter function ),"# Function to find intersection of two arrays

def interSection(arr1,arr2):

# filter(lambda x: x in arr1, arr2) -->
# filter element x from list arr2 where x
# also lies in arr1
result = list(filter(lambda x: x in arr1, arr2))
print (""Intersection : "",result)

# Driver program
if __name__ == ""__main__"":
arr1 = [1, 3, 4, 5, 7]
arr2 = [2, 3, 5, 6]
interSection(arr1,arr2)","def intersection(arr1, arr2):
    return list(set(arr1) & set(arr2))

print(intersection([1, 2, 3, 4, 5], [2, 3, 5, 6, 7]))

""""""

def intersection(arr1, arr2):
    return list(set(arr1) & set(arr2))

print(intersection([1, 2, 3, 4, 5], [2, 3, 5, 6, 7]))"
1888,Write a Python program to Convert set into a list,"# Python3 program to convert a
# set into a list
my_set = {'Geeks', 'for', 'geeks'}

s = list(my_set)
print(s)","def solution(set):
    return list(set)

def solution(set):
    return list(set)

def solution(set):
    return list(set)

def solution(set):
    return list(set)

def solution(set):
    return list(set)

def solution(set):
    return list(set)

def solution(set):
    return list(set)

def solution(set):
    return list(set)

def solution(set):"
1889,Write a Python program to Creating a Pandas dataframe column based on a given condition,"# importing pandas as pd
import pandas as pd

# Creating the dataframe
df = pd.DataFrame({'Date' : ['11/8/2011', '11/9/2011', '11/10/2011',
'11/11/2011', '11/12/2011'],
'Event' : ['Music', 'Poetry', 'Music', 'Music', 'Poetry']})

# Print the dataframe
print(df)","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Score': [85, 90, 95, 100, 95, 90]})

# Create a column based on the condition
df['Score'] = df['Score'].apply(lambda x: x if x >= 90 else x - 10)

# Display the dataframe
print("
1890,How to insert a space between characters of all the elements of a given NumPy array in Python,"# importing numpy as np
import numpy as np


# creating array of string
x = np.array([""geeks"", ""for"", ""geeks""],
dtype=np.str)
print(""Printing the Original Array:"")
print(x)

# inserting space using np.char.join()
r = np.char.join("" "", x)
print(""Printing the array after inserting space\
between the elements"")
print(r)","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a)

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a.dtype)

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a"
1891,Write a Python program to Test substring order,"# Python3 code to demonstrate working of
# Test substring order
# Using join() + in operator + generator expression

# initializing string
test_str = 'geeksforgeeks'

# printing original string
print(""The original string is : "" + str(test_str))

# initializing substring
K = 'seek'

# concatenating required characters
temp = lambda sub: ''.join(chr for chr in sub if chr in set(K))

# checking in order
res = K in temp(test_str)

# printing result
print(""Is substring in order : "" + str(res))","def test_substring_order(s):
    if len(s) == 0:
        return True
    if len(s) == 1:
        return False
    if s[0] == s[1]:
        return test_substring_order(s[2:])
    else:
        return test_substring_order(s[1:])

print(test_substring_order(""abababababababababababababababababababababababab"
1892,String slicing in Python to check if a string can become empty by recursive deletion,"def checkEmpty(input, pattern):

# If both are empty
if len(input)== 0 and len(pattern)== 0:
return 'true'

# If only pattern is empty
if len(pattern)== 0:
return 'true'

while (len(input) != 0):

# find sub-string in main string
index = input.find(pattern)

# check if sub-string founded or not
if (index ==(-1)):
return 'false'

# slice input string in two parts and concatenate
input = input[0:index] + input[index + len(pattern):]

return 'true'

# Driver program
if __name__ == ""__main__"":
input ='GEEGEEKSKS'
pattern ='GEEKS'
print (checkEmpty(input, pattern))","def is_empty(s):
    if len(s) == 0:
        return True
    else:
        return False

print(is_empty(""""))
print(is_empty(""a""))
print(is_empty(""""))
print(is_empty(""a""))
print(is_empty(""a""))
print(is_empty(""a""))
print(is_empty(""a""))
print(is_empty(""a""))
print(is_empty(""a""))
print(is"
1893,Write a Python program to How to get unique elements in nested tuple,"# Python3 code to demonstrate working of
# Unique elements in nested tuple
# Using nested loop + set()

# initialize list
test_list = [(3, 4, 5), (4, 5, 7), (1, 4)]

# printing original list
print(""The original list : "" + str(test_list))

# Unique elements in nested tuple
# Using nested loop + set()
res = []
temp = set()
for inner in test_list:
for ele in inner:
if not ele in temp:
temp.add(ele)
res.append(ele)

# printing result
print(""Unique elements in nested tuples are : "" + str(res))","def get_unique_elements(t):
    return list(set(t))

print(get_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def get_unique_elements(t):
    return list(set(t))

print(get_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
1894,How to count the frequency of unique values in NumPy array in Python,"# import library
import numpy as np

ini_array = np.array([10, 20, 5,
10, 8, 20,
8, 9])

# Get a tuple of unique values
# and their frequency in
# numpy array
unique, frequency = np.unique(ini_array,
return_counts = True)
# print unique values array
print(""Unique Values:"",
unique)

# print frequency array
print(""Frequency Values:"",
frequency)","import numpy as np

# Create a NumPy array with the following data:
a = np.array([1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a Python code snippet to print the frequency of unique values in NumPy array:
print(a.size)

# Create a Python code snippet to print the frequency of unique values in NumPy array:
print(a.shape)

# Create a Python code snippet to"
1895,How to calculate the element-wise absolute value of NumPy array in Python,"# import library
import numpy as np

# create a numpy 1d-array
array = np.array([1, -2, 3])

print(""Given array:\n"", array)

# find element-wise
# absolute value
rslt = np.absolute(array)

print(""Absolute array:\n"", rslt)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(np.abs(a))

""""""

# Solution

# a = np.array([[1, 2, 3], [4, 5, 6]])
# print(np.abs(a))

# a = np.array([[1, 2, 3], [4, 5, 6]])
# print(np.abs(a))"
1896,Write a Python program to Remove nested records from tuple,"# Python3 code to demonstrate working of
# Remove nested records
# using isinstance() + enumerate() + loop

# initialize tuple
test_tup = (1, 5, 7, (4, 6), 10)

# printing original tuple
print(""The original tuple : "" + str(test_tup))

# Remove nested records
# using isinstance() + enumerate() + loop
res = tuple()
for count, ele in enumerate(test_tup):
if not isinstance(ele, tuple):
res = res + (ele, )

# printing result
print(""Elements after removal of nested records : "" + str(res))","def remove_nested_tuple(tuple):
    return tuple[0], tuple[1], tuple[2]

tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

print(remove_nested_tuple(tuple))

""""""

def remove_nested_tuple(tuple):
    return tuple[0], tuple[1], tuple[2]

tuple = (1, 2, 3, 4, 5, 6,"
1897,Write a Python program to Reverse a numpy array,"# Python code to demonstrate
# how to reverse numpy array
# using shortcut method

import numpy as np

# initialising numpy array
ini_array = np.array([1, 2, 3, 6, 4, 5])

# printing initial ini_array
print(""initial array"", str(ini_array))

# printing type of ini_array
print(""type of ini_array"", type(ini_array))

# using shortcut method to reverse
res = ini_array[::-1]

# printing result
print(""final array"", str(res))","import numpy as np

arr = np.array([1, 2, 3, 4, 5])
print(arr)
arr = arr[::-1]
print(arr)

arr = np.array([1, 2, 3, 4, 5])
print(arr)
arr = arr[::-1]
print(arr)

arr = np.array([1, 2, 3, 4, 5])
print(arr)
arr = arr[::-1]
print(arr)"
1898,Write a Python program to display half diamond pattern of numbers with star border,"# function to display the pattern up to n
def display(n):

print(""*"")

for i in range(1, n+1):
print(""*"", end="""")

# for loop to display number up to i
for j in range(1, i+1):
print(j, end="""")

# for loop to display number in reverse direction
for j in range(i-1, 0, -1):
print(j, end="""")

print(""*"", end="""")
print()

# for loop to display i in reverse direction
for i in range(n-1, 0, -1):
print(""*"", end="""")
for j in range(1, i+1):
print(j, end="""")

for j in range(i-1, 0, -1):
print(j, end="""")

print(""*"", end="""")
print()

print(""*"")


# driver code
n = 5
print('\nFor n =', n)
display(n)

n = 3
print('\nFor n =', n)
display(n)","import turtle

t = turtle.Turtle()
t.speed(0)
t.pensize(3)
t.penup()
t.goto(-200, -200)
t.pendown()
t.circle(200)
t.penup()
t.goto(-200, 200)
t.pendown()
t.circle(200)
t.penup()
t.goto(-200, -200)
t.pendown()
t.circle("
1899,Collapse multiple Columns in Pandas in Python,"# Python program to collapse
# multiple Columns using Pandas
import pandas as pd

# sample data
n = 3
Sample_1 = [57, 51, 6]
Sample_2 = [92, 16, 19]
Sample_3 = [15, 93, 71]
Sample_4 = [28, 73, 31]

sample_id = zip([""S""]*n, list(range(1, n + 1)))

s_names = [''.join([w[0], str(w[1])]) for w in sample_id]

d = {'s_names': s_names, 'Sample_1': Sample_1,
'Sample_2': Sample_2, 'Sample_3': Sample_3,
'Sample_4': Sample_4}

df_1 = pd.DataFrame(d)

mapping = {'Sample_1': 'Result_1',
'Sample_2': 'Result_1',
'Sample_3': 'Result_2',
'Sample_4': 'Result_2'}

df = df_1.set_index('s_names').groupby(mapping, axis = 1).sum()

df.reset_index(level = 0)","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution 23

# Solution 24"
1900,Write a Python program to Insertion at the beginning in OrderedDict,"# Python code to demonstrate
# insertion of items in beginning of ordered dict
from collections import OrderedDict

# initialising ordered_dict
iniordered_dict = OrderedDict([('akshat', '1'), ('nikhil', '2')])

# inserting items in starting of dict
iniordered_dict.update({'manjeet':'3'})
iniordered_dict.move_to_end('manjeet', last = False)

# print result
print (""Resultant Dictionary : ""+str(iniordered_dict))","def insertion_sort(d):
    for i in range(1, len(d)):
        key = d[i]
        j = i - 1
        while j >= 0 and key < d[j]:
            d[j + 1] = d[j]
            j -= 1
        d[j + 1] = key
    return d

d = {1: 'A', 2: 'B', 3: 'C', 4: 'D', 5: 'E', 6:"
1901,Using Timedelta and Period to create DateTime based indexes in Pandas in Python,"# importing pandas as pd
import pandas as pd

# Creating the timestamp
ts = pd.Timestamp('02-06-2018')

# Print the timestamp
print(ts)","import pandas as pd

# Create a Timedelta Index
tdi = pd.date_range('1/1/2000', periods=4, freq='D')

# Create a Period Index
pi = pd.period_range('2000-01-01', periods=4, freq='D')

# Create a DateTime Index
dt = pd.date_range('2000-01-01', periods=4, freq='D')

# Create a"
1902,Write a Python program to Sort Tuples by Total digits,"# Python3 code to demonstrate working of
# Sort Tuples by Total digits
# Using sort() + len() + sum()

def count_digs(tup):

# gets total digits in tuples
return sum([len(str(ele)) for ele in tup ])

# initializing list
test_list = [(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)]

# printing original list
print(""The original list is : "" + str(test_list))

# performing sort
test_list.sort(key = count_digs)

# printing result
print(""Sorted tuples : "" + str(test_list))","def sort_tuple(tup):
    return tup[0]

tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print(sorted(tup, key=sort_tuple))

""""""

# Solution 1

def sort_tuple(tup):
    return tup[0]

tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print(sorted"
1903,Write a Python program to reverse a stack,"# create class for stack
class Stack:


# create empty list
def __init__(self):
self.Elements = []

# push() for insert an element
def push(self, value):
self.Elements.append(value)

# pop() for remove an element
def pop(self):
return self.Elements.pop()

# empty() check the stack is empty of not
def empty(self):
return self.Elements == []

# show() display stack
def show(self):
for value in reversed(self.Elements):
print(value)


# Insert_Bottom() insert value at bottom
def BottomInsert(s, value):

# check the stack is empty or not
if s.empty():

# if stack is empty then call
# push() method.
s.push(value)

# if stack is not empty then execute
# else block
else:
popped = s.pop()
BottomInsert(s, value)
s.push(popped)


# Reverse() reverse the stack
def Reverse(s):
if s.empty():
pass
else:
popped = s.pop()
Reverse(s)
BottomInsert(s, popped)




# create object of stack class
stk = Stack()


stk.push(1)
stk.push(2)
stk.push(3)
stk.push(4)
stk.push(5)


print(""Original Stack"")
stk.show()


print(""\nStack after Reversing"")
Reverse(stk)
stk.show()","def reverseStack(stack):
    # Your code here
    return stack[::-1]

stack = [1, 2, 3, 4, 5]
print(reverseStack(stack))

stack = [1, 2, 3, 4, 5]
print(reverseStack(stack))

stack = [1, 2, 3, 4, 5]
print(reverseStack(stack))

stack = [1, 2, 3, 4, 5]
print(reverseStack(stack))

stack = [1,"
1904,Explicitly define datatype in a Python function,"# function definition
def add(num1, num2):
print(""Datatype of num1 is "", type(num1))
print(""Datatype of num2 is "", type(num2))
return num1 + num2

# calling the function without
# explicitly declaring the datatypes
print(add(2, 3))

# calling the function by explicitly
# defining the datatype as float
print(add(float(2), float(3)))","def solution(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return solution(n-1) + solution(n-2)

print(solution(5))

""""""

def solution(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return solution(n-1) + solution(n-2)

print(solution("
1905,Numpy count_nonzero method | Python,"# Python program explaining
# numpy.count_nonzero() function

# importing numpy as geek
import numpy as geek

arr = [[0, 1, 2, 3, 0], [0, 5, 6, 0, 7]]

gfg = geek.count_nonzero(arr)

print (gfg)","import numpy as np

# Create a numpy array with the following data:
a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a numpy array with the following data:
b = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a numpy array with the following data:
c = np.array([1, 2, 3, 4, 5, 6, 7,"
1906,Getting frequency counts of a columns in Pandas DataFrame in Python,"# importing pandas as pd
import pandas as pd

# sample dataframe
df = pd.DataFrame({'A': ['foo', 'bar', 'g2g', 'g2g', 'g2g',
'bar', 'bar', 'foo', 'bar'],
'B': ['a', 'b', 'a', 'b', 'b', 'b', 'a', 'a', 'b'] })

# frequency count of column A
count = df['A'].value_counts()
print(count)","import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

# Create a Series
s = pd.Series([1, 2, 3, 4, 5])

# Create a DataFrame from a Series
df2 = pd.DataFrame(s)

# Create a Series from a DataFrame
s2 = pd"
1907,Write a Python program to reverse the content of a file and store it in another file,"# Open the file in write mode
f1 = open(""output1.txt"", ""w"")

# Open the input file and get
# the content into a variable data
with open(""file.txt"", ""r"") as myfile:
data = myfile.read()

# For Full Reversing we will store the
# value of data into new variable data_1
# in a reverse order using [start: end: step],
# where step when passed -1 will reverse
# the string
data_1 = data[::-1]

# Now we will write the fully reverse
# data in the output1 file using
# following command
f1.write(data_1)

f1.close()","python solution.py

""""""

import os
import sys

# Complete the reverse function below.
def reverse(s):
    return s[::-1]

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = reverse(s)

    fptr.write(result + '\n')

    fptr.close()"
1908,Write a Python program to sort a list of tuples by second Item,"# Python program to sort a list of tuples by the second Item

# Function to sort the list of tuples by its second item
def Sort_Tuple(tup):

# getting length of list of tuples
lst = len(tup)
for i in range(0, lst):

for j in range(0, lst-i-1):
if (tup[j][1] > tup[j + 1][1]):
temp = tup[j]
tup[j]= tup[j + 1]
tup[j + 1]= temp
return tup

# Driver Code
tup =[('for', 24), ('is', 10), ('Geeks', 28),
('Geeksforgeeks', 5), ('portal', 20), ('a', 15)]

print(Sort_Tuple(tup))","""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

#"
1909,Write a Python program to Group similar elements into Matrix,"# Python3 code to demonstrate working of
# Group similar elements into Matrix
# Using list comprehension + groupby()
from itertools import groupby

# initializing list
test_list = [1, 3, 5, 1, 3, 2, 5, 4, 2]

# printing original list
print(""The original list : "" + str(test_list))

# Group similar elements into Matrix
# Using list comprehension + groupby()
res = [list(val) for key, val in groupby(sorted(test_list))]

# printing result
print(""Matrix after grouping : "" + str(res))","def group_similar(matrix, n):
    # Write your code here
    matrix = [[0 for i in range(n)] for j in range(n)]
    for i in range(n):
        for j in range(n):
            if i == j:
                matrix[i][j] = 1
            else:
                matrix[i][j] = matrix[i][j] + matrix[i][j-1]
    return matrix

matrix = [[1, 2, 3"
1910,Scrape LinkedIn Using Selenium And Beautiful Soup in Python,"from selenium import webdriver
from bs4 import BeautifulSoup
import time

# Creating a webdriver instance
driver = webdriver.Chrome(""Enter-Location-Of-Your-Web-Driver"")
# This instance will be used to log into LinkedIn

# Opening linkedIn's login page
driver.get(""https://linkedin.com/uas/login"")

# waiting for the page to load
time.sleep(5)

# entering username
username = driver.find_element_by_id(""username"")

# In case of an error, try changing the element
# tag used here.

# Enter Your Email Address
username.send_keys(""User_email"")

# entering password
pword = driver.find_element_by_id(""password"")
# In case of an error, try changing the element
# tag used here.

# Enter Your Password
pword.send_keys(""User_pass"")

# Clicking on the log in button
# Format (syntax) of writing XPath -->
# //tagname[@attribute='value']
driver.find_element_by_xpath(""//button[@type='submit']"").click()
# In case of an error, try changing the
# XPath used here.","import requests
from bs4 import BeautifulSoup

url = ""https://www.linkedin.com/jobs/search/?f_LF=f_AL&f_LS=f_AL&f_LK=f_AL&f_JSEARCH=f_AL&f_JSCENTER=f_AL&f_JSCORE_MIN=0&f_JSCORE_MAX=100&f_JSCORE_SORT=1&f_JSCORE_SORT_DIR"
1911,How to randomly select rows from Pandas DataFrame in Python,"# Import pandas package
import pandas as pd

# Define a dictionary containing employee data
data = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj', 'Geeku'],
'Age':[27, 24, 22, 32, 15],
'Address':['Delhi', 'Kanpur', 'Allahabad', 'Kannauj', 'Noida'],
'Qualification':['Msc', 'MA', 'MCA', 'Phd', '10th']}


# Convert the dictionary into DataFrame
df = pd.DataFrame(data)


# select all columns
df","import random

df = pd.DataFrame(random.randint(0,100,size=(10,5)),columns=['a','b','c','d','e'])
print(df)

# Solution:

# df = pd.DataFrame(random.randint(0,100,size=(10,5)),columns=['a','b','c','d','e'])
# print(df)

# Solution:

# df = pd.DataFrame(random"
1912,How to divide a polynomial to another using NumPy in Python,"# importing package
import numpy

# define the polynomials
# p(x) = 5(x**2) + (-2)x +5
px = (5, -2, 5)

# g(x) = x +2
gx = (2, 1, 0)

# divide the polynomials
qx, rx = numpy.polynomial.polynomial.polydiv(px, gx)

# print the result
# quotiient
print(qx)

# remainder
print(rx)","import numpy as np

def solve(p, q, r):
    # p is the polynomial
    # q is the quotient
    # r is the remainder
    # return the solution
    #
    # Note:
    #
    # The solution is a list of coefficients
    #
    # The coefficients are in the order of the
    # polynomial
    #
    # The remainder is a list of coefficients
    #
    # The coefficients are in the order of the"
1913,Write a Python program to Numpy matrix.sum(),"# import the important module in python
import numpy as np

# make matrix with numpy
gfg = np.matrix('[4, 1; 12, 3]')

# applying matrix.sum() method
geek = gfg.sum()

print(geek)","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(A.sum())

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

#"
1914,Execute a String of Code in Python,"# Python program to illustrate use of exec to
# execute a given code as string.


# function illustrating how exec() functions.
def exec_code():
LOC = """"""
def factorial(num):
fact=1
for i in range(1,num+1):
fact = fact*i
return fact
print(factorial(5))
""""""
exec(LOC)

# Driver Code
exec_code()","def solution(s):
    # Write your code here
    return s.replace(' ', '').replace('\n', '').replace(' ', '').replace('\t', '')

print(solution('Python'))

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''

'''"
1915,Write a Python program to Remove suffix from string list,"# Python3 code to demonstrate working of
# Suffix removal from String list
# using loop + remove() + endswith()

# initialize list
test_list = ['allx', 'lovex', 'gfg', 'xit', 'is', 'bestx']

# printing original list
print(""The original list : "" + str(test_list))

# initialize suffix
suff = 'x'

# Suffix removal from String list
# using loop + remove() + endswith()
for word in test_list[:]:
if word.endswith(suff):
test_list.remove(word)

# printing result
print(""List after removal of suffix elements : "" + str(test_list))","def remove_suffix(string, suffix):
    return string[string.find(suffix) + len(suffix):]

print(remove_suffix(""python"", ""o""))

""""""

def remove_suffix(string, suffix):
    return string[string.find(suffix) + len(suffix):]

print(remove_suffix(""python"", ""o""))

""""""

def remove_suffix(string, suffix):
    return string[string.find(suffix)"
1916,numpy.poly1d() in Python,"# Python code explaining
# numpy.poly1d()

# importing libraries
import numpy as np

# Constructing polynomial
p1 = np.poly1d([1, 2])
p2 = np.poly1d([4, 9, 5, 4])

print (""P1 : "", p1)
print (""\n p2 : \n"", p2)

# Solve for x = 2
print (""\n\np1 at x = 2 : "", p1(2))
print (""p2 at x = 2 : "", p2(2))

# Finding Roots
print (""\n\nRoots of P1 : "", p1.r)
print (""Roots of P2 : "", p2.r)

# Finding Coefficients
print (""\n\nCoefficients of P1 : "", p1.c)
print (""Coefficients of P2 : "", p2.coeffs)

# Finding Order
print (""\n\nOrder / Degree of P1 : "", p1.o)
print (""Order / Degree of P2 : "", p2.order)","import numpy as np

def f(x):
    return np.sin(x)

x = np.linspace(0, 2*np.pi, 100)
y = f(x)

# Plot the function
plt.plot(x, y)

# Create a new figure
plt.figure()

# Create a new axes
ax = plt.axes()

# Plot the function
ax.plot(x, y)

# Create a new figure
plt.figure"
1917,Write a Python Code for time Complexity plot of Heap Sort,"# Python Code for Implementation and running time Algorithm
# Complexity plot of Heap Sort
# by Ashok Kajal
# This python code intends to implement Heap Sort Algorithm
# Plots its time Complexity on list of different sizes


# ---------------------Important Note -------------------
# numpy, time and matplotlib.pyplot are required to run this code
import time
from numpy.random import seed
from numpy.random import randint
import matplotlib.pyplot as plt




# find left child of node i
def left(i):
return 2 * i + 1


# find right child of node i
def right(i):
return 2 * i + 2


# calculate and return array size
def heapSize(A):
return len(A)-1




# This function takes an array and Heapyfies
# the at node i
def MaxHeapify(A, i):
# print(""in heapy"", i)
l = left(i)
r = right(i)

# heapSize = len(A)
# print(""left"", l, ""Rightt"", r, ""Size"", heapSize)
if l<= heapSize(A) and A[l] > A[i] :
largest = l
else:
largest = i
if r<= heapSize(A) and A[r] > A[largest]:
largest = r
if largest != i:
# print(""Largest"", largest)
A[i], A[largest]= A[largest], A[i]
# print(""List"", A)
MaxHeapify(A, largest)

# this function makes a heapified array
def BuildMaxHeap(A):
for i in range(int(heapSize(A)/2)-1, -1, -1):
MaxHeapify(A, i)

# Sorting is done using heap of array
def HeapSort(A):
BuildMaxHeap(A)
B = list()
heapSize1 = heapSize(A)
for i in range(heapSize(A), 0, -1):
A[0], A[i]= A[i], A[0]
B.append(A[heapSize1])
A = A[:-1]
heapSize1 = heapSize1-1
MaxHeapify(A, 0)



# randomly generates list of different
# sizes and call HeapSort function
elements = list()
times = list()
for i in range(1, 10):


# generate some integers
a = randint(0, 1000 * i, 1000 * i)
# print(i)
start = time.clock()
HeapSort(a)
end = time.clock()


# print(""Sorted list is "", a)
print(len(a), ""Elements Sorted by HeapSort in "", end-start)
elements.append(len(a))
times.append(end-start)


plt.xlabel('List Length')
plt.ylabel('Time Complexity')
plt.plot(elements, times, label ='Heap Sort')
plt.grid()
plt.legend()
plt.show()
# This code is contributed by Ashok Kajal","def heap_sort(arr):
    for i in range(len(arr)//2, -1, -1):
        heapify(arr, i, len(arr))
    for i in range(len(arr) - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, 0, i)

def heapify(arr, i, n):
    l = 2 * i + 1
    r"
1918,Convert JSON data Into a Custom Python Object,"# importing the module
import json
from collections import namedtuple

# creating the data
data = '{""name"" : ""Geek"", ""id"" : 1, ""location"" : ""Mumbai""}'

# making the object
x = json.loads(data, object_hook =
lambda d : namedtuple('X', d.keys())
(*d.values()))

# accessing the JSON data as an object
print(x.name, x.id, x.location)","import json

with open('data.json') as f:
    data = json.load(f)

# Solution 1:
# print(type(data))
# print(data)

# Solution 2:
# print(type(data['data']))
# print(data['data'])

# Solution 3:
# print(type(data['data']['data']))
# print(data['data']['data'])

# Solution 4:
# print(type(data['data"
1919,Write a Python counter and dictionary intersection example (Make a string using deletion and rearrangement),"# Python code to find if we can make first string
# from second by deleting some characters from
# second and rearranging remaining characters.
from collections import Counter

def makeString(str1,str2):

# convert both strings into dictionaries
# output will be like str1=""aabbcc"",
# dict1={'a':2,'b':2,'c':2}
# str2 = 'abbbcc', dict2={'a':1,'b':3,'c':2}
dict1 = Counter(str1)
dict2 = Counter(str2)

# take intersection of two dictionries
# output will be result = {'a':1,'b':2,'c':2}
result = dict1 & dict2

# compare resultant dictionary with first
# dictionary comparison first compares keys
# and then compares their corresponding values
return result == dict1

# Driver program
if __name__ == ""__main__"":
str1 = 'ABHISHEKsinGH'
str2 = 'gfhfBHkooIHnfndSHEKsiAnG'
if (makeString(str1,str2)==True):
print(""Possible"")
else:
print(""Not Possible"")","def solution(s):
    # Write your code here
    # Create a dictionary to store the number of times each character appears in the string
    d = {}
    # Create a list to store the characters in the string
    l = []
    # Create a list to store the number of times each character appears in the string
    n = []
    # Create a for loop to iterate through the string
    for i in s:
        # Add the number of times the character appears to the"
1920,Selecting rows in pandas DataFrame based on conditions in Python,"# importing pandas
import pandas as pd

record = {

'Name': ['Ankit', 'Amit', 'Aishwarya', 'Priyanka', 'Priya', 'Shaurya' ],
'Age': [21, 19, 20, 18, 17, 21],
'Stream': ['Math', 'Commerce', 'Science', 'Math', 'Math', 'Science'],
'Percentage': [88, 92, 95, 70, 65, 78] }

# create a dataframe
dataframe = pd.DataFrame(record, columns = ['Name', 'Age', 'Stream', 'Percentage'])

print(""Given Dataframe :\n"", dataframe)

# selecting rows based on condition
rslt_df = dataframe[dataframe['Percentage'] > 80]

print('\nResult dataframe :\n', rslt_df)","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution 23"
1921,Write a Python program to find the power of a number using recursion,"def power(N, P):

# if power is 0 then return 1
if P == 0:
return 1

# if power is 1 then number is
# returned
elif P == 1:
return N

else:
return (N*power(N, P-1))

# Driver program
N = 5
P = 2

print(power(N, P))","def power(x, y):
    if y == 0:
        return 1
    elif y % 2 == 0:
        return x * power(x, y // 2)
    else:
        return x * power(x, y // 2) * x

print(power(2, 4))

""""""

def power(x, y):
    if y == 0:
        return 1
    elif y % 2 == 0:
        return x * power(x, y //"
1922,Write a Python program to Stack and StackSwitcher in GTK+ 3,"import gi
# Since a system can have multiple versions
# of GTK + installed, we want to make
# sure that we are importing GTK + 3.
gi.require_version(""Gtk"", ""3.0"")
from gi.repository import Gtk


class StackWindow(Gtk.Window):
def __init__(self):
Gtk.Window.__init__(self, title =""Geeks for Geeks"")
self.set_border_width(10)

# Creating a box vertically oriented with a space of 100 pixel.
vbox = Gtk.Box(orientation = Gtk.Orientation.VERTICAL, spacing = 100)
self.add(vbox)

# Creating stack, transition type and transition duration.
stack = Gtk.Stack()
stack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
stack.set_transition_duration(1000)

# Creating the check button.
checkbutton = Gtk.CheckButton(""Yes"")
stack.add_titled(checkbutton, ""check"", ""Check Button"")

# Creating label .
label = Gtk.Label()
label.set_markup(""<big>Hello World</big>"")
stack.add_titled(label, ""label"", ""Label"")

# Implementation of stack switcher.
stack_switcher = Gtk.StackSwitcher()
stack_switcher.set_stack(stack)
vbox.pack_start(stack_switcher, True, True, 0)
vbox.pack_start(stack, True, True, 0)


win = StackWindow()
win.connect(""destroy"", Gtk.main_quit)
win.show_all()
Gtk.main()","import sys

def stack_solver(stack, stack_switcher):
    while stack:
        print(stack.pop())
    print(stack_switcher)

if __name__ == '__main__':
    stack_solver(stack, stack_switcher)

""""""

# Solution

import sys

def stack_solver(stack, stack_switcher):
    while stack:
        print(stack.pop())
    print(stack_switcher)"
1923,Assign Function to a Variable in Python,"def a():
print(""GFG"")

# assigning function to a variable
var=a


# calling the variable
var()","def solution(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return solution(n-1) + solution(n-2)

print(solution(5))

""""""

def solution(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return solution(n-1) + solution(n-2)

print(solution(5))"
1924,Looping through buttons in Tkinter in Python,"# Import package and it's modules
from tkinter import *

# create root window
root = Tk()

# root window title and dimension
root.title(""GeekForGeeks"")

# Set geometry (widthxheight)
root.geometry('400x400')

# Execute Tkinter
root.mainloop()","import tkinter as tk
from tkinter import ttk

def button_click(number):
    print(f""Button {number} was clicked."")

def button_clear():
    print(""Button 1 was clicked."")
    button_number1.configure(state=""normal"")
    button_number1.delete(0, tk.END)
    button_number1.configure(state=""disabled"")

def button_equal():
    print(""Button 2 was clicked."")
    button_number"
1925,How to Remove columns in Numpy array that contains non-numeric values in Python,"# Importing Numpy module
import numpy as np

# Creating 2X3 2-D Numpy array
n_arr = np.array([[10.5, 22.5, np.nan],
[41, 52.5, np.nan]])

print(""Given array:"")
print(n_arr)

print(""\nRemove all columns containing non-numeric elements "")
print(n_arr[:, ~np.isnan(n_arr).any(axis=0)])","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

a.dtype

a.dtype.kind

a.dtype.names

a.dtype.names[0]

a.dtype.names[0][0]

a.dtype.names[0][0] = 'a'

a.dtype.names[0][0]"
1926,Write a Python program to interchange first and last elements in a list,"# Python3 program to swap first
# and last element of a list


# Swap function
def swapList(newList):
size = len(newList)

# Swapping
temp = newList[0]
newList[0] = newList[size - 1]
newList[size - 1] = temp

return newList

# Driver code
newList = [12, 35, 9, 56, 24]


print(swapList(newList))","def interchange(lst):
    lst.sort()
    lst.reverse()
    return lst

lst = [1, 2, 3, 4, 5]
print(interchange(lst))

""""""

def interchange(lst):
    lst.sort()
    lst.reverse()
    return lst

lst = [1, 2, 3, 4, 5]
print(interchange(lst))"
1927,How to Sort data by Column in a CSV File in Python ,"# importing pandas package
import pandas as pandasForSortingCSV

# assign dataset
csvData = pandasForSortingCSV.read_csv(""sample.csv"")

# displaying unsorted data frame
print(""\nBefore sorting:"")
print(csvData)

# sort data frame
csvData.sort_values([""Salary""],
axis=0,
ascending=[False],
inplace=True)

# displaying sorted data frame
print(""\nAfter sorting:"")
print(csvData)","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    data = list(csv_reader)

data.sort(key=lambda x: int(x[0]))

with open('sorted_data.csv', 'w') as f:
    csv_writer = csv.writer(f)
    csv_writer.writerows(data)

""""""

import csv

with open('data"
1928,Write a Python program to Reverse Sort a String,"# Python3 code to demonstrate
# Reverse Sort a String
# using join() + sorted() + reverse

# initializing string
test_string = ""geekforgeeks""

# printing original string
print(""The original string : "" + str(test_string))

# using join() + sorted() + reverse
# Sorting a string
res = ''.join(sorted(test_string, reverse = True))

# print result
print(""String after reverse sorting : "" + str(res))","def reverse_string(string):
    # your code goes here
    return string[::-1]

# driver code
string = ""hello""
print(reverse_string(string))

# solution
def reverse_string(string):
    # your code goes here
    return string[::-1]

# driver code
string = ""hello""
print(reverse_string(string))

# solution
def reverse_string(string):
    # your code goes here
    return string[::-1]"
1929,How to Scrape all PDF files in a Website in Python,"# for get the pdf files or url
import requests


# for tree traversal scraping in webpage
from bs4 import BeautifulSoup


# for input and output operations
import io


# For getting information about the pdfs
from PyPDF2 import PdfFileReader","import urllib.request
import os

# Create a function named get_pdf_urls()
# which takes one parameter: url
# and returns a list of all the URLs in the given website.
#
# For example, if the url is ""http://www.python.org""
# and the website is ""http://www.python.org/index.html"",
# the function should return the list [""http://www.python.org/index.html"",
# ""http://www.python.org"
1930,Multiply matrices of complex numbers using NumPy in Python,"# importing numpy as library
import numpy as np


# creating matrix of complex number
x = np.array([2+3j, 4+5j])
print(""Printing First matrix:"")
print(x)

y = np.array([8+7j, 5+6j])
print(""Printing Second matrix:"")
print(y)

# vector dot product of two matrices
z = np.vdot(x, y)
print(""Product of first and second matrices are:"")
print(z)",">>> import numpy as np
>>> A = np.array([[1, 2, 3], [4, 5, 6]])
>>> B = np.array([[7, 8, 9], [10, 11, 12]])
>>> C = np.array([[13, 14, 15], [16, 17, 18]])
>>> A_mul = np.dot(A, B)
>>> A_mul
array([[14, 22, 34],
       [28, 46, 60]]"
1931,Calculate the Euclidean distance using NumPy in Python,"# Python code to find Euclidean distance
# using linalg.norm()


import numpy as np


# initializing points in
# numpy arrays
point1 = np.array((1, 2, 3))
point2 = np.array((1, 1, 1))


# calculating Euclidean distance
# using linalg.norm()
dist = np.linalg.norm(point1 - point2)


# printing Euclidean distance
print(dist)","import numpy as np

# Create a 2D array
x = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
              [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
              [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
              [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
              [1,"
1932,Write a Python program to Swap elements in String list,"# Python3 code to demonstrate
# Swap elements in String list
# using replace() + list comprehension

# Initializing list
test_list = ['Gfg', 'is', 'best', 'for', 'Geeks']

# printing original lists
print(""The original list is : "" + str(test_list))

# Swap elements in String list
# using replace() + list comprehension
res = [sub.replace('G', '-').replace('e', 'G').replace('-', 'e') for sub in test_list]

# printing result
print (""List after performing character swaps : "" + str(res))","def swap_elements(list1, list2):
    list1[0], list1[1] = list1[1], list1[0]
    list2[0], list2[1] = list2[1], list2[0]
    return list1, list2

list1 = [""a"", ""b"", ""c""]
list2 = [""d"", ""e"", ""f""]

print(swap_elements(list1, list2))

""""""

def swap_e"
1933,Write a Python program to Kth Column Product in Tuple List,"# Python3 code to demonstrate working of
# Tuple List Kth Column Product
# using list comprehension + loop

# getting Product
def prod(val) :
res = 1
for ele in val:
res *= ele
return res

# initialize list
test_list = [(5, 6, 7), (1, 3, 5), (8, 9, 19)]

# printing original list
print(""The original list is : "" + str(test_list))

# initialize K
K = 2

# Tuple List Kth Column Product
# using list comprehension + loop
res = prod([sub[K] for sub in test_list])

# printing result
print(""Product of Kth Column of Tuple List : "" + str(res))","def kth_column_product(a, b, c, d, e, f, g, h, i, j, k):
    if i == 0:
        return (a[0] * b[0] * c[0] * d[0] * e[0] * f[0] * g[0] * h[0] * i[0] * j[0] * k[0])
    elif i == 1:
        return (a[0] * b[0"
1934,Write a Python program to create a list of tuples from given list having number and its cube in each tuple,"# Python program to create a list of tuples
# from given list having number and
# its cube in each tuple

# creating a list
list1 = [1, 2, 5, 6]

# using list comprehension to iterate each
# values in list and create a tuple as specified
res = [(val, pow(val, 3)) for val in list1]

# print the result
print(res)","import math

def cube(n):
    return math.pow(n,3)

def main():
    n = int(input(""Enter the number of elements in the list: ""))
    l = []
    for i in range(n):
        t = (int(input(""Enter the element: "")),cube(i))
        l.append(t)
    print(l)

if __name__ == ""__main__"":"
1935,Change current working directory with Python,"# Python program to change the
# current working directory




import os


# Function to Get the current
# working directory
def current_path():
print(""Current working directory before"")
print(os.getcwd())
print()




# Driver's code
# Printing CWD before
current_path()


# Changing the CWD
os.chdir('../')


# Printing CWD after
current_path()","import os
os.chdir('C:\\Users\\srin\\OneDrive\\Desktop\\Python\\')

# Solution:

# import os
# os.chdir('C:\\Users\\srin\\OneDrive\\Desktop\\Python\\')

# Solution:

# import os
# os.chdir('C:\\Users\\srin\\OneDrive\\Desktop\\Python\\')

# Solution:

# import os
# os.chdir('C:\\Users\\srin\\OneDrive\\Desktop\\Python\\"
1936,Write a Python program to Find all close matches of input string from a list,"# Function to find all close matches of
# input string in given list of possible strings
from difflib import get_close_matches

def closeMatches(patterns, word):
print(get_close_matches(word, patterns))

# Driver program
if __name__ == ""__main__"":
word = 'appel'
patterns = ['ape', 'apple', 'peach', 'puppy']
closeMatches(patterns, word)","def find_close_matches(input_string, possibilities, n=3, cutoff=0.7):
    """"""
    :param input_string: str, the input string
    :param possibilities: list, a list of strings
    :param n: int, the number of strings to find
    :param cutoff: float, the minimum length of a match
    :return: list, a list of strings
    """"""
    if len(input_string) < n:
        return []
    if"
1937,Write a Python program to Find fibonacci series upto n using lambda,"from functools import reduce

fib = lambda n: reduce(lambda x, _: x+[x[-1]+x[-2]],
range(n-2), [0, 1])

print(fib(5))","def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

n = int(input(""Enter the number of terms: ""))
print(fib(n))

""""""

# Solution

def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:"
1938,Sorting a CSV object by dates in Python,import pandas as pd,"import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    file_data = list(csv_reader)

file_data.pop(0)

new_data = []
for i in range(len(file_data)):
    n_num = file_data[i][1]
    new_data.append(float(n_num))

new_data.sort()

print(new_data)"
1939,Overuse of lambda expressions in Python,"# Python program showing a use
# lambda function


# performing a addition of three number
x1 = (lambda x, y, z: (x + y) * z)(1, 2, 3)
print(x1)


# function using a lambda function
x2 = (lambda x, y, z: (x + y) if (z == 0) else (x * y))(1, 2, 3)
print(x2)","def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):
    return n*(n+1)//2

def solution(n):"
1940,Difference of two columns in Pandas dataframe in Python,"import pandas as pd

# Create a DataFrame
df1 = { 'Name':['George','Andrea','micheal',
'maggie','Ravi','Xien','Jalpa'],
'score1':[62,47,55,74,32,77,86],
'score2':[45,78,44,89,66,49,72]}

df1 = pd.DataFrame(df1,columns= ['Name','score1','score2'])

print(""Given Dataframe :\n"", df1)

# getting Difference
df1['Score_diff'] = df1['score1'] - df1['score2']
print(""\nDifference of score1 and score2 :\n"", df1)","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pima-indians-diabetes.csv')

# print(df.head())

# print(df.columns)

# print(df.shape)

# print(df.info())

# print(df.describe())

# print(df.isnull().sum())

# print(df.isnull()."
1941,"Open computer drives like C, D or E using Python","# import library
import os

# take Input from the user
query = input(""Which drive you have to open ? C , D or E: \n"")

# Check the condition for
# opening the C drive
if ""C"" in query or ""c"" in query:
os.startfile(""C:"")

# Check the condition for
# opening the D drive
elif ""D"" in query or ""d"" in query:
os.startfile(""D:"")

# Check the condition for
# opening the D drive
elif ""E"" in query or ""e"" in query:
os.startfile(""E:"")

else:
print(""Wrong Input"")","def drive_solution(drive_name):
    if drive_name == ""C"":
        print(""C is the drive"")
    elif drive_name == ""D"":
        print(""D is the drive"")
    elif drive_name == ""E"":
        print(""E is the drive"")
    else:
        print(""Invalid drive name"")

drive_name = input(""Enter drive name: "")
drive_solution(drive_name)

""""""

# Solution

def drive_"
1942,Write a Python Dictionary | Check if binary representations of two numbers are anagram,"# function to Check if binary representations
# of two numbers are anagram
from collections import Counter

def checkAnagram(num1,num2):

# convert numbers into in binary
# and remove first two characters of
# output string because bin function
# '0b' as prefix in output string
bin1 = bin(num1)[2:]
bin2 = bin(num2)[2:]

# append zeros in shorter string
zeros = abs(len(bin1)-len(bin2))
if (len(bin1)>len(bin2)):
bin2 = zeros * '0' + bin2
else:
bin1 = zeros * '0' + bin1

# convert binary representations
# into dictionary
dict1 = Counter(bin1)
dict2 = Counter(bin2)

# compare both dictionaries
if dict1 == dict2:
print('Yes')
else:
print('No')

# Driver program
if __name__ == ""__main__"":
num1 = 8
num2 = 4
checkAnagram(num1,num2)
","def solution(a, b):
    if len(a)!= len(b):
        return False
    for i in range(len(a)):
        if a[i]!= b[i]:
            return False
    return True

print(solution(""abcd"", ""abcd""))
print(solution(""abcd"", ""abcdabcd""))
print(solution(""abcd"", ""abcdabcdabcd""))
print(solution(""abcd"", ""abcd"
1943,Write a Python Program to Print Lines Containing Given String in File,"# Python Program to Print Lines
# Containing Given String in File

# input file name with extension
file_name = input(""Enter The File's Name: "")

# using try catch except to
# handle file not found error.

# entering try block
try:

# opening and reading the file
file_read = open(file_name, ""r"")

# asking the user to enter the string to be
# searched
text = input(""Enter the String: "")

# reading file content line by line.
lines = file_read.readlines()

new_list = []
idx = 0

# looping through each line in the file
for line in lines:

# if line have the input string, get the index
# of that line and put the
# line into newly created list
if text in line:
new_list.insert(idx, line)
idx += 1

# closing file after reading
file_read.close()

# if length of new list is 0 that means
# the input string doesn't
# found in the text file
if len(new_list)==0:
print(""\n\"""" +text+ ""\"" is not found in \"""" +file_name+ ""\""!"")
else:

# displaying the lines
# containing given string
lineLen = len(new_list)
print(""\n**** Lines containing \"""" +text+ ""\"" ****\n"")
for i in range(lineLen):
print(end=new_list[i])
print()

# entering except block
# if input file doesn't exist
except :
print(""\nThe file doesn't exist!"")","import re

def solution(s):
    s = re.sub(r'\s+','', s)
    s = s.lower()
    s = s.split()
    s = [x for x in s if x not in set(string.punctuation)]
    s =''.join(s)
    s = s.split()
    s = [x for x in s if x not in set(string.punctuation)]
    s =''.join(s)"
1944,NumPy.histogram() Method in Python,"# Import libraries
import numpy as np


# Creating dataset
a = np.random.randint(100, size =(50))

# Creating histogram
np.histogram(a, bins = [0, 10, 20, 30, 40,
50, 60, 70, 80, 90,
100])

hist, bins = np.histogram(a, bins = [0, 10,
20, 30,
40, 50,
60, 70,
80, 90,
100])

# printing histogram
print()
print (hist)
print (bins)
print()","import numpy as np

# Create a histogram with the number of occurences of each value
# in the array
x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a histogram with the number of occurences of each value
# in the array
x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create a histogram with the number of occurences of each"
1945,Write a Python program to find files having a particular extension using RegEx,"# import library
import re

# list of different types of file
filenames = [""gfg.html"", ""geeks.xml"",
""computer.txt"", ""geeksforgeeks.jpg""]

for file in filenames:
# search given pattern in the line
match = re.search(""\.xml$"", file)

# if match is found
if match:
print(""The file ending with .xml is:"",
file)","import re

def find_files(extension):
    files = []
    for file in os.listdir('.'):
        if file.endswith(extension):
            files.append(file)
    return files

print(find_files('.py'))

""""""

import re

def find_files(extension):
    files = []
    for file in os.listdir('.'):
        if file.endswith(extension):
            files"
1946,Write a Python program to Dictionary Values Mean,"# Python3 code to demonstrate working of
# Dictionary Values Mean
# Using loop + len()

# initializing dictionary
test_dict = {""Gfg"" : 4, ""is"" : 7, ""Best"" : 8, ""for"" : 6, ""Geeks"" : 10}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# loop to sum all values
res = 0
for val in test_dict.values():
res += val

# using len() to get total keys for mean computation
res = res / len(test_dict)

# printing result
print(""The computed mean : "" + str(res))","def mean(numbers):
    total = 0
    for i in numbers:
        total += i
    return total / len(numbers)

print(mean([1, 2, 3, 4, 5]))

""""""

def mean(numbers):
    total = 0
    for i in numbers:
        total += i
    return total / len(numbers)

print(mean([1, 2, 3, 4, 5]))

""""""

def mean(numbers):
    total ="
1947,How to iterate over rows in Pandas Dataframe in Python,"# importing pandas
import pandas as pd

# list of dicts
input_df = [{'name':'Sujeet', 'age':10},
{'name':'Sameer', 'age':11},
{'name':'Sumit', 'age':12}]

df = pd.DataFrame(input_df)
print('Original DataFrame: \n', df)


print('\nRows iterated using iterrows() : ')
for index, row in df.iterrows():
print(row['name'], row['age'])","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution 23"
1948,Write a Python program to right rotate n-numbers by 1,"def print_pattern(n):
for i in range(1, n+1, 1):
for j in range(1, n+1, 1):
# check that if index i is
# equal to j
if i == j:


print(j, end="" "")
# if index i is less than j
if i <= j:


for k in range(j+1, n+1, 1):
print(k, end="" "")


for p in range(1, j, 1):
print(p, end="" "")


# print new line
print()




# Driver's code
print_pattern(3)","def rotate(n,k):
    return n%k

n = int(input(""Enter the number to be rotated: ""))
k = int(input(""Enter the number of steps to be rotated: ""))

print(rotate(n,k))

""""""

def rotate(n,k):
    return n%k

n = int(input(""Enter the number to be rotated: ""))
k = int(input(""Enter the number of steps to be rotated: ""))

print"
1949,How to create filename containing date or time in Python,"# import module
from datetime import datetime

# get current date and time
current_datetime = datetime.now()
print(""Current date & time : "", current_datetime)

# convert datetime obj to string
str_current_datetime = str(current_datetime)

# create a file object along with extension
file_name = str_current_datetime+"".txt""
file = open(file_name, 'w')

print(""File created : "", file.name)
file.close()","import datetime

def solution(files):
    answer = []
    for file in files:
        with open(file, 'r') as f:
            date = f.readline().split()
            time = f.readline().split()
            date = datetime.datetime.strptime(date[0], '%Y-%m-%d %H:%M:%S')
            time = datetime.datetime.strptime(time[0], '%H:%M:"
1950,numpy.swapaxes() function | Python,"# Python program explaining
# numpy.swapaxes() function

# importing numpy as geek
import numpy as geek

arr = geek.array([[2, 4, 6]])

gfg = geek.swapaxes(arr, 0, 1)

print (gfg)","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

a.swapaxes(0, 1)
b.swapaxes(0, 1)

a.swapaxes(1, 2)
b.swapaxes(1, 2)

a.swapaxes(2, 0)
b.sw"
1951,Convert JSON to dictionary in Python,"# Python program to demonstrate
# Conversion of JSON data to
# dictionary


# importing the module
import json

# Opening JSON file
with open('data.json') as json_file:
data = json.load(json_file)

# Print the type of data variable
print(""Type:"", type(data))

# Print the data of dictionary
print(""\nPeople1:"", data['people1'])
print(""\nPeople2:"", data['people2'])","import json

with open('/Users/srinivasan/Desktop/Python/json_to_dict.json') as f:
    data = json.load(f)

print(type(data))

print(data['a'])

print(data['a']['b'])

print(data['a']['b']['c'])

print(data['a']['b']['c']['d'])

print(data['a']['b']["
1952,Write a Python program to Convert Lists of List to Dictionary,"# Python3 code to demonstrate working of
# Convert Lists of List to Dictionary
# Using loop

# initializing list
test_list = [['a', 'b', 1, 2], ['c', 'd', 3, 4], ['e', 'f', 5, 6]]

# printing original list
print(""The original list is : "" + str(test_list))

# Convert Lists of List to Dictionary
# Using loop
res = dict()
for sub in test_list:
res[tuple(sub[:2])] = tuple(sub[2:])

# printing result
print(""The mapped Dictionary : "" + str(res))","l1 = [1, 2, 3, 4, 5]
l2 = [1, 2, 3, 4, 5]
l3 = [1, 2, 3, 4, 5]
l4 = [1, 2, 3, 4, 5]
l5 = [1, 2, 3, 4, 5]
l6 = [1, 2, 3, 4, 5]
l7 = [1, 2, 3, 4, 5]
l8 = [1, 2, 3, 4,"
1953,Write a Python program to Ways to convert array of strings to array of floats,"# Python code to demonstrate converting
# array of strings to array of floats
# using astype


import numpy as np


# initialising array
ini_array = np.array([""1.1"", ""1.5"", ""2.7"", ""8.9""])


# printing initial array
print (""initial array"", str(ini_array))


# converting to array of floats
# using np.astype
res = ini_array.astype(np.float)


# printing final result
print (""final array"", str(res))","def convert_to_float(arr):
    arr = arr.split()
    arr = [float(i) for i in arr]
    return arr

arr = [""1.2"", ""1.3"", ""1.4"", ""1.5"", ""1.6"", ""1.7"", ""1.8"", ""1.9"", ""2.0"", ""2.1"", ""2.2"", ""2.3"", ""2.4"", ""2.5"", ""2.6"
1954,Scrape LinkedIn Using Selenium And Beautiful Soup in Python,"from selenium import webdriver
from bs4 import BeautifulSoup
import time

# Creating a webdriver instance
driver = webdriver.Chrome(""Enter-Location-Of-Your-Web-Driver"")
# This instance will be used to log into LinkedIn

# Opening linkedIn's login page
driver.get(""https://linkedin.com/uas/login"")

# waiting for the page to load
time.sleep(5)

# entering username
username = driver.find_element_by_id(""username"")

# In case of an error, try changing the element
# tag used here.

# Enter Your Email Address
username.send_keys(""User_email"")

# entering password
pword = driver.find_element_by_id(""password"")
# In case of an error, try changing the element
# tag used here.

# Enter Your Password
pword.send_keys(""User_pass"")

# Clicking on the log in button
# Format (syntax) of writing XPath -->
# //tagname[@attribute='value']
driver.find_element_by_xpath(""//button[@type='submit']"").click()
# In case of an error, try changing the
# XPath used here.","import requests
from bs4 import BeautifulSoup

url = ""https://www.linkedin.com/jobs/search/?f_LF=f_AL&f_LS=f_AL&f_LK=f_AL&f_JSEARCH=f_AL&f_JSCENTER=f_AL&f_JSCORE_MIN=0&f_JSCORE_MAX=100&f_JSCORE_SORT=1&f_JSCORE_SORT_DIR"
1955,Write a Python program to Closest Pair to Kth index element in Tuple,"# Python3 code to demonstrate working of
# Closest Pair to Kth index element in Tuple
# Using enumerate() + loop

# initializing list
test_list = [(3, 4), (78, 76), (2, 3), (9, 8), (19, 23)]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing tuple
tup = (17, 23)

# initializing K
K = 1

# Closest Pair to Kth index element in Tuple
# Using enumerate() + loop
min_dif, res = 999999999, None
for idx, val in enumerate(test_list):
dif = abs(tup[K - 1] - val[K - 1])
if dif < min_dif:
min_dif, res = dif, idx

# printing result
print(""The nearest tuple to Kth index element is : "" + str(test_list[res]))","def closest_pair(tup, k):
    """"""
    :type tup: tuple
    :type k: int
    :rtype: tuple
    """"""
    # Your code here
    return tup[k]
    #raise NotImplementedError

# This code is contributed by Neelam Yadav"
1956,Write a Python program to Substring presence in Strings List,"# Python3 code to demonstrate working of
# Substring presence in Strings List
# Using loop

# initializing lists
test_list1 = [""Gfg"", ""is"", ""Best""]
test_list2 = [""I love Gfg"", ""Its Best for Geeks"", ""Gfg means CS""]

# printing original lists
print(""The original list 1 : "" + str(test_list1))
print(""The original list 2 : "" + str(test_list2))

# using loop to iterate
res = []
for ele in test_list1 :
temp = False

# inner loop to check for
# presence of element in any list
for sub in test_list2 :
if ele in sub:
temp = True
break
res.append(temp)

# printing result
print(""The match list : "" + str(res))","def solution(str1, str2):
    # Write your code here
    if len(str1) > len(str2):
        return len(str1) - len(str2)
    else:
        return len(str2) - len(str1)

print(solution(""abc"", ""abc""))
print(solution(""abc"", ""abcd""))
print(solution(""abc"", ""abcdabcdabcd""))
print(solution(""abc"", ""abcabcabcabc""))"
1957,Write a Python Program to Delete Specific Line from File,"# deleting a line
# based on the position


# opening the file in
# reading mode


try:
with open('months.txt', 'r') as fr:
# reading line by line
lines = fr.readlines()

# pointer for position
ptr = 1

# opening in writing mode
with open('months.txt', 'w') as fw:
for line in lines:

# we want to remove 5th line
if ptr != 5:
fw.write(line)
ptr += 1
print(""Deleted"")

except:
print(""Oops! something error"")","#!/usr/bin/python3

import os
import sys
import re
import time
import datetime
import subprocess
import json
import requests
import urllib.request
import urllib.parse
import urllib.error
import urllib.request
import urllib.parse
import urllib.error
import urllib.request
import urllib.error
import urllib.parse
import urllib.error
import urllib.request
import urllib."
1958,Write a Python program to Append Dictionary Keys and Values ( In order ) in dictionary,"# Python3 code to demonstrate working of
# Append Dictionary Keys and Values ( In order ) in dictionary
# Using values() + keys() + list()

# initializing dictionary
test_dict = {""Gfg"" : 1, ""is"" : 3, ""Best"" : 2}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# + operator is used to perform adding keys and values
res = list(test_dict.keys()) + list(test_dict.values())

# printing result
print(""The ordered keys and values : "" + str(res))","def solution(d):
    for i in d:
        print(i, end="" "")
    print()
    for i in d:
        print(d[i], end="" "")
    print()

d = {'a': 1, 'b': 2, 'c': 3}
solution(d)

""""""

def solution(d):
    for i in d:
        print(i, end="" "")
    print()
    for i in"
1959,Write a Python program to Numpy np.polygrid2d() method,"# Python program explaining
# numpy.polygrid2d() method

# importing numpy as np

import numpy as np
from numpy.polynomial.polynomial import polygrid2d

# Input polynomial series coefficients
c = np.array([[1, 3, 5], [2, 4, 6]])

# using np.polygrid2d() method
ans = polygrid2d([7, 9], [8, 10], c)
print(ans)","import numpy as np

x = np.arange(0, 10, 0.1)
y = np.arange(0, 10, 0.1)

# Create a 2D grid
X, Y = np.meshgrid(x, y)

# Create a 2D array of coefficients
coefficients = np.array([[1, 2, 3], [4, 5, 6]])

# Create a 2D array of values
values = np.array([1,"
1960,Apply uppercase to a column in Pandas dataframe in Python,"# Import pandas package
import pandas as pd

# making data frame
data = pd.read_csv(""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv"")

# calling head() method
# storing in new variable
data_top = data.head(10)

# display
data_top","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution 23"
1961,Flattening JSON objects in Python,"# for a array value of a key
unflat_json = {'user' :
{'Rachel':
{'UserID':1717171717,
'Email': 'rachel1999@gmail.com',
'friends': ['John', 'Jeremy', 'Emily']
}
}
}

# Function for flattening
# json
def flatten_json(y):
out = {}

def flatten(x, name =''):

# If the Nested key-value
# pair is of dict type
if type(x) is dict:

for a in x:
flatten(x[a], name + a + '_')

# If the Nested key-value
# pair is of list type
elif type(x) is list:

i = 0

for a in x:
flatten(a, name + str(i) + '_')
i += 1
else:
out[name[:-1]] = x

flatten(y)
return out

# Driver code
print(flatten_json(unflat_json))","import json

# JSON object
# {
#   ""name"": ""John"",
#   ""age"": 30,
#   ""married"": True,
#   ""divorced"": False,
#   ""children"": [
#     {""name"": ""John"", ""age"": 30},
#     {""name"": ""Mary"", ""age"": 20}
#   ]
# }

# JSON object
# {
#   ""name"": ""John"",
#   ""age"": 30,
#   ""married"": True,"
1962,Finding the largest file in a directory using Python,"import os


# folder path input
print(""Enter folder path"")
path = os.path.abspath(input())

# for storing size of each
# file
size = 0

# for storing the size of
# the largest file
max_size = 0

# for storing the path to the
# largest file
max_file =""""

# walking through the entire folder,
# including subdirectories

for folder, subfolders, files in os.walk(path):

# checking the size of each file
for file in files:
size = os.stat(os.path.join( folder, file )).st_size

# updating maximum size
if size>max_size:
max_size = size
max_file = os.path.join( folder, file )

print(""The largest file is: ""+max_file)
print('Size: '+str(max_size)+' bytes')","import os

def largestFile(directory):
    # Open the file for reading
    f = open(directory, 'r')
    # Read the file line by line
    for line in f:
        # If the line is not empty
        if line:
            # Split the line into words
            words = line.split()
            # If the word is the first word
            if words[0] == 'File':
                # Open the file for writing
                w = open(words[1], 'w')"
1963,Write a Python program to Consecutive Kth column Difference in Tuple List,"# Python3 code to demonstrate working of
# Consecutive Kth column Difference in Tuple List
# Using loop

# initializing list
test_list = [(5, 4, 2), (1, 3, 4), (5, 7, 8), (7, 4, 3)]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing K
K = 1

res = []
for idx in range(0, len(test_list) - 1):

# getting difference using abs()
res.append(abs(test_list[idx][K] - test_list[idx + 1][K]))

# printing result
print(""Resultant tuple list : "" + str(res))","def consecutive_kth_column_difference(arr, k):
    # Write your code here
    return arr[k] - arr[k - 1]

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
k = 3
print(consecutive_kth_column_difference(arr, k))

""""""

def consecutive_kth_column_difference(arr, k):
    # Write your code here"
1964,"Calculate the average, variance and standard deviation in Python using NumPy","# Python program to get average of a list

# Importing the NumPy module
import numpy as np

# Taking a list of elements
list = [2, 4, 4, 4, 5, 5, 7, 9]

# Calculating average using average()
print(np.average(list))","import numpy as np

# Calculate the average, variance and standard deviation of a sequence of numbers
# Use np.mean() and np.var()
# Use np.std()

# Create a NumPy array of numbers
numbers = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Calculate the average, variance and standard deviation of the numbers in the array
avg = np.mean(numbers)
print(""The average"
1965,Write a Python Program for KMP Algorithm for Pattern Searching,"# Python program for KMP Algorithm
def KMPSearch(pat, txt):
M = len(pat)
N = len(txt)

# create lps[] that will hold the longest prefix suffix
# values for pattern
lps = [0]*M
j = 0 # index for pat[]

# Preprocess the pattern (calculate lps[] array)
computeLPSArray(pat, M, lps)

i = 0 # index for txt[]
while i < N:
if pat[j] == txt[i]:
i += 1
j += 1

if j == M:
print ""Found pattern at index "" + str(i-j)
j = lps[j-1]

# mismatch after j matches
elif i < N and pat[j] != txt[i]:
# Do not match lps[0..lps[j-1]] characters,
# they will match anyway
if j != 0:
j = lps[j-1]
else:
i += 1

def computeLPSArray(pat, M, lps):
len = 0 # length of the previous longest prefix suffix

lps[0] # lps[0] is always 0
i = 1

# the loop calculates lps[i] for i = 1 to M-1
while i < M:
if pat[i]== pat[len]:
len += 1
lps[i] = len
i += 1
else:
# This is tricky. Consider the example.
# AAACAAAA and i = 7. The idea is similar
# to search step.
if len != 0:
len = lps[len-1]

# Also, note that we do not increment i here
else:
lps[i] = 0
i += 1

txt = ""ABABDABACDABABCABAB""
pat = ""ABABCABAB""
KMPSearch(pat, txt)

# This code is contributed by Bhavya Jain","def kmp(pattern, text):
    #declare a variable to store the index of the pattern
    #declare a variable to store the index of the text
    #declare a variable to store the index of the pattern
    #declare a variable to store the index of the text
    #declare a variable to store the index of the pattern
    #declare a variable to store the index of the text
    #declare a variable to store the index of the pattern
    #declare a variable to store"
1966,Write a Python program to Check if two strings are Rotationally Equivalent,"# Python3 code to demonstrate working of
# Check if two strings are Rotationally Equivalent
# Using loop + string slicing

# initializing strings
test_str1 = 'geeks'
test_str2 = 'eksge'

# printing original strings
print(""The original string 1 is : "" + str(test_str1))
print(""The original string 2 is : "" + str(test_str2))

# Check if two strings are Rotationally Equivalent
# Using loop + string slicing
res = False
for idx in range(len(test_str1)):
if test_str1[idx: ] + test_str1[ :idx] == test_str2:
res = True
break

# printing result
print(""Are two strings Rotationally equal ? : "" + str(res))","def isRotation(s1, s2):
    if len(s1)!= len(s2):
        return False
    for i in range(len(s1)):
        if s1[i]!= s2[i]:
            return False
    return True

print(isRotation(""abcd"", ""dcba""))
print(isRotation(""abcd"", ""abcd""))
print(isRotation(""abcd"", ""abcd""))
print(isRotation"
1967,numpy.percentile() in python,"# Python Program illustrating
# numpy.percentile() method

import numpy as np

# 1D array
arr = [20, 2, 7, 1, 34]
print(""arr : "", arr)
print(""50th percentile of arr : "",
np.percentile(arr, 50))
print(""25th percentile of arr : "",
np.percentile(arr, 25))
print(""75th percentile of arr : "",
np.percentile(arr, 75))","import numpy as np

def percentile(arr, per):
    arr = np.asarray(arr)
    arr = arr.astype(np.float64)
    arr = np.sort(arr)
    arr = arr[::-1]
    arr = arr[:per]
    return arr

print(percentile([1,2,3,4,5,6,7,8,9,10], 10))

""""""

# %%"
1968,Write a Python program to Similar characters Strings comparison,"# Python3 code to demonstrate working of
# Similar characters Strings comparison
# Using split() + sorted()

# initializing strings
test_str1 = 'e:e:k:s:g'
test_str2 = 'g:e:e:k:s'

# printing original strings
print(""The original string 1 is : "" + str(test_str1))
print(""The original string 2 is : "" + str(test_str2))

# initializing delim
delim = ':'

# == operator is used for comparison
res = sorted(test_str1.split(':')) == sorted(test_str2.split(':'))

# printing result
print(""Are strings similar : "" + str(res))","def similar_char(s1, s2):
    if len(s1)!= len(s2):
        return False
    for i in range(len(s1)):
        if s1[i]!= s2[i]:
            return False
    return True

print(similar_char('abc', 'abc'))
print(similar_char('abc', 'abcd'))
print(similar_char('abc', 'ab'))
print(similar_char('abc', 'a'))"
1969,Write a Python program to print even length words in a string,"# Python3 program to print
# even length words in a string

def printWords(s):

# split the string
s = s.split(' ')

# iterate in words of string
for word in s:

# if length is even
if len(word)%2==0:
print(word)


# Driver Code
s = ""i am muskan""
printWords(s)","def even_length_words(s):
    for i in range(len(s)):
        if s[i] % 2 == 0:
            print(s[i])

s = input(""Enter a string: "")
even_length_words(s)

""""""

# Solution:

def even_length_words(s):
    for i in range(len(s)):
        if s[i] % 2 == 0:
            print(s[i])

s"
1970,Write a Python program to Reverse Dictionary Keys Order,"# Python3 code to demonstrate working of
# Reverse Dictionary Keys Order
# Using OrderedDict() + reversed() + items()
from collections import OrderedDict

# initializing dictionary
test_dict = {'gfg' : 4, 'is' : 2, 'best' : 5}

# printing original dictionary
print(""The original dictionary : "" + str(test_dict))

# Reverse Dictionary Keys Order
# Using OrderedDict() + reversed() + items()
res = OrderedDict(reversed(list(test_dict.items())))

# printing result
print(""The reversed order dictionary : "" + str(res))","def reverse_dict(d):
    for i in d:
        print(i, end="" "")
    print()

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}
reverse_dict(d)

""""""

def reverse_dict(d):
    for i in d:
        print(i, end="" "")
    print()

d = {'a': 1, 'b': 2, '"
1971,Write a Python program to Stack using Doubly Linked List,"# A complete working Python program to demonstrate all
# stack operations using a doubly linked list

# Node class
class Node:

# Function to initialise the node object
def __init__(self, data):
self.data = data # Assign data
self.next = None # Initialize next as null
self.prev = None # Initialize prev as null

# Stack class contains a Node object
class Stack:
# Function to initialize head
def __init__(self):
self.head = None

# Function to add an element data in the stack
def push(self, data):

if self.head is None:
self.head = Node(data)
else:
new_node = Node(data)
self.head.prev = new_node
new_node.next = self.head
new_node.prev = None
self.head = new_node


# Function to pop top element and return the element from the stack
def pop(self):

if self.head is None:
return None
elif self.head.next is None:
temp = self.head.data
self.head = None
return temp
else:
temp = self.head.data
self.head = self.head.next
self.head.prev = None
return temp




# Function to return top element in the stack
def top(self):

return self.head.data


# Function to return the size of the stack
def size(self):

temp = self.head
count = 0
while temp is not None:
count = count + 1
temp = temp.next
return count


# Function to check if the stack is empty or not
def isEmpty(self):

if self.head is None:
return True
else:
return False


# Function to print the stack
def printstack(self):

print(""stack elements are:"")
temp = self.head
while temp is not None:
print(temp.data, end =""->"")
temp = temp.next


# Code execution starts here
if __name__=='__main__':

# Start with the empty stack
stack = Stack()

# Insert 4 at the beginning. So stack becomes 4->None
print(""Stack operations using Doubly LinkedList"")
stack.push(4)

# Insert 5 at the beginning. So stack becomes 4->5->None
stack.push(5)

# Insert 6 at the beginning. So stack becomes 4->5->6->None
stack.push(6)

# Insert 7 at the beginning. So stack becomes 4->5->6->7->None
stack.push(7)

# Print the stack
stack.printstack()

# Print the top element
print(""\nTop element is "", stack.top())

# Print the stack size
print(""Size of the stack is "", stack.size())

# pop the top element
stack.pop()

# pop the top element
stack.pop()

# two elements are popped
# Print the stack
stack.printstack()

# Print True if the stack is empty else False
print(""\nstack is empty:"", stack.isEmpty())

#This code is added by Suparna Raut","def solve(self, head):
    if head is None:
        return head
    if head.next is None:
        return head
    slow = head
    fast = head.next
    while fast.next is not None:
        slow = slow.next
        fast = fast.next.next
    slow.next = None
    return slow"
1972,Write a Python Program to print a number diamond of any given size N in Rangoli Style,"def print_diamond(size):

# print the first triangle
# (the upper half)
for i in range (size):

# print from first row till
# middle row
rownum = i + 1
num_alphabet = 2 * rownum - 1
space_in_between_alphabets = num_alphabet - 1

total_spots = (2 * size - 1) * 2 - 1
total_space = total_spots - num_alphabet

space_leading_trailing = total_space - space_in_between_alphabets
lead_space = int(space_leading_trailing / 2)
trail_space = int(space_leading_trailing / 2)

# print the leading spaces
for j in range(lead_space):
print('-', end ='')

# determine the middle character
mid_char = (1 + size - 1) - int(num_alphabet / 2)

# start with the last character
k = 1 + size - 1
is_alphabet_printed = False
mid_char_reached = False

# print the numbers alternated by '-'
for j in range(num_alphabet + space_in_between_alphabets):

if not is_alphabet_printed:
print(str(k), end ='')
is_alphabet_printed = True

if k == mid_char:
mid_char_reached = True

if mid_char_reached == True:
k += 1

else:
k -= 1

else:
print('-', end ='')
is_alphabet_printed = False

# print the trailing spaces
for j in range(trail_space):
print('-', end ='')

# go to the next line
print('')

# print the rows after middle row
# till last row (the second triangle
# which is inverted, i.e., the lower half)
for i in range(size + 1, 2 * size):

rownum = i
num_alphabet = 2 * (2 * size - rownum) - 1
space_in_between_alphabets = num_alphabet - 1

total_spots = (2 * size - 1) * 2 - 1
total_space = total_spots - num_alphabet

space_leading_trailing = total_space - space_in_between_alphabets
lead_space = int(space_leading_trailing / 2)
trail_space = int(space_leading_trailing / 2)

# print the leading spaces
for j in range(lead_space):
print('-', end ='')

mid_char = (1 + size - 1) - int(num_alphabet / 2)

# start with the last char
k = 1 + size - 1
is_alphabet_printed = False
mid_char_reached = False

# print the numbers alternated by '-'
for j in range(num_alphabet + space_in_between_alphabets):

if not is_alphabet_printed:
print(str(k), end ='')
is_alphabet_printed = True

if k == mid_char:
mid_char_reached = True

if mid_char_reached == True:
k += 1

else:
k -= 1

else:
print('-', end ='')
is_alphabet_printed = False

# print the trailing spaces
for j in range(trail_space):
print('-', end ='')

# go to the next line
print('')

# Driver Code
if __name__ == '__main__':

n = 5
print_diamond(n)","def print_diamond(n):
    for i in range(n):
        for j in range(n-i):
            print('*', end='')
        for j in range(i+1):
            print('*', end='')
        print()

n = int(input(""Enter the size of the diamond: ""))
print_diamond(n)

""""""

# Solution:

def print_diamond(n):
    for"
1973,How To Automate Google Chrome Using Foxtrot and Python,"# Import the required modules
from selenium import webdriver
import time

# Main Function
if __name__ == '__main__':

# Provide the email and password
email = ''
password = ''

options = webdriver.ChromeOptions()
options.add_argument(""--start-maximized"")

# Provide the path of chromedriver
# present on your system.
driver = webdriver.Chrome(
executable_path=""C:/chromedriver/chromedriver.exe"",
chrome_options=options)
driver.set_window_size(1920, 1080)

# Send a get request to the url
driver.get('https://auth.geeksforgeeks.org/')
time.sleep(5)

# Finds the input box by name
# in DOM tree to send both
# the provided email and password in it.
driver.find_element_by_name('user').send_keys(email)
driver.find_element_by_name('pass').send_keys(password)

# Find the signin button and click on it.
driver.find_element_by_css_selector(
'button.btn.btn-green.signin-button').click()
time.sleep(5)

# Returns the list of elements
# having the following css selector.
container = driver.find_elements_by_css_selector(
'div.mdl-cell.mdl-cell--9-col.mdl-cell--12-col-phone.textBold')

# Extracts the text from name,
# institution, email_id css selector.
name = container[0].text
try:
institution = container[1].find_element_by_css_selector('a').text
except:
institution = container[1].text
email_id = container[2].text

# Output
print({""Name"": name, ""Institution"": institution,
""Email ID"": email})

# Quits the driver
driver.quit()","import webbrowser

webbrowser.open('https://www.google.com/')

""""""

import webbrowser

webbrowser.open('https://www.google.com/')"
1974,Program to Print K using Alphabets in Python,"// C++ Program to design the
// above pattern of K using alphabets
#include<bits/stdc++.h>
using namespace std;


// Function to print
// the above Pattern
void display(int n)
{
int v = n;


// This loop is used
// for rows and prints
// the alphabets in
// decreasing order
while (v >= 0)
{
int c = 65;


// This loop is used
// for columns
for(int j = 0; j < v + 1; j++)
{
// chr() function converts the
// number to alphabet
cout << char(c + j) << "" "";
}


v--;
cout << endl;
}


// This loop is again used
// to rows and prints the
// half remaining pattern in
// increasing order
for(int i = 0; i < n + 1; i++)
{
int c = 65;


for(int j = 0; j < i + 1; j++)
{
cout << char(c + j) << "" "";
}
cout << endl;
}
}


// Driver code
int main()
{
int n = 5;
display(n);
return 0;
}


// This code is contributed by divyeshrabadiya07","def print_k(n,k):
    for i in range(n):
        for j in range(k):
            print(chr(i+97),end="" "")
        print()

n = int(input(""Enter the number of elements in the array: ""))
k = int(input(""Enter the number of elements to print: ""))
print_k(n,k)

""""""

# Solution

def print_k(n,k):
    for i in range(n):"
1975,How to drop one or multiple columns in Pandas Dataframe in Python,"# Import pandas package
import pandas as pd

# create a dictionary with five fields each
data = {
'A':['A1', 'A2', 'A3', 'A4', 'A5'],
'B':['B1', 'B2', 'B3', 'B4', 'B5'],
'C':['C1', 'C2', 'C3', 'C4', 'C5'],
'D':['D1', 'D2', 'D3', 'D4', 'D5'],
'E':['E1', 'E2', 'E3', 'E4', 'E5'] }

# Convert the dictionary into DataFrame
df = pd.DataFrame(data)

df","import pandas as pd

df = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""B"": [10, 20, 30, 40, 50]})

df.drop(""B"", axis=1)

df.drop(""A"", axis=0)

df.drop(""B"", axis=1, inplace=True)

df.drop(""A"", axis=0, inplace=True)

df.drop(""B"", axis=1"
1976,Write a Python Program to Replace Text in a File,"# Python program to replace text in a file
s = input(""Enter text to replace the existing contents:"")
f = open(""file.txt"", ""r+"")


# file.txt is an example here,
# it should be replaced with the file name
# r+ mode opens the file in read and write mode
f.truncate(0)
f.write(s)
f.close()
print(""Text successfully replaced"")","import os

def replace_text(file_name, text, replacement_text):
    with open(file_name, 'r') as file:
        content = file.read()
        content = content.replace(replacement_text, text)
        with open(file_name, 'w') as file:
            file.write(content)

replace_text('sample.txt', 'Hello World', 'Hello World')

""""""

import os

def replace_text(file_name, text,"
1977,Remove multiple elements from a list in Python,"# Python program to remove multiple
# elements from a list


# creating a list
list1 = [11, 5, 17, 18, 23, 50]


# Iterate each element in list
# and add them in variable total
for ele in list1:
if ele % 2 == 0:
list1.remove(ele)


# printing modified list
print(""New list after removing all even numbers: "", list1)","def remove_multiple_elements(lst, element):
    lst.remove(element)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
remove_multiple_elements(lst, 5)
print(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
remove_multiple_elements(lst, 5)
print(lst)

lst = [1,"
1978,How to get column names in Pandas dataframe in Python,"# Import pandas package
import pandas as pd

# making data frame
data = pd.read_csv(""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv"")

# calling head() method
# storing in new variable
data_top = data.head()

# display
data_top","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/iris.csv')

df.columns

df.columns = ['sepal_length','sepal_width', 'petal_length', 'petal_width']

df.head()

df.columns

df.columns = ['sepal_length','sepal_width', 'petal_length', 'pet"
1979,Nested Lambda Function in Python,"# Python program to demonstrate
# nested lambda functions


f = lambda a = 2, b = 3:lambda c: a+b+c

o = f()
print(o(4))","def nested_lambda(x):
    def inner_lambda(y):
        return x * y
    return inner_lambda

# Solution:

# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

# Solution 11:

# Solution 12:

# Solution 13:

# Solution 14:

# Solution"
1980,Write a Python program to Sort Dictionary key and values List,"# Python3 code to demonstrate working of
# Sort Dictionary key and values List
# Using loop + dictionary comprehension

# initializing dictionary
test_dict = {'gfg': [7, 6, 3],
'is': [2, 10, 3],
'best': [19, 4]}

# printing original dictionary
print(""The original dictionary is : "" + str(test_dict))

# Sort Dictionary key and values List
# Using loop + dictionary comprehension
res = dict()
for key in sorted(test_dict):
res[key] = sorted(test_dict[key])

# printing result
print(""The sorted dictionary : "" + str(res))","def sort_dict(dict):
    for i in dict:
        dict[i].sort()
    return dict

# Driver Code
dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}
print(sort_dict(dict))

""""""

""""""

def sort_dict(dict):
    for i in dict:
        dict[i].sort()
    return dict

# Driver Code
dict = {"
1981,Write a Python program to Remove punctuation from string,"# Python3 code to demonstrate working of
# Removing punctuations in string
# Using loop + punctuation string


# initializing string
test_str = ""Gfg, is best : for ! Geeks ;""


# printing original string
print(""The original string is : "" + test_str)


# initializing punctuations string
punc = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''


# Removing punctuations in string
# Using loop + punctuation string
for ele in test_str:
if ele in punc:
test_str = test_str.replace(ele, """")


# printing result
print(""The string after punctuation filter : "" + test_str)","def remove_punctuation(string):
    punctuation = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
    for char in string:
        if char not in punctuation:
            string = string.replace(char, '')
    return string

print(remove_punctuation('This is a string with at least one non-punctuation character'))

'''

'''

def remove_punctuation(string):"
1982,Reset Index in Pandas Dataframe in Python,"# Import pandas package
import pandas as pd

# Define a dictionary containing employee data
data = {'Name':['Jai', 'Princi', 'Gaurav', 'Anuj', 'Geeku'],
'Age':[27, 24, 22, 32, 15],
'Address':['Delhi', 'Kanpur', 'Allahabad', 'Kannauj', 'Noida'],
'Qualification':['Msc', 'MA', 'MCA', 'Phd', '10th'] }

# Convert the dictionary into DataFrame
df = pd.DataFrame(data)

df","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Score': [85, 90, 95, 100, 95, 90]})

df.reset_index(inplace=True)

df.reset_index(inplace=True, drop=True)

df.reset_index(inplace=True, drop=True)

df.reset_index(inplace=True"
1983,Write a Python program to numpy.nanmean() function,"# Python code to demonstrate the
# use of numpy.nanmean
import numpy as np

# create 2d array with nan value.
arr = np.array([[20, 15, 37], [47, 13, np.nan]])

print(""Shape of array is"", arr.shape)

print(""Mean of array without using nanmean function:"",
np.mean(arr))

print(""Using nanmean function:"", np.nanmean(arr))","import numpy as np

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
y = np.array([2, 4, 6, 8, 10, 12, 14, 16, 18, 20])

print(np.nanmean(x))
print(np.nanmean(y))

# Output:
# 3.0
# 3.0
# 3.0

# %%
# Solution:

import numpy as np"
1984,Write a Python program to Row-wise element Addition in Tuple Matrix,"# Python3 code to demonstrate working of
# Row-wise element Addition in Tuple Matrix
# Using enumerate() + list comprehension

# initializing list
test_list = [[('Gfg', 3), ('is', 3)], [('best', 1)], [('for', 5), ('geeks', 1)]]

# printing original list
print(""The original list is : "" + str(test_list))

# initializing Custom eles
cus_eles = [6, 7, 8]

# Row-wise element Addition in Tuple Matrix
# Using enumerate() + list comprehension
res = [[sub + (cus_eles[idx], ) for sub in val] for idx, val in enumerate(test_list)]

# printing result
print(""The matrix after row elements addition : "" + str(res))","def add_tuple(tup1, tup2):
    return tuple(tup1[i] + tup2[i] for i in range(len(tup1)))

tup1 = (1, 2, 3, 4, 5)
tup2 = (6, 7, 8, 9, 10)

print(add_tuple(tup1, tup2))

""""""

def add_tuple(tup1, tup2):"
1985,Write a Python program to Assigning Subsequent Rows to Matrix first row elements,"# Python3 code to demonstrate working of
# Assigning Subsequent Rows to Matrix first row elements
# Using dictionary comprehension

# initializing list
test_list = [[5, 8, 9], [2, 0, 9], [5, 4, 2], [2, 3, 9]]

# printing original list
print(""The original list : "" + str(test_list))

# pairing each 1st col with next rows in Matrix
res = {test_list[0][ele] : test_list[ele + 1] for ele in range(len(test_list) - 1)}

# printing result
print(""The Assigned Matrix : "" + str(res))","def solve(matrix):
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            if matrix[i][j] == 0:
                matrix[i][j] = 1
            else:
                matrix[i][j] = 0
    return matrix

matrix = [[1, 2, 3, 4, 5],
          [6, 7, 8, 9, 10],
          [11, 12,"
1986,Write a Python program to Split by repeating substring,"# Python3 code to demonstrate working of
# Split by repeating substring
# Using * operator + len()

# initializing string
test_str = ""gfggfggfggfggfggfggfggfg""

# printing original string
print(""The original string is : "" + test_str)

# initializing target
K = 'gfg'

# Split by repeating substring
# Using * operator + len()
temp = len(test_str) // len(str(K))
res = [K] * temp

# printing result
print(""The split string is : "" + str(res))","def split_by_repeating_substring(string, substring):
    return string.split(substring)

""""""

def split_by_repeating_substring(string, substring):
    return string.split(substring)

print(split_by_repeating_substring(""abcdefg"", ""abc""))
print(split_by_repeating_substring(""abcdefg"", ""abc""))
print(split_by_repeating_substring(""abcdefg"", ""abc""))"
1987,Write a Python program to Ways to remove multiple empty spaces from string List,"# Python3 code to demonstrate working of
# Remove multiple empty spaces from string List
# Using loop + strip()

# initializing list
test_list = ['gfg', ' ', ' ', 'is', ' ', 'best']

# printing original list
print(""The original list is : "" + str(test_list))

# Remove multiple empty spaces from string List
# Using loop + strip()
res = []
for ele in test_list:
if ele.strip():
res.append(ele)

# printing result
print(""List after filtering non-empty strings : "" + str(res))","def remove_multiple_empty_spaces(list):
    for i in range(len(list)):
        if list[i] == "" "":
            list.remove(list[i])
    return list

print(remove_multiple_empty_spaces([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def remove_multiple_empty_spaces(list):
    for i in range(len(list)):"
1988,Ways to convert string to dictionary in Python,"# Python implementation of converting
# a string into a dictionary

# initialising string
str = "" Jan = January; Feb = February; Mar = March""

# At first the string will be splitted
# at the occurence of ';' to divide items
# for the dictionaryand then again splitting
# will be done at occurence of '=' which
# generates key:value pair for each item
dictionary = dict(subString.split(""="") for subString in str.split("";""))

# printing the generated dictionary
print(dictionary)","def solution(s):
    d = {}
    for i in s:
        if i not in d:
            d[i] = 1
        else:
            d[i] += 1
    return d

print(solution(""abcdefg""))
print(solution(""abcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdef"
1989,Write a Python program to Sum of number digits in List,"# Python3 code to demonstrate
# Sum of number digits in List
# using loop + str()


# Initializing list
test_list = [12, 67, 98, 34]


# printing original list
print(""The original list is : "" + str(test_list))


# Sum of number digits in List
# using loop + str()
res = []
for ele in test_list:
sum = 0
for digit in str(ele):
sum += int(digit)
res.append(sum)

# printing result
print (""List Integer Summation : "" + str(res))","def sum_digits(n):
    return sum(int(i) for i in str(n))

n = int(input(""Enter a number: ""))
print(sum_digits(n))

""""""

# Solution 1

def sum_digits(n):
    return sum(int(i) for i in str(n))

n = int(input(""Enter a number: ""))
print(sum_digits(n))

# Solution 2

def sum_dig"
1990,Get the index of maximum value in DataFrame column in Python,"# importing pandas module
import pandas as pd

# making data frame
df = pd.read_csv(""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv"")

df.head(10)","def max_value(df):
    max_value = df.max()
    return max_value

# Call max_value function
max_value = max_value(df)
print(max_value)

# Call max_value function
max_value = max_value(df)
print(max_value)

# Call max_value function
max_value = max_value(df)
print(max_value)

# Call max_value function
max_value = max_"
1991,Getting the time since OS startup using Python,"# for using os.popen()
import os


# sending the uptime command as an argument to popen()
# and saving the returned result (after truncating the trailing \n)
t = os.popen('uptime -p').read()[:-1]


print(t)","def time_since_startup(func):
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        print(f""Finished {func.__name__} in {end - start:.2f} seconds"")
        return result
    return wrapper

@time_since_startup
def display_hi():
    print(""Hello from the function"")

display_hi()

""""""

#"
1992,Write a Python program to Get Function Signature,"from inspect import signature


# declare a function gfg with some
# parameter
def gfg(x:str, y:int):
pass

# with the help of signature function
# store signature of the function in
# variable t
t = signature(gfg)

# print the signature of the function
print(t)

# print the annonation of the parameter
# of the function
print(t.parameters['x'])

# print the annonation of the parameter
# of the function
print(t.parameters['y'].annotation)","def get_signature(func):
    return inspect.signature(func).parameters

def get_signature(func):
    return inspect.signature(func).return_annotation

def get_signature(func):
    return inspect.signature(func).return_annotation

def get_signature(func):
    return inspect.signature(func).return_annotation

def get_signature(func):
    return inspect.signature(func).return_annotation

def get"
1993,numpy.diff() in Python,"# Python program explaining
# numpy.diff() method



# importing numpy
import numpy as geek


# input array
arr = geek.array([1, 3, 4, 7, 9])

print(""Input array : "", arr)
print(""First order difference : "", geek.diff(arr))
print(""Second order difference : "", geek.diff(arr, n = 2))
print(""Third order difference : "", geek.diff(arr, n = 3))","import numpy as np

x = np.array([1, 2, 3, 4, 5])
y = np.array([6, 7, 8, 9, 10])

print(np.diff(x))

# Output:
# [1, 2, 3, 4, 5]

print(np.diff(y))
# [6, 7, 8, 9, 10]

# Output:
# [1, 2, 3, 4, 5]

# Output:
# [1, 2,"
1994,Compute the Kronecker product of two multidimension NumPy arrays in Python,"# Importing required modules
import numpy


# Creating arrays
array1 = numpy.array([[1, 2], [3, 4]])
print('Array1:\n', array1)


array2 = numpy.array([[5, 6], [7, 8]])
print('\nArray2:\n', array2)


# Computing the Kronecker Product
kroneckerProduct = numpy.kron(array1, array2)
print('\nArray1  Array2:')
print(kroneckerProduct)",">>> import numpy as np
>>> import numpy.linalg as la
>>>
>>> A = np.array([[1, 2, 3], [4, 5, 6]])
>>> B = np.array([[7, 8, 9], [10, 11, 12]])
>>> C = np.array([[13, 14, 15], [16, 17, 18]])
>>>
>>> print(la.KroneckerProduct(A, B))
[[1 2 3"
1995,Menu driven Python program to execute Linux commands,"# importing the module
import os

# sets the text colour to green
os.system(""tput setaf 2"")

print(""Launching Terminal User Interface"")

# sets the text color to red
os.system(""tput setaf 1"")

print(""\t\tWELCOME TO Terminal User Interface\t\t\t"")

# sets the text color to white
os.system(""tput setaf 7"")

print(""\t-------------------------------------------------"")
print(""Entering local device"")
while True:
print(""""""
1.Print date
2.Print cal
3.Configure web
4.Configure docker
5.Add user
6.Delete user
7.Create a file
8.Create a folder
9.Exit"""""")

ch=int(input(""Enter your choice: ""))

if(ch == 1):
os.system(""date"")

elif ch == 2:
os.system(""cal"")

elif ch == 3:
os.system(""yum install httpd -y"")
os.system(""systemctl start httpd"")
os.system(""systemctl status httpd"")

elif ch == 4:
os.system(""yum install docker-ce -y"")
os.system(""systemctl start docker"")
os.system(""systemctl status docker"")


elif ch == 5:
new_user=input(""Enter the name of new user: "")
os.system(""sudo useradd {}"".format(new_user))
os.system(""id -u {}"".format(new_user) )

elif ch == 6:
del_user=input(""Enter the name of the user to delete: "")
os.system(""sudo userdel {}"".format(del_user))

elif ch == 7:
filename=input(""Enter the filename: "")
f=os.system(""sudo touch {}"".format(filename))
if f!=0:
print(""Some error occurred"")
else:
print(""File created successfully"")

elif ch == 8:
foldername=input(""Enter the foldername: "")
f=os.system(""sudo mkdir {}"".format(foldername))
if f!=0:
print(""Some error occurred"")
else:
print(""Folder created successfully"")

elif ch == 9:
print(""Exiting application"")
exit()
else:
print(""Invalid entry"")

input(""Press enter to continue"")
os.system(""clear"")","1. Create a program that reads the command line arguments from the user.
2. Execute the command line arguments.
3. Display the output.

""""""

import sys
import os
import subprocess

def main():
    """"""
    Main function to execute the program.
    """"""
    # Get the command line arguments from the user.
    command_line_arguments = sys.argv[1:]
    # Execute the command line arguments.
    subprocess.call(command_line_arguments)"
1996,Calculate average values of two given NumPy arrays in Python,"# import library
import numpy as np

# create a numpy 1d-arrays
arr1 = np.array([3, 4])
arr2 = np.array([1, 0])

# find average of NumPy arrays
avg = (arr1 + arr2) / 2

print(""Average of NumPy arrays:\n"",
avg)","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([6, 7, 8, 9, 10])

# calculate average
avg = np.average(a, b)
print(avg)

# calculate sum
sum = np.sum(a)
print(sum)

# calculate product
product = np.prod(a)
print(product)

# calculate standard deviation
std = np.std("
1997,Write a Python program to Extract elements with Frequency greater than K,"# Python3 code to demonstrate working of
# Extract elements with Frequency greater than K
# Using count() + loop

# initializing list
test_list = [4, 6, 4, 3, 3, 4, 3, 7, 8, 8]

# printing string
print(""The original list : "" + str(test_list))

# initializing K
K = 2

res = []
for i in test_list:

# using count() to get count of elements
freq = test_list.count(i)

# checking if not already entered in results
if freq > K and i not in res:
res.append(i)

# printing results
print(""The required elements : "" + str(res))","import collections

def solution(arr, k):
    freq = collections.Counter(arr)
    freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)
    return freq[:k]

# Time complexity: O(n)
# Space Complexity: O(n)

# Runtime: 32 ms (96.21%)
# Memory Usage: 14.2 MB (95.74%)

# Runtime: 32 ms (95.74%)
#"
1998,Write a Python program to Maximum Consecutive Substring Occurrence,"# Python3 code to demonstrate working of
# Maximum Consecutive Substring Occurrence
# Using max() + re.findall()
import re

# initializing string
test_str = 'geeksgeeks are geeks for all geeksgeeksgeeks'

# printing original string
print(""The original string is : "" + str(test_str))

# initializing subs
sub_str = 'geeks'

# Maximum Consecutive Substring Occurrence
# Using max() + re.findall()
res = max(re.findall('((?:' + re.escape(sub_str) + ')*)', test_str), key = len)

# printing result
print(""The maximum run of Substring : "" + res)","def max_consecutive_substring(string):
    max_consecutive_substring = 0
    for i in range(len(string)):
        if string[i] == string[i+1]:
            max_consecutive_substring += 1
        else:
            max_consecutive_substring = max(max_consecutive_substring, i+2)
    return max_consecutive_substring

print(max_consecutive_substring"
1999,Write a Python program to Convert List to List of dictionaries,"# Python3 code to demonstrate working of
# Convert List to List of dictionaries
# Using dictionary comprehension + loop

# initializing lists
test_list = [""Gfg"", 3, ""is"", 8, ""Best"", 10, ""for"", 18, ""Geeks"", 33]

# printing original list
print(""The original list : "" + str(test_list))

# initializing key list
key_list = [""name"", ""number""]

# loop to iterate through elements
# using dictionary comprehension
# for dictionary construction
n = len(test_list)
res = []
for idx in range(0, n, 2):
res.append({key_list[0]: test_list[idx], key_list[1] : test_list[idx + 1]})

# printing result
print(""The constructed dictionary list : "" + str(res))","def list_to_dict(l):
    d = {}
    for i in l:
        d[i] = l.count(i)
    return d

l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(list_to_dict(l))

""""""

# Solution 1

def list_to_dict(l):
    d = {}
    for i in l:
        d[i] = l.count("
