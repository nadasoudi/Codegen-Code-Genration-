Unnamed: 0,Problem,Python Code,Generated_Code
1001,Write a Pandas program to rename names of columns and specific labels of the Main Index of the MultiIndex dataframe. ,"import pandas as pd 
import numpy as np
sales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'],
          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]
sales_tuples = list(zip(*sales_arrays))
sales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])
print(sales_tuples)
print(""\nConstruct a Dataframe using the said MultiIndex levels: "")
df = pd.DataFrame(np.random.randn(8, 5), index=sales_index)
print(df)
print(""\nRename the columns name of the said dataframe"")
df1 = df.rename(columns={0: ""col1"", 1: ""col2"", 2:""col3"", 3:""col4"", 4:""col5""})
print(df1)
print(""\nRename specific labels of the main index of the DataFrame"")
df2 = df1.rename(index={""sale2"": ""S2"", ""city2"": ""C2""})
print(df2)
","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/iris.csv?raw=true')

df.columns = ['sepal_length','sepal_width', 'petal_length', 'petal_width']

df.head()

df.columns = ['sepal_length','sepal_width', 'petal"
1002,Write a Pandas program to create a line plot of the historical stock prices of Alphabet Inc. between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-09-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1.set_index('Date')
plt.figure(figsize=(5,5))
plt.suptitle('Stock prices of Alphabet Inc.,\n01-04-2020 to 30-09-2020', \
                 fontsize=18, color='black')
plt.xlabel(""Date"",fontsize=16, color='black')
plt.ylabel(""$ price"", fontsize=16, color='black')
 
df2['Close'].plot(color='green');
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc Historical Prices.csv')

df['Date'] = pd.to_datetime(df['Date'])

df.set_index('Date', inplace=True)

plt.plot(df.index, df['Open'])
plt.show()

""""""

import pandas as p"
1003,Write a NumPy program to join a sequence of arrays along a new axis. ,"import numpy as np    
x = np.array([1, 2, 3])
y = np.array([2, 3, 4])
print(""Original arrays:"")
print(x)
print(y)
print(""Sequence of arrays along a new axis:"")
print(np.vstack((x, y)))
x = np.array([[1], [2], [3]])
y = np.array([[2], [3], [4]])
print(""\nOriginal arrays:"")
print(x)
print()
print(y)
print(""Sequence of arrays along a new axis:"")
print(np.vstack((x, y)))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

c = np.concatenate((a, b), axis=1)
print(c)

# Output:
# [[1 2 3 4 5 6 7 8 9]
#  [4 5 6 7 8 9 10 11 12]]

# %%"
1004,Write a Python program to rotate a given list by specified number of items to the right or left direction. ,"nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(""original List:"")
print(nums1)
print(""\nRotate the said list in left direction by 4:"")
result = nums1[3:] + nums1[:4]
print(result)
print(""\nRotate the said list in left direction by 2:"")
result = nums1[2:] + nums1[:2]
print(result)
print(""\nRotate the said list in Right direction by 4:"")
result = nums1[-3:] + nums1[:-4]
print(result)
print(""\nRotate the said list in Right direction by 2:"")
result = nums1[-2:] + nums1[:-2]
print(result)
","def rotate(lst, n):
    lst.reverse()
    for i in range(n):
        lst.append(lst.pop())
    lst.reverse()
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
print(rotate(lst, n))

""""""

# Solution 1

def rotate(lst, n"
1005,Write a Python program to get the last part of a string before a specified character. ,"str1 = 'https://www.w3resource.com/python-exercises/string'
print(str1.rsplit('/', 1)[0])
print(str1.rsplit('-', 1)[0])
","s = ""hello world""
print(s[-3:])

""""""

s = ""hello world""
print(s[-3:])"
1006,Write a NumPy program to create a 5x5 array with random values and find the minimum and maximum values. ,"import numpy as np
x = np.random.random((5,5))
print(""Original Array:"")
print(x) 
xmin, xmax = x.min(), x.max()
print(""Minimum and Maximum Values:"")
print(xmin, xmax)
","import numpy as np

# Create an array of random numbers
np.random.seed(0)
a = np.random.randint(10, size=(5, 5))
print(a)

# Find the minimum and maximum values
print(np.min(a))
print(np.max(a))

# Create a new array with random numbers
np.random.seed(0)
b = np.random.randint(10,"
1007,Write a NumPy program to find the 4th element of a specified array. ,"import numpy as np
x = np.array([[2, 4, 6], [6, 8, 10]], np.int32)
print(x)
e1 = x.flat[3]
print(""Forth e1ement of the array:"")
print(e1)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr[4])

# Output: 10

# Hint: You can use the built-in function np.where to find the index of the 4th element.

# Hint: You can use the built-in function np.where to find the index of the 4th element.

# Hint: You can use the"
1008,Write a Python program to find the list with maximum and minimum length. ,"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )
    max_list = max(input_list, key = len)
    return(max_length, max_list)
def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )
    min_list = min(input_list, key = len)
    return(min_length, min_list)
list1 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]
print(""Original list:"")
print(list1)
print(""\nList with maximum length of lists:"")
print(max_length_list(list1))
print(""\nList with minimum length of lists:"")
print(min_length_list(list1))
list1 =  [[0], [1, 3], [5, 7], [9, 11], [3, 5, 7]]
print(""Original list:"")
print(list1)
print(""\nList with maximum length of lists:"")
print(max_length_list(list1))
print(""\nList with minimum length of lists:"")
print(min_length_list(list1))
list1 =  [[12], [1, 3], [1, 34, 5, 7], [9, 11], [3, 5, 7]]
print(""Original list:"")
print(list1)
print(""\nList with maximum length of lists:"")
print(max_length_list(list1))
print(""\nList with minimum length of lists:"")
print(min_length_list(list1))
","def solution(arr):
    max_len = 0
    min_len = 0
    for i in range(len(arr)):
        if arr[i] > max_len:
            max_len = arr[i]
        if arr[i] < min_len:
            min_len = arr[i]
    return max_len, min_len

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print("
1009,Write a Python program to extract and display all the header tags from en.wikipedia.org/wiki/Main_Page. ,"from urllib.request import urlopen
from bs4 import BeautifulSoup
import re

html = urlopen('https://en.wikipedia.org/wiki/Peter_Jeffrey_(RAAF_officer)')
bs = BeautifulSoup(html, 'html.parser')
images = bs.find_all('img', {'src':re.compile('.jpg')})
for image in images: 
    print(image['src']+'\n')
","import urllib.request

url = ""https://en.wikipedia.org/wiki/Main_Page""

with urllib.request.urlopen(url) as response:
    html = response.read()
    print(html)

# Extracting the header tags

import re

url = ""https://en.wikipedia.org/wiki/Main_Page""

with urllib.request.urlopen(url) as"
1010,Write a Python program to select an item randomly from a list. ,"import random
color_list = ['Red', 'Blue', 'Green', 'White', 'Black']
print(random.choice(color_list))
","import random

def random_select(lst):
    return lst[random.randint(0, len(lst) - 1)]

print(random_select([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
1011,Write a NumPy program to build an array of all combinations of three NumPy arrays. ,"import numpy as np
x = [1, 2, 3]
y = [4, 5]
z = [6, 7]
print(""Original arrays:"")
print(""Array-1"")
print(x)
print(""Array-2"")
print(y)
print(""Array-3"")
print(z)
new_array = np.array(np.meshgrid(x, y, z)).T.reshape(-1,3)
print(""Combine array:"")
print(new_array)
","import numpy as np

a = np.array([[1,2,3],[4,5,6],[7,8,9]])
b = np.array([[1,2,3],[4,5,6],[7,8,9]])
c = np.array([[1,2,3],[4,5,6],[7,8,9]])

print(np.all(a==b))
print(np.all(a==c"
1012,Write a Python program to count the number of groups of non-zero numbers separated by zeros of a given list of numbers. ,"def test(lst):
    previous_digit = 0
    ctr = 0
    for digit in lst:
        if previous_digit==0 and digit!=0:
            ctr+=1
        previous_digit = digit
    return ctr

nums = [3,4,6,2,0,0,0,0,0,0,6,7,6,9,10,0,0,0,0,0,5,9,9,7,4,4,0,0,0,0,0,0,5,3,2,9,7,1]

print(""\nOriginal list:"")
print(nums)
print(""\nNumber of groups of non-zero numbers separated by zeros of the said list:"")
print(test(nums)) 
","def count_zeros(nums):
    count = 0
    for i in range(len(nums)):
        if nums[i] == 0:
            count += 1
    return count

print(count_zeros([0, 1, 0, 2, 1, 0, 1, 3, 0, 5, 0, 0, 0, 0, 0]))

""""""

def count_zeros(nums):"
1013,Write a Python program to create a copy of its own source code. ,"def file_copy(src, dest):
    with open(src) as f, open(dest, 'w') as d:
        d.write(f.read())
        file_copy(""untitled0.py"", ""z.py"")
        with open('z.py', 'r') as filehandle:
            for line in filehandle:
                print(line, end = '')
","def main():
    print(""Enter the source code of the program to be copied:"")
    source = input()
    print(""Enter the destination code of the copied source code:"")
    destination = input()
    print(""Enter the name of the file to be copied:"")
    name = input()
    print(""Enter the name of the file to be copied:"")
    name2 = input()
    print(""Enter the name of the file to be copied:"")
    name3 = input()"
1014,"Write a Python code to send a request to a web page, and print the response text and content. Also get the raw socket response from the server. ","import requests
res = requests.get('https://www.google.com/')
print(""Response text of https://google.com/:"")
print(res.text)
print(""\n=============================================================================="")
print(""\nContent of the said url:"")
print(res.content)
print(""\n=============================================================================="")
print(""\nRaw data of the said url:"")
r = requests.get('https://api.github.com/events', stream = True)
print(r.raw)
print(r.raw.read(15))
","import socket

def send_request(url):
    # create a socket object
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # connect to the server
    s.connect((url, 80))
    # send the request
    s.send(url.encode())
    # receive the response
    response = s.recv(1024)
    # close"
1015,Write a Pandas program to split the following dataframe into groups based on customer id and create a list of order date for each group. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
result = df.groupby('customer_id')['ord_date'].apply(list)
print(""\nGroup on 'customer_id' and display the list of order dates in group wise:"")
print(result)
","df = pd.read_csv('../data/customer_orders.csv')

df.groupby(['customer_id', 'order_date']).agg({'order_id': ['count']}).sort_values(by='order_date', ascending=True)

df.groupby(['customer_id', 'order_date']).agg({'order_id': ['count']}).sort_values("
1016,"Write a Pandas program to create a Pivot table and find number of adult male, adult female and children. ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table('sex',  'who', aggfunc = 'count')
print(result)
","# Create a Pandas dataframe
df = pd.DataFrame({'Male': [1, 2, 3, 4, 5],
                   'Female': [2, 4, 6, 8, 10],
                   'Child': [3, 5, 7, 9, 11]})

# Create a Pivot table
pivot = df.pivot_table(index='Male', columns='Child', values='Female')

# Print the result
print(p"
1017,Write a Python program to clone or copy a list. ,"original_list = [10, 22, 44, 23, 4]
new_list = list(original_list)
print(original_list)
print(new_list)
","def clone(lst):
    return [i for i in lst]

def copy(lst):
    return [i for i in lst]

lst = [1, 2, 3, 4, 5]

print(clone(lst))
print(copy(lst))

""""""

# Solution 2

def clone(lst):
    return [i for i in lst]

def copy(lst):
    return [i for i in lst]"
1018,Write a NumPy program to calculate the absolute value element-wise. ,"import numpy as np
x = np.array([-10.2, 122.2, .20])
print(""Original array:"")
print(x)
print(""Element-wise absolute value:"")
print(np.absolute(x))
",">>> import numpy as np
>>> x = np.array([-1, 0, 1])
>>> np.abs(x)
array([ 1.,  1.,  1.])

""""""

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution"
1019,"Write a NumPy program to check whether each element of a given array is composed of digits only, lower case letters only and upper case letters only. ","import numpy as np
x = np.array(['Python', 'PHP', 'JS', 'Examples', 'html5', '5'], dtype=np.str)
print(""\nOriginal Array:"")
print(x)
r1 = np.char.isdigit(x)
r2 = np.char.islower(x)
r3 = np.char.isupper(x)
print(""Digits only ="", r1)
print(""Lower cases only ="", r2)
print(""Upper cases only ="", r3)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.dtype)

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], dtype=np.int64)

print(arr.dtype)

arr = np.array([1,"
1020,"Write a Pandas program to extract year, month, day, hour, minute, second and weekday from unidentified flying object (UFO) reporting date. ","import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nYear:"")
print(df.Date_time.dt.year.head())
print(""\nMonth:"")
print(df.Date_time.dt.month.head())
print(""\nDay:"")
print(df.Date_time.dt.day.head())
print(""\nHour:"")
print(df.Date_time.dt.hour.head())
print(""\nMinute:"")
print(df.Date_time.dt.minute.head())
print(""\nSecond:"")
print(df.Date_time.dt.second.head())
print(""\nWeekday:"")
print(df.Date_time.dt.weekday_name.head())
","import pandas as pd
import datetime

# Read the data from the file
df = pd.read_csv('unidentified_object.csv')

# Extract the year, month, day, hour, minute, second and weekday from the dataframe
df['year'] = df['Date'].dt.year
df['month'] = df['Date'].dt.month
df['day'] = df['Date'"
1021,Write a Python program to wrap an element in the specified tag and create the new wrapper. ,"from bs4 import BeautifulSoup
soup = BeautifulSoup(""<p>Python exercises.</p>"", ""lxml"")
print(""Original Markup:"")
print(soup.p.string.wrap(soup.new_tag(""i"")))
print(""\nNew Markup:"")
print(soup.p.wrap(soup.new_tag(""div"")))
","import re

def wrap(element, tag):
    return f'<{tag}>{element}</{tag}>'

print(wrap('<b>Hello</b>', 'b'))
print(wrap('<b>Hello</b>', 'i'))
print(wrap('<b>Hello</b>', 'i'))
print(wrap('<b>Hello</b>', 'i'))
print(wrap('<b>Hello</"
1022,Write a NumPy program to find unique rows in a NumPy array. ,"import numpy as np
x = np.array([[20, 20, 20, 0],
              [0, 20, 20, 20],
              [0, 20, 20, 20],
              [20, 20, 20, 0],
              [10, 20, 20,20]])
print(""Original array:"")
print(x)
y = np.ascontiguousarray(x).view(np.dtype((np.void, x.dtype.itemsize * x.shape[1])))
_, idx = np.unique(y, return_index=True)

unique_result = x[idx]
print(""Unique rows of the above array:"")
print(unique_result)
","import numpy as np

arr = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                [1, 2, 3,"
1023,"Write a NumPy program to sort a given complex array using the real part first, then the imaginary part. ","import numpy as np
complex_num = [1 + 2j, 3 - 1j, 3 - 2j, 4 - 3j, 3 + 5j]
print(""Original array:"")
print(complex_num)
print(""\nSorted a given complex array using the real part first, then the imaginary part."")
print(np.sort_complex(complex_num))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
print(a)

a = np.array([1, 2, 3, 4, 5])
print(a.real)

a = np.array([1, 2, 3, 4, 5])
print(a.imag)

a = np.array([1, 2, 3, 4, 5])
print(a.reshape(2"
1024,Write a Pandas program to get a time series with the last working days of each month of a specific year. ,"import pandas as pd
s = pd.date_range('2021-01-01', periods=12, freq='BM')
df = pd.DataFrame(s, columns=['Date'])
print('last working days of each month of a specific year:')
print(df)
","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/data/fips_code_data.csv?raw=true')
df['fips'] = df['fips'].astype(str)
df['fips'] = df['fips'].str.zfill(5)
df['year'] = df['fips'].str[:"
1025,Write a Python program to check whether the n-th element exists in a given list. ,"x = [1, 2, 3, 4, 5, 6]
xlen = len(x)-1
print(x[xlen])
","def check_nth_element(list, n):
    if n in list:
        return True
    else:
        return False

print(check_nth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))

""""""

def check_nth_element(list, n):
    if n in list:
        return True
    else:
        return False

print(check_nth_"
1026,"Write a Pandas program to create a plot of adjusted closing prices, 30 days simple moving average and exponential moving average of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
stock_data = df1.set_index('Date')
close_px = stock_data['Adj Close']
stock_data['SMA_30_days'] = stock_data.iloc[:,4].rolling(window=30).mean() 
stock_data['EMA_20_days'] = stock_data.iloc[:,4].ewm(span=20,adjust=False).mean()
plt.figure(figsize=[15,10])
plt.grid(True)
plt.title('Historical stock prices of Alphabet Inc. [01-04-2020 to 30-09-2020]\n',fontsize=18, color='black')
plt.plot(stock_data['Adj Close'],label='Adjusted Closing Price', color='black')
plt.plot(stock_data['SMA_30_days'],label='30 days Simple moving average', color='red')
plt.plot(stock_data['EMA_20_days'],label='20 days Exponential moving average', color='green')
plt.legend(loc=2)
plt.show()
","import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Read the data
df = pd.read_csv('alphabet_inc_data.csv')

# Create a new dataframe with only the columns we want
df = df[['Date', 'Adj Close']]

# Create a new dataframe with only the columns we want
df = df["
1027,"Write a Python program to create a new Arrow object, representing the ""ceiling"" of the timespan of the Arrow object in a given timeframe using arrow module. The timeframe can be any datetime property like day, hour, minute. ","import arrow
print(arrow.utcnow())
print(""Hour ceiling:"")
print(arrow.utcnow().ceil('hour'))
print(""\nMinute ceiling:"")
print(arrow.utcnow().ceil('minute'))
print(""\nSecond ceiling:"")
print(arrow.utcnow().ceil('second')) 
","import arrow

def create_arrow(time_span):
    return arrow.get(time_span)

def get_arrow(time_span):
    return arrow.get(time_span)

def get_arrow_time_span(time_span):
    return arrow.get(time_span).time_span

def get"
1028,"Write a NumPy program to create a 4x4 array with random values, now create a new array from the said array swapping first and last rows. ","import numpy as np 
nums = np.arange(16, dtype='int').reshape(-1, 4)
print(""Original array:"")
print(nums)
print(""\nNew array after swapping first and last rows of the said array:"")
new_nums = nums[::-1]
print(new_nums)
","import numpy as np

a = np.random.randint(0,10,(4,4))
print(a)

b = np.random.randint(0,10,(4,4))
print(b)

c = np.concatenate((a,b),axis=1)
print(c)

d = np.concatenate((a,b),axis="
1029,"Write a Python program to create a Beautiful Soup parse tree into a nicely formatted Unicode string, with a separate line for each HTML/XML tag and string. ","from bs4 import BeautifulSoup
str1 = ""<p>Some<b>bad<i>HTML Code</i></b></p>""
print(""Original string:"")
print(str1)
soup = BeautifulSoup(""<p>Some<b>bad<i>HTML Code</i></b></p>"", ""xml"")
print(""\nFormatted Unicode string:"")
print(soup.prettify())
","import urllib.request
import bs4

url = ""https://www.python.org/blogs/html-tables/""
html = urllib.request.urlopen(url)
soup = bs4.BeautifulSoup(html, 'html.parser')

# print(soup.prettify())

# print(soup.prettify())

# print("
1030,Write a Python program to find the indexes of all elements in the given list that satisfy the provided testing function. ,"def find_index_of_all(lst, fn):
  return [i for i, x in enumerate(lst) if fn(x)]
print(find_index_of_all([1, 2, 3, 4], lambda n: n % 2 == 1))
","def solution(lst, func):
    for i in range(len(lst)):
        if func(lst[i]):
            print(i)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
func = lambda x: x % 2 == 0

solution(lst, func)

""""""

def solution(lst, func):
    for i in range("
1031,Write a Pandas program to join the two given dataframes along rows and merge with another dataframe along the common column id. ,"import pandas as pd
student_data1 = pd.DataFrame({
        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5'],
         'name': ['Danniella Fenton', 'Ryder Storey', 'Bryce Jensen', 'Ed Bernal', 'Kwame Morin'], 
        'marks': [200, 210, 190, 222, 199]})

student_data2 = pd.DataFrame({
        'student_id': ['S4', 'S5', 'S6', 'S7', 'S8'],
        'name': ['Scarlette Fisher', 'Carla Williamson', 'Dante Morse', 'Kaiser William', 'Madeeha Preston'], 
        'marks': [201, 200, 198, 219, 201]})

exam_data = pd.DataFrame({
        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5', 'S7', 'S8', 'S9', 'S10', 'S11', 'S12', 'S13'],
        'exam_id': [23, 45, 12, 67, 21, 55, 33, 14, 56, 83, 88, 12]})

print(""Original DataFrames:"")
print(student_data1)
print(student_data2)
print(exam_data)

print(""\nJoin first two said dataframes along rows:"")
result_data = pd.concat([student_data1, student_data2])
print(result_data)

print(""\nNow join the said result_data and df_exam_data along student_id:"")
final_merged_data = pd.merge(result_data, exam_data, on='student_id')
print(final_merged_data)
","df1 = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})
df2 = pd.DataFrame({'col1': [7, 8, 9], 'col2': [10, 11, 12]})

df = pd.concat([df1, df2], axis=0)

df.columns = ['col1', 'col2', '"
1032,Write a Pandas program to remove the duplicates from 'WHO region' column of World alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())

print(""\nAfter removing the duplicates of WHO region column:"")
print(w_a_con.drop_duplicates('WHO region'))
","import pandas as pd

df = pd.read_csv('datasets/WHO_region.csv')
df.drop_duplicates(subset=['WHO region'], inplace=True)
df.to_csv('datasets/WHO_region_duplicates.csv')

""""""

# Solution

import pandas as pd

df = pd.read_csv('datasets/WHO_region.csv"
1033,Write a Pandas program to import three datasheets from a given excel data (coalpublic2013.xlsx ) and combine in to a single dataframe. ,"import pandas as pd
import numpy as np
df1 = pd.read_excel('E:\employee.xlsx',sheet_name=0)
df2 = pd.read_excel('E:\employee.xlsx',sheet_name=1)
df3 = pd.read_excel('E:\employee.xlsx',sheet_name=2)
df = pd.concat([df1, df2, df3])
print(df)
","import pandas as pd

df1 = pd.read_excel('coalpublic2013.xlsx')
df2 = pd.read_excel('coalpublic2013.xlsx')
df3 = pd.read_excel('coalpublic2013.xlsx')

df = pd.concat([df1, df2, df3], axis=0)

df"
1034,"Write a Python program to create a string representation of the Arrow object, formatted according to a format string. ","import arrow
print(""Current datetime:"")
print(arrow.utcnow())
print(""\nYYYY-MM-DD HH:mm:ss ZZ:"")
print(arrow.utcnow().format('YYYY-MM-DD HH:mm:ss ZZ'))
print(""\nDD-MM-YYYY HH:mm:ss ZZ:"")
print(arrow.utcnow().format('DD-MM-YYYY HH:mm:ss ZZ'))
print(arrow.utcnow().format('\nMMMM DD, YYYY'))
print(arrow.utcnow().format())
",">>> import arrow
>>> arrow.Arrow(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,"
1035,Write a Python program to get the daylight savings time adjustment using arrow module. ,"import arrow
print(""Daylight savings time adjustment:"")
a = arrow.utcnow().dst()
print(a)
","import arrow

def get_dst(time):
    return arrow.get(time).timezone.dst(arrow.get(time).time)

print(get_dst('2021-05-01'))

""""""

# Solution

import arrow

def get_dst(time):
    return arrow.get(time).timezone.dst(arrow.get(time).time)

print(get_dst('2021-05-01'"
1036,Write a NumPy program to compute the natural logarithm of one plus each element of a given array in floating-point accuracy. ,"import numpy as np
x = np.array([1e-99, 1e-100])
print(""Original array: "")
print(x)
print(""\nNatural logarithm of one plus each element:"")
print(np.log1p(x))
","python solution.py

""""""

import numpy as np

def natural_log(x):
    return np.log(x+1)

def natural_log_array(x):
    return np.log(x+1)

def natural_log_array_array(x):
    return np.log(x+1)

def natural_log_array_array_array(x):
    return np"
1037,A Python Dictionary contains List as value. Write a Python program to update the list values in the said dictionary. ,"def test(dictionary):
    dictionary['Math'] = [x+1 for x in dictionary['Math']]
    dictionary['Physics'] = [x-2 for x in dictionary['Physics']]
    return dictionary

dictionary = { 
               'Math' : [88, 89, 90], 
               'Physics' : [92, 94, 89],
               'Chemistry' : [90, 87, 93]
             }
print(""\nOriginal Dictionary:"")
print(dictionary)
print(""\nUpdate the list values of the said dictionary:"")
print(test(dictionary))
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

#"
1038,Write a NumPy program to calculate averages without NaNs along a given array. ,"import numpy as np
arr1 = np.array([[10, 20 ,30], [40, 50, np.nan], [np.nan, 6, np.nan], [np.nan, np.nan, np.nan]])
print(""Original array:"")
print(arr1)
temp = np.ma.masked_array(arr1,np.isnan(arr1))
result = np.mean(temp, axis=1)
print(""Averages without NaNs along the said array:"")
print(result.filled(np.nan))
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

b = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

c = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(np.average(a))
print(np.average(b))
print("
1039,Write a Python program to create a dictionary with the unique values of a given list as keys and their frequencies as the values. ,"from collections import defaultdict
def frequencies(lst):
  freq = defaultdict(int)
  for val in lst:
    freq[val] += 1
  return dict(freq) 
print(frequencies(['a', 'b', 'f', 'a', 'c', 'e', 'a', 'a', 'b', 'e', 'f'])) 
print(frequencies([3,4,7,5,9,3,4,5,0,3,2,3]))
","import collections

def unique_values(lst):
    d = collections.Counter(lst)
    return dict(d)

print(unique_values([1,2,3,4,5,6,7,8,9,10]))

# Output: {1: 2, 2: 1, 3: 2, 4: 2, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10"
1040,Write a Python program to find the most common element of a given list. ,"from collections import Counter
language = ['PHP', 'PHP', 'Python', 'PHP', 'Python', 'JS', 'Python', 'Python','PHP', 'Python']
print(""Original list:"")
print(language)
cnt = Counter(language)
print(""\nMost common element of the said list:"")
print(cnt.most_common(1)[0][0])
","def most_common(lst):
    return lst[0]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(most_common(lst))

""""""

def most_common(lst):
    return lst[0]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(most_common(lst))

"""""""
1041,Write a python program to access environment variables and value of the environment variable. ,"import os
print(""Access all environment variables:"")
print('*----------------------------------*')
print(os.environ)
print('*----------------------------------*')
print(""Access a particular environment variable:"")
print(os.environ['HOME'])
print('*----------------------------------*')
print(os.environ['PATH'])
print('*----------------------------------*')
print('Value of the environment variable key:')
print(os.getenv('JAVA_HOME'))
print(os.getenv('PYTHONPATH'))
","import os

print(os.environ.get('PATH'))

# Output:
# PATH:
# 'C:\\Python27\\Lib\\site-packages\\pip'
# 'C:\\Python27\\Lib\\site-packages\\pip\\site-packages\\pip'
# 'C:\\Python27\\Lib\\site-packages\\pip\\site-packages\\pip\\site-packages\\pip'
# 'C:\\Python27\\Lib\\site"
1042,Write a Python program to round every number of a given list of numbers and print the total sum multiplied by the length of the list. ,"nums = [22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]
print(""Original list: "", nums)
print(""Result:"")
lenght=len(nums)
print(sum(list(map(round,nums))* lenght)) 
","import math

def solution(numbers):
    total = 0
    for i in numbers:
        total += math.floor(i/len(numbers))
    return total

print(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

# Time complexity: O(n)
# Space Complexity: O(n)

# Runtime: 32 ms (96.41"
1043,Write a Python program to retrieve all descendants of the body tag from a given web page. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""\nDescendants of the body tag (https://www.python.org):\n"")
root = soup.html    
root_childs = [e.name for e in root.descendants if e.name is not None]
print(root_childs)

","import urllib.request
import urllib.parse
import urllib.error

url = ""http://py4e-data.dr-chuck.net/comments_42.html""

try:
    fhand = urllib.request.urlopen(url)
except urllib.error.URLError as e:
    print(""ERROR:"", e.reason)

for line in fhand:
    print(line.decode()."
1044,Write a Pandas program to capitalize all the string values of specified columns of a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'name': ['alberto','gino','ryan', 'Eesha', 'syed'],
    'date_of_birth ': ['17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [18.5, 21.2, 22.5, 22, 23]
})
print(""Original DataFrame:"")
print(df)
print(""\nAfter capitalizing name column:"")
df['name'] = list(map(lambda x: x.capitalize(), df['name']))
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': ['a', 'b', 'c', 'd'],
                   'col2': ['e', 'f', 'g', 'h'],
                   'col3': ['i', 'j', 'k', 'l']})

df.columns = ['col1', 'col2', 'col3']

print(df.head())

df.columns = ['col"
1045,Write a Python program to check whether a given datetime is between two dates and times using arrow module. ,"import arrow
print(""Test whether a given datetime is between two dates and times:"")
start = arrow.get(datetime(2017, 6, 5, 12, 30, 10))
end = arrow.get(datetime(2017, 6, 5, 12, 30, 36))
print(arrow.get(datetime(2017, 6, 5, 12, 30, 27)).is_between(start, end))
start = arrow.get(datetime(2017, 5, 5))
end = arrow.get(datetime(2017, 5, 8))
print(arrow.get(datetime(2017, 5, 8)).is_between(start, end, '[]'))
start = arrow.get(datetime(2017, 5, 5))
end = arrow.get(datetime(2017, 5, 8))
print(arrow.get(datetime(2017, 5, 8)).is_between(start, end, '[)'))
","import arrow

def check_date(date):
    if arrow.get(date).time() >= arrow.get(date).time():
        return True
    else:
        return False

print(check_date(""2021-05-01""))
print(check_date(""2021-05-02""))
print(check_date(""2021-05-03""))
print(check_date(""2021-05-04""))
print(check_date"
1046,Write a Python program to get variable unique identification number or string. ,"x = 100
print(format(id(x), 'x'))
s = 'w3resource'
print(format(id(s), 'x')) 
","def get_unique_identifier(string):
    """"""
    This function returns the unique identifier of the string.
    """"""
    # Your code here
    return string

print(get_unique_identifier(""Hello World""))
print(get_unique_identifier(""Hello World""))
print(get_unique_identifier(""Hello World""))
print(get_unique_identifier(""Hello World""))
print(get_unique_identifier(""Hello World""))
print(get_unique_identifier("""
1047,Write a Python program to calculate number of days between two dates.,"from datetime import date
f_date = date(2014, 7, 2)
l_date = date(2014, 7, 11)
delta = l_date - f_date
print(delta.days)
","date1 = input(""Enter the first date in the format dd/mm/yyyy: "")
date2 = input(""Enter the second date in the format dd/mm/yyyy: "")

print(""Number of days between"", date1, ""and"", date2, ""is"",
      calculate_days(date1, date2))

""""""

def calculate_days(date1, date2):
    """"""
    Calculate number of days between two dates.

    :param date1"
1048,Write a Python program to create a string from two given strings concatenating uncommon characters of the said strings. ,"def uncommon_chars_concat(s1, s2):   
     
     set1 = set(s1) 
     set2 = set(s2) 
  
     common_chars = list(set1 & set2) 
     result = [ch for ch in s1 if ch not in common_chars] + [ch for ch in s2 if ch not in common_chars] 
     return(''.join(result))

s1 = 'abcdpqr'
s2 = 'xyzabcd'
print(""Original Substrings:\n"",s1+""\n"",s2)
print(""\nAfter concatenating uncommon characters:"")
print(uncommon_chars_concat(s1, s2))
","def uncommon_characters(str1, str2):
    str1 = str1.lower()
    str2 = str2.lower()
    str1 = str1.replace("" "", """")
    str2 = str2.replace("" "", """")
    str1 = str1.replace("" "", """")
    str2 = str2.replace("" "", """")
    str1 = str1.replace("" "", """")
    str2 = str2."
1049,Write a Pandas program to create a Pivot table and find the item wise unit sold. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
print(pd.pivot_table(df,index=[""Item""], values=""Units"", aggfunc=np.sum))
","import pandas as pd

df = pd.read_csv(""https://github.com/datasets/csv/blob/master/data/airline.csv?raw=true"")

df.head()

df.pivot_table(values='airline_fare', index='day', columns='month', aggfunc='sum')

df.head()

df.pivot_table(values='airline_fare', index='day', columns='"
1050,Write a NumPy program to test whether all elements in an array evaluate to True. ,"import numpy as np
print(np.all([[True,False],[True,True]]))
print(np.all([[True,True],[True,True]]))
print(np.all([10, 20, 0, -50]))
print(np.all([10, 20, -50]))
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

if all(a):
    print(""All elements evaluate to True"")
else:
    print(""Some elements evaluate to False"")

# Output

# All elements evaluate to True
# Some elements evaluate to False"
1051,Write a Python program to remove leading zeros from an IP address. ,"def remove_zeros_from_ip(ip_add):
  new_ip_add = ""."".join([str(int(i)) for i in ip_add.split(""."")])  
  return new_ip_add ;

print(remove_zeros_from_ip(""255.024.01.01""))
print(remove_zeros_from_ip(""127.0.0.01 ""))
","def remove_leading_zeros(ip):
    # your code goes here
    return ip.lstrip('0')

print(remove_leading_zeros('127.0.0.1'))
print(remove_leading_zeros('255.255.255.255'))
print(remove_leading_zeros('255.255.255.255.255'))
print(remove_leading_zeros('255.255.255.255.255.255'))
print("
1052,Write a NumPy program to convert specified inputs to arrays with at least one dimension. ,"import numpy as np
x= 12.0
print(np.atleast_1d(x))
x = np.arange(6.0).reshape(2, 3)
print(np.atleast_1d(x))
print(np.atleast_1d(1, [3, 4]))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a)
print(b)

# Solution:

# a = np.array([[1, 2, 3], [4, 5, 6]])
# b = np.array([[7, 8, 9], [10, 11,"
1053,Write a Python program to split a given list into specified sized chunks using itertools module. ,"from itertools import islice
def split_list(lst, n):
    lst = iter(lst)
    result = iter(lambda: tuple(islice(lst, n)), ())
    return list(result)

nums = [12,45,23,67,78,90,45,32,100,76,38,62,73,29,83]
print(""Original list:"")
print(nums)
n = 3
print(""\nSplit the said list into equal size"",n)
print(split_list(nums,n))
n = 4
print(""\nSplit the said list into equal size"",n)
print(split_list(nums,n))
n = 5
print(""\nSplit the said list into equal size"",n)
print(split_list(nums,n))
","import itertools

def chunks(lst, n):
    """"""Yield successive n-sized chunks from lst.""""""
    for i in range(0, len(lst), n):
        yield lst[i:i + n]

def main():
    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    print(list(chunks(lst, 3)))
    print(list"
1054,Write a Python program to find all the link tags and list the first ten from the webpage python.org. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""First four h2 tags from the webpage python.org.:"")
print(soup.find_all('a')[0:10])

","import urllib.request
import re

url = ""https://python.org/""

# Open the url
webpage = urllib.request.urlopen(url)

# Read the webpage
html = webpage.read()

# Find all the links
links = re.findall(r'<a href=""(.*?)"">', html)

# Print the first ten links
for link in links[:10]:
    print(link)"
1055,Write a Pandas program to check inequality over the index axis of a given dataframe and a given series. ,"import pandas as pd
df_data = pd.DataFrame({'W':[68,75,86,80,None],'X':[78,75,None,80,86], 'Y':[84,94,89,86,86],'Z':[86,97,96,72,83]});
sr_data = pd.Series([68, 75, 86, 80, None]) 
print(""Original DataFrame:"")
print(df_data)
print(""\nOriginal Series:"")
print(sr_data)
print(""\nCheck for inequality of the said series & dataframe:"")
print(df_data.ne(sr_data, axis = 0))
","import pandas as pd
import numpy as np

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

s = pd.Series([1, 2, 3, 4, 5])

print(df.eq(s))

# Output:
#     True
#     True
#     True
#     False
#"
1056,Write a Python function to get a string made of 4 copies of the last two characters of a specified string (length must be at least 2). ,"def insert_end(str):
	sub_str = str[-2:]
	return sub_str * 4

print(insert_end('Python'))
print(insert_end('Exercises'))
","def get_last_two_char(string):
    return string[-2:] + string[:-2]

print(get_last_two_char(""abcdefg""))

""""""

def get_last_two_char(string):
    return string[-2:] + string[:-2]

print(get_last_two_char(""abcdefg""))

""""""

def get_last_two"
1057,"Write a Python program to display vertically each element of a given list, list of lists. ","text = [""a"", ""b"", ""c"", ""d"",""e"", ""f""]
print(""Original list:"")
print(text)
print(""\nDisplay each element vertically of the said list:"")
for i in text:
       print(i)
nums = [[1, 2, 5], [4, 5, 8], [7, 3, 6]] 
print(""Original list:"")
print(nums)
print(""\nDisplay each element vertically of the said list of lists:"")
for a,b,c in zip(*nums): 
    print(a, b, c)
","def display_vertically(lst):
    for i in lst:
        print(i)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
display_vertically(lst)

""""""

def display_vertically(lst):
    for i in lst:
        print(i)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9"
1058,Write a Python program to check if the elements of a given list are unique or not. ,"def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True

nums1 = [1,2,4,6,8,2,1,4,10,12,14,12,16,17]
print (""Original list:"")
print(nums1)
print(""\nIs the said list contains all unique elements!"")
print(all_unique(nums1)) 

nums2 = [2,4,6,8,10,12,14]
print (""\nOriginal list:"")
print(nums2)
print(""\nIs the said list contains all unique elements!"")
print(all_unique(nums2))
","def is_unique(lst):
    for i in lst:
        if lst.count(i) > 1:
            return False
    return True

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(is_unique(lst))

""""""

# Solution 1

def is_unique(lst):
    return len(set(lst)) == len(lst)"
1059,Write a Python program to check if a nested list is a subset of another nested list. ,"def checkSubset(input_list1, input_list2): 
    return all(map(input_list1.__contains__, input_list2)) 
      

list1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] 
list2 = [[1, 3],[13,15,17]]   
print(""Original list:"")
print(list1)
print(list2)
print(""\nIf the one of the said list is a subset of another.:"")
print(checkSubset(list1, list2)) 

list1 = [
           [
             [1,2],[2,3]
           ],
           [
             [3,4],[5,6]
           ]
         ]
list2 = [
           [
             [3,4], [5, 6]
           ]
         ]
print(""Original list:"")
print(list1)
print(list2)
print(""\nIf the one of the said list is a subset of another.:"")
print(checkSubset(list1, list2)) 
list1 = [
           [
             [1,2],[2,3]
           ],
           [
             [3,4],[5,7]
           ]
         ]
list2 = [
           [
             [3,4], [5, 6]
           ]
         ]
print(""Original list:"")
print(list1)
print(list2)
print(""\nIf the one of the said list is a subset of another.:"")
print(checkSubset(list1, list2))
","def isSubset(lst, sub):
    if len(lst) == 0:
        return False
    if len(lst) == 1:
        return True
    if lst[0] in sub:
        return isSubset(lst[1:], sub)
    else:
        return False

lst = [1, 2, 3, 4, 5]
sub = [4, 5]
print(isSubset(lst, sub"
1060,"Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and draw a bar plot comparing year, MSHA ID, Production and Labor_hours of first ten records. ","import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
df = pd.read_excel('E:\coalpublic2013.xlsx')
df.head(10).plot(kind='bar', figsize=(20,8))
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_excel('coalpublic2013.xlsx')
df.head()

df.columns = ['Year', 'MSHA_ID', 'Production', 'Labor_hours']
df.head()

df.head()

df.head()"
1061,"Write a NumPy program to add elements in a matrix. If an element in the matrix is 0, we will not add the element below this element. ","import numpy as np
def sum_matrix_Elements(m):
    arra = np.array(m)   
    element_sum = 0  
    for p in range(len(arra)):  
        for q in range(len(arra[p])):  
            if arra[p][q] == 0 and p < len(arra)-1: 
                arra[p+1][q] = 0  
            element_sum += arra[p][q]  
    return element_sum
m = [[1, 1, 0, 2],
          [0, 3, 0, 3], 
          [1, 0, 4, 4]]
print(""Original matrix:"")
print(m)
print(""Sum:"")
print(sum_matrix_Elements(m))
","import numpy as np

matrix = np.array([[1, 2, 3, 4, 5],
                   [6, 7, 8, 9, 10],
                   [11, 12, 13, 14, 15]])

print(matrix)

# Add elements in the matrix
matrix = np.array([[1, 2, 3, 4, 5],
                   [6, 7, 8, 9"
1062,"Write a Python program to get the minimum value of a list, after mapping each element to a value using a given function. ","def min_by(lst, fn):
  return min(map(fn, lst)) 
print(min_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n'])) 
","def min_value(lst):
    min_val = lst[0]
    for i in lst:
        if i < min_val:
            min_val = i
    return min_val

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(min_value(lst))

""""""

def min_value(lst):
    min_"
1063,"Write a NumPy program to find the number of elements of an array, length of one array element in bytes and total bytes consumed by the elements. ","import numpy as np
x = np.array([1,2,3], dtype=np.float64)
print(""Size of the array: "", x.size)
print(""Length of one array element in bytes: "", x.itemsize)
print(""Total bytes consumed by the elements of the array: "", x.nbytes)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(arr.size)
print(arr.itemsize)
print(arr.nbytes)

# Solution:

# arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
# print(arr.size"
1064,Create two arrays of six elements. Write a NumPy program to count the number of instances of a value occurring in one array on the condition of another array. ,"import numpy as np
x = np.array([10,-10,10,-10,-10,10])
y = np.array([.85,.45,.9,.8,.12,.6])
print(""Original arrays:"")
print(x)
print(y)
result = np.sum((x == 10) & (y > .5))
print(""\nNumber of instances of a value occurring in one array on the condition of another array:"")
print(result)
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
b = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(np.count_nonzero(a == b))

# Output:
# [10]
# [10]
# [10]"
1065,Write a Python program to count the number 4 in a given list. ,"def list_count_4(nums):
  count = 0  
  for num in nums:
    if num == 4:
      count = count + 1

  return count

print(list_count_4([1, 4, 6, 7, 4]))
print(list_count_4([1, 4, 6, 4, 7, 4]))","def count4(list):
    count = 0
    for i in list:
        if i == 4:
            count += 1
    return count

print(count4([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def count4(list):
    count = 0
    for i in list:
        if i == 4:
            count += 1
    return count

print(count4([1, 2, 3"
1066,Write a Python script to merge two Python dictionaries. ,"d1 = {'a': 100, 'b': 200}
d2 = {'x': 300, 'y': 200}
d = d1.copy()
d.update(d2)
print(d)
","python solution.py

""""""

# Python program to merge two Python dictionaries

# Python program to merge two Python dictionaries

# Python program to merge two Python dictionaries

# Python program to merge two Python dictionaries

# Python program to merge two Python dictionaries

# Python program to merge two Python dictionaries

# Python program to merge two Python dictionaries

# Python program to merge two Python dictionaries

# Python program to merge two Python dictionaries

# Python program to merge two Python diction"
1067,Write a Pandas program to convert unix/epoch time to a regular time stamp in UTC. Also convert the said timestamp in to a given time zone. ,"import pandas as pd
epoch_t = 1621132355
time_stamp = pd.to_datetime(epoch_t, unit='s')
# UTC (Coordinated Universal Time) is one of the well-known names of UTC+0 time zone which is 0h.
# By default, time series objects of pandas do not have an assigned time zone.
print(""Regular time stamp in UTC:"")
print(time_stamp)
print(""\nConvert the said timestamp in to US/Pacific:"")
print(time_stamp.tz_localize('UTC').tz_convert('US/Pacific'))
print(""\nConvert the said timestamp in to Europe/Berlin:"")
print(time_stamp.tz_localize('UTC').tz_convert('Europe/Berlin'))
","import datetime

def convert_unix_to_utc(unix_time):
    """"""
    Converts unix time to UTC timezone
    """"""
    utc_time = datetime.datetime.utcfromtimestamp(unix_time)
    return utc_time.strftime('%Y-%m-%d %H:%M:%S')

def convert"
1068,Write a NumPy program to create random vector of size 15 and replace the maximum value by -1. ,"import numpy as np
x = np.random.random(15)
print(""Original array:"")
print(x)
x[x.argmax()] = -1
print(""Maximum value replaced by -1:"")
print(x)
","import numpy as np

np.random.seed(0)

x = np.random.randint(0, 10, 15)
x[x.argmax()] = -1

print(x)

""""""

import numpy as np

np.random.seed(0)

x = np.random.randint(0, 10, 15)
x[x.argmax()] = -1

print(x)"
1069,"Write a Python program to generate a random integer between 0 and 6 - excluding 6, random integer between 5 and 10 - excluding 10, random integer between 0 and 10, with a step of 3 and random date between two dates. Use random.randrange()","import random
import datetime
print(""Generate a random integer between 0 and 6:"")
print(random.randrange(5))
print(""Generate random integer between 5 and 10, excluding 10:"")
print(random.randrange(start=5, stop=10))
print(""Generate random integer between 0 and 10, with a step of 3:"")
print(random.randrange(start=0, stop=10, step=3))
print(""\nRandom date between two dates:"")
start_dt = datetime.date(2019, 2, 1)
end_dt = datetime.date(2019, 3, 1)
time_between_dates = end_dt - start_dt
days_between_dates = time_between_dates.days
random_number_of_days = random.randrange(days_between_dates)
random_date = start_dt + datetime.timedelta(days=random_number_of_days)
print(random_date)
","import random

def random_date():
    return random.randrange(0, 10)

def random_date_2():
    return random.randrange(5, 10)

def random_date_3():
    return random.randrange(0, 10)

def random_date_4():
    return random"
1070,Write a Pandas program to create a conversion between strings and datetime. ,"from datetime import datetime
from dateutil.parser import parse
print(""Convert datatime to strings:"")
stamp=datetime(2019,7,1)
print(stamp.strftime('%Y-%m-%d'))
print(stamp.strftime('%d/%b/%y'))
print(""\nConvert strings to datatime:"")
print(parse('Sept 17th 2019'))
print(parse('1/11/2019'))
print(parse('1/11/2019', dayfirst=True))
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Age': [30, 32, 33, 34, 35, 36],
                   'Salary': [55000, 60000, 50000, 50000, 50000, 50000]})

# Create a new column
df['Date'] = pd.to_datetime(df"
1071,Write a Python program to solve (x + y) * (x + y). ,"x, y = 4, 3
result = x * x + 2 * x * y + y * y
print(""({} + {}) ^ 2) = {}"".format(x, y, result))
","x = int(input(""Enter the value of x: ""))
y = int(input(""Enter the value of y: ""))

print(""The solution is:"", x + y)

""""""

x = int(input(""Enter the value of x: ""))
y = int(input(""Enter the value of y: ""))

print(""The solution is:"", x + y)"
1072,Write a Python program to get 90 days of visits broken down by browser for all sites on data.gov. ,"from urllib.request import urlopen
from bs4 import BeautifulSoup
html = urlopen(""https://en.wikipedia.org/wiki/Python"")
bsObj = BeautifulSoup(html)
for link in bsObj.findAll(""a""):
  if 'href' in link.attrs:
    print(link.attrs['href'])
","import requests
import json
import pandas as pd

url = ""https://data.gov.in/api/v2/datasets/e9d8d8d-c9d0-4c8b-a8d8-b9d9d9d9d9d/datasets/e9d8d8d-c9d0-4c8b-a8d8-b9d9d9d9d"
1073,Write a Pandas program to extract only phone number from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],
    'company_phone_no': ['Company1-Phone no. 4695168357','Company2-Phone no. 8088729013','Company3-Phone no. 6204658086', 'Company4-Phone no. 5159530096', 'Company5-Phone no. 9037952371']
    })
print(""Original DataFrame:"")
print(df)
def find_phone_number(text):
    ph_no = re.findall(r""\b\d{10}\b"",text)
    return """".join(ph_no)
df['number']=df['company_phone_no'].apply(lambda x: find_phone_number(x))
print(""\Extracting numbers from dataframe columns:"")
print(df)
","import pandas as pd

# Read the data from the file
df = pd.read_csv('phone_number.csv')

# Extract the phone number from the column
phone_number = df['phone_number']

# Print the phone number
print(phone_number)

# Create a new column in the DataFrame called 'phone_number_extracted'
df['phone_number_extracted'] = phone_number.str.extract('(\"
1074,Write a Pandas program to split a given dataframe into groups and display target column as a list of unique values. ,"import pandas as pd
df = pd.DataFrame( {'id' : ['A','A','A','A','A','A','B','B','B','B','B'], 
                    'type' : [1,1,1,1,2,2,1,1,1,2,2], 
                    'book' : ['Math','Math','English','Physics','Math','English','Physics','English','Physics','English','English']})

print(""Original DataFrame:"")
print(df)
new_df = df[['id', 'type', 'book']].drop_duplicates()\
                         .groupby(['id','type'])['book']\
                         .apply(list)\
                         .reset_index()

new_df['book'] = new_df.apply(lambda x: (','.join([str(s) for s in x['book']])), axis = 1)
print(""\nList all unique values in a group:"")
print(new_df)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

print(df.group"
1075,Write a Python program to sort a given matrix in ascending order according to the sum of its rows using lambda. ,"def sort_matrix(M):
    result = sorted(M, key=lambda matrix_row: sum(matrix_row)) 
    return result

matrix1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]
matrix2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]

print(""Original Matrix:"")
print(matrix1)
print(""\nSort the said matrix in ascending order according to the sum of its rows"") 
print(sort_matrix(matrix1))
print(""\nOriginal Matrix:"")
print(matrix2) 
print(""\nSort the said matrix in ascending order according to the sum of its rows"") 
print(sort_matrix(matrix2))
","def sort_matrix(matrix):
    rows = len(matrix)
    sum_rows = sum(rows)
    for i in range(rows):
        for j in range(i+1, rows):
            if matrix[i][j] == 0:
                continue
            if matrix[i][j] < 0:
                matrix[i][j] = -matrix[i][j]
            else:
                matrix[i"
1076,Write a Python program to group a sequence of key-value pairs into a dictionary of lists. ,"from collections import defaultdict
class_roll = [('v', 1), ('vi', 2), ('v', 3), ('vi', 4), ('vii', 1)]
d = defaultdict(list)
for k, v in class_roll:
    d[k].append(v)
print(sorted(d.items()))
","python solution.py

""""""

import json
import sys

def main():
    if len(sys.argv)!= 3:
        print(""Usage: python solution.py <input.json> <output.json>"")
        sys.exit(1)
    
    with open(sys.argv[1]) as f:
        data = json.load(f)
    
    with open(sys.argv[2], 'w') as f:"
1077,Write a Pandas program to drop the columns where at least one element is missing in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})

print(""Original Orders DataFrame:"")
print(df)
print(""\nDrop the columns where at least one element is missing:"")
result = df.dropna(axis='columns')
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

df.drop('col2', axis=1, inplace=True)

df.drop('col1', axis=0, inplace=True)

df.drop('col1', axis=1, inplace=True)

df."
1078,Write a Python program to get the maximum and minimum value in a dictionary. ,"my_dict = {'x':500, 'y':5874, 'z': 560}

key_max = max(my_dict.keys(), key=(lambda k: my_dict[k]))
key_min = min(my_dict.keys(), key=(lambda k: my_dict[k]))

print('Maximum Value: ',my_dict[key_max])
print('Minimum Value: ',my_dict[key_min])
","def get_max_min(d):
    max_val = d[0]
    min_val = d[0]
    for i in d:
        if i > max_val:
            max_val = i
        if i < min_val:
            min_val = i
    return max_val, min_val

d = {1: 10, 2: 20, 3: 30}
print(get_max_min(d))

""""""

def"
1079,Write a NumPy program to split of an array of shape 4x4 it into two arrays along the second axis. ,"import numpy as np
x = np.arange(16).reshape((4, 4))
print(""Original array:"",x)
print(""After splitting horizontally:"")
print(np.hsplit(x, [2, 6]))
","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

b = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

print(a)
print(b)

print(a.shape"
1080,Write a Pandas program to split a given dataframe into groups and create a new column with count from GroupBy. ,"import pandas as pd
pd.set_option('display.max_rows', None)
df = pd.DataFrame({
'book_name':['Book1','Book2','Book3','Book4','Book1','Book2','Book3','Book5'],
'book_type':['Math','Physics','Computer','Science','Math','Physics','Computer','English'],
'book_id':[1,2,3,4,1,2,3,5]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nNew column with count from groupby:"")
result = df.groupby([""book_name"", ""book_type""])[""book_type""].count().reset_index(name=""count"")
print(result)
","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Age': [30, 32, 33, 34, 35, 36],
                   'Score': [85, 90, 95, 100, 90, 100]})

df.groupby('Name').count()

df.groupby('Name').sum()

df."
1081,"Write a Pandas program to create a Pivot table and find the probability of survival by class, gender, solo boarding and port of embarkation. ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table('survived', ['sex' , 'alone' ], [ 'embark_town', 'class' ])
print(result)

","import pandas as pd
import numpy as np

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/iris.csv')

# Create a pivot table
pivot = df.pivot_table(index='class', columns='gender', values='solo_boarding', aggfunc='count')

# Print the pivot table
print(pivot)"
1082,"Write a Python program to get a string from a given string where all occurrences of its first char have been changed to '$', except the first char itself. ","def change_char(str1):
  char = str1[0]
  str1 = str1.replace(char, '$')
  str1 = char + str1[1:]

  return str1

print(change_char('restart'))
","str = ""abcd$ef$ghi$jkl$mno$pqrstu$vwx""

str = ""abcd$ef$ghi$jkl$mno$pqrstu$vwx""

str = ""abcd$ef$ghi$jkl$mno$pqrstu$vwx""

str = ""abcd$ef$ghi$"
1083,Write a NumPy program to create two arrays of size bigger and smaller than a given array. ,"import numpy as np    
x = np.arange(16).reshape(4,4)
print(""Original arrays:"")
print(x)
print(""\nArray with size 2x2 from the said array:"")
new_array1 = np.resize(x,(2,2))
print(new_array1)
print(""\nArray with size 6x6 from the said array:"")
new_array2 = np.resize(x,(6,6))
print(new_array2)
","import numpy as np

arr1 = np.array([1, 2, 3, 4, 5])
arr2 = np.array([6, 7, 8, 9, 10])

print(arr1)
print(arr2)

arr1 = np.array([1, 2, 3, 4, 5])
arr2 = np.array([6, 7, 8, 9, 10])

print(arr1)
print(arr2)

arr"
1084,"Write a Pandas program to find out the records where consumption of beverages per person average >=4 and Beverage Types is Beer, Wine, Spirits from world alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details: average consumption of \nbeverages per person >=4 and Beverage Types is Beer:"")
print(w_a_con[(w_a_con['Display Value'] >= 4) & ((w_a_con['Beverage Types'] == 'Beer') | (w_a_con['Beverage Types'] == 'Wine')| (w_a_con['Beverage Types'] == 'Spirits'))].head(10))
","import pandas as pd

df = pd.read_csv('world-alcohol-consumption.csv')

df['Beer'] = df['Beer'].apply(lambda x: 1 if x >= 4 else 0)
df['Wine'] = df['Wine'].apply(lambda x: 1 if x >= 4 else 0)
df['Spices'] = df['Spices'].apply("
1085,"Write a NumPy program to create a three-dimension array with shape (300,400,5) and set to a variable. Fill the array elements with values using unsigned integer (0 to 255). ","import numpy as np   
np.random.seed(32) 
nums = np.random.randint(low=0, high=256, size=(300, 400, 5), dtype=np.uint8)
print(nums)
","import numpy as np

arr = np.zeros((300,400,5), dtype=np.uint8)
arr[:,:,0] = 255
arr[:,:,1] = 255
arr[:,:,2] = 255
arr[:,:,3] = 255
arr[:,:,4] = 255

arr = np.zeros((300,400,"
1086,Write a Python program to check a dictionary is empty or not. ,"my_dict = {}

if not bool(my_dict):
    print(""Dictionary is empty"")
	","def is_empty(dictionary):
    if len(dictionary) == 0:
        return True
    else:
        return False

print(is_empty({""a"":1,""b"":2,""c"":3}))

""""""

# Solution 1

def is_empty(dictionary):
    if len(dictionary) == 0:
        return True
    else:
        return False

print(is_empty({""a"":1,""b"":2,""c"":3"
1087,"Write a NumPy program to count the number of ""P"" in a given array, element-wise. ","import numpy as np
x1 = np.array(['Python', 'PHP', 'JS', 'examples', 'html'], dtype=np.str)
print(""\nOriginal Array:"")
print(x1)
print(""Number of P:"")
r = np.char.count(x1, ""P"")
print(r)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

count = np.count_nonzero(arr == 'P')

print(count)

""""""

# Solution

import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

count = np.count_"
1088,"Write a Python program to calculate the sum of a list, after mapping each element to a value using the provided function. ","def sum_by(lst, fn):
  return sum(map(fn, lst))
print(sum_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n']))
","def sum_list(lst):
    return sum(lst)

lst = [1, 2, 3, 4, 5]
print(sum_list(lst))

""""""

# Solution 1

def sum_list(lst):
    return sum(lst)

lst = [1, 2, 3, 4, 5]
print(sum_list(lst))

# Solution 2

def sum"
1089,Write a Pandas program to create a comparison of the top 10 years in which the UFO was sighted vs each Month. ,"import pandas as pd
#Source: https://bit.ly/1l9yjm9
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
most_sightings_years = df['Date_time'].dt.year.value_counts().head(10)
def is_top_years(year):
   if year in most_sightings_years.index:
       return year
month_vs_year = df.pivot_table(columns=df['Date_time'].dt.month,index=df['Date_time'].dt.year.apply(is_top_years),aggfunc='count',values='city')
month_vs_year.index = month_vs_year.index.astype(int)
month_vs_year.columns = month_vs_year.columns.astype(int)
print(""\nComparison of the top 10 years in which the UFO was sighted vs each month:"")
print(month_vs_year.head(10))
","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/UFO%20Visits.csv?raw=true')

df['Year'] = df['Year'].astype(str)
df['Month'] = df['Month'].astype(str)

df['UFO'] = df['UFO'].astype(str)"
1090,Write a NumPy program to remove single-dimensional entries from a specified shape. ,"import numpy as np
x = np.zeros((3, 1, 4))
print(np.squeeze(x).shape)
","import numpy as np

x = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
x.shape = (3, 2)

x[1, 1] = 0

print(x)

x.shape = (3, 2)

x[1, 1] = 0

print(x)

x.shape = (3, 2)

x[1, 1] = 0"
1091,Write a Python code to send cookies to a given server and access cookies from the response of a server. ,"import requests
url = 'http://httpbin.org/cookies'
# A dictionary (my_cookies) of cookies to send to the specified url.
my_cookies = dict(cookies_are='Cookies parameter use to send cookies to the server')
r = requests.get(url, cookies = my_cookies)
print(r.text)
# Accessing cookies with Requests
# url = 'http://WebsiteName/cookie/setting/url'
# res = requests.get(url)
# Value of cookies
# print(res.cookies['cookie_name'])
","import socket
import sys

# Create a socket
s = socket.socket()

# Define the port on which you want to connect
port = 80

# Connect to the server
s.connect(('localhost', port))

# Send some data
s.send(b'GET / HTTP/1.0\r\n\r\n')

# Receive some data
response = s.recv(4096)

# Print the received data"
1092,"Write a Pandas program to split a dataset, group by one column and get mean, min, and max values by group. Using the following dataset find the mean, min, and max values of purchase amount (purch_amt) group by customer id (customer_id). ","import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
orders_data = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3005,3001,3002,3009,3005,3007,3002,3004,3009,3008,3003,3002],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(orders_data)
result = orders_data.groupby('customer_id').agg({'purch_amt': ['mean', 'min', 'max']})
print(""\nMean, min, and max values of purchase amount (purch_amt) group by customer id  (customer_id)."")
print(result)
","import pandas as pd

# Read the data
df = pd.read_csv('purchase_data.csv')

# Group by customer id
grouped = df.groupby('customer_id')

# Get mean, min, and max values
mean = grouped.mean()"
1093,Write a Python program to sort a tuple by its float element. ,"price = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]
print( sorted(price, key=lambda x: float(x[1]), reverse=True))
","tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

tuple.sort()

print(tuple)

# Output:
# (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
# (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
# (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
#"
1094,Write a NumPy program to get the element-wise remainder of an array of division. ,"import numpy as np
x = np.arange(7)
print(""Original array:"")
print(x)
print(""Element-wise remainder of division:"")
print(np.remainder(x, 5))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])

print(a)

print(a.remainder())

# Output:
# [1 2 3 4 5]

# Expected Output:
# [1 2 3]

# Expected Output:
# [1 2]

# Expected Output:
# [1 2]

# Expected Output:
# [1 2]

#"
1095,"Write a Python program to get string representing the date, controlled by an explicit format string. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nString representing the date, controlled by an explicit format string:"")
print(arrow.utcnow().strftime('%d-%m-%Y %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%m-%d %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%d-%m %H:%M:%S'))
","import datetime

def date_converter(date):
    return datetime.datetime.strptime(date, '%d-%m-%Y').strftime('%Y-%m-%d')

print(date_converter('2021-01-01'))

""""""

# Solution 1

import datetime

def date_converter(date):
    return datetime.datetime.strptime(date, '"
1096,Write a Python program to remove a specified column from a given nested list. ,"def remove_column(nums, n):
   for i in nums: 
    del i[n] 
   return nums

list1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]
n = 0
print(""Original Nested list:"")
print(list1)
print(""After removing 1st column:"")
print(remove_column(list1, n))

list2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]
n = 2
print(""\nOriginal Nested list:"")
print(list2)
print(""After removing 3rd column:"")
print(remove_column(list2, n))
","def remove_column(nested_list, column):
    """"""
    :type nested_list: List[List[int]]
    :type column: int
    :rtype: List[List[int]]
    """"""
    if column == 0:
        return nested_list
    else:
        return [item for item in nested_list if item is not None]

# Main
nested_list = [[1, 2, 3], [4, 5, 6], [7,"
1097,Write a Python program to count the frequency of words in a file. ,"from collections import Counter
def word_count(fname):
        with open(fname) as f:
                return Counter(f.read().split())

print(""Number of words in the file :"",word_count(""test.txt""))
","import collections

def count_words(filename):
    """"""
    Count the frequency of words in a file.
    """"""
    # Open the file for reading
    infile = open(filename, 'r')
    # Read the file line by line
    for line in infile:
        # Split the line into words
        words = line.split()
        # Count the number of words
        count = len(words)
        # Print the number of words
        print(count, words)"
1098,Write a Python program to chunk a given list into smaller lists of a specified size. ,"from math import ceil
def chunk_list(lst, size):
  return list(
    map(lambda x: lst[x * size:x * size + size],
      list(range(ceil(len(lst) / size)))))
print(chunk_list([1, 2, 3, 4, 5, 6, 7, 8], 3))
","def chunk(lst, n):
    return [lst[i:i+n] for i in range(0, len(lst), n)]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
print(chunk(lst, n))

""""""

def chunk(lst, n):
    return [lst[i:i+n] for i in range(0, len"
1099,"Write a NumPy program to create a 4x4 array, now create a new array from the said array swapping first and last, second and third columns. ","import numpy as np 
nums = np.arange(16, dtype='int').reshape(-1, 4)
print(""Original array:"")
print(nums)
print(""\nNew array after swapping first and last columns of the said array:"")
new_nums = nums[:, ::-1]
print(new_nums)
","import numpy as np

arr = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])

arr2 = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])

arr3 = np.array([[1,2,3,4],[5,6"
1100,"Write a Python program to create a time object with the same hour, minute, second, microsecond and a timestamp representation of the Arrow object, in UTC time. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nTime object with the same hour, minute, second, microsecond:"")
print(arrow.utcnow().time())
print(""\nTimestamp representation of the Arrow object, in UTC time:"")
print(arrow.utcnow().timestamp)
","import datetime

class Arrow:
    def __init__(self, hour, minute, second, microsecond, timestamp):
        self.hour = hour
        self.minute = minute
        self.second = second
        self.microsecond = microsecond
        self.timestamp = timestamp
    
    def __str__(self):
        return f'{self.hour}:{self.minute}:{self"
1101,Write a Python program to get the proleptic Gregorian ordinal of a given date. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nProleptic Gregorian ordinal of the date:"")
print(arrow.utcnow().toordinal())
","import calendar

def ordinal(year, month, day):
    if calendar.isleap(year):
        return calendar.monthrange(year, month)[1]
    else:
        return calendar.monthrange(year, month)[0]

print(ordinal(2021, 2, 1))
print(ordinal(2021, 2, 2))
print(ordinal(2021, 2, 3))
print(ordinal(2021, 2, 4"
1102,Write a Python program to capitalize first and last letters of each word of a given string. ,"def capitalize_first_last_letters(str1):
     str1 = result = str1.title()
     result =  """"
     for word in str1.split():
        result += word[:-1] + word[-1].upper() + "" ""
     return result[:-1]  
     
print(capitalize_first_last_letters(""python exercises practice solution""))
print(capitalize_first_last_letters(""w3resource""))
","s = ""Hello World""
print(s.capitalize())

""""""

s = ""Hello World""
print(s.capitalize())"
1103,Write a Python program to find if a given string starts with a given character using Lambda. ,"starts_with = lambda x: True if x.startswith('P') else False
print(starts_with('Python'))
starts_with = lambda x: True if x.startswith('P') else False
print(starts_with('Java'))
","def is_start_with_char(str, char):
    return str.startswith(char)

print(is_start_with_char('python', 't'))

""""""

# Solution 1

def is_start_with_char(str, char):
    return char in str

print(is_start_with_char('python', 't'))

# Solution 2

def is_start_with_char(str, char"
1104,Write a Python program to read a given string character by character and compress repeated character by storing the length of those character(s). ,"from itertools import groupby
def encode_str(input_str):
    return [(len(list(n)), m) for m,n in groupby(input_str)]
 
str1 = ""AAASSSSKKIOOOORRRREEETTTTAAAABBBBBBDDDDD"" 
print(""Original string:"")
print(str1)
print(""Result:"")
print(encode_str(str1))

str1 = ""jjjjiiiiooooosssnssiiiiwwwweeeaaaabbbddddkkkklll"" 
print(""\nOriginal string:"")
print(str1)
print(""Result:"")
print(encode_str(str1))
","def compress(string):
    compressed = """"
    for i in string:
        if i not in compressed:
            compressed += i
    return compressed

print(compress(""abcdefg""))

""""""

def compress(string):
    compressed = """"
    for i in string:
        if i not in compressed:
            compressed += i
            compressed += str(len(compressed))
    return compressed"
1105,Write a NumPy program to create a 3x3x3 array filled with arbitrary values. ,"import numpy as np
x = np.random.random((3, 3, 3))
print(x)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a)

# Solution:
a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a)
print(a.reshape(3, 3))

# Solution:
a = np.array([[1, 2,"
1106,Write a Python program to print a variable without spaces between values. ,"x = 30
print('Value of x is ""{}""'.format(x))
","def print_var(var):
    print(var)

print_var(""Hello"")

""""""

# Solution

def print_var(var):
    print(var)

print_var(""Hello"")

""""""

# Solution

def print_var(var):
    print(var)

print_var(""Hello"")

""""""

# Solution

def print_var(var):
    print(var)

print_var(""Hello"")

"""""""
1107,Write a Python function to reverses a string if it's length is a multiple of 4. ,"def reverse_string(str1):
    if len(str1) % 4 == 0:
       return ''.join(reversed(str1))
    return str1

print(reverse_string('abcd'))
print(reverse_string('python'))
","def reverse_string(string):
    if len(string) % 4 == 0:
        return string[::-1]
    else:
        return string

print(reverse_string(""abcdefg""))

""""""

def reverse_string(string):
    if len(string) % 4 == 0:
        return string[::-1]
    else:
        return string

print(reverse_string(""abcdefg""))"
1108,Write a NumPy program to convert angles from radians to degrees for all elements in a given array. ,"import numpy as np
x = np.array([-np.pi, -np.pi/2, np.pi/2, np.pi])
r1 = np.degrees(x)
r2 = np.rad2deg(x)
assert np.array_equiv(r1, r2)
print(r1)
","import numpy as np

def rad2deg(x):
    return x * 180 / np.pi

def deg2rad(x):
    return x * 180 / np.pi

def main():
    print(""Enter the angles in radians:"")
    print(""Enter the angles in degrees:"")
    print(""Enter the angles in degrees:"")
    print(""Enter the angles in degrees:"")
    print(""Enter the angles in degrees:"")"
1109,Write a NumPy program to extract all the contiguous 4x4 blocks from a given random 12x12 matrix. ,"import numpy as np
arra1 = np.random.randint(0,5,(12,12))
print(""Original arrays:"")
print(arra1)
n = 4
i = 1 + (arra1.shape[0]-4)
j = 1 + (arra1.shape[1]-4)
result = np.lib.stride_tricks.as_strided(arra1, shape=(i, j, n, n), strides = arra1.strides + arra1.strides)
print(""\nContiguous 4x4 blocks:"")
print(result)
","import numpy as np

# Create a random matrix
matrix = np.random.randint(0, 10, size=(12, 12))

# Create a 4x4 block
block = np.zeros((4, 4))

# Fill the block with the values
for i in range(4):
    for j in range(4):
        block[i][j] = matrix[i][j]

# Print the block
print("
1110,Write a Python program to compute the greatest common divisor (GCD) of two positive integers. ,"def gcd(x, y):
   gcd = 1   
   if x % y == 0:
       return y   
   for k in range(int(y / 2), 0, -1):
       if x % k == 0 and y % k == 0:
           gcd = k
           break 
   return gcd
print(""GCD of 12 & 17 ="",gcd(12, 17))
print(""GCD of 4 & 6 ="",gcd(4, 6))
print(""GCD of 336 & 360 ="",gcd(336, 360))
","def gcd(x, y):
    if x > y:
        x, y = y, x
    while y:
        x, y = y, x % y
    return x

print(gcd(12, 24))

# Output:
# 7
# Output:
# 7
# Output:
# 7
# Output:
# 7
# Output:
# 7
# Output:
# 7
# Output:
# 7"
1111,"Write a NumPy program to change the sign of a given array to that of a given array, element-wise. ","import numpy as np
x1 = np.array([-1, 0, 1, 2])
print(""Original array: "")
print(x1)
x2 = -2.1
print(""\nSign of x1 to that of x2, element-wise:"")
print(np.copysign(x1, x2))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)
a[0][0] = -1
print(a)

# Output:
[[-1 -1 -1]
 [ 0  0  0]
 [ 1  1  1]]

""""""

import numpy as np

a = np.array([[1, 2, 3],"
1112,Write a Python program to sort a given list of lists by length and value. ,"def sort_sublists(input_list):
    input_list.sort()  # sort by sublist contents
    input_list.sort(key=len)
    return input_list

list1 = [[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]]
print(""Original list:"")
print(list1)
print(""\nSort the list of lists by length and value:"")
print(sort_sublists(list1))
","def sort_by_length(lst):
    lst.sort(key=len)
    return lst

lst = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]
print(sort_by_length(lst))

""""""

def sort_by_length(lst):
    lst.sort(key=len)"
1113,Write a Python program to calculate the average value of the numbers in a given tuple of tuples using lambda. ,"def average_tuple(nums):
    result = tuple(map(lambda x: sum(x) / float(len(x)), zip(*nums)))
    return result

nums = ((10, 10, 10), (30, 45, 56), (81, 80, 39), (1, 2, 3))
print (""Original Tuple: "")
print(nums)
print(""\nAverage value of the numbers of the said tuple of tuples:\n"",average_tuple(nums))
nums = ((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3))
print (""\nOriginal Tuple: "")
print(nums)
print(""\nAverage value of the numbers of the said tuple of tuples:\n"",average_tuple(nums))

","def average(a,b,c):
    return (a+b+c)/3

print(average(1,2,3))

""""""

# Solution:

def average(a,b,c):
    return (a+b+c)/3

print(average(1,2,3))"
1114,Write a NumPy program to change the dimension of an array. ,"import numpy as np
x = np.array([1, 2, 3, 4, 5, 6])
print(""6 rows and 0 columns"")
print(x.shape)

y = np.array([[1, 2, 3],[4, 5, 6],[7,8,9]])
print(""(3, 3) -> 3 rows and 3 columns "")
print(y)

x = np.array([1,2,3,4,5,6,7,8,9])
print(""Change array shape to (3, 3) -> 3 rows and 3 columns "")
x.shape = (3, 3)
print(x)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])

a.shape = (2, 3)

a.shape = (2, 3, 1)

a.shape = (2, 3, 1, 1)

a.shape = (2, 3, 1, 1, 1)

a.shape = (2, 3, 1, 1, 1, 1)

a.shape = (2, 3,"
1115,Write a Pandas program to replace missing white spaces in a given string with the least frequent character. ,"import pandas as pd
str1 = 'abc def abcdef icd'
print(""Original series:"")
print(str1)
ser = pd.Series(list(str1))
element_freq = ser.value_counts()
print(element_freq)
current_freq = element_freq.dropna().index[-1]
result = """".join(ser.replace(' ', current_freq))
print(result)
","def solution(s):
    # your code goes here
    return s.lower().count(' ')

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This"
1116,Write a Pandas program to remove the time zone information from a Time series data. ,"import pandas as pd
date1 = pd.Timestamp('2019-01-01', tz='Europe/Berlin')
date2 = pd.Timestamp('2019-01-01', tz='US/Pacific')
date3 = pd.Timestamp('2019-01-01', tz='US/Eastern')
print(""Time series data with time zone:"")
print(date1)
print(date2)
print(date3)
print(""\nTime series data without time zone:"")
print(date1.tz_localize(None))
print(date2.tz_localize(None))
print(date3.tz_localize(None))
","import pandas as pd

# Read the data
data = pd.read_csv('time_series.csv')

# Create a new column in the dataframe
data['timezone'] = data['date'].dt.tz_localize(None)

# Remove the timezone information
data = data.drop(columns=['date', 'timezone'])

# Write the dataframe to a new csv file
data.to_csv('time_zone_"
1117,Write a Python program to print the calendar of a given month and year.,"import calendar
y = int(input(""Input the year : ""))
m = int(input(""Input the month : ""))
print(calendar.month(y, m))","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution 23"
1118,Write a Python program to count the number of lines in a text file. ,"def file_lengthy(fname):
        with open(fname) as f:
                for i, l in enumerate(f):
                        pass
        return i + 1
print(""Number of lines in the file: "",file_lengthy(""test.txt""))
","import os

def count_lines(filename):
    """"""
    Count the number of lines in a text file.
    """"""
    try:
        with open(filename, 'r') as f:
            contents = f.readlines()
            return len(contents)
    except FileNotFoundError:
        print(f'The file {filename} does not exist.')
        return 0

print(count_lines('text_file.txt'))

""""""
Output"
1119,Write a NumPy program to check element-wise True/False of a given array where signbit is set. ,"import numpy as np
x = np.array([-4, -3, -2, -1, 0, 1, 2, 3, 4])
print(""Original array: "")
print(x)
r1 = np.signbit(x)
r2 = x < 0
assert np.array_equiv(r1, r2)
print(r1)
","import numpy as np

a = np.array([1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0"
1120,"Write a Python program to calculate the sum of three given numbers, if the values are equal then return three times of their sum. ","def sum_thrice(x, y, z):

     sum = x + y + z
  
     if x == y == z:
      sum = sum * 3
     return sum

print(sum_thrice(1, 2, 3))
print(sum_thrice(3, 3, 3))
","def three_sum(nums):
    nums.sort()
    result = []
    for i in range(len(nums)):
        if i > 0 and nums[i] == nums[i-1]:
            continue
        if nums[i] > 0:
            break
        for j in range(i+1, len(nums)):
            if nums[j] > 0:
                break"
1121,Write a Python program to sort unsorted numbers using Patience sorting. ,"#Ref.https://bit.ly/2YiegZB
from bisect import bisect_left
from functools import total_ordering
from heapq import merge
@total_ordering
class Stack(list):
    def __lt__(self, other):
        return self[-1] < other[-1]
    def __eq__(self, other):
        return self[-1] == other[-1]
def patience_sort(collection: list) -> list:
    stacks = []
    # sort into stacks
    for element in collection:
        new_stacks = Stack([element])
        i = bisect_left(stacks, new_stacks)
        if i != len(stacks):
            stacks[i].append(element)
        else:
            stacks.append(new_stacks)

    # use a heap-based merge to merge stack efficiently
    collection[:] = merge(*[reversed(stack) for stack in stacks])
    return collection            
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
patience_sort(nums)
print(""Sorted order is:"", nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
patience_sort(nums)
print(""Sorted order is:"", nums)
","def sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [10, 7, 8, 9, 1, 5, 6, 4, 3, 2]
print(sort(arr))

""""""

def sort"
1122,Write a Pandas program to filter those records which not appears in a given list from world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
new_w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(new_w_a_con.head())
print(""\nSelect all rows which not appears in a given list:"")
who_region = [""Africa"", ""Eastern Mediterranean"", ""Europe""]
flt_wine = ~new_w_a_con[""WHO region""].isin(who_region)
print(new_w_a_con[flt_wine])
","import pandas as pd

df = pd.read_csv(""world_alcohol_consumption.csv"")

df = df[df['alcohol']!= '?']

df.to_csv('world_alcohol_consumption_filtered.csv')

# Solution:

df = pd.read_csv(""world_alcohol_consumption_filtered.csv"")

df = df[df['alcohol']!= '?']

df"
1123,"Write a Pandas program to create a Pivot table and count survival by gender, categories wise age of various classes. ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
age = pd.cut(df['age'], [0, 10, 30, 60, 80])
result = df.pivot_table('survived', index=['sex',age], columns='pclass', aggfunc='count')
print(result)
","import pandas as pd

df = pd.read_csv(""https://github.com/jbrownlee/Datasets/blob/master/iris.csv"")

df.head()

df.columns = ['sepal_length','sepal_width', 'petal_length', 'petal_width', 'class']

df.head()

df.describe()

df.groupby('class').surv"
1124,Write a NumPy program to round elements of the array to the nearest integer. ,"import numpy as np
x = np.array([-.7, -1.5, -1.7, 0.3, 1.5, 1.8, 2.0])
print(""Original array:"")
print(x)
x = np.rint(x)
print(""Round elements of the array to the nearest integer:"")
print(x)
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

rounded = np.around(a, decimals=2)

rounded = np.around(a, decimals=2)

rounded = np.around(a, decimals=2)

rounded = np.around(a, decimals=2)

rounded = np.around(a, decimals="
1125,Write a Pandas program to count the missing values in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df) 
print(""\nTotal missing values in a dataframe:"")
tot_missing_vals = df.isnull().sum().sum()
print(tot_missing_vals)
","import pandas as pd

# Read the data from the file
df = pd.read_csv(""data.csv"")

# Print the number of missing values in the DataFrame
print(df.isnull().sum())

# Print the number of missing values in the DataFrame
print(df.isnull().sum())

# Print the number of missing values in the DataFrame
print(df.isnull().sum())

# Print the number of missing values in the DataFrame"
1126,Write a Python program to remove all the values except integer values from a given array of mixed values. ,"def test(lst):
    return [lst for lst in lst if isinstance(lst, int)]
mixed_list = [34.67, 12, -94.89, ""Python"", 0, ""C#""]
print(""Original list:"", mixed_list)
print(""After removing all the values except integer values from the said array of mixed values:"")
print(test(mixed_list)) 
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr)

arr = np.delete(arr, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr)

arr = np.delete(arr, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],"
1127,Write a Python program to calculate the sum of two lowest negative numbers of a given array of integers. ,"def test(nums):
    result = sorted([item for item in nums if item < 0])
    return result[0]+result[1]

nums = [-14, 15, -10, -11, -12, -13, 16, 17, 18, 19, 20]
print(""Original list elements:"")
print(nums)
print(""Sum of two lowest negative numbers of the said array of integers: "",test(nums))
nums = [-4, 5, -2, 0, 3, -1, 4 , 9]
print(""\nOriginal list elements:"")
print(nums)
print(""Sum of two lowest negative numbers of the said array of integers: "",test(nums))
","def sum_of_numbers(nums):
    sum = 0
    for num in nums:
        if num < 0:
            sum += num
    return sum

print(sum_of_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))

""""""

def sum_of_numbers(nums):
    sum = 0
    for num"
1128,Write a Python program to convert a given list of lists to a dictionary. ,"def test(lst):
    result = {item[0]: item[1:] for item in lst}
    return result

students = [[1, 'Jean Castro', 'V'], [2, 'Lula Powell', 'V'], [3, 'Brian Howell', 'VI'], [4, 'Lynne Foster', 'VI'], [5, 'Zachary Simon', 'VII']]

print(""\nOriginal list of lists:"")
print(students)
print(""\nConvert the said list of lists to a dictionary:"")
print(test(students))
","l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}

l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7,"
1129,Write a Python program to extract a given number of randomly selected elements from a given list. ,"import random
def random_select_nums(n_list, n):
        return random.sample(n_list, n)
n_list = [1,1,2,3,4,4,5,1]
print(""Original list:"") 
print(n_list)
selec_nums = 3
result = random_select_nums(n_list, selec_nums)
print(""\nSelected 3 random numbers of the above list:"")
print(result) 
","import random

def random_selection(lst, n):
    """"""
    This function returns a list of n random elements from the given list.
    """"""
    return [lst[random.randint(0, len(lst) - 1)] for i in range(n)]

print(random_selection(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',"
1130," Write a Python program to that retrieves an arbitary Wikipedia page of ""Python"" and creates a list of links on that page. ","from urllib.request import urlopen
from urllib.error import HTTPError
from bs4 import BeautifulSoup
def getTitle(url):
    try:
        html = urlopen(url)
    except HTTPError as e:
        return None
    try:
        bsObj = BeautifulSoup(html.read(), ""lxml"")
        title = bsObj.body.h1
    except AttributeError as e:
        return None
    return title
    
    title = getTitle(url)
    if title == None:
      return ""Title could not be found""
    else:
      return title

print(getTitle(""https://www.w3resource.com/""))
print(getTitle(""http://www.example.com/""))
","import requests

url = ""https://en.wikipedia.org/wiki/Python""

response = requests.get(url)

print(response.text)

print(response.status_code)

print(response.headers)

print(response.headers.get('Content-Type'))

print(response.headers.get('Content-Language'))

print(response.headers.get('Content-Language', '"
1131,Write a Python program to alter the owner and the group id of a specified file. ,"import os
fd = os.open( ""/tmp"", os.O_RDONLY )
os.fchown( fd, 100, -1)
os.fchown( fd, -1, 50)
print(""Changed ownership successfully.."")
os.close( fd )
","import os

def alter_owner_and_group_id(file_name):
    # Open the file
    with open(file_name, 'r') as file:
        # Read the file
        data = file.read()
        # Change the owner
        data = data.replace('owner', 'owner_id')
        # Change the group id
        data = data.replace('group_id', 'group_id_id')
        # Write the file
        with"
1132,"Write a NumPy program to create a two-dimensional array with shape (8,5) of random numbers. Select random numbers from a normal distribution (200,7). ","import numpy as np 
np.random.seed(20) 
cbrt = np.cbrt(7)
nd1 = 200 
print(cbrt * np.random.randn(10, 4) + nd1) 
","import numpy as np

np.random.seed(0)

x = np.random.normal(loc=0, scale=1, size=(8,5))

print(x)

# Output:
[[ 0.9077999  0.9077999  0.9077999  0.9077999  0.9077999  0.9077"
1133,Write a Python program to multiply two integers without using the * operator in python. ,"def multiply(x, y):
    if y < 0:
        return -multiply(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply(x, y - 1)

print(multiply(3, 5));
","def multiply(a,b):
    return a*b

print(multiply(2,3))

""""""

# Solution:

def multiply(a,b):
    return a*b

print(multiply(2,3))"
1134,Write a Pandas program to extract email from a specified column of string type of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'name_email': ['Alberto Franco [emailprotected]','Gino Mcneill [emailprotected]','Ryan Parkes [emailprotected]', 'Eesha Hinton', 'Gino Mcneill [emailprotected]']
    })
print(""Original DataFrame:"")
print(df)
def find_email(text):
    email = re.findall(r'[\w\.-][emailprotected][\w\.-]+',str(text))
    return "","".join(email)
df['email']=df['name_email'].apply(lambda x: find_email(x))
print(""\Extracting email from dataframe columns:"")
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi', 'Ravi"
1135,Write a Python program to read a given CSV files with initial spaces after a delimiter and remove those initial spaces. ,"import csv
print(""\nWith initial spaces after a delimiter:\n"")
with open('departments.csv', 'r') as csvfile:
   data = csv.reader(csvfile, skipinitialspace=False)
   for row in data:
     print(', '.join(row))
print(""\n\nWithout initial spaces after a delimiter:\n"")
with open('departments.csv', 'r') as csvfile:
   data = csv.reader(csvfile, skipinitialspace=True)
   for row in data:
     print(', '.join(row))
","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)

# Solution:

# import csv
#
# with open('data.csv', 'r') as f:
#     csv_reader = csv.reader(f)
#     for row in csv_reader:
#         print"
1136,"Write a Pandas program to split a given dataset, group by one column and remove those groups if all the values of a specific columns are not available. ","import pandas as pd
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'weight': [173, 192, 186, 167, 151, 159],
    'height': [35, None, 33, 30, None, 32]},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])
print(""Original DataFrame:"")
print(df)
print(""\nGroup by one column and remove those groups if all the values of a specific columns are not available:"")
result = df[(~df['height'].isna()).groupby(df['school_code']).transform('any')]
print(result)
","import pandas as pd

# Read the data
df = pd.read_csv(""data/pima-indians-diabetes.csv"")

# Create a new column called 'Status'
df['Status'] = df['Outcome'].map({'Not Available': 0, 'Available': 1})

# Remove the 'Outcome' column
df = df.drop('Outcome', axis=1)"
1137,Write a Python program to check whether a string starts with specified characters.,"string = ""w3resource.com""
print(string.startswith(""w3r""))
","s = ""abcdefghijklmnopqrstuvwxyz""

print(""The string starts with the characters:"",s[0:5])

""""""

s = ""abcdefghijklmnopqrstuvwxyz""

print(""The string starts with the characters:"",s[0:5])

""""""

s = ""abcdefghijklmnopqrstuvwxyz""

print(""The string starts with the characters:"",s["
1138,Write a NumPy program to get the largest integer smaller or equal to the division of the inputs. ,"import numpy as np
x = [1., 2., 3., 4.]
print(""Original array:"")
print(x)
print(""Largest integer smaller or equal to the division of the inputs:"")
print(np.floor_divide(x, 1.5))
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
b = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(np.argmax(a))
print(np.argmin(a))

# Output:
# 1
# 2
# 3
# 4
# 5
# 6
# 7"
1139,Write a Python program to calculate the maximum aggregate from the list of tuples (pairs). ,"from collections import defaultdict
def max_aggregate(st_data):
    temp = defaultdict(int)
    for name, marks in st_data:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])


students = [('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]
print(""Original list:"")
print(students)
print(""\nMaximum aggregate value of the said list of tuple pair:"")
print(max_aggregate(students))
","def max_aggregate(pairs):
    max_aggregate = 0
    for pair in pairs:
        if max_aggregate < pair[1]:
            max_aggregate = pair[1]
    return max_aggregate

print(max_aggregate([(1, 2), (3, 4), (5, 6)]))

""""""

# Solution:

def max_aggregate(pairs):
    max_aggregate = 0"
1140,"Write a NumPy program to create a random array with 1000 elements and compute the average, variance, standard deviation of the array elements. ","import numpy as np
x = np.random.randn(1000)
print(""Average of the array elements:"")
mean = x.mean()
print(mean)
print(""Standard deviation of the array elements:"")
std = x.std()
print(std)
print(""Variance of the array elements:"")
var = x.var()
print(var)
","import numpy as np

# Create a random array of 1000 elements
np.random.seed(0)
a = np.random.randint(0, 100, 1000)

# Compute the average
avg = np.mean(a)

# Compute the variance
var = np.var(a)

# Compute the standard deviation
std = np.std(a)

# Print the results
print(""The"
1141,Write a NumPy program to split array into multiple sub-arrays along the 3rd axis. ,"import numpy as np    
print(""\nOriginal arrays:"")
x = np.arange(16.0).reshape(2, 2, 4)
print(x)
new_array1 = np.dsplit(x, 2)
print(""\nsplit array into multiple sub-arrays along the 3rd axis:"")
print(new_array1)
","import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(arr)

# Output:
[[1 2 3]
 [4 5 6]
 [7 8 9]]

# Output:
[[1 4]
 [2 5]
 [3 6]]

# Output:
[[1 4]
 [2 5]
 [3 6]]

#"
1142,Write a NumPy program to change the data type of an array. ,"import numpy as np
x = np.array([[2, 4, 6], [6, 8, 10]], np.int32)
print(x)
print(""Data type of the array x is:"",x.dtype)
# Change the data type of x
y = x.astype(float)
print(""New Type: "",y.dtype)
print(y)
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
a.dtype = np.int64

# a = np.array([1, 2, 3, 4, 5])
# a.dtype = np.float64

# a = np.array([1, 2, 3, 4, 5])
# a.dtype = np.int32

# a = np.array([1, 2, 3, 4, 5])"
1143,"Write a NumPy program to Create a 1-D array of 30 evenly spaced elements between 2.5. and 6.5, inclusive. ","import numpy as np
x = np.linspace(2.5, 6.5, 30)
print(x)
","import numpy as np

x = np.arange(2.5, 6.5, 0.1)

# Create a NumPy array of 30 evenly spaced elements between 2.5 and 6.5, inclusive.

# Create a NumPy array of 30 evenly spaced elements between 2.5 and 6.5, inclusive.

# Create a NumPy array of 30 evenly spaced elements between 2.5 and 6.5, inclusive."
1144,Write a Pandas program to drop the rows where all elements are missing in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[np.nan,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[np.nan,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': [np.nan,'2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[np.nan,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001]})

print(""Original Orders DataFrame:"")
print(df)
print(""\nDrop the rows where all elements are missing:"")
result = df.dropna(how='all')
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

# drop rows where all elements are missing in the DataFrame
df.dropna(inplace=True)

# print the DataFrame
print(df)

# output
#     col1  col2
# 0     1     10
# 1"
1145,Write a Pandas program to remove repetitive characters from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'text_code': ['t0001.','t0002','t0003', 't0004'],
    'text_lang': ['She livedd a long life.', 'How oold is your father?', 'What is tthe problem?','TThhis desk is used by Tom.']
    })
print(""Original DataFrame:"")
print(df)
def rep_char(str1):
    tchr = str1.group(0)
    if len(tchr) > 1:
        return tchr[0:1] # can change the value here on repetition
def unique_char(rep, sent_text):
    convert = re.sub(r'(\w)\1+', rep, sent_text) 
    return convert
df['normal_text']=df['text_lang'].apply(lambda x : unique_char(rep_char,x))
print(""\nRemove repetitive characters:"")
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', 'Rolf', '"
1146,Write a Python program to remove the specific item from a given list of lists. ,"import copy	
def remove_list_of_lists(color, N):
    for x in color:
        del x[N]
    return color

nums = [
        [""Red"",""Maroon"",""Yellow"",""Olive""],
        [""#FF0000"", ""#800000"", ""#FFFF00"", ""#808000""],
        [""rgb(255,0,0)"",""rgb(128,0,0)"",""rgb(255,255,0)"",""rgb(128,128,0)""]
       ]
nums1 =  copy.deepcopy(nums)
nums2 =  copy.deepcopy(nums)
nums3 =  copy.deepcopy(nums)

print(""Original list of lists:"")
print(nums)
N = 0
print(""\nRemove 1st item from the said list of lists:"")
print(remove_list_of_lists(nums1, N))
N = 1
print(""\nRemove 2nd item from the said list of lists:"")
print(remove_list_of_lists(nums2, N))
N = 3
print(""\nRemove 4th item from the said list of lists:"")
print(remove_list_of_lists(nums3, N))
","def remove_item(lst, item):
    for i in range(len(lst)):
        if lst[i][0] == item:
            lst.pop(i)
    return lst

lst = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
print(remove_item(lst, 5))

""""""

def remove_"
1147,Write a Pandas program to convert a given Series to an array. ,"import pandas as pd
import numpy as np
s1 = pd.Series(['100', '200', 'python', '300.12', '400'])
print(""Original Data Series:"")
print(s1)
print(""Series to an array"")
a = np.array(s1.values.tolist())
print (a)
","import pandas as pd

# Create a Pandas DataFrame from a Series
df = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Create an array from the Series
arr = df.values

# Create an array from a Series
arr2 = df.values

# Create an array from a Series
arr3 = df.values

# Create an array from a Series
arr4 = df.values

# Create"
1148,Write a NumPy program to split the element of a given array with spaces. ,"import numpy as np
x = np.array(['Python PHP Java C++'], dtype=np.str)
print(""Original Array:"")
print(x)
r = np.char.split(x)
print(""\nSplit the element of the said array with spaces: "")
print(r)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr)

# Solution:

# arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
# print(arr)
# print(arr.shape)
# print(arr.dtype)
# print(arr.ndim)
# print(arr."
1149,Write a Python program to find the item with maximum frequency in a given list. ,"from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result
nums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]
print (""Original list:"")
print(nums)
print(""\nItem with maximum frequency of the said list:"")
print(max_occurrences(nums))
","def max_freq(lst):
    max_freq = 0
    for i in lst:
        if i > max_freq:
            max_freq = i
    return max_freq

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_freq(lst))

""""""

def max_freq(lst):
    max_freq = 0"
1150,Write a Python program to check if a given element occurs at least n times in a list. ,"def check_element_in_list(lst, x, n):
    t = 0
    try:
        for _ in range(n):
            t = lst.index(x, t) + 1
        return True
    except ValueError:
        return False

nums = [0,1,3,5,0,3,4,5,0,8,0,3,6,0,3,1,1,0]
print(""Original list:"")
print(nums)
x = 3
n = 4
print(""\nCheck if"",x,""occurs at least"",n,""times in a list:"")
print(check_element_in_list(nums,x,n))
x = 0
n = 5
print(""\nCheck if"",x,""occurs at least"",n,""times in a list:"")
print(check_element_in_list(nums,x,n))
x = 8
n = 3
print(""\nCheck if"",x,""occurs at least"",n,""times in a list:"")
print(check_element_in_list(nums,x,n))
","def atLeastN(list, n):
    for i in range(len(list)):
        if list[i] < n:
            return False
    return True

print(atLeastN([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))

""""""

def atLeastN(list, n):
    for i in range(len(list)):
        if list[i] < n:"
1151,Write a Python program to find maximum length of consecutive 0's in a given binary string. ,"def max_consecutive_0(input_str): 
     return  max(map(len,input_str.split('1')))
str1 = '111000010000110'
print(""Original string:"" + str1)
print(""Maximum length of consecutive 0s:"")
print(max_consecutive_0(str1))
str1 = '111000111'
print(""Original string:"" + str1)
print(""Maximum length of consecutive 0s:"")
print(max_consecutive_0(str1))
","def max_consecutive_zeroes(binary_string):
    max_len = 0
    for i in range(len(binary_string)):
        if binary_string[i] == '0':
            if i == 0 or binary_string[i-1] == '0':
                max_len += 1
            else:
                max_len = max(max_len, i-1)
    return max_len

print(max_consecutive"
1152,Write a python program to find the next smallest palindrome of a specified number. ,"import sys
def Next_smallest_Palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i

print(Next_smallest_Palindrome(99));
print(Next_smallest_Palindrome(1221));
","def next_smallest(n):
    if n == 1:
        return 1
    if n == 2:
        return 2
    if n == 3:
        return 3
    if n % 2 == 0:
        return next_smallest(n//2)
    else:
        return next_smallest(n-1)

print(next_smallest(int(input())))

""""""

def next_smallest(n):
    if n =="
1153,Write a Python program to generate an infinite cycle of elements from an iterable. ,"import itertools as it
def cycle_data(iter):
    return it.cycle(iter)
# Following  loops will run for ever    
#List
result = cycle_data(['A','B','C','D'])
print(""The said function print never-ending items:"")
for i in result:
    print(i)

#String
result = cycle_data('Python itertools')
print(""The said function print never-ending items:"")
for i in result:
    print(i)
","def cycle(iterable):
    for i in iterable:
        yield i

# Create a generator object
gen = cycle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Print the first element of the generator object
print(next(gen))

# Print the second element of the generator object
print(next(gen))

# Print the third element of the generator object
print(next(gen))

# Print the fourth"
1154,Write a NumPy program totest whether any of the elements of a given array is non-zero. ,"import numpy as np
x = np.array([1, 0, 0, 0])
print(""Original array:"")
print(x)
print(""Test whether any of the elements of a given array is non-zero:"")
print(np.any(x))
x = np.array([0, 0, 0, 0])
print(""Original array:"")
print(x)
print(""Test whether any of the elements of a given array is non-zero:"")
print(np.any(x))
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

if np.nonzero(a)[0].size!= 0:
    print(""Array contains non-zero elements."")
else:
    print(""Array does not contain non-zero elements."")

# Output:
# Array contains non-zero elements.
# 
# Array does not contain non-zero elements."
1155,Write a Python program to get the array size of types unsigned integer and float. ,"from array import array
a = array(""I"", (12,25))
print(a.itemsize)
a = array(""f"", (12.236,36.36))
print(a.itemsize)
","def get_array_size(arr):
    return len(arr)

print(get_array_size([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def get_array_size(arr):
    return len(arr)

print(get_array_size([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def get_array_size("
1156,Write a Python program to print the index of the character in a string. ,"str1 = ""w3resource""
for index, char in enumerate(str1):
    print(""Current character"", char, ""position at"", index )
","def index_of_char(string, char):
    for i in range(len(string)):
        if string[i] == char:
            return i
    return -1

# driver code
string = ""Python is fun""
char = ""P""

print(index_of_char(string, char))

# Output:
# -1
# -1
# -1
# -1
# -1
# -1
# -1
# -1"
1157,Write a Python program to parse a given CSV string and get the list of lists of string values. Use csv.reader,"import csv
csv_string = """"""1,2,3
4,5,6
7,8,9
""""""
print(""Original string:"")
print(csv_string)
lines = csv_string.splitlines()
print(""List of CSV formatted strings:"")
print(lines)
reader = csv.reader(lines)
parsed_csv = list(reader)
print(""\nList representation of the CSV file:"")
print(parsed_csv)
","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    data = list(csv_reader)

data = data[1:]

for i in range(len(data)):
    data[i] = data[i][0].split(',')

print(data)

# Solution:

import csv

with open('data.csv',"
1158,"Write a Pandas program to filter all records starting from the 'Year' column, access every other column from world alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nFrom the 'Year' column, access every other column:"")
print(w_a_con.loc[:,'Year'::2].head(10))
print(""\nAlternate solution:"")
print(w_a_con.iloc[:,0::2].head(10))
","import pandas as pd

df = pd.read_csv('world_alcohol_consumption.csv')

df = df[df['Year'] >= '1960']

df = df[df['Year'] <= '1980']

df = df[df['World'] >= '0-1']

df = df[df['World'] <= '10']

df = df[df['World'] >= '10-20']"
1159,"Write a Pandas program to get the current date, oldest date and number of days between Current date and oldest date of Ufo dataset. ","import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nCurrent date of Ufo dataset:"")
print(df.Date_time.max())
print(""\nOldest date of Ufo dataset:"")
print(df.Date_time.min())
print(""\nNumber of days between Current date and oldest date of Ufo dataset:"")
print((df.Date_time.max() - df.Date_time.min()).days)
","import pandas as pd
import datetime

df = pd.read_csv('https://github.com/datasets/ufo-data/raw/master/data/ufo-data.csv')
df['date'] = pd.to_datetime(df['date'])
df['date'] = df['date'].dt.date
df['date'] = df['date'].dt.strftime('%"
1160,Write a Python program to filter even numbers from a given dictionary values. ,"def test(dictt):
    result = {key: [idx for idx in val if not idx % 2]  
          for key, val in dictt.items()}   
    return result    

students = {'V' : [1, 4, 6, 10], 'VI' : [1, 4, 12], 'VII' : [1, 3, 8]} 
print(""\nOriginal Dictionary:"")
print(students)
print(""Filter even numbers from said dictionary values:"")
print(test(students))

students = {'V' : [1, 3, 5], 'VI' : [1, 5], 'VII' : [2, 7, 9]} 
print(""\nOriginal Dictionary:"")
print(students)
print(""Filter even numbers from said dictionary values:"")
print(test(students))
","def even_numbers(d):
    new_dict = {}
    for key, value in d.items():
        if key % 2 == 0:
            new_dict[key] = value
    return new_dict

print(even_numbers({1: 2, 3: 4, 5: 6, 7: 8, 9: 10, 11: 12, 12: 13}))

""""""

def even_numbers(d):
    new_dict = {}
    for key"
1161,Write a Pandas program to split the following dataset using group by on first column and aggregate over multiple lists on second column. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
df = pd.DataFrame({
    'student_id': ['S001','S001','S002','S002','S003','S003'],
    'marks': [[88,89,90],[78,81,60],[84,83,91],[84,88,91],[90,89,92],[88,59,90]]})
print(""Original DataFrame:"")
print(df)
print(""\nGroupby and aggregate over multiple lists:"")
result = df.set_index('student_id')['marks'].groupby('student_id').apply(list).apply(lambda x: np.mean(x,0))
print(result)
","import pandas as pd

df = pd.read_csv(""https://github.com/datasets/csv/raw/master/data/finance.csv"")

df.groupby(['first_name', 'last_name']).agg(
    {'balance': ['sum']}).reset_index()

df.groupby(['first_name', 'last_name']).agg(
    {'balance': ['"
1162,Write a NumPy program to calculate the arithmetic means of corresponding elements of two given arrays of same size. ,"import numpy as np 
nums1 = np.array([[2, 5, 2],
              [1, 5, 5]])
nums2 = np.array([[5, 3, 4],
              [3, 2, 5]])
print(""Array1:"") 
print(nums1)
print(""Array2:"") 
print(nums2)
print(""\nArithmetic means of corresponding elements of said two arrays:"")
print(np.divide(np.add(nums1, nums2), 2))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(np.mean(a, axis=0))
print(np.mean(b, axis=0))

# Output:
# [7.5 6.5]
# [10.5 11.5]

# H"
1163,Write a Python program to count the number of sublists contain a particular element. ,"def count_element_in_list(input_list, x): 
    ctr = 0
    for i in range(len(input_list)): 
        if x in input_list[i]: 
            ctr+= 1
          
    return ctr
      

list1 = [[1, 3], [5, 7], [1, 11], [1, 15, 7]] 
print(""Original list:"")
print(list1)
print(""\nCount 1 in the said list:"")
print(count_element_in_list(list1, 1)) 
print(""\nCount 7 in the said list:"")
print(count_element_in_list(list1, 7)) 


list1 = [['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']] 
print(""\nOriginal list:"")
print(list1)
print(""\nCount 'A' in the said list:"")
print(count_element_in_list(list1, 'A')) 
print(""\nCount 'E' in the said list:"")
print(count_element_in_list(list1, 'E'))
","def count_sublists(arr, element):
    count = 0
    for i in range(len(arr)):
        if arr[i] == element:
            count += 1
    return count

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
element = 5
print(count_sublists(arr, element))

""""""

def count_sublists(arr, element):
    count = 0
    for i"
1164,"Write a NumPy program to create a three-dimension array with shape (3,5,4) and set to a variable. ","import numpy as np  
nums = np.array([[[1, 5, 2, 1],
               [4, 3, 5, 6],
               [6, 3, 0, 6],
               [7, 3, 5, 0],
               [2, 3, 3, 5]],
              
              [[2, 2, 3, 1],
               [4, 0, 0, 5],
               [6, 3, 2, 1],
               [5, 1, 0, 0],               
               [0, 1, 9, 1]],
              
              [[3, 1, 4, 2],
               [4, 1, 6, 0],
               [1, 2, 0, 6],
               [8, 3, 4, 0],               
               [2, 0, 2, 8]]]) 
print(""Array:"")
print(nums)
","import numpy as np

arr = np.array([[1,2,3,4,5],
                [6,7,8,9,10],
                [11,12,13,14,15]])

arr = np.array([[1,2,3,4,5],
                [6,7,8,9,10],
                [11,12,13,14,15]])

arr"
1165,Write a NumPy program to create random set of rows from 2D array. ,"import numpy as np
new_array = np.random.randint(5, size=(5,3))
print(""Random set of rows from 2D array array:"")
print(new_array)
","import numpy as np

# Create a 2D array
A = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
              [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
              [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]])

# Print the array
print(A)

# Create a random 2D array
B ="
1166,"Write a Python program to get the difference between two given lists, after applying the provided function to each list element of both. ","def difference_by(a, b, fn):
  _b = set(map(fn, b))
  return [item for item in a if fn(item) not in _b]
from math import floor
print(difference_by([2.1, 1.2], [2.3, 3.4], floor)) 
print(difference_by([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], lambda v : v['x']))
","def get_difference(list1, list2):
    return list1[0] - list2[0], list1[1] - list2[1]

print(get_difference([1, 2, 3], [4, 5, 6]))

""""""

def get_difference(list1, list2):
    return list1[0] - list2[0], list1[1] - list2[1]"
1167,Write a Pandas program to create a Pivot table and calculate number of women and men were in a particular cabin class. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table(index=['sex'], columns=['pclass'], aggfunc='count')
print(result)
","import pandas as pd

df = pd.read_csv(""C:\\Users\\DELL\\Desktop\\Python\\Data_Visualization\\cabin_class.csv"")

df.head()

df.columns

df.shape

df.dtypes

df.describe()

df.isnull().sum()

df.dropna(inplace=True)

df.head()

df."
1168,"Write a Python program to get a new string from a given string where ""Is"" has been added to the front. If the given string already begins with ""Is"" then return the string unchanged. ","def new_string(str):
  if len(str) >= 2 and str[:2] == ""Is"":
    return str
  return ""Is"" + str

print(new_string(""Array""))
print(new_string(""IsEmpty""))
","def is_is(s):
    if s[0] == 'I':
        return s[1:]
    else:
        return s

print(is_is('Is Is'))

""""""

def is_is(s):
    if s[0] == 'I':
        return s[1:]
    else:
        return s

print("
1169,Write a Python program to remove all elements from a given list present in another list. ,"def index_on_inner_list(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result

list1 = [1,2,3,4,5,6,7,8,9,10]
list2 = [2,4,6,8]

print(""Original lists:"")
print(""list1:"", list1)
print(""list2:"", list2)

print(""\nRemove all elements from 'list1' present in 'list2:"")
print(index_on_inner_list(list1, list2))
","def remove_elements(lst, ele):
    lst.remove(ele)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
ele = 5
remove_elements(lst, ele)
print(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
ele = 5
remove_elements(lst, ele)
print"
1170,Write a Python program to concatenate all elements in a list into a string and return it. ,"def concatenate_list_data(list):
    result= ''
    for element in list:
        result += str(element)
    return result

print(concatenate_list_data([1, 5, 12, 2]))
","def concatenate_list(list):
    return """".join(list)

print(concatenate_list([1, 2, 3]))

""""""

def concatenate_list(list):
    return """".join(list)

print(concatenate_list([1, 2, 3]))

""""""

def concatenate_list(list):
    return """".join(list)

print(concaten"
1171,Write a Pandas program to select a specific row of given series/dataframe by integer index. ,"import pandas as pd
ds = pd.Series([1,3,5,7,9,11,13,15], index=[0,1,2,3,4,5,7,8])
print(""Original Series:"")
print(ds)
print(""\nPrint specified row from the said series using location based indexing:"")
print(""\nThird row:"")
print(ds.iloc[[2]])
print(""\nFifth row:"")
print(ds.iloc[[4]])
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32]})

print(""Original DataFrame with single index:"")
print(df)
print(""\nPrint specified row from the said DataFrame using location based indexing:"")
print(""\nThird row:"")
print(df.iloc[[2]])
print(""\nFifth row:"")
print(df.iloc[[4]])
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

# Create a series
s = pd.Series([1, 2, 3, 4, 5])

# Select a specific row
print(df.iloc[0])

# Select a specific row
print(df.il"
1172,"Write a Python program to check if a function is a user-defined function or not. Use types.FunctionType, types.LambdaType()","import types
def func(): 
    return 1

print(isinstance(func, types.FunctionType))
print(isinstance(func, types.LambdaType))
print(isinstance(lambda x: x, types.FunctionType))
print(isinstance(lambda x: x, types.LambdaType))
print(isinstance(max, types.FunctionType))
print(isinstance(max, types.LambdaType))
print(isinstance(abs, types.FunctionType))
print(isinstance(abs, types.LambdaType))
","def is_user_defined_function(func):
    if type(func) == types.FunctionType:
        return True
    else:
        return False

print(is_user_defined_function(lambda x: x + 1))

""""""

# Solution:

def is_user_defined_function(func):
    if type(func) == types.FunctionType:
        return True
    else:"
1173,Write a Python program to match key values in two dictionaries. ,"x = {'key1': 1, 'key2': 3, 'key3': 2}
y = {'key1': 1, 'key2': 2}
for (key, value) in set(x.items()) & set(y.items()):
    print('%s: %s is present in both x and y' % (key, value))
	","def match_key_values(dict1, dict2):
    for key in dict1:
        if key in dict2:
            if dict1[key] == dict2[key]:
                print(f""{key} is a match"")
            else:
                print(f""{key} is not a match"")
        else:
            print(f""{key} is not a match"")

if __name__ == '__main__':
    dict1 = {'a': 1"
1174,Write a Python program to add a prefix text to all of the lines in a string. ,"import textwrap
sample_text ='''
    Python is a widely used high-level, general-purpose, interpreted,
    dynamic programming language. Its design philosophy emphasizes
    code readability, and its syntax allows programmers to express
    concepts in fewer lines of code than possible in languages such
    as C++ or Java.
    '''
text_without_Indentation = textwrap.dedent(sample_text)
wrapped = textwrap.fill(text_without_Indentation, width=50)
#wrapped += '\n\nSecond paragraph after a blank line.'
final_result = textwrap.indent(wrapped, '> ')
print()
print(final_result)
print()
","def add_prefix(string, prefix):
    return prefix.join(string.splitlines())

print(add_prefix(""Hello World"", ""Hello""))

""""""

def add_prefix(string, prefix):
    return prefix.join(string.splitlines()) + "" ""

print(add_prefix(""Hello World"", ""Hello""))"
1175,Write a Python program to move a specified element in a given list. ,"def group_similar_items(seq,el):
    seq.append(seq.pop(seq.index(el)))
    return seq 

colors = ['red','green','white','black','orange']
print(""Original list:"")
print(colors)
el = ""white""
print(""Move"",el,""at the end of the said list:"")
print(group_similar_items(colors, el))

colors = ['red','green','white','black','orange']
print(""\nOriginal list:"")
print(colors)
el = ""red""
print(""Move"",el,""at the end of the said list:"")
print(group_similar_items(colors, el))

colors = ['red','green','white','black','orange']
print(""\nOriginal list:"")
print(colors)
el = ""black""
print(""Move"",el,""at the end of the said list:"")
print(group_similar_items(colors, el))
","def move_element(list, element, position):
    list.insert(position, element)

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
element = 5
position = 2
move_element(list, element, position)
print(list)

""""""

def move_element(list, element, position):
    list.insert(position, element)

list = [1, 2, 3, 4, 5, 6,"
1176,"Write a NumPy program to create a 2-D array whose diagonal equals [4, 5, 6, 8] and 0's elsewhere. ","import numpy as np
x =  np.diagflat([4, 5, 6, 8])
print(x)
","import numpy as np

a = np.array([[4, 5, 6, 8],
              [0, 0, 0, 0]])

print(a)

# output:
[[4 4 4 4]
 [0 0 0 0]
 [0 0 0 0]]

""""""

import numpy as np

a = np.array([[4, 5, 6, 8],
              [0,"
1177,Write a Python program to computing square roots using the Babylonian method. ,"def BabylonianAlgorithm(number):
    if(number == 0):
        return 0;

    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;

    return g;
print('The Square root of 0.3 =', BabylonianAlgorithm(0.3));
",">>> import math
>>> def sqrt(x):
...     if x == 0:
...         return 0
...     else:
...         y = math.sqrt(x)
...         return y
>>> sqrt(4)
2.0
>>> sqrt(4.0)
2.0
>>> sqrt(4.5)
1.0
>>> sqrt(4.5)
1.0
>>> sqrt(4.5)
1.0
>>> sqrt"
1178,Write a Python program to find thegreatest common divisor(gcd) of two integers. ,"def Recurgcd(a, b):
	low = min(a, b)
	high = max(a, b)

	if low == 0:
		return high
	elif low == 1:
		return 1
	else:
		return Recurgcd(low, high%low)
print(Recurgcd(12,14))
","def gcd(x, y):
    if x > y:
        x, y = y, x
    for i in range(1, y):
        if x % i == 0 and y % i == 0:
            gcd = i
    return gcd

print(gcd(12, 24))

""""""

# Solution:

def gcd(x, y):
    if x > y:
        x, y = y, x"
1179,Write a Pandas program to create a DataFrame using intervals as an index. ,"import pandas as pd
print(""Create an Interval Index using IntervalIndex.from_breaks:"")
df_interval = pd.DataFrame({""X"":[1, 2, 3, 4, 5, 6, 7]},
                            index = pd.IntervalIndex.from_breaks(
                            [0, 0.5, 1.0, 1.5, 2.0, 2.5, 3, 3.5]))    
print(df_interval)
print(df_interval.index)

print(""\nCreate an Interval Index using IntervalIndex.from_tuples:"")
df_interval = pd.DataFrame({""X"":[1, 2, 3, 4, 5, 6, 7]},             
                            index = pd.IntervalIndex.from_tuples(
                            [(0, .5), (.5, 1), (1, 1.5), (1.5, 2), (2, 2.5), (2.5, 3), (3, 3.5)]))
print(df_interval)
print(df_interval.index)

print(""\nCreate an Interval Index using IntervalIndex.from_arrays:"")
df_interval = pd.DataFrame({""X"":[1, 2, 3, 4, 5, 6, 7]},             
                            index = pd.IntervalIndex.from_arrays(
                            [0, .5, 1, 1.5, 2, 2.5, 3], [.5, 1, 1.5, 2, 2.5, 3, 3.5]))
print(df_interval)
print(df_interval.index) 
","import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'A': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'B': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20],
                   'C': [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]})

# Create a DataFrame from a Series
df"
1180,Write a NumPy program to divide each row by a vector element. ,"import numpy as np
x = np.array([[20,20,20],[30,30,30],[40,40,40]])
print(""Original array:"")
print(x)
v = np.array([20,30,40])
print(""Vector:"")
print(v)
print(x / v[:,None])
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a/b)

# Output:
[[1. 2. 3.]
 [4. 5. 6.]]

# %%"
1181,Write a Python program to print the following 'here document'. ,"print(""""""
a string that you ""don't"" have to escape
This
is a  ....... multi-line
heredoc string --------> example
"""""")
","https://www.w3resource.com/python-exercises/python-basic-exercises.php

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

#"
1182,Write a Python program to print the element(s) that has a specified id of a given web page. ,"import requests
import re
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""\nelement(s) that has #python-network id:\n"")
print(soup.select_one(""#python-network""))
","def get_id(web_page):
    for i in range(len(web_page)):
        if web_page[i] == '<':
            return i

print(get_id('<html><body><h1>Hello</h1></body></html>'))

""""""

def get_id(web_page):
    for i in range(len(web_page)):
        if web_page[i] =="
1183,Write a Python program to get a string which is n (non-negative integer) copies of a given string. ,"def larger_string(str, n):
   result = """"
   for i in range(n):
      result = result + str
   return result

print(larger_string('abc', 2))
print(larger_string('.py', 3))
","def get_string(n):
    return """".join(random.choice(string.ascii_letters) for i in range(n))

print(get_string(5))

""""""

# Solution:

def get_string(n):
    return """".join(random.choice(string.ascii_letters) for i in range(n))

print(get_string(5))"
1184,Write a Python program to split a list based on first character of word. ,"from itertools import groupby
from operator import itemgetter

word_list = ['be','have','do','say','get','make','go','know','take','see','come','think',
     'look','want','give','use','find','tell','ask','work','seem','feel','leave','call']

for letter, words in groupby(sorted(word_list), key=itemgetter(0)):
    print(letter)
    for word in words:
        print(word)
","lst = [""apple"", ""banana"", ""cherry""]

print(lst[0].split(""a""))

# Output: ['apple', 'banana']

# lst = [""apple"", ""banana"", ""cherry""]
# print(lst[0].split(""a""))

# Output: ['apple', 'banana']

# lst = [""apple"", ""banana"", ""cherry""]
# print(lst[0].split(""a"", 1"
1185,Write a NumPy program to extract all the elements of the third column from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: Third column"")
print(arra_data[:,2])
","import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12],
                [13, 14, 15, 16]])

print(arr[:, 2])

# Output:
# [1 2 3 4]
# [5 6 7 8]
# [9 10 11 12]
# [13 14 15 16]"
1186,Write a Python program to format a specified string limiting the length of a string. ,"str_num = ""1234567890""
print(""Original string:"",str_num)
print('%.6s' % str_num)
print('%.9s' % str_num)
print('%.10s' % str_num)
","s = ""Hello World""
print(s[:5])

""""""

s = ""Hello World""
print(s[:5])"
1187,Write a Python program to check whether a given string is number or not using Lambda. ,"is_num = lambda q: q.replace('.','',1).isdigit()
print(is_num('26587'))
print(is_num('4.2365'))
print(is_num('-12547'))
print(is_num('00'))
print(is_num('A001'))
print(is_num('001'))
print(""\nPrint checking numbers:"")
is_num1 = lambda r: is_num(r[1:]) if r[0]=='-' else is_num(r)
print(is_num1('-16.4'))
print(is_num1('-24587.11'))
","def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False

print(is_number('1'))
print(is_number('1.1'))
print(is_number('1.1.1'))
print(is_number('1.1.1.1'))
print(is_number('1.1.1.1.1'))
print(is_number('"
1188,Write a Python program to count the number occurrence of a specific character in a string. ,"s = ""The quick brown fox jumps over the lazy dog.""  
print(""Original string:"")
print(s)
print(""Number of occurrence of 'o' in the said string:"")
print(s.count(""o""))
","def count_occurrence(string, char):
    count = 0
    for i in string:
        if i == char:
            count += 1
    return count

print(count_occurrence(""Python"", ""P""))

""""""

def count_occurrence(string, char):
    count = 0
    for i in string:
        if i == char:
            count += 1
    return count

print(count_occurrence(""Python"", ""P""))"
1189,"Write a NumPy program to create a 1-D array of 20 element spaced evenly on a log scale between 2. and 5., exclusive. ","import numpy as np
x =  np.logspace(2., 5., 20, endpoint=False)
print(x)
","import numpy as np

x = np.linspace(2, 5, 20)

# Create a 1-D array of 20 elements spaced evenly on a log scale between 2 and 5.

# Create a 1-D array of 20 elements spaced evenly on a log scale between 2 and 5.

# Create a 1-D array of 20 elements spaced evenly on a log scale between 2 and 5.

# Create a 1-D array"
1190,"Write a NumPy program to broadcast on different shapes of arrays where a(,3) + b(3). ","import numpy as np    
p = np.array([[0], [10], [20]]) 
q= np.array([10, 11, 12]) 
print(""Original arrays:"")
print(""Array-1"")
print(p)
print(""Array-2"")
print(q)
print(""\nNew Array:"")
new_array1 = p + q 
print(new_array1)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a + b)

# Output:
[[1 2 3]
 [4 5 6]
 [7 8 9]
 [10 11 12]]

# Output:
[[1 4]
 [2 5]
 ["
1191,"Write a Python program to configure the rounding to round to the floor, ceiling. Use decimal.ROUND_FLOOR, decimal.ROUND_CEILING","import decimal
print(""Configure the rounding to round to the floor:"")
decimal.getcontext().prec = 4
decimal.getcontext().rounding = decimal.ROUND_FLOOR
print(decimal.Decimal(20) / decimal.Decimal(6))
print(""\nConfigure the rounding to round to the ceiling:"")
decimal.getcontext().prec = 4
decimal.getcontext().rounding = decimal.ROUND_CEILING
print(decimal.Decimal(20) / decimal.Decimal(6))
","import decimal

def rounding(x):
    return decimal.ROUND_FLOOR(x, decimal.ROUND_CEILING)

print(rounding(3.141592653589793))
print(rounding(3.141592653589793))
print(rounding(3.141592653589793))
print(rounding(3.141592653589793))"
1192,Write a Python program to read and display the content of a given CSV file. Use csv.reader,"import csv
reader = csv.reader(open(""employees.csv""))
for row in reader:
    print(row)
","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)

""""""

import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)"
1193,Write a Python program that will accept the base and height of a triangle and compute the area. ,"b = int(input(""Input the base : ""))
h = int(input(""Input the height : ""))

area = b*h/2

print(""area = "", area)
","# Solution:

# Input:
# The first line contains an integer T, the number of test cases.
# The first line of each test case contains an integer N, the number of vertices of the triangle.
# The second line contains N space separated integers, the coordinates of the vertices.
# Output:
# The first line contains an integer T, the number of test cases.
# The first line of each test case contains an integer N, the number of vertices of the triangle."
1194,Write a NumPy program to compute the sum of the diagonal element of a given array. ,"import numpy as np
m = np.arange(6).reshape(2,3)
print(""Original matrix:"")
print(m)
result =  np.trace(m)
print(""Condition number of the said matrix:"")
print(result)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a.diagonal())

# Output:
# [1 2 3]
# [4 5 6]
# [7 8 9]

# Hint: To solve this problem, you'll need to use the NumPy library.
# You can find NumPy's diagonal function in the NumPy library.
# You"
1195,Write a Python program to find three integers which gives the sum of zero in a given array of integers using Binary Search (bisect). ,"from bisect import bisect, bisect_left
from collections import Counter
class Solution:
    def three_Sum(self, nums):
        """"""
        :type nums: List[int]
        :rtype: List[List[int]]
        """"""
        triplets = []
        if len(nums) < 3:
            return triplets
        num_freq = Counter(nums)
        nums = sorted(num_freq)  # Sorted unique numbers
        max_num = nums[-1]
        for i, v in enumerate(nums):
            if num_freq[v] >= 2:
                complement =  -2 * v
                if complement in num_freq:
                    if complement != v or num_freq[v] >= 3:
                        triplets.append([v] * 2 + [complement])

            # When all 3 numbers are different.
            if v < 0:  # Only when v is the smallest
                two_sum = -v

                # Lower/upper bound of the smaller of remainingtwo.
                lb = bisect_left(nums, two_sum - max_num, i + 1)
                ub = bisect(nums, two_sum // 2, lb)                       
                for u in nums[lb : ub]:
                    complement = two_sum - u
                    if complement in num_freq and u != complement:
                        triplets.append([v, u, complement])
        return triplets
nums = [-20, 0, 20, 40, -20, -40, 80]
s = Solution()
result = s.three_Sum(nums)
print(result)
nums = [1, 2, 3, 4, 5, -6]
result = s.three_Sum(nums)
print(result)
","def solution(arr):
    # Write your code here
    sum = 0
    for i in range(len(arr)):
        sum += arr[i]
    return sum

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(arr))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
1196,Write a Python program to find the items that are parity outliers in a given list. ,"from collections import Counter
def find_parity_outliers(nums):
  return [
    x for x in nums
    if x % 2 != Counter([n % 2 for n in nums]).most_common()[0][0]
  ] 
print(find_parity_outliers([1, 2, 3, 4, 6]))  
print(find_parity_outliers([1, 2, 3, 4, 5, 6, 7]))
","import numpy as np

def is_par(x):
    return x % 2 == 0

def is_par_outlier(x):
    return np.any(is_par(x) == False)

def is_par_outlier_list(x):
    return [is_par(x) == False for x in x]

def is_par_outlier_list_2(x):
    return [is_par(x) == False"
1197,Write a Python program to convert an array to an array of machine values and return the bytes representation. ,"from array import *
print(""Bytes to String: "")
x = array('b', [119, 51, 114, 101,  115, 111, 117, 114, 99, 101])
s = x.tobytes()
print(s)
","def array_to_bytes(arr):
    return bytes(arr)

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(array_to_bytes(arr))

""""""

# Solution 1

def array_to_bytes(arr):
    return bytes(arr)

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(array"
1198,Write a Python program to retrieve children of the html tag from a given web page. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""\nChildren of the html tag (https://www.python.org):\n"")
root = soup.html    
root_childs = [e.name for e in root.children if e.name is not None]
print(root_childs)

","import requests
from bs4 import BeautifulSoup

url = ""https://www.python.org/blogs/python-web-scraping/p/python-web-scraping-with-beautifulsoup-and-selenium-in-python-3""

r = requests.get(url)

soup = BeautifulSoup(r.text, 'html.parser')

print(soup.prettify())

# print(soup.pre"
1199,Write a Pandas program to append a list of dictioneries or series to a existing DataFrame and display the combined data. ,"import pandas as pd
student_data1  = pd.DataFrame({
        'student_id': ['S1', 'S2', 'S3', 'S4', 'S5'],
         'name': ['Danniella Fenton', 'Ryder Storey', 'Bryce Jensen', 'Ed Bernal', 'Kwame Morin'], 
        'marks': [200, 210, 190, 222, 199]})

s6 = pd.Series(['S6', 'Scarlette Fisher', 205], index=['student_id', 'name', 'marks'])


dicts = [{'student_id': 'S6', 'name': 'Scarlette Fisher', 'marks': 203},
         {'student_id': 'S7', 'name': 'Bryce Jensen', 'marks': 207}]

print(""Original DataFrames:"")
print(student_data1)
print(""\nDictionary:"")
print(s6)
combined_data =  student_data1.append(dicts, ignore_index=True, sort=False)
print(""\nCombined Data:"")
print(combined_data)
","import pandas as pd

data = [
    {'name': 'Krishna', 'roll': 100,'marks': [90, 95, 90, 100]},
    {'name': 'Anita', 'roll': 98,'marks': [85, 90, 95, 100]},
    {'name': 'Sara', 'roll': 98,'marks': [85, 90, 95, 100]},
    {'name':"
1200,Write a Python program to sort a list of elements using shell sort algorithm. ,"def shellSort(alist):
    sublistcount = len(alist)//2
    while sublistcount > 0:
      for start_position in range(sublistcount):
        gap_InsertionSort(alist, start_position, sublistcount)

      print(""After increments of size"",sublistcount, ""The list is"",nlist)

      sublistcount = sublistcount // 2

def gap_InsertionSort(nlist,start,gap):
    for i in range(start+gap,len(nlist),gap):

        current_value = nlist[i]
        position = i

        while position>=gap and nlist[position-gap]>current_value:
            nlist[position]=nlist[position-gap]
            position = position-gap

        nlist[position]=current_value


nlist = [14,46,43,27,57,41,45,21,70]
shellSort(nlist)
print(nlist)
","def shellSort(arr):
    n = len(arr)
    gap = n // 2
    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]
            j = i
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp
        gap //= 2
    return arr

arr = [12, 11"
1201,Write a Python NumPy program to compute the weighted average along the specified axis of a given flattened array. ,"import numpy as np
a = np.arange(9).reshape((3,3))
print(""Original flattened array:"")
print(a)
print(""Weighted average along the specified axis of the above flattened array:"")
print(np.average(a, axis=1, weights=[1./4, 2./4, 2./4]))
","import numpy as np

a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

axis = 1

def weighted_average(a, axis):
    """"""
    Compute the weighted average along the specified axis.
    
    Parameters
    ----------
    a : array_like
        Array containing data to be averaged.
    axis : int
        Axis along"
1202,Write a Python program to multiply all the items in a dictionary. ,"my_dict = {'data1':100,'data2':-54,'data3':247}
result=1
for key in my_dict:    
    result=result * my_dict[key]

print(result)
","def multiply(d):
    for i in d:
        d[i] = d[i] * 10
    return d

d = {'a': 1, 'b': 2, 'c': 3}
print(multiply(d))

""""""

# Solution:

def multiply(d):
    for i in d:
        d[i] = d[i] * 10
    return d

d = {'a': 1, 'b': 2, 'c"
1203,Write a Python program to count number of substrings with same first and last characters of a given string. ,"def no_of_substring_with_equalEnds(str1): 
	result = 0; 
	n = len(str1); 
	for i in range(n): 
		for j in range(i, n): 
			if (str1[i] == str1[j]): 
				result = result + 1
	return result 
str1 = input(""Input a string: "")
print(no_of_substring_with_equalEnds(str1))
","def count_substring(string, sub_string):
    count = 0
    for i in range(len(string)):
        if string[i:i+len(sub_string)] == sub_string:
            count += 1
    return count

# driver code
string = ""abracadabra""
sub_string = ""ab""
print(count_substring(string, sub_string))

# This code is contributed by Nikhil"
1204,Write a Python program to create a list of empty dictionaries. ,"n = 5
l = [{} for _ in range(n)]
print(l)
","def create_empty_dict():
    return {}

print(create_empty_dict())

""""""

# Solution 1

def create_empty_dict():
    return {}

print(create_empty_dict())

# Solution 2

def create_empty_dict():
    return {}

print(create_empty_dict())

# Solution 3

def create_empty_dict():
    return {}

print(create_empty_dict())

# Solution 4"
1205,Write a Python program to test whether a number is within 100 of 1000 or 2000. ,"def near_thousand(n):
      return ((abs(1000 - n) <= 100) or (abs(2000 - n) <= 100))
print(near_thousand(1000))
print(near_thousand(900))
print(near_thousand(800))   
print(near_thousand(2200))
","def is_within_100(num):
    if num < 1000:
        return True
    elif num < 2000:
        return False
    else:
        return True

print(is_within_100(1000))
print(is_within_100(2000))
print(is_within_100(2000))
print(is_within_100(2000))
print(is_within_100(2000))
print(is_within_100(2000))
print("
1206,Write a Python program to sort unsorted numbers using Random Pivot Quick Sort. Picks the random index as the pivot. ,"#Ref.https://bit.ly/3pl5kyn
import random


def partition(A, left_index, right_index):
    pivot = A[left_index]
    i = left_index + 1
    for j in range(left_index + 1, right_index):
        if A[j] < pivot:
            A[j], A[i] = A[i], A[j]
            i += 1
    A[left_index], A[i - 1] = A[i - 1], A[left_index]
    return i - 1
def quick_sort_random(A, left, right):
    if left < right:
        pivot = random.randint(left, right - 1)
        A[pivot], A[left] = (
            A[left],
            A[pivot],
        )  # switches the pivot with the left most bound
        pivot_index = partition(A, left, right)
        quick_sort_random(
            A, left, pivot_index
        )  # recursive quicksort to the left of the pivot point
        quick_sort_random(
            A, pivot_index + 1, right
        )  # recursive quicksort to the right of the pivot point
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_random(nums, 0, len(nums))
print(nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_random(nums, 0, len(nums))
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_random(nums, 0, len(nums))
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_random(nums, 1, len(nums))
print(nums)
nums = ['z','a','y','b','x','c']
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_random(nums, 0, len(nums))
print(nums)
nums = ['z','a','y','b','x','c']
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_random(nums, 2, len(nums))
print(nums)
","def sort(arr):
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] > arr[j]:
                arr[i], arr[j] = arr[j], arr[i]
    return arr

def main():
    arr = [12, 11, 13, 5, 6, 7]
    print(sort(arr))

if __name"
1207,"Write a NumPy program to compute natural, base 10, and base 2 logarithms for all elements in a given array. ","import numpy as np
x = np.array([1, np.e, np.e**2])
print(""Original array: "")
print(x)
print(""\nNatural log ="", np.log(x))
print(""Common log ="", np.log10(x))
print(""Base 2 log ="", np.log2(x))
","import numpy as np

def natural_log(arr):
    """"""
    Compute natural logarithm of array elements
    """"""
    return np.log(arr)

def base_log(arr, base):
    """"""
    Compute base logarithm of array elements
    """"""
    return np.log(arr, base)

def natural_log_base_2(arr):
    """"""
    Comp"
1208,Write a NumPy program to find the roots of the following polynomials. ,"import numpy as np
print(""Roots of the first polynomial:"")
print(np.roots([1, -2, 1]))
print(""Roots of the second polynomial:"")
print(np.roots([1, -12, 10, 7, -10]))
","import numpy as np

x = np.array([1, 2, 3, 4, 5])
y = np.array([1, 2, 3, 4, 5])

x = np.array([1, 2, 3, 4, 5])
y = np.array([1, 2, 3, 4, 5])

x = np.array([1, 2, 3, 4, 5])
y = np.array([1, 2, 3, 4, 5])"
1209,"Write a Python program to generate a float between 0 and 1, inclusive and generate a random float within a specific range. Use random.uniform()","import random 
print(""Generate a float between 0 and 1, inclusive:"")
print(random.uniform(0, 1))
print(""\nGenerate a random float within a range:"")
random_float = random.uniform(1.0, 3.0)
print(random_float)
","import random

def generate_random_float():
    return random.uniform(0, 1)

def generate_random_float_within_range(lower_bound, upper_bound):
    return random.uniform(lower_bound, upper_bound)

def generate_random_float_within_range_2(lower_bound, upper_bound):
    return random.uniform(lower_bound, upper_bound"
1210,Write a Python program to print number with commas as thousands separators(from right side). ,"print(""{:,}"".format(1000000))
print(""{:,}"".format(10000))
","import math

def solution(n):
    answer = ''
    for i in range(1, n+1):
        answer += str(math.log10(i)) + ','
    return answer[:-1]

print(solution(10))

# Time complexity: O(n)
# Space Complexity: O(n)

# Runtime: 32 ms (96.41%)
# Memory Usage: 14.2 MB (95.74%)"
1211,Write a NumPy program to create a 10x4 array filled with random floating point number values with and set the array values with specified precision. ,"import numpy as np 
nums = np.random.randn(10, 4)
print(""Original arrays:"")
print(nums)
print(""Set the array values with specified precision:"")
np.set_printoptions(precision=4)
print(nums)
","import numpy as np

# Create an array filled with random floating point numbers with the specified precision
np.random.seed(123)
a = np.random.randn(10, 4)

# Set the array values with the specified precision
np.set_printoptions(precision=4)
print(a)

# Create a NumPy array filled with random floating point numbers with the specified precision
np.random.seed("
1212,Write a Python program to generate all sublists of a list. ,"from itertools import combinations
def sub_lists(my_list):
	subs = []
	for i in range(0, len(my_list)+1):
	  temp = [list(x) for x in combinations(my_list, i)]
	  if len(temp)>0:
	    subs.extend(temp)
	return subs


l1 = [10, 20, 30, 40]
l2 = ['X', 'Y', 'Z']
print(""Original list:"")
print(l1)
print(""S"")
print(sub_lists(l1))
print(""Sublists of the said list:"")
print(sub_lists(l1))
print(""\nOriginal list:"")
print(l2)
print(""Sublists of the said list:"")
print(sub_lists(l2))
","def generate_sublists(lst):
    sublists = []
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            sublists.append([lst[i], lst[j]])
    return sublists

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(generate_sublists(lst))

""""""

def generate_"
1213,Write a Python program to split a given list into specified sized chunks. ,"def split_list(lst, n):
    result = list((lst[i:i+n] for i in range(0, len(lst), n)))
    return result
nums = [12,45,23,67,78,90,45,32,100,76,38,62,73,29,83]
print(""Original list:"")
print(nums)
n = 3
print(""\nSplit the said list into equal size"",n)
print(split_list(nums,n))
n = 4
print(""\nSplit the said list into equal size"",n)
print(split_list(nums,n))
n = 5
print(""\nSplit the said list into equal size"",n)
print(split_list(nums,n))
","def split_list(lst, n):
    return [lst[i:i+n] for i in range(0, len(lst), n)]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
print(split_list(lst, n))

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
print(split"
1214,Write a Python program to strip a set of characters from a string. ,"def strip_chars(str, chars):
    return """".join(c for c in str if c not in chars)

print(""\nOriginal String: "")
print(""The quick brown fox jumps over the lazy dog."")
print(""After stripping a,e,i,o,u"")      
print(strip_chars(""The quick brown fox jumps over the lazy dog."", ""aeiou""))
print()
","import re

def strip_set(string):
    return re.sub('[^a-zA-Z0-9]', '', string)

print(strip_set('Python is a programming language'))

""""""

# Solution:

def strip_set(string):
    return re.sub('[^a-zA-Z0-9]', '', string)

print(strip_set('Python is a programming language'))"
1215,Write a Python program to find the nested lists elements which are present in another list. ,"def intersection_nested_lists(l1, l2):
    result = [[n for n in lst if n in l1] for lst in l2]
    return result
nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
nums2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""\nIntersection of said nested lists:"")
print(intersection_nested_lists(nums1, nums2))
","python nested_list_elements.py

""""""

# Solution 1

def nested_list_elements(ls):
    """"""
    :type ls: List[List[int]]
    :rtype: List[int]
    """"""
    result = []
    for i in ls:
        for j in i:
            if j not in result:
                result.append(j)
    return result

# Solution 2

def nested_list_elements"
1216,Write a NumPy program to take values from a source array and put them at specified indices of another array. ,"import numpy as np
x = np.array([10, 10, 20, 30, 30], float)
print(x)
print(""Put 0 and 40 in first and fifth position of the above array"")
y = np.array([0, 40, 60], float) 
x.put([0, 4], y)
print(""Array x, after putting two values:"")
print(x)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

a[1, 1] = 10
a[1, 2] = 20
a[1, 3] = 30

b[1, 1] = 40
b[1, 2] = 50
b[1, 3] ="
1217,Write a Python program to create a dictionary grouping a sequence of key-value pairs into a dictionary of lists. ,"def grouping_dictionary(l):
    result = {}
    for k, v in l:
         result.setdefault(k, []).append(v)
    return result
colors = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
print(""Original list:"")
print(colors)
print(""\nGrouping a sequence of key-value pairs into a dictionary of lists:"")
print(grouping_dictionary(colors))
","def create_dict(key_list):
    dict = {}
    for key in key_list:
        dict[key] = []
    return dict

def group_key_value(dict):
    for key, value in dict.items():
        print(key, value)

if __name__ == '__main__':
    key_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', '"
1218,Write a Python program to find files and skip directories of a given directory. ,"import os
print([f for f in os.listdir('/home/students') if os.path.isfile(os.path.join('/home/students', f))])
","import os

def skip_dir(dir_name):
    for root, dirs, files in os.walk(dir_name):
        for file in files:
            if file.endswith("".py""):
                os.remove(os.path.join(root, file))

skip_dir(""C:\\Users\\srin\\OneDrive\\Desktop\\Python\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects"
1219,Write a NumPy program to check two random arrays are equal or not. ,"import numpy as np
x = np.random.randint(0,2,6)
print(""First array:"")
print(x)
y = np.random.randint(0,2,6)
print(""Second array:"")
print(y)
print(""Test above two arrays are equal or not!"")
array_equal = np.allclose(x, y)
print(array_equal)
","import numpy as np

a = np.random.randint(10, size=(2,3))
b = np.random.randint(10, size=(2,3))

print(a == b)

# Output:

[[ True  True  True]
 [False  True  True]
 [False  True  True]]

# Expected output:

[True  True  True]
[False  True  True]
[False  True  True]"
1220,Write a Python program to find the minimum window in a given string which will contain all the characters of another given string. ,"import collections
def min_window(str1, str2):
    result_char, missing_char = collections.Counter(str2), len(str2)
    i = p = q = 0
    for j, c in enumerate(str1, 1):
        missing_char -= result_char[c] > 0
        result_char[c] -= 1
        if not missing_char:
            while i < q and result_char[str1[i]] < 0:
                result_char[str1[i]] += 1
                i += 1
            if not q or j - i <= q - p:
                p, q = i, j
    return str1[p:q]
           
str1 = ""PRWSOERIUSFK""
str2 = ""OSU""
print(""Original Strings:\n"",str1,""\n"",str2)
print(""Minimum window:"")
print(min_window(str1,str2))
","def min_window(string, sub_string):
    # your code goes here
    pass

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)"
1221,Write a Pandas program to get all the sighting days of the unidentified flying object (ufo) which are less than or equal to 40 years (365*40 days). ,"import pandas as pd
import datetime
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
now = pd.to_datetime('today')
duration = datetime.timedelta(days=365*40)
print(""Original Dataframe:"")
print(df.head())
print(""\nCurrent date:"")
print(now)
print(""\nSighting days of the unidentified flying object (ufo) which are less than or equal to 40 years (365*40 days):"")
df =  df[now - df['Date_time'] <= duration]
print(df.head())
","# Solution:

# Input:
# The data is given as follows:
# The data is given as follows:
# The data is given as follows:
# The data is given as follows:
# The data is given as follows:
# The data is given as follows:
# The data is given as follows:
# The data is given as follows:
# The data is given as follows:
# The"
1222,Write a Python program to get date and time properties from datetime function using arrow module. ,"import arrow
a = arrow.utcnow()
print(""Current date:"")
print(a.date())
print(""\nCurrent time:"")
print(a.time())
","import arrow

print(arrow.now())
print(arrow.utcnow())
print(arrow.utcnow().isoformat())
print(arrow.utcnow().strftime(""%Y-%m-%d %H:%M:%S""))
print(arrow.utcnow().strftime(""%Y-%m-%d %H:%M:%S.%f""))
print(arrow.utcnow().strftime(""%Y-%m"
1223,Write a Python program to convert a list of characters into a string. ,"s = ['a', 'b', 'c', 'd']
str1 = ''.join(s)
print(str1)
","def convert_to_string(lst):
    return ''.join(lst)

lst = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']
print(convert_to_string("
1224,"Write a Python program to map the values of a given list to a dictionary using a function, where the key-value pairs consist of the original value as the key and the result of the function as the value. ","def test(itr, fn):
  return dict(zip(itr, map(fn, itr)))
print(test([1, 2, 3, 4], lambda x: x * x))
","def map_values(lst):
    d = {}
    for i in lst:
        d[i] = map(lambda x: x * x, lst)
    return d

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(map_values(lst))

"""""""
1225,Write a NumPy program to remove specific elements in a NumPy array. ,"import numpy as np
x = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])
index = [0, 3, 4]
print(""Original array:"")
print(x)
print(""Delete first, fourth and fifth elements:"")
new_x = np.delete(x, index)
print(new_x)
","import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(arr)

arr = arr[:2, :2]

print(arr)

arr = arr[:2, 2:]

print(arr)

arr = arr[:2, :2]

print(arr)

arr = arr[:2, 2:]

print(arr)"
1226,Write a Pandas program to get the difference (in days) between documented date and reporting date of unidentified flying object (UFO). ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
df['date_documented'] = df['date_documented'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nDifference (in days) between documented date and reporting date of UFO:"")
df['Difference'] = (df['date_documented'] - df['Date_time']).dt.days
print(df)
","import pandas as pd

# Read the data
df = pd.read_csv('/Users/krishna/Downloads/UFO_Data.csv')

# Create a new dataframe with only the columns that are not 'Unidentified'
df_new = df[df['Unidentified'] == False]

# Create a new dataframe with only the columns that are not 'Unidentified'
df_new = df[df"
1227,Write a Pandas program to check whether alphabetic values present in a given column of a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Company','Company a001','Company 123', 'abcd', 'Company 12'],
    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})

print(""Original DataFrame:"")
print(df)
print(""\nWhether Alphabetic values present in company_code column?"")
df['company_code_is_alpha'] = list(map(lambda x: x.isalpha(), df['company_code']))
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Age': [30, 32, 33, 34, 35, 36],
                   'Score': [90, 95, 100, 90, 95, 100]})

print(df['Name'].isalpha())

# Output:
# True
# True
# True
#"
1228,Write a Python program to convert a given unicode list to a list contains strings. ,"def unicode_to_str(lst):
    result = [str(x) for x in lst]
    return result
students =  [u'S001', u'S002', u'S003', u'S004']
print(""Original lists:"")
print(students)
print("" Convert the said unicode list to a list contains strings:"")
print(unicode_to_str(students))
","def solution(lst):
    return [str(i) for i in lst]

lst = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"", ""z""]
print(solution(l"
1229,"Write a Python program to round the numbers of a given list, print the minimum and maximum numbers and multiply the numbers by 5. Print the unique numbers in ascending order separated by space. ","nums = [22.4, 4.0, 16.22, 9.10, 11.00, 12.22, 14.20, 5.20, 17.50]
print(""Original list:"", nums)
numbers=list(map(round,nums))
print(""Minimum value: "",min(numbers))
print(""Maximum value: "",max(numbers))
numbers=list(set(numbers))
numbers=(sorted(map(lambda n:n*5,numbers)))
print(""Result:"")
for numb in numbers:
    print(numb,end=' ')
","import math

def solution(numbers):
    numbers.sort()
    print(numbers)
    print(min(numbers), max(numbers))
    print(sum(numbers))
    print(numbers * 5)

# solution(numbers)

# Solution 2:

def solution(numbers):
    numbers.sort()
    print(n"
1230,Write a Python program to get a dictionary from an object's fields. ,"class dictObj(object):
     def __init__(self):
         self.x = 'red'
         self.y = 'Yellow'
         self.z = 'Green'
     def do_nothing(self):
         pass
test = dictObj()
print(test.__dict__)
","def get_dict(obj):
    return {
        ""name"": obj.name,
        ""age"": obj.age,
        ""gender"": obj.gender
    }

obj = Person(""John"", 36, ""Male"")
print(get_dict(obj))

""""""

# Solution:

def get_dict(obj):
    return {
        ""name"": obj.name,
        ""age"": obj.age,
        ""gender"": obj.gender
    }"
1231,Write a Python program to find the longest common sub-string from two given strings. ,"from difflib import SequenceMatcher 
  
def longest_Substring(s1,s2): 
  
     seq_match = SequenceMatcher(None,s1,s2) 
  
     match = seq_match.find_longest_match(0, len(s1), 0, len(s2)) 
  
     # return the longest substring 
     if (match.size!=0): 
          return (s1[match.a: match.a + match.size])  
     else: 
          return ('Longest common sub-string not present')  

s1 = 'abcdefgh'
s2 = 'xswerabcdwd'
print(""Original Substrings:\n"",s1+""\n"",s2)
print(""\nCommon longest sub_string:"")
print(longest_Substring(s1,s2))
","def longest_common_substring(str1, str2):
    # Write your code here
    if len(str1) > len(str2):
        return str1
    else:
        return str2

print(longest_common_substring(""abcde"", ""abcde""))
print(longest_common_substring(""abcde"", ""abcdea""))
print(longest_common_substring(""abcde"", ""abcdea"", 2))
print"
1232,Write a Pandas program to keep the rows with at least 2 NaN values in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[np.nan,np.nan,70002,np.nan,np.nan,70005,np.nan,70010,70003,70012,np.nan,np.nan],
'purch_amt':[np.nan,270.65,65.26,np.nan,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,np.nan],
'ord_date': [np.nan,'2012-09-10',np.nan,np.nan,'2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17',np.nan],
'customer_id':[np.nan,3001,3001,np.nan,3002,3001,3001,3004,3003,3002,3001,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nKeep the rows with at least 2 NaN values of the said DataFrame:"")
result = df.dropna(thresh=2)
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [1, np.nan, 3, 4, 5]})

print(df)

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [1, np.nan, 3, 4, 5]})"
1233,Write a Python program to calculate the value of 'a' to the power 'b'. ,"def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)

print(power(3,4))
","a = 2
b = 3

print(a**b)

""""""

a = 2
b = 3

print(a**b)"
1234,Write a Python program to find the factorial of a number using itertools module. ,"import itertools as it
import operator as op

def factorials_nums(n):
    result = list(it.accumulate(it.chain([1], range(1, 1 + n)), op.mul))
    return result;
    
 
print(""Factorials of 5 :"", factorials_nums(5))
print(""Factorials of 9 :"", factorials_nums(9))
","import itertools

def factorial(n):
    fact = 1
    for i in range(1, n+1):
        fact = fact * i
    return fact

print(factorial(5))

""""""

# Solution:

def factorial(n):
    fact = 1
    for i in range(1, n+1):
        fact = fact * i
    return fact

print(factorial(5))

"""""""
1235,"Write a Python program to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing' then add 'ly' instead. If the string length of the given string is less than 3, leave it unchanged. ","def add_string(str1):
  length = len(str1)

  if length > 2:
    if str1[-3:] == 'ing':
      str1 += 'ly'
    else:
      str1 += 'ing'

  return str1
print(add_string('ab'))
print(add_string('abc'))
print(add_string('string'))
","def add_ing_ly(str):
    if len(str) < 3:
        return str + 'ly'
    else:
        return str + 'ing'

print(add_ing_ly('sims'))
print(add_ing_ly('welcome'))
print("
1236,"Write a Python program to compute the square of first N Fibonacci numbers, using map function and generate a list of the numbers. ","import itertools
n = 10
def fibonacci_nums(x=0, y=1):
    yield x
    while True:
        yield y
        x, y = y, x + y
print(""First 10 Fibonacci numbers:"")
result = list(itertools.islice(fibonacci_nums(), n))
print(result)
square = lambda x: x * x 
print(""\nAfter squaring said numbers of the list:"")
print(list(map(square, result)))
","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

print(fibonacci(5))

# Output:
# [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233"
1237,Write a NumPy program to compute an element-wise indication of the sign for all elements in a given array. ,"import numpy as np
x = np.array([1, 3, 5, 0, -1, -7, 0, 5])
print(""Original array;"")
print(x)
r1 = np.sign(x)
r2 = np.copy(x)
r2[r2 > 0] = 1
r2[r2 < 0] = -1
assert np.array_equal(r1, r2)
print(""Element-wise indication of the sign for all elements of the said array:"")
print(r1)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)
print(a.sum())
print(a.mean())
print(a.std())
print(a.var())
print(a.min())
print(a.max())

# Output:
# array([[1, 2, 3],
#        [4, 5, 6]])
#"
1238,Write a Python program to create a nave (without time zone) datetime representation of the Arrow object. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
r = arrow.now('US/Mountain')
print(""\nNaive datetime representation:"")
print(r.naive)
","import datetime

class Arrow:
    def __init__(self, hour, minute, second, microsecond):
        self.hour = hour
        self.minute = minute
        self.second = second
        self.microsecond = microsecond
    def __str__(self):
        return 'Arrow(%d, %d, %d, %d)' % (self.hour, self.minute, self.second, self.microsecond)"
1239,Write a Python program to extract a list of values from a given list of dictionaries. ,"def test(lst, marks):
    result = [d[marks] for d in lst if marks in d]
 
    return result

marks = [{'Math': 90, 'Science': 92}, 
         {'Math': 89, 'Science': 94}, 
         {'Math': 92, 'Science': 88}]

print(""\nOriginal Dictionary:"")
print(marks)
subj = ""Science""
print(""\nExtract a list of values from said list of dictionaries where subject ="",subj)
print(test(marks, subj))

print(""\nOriginal Dictionary:"")
print(marks)
subj = ""Math""
print(""\nExtract a list of values from said list of dictionaries where subject ="",subj)
print(test(marks, subj))
","def extract_values(list_of_dicts):
    # your code goes here
    return list_of_dicts

""""""

def extract_values(list_of_dicts):
    # your code goes here
    return list_of_dicts

""""""

def extract_values(list_of_dicts):
    # your code goes here
    return list_of_dicts

""""""

def extract_values(list_of_dict"
1240,"a href=""#EDITOR"">Go to the editor</a>","def pascal_triangle(n):
   trow = [1]
   y = [0]
   for x in range(max(n,0)):
      print(trow)
      trow=[l+r for l,r in zip(trow+y, y+trow)]
   return n>=1
pascal_triangle(6) 
",">>> import math
>>> def f(x):
...     return math.sin(x)
>>> def g(x):
...     return math.cos(x)
>>> def h(x):
...     return math.tan(x)
>>> def i(x):
...     return math.sinh(x)
>>> def j(x):
...     return math.cosh(x)
>>> def k(x):
...     return math.tanh(x)
>>> def l(x):"
1241,Write a Python function that takes two lists and returns True if they have at least one common member. ,"def common_data(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result
print(common_data([1,2,3,4,5], [5,6,7,8,9]))
print(common_data([1,2,3,4,5], [6,7,8,9]))
","def common_member(list1, list2):
    for i in list1:
        for j in list2:
            if i == j:
                return True
    return False

print(common_member([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))

""""""

def common_member(list1, list2):
    for i in list1:
        for j in list2:
            if"
1242,"Write a Pandas program to create a stacked histograms plot of opening, closing, high, low stock prices of Alphabet Inc. between two specific dates with more bins. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Open','Close','High','Low']]
plt.figure(figsize=(25,25))
df2.plot.hist(stacked=True, bins=200)
plt.suptitle('Opening/Closing/High/Low stock prices of Alphabet Inc.,\n From 01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

# Read the data
df = pd.read_csv('Alphabet Inc.csv')

# Create a stacked bar plot
df.groupby(['Date'])['Open'].sum().plot(kind='bar', figsize=(10, 7))

# Create a stacked bar plot
df.groupby(['Date'"
1243,"Write a Python program to combine two lists into a dictionary, where the elements of the first one serve as the keys and the elements of the second one serve as the values. The values of the first list need to be unique and hashable. ","def test(keys, values):
  return dict(zip(keys, values))

l1 = ['a', 'b', 'c', 'd', 'e', 'f']
l2 = [1, 2, 3, 4, 5]     
print(""Original lists:"")
print(l1)
print(l2)
print(""\nCombine the values of the said two lists into a dictionary:"")
print(test(l1, l2))
","def combine_lists(list1, list2):
    d = {}
    for i in list1:
        if i not in d:
            d[i] = 1
        else:
            d[i] += 1
    for i in list2:
        if i not in d:
            d[i] = 1"
1244,Write a Python program to replace the last element in a list with another list. ,"num1 = [1, 3, 5, 7, 9, 10]
num2 = [2, 4, 6, 8]
num1[-1:] = num2
print(num1)
","def replace_last(lst):
    lst[-1] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(replace_last(lst))

""""""

def replace_last(lst):
    lst[-1] = [1, 2, 3, 4, 5"
1245,Write a Python program to sort a list of elements using Topological sort. ,"# License https://bit.ly/2InTS3W
#     a
#    / \
#   b  c
#  / \
# d  e
edges = {'a': ['c', 'b'], 'b': ['d', 'e'], 'c': [], 'd': [], 'e': []}
vertices = ['a', 'b', 'c', 'd', 'e']
def topological_sort(start, visited, sort):
    """"""Perform topolical sort on a directed acyclic graph.""""""
    current = start
    # add current to visited
    visited.append(current)
    neighbors = edges[current]
    for neighbor in neighbors:
        # if neighbor not in visited, visit
        if neighbor not in visited:
            sort = topological_sort(neighbor, visited, sort)
    # if all neighbors visited add current to sort
    sort.append(current)
    # if all vertices haven't been visited select a new one to visit
    if len(visited) != len(vertices):
        for vertice in vertices:
            if vertice not in visited:
                sort = topological_sort(vertice, visited, sort)
    # return sort
    return sort

sort = topological_sort('a', [], [])
print(sort)
","def topologicalSort(arr):
    visited = [False] * len(arr)
    stack = []
    for i in range(len(arr)):
        if visited[i] == False:
            visited[i] = True
            stack.append(i)
            while len(stack) > 0:
                top = stack.pop()
                arr[top] = arr[top] + 1
                if top!= i:
                    visited[top] = False"
1246,Write a Pandas program to change the data type of given a column or a Series. ,"import pandas as pd
s1 = pd.Series(['100', '200', 'python', '300.12', '400'])
print(""Original Data Series:"")
print(s1)
print(""Change the said data type to numeric:"")
s2 = pd.to_numeric(s1, errors='coerce')
print(s2)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'col1': [1, 2, 3, 4], 'col2': [5, 6, 7, 8]})

# Change the data type of col1
df['col1'] = df['col1'].astype('int64')

# Change the data type of col2
df['col2'] = df['col2'].astype('float64')"
1247,Write a NumPy program to convert a Python dictionary to a NumPy ndarray. ,"import numpy as np
from ast import literal_eval
udict = """"""{""column0"":{""a"":1,""b"":0.0,""c"":0.0,""d"":2.0},
   ""column1"":{""a"":3.0,""b"":1,""c"":0.0,""d"":-1.0},
   ""column2"":{""a"":4,""b"":1,""c"":5.0,""d"":-1.0},
   ""column3"":{""a"":3.0,""b"":-1.0,""c"":-1.0,""d"":-1.0}
  }""""""
t = literal_eval(udict)
print(""\nOriginal dictionary:"")
print(t)
print(""Type: "",type(t))
result_nparra = np.array([[v[j] for j in ['a', 'b', 'c', 'd']] for k, v in t.items()])
print(""\nndarray:"")
print(result_nparra)
print(""Type: "",type(result_nparra))
","python solution.py

""""""

import numpy as np

def solution(d):
    """"""
    :type d: dict
    :rtype: np.ndarray
    """"""
    return np.array(list(d.values()))

if __name__ == '__main__':
    d = {'a': 1, 'b': 2, 'c': 3}
    print(solution(d))"
1248,"Write a Python program to get the maximum value of a list, after mapping each element to a value using a given function. ","def max_by(lst, fn):
  return max(map(fn, lst))
print(max_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n'])) 
","def max_value(lst):
    max_val = lst[0]
    for i in lst:
        if i > max_val:
            max_val = i
    return max_val

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_value(lst))

""""""

# Solution:

def max_value(lst"
1249,"Write a Python program to check the priority of the four operators (+, -, *, /). ","from collections import deque
import re

__operators__ = ""+-/*""
__parenthesis__ = ""()""
__priority__ = {
    '+': 0,
    '-': 0,
    '*': 1,
    '/': 1,
}

def test_higher_priority(operator1, operator2):
    return __priority__[operator1] >= __priority__[operator2]

print(test_higher_priority('*','-'))
print(test_higher_priority('+','-'))
print(test_higher_priority('+','*'))
print(test_higher_priority('+','/'))
print(test_higher_priority('*','/'))
","def check_priority(op1, op2, op3, op4):
    if op1 + op2 + op3 + op4 == 10:
        return True
    else:
        return False

print(check_priority(1, 2, 3, 4))
print(check_priority(1, 2, 3, -4))
print(check_priority(1, 2, 3, 5))
print(check_priority(1, 2, 3, -"
1250,Write a Python program to wrap a given string into a paragraph of given width. ,"import textwrap
s = input(""Input a string: "")
w = int(input(""Input the width of the paragraph: "").strip())
print(""Result:"")
print(textwrap.fill(s,w))
","def wrap(string, max_width):
    paragraph = """"
    for i in range(len(string)):
        paragraph += string[i] * max_width
    return paragraph

# Enter your code here. Read input from STDIN. Print output to STDOUT
string, max_width = input(), int(input())
print(wrap(string, max_width))

'''
Sample Input

ABCDEFGHIJKLMNOPQRSTUVWXYZ
Sample"
1251,Write a Python program to count the number of students of individual class. ,"from collections import Counter
classes = (
    ('V', 1),
    ('VI', 1),
    ('V', 2),
    ('VI', 2),
    ('VI', 3),
    ('VII', 1),
)
students = Counter(class_name for class_name, no_students in classes)
print(students)
","def count_students(class_name):
    count = 0
    for i in range(len(class_name)):
        if class_name[i] == 'A':
            count += 1
    return count

print(count_students('A'))

""""""

def count_students(class_name):
    count = 0
    for i in range(len(class_name)):
        if class_name[i] == 'A':
            count"
1252,"Write a Python program to get every element that exists in any of the two given lists once, after applying the provided function to each element of both. ","def union_by_el(x, y, fn):
  _x = set(map(fn, x))
  return list(set(x + [item for item in y if fn(item) not in _x])) 
from math import floor
print(union_by_el([4.1], [2.2, 4.3], floor))
","def get_elements(l1, l2):
    return [i for i in l1 if i in l2]

l1 = [1, 2, 3, 4, 5]
l2 = [1, 2, 3, 4, 5, 6]

print(get_elements(l1, l2))

""""""

def get_elements(l1, l2):
    return ["
1253,Write a Python program to generate permutations of n items in which successive permutations differ from each other by the swapping of any two items. ,"from operator import itemgetter
 
DEBUG = False # like the built-in __debug__
 
def spermutations(n):
    """"""permutations by swapping. Yields: perm, sign""""""
    sign = 1
    p = [[i, 0 if i == 0 else -1] # [num, direction]
         for i in range(n)]
 
    if DEBUG: print(' #', p)
    yield tuple(pp[0] for pp in p), sign
 
    while any(pp[1] for pp in p): # moving
        i1, (n1, d1) = max(((i, pp) for i, pp in enumerate(p) if pp[1]),
                           key=itemgetter(1))
        sign *= -1
        if d1 == -1:
            # Swap down
            i2 = i1 - 1
            p[i1], p[i2] = p[i2], p[i1]
            # If this causes the chosen element to reach the First or last
            # position within the permutation, or if the next element in the
            # same direction is larger than the chosen element:
            if i2 == 0 or p[i2 - 1][0] > n1:
                # The direction of the chosen element is set to zero
                p[i2][1] = 0
        elif d1 == 1:
            # Swap up
            i2 = i1 + 1
            p[i1], p[i2] = p[i2], p[i1]
            # If this causes the chosen element to reach the first or Last
            # position within the permutation, or if the next element in the
            # same direction is larger than the chosen element:
            if i2 == n - 1 or p[i2 + 1][0] > n1:
                # The direction of the chosen element is set to zero
                p[i2][1] = 0
        if DEBUG: print(' #', p)
        yield tuple(pp[0] for pp in p), sign
 
        for i3, pp in enumerate(p):
            n3, d3 = pp
            if n3 > n1:
                pp[1] = 1 if i3 < i2 else -1
                if DEBUG: print(' # Set Moving')
 
 
if __name__ == '__main__':
    from itertools import permutations
 
    for n in (3, 4):
        print('\nPermutations and sign of %i items' % n)
        sp = set()
        for i in spermutations(n):
            sp.add(i[0])
            print('Permutation: %r Sign: %2i' % i)
            #if DEBUG: raw_input('?')
        # Test
        p = set(permutations(range(n)))
        assert sp == p, 'Two methods of generating permutations do not agree'
","def permutations(n):
    if n == 1:
        return [[1]]
    else:
        permutations = []
        for i in range(1, n+1):
            for j in range(i, n+1):
                permutations.append([i, j])
        return permutations

print(permutations(5))

""""""

# Solution:

def permutations(n):
    if"
1254,Write a Python program to get the number of occurrences of a specified element in an array. ,"from array import *
array_num = array('i', [1, 3, 5, 3, 7, 9, 3])
print(""Original array: ""+str(array_num))
print(""Number of occurrences of the number 3 in the said array: ""+str(array_num.count(3)))
","def count_occurrences(arr, element):
    count = 0
    for i in range(len(arr)):
        if arr[i] == element:
            count += 1
    return count

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
element = 5
print(count_occurrences(arr, element))

""""""

def count_occurrences(arr, element):
    count ="
1255,Write a Python program to check if a substring presents in a given list of string values. ,"def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False

colors = [""red"", ""black"", ""white"", ""green"", ""orange""]
print(""Original list:"")
print(colors)
sub_str = ""ack""
print(""Substring to search:"")
print(sub_str)
print(""Check if a substring presents in the said list of string values:"")
print(find_substring(colors, sub_str))
sub_str = ""abc""
print(""Substring to search:"")
print(sub_str)
print(""Check if a substring presents in the said list of string values:"")
print(find_substring(colors, sub_str))
","def check_substring(string, sub_string):
    for i in range(len(string)):
        if string[i:i+len(sub_string)] == sub_string:
            return True
    return False

print(check_substring(""abcd"", ""ab""))
print(check_substring(""abcd"", ""abcd""))
print(check_substring(""abcd"", ""abcdab""))
print(check_substring(""abcd"
1256,Write a Python program to print a dictionary line by line. ,"students = {'Aex':{'class':'V',
        'rolld_id':2},
        'Puja':{'class':'V',
        'roll_id':3}}
for a in students:
    print(a)
    for b in students[a]:
        print (b,':',students[a][b])
		","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

#"
1257,Write a Python program to create a shallow copy of a given list. Use copy.copy,"import copy
nums_x = [1, [2, 3, 4]]
print(""Original list: "", nums_x)
nums_y = copy.copy(nums_x)
print(""\nCopy of the said list:"")
print(nums_y)
print(""\nChange the value of an element of the original list:"")
nums_x[1][1] = 10
print(nums_x)
print(""\nSecond list:"")
print(nums_y)
nums =  [[1], [2]]
nums_copy = copy.copy(nums)
print(""\nOriginal list:"")
print(nums)
print(""\nCopy of the said list:"")
print(nums_copy)
print(""\nChange the value of an element of the original list:"")
nums[0][0] = 0
print(""\nFirst list:"")
print(nums)
print(""\nSecond list:"")
print(nums_copy)
","def shallow_copy(lst):
    new_lst = []
    for i in lst:
        new_lst.append(i)
    return new_lst

lst = [1, 2, 3, 4, 5]
print(shallow_copy(lst))

""""""

# Solution 1

def shallow_copy(lst):
    new_lst = []
    for i in lst:
        new_lst."
1258,Write a Python program to extend a list without append. ,"x = [10, 20, 30]
y = [40, 50, 60]
x[:0] =y
print(x)
","def extend(lst):
    new_list = []
    for i in lst:
        new_list.append(i)
    return new_list

lst = [1, 2, 3, 4, 5]
print(extend(lst))

""""""

# Solution

def extend(lst):
    new_list = []
    for i in lst:
        new_list.append(i)
    return new_list

lst = [1,"
1259,Write a Python program to create a nave (without time zone) datetime representation of the Arrow object. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
r = arrow.now('US/Mountain')
print(""\nNaive datetime representation:"")
print(r.naive)
","import datetime

class Arrow:
    def __init__(self, hour, minute, second, microsecond):
        self.hour = hour
        self.minute = minute
        self.second = second
        self.microsecond = microsecond
    def __str__(self):
        return 'Arrow(%d, %d, %d, %d)' % (self.hour, self.minute, self.second, self.microsecond)"
1260,"Write a NumPy program to count the lowest index of ""P"" in a given array, element-wise. ","import numpy as np
x1 = np.array(['Python', 'PHP', 'JS', 'EXAMPLES', 'HTML'], dtype=np.str)
print(""\nOriginal Array:"")
print(x1)
print(""count the lowest index of P:"")
r = np.char.find(x1, ""P"")
print(r)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

lowest = np.argmin(arr)

print(lowest)

# Output:
# 0
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9
# 10

# Explanation:
# The array contains the following elements"
1261,Write a Pandas program to display most frequent value in a given series and replace everything else as 'Other' in the series. ,"import pandas as pd
import numpy as np
np.random.RandomState(100)
num_series = pd.Series(np.random.randint(1, 5, [15]))
print(""Original Series:"")
print(num_series)
print(""Top 2 Freq:"", num_series.value_counts())
result = num_series[~num_series.isin(num_series.value_counts().index[:1])] = 'Other'
print(num_series)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
1262,Write a Python program find the common values that appear in two given strings. ,"def intersection_of_two_string(str1, str2):
    result = """"
    for ch in str1:
        if ch in str2 and not ch in result:
            result += ch
    return result

str1 = 'Python3'
str2 = 'Python2.7'
print(""Original strings:"")
print(str1)
print(str2)
print(""\nIntersection of two said String:"") 
print(intersection_of_two_string(str1, str2))
","def common_values(str1, str2):
    common_values = []
    for i in range(len(str1)):
        for j in range(len(str2)):
            if str1[i] == str2[j]:
                common_values.append(str1[i])
    return common_values

print(common_values(""abcd"", ""abcd""))

""""""

def common_values(str1, str2):
    common_"
1263,"Write a Python program to create a 3-tuple ISO year, ISO week number, ISO weekday and an ISO 8601 formatted representation of the date and time. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\n3-tuple - ISO year, ISO week number, ISO weekday:"")
print(arrow.utcnow().isocalendar())
print(""\nISO 8601 formatted representation of the date and time:"")
print(arrow.utcnow().isoformat())
","import datetime

def iso_week_number(iso_year, iso_week):
    iso_week_number = datetime.datetime(iso_year, 1, 1).isocalendar()[1]
    return iso_week_number

def iso_weekday(iso_year, iso_week):
    iso_weekday = datetime.datetime(iso_year, 1, 1)."
1264,Write a Python program to count number of occurrences of each value in a given array of non-negative integers. ,"import numpy as np
array1 = [0, 1, 6, 1, 4, 1, 2, 2, 7] 
print(""Original array:"")
print(array1)
print(""Number of occurrences of each value in array: "")
print(np.bincount(array1))
","def count_occurrences(arr, n):
    count = 0
    for i in range(n):
        if arr[i] == arr[i]:
            count += 1
    return count

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = len(arr)
print(count_occurrences(arr, n))

""""""

def count_occurrences(arr,"
1265,Write a Python program to get a list of locally installed Python modules. ,"import pkg_resources
installed_packages = pkg_resources.working_set
installed_packages_list = sorted([""%s==%s"" % (i.key, i.version)
     for i in installed_packages])
for m in installed_packages_list:
    print(m)
","import sys

print(sys.modules)

# Solution:

# import sys
# print(sys.modules)

# Solution:

# import sys
# print(sys.modules)

# Solution:

# import sys
# print(sys.modules)

# Solution:

# import sys
# print(sys.modules)

# Solution:

# import sys
# print(sys.modules)

# Solution:

# import sys
# print"
1266,Write a Python program to find intersection of two given arrays using Lambda. ,"array_nums1 = [1, 2, 3, 5, 7, 8, 9, 10]
array_nums2 = [1, 2, 4, 8, 9]
print(""Original arrays:"")
print(array_nums1)
print(array_nums2)
result = list(filter(lambda x: x in array_nums1, array_nums2)) 
print (""\nIntersection of the said arrays: "",result)
","def intersection(arr1, arr2):
    return list(set(arr1) & set(arr2))

arr1 = [1, 2, 3, 4, 5]
arr2 = [2, 3, 5, 6, 7]
print(intersection(arr1, arr2))

arr1 = [1, 2, 3, 4, 5]
arr2 = [2, 3, 5, 6, 7]
print(list(set(arr1) & set("
1267,Write a Python program to combine values in python list of dictionaries. ,"from collections import Counter
item_list = [{'item': 'item1', 'amount': 400}, {'item': 'item2', 'amount': 300}, {'item': 'item1', 'amount': 750}]
result = Counter()
for d in item_list:
    result[d['item']] += d['amount']
print(result) 
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21"
1268,"Write a NumPy program to create a new array of 3*5, filled with 2. ","import numpy as np
#using no.full
x = np.full((3, 5), 2, dtype=np.uint)
print(x)
#using no.ones
y = np.ones([3, 5], dtype=np.uint) *2
print(y)
","import numpy as np

a = np.arange(3*5).reshape(3,5)
print(a)

# Solution:
a = np.arange(3*5).reshape(3,5)
print(a)
a = np.arange(3*5).reshape(3,5)
print(a)
a = np.arange(3*5).reshape(3,5)
print(a)"
1269,"Write a Pandas program to filter all records starting from the 2nd row, access every 5th row from world alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nStarting from the 2nd row, access every 5th row:"")
print(w_a_con.iloc[1::5].head(10))
","import pandas as pd

df = pd.read_csv('world_alcohol_consumption.csv')

df = df[df['Alcohol'] >= 5]

df.head()

df.head(5)

df.tail(5)

df.tail(5)

df.tail(5)

df.tail(5)

df.tail(5)

df.tail("
1270,Write a NumPy program to check whether the dimensions of two given arrays are same or not. ,"import numpy as np
def test_array_dimensions(ar1,ar2):
 try:
   ar1 + ar2
 except ValueError:
   return ""Different dimensions""
 else:
   return ""Same dimensions""
ar1 = np.arange(20).reshape(4,5)
ar2 = np.arange(20).reshape(4,5)
print(test_array_dimensions(ar1, ar2))
ar1 = np.arange(20).reshape(5,4)
ar2 = np.arange(20).reshape(4,5)
print(test_array_dimensions(ar1, ar2))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a.shape)
print(b.shape)

if a.shape == b.shape:
    print(""Both arrays have same dimensions"")
else:
    print(""Both arrays have different dimensions"")

# Output:
# (2"
1271,Write a Pandas program to create a time-series with two index labels and random values. Also print the type of the index. ,"import pandas as pd
import numpy as np
import datetime
from datetime import datetime, date
dates = [datetime(2011, 9, 1), datetime(2011, 9, 2)]
print(""Time-series with two index labels:"")
time_series = pd.Series(np.random.randn(2), dates)
print(time_series)
print(""\nType of the index:"")
print(type(time_series.index))
","import pandas as pd

# Create a time-series with two index labels and random values
ts = pd.Series(np.random.randn(100), index=['Jan', 'Feb'])

# Print the type of the index
print(type(ts.index))

# Create a time-series with two index labels and random values
ts = pd.Series(np.random.randn(100), index=['"
1272,Write a NumPy program to compute the condition number of a given matrix. ,"import numpy as np
from numpy import linalg as LA
a = np.array([[1, 0, -1], [0, 1, 0], [1, 0, 1]])
print(""Original matrix:"")
print(a)
print(""The condition number of the said matrix:"")
print(LA.cond(a))
","import numpy as np

A = np.array([[1, 2, 3, 4, 5],
              [6, 7, 8, 9, 10],
              [11, 12, 13, 14, 15],
              [16, 17, 18, 19, 20]])

print(np.linalg.cond(A))

""""""

# Solution

import numpy as np

A = np.array([[1, 2, 3, 4, 5],"
1273,"Write a NumPy program to view inputs as arrays with at least two dimensions, three dimensions. ","import numpy as np
x = 10
print(""View inputs as arrays with at least two dimensions:"")
print(np.atleast_1d(x))
x = np.arange(4.0).reshape(2, 2)
print(np.atleast_1d(x))
print(""View inputs as arrays with at least three dimensions:"")
x =15
print(np.atleast_3d(x))
x = np.arange(3.0)
print(np.atleast_3d(x))
","python solution.py

""""""

import numpy as np

# Create an array of three dimensions
arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Create an array of two dimensions
arr2 = np.array([[1, 2], [3, 4]])

# Create an array with three dimensions
arr3 = np.array([[1, 2, 3], [4, 5"
1274,Write a Pandas program to create the todays date. ,"import pandas as pd
from datetime import date
now = pd.to_datetime(str(date.today()), format='%Y-%m-%d')
print(""Today's date:"")
print(now)
","import datetime

# Create a datetime object
today = datetime.datetime.now()

# Print the date
print(today)

# Create a string object
date = today.strftime(""%Y-%m-%d"")

# Print the date
print(date)

# Create a string object
date = today.strftime(""%Y-%m-%d %H:%M:%S"")

# Print the date
print(date)

# Create"
1275,"Write a NumPy program to create a new array of given shape (5,6) and type, filled with zeros. ","import numpy as np
nums = np.zeros(shape=(5, 6), dtype='int')
print(""Original array:"")
print(nums)
nums[::2, ::2] = 3
nums[1::2, ::2] = 7
print(""\nNew array:"")
print(nums)
","import numpy as np

arr = np.zeros((5,6))

arr = np.zeros((5,6), dtype=np.int64)

arr = np.zeros((5,6), dtype=np.float64)

arr = np.zeros((5,6), dtype=np.complex128)

arr = np.zeros((5,6), dtype=np.object)"
1276,Write a NumPy program to save a given array to a binary file . ,"import numpy as np
import os
a = np.arange(20)
np.save('temp_arra.npy', a)
print(""Check if 'temp_arra.npy' exists or not?"")
if os.path.exists('temp_arra.npy'):
    x2 = np.load('temp_arra.npy')
    print(np.array_equal(a, x2))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5])

np.save('arr.npy', arr)

arr = np.load('arr.npy')

arr

arr.shape

arr.size

arr.dtype

arr.ndim

arr.itemsize

arr.nbytes

arr.nbytes / arr.itemsize

arr.nbytes / arr.itemsize / arr.n"
1277,Write a Python program to extract the nth element from a given list of tuples. ,"def extract_nth_element(test_list, n):
    result = [x[n] for x in test_list]
    return result

students = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] 
print (""Original list:"")
print(students)
n = 0
print(""\nExtract nth element ( n ="",n,"") from the said list of tuples:"")
print(extract_nth_element(students, n))

n = 2
print(""\nExtract nth element ( n ="",n,"") from the said list of tuples:"")
print(extract_nth_element(students, n))
","def extract_nth_element(lst, n):
    return lst[n]

lst = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]
n = 3
print(extract_nth_element(lst, n))

""""""

def extract_nth_element(lst, n):
    return lst[n]

lst = [('a', 1),"
1278,Write a NumPy program to create a contiguous flattened array. ,"import numpy as np
x = np.array([[10, 20, 30], [20, 40, 50]])
print(""Original array:"")
print(x)
y = np.ravel(x)
print(""New flattened array:"")
print(y)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

# a = np.array([[1, 2, 3], [4, 5, 6]])
# print(a)
# print(a.flatten())

# a = np.array([[1, 2, 3], [4, 5, 6]])
# print(a)
# print(a.flatten())

# a"
1279,Write a Python program to print the first n Lucky Numbers. ,"n=int(input(""Input a Number: ""))
List=range(-1,n*n+9,2)
i=2
while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1
print(List[1:n+1])
","def main():
    n = int(input(""Enter the number of numbers you want to print: ""))
    print(""The first"", n, ""lucky numbers are: "")
    for i in range(n):
        print(random.randint(1, 100))

if __name__ == ""__main__"":
    main()

""""""

# Solution

def main():
    n = int(input(""Enter the number of numbers you want to print: ""))
    print(""The"
1280,Write a Python function to calculate the factorial of a number (a non-negative integer). The function accepts the number as an argument. ,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)
n=int(input(""Input a number to compute the factiorial : ""))
print(factorial(n))
","def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

print(factorial(5))

""""""

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

print(factorial(5))

""""""

def factorial(n"
1281,Write a Python program to convert a list into a nested dictionary of keys. ,"num_list = [1, 2, 3, 4]
new_dict = current = {}
for name in num_list:
    current[name] = {}
    current = current[name]
print(new_dict)
","def nested_dict_to_dict(lst):
    d = {}
    for i in lst:
        d[i] = nested_dict_to_dict(i)
    return d

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(nested_dict_to_dict(lst))

""""""

def nested_dict_to_dict(lst):
    d = {}
    for"
1282,"Write a Python program to find the second lowest grade of any student(s) from the given names and grades of each student using lists and lambda. Input number of students, names and grades of each student. ","students = []
sec_name = []
second_low = 0
n = int(input(""Input number of students: ""))
for _ in range(n):
   s_name = input(""Name: "")
   score = float(input(""Grade: ""))
   students.append([s_name,score])
print(""\nNames and Grades of all students:"")
print(students)
order =sorted(students, key = lambda x: int(x[1]))
for i in range(n):
   if order[i][1] != order[0][1]:
       second_low = order[i][1]
       break
print(""\nSecond lowest grade: "",second_low)
sec_student_name = [x[0] for x in order if x[1] == second_low]
sec_student_name.sort()
print(""\nNames:"")
for s_name in sec_student_name:
   print(s_name)
","def second_lowest_grade(students, names, grades):
    second_lowest_grade = []
    for student in students:
        second_lowest_grade.append(min(grades[student]))
    return second_lowest_grade

print(second_lowest_grade([""Harry"", ""Ron"", ""Hermione"", ""Ginny""],"
1283,Write a Python program to check whether a given datetime is between two dates and times using arrow module. ,"import arrow
print(""Test whether a given datetime is between two dates and times:"")
start = arrow.get(datetime(2017, 6, 5, 12, 30, 10))
end = arrow.get(datetime(2017, 6, 5, 12, 30, 36))
print(arrow.get(datetime(2017, 6, 5, 12, 30, 27)).is_between(start, end))
start = arrow.get(datetime(2017, 5, 5))
end = arrow.get(datetime(2017, 5, 8))
print(arrow.get(datetime(2017, 5, 8)).is_between(start, end, '[]'))
start = arrow.get(datetime(2017, 5, 5))
end = arrow.get(datetime(2017, 5, 8))
print(arrow.get(datetime(2017, 5, 8)).is_between(start, end, '[)'))
","import arrow

def check_date(date):
    if arrow.get(date).time() >= arrow.get(date).time():
        return True
    else:
        return False

print(check_date(""2021-05-01""))
print(check_date(""2021-05-02""))
print(check_date(""2021-05-03""))
print(check_date(""2021-05-04""))
print(check_date"
1284,Write a Python program to convert string element to integer inside a given tuple using lambda. ,"def tuple_int_str(tuple_str):
    result = tuple(map(lambda x: (int(x[0]), int(x[2])), tuple_str))
    return result     
tuple_str =  (('233', 'ABCD', '33'), ('1416', 'EFGH', '55'), ('2345', 'WERT', '34'))
print(""Original tuple values:"")
print(tuple_str)
print(""\nNew tuple values:"")
print(tuple_int_str(tuple_str))
","def convert_to_int(tuple):
    return tuple[0]

print(convert_to_int((1, 2, 3, 4, 5)))

""""""

# Solution 1

def convert_to_int(tuple):
    return tuple[0]

print(convert_to_int((1, 2, 3, 4, 5)))

# Solution 2

def convert_to_int(tuple):
    return tuple[0]"
1285,Write a Pandas program to extract hash attached word from twitter text from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'tweets': ['#Obama says goodbye','Retweets for #cash','A political endorsement in #Indonesia', '1 dog = many #retweets', 'Just a simple #egg']
    })
print(""Original DataFrame:"")
print(df)
def find_hash(text):
    hword=re.findall(r'(?<=#)\w+',text)
    return "" "".join(hword)
df['hash_word']=df['tweets'].apply(lambda x: find_hash(x))
print(""\Extracting#@word from dataframe columns:"")
print(df)
","import pandas as pd
import hashlib

df = pd.read_csv('hash_word.csv')

# Hash the word
hash_word = hashlib.sha256(df['text'].values.tolist()).hexdigest()

# Hash the word
hash_word = hashlib.sha256(df['text'].values.tolist()).hexdigest()

# Hash the word
hash_word ="
1286,"Write a Python program to get the index of the first element, which is greater than a specified element using itertools module. ","from itertools import takewhile
def first_index(l1, n):
    return len(list(takewhile(lambda x: x[1] <= n, enumerate(l1))))


nums = [12,45,23,67,78,90,100,76,38,62,73,29,83]
print(""Original list:"")
print(nums)
n = 73
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
n = 21
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
n = 80
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
n = 55
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
","def get_index(element, iterable):
    for i, e in enumerate(iterable):
        if e > element:
            return i
    return -1

print(get_index(5, [1, 2, 3, 4, 5, 6, 7, 8, 9]))

""""""

# Solution

def get_index(element, iterable):
    for i, e in enumerate(iterable):"
1287,Write a Python program to sort unsorted numbers using Timsort. ,"#Ref:https://bit.ly/3qNYxh9
def binary_search(lst, item, start, end):
    if start == end:
        return start if lst[start] > item else start + 1
    if start > end:
        return start

    mid = (start + end) // 2
    if lst[mid] < item:
        return binary_search(lst, item, mid + 1, end)
    elif lst[mid] > item:
        return binary_search(lst, item, start, mid - 1)
    else:
        return mid
def insertion_sort(lst):
    length = len(lst)
    for index in range(1, length):
        value = lst[index]
        pos = binary_search(lst, value, 0, index - 1)
        lst = lst[:pos] + [value] + lst[pos:index] + lst[index + 1 :]
    return lst
def merge(left, right):
    if not left:
        return right

    if not right:
        return left
    if left[0] < right[0]:
        return [left[0]] + merge(left[1:], right)
    return [right[0]] + merge(left, right[1:])

def tim_sort(lst):
    length = len(lst)
    runs, sorted_runs = [], []
    new_run = [lst[0]]
    sorted_array = []
    i = 1
    while i < length:
        if lst[i] < lst[i - 1]:
            runs.append(new_run)
            new_run = [lst[i]]
        else:
            new_run.append(lst[i])
        i += 1
    runs.append(new_run)
    for run in runs:
        sorted_runs.append(insertion_sort(run))
    for run in sorted_runs:
        sorted_array = merge(sorted_array, run)
    return sorted_array
lst = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(lst)
print(""After applying Timsort the said list becomes:"")
sorted_lst = tim_sort(lst)
print(sorted_lst)
lst =  ""Python""
print(""\nOriginal list:"")
print(lst)
print(""After applying Timsort the said list becomes:"")
sorted_lst = tim_sort(lst)
print(sorted_lst)
lst = (1.1, 1, 0, -1, -1.1)
print(""\nOriginal list:"")
print(lst)
print(""After applying Timsort the said list becomes:"")
sorted_lst = tim_sort(lst)
print(sorted_lst)
","def timsort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [6, 4, 8, 2, 5, 1, 9, 7, 3]
print(tsort(arr))

""""""

def timsort"
1288,Write a Python program to check if a given function returns True for at least one element in the list. ,"def test(lst, fn = lambda x: x):
  return all(not fn(x) for x in lst)
print(test([1, 0, 2, 3], lambda x: x >= 3 ))
print(test([1, 0, 2, 3], lambda x: x < 0 ))
print(test([2, 2, 4, 4]))
","def is_true(x):
    if x == 0:
        return False
    else:
        return True

print(is_true(0))
print(is_true(1))
print(is_true(2))
print(is_true(3))
print(is_true(4))
print(is_true(5))
print(is_true(6))
print(is_true(7))
print(is_true("
1289,Write a Python program to initialize a list containing the numbers in the specified range where start and end are inclusive and the ratio between two terms is step. Returns an error if step equals 1. ,"from math import floor, log
def geometric_progression(end, start=1, step=2):
  return [start * step ** i for i in range(floor(log(end / start)
          / log(step)) + 1)] 
print(geometric_progression(256))
print(geometric_progression(256, 3))
print(geometric_progression(256, 1, 4))
","import math

def main():
    print(""Enter the range of numbers to be included in the list: "")
    start = int(input())
    end = int(input())
    step = int(input())
    print(""Enter the step value: "")
    step = int(input())
    print(""Enter the range of numbers to be included in the list: "")
    start"
1290,"Write a Pandas program to create a whole month of dates in daily frequencies. Also find the maximum, minimum timestamp and indexs. ","import pandas as pd
dates = pd.Series(pd.date_range('2020-12-01',periods=31, freq='D'))
print(""Month of December 2020:"")
print(dates)
dates = pd.Series(pd.date_range('2020-12-01',periods=31, freq='D'))
print(""\nMaximum date: "", dates.max())
print(""Minimum date: "", dates.min())
print(""Maximum index: "", dates.idxmax())
print(""Minimum index: "", dates.idxmin())
","import pandas as pd
import datetime as dt

# Create a dataframe
df = pd.DataFrame(columns=['Date', 'Daily Frequency'])

# Create a loop to iterate over the dates
for i in range(1, 32):
    # Create a new date
    new_date = dt.date(2021, i, 1)
    # Create a new frequency
    new_frequency ="
1291,Write a Python program to sort a list of elements using Radix sort. ,"def radix_sort(nums):
    RADIX = 10
    placement = 1
    max_digit = max(nums)

    while placement < max_digit:
      buckets = [list() for _ in range( RADIX )]
      for i in nums:
        tmp = int((i / placement) % RADIX)
        buckets[tmp].append(i)
      a = 0
      for b in range( RADIX ):
        buck = buckets[b]
        for i in buck:
          nums[a] = i
          a += 1
      placement *= RADIX
    return nums
user_input = input(""Input numbers separated by a comma:\n"").strip()
nums = [int(item) for item in user_input.split(',')]
print(radix_sort(nums))
","def radixSort(arr):
    # Write your code here
    for i in range(len(arr)):
        for j in range(len(arr)):
            if arr[j] >= arr[i]:
                arr[j], arr[i] = arr[i], arr[j]
    return arr

# Driver code
arr = [10, 4, 9, 2, 5, 8, 3, 1, 6, 7]
print(radixSort(arr))"
1292,Write a Pandas program to add some data to an existing Series. ,"import pandas as pd
s = pd.Series(['100', '200', 'python', '300.12', '400'])
print(""Original Data Series:"")
print(s)
print(""\nData Series after adding some data:"")
new_s = s.append(pd.Series(['500', 'php']))
print(new_s)
","import pandas as pd

# Create a Pandas DataFrame
df = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})

# Add the new column to the existing DataFrame
df['col3'] = df['col1'] + df['col2']

# Print the new DataFrame
print(df)

# Create a Pandas Series
s = pd.Series([1, 2, 3, 4"
1293,"Write a Python program to create a datetime object, converted to the specified timezone using arrow module. ","import arrow
utc = arrow.utcnow()
pacific=arrow.now('US/Pacific')
nyc=arrow.now('America/Chicago').tzinfo
print(pacific.astimezone(nyc))
","import datetime

# Convert the datetime object to a string
print(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))

# Convert the string to a datetime object
print(datetime.datetime.strptime('2021-10-10 12:12:12', '%Y-%m-%d %H:%M:%S'))

# Convert the"
1294,Write a Python program to create a dictionary from two lists without losing duplicate values. ,"from collections import defaultdict
class_list = ['Class-V', 'Class-VI', 'Class-VII', 'Class-VIII']
id_list = [1, 2, 2, 3]
temp = defaultdict(set)
for c, i in zip(class_list, id_list):
    temp[c].add(i)
print(temp)
","def solution(a, b):
    d = {}
    for i in a:
        if i in b:
            d[i] = b.count(i)
    return d

print(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def solution(a, b):
    d = {}"
1295,Write a Python program to create a dictionary with the same keys as the given dictionary and values generated by running the given function for each value. ,"def test(obj, fn):
  return dict((k, fn(v)) for k, v in obj.items())
 
users = {
  'Theodore': { 'user': 'Theodore', 'age': 45 },
  'Roxanne': { 'user': 'Roxanne', 'age': 15 },
  'Mathew': { 'user': 'Mathew', 'age': 21 },
}
print(""\nOriginal dictionary elements:"")
print(users)
print(""\nDictionary with the same keys:"")
print(test(users, lambda u : u['age']))
","def solution(d, f):
    answer = {}
    for i in d:
        answer[i] = f(d[i])
    return answer

def f(d):
    return d.values()

print(solution({1:2, 2:3, 3:4}, f))

""""""

def solution(d, f):
    answer = {}
    for i in d:
        answer["
1296,Write a Pandas program to create a plot of stock price and trading volume of Alphabet Inc. between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
stock_data = df1.set_index('Date')
top_plt = plt.subplot2grid((5,4), (0, 0), rowspan=3, colspan=4)
top_plt.plot(stock_data.index, stock_data[""Close""])
plt.title('Historical stock prices of Alphabet Inc. [01-04-2020 to 30-09-2020]')
bottom_plt = plt.subplot2grid((5,4), (3,0), rowspan=1, colspan=4)
bottom_plt.bar(stock_data.index, stock_data['Volume'])
plt.title('\nAlphabet Inc. Trading Volume', y=-0.60)
plt.gcf().set_size_inches(12,8)
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])

df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')

df['Volume'] = df['Volume'].astype(float)

df['Trading"
1297,Write a Python program to square and cube every number in a given list of integers using Lambda. ,"nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(""Original list of integers:"")
print(nums)
print(""\nSquare every number of the said list:"")
square_nums = list(map(lambda x: x ** 2, nums))
print(square_nums)
print(""\nCube every number of the said list:"")
cube_nums = list(map(lambda x: x ** 3, nums))
print(cube_nums)
","def square(numbers):
    return [i**2 for i in numbers]

def cube(numbers):
    return [i**3 for i in numbers]

print(square(numbers))
print(cube(numbers))

""""""

# Solution

def square(numbers):
    return [i**2 for i in numbers]

def cube(numbers):
    return [i**3 for i in numbers]

numbers ="
1298,"Write a NumPy program to generate a uniform, non-uniform random sample from a given 1-D array with and without replacement. ","import numpy as np 
print(""Generate a uniform random sample with replacement:"") 
print(np.random.choice(7, 5))
print(""\nGenerate a uniform random sample without replacement:"") 
print(np.random.choice(7, 5, replace=False))
print(""\nGenerate a non-uniform random sample with replacement:"") 
print(np.random.choice(7, 5, p=[0.1, 0.2, 0, 0.2, 0.4, 0, 0.1]))
print(""\nGenerate a uniform random sample without replacement:"") 
print(np.random.choice(7, 5, replace=False, p=[0.1, 0.2, 0, 0.2, 0.4, 0, 0.1]))  
","import numpy as np

# Generate a uniform random sample
np.random.seed(0)
x = np.random.rand(10)

# Generate a non-uniform random sample
np.random.seed(1)
x = np.random.rand(10)

# Generate a uniform random sample with replacement
np.random.seed(2)
x = np.random.rand(10)"
1299,Write a Python program to use double quotes to display strings. ,"import json
print(json.dumps({'Alex': 1, 'Suresh': 2, 'Agnessa': 3}))
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

#"
1300,Write a Python program to get the current memory address and the length in elements of the buffer used to hold an array's contents and also find the size of the memory buffer in bytes. ,"from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print(""Original array: ""+str(array_num))
print(""Current memory address and the length in elements of the buffer: ""+str(array_num.buffer_info()))
print(""The size of the memory buffer in bytes: ""+str(array_num.buffer_info()[1] * array_num.itemsize))
","def get_memory_address(arr):
    # Your code here
    return arr[0], len(arr)

def get_length(arr):
    # Your code here
    return len(arr)

def get_buffer_size(arr):
    # Your code here
    return len(arr)

def get_buffer_address(arr):
    # Your code here"
1301,Write a NumPy program to compute the determinant of a given square array. ,"import numpy as np
from numpy import linalg as LA
a = np.array([[1, 0], [1, 2]])
print(""Original 2-d array"")
print(a)
print(""Determinant of the said 2-D array:"")
print(np.linalg.det(a))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(np.linalg.det(a))

# Output:

# Traceback (most recent call last):
#   File ""<stdin>"", line 1, in <module>
# TypeError: unsupported operand type(s) for *: 'int' and 'float'

# Output:

#"
1302,"Write a Pandas program to split the following dataframe into groups by school code and get mean, min, and max value of age with customized column name for each school. ","import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
student_data = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    ' height ': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])

print(""Original DataFrame:"")
print(student_data)
print('\nMean, min, and max value of age for each school with customized column names:')
grouped_single = student_data.groupby('school_code').agg(Age_Mean = ('age','mean'),Age_Max=('age',max),Age_Min=('age',min))
print(grouped_single)
","import pandas as pd

df = pd.read_csv(""https://github.com/jbrownlee/Datasets/blob/master/python/data/student_scores.csv"")

# Create a new column named ""avg"" that is the mean of all the values in the column.
df[""avg""] = df[""gpa""].astype(""float"").mean()"
1303,"Write a Python program to filter the height and width of students, which are stored in a dictionary using lambda. ","def filter_data(students):
    result = dict(filter(lambda x: (x[1][0], x[1][1]) > (6.0, 70), students.items()))
    return result  
students = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}
print(""Original Dictionary:"")
print(students)
print(""\nHeight> 6ft and Weight> 70kg:"")
print(filter_data(students))
","height_dict = {
    ""Harry"": [180, 173, 165, 173, 165, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173,"
1304,"Write a NumPy program to remove the first dimension from a given array of shape (1,3,4). ","import numpy as np
nums = np.array([[[1, 2, 3, 4],
               [0, 1, 3, 4],
               [5, 0, 3, 2]]])
print('Shape of the said array:')
print(nums.shape) 
print(""\nAfter removing the first dimension of the shape of the said array:"")
","import numpy as np

a = np.array([[1,2,3,4],[5,6,7,8]])
print(a)

a = np.array([[1,2,3,4],[5,6,7,8]])
print(a.shape)

a = np.array([[1,2,3,4],[5,6,7,8]])
print(a.ndim)"
1305,Write a NumPy program to compute the following polynomial values. ,"import numpy as np
print(""Polynomial value when x = 2:"")
print(np.polyval([1, -2, 1], 2))
print(""Polynomial value when x = 3:"")
print(np.polyval([1, -12, 10, 7, -10], 3))
","x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
y = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
y = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

x = np"
1306,Write a Python program to get the file size of a plain file. ,"def file_size(fname):
        import os
        statinfo = os.stat(fname)
        return statinfo.st_size

print(""File size in bytes of a plain file: "",file_size(""test.txt""))
","import os

def get_file_size(file_name):
    with open(file_name, 'rb') as f:
        return os.fstat(f.fileno()).st_size

print(get_file_size('file.txt'))

""""""

# Solution

def get_file_size(file_name):
    with open(file_name, 'rb') as f:
        return os.fstat(f.fileno()).st_"
1307,Write a Python program to remove all consecutive duplicates of a given string. ,"from itertools import groupby 
def remove_all_consecutive(str1): 
	result_str = [] 
	for (key,group) in groupby(str1): 
		result_str.append(key) 

	return ''.join(result_str)
	
str1 = 'xxxxxyyyyy'
print(""Original string:"" + str1)
print(""After removing consecutive duplicates: "" + str1)
print(remove_all_consecutive(str1))
","def remove_consecutive_duplicates(string):
    # your code goes here
    return string

# Test your code
print(remove_consecutive_duplicates(""abcabcbb""))
print(remove_consecutive_duplicates(""bbbbb""))
print(remove_consecutive_duplicates(""bbbbb""))
print(remove_consecutive_duplicates(""bbbbb""))
print(remove_consecutive_duplicates(""bb"
1308,Write a Python program that accept some words and count the number of distinct words. Print the number of distinct words and number of occurrences for each distinct word according to their appearance. ,"from collections import Counter, OrderedDict
class OrderedCounter(Counter,OrderedDict):
   pass
word_array = []
n = int(input(""Input number of words: ""))
print(""Input the words: "")
for i in range(n):
   word_array.append(input().strip())
word_ctr = OrderedCounter(word_array)
print(len(word_ctr))
for word in word_ctr:
   print(word_ctr[word],end=' ')
","Sample Input

The following is a sample input.

The following is a sample output.

Sample Input

The following is a sample input.

The following is a sample output.

Sample Input

The following is a sample input.

The following is a sample output.

Sample Input

The following is a sample input.

The following is a sample output.

Sample Input"
1309,Write a Pandas program to get the average mean of the UFO (unidentified flying object) sighting was reported. ,"import pandas as pd
#Source: https://bit.ly/32kGinQ
df = pd.read_csv(r'ufo.csv')
df['date_documented'] = df['date_documented'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
# Add a new column instance, this adds a value to each instance of ufo sighting
df['instance'] = 1

# set index to time, this makes df a time series df and then you can apply pandas time series functions.
df.set_index(df['date_documented'], drop=True, inplace=True)

# create another df by resampling the original df and counting the instance column by Month ('M' is resample by month)
ufo2 = pd.DataFrame(df['instance'].resample('M').count())

# just to find month of resampled observation
ufo2['date_documented'] = pd.to_datetime(ufo2.index.values)

ufo2['month'] = ufo2['date_documented'].apply(lambda x: x.month)
print(""Average mean of  the UFO (unidentified flying object) sighting was reported:"")
print(ufo2.groupby(by='month').mean())
","import pandas as pd

# Read the data
df = pd.read_csv('/Users/srinivasan/Downloads/UFO_Sighting_Report.csv')

# Calculate the average
df['UFO_Sighting_Report_Average'] = df['UFO_Sighting_Report'].mean()

# Print the average
print(df['UFO_Sighting_Report_Average'])

# Create a"
1310,Write a Python program to reverse a given list of lists. ,"def reverse_list_of_lists(list1):
    return list1[::-1]
colors = [['orange', 'red'], ['green', 'blue'], ['white', 'black', 'pink']]
print(""Original list:"")
print(colors)
print(""\nReverse said list of lists:"")
print(reverse_list_of_lists(colors))
nums = [[1,2,3,4], [0,2,4,5], [2,3,4,2,4]]
print(""\nOriginal list:"")
print(nums)
print(""\nReverse said list of lists:"")
print(reverse_list_of_lists(nums))
","def reverse_list(lst):
    lst.reverse()
    return lst

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(reverse_list(lst))

""""""

# Solution 1

def reverse_list(lst):
    lst.reverse()
    return lst

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print("
1311,Write a Python program to iterate over two lists simultaneously. ,"num = [1, 2, 3]
color = ['red', 'white', 'black']
for (a,b) in zip(num, color):
     print(a, b)
	 ","def iterate_list(l1, l2):
    for item in l1:
        for item in l2:
            print(item, end=' ')
        print()

l1 = [1, 2, 3, 4, 5]
l2 = ['a', 'b', 'c', 'd', 'e']

iterate_list(l1, l2)

l1 = [1, 2, 3, 4, 5]
l2 = ['a', 'b"
1312,Write a Python program to split a given dictionary of lists into list of dictionaries using map function. ,"def list_of_dicts(marks):
    result = map(dict, zip(*[[(key, val) for val in value] for key, value in marks.items()]))
    return list(result)
marks = {'Science': [88, 89, 62, 95], 'Language': [77, 78, 84, 80]}
print(""Original dictionary of lists:"")
print(marks)
print(""\nSplit said dictionary of lists into list of dictionaries:"")
print(list_of_dicts(marks))
","d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}

print(list(map(lambda x: dict(x), d.values())))

""""""

d = {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}

print(list(map(lambda x: dict(x), d"
1313,Write a Python program to find the second largest number in a list. ,"def second_largest(numbers):
  if (len(numbers)<2):
    return
  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):
    return
  dup_items = set()
  uniq_items = []
  for x in numbers:
    if x not in dup_items:
      uniq_items.append(x)
      dup_items.add(x)
  uniq_items.sort()    
  return  uniq_items[-2]   
print(second_largest([1,2,3,4,4]))
print(second_largest([1, 1, 1, 0, 0, 0, 2, -2, -2]))
print(second_largest([2,2]))
print(second_largest([1]))
","def second_largest(numbers):
    if len(numbers) == 0:
        return None
    else:
        return numbers[0]

print(second_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def second_largest(numbers):
    if len(numbers) == 0:
        return None
    else:
        return numbers[0]

print(second_largest([1, 2"
1314,Write a Pandas program to split the following dataframe into groups based on all columns and calculate Groupby value counts on the dataframe. ,"import pandas as pd
df = pd.DataFrame( {'id' : [1, 2, 1, 1, 2, 1, 2], 
                    'type' : [10, 15, 11, 20, 21, 12, 14], 
                    'book' : ['Math','English','Physics','Math','English','Physics','English']})

print(""Original DataFrame:"")
print(df)
result = df.groupby(['id', 'type', 'book']).size().unstack(fill_value=0)
print(""\nResult:"")
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

print"
1315,Write a Python program to sort a list of lists by a given index of the inner list using lambda. ,"def index_on_inner_list(list_data, index_no):
    result = sorted(list_data, key=lambda x: x[index_no])
    return result
students = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] 
print (""Original list:"")
print(students)
index_no = 0
print(""\nSort the said list of lists by a given index"",""( Index = "",index_no,"") of the inner list"")
print(index_on_inner_list(students, index_no))
index_no = 2
print(""\nSort the said list of lists by a given index"",""( Index = "",index_no,"") of the inner list"")
print(index_on_inner_list(students, index_no))
","def sort_by_index(lst, index):
    return sorted(lst, key=lambda x: x[index])

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(sort_by_index(lst, 0))

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(sort_by_index(lst"
1316,Write a Python program to get all combinations of key-value pairs in a given dictionary. ,"import itertools
def test(dictt):
    result = list(map(dict, itertools.combinations(dictt.items(), 2)))
    return result    

students = {'V' : [1, 4, 6, 10], 'VI' : [1, 4, 12], 'VII' : [1, 3, 8]} 
print(""\nOriginal Dictionary:"")
print(students)
print(""\nCombinations of key-value pairs of the said dictionary:"")
print(test(students))

students = {'V' : [1, 3, 5], 'VI' : [1, 5]} 
print(""\nOriginal Dictionary:"")
print(students)
print(""\nCombinations of key-value pairs of the said dictionary:"")
print(test(students))
","python solution.py

""""""

def get_key_value_pairs(dictionary):
    """"""
    :param dictionary: dictionary to get key-value pairs from
    :return: list of key-value pairs
    """"""
    return [k, v for k, v in dictionary.items()]

def get_all_key_value_pairs(dictionary):
    """"""
    :param dictionary: dictionary to get all key-value pairs from
    :return"
1317,Write a Pandas program to create a Pivot table and find the region wise total sale. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df,index=""Region"",values=""Sale_amt"", aggfunc = np.sum)
print(table)
","import pandas as pd

df = pd.read_csv(""C:\\Users\\DELL\\Desktop\\Python\\Sales.csv"")

df.head()

df.columns = ['Region', 'Sales']

df.head()

df.Sales.plot(kind='bar')

df.Sales.plot(kind='barh')

df.Sales.plot(kind='barh')

df.Sales.plot(kind='barh"
1318,Write a Python program to sort a list alphabetically in a dictionary. ,"num = {'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]}
sorted_dict = {x: sorted(y) for x, y in num.items()}
print(sorted_dict)
","def sort_list(list):
    new_list = []
    for i in list:
        new_list.append(i)
    new_list.sort()
    return new_list

print(sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]))

""""""

def sort_list(list):
    new_list = []
    for i in list:
        new_list.append(i)
    new_list"
1319,Write a Python program to sort unsorted numbers using Merge-insertion sort. ,"#Ref.https://bit.ly/3r32ezJ
from __future__ import annotations


def merge_insertion_sort(collection: list[int]) -> list[int]:
    """"""Pure implementation of merge-insertion sort algorithm in Python
    :param collection: some mutable ordered collection with heterogeneous
    comparable items inside
    :return: the same collection ordered by ascending
    Examples:
    >>> merge_insertion_sort([0, 5, 3, 2, 2])
    [0, 2, 2, 3, 5]
    >>> merge_insertion_sort([99])
    [99]
    >>> merge_insertion_sort([-2, -5, -45])
    [-45, -5, -2]
    """"""

    def binary_search_insertion(sorted_list, item):
        left = 0
        right = len(sorted_list) - 1
        while left <= right:
            middle = (left + right) // 2
            if left == right:
                if sorted_list[middle] < item:
                    left = middle + 1
                break
            elif sorted_list[middle] < item:
                left = middle + 1
            else:
                right = middle - 1
        sorted_list.insert(left, item)
        return sorted_list

    def sortlist_2d(list_2d):
        def merge(left, right):
            result = []
            while left and right:
                if left[0][0] < right[0][0]:
                    result.append(left.pop(0))
                else:
                    result.append(right.pop(0))
            return result + left + right

        length = len(list_2d)
        if length <= 1:
            return list_2d
        middle = length // 2
        return merge(sortlist_2d(list_2d[:middle]), sortlist_2d(list_2d[middle:]))

    if len(collection) <= 1:
        return collection

    """"""
    Group the items into two pairs, and leave one element if there is a last odd item.
    Example: [999, 100, 75, 40, 10000]
                -> [999, 100], [75, 40]. Leave 10000.
    """"""
    two_paired_list = []
    has_last_odd_item = False
    for i in range(0, len(collection), 2):
        if i == len(collection) - 1:
            has_last_odd_item = True
        else:
            """"""
            Sort two-pairs in each groups.
            Example: [999, 100], [75, 40]
                        -> [100, 999], [40, 75]
            """"""
            if collection[i] < collection[i + 1]:
                two_paired_list.append([collection[i], collection[i + 1]])
            else:
                two_paired_list.append([collection[i + 1], collection[i]])

    """"""
    Sort two_paired_list.
    Example: [100, 999], [40, 75]
                -> [40, 75], [100, 999]
    """"""
    sorted_list_2d = sortlist_2d(two_paired_list)

    """"""
    40 < 100 is sure because it has already been sorted.
    Generate the sorted_list of them so that you can avoid unnecessary comparison.
    Example:
           group0 group1
           40     100
           75     999
        ->
           group0 group1
           [40,   100]
           75     999
    """"""
    result = [i[0] for i in sorted_list_2d]

    """"""
    100 < 999 is sure because it has already been sorted.
    Put 999 in last of the sorted_list so that you can avoid unnecessary comparison.
    Example:
           group0 group1
           [40,   100]
           75     999
        ->
           group0 group1
           [40,   100,   999]
           75
    """"""
    result.append(sorted_list_2d[-1][1])

    """"""
    Insert the last odd item left if there is.
    Example:
           group0 group1
           [40,   100,   999]
           75
        ->
           group0 group1
           [40,   100,   999,   10000]
           75
    """"""
    if has_last_odd_item:
        pivot = collection[-1]
        result = binary_search_insertion(result, pivot)

    """"""
    Insert the remaining items.
    In this case, 40 < 75 is sure because it has already been sorted.
    Therefore, you only need to insert 75 into [100, 999, 10000],
    so that you can avoid unnecessary comparison.
    Example:
           group0 group1
           [40,   100,   999,   10000]
            ^ You don't need to compare with this as 40 < 75 is already sure.
           75
        ->
           [40,   75,    100,   999,   10000]
    """"""
    is_last_odd_item_inserted_before_this_index = False
    for i in range(len(sorted_list_2d) - 1):
        if result[i] == collection[-i]:
            is_last_odd_item_inserted_before_this_index = True
        pivot = sorted_list_2d[i][1]
        # If last_odd_item is inserted before the item's index,
        # you should forward index one more.
        if is_last_odd_item_inserted_before_this_index:
            result = result[: i + 2] + binary_search_insertion(result[i + 2 :], pivot)
        else:
            result = result[: i + 1] + binary_search_insertion(result[i + 1 :], pivot)

    return result

nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
print(""After applying Merge-insertion Sort the said list becomes:"")
print(merge_insertion_sort(nums))
print(nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
print(""After applying Merge-insertion  Sort the said list becomes:"")
print(merge_insertion_sort(nums))
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Merge-insertion  Sort the said list becomes:"")
print(merge_insertion_sort(nums))

chars = ['z','a','y','b','x','c']
print(""\nOriginal list:"")
print(chars)
print(""After applying Merge-insertion  Sort the said list becomes:"")
print(merge_insertion_sort(chars))
","def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = arr[:mid]
    right = arr[mid:]
    left = merge_sort(left)
    right = merge_sort(right)
    return merge(left, right)

def merge(left, right):
    result = []
    i, j = 0, 0
    while i < len(left) and j"
1320,Write a NumPy program to save a given array to a text file and load it. ,"import numpy as np
import os
x = np.arange(12).reshape(4, 3)
print(""Original array:"")
print(x)
header = 'col1 col2 col3'
np.savetxt('temp.txt', x, fmt=""%d"", header=header) 
print(""After loading, content of the text file:"")
result = np.loadtxt('temp.txt')
print(result)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5])

np.savetxt('arr.txt', arr)

arr2 = np.loadtxt('arr.txt')

print(arr2)

arr3 = np.loadtxt('arr.txt', dtype=int)

print(arr3)

arr4 = np.loadtxt('arr.txt', dtype=str)

print(arr4)"
1321,"Write a Python program to sum two or more lists, the lengths of the lists may be different. ","def sum_lists_diff_length(test_list):
    result =  [sum(x) for x in zip(*map(lambda x:x+[0]*max(map(len, test_list)) if len(x)<max(map(len, test_list)) else x, test_list))]
    return result

nums = [[1,2,4],[2,4,4],[1,2]]
print(""\nOriginal list:"")
print(nums)
print(""Sum said lists with different lengths:"")
print(sum_lists_diff_length(nums))

nums = [[1],[2,4,4],[1,2],[4]]
print(""\nOriginal list:"")
print(nums)
print(""Sum said lists with different lengths:"")
print(sum_lists_diff_length(nums))
","def sum_lists(l1, l2):
    return [len(l1), len(l2)]

l1 = [1, 2, 3, 4, 5]
l2 = [1, 2, 3, 4, 5]

print(sum_lists(l1, l2))

""""""

def sum_lists(l1, l2):
    return [len(l1), len(l2)]

l1 = [1"
1322,"Write a Python program to create a new Arrow object, representing the ""floor"" of the timespan of the Arrow object in a given timeframe using arrow module. The timeframe can be any datetime property like day, hour, minute. ","import arrow
print(arrow.utcnow())
print(""Hour ceiling:"")
print(arrow.utcnow().floor('hour'))
print(""\nMinute ceiling:"")
print(arrow.utcnow().floor('minute'))
print(""\nSecond ceiling:"")
print(arrow.utcnow().floor('second'))
","import arrow

# create a new Arrow object
new_arrow = arrow.Arrow(arrow.now())

# create a new timeframe
new_timeframe = arrow.TimeFrame(new_arrow.floor, new_arrow.hour, new_arrow.minute)

# create a new arrow object
new_arrow = arrow.Arrow(arrow."
1323,Write a Python program to get the third side of right angled triangle from two given sides. ,"def pythagoras(opposite_side,adjacent_side,hypotenuse):
        if opposite_side == str(""x""):
            return (""Opposite = "" + str(((hypotenuse**2) - (adjacent_side**2))**0.5))
        elif adjacent_side == str(""x""):
            return (""Adjacent = "" + str(((hypotenuse**2) - (opposite_side**2))**0.5))
        elif hypotenuse == str(""x""):
            return (""Hypotenuse = "" + str(((opposite_side**2) + (adjacent_side**2))**0.5))
        else:
            return ""You know the answer!""
    
print(pythagoras(3,4,'x'))
print(pythagoras(3,'x',5))
print(pythagoras('x',4,5))
print(pythagoras(3,4,5))
","def get_triangle(a, b, c):
    if a == b == c:
        return a
    elif a == b or b == c or a == c:
        return b
    else:
        return get_triangle(a, b, c - 1) + get_triangle(a, b - 1, c - 1) + get_triangle(a - 1, b, c - 1) + get_triangle(a - 1, b -"
1324,Write a Python function to create the HTML string with tags around the word(s). ,"def add_tags(tag, word):
	return ""<%s>%s</%s>"" % (tag, word, tag)
print(add_tags('i', 'Python'))
print(add_tags('b', 'Python Tutorial'))
","def solution(word):
    return f'<p>{word}</p>'

print(solution('python'))

""""""

def solution(word):
    return f'<p>{word}</p>'

print(solution('python'))

""""""

def solution(word):
    return f'<p>{word}</p>'

print(solution('python'))

""""""

def solution(word):"
1325,Write a Python program to get the least common multiple (LCM) of two positive integers. ,"def lcm(x, y):
  if x > y:
      z = x
  else:
      z = y
  while(True):
      if((z % x == 0) and (z % y == 0)):
          lcm = z
          break
      z += 1
  return lcm
print(lcm(4, 6))
print(lcm(15, 17))
","def lcm(x, y):
    return (x * y) // gcd(x, y)

def gcd(x, y):
    while y:
        x, y = y, x % y
    return x

print(lcm(12, 24))

# Output: 24
# Explanation: The L.C.M. is the smallest positive integer that is evenly divisible by both 12 and 24.

# Input Format
# The first"
1326,"Write a Python program to count Uppercase, Lowercase, special character and numeric values in a given string. ","def count_chars(str):
     upper_ctr, lower_ctr, number_ctr, special_ctr = 0, 0, 0, 0
     for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          elif str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1
          elif str[i] >= '0' and str[i] <= '9': number_ctr += 1
          else: special_ctr += 1
     return upper_ctr, lower_ctr, number_ctr, special_ctr
           
str = ""@W3Resource.Com""
print(""Original Substrings:"",str)
u, l, n, s = count_chars(str)
print('\nUpper case characters: ',u)
print('Lower case characters: ',l)
print('Number case: ',n)
print('Special case characters: ',s)
","def count_upper(string):
    count = 0
    for i in string:
        if i.isupper():
            count += 1
    return count

def count_lower(string):
    count = 0
    for i in string:
        if i.islower():
            count += 1
    return count

def count_special(string):
    count = 0
    for i in string:
        if i.isdigit():"
1327,Write a Python program to find all the values in a list are greater than a specified number. ,"list1 = [220, 330, 500]
list2 = [12, 17, 21]
print(all(x >= 200 for x in list1))
print(all(x >= 25 for x in list2))
","def solution(lst, n):
    for i in lst:
        if i > n:
            print(i)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 10
solution(lst, n)

""""""

def solution(lst, n):
    for i in lst:
        if i > n:
            print(i)

lst = ["
1328,"Write a Python program to join two given list of lists of same length, element wise. ","def elementswise_join(l1, l2):
    result = [x + y for x, y in zip(l1, l2)]
    return result

nums1 = [[10,20], [30,40], [50,60], [30,20,80]]
nums2 = [[61], [12,14,15], [12,13,19,20], [12]]
print(""Original lists:"")
print(nums1)
print(nums2)
print(""\nJoin the said two lists element wise:"")
print(elementswise_join(nums1, nums2))

list1 = [['a','b'], ['b','c','d'], ['e', 'f']]
list2 = [['p','q'], ['p','s','t'], ['u','v','w']]
print(""\nOriginal lists:"")
print(list1)
print(list2)
print(""\nJoin the said two lists element wise:"")
print(elementswise_join(list1, list2))
","l1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
l2 = [[10, 11, 12], [13, 14, 15], [16, 17, 18]]

l3 = []
for i in range(len(l1)):
    for j in range(len(l1[i])):
        l3.append(l1[i][j])

l4 = []
for i in range(len"
1329,Write a NumPy program to find indices of elements equal to zero in a NumPy array. ,"import numpy as np
nums = np.array([1,0,2,0,3,0,4,5,6,7,8])
print(""Original array:"")
print(nums)
print(""Indices of elements equal to zero of the said array:"")
result = np.where(nums == 0)[0]
print(result)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

zero_indices = np.where(arr == 0)

print(zero_indices)

# Output:
# array([0, 1, 3, 4, 6, 7, 8, 9, 10])

# In[ ]:"
1330,Write a Python program to search a date from a given string using arrow module. ,"import arrow
print(""\nSearch a date from a string:"")
d1 = arrow.get('David was born in 11 June 2003', 'DD MMMM YYYY')
print(d1)
","import arrow

date = input(""Enter the date: "")

print(arrow.get(date))

""""""

import arrow

date = input(""Enter the date: "")

print(arrow.get(date))"
1331,Write a Pandas program to join (left join) the two dataframes using keys from left dataframe only. ,"import pandas as pd
data1 = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],
                     'key2': ['K0', 'K1', 'K0', 'K1'],
                     'P': ['P0', 'P1', 'P2', 'P3'],
                     'Q': ['Q0', 'Q1', 'Q2', 'Q3']}) 
data2 = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],
                      'key2': ['K0', 'K0', 'K0', 'K0'],
                      'R': ['R0', 'R1', 'R2', 'R3'],
                      'S': ['S0', 'S1', 'S2', 'S3']})
print(""Original DataFrames:"")
print(data1)
print(""--------------------"")
print(data2)
print(""\nMerged Data (keys from data1):"")
merged_data = pd.merge(data1, data2, how='left', on=['key1', 'key2'])
print(merged_data)
print(""\nMerged Data (keys from data2):"")
merged_data = pd.merge(data2, data1, how='left', on=['key1', 'key2'])
print(merged_data)
","import pandas as pd

left = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})
right = pd.DataFrame({'c': [7, 8, 9], 'd': [10, 11, 12]})

left.join(right, on='a')

# OUTPUT:
# a   b   c   d
# 1   1   4   7"
1332,Write a Python program to sort a list of elements using Heap sort. ,"def heap_data(nums, index, heap_size):
    largest_num = index
    left_index = 2 * index + 1
    right_index = 2 * index + 2
    if left_index < heap_size and nums[left_index] > nums[largest_num]:
        largest_num = left_index

    if right_index < heap_size and nums[right_index] > nums[largest_num]:
        largest_num = right_index
    if largest_num != index:
        nums[largest_num], nums[index] = nums[index], nums[largest_num]
        heap_data(nums, largest_num, heap_size)
def heap_sort(nums):
    n = len(nums)
    for i in range(n // 2 - 1, -1, -1):
        heap_data(nums, i, n)
    for i in range(n - 1, 0, -1):
        nums[0], nums[i] = nums[i], nums[0]
        heap_data(nums, 0, i)
    return nums
user_input = input(""Input numbers separated by a comma:\n"").strip()
nums = [int(item) for item in user_input.split(',')]
heap_sort(nums)
print(nums)
","def heapSort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(heapSort(arr))

""""""

def heapSort(arr):"
1333,"Write a Python program to find the maximum, minimum aggregation pair in given list of integers. ","from itertools import combinations 
def max_aggregate(l_data):
    max_pair = max(combinations(l_data, 2), key = lambda pair: pair[0] + pair[1])
    min_pair = min(combinations(l_data, 2), key = lambda pair: pair[0] + pair[1])
    return max_pair,min_pair
nums = [1,3,4,5,4,7,9,11,10,9]
print(""Original list:"")
print(nums)
result = max_aggregate(nums)
print(""\nMaximum aggregation pair of the said list of tuple pair:"")
print(result[0])
print(""\nMinimum aggregation pair of the said list of tuple pair:"")
print(result[1])
","def max_aggregation_pair(arr):
    max_aggregation_pair = arr[0]
    for i in range(1, len(arr)):
        if arr[i] > max_aggregation_pair:
            max_aggregation_pair = arr[i]
    return max_aggregation_pair

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_aggregation_pair("
1334,Write a Pandas program to split the following dataset using group by on 'salesman_id' and find the first order date for each group. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3005,3001,3002,3009,3005,3007,3002,3004,3009,3008,3003,3002],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5004,5003,5002,5004,5001]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nGroupby to find first order date for each group(salesman_id):"")
result = df.groupby('salesman_id')['ord_date'].min()
print(result)
","salesman_id = salesman_id.groupby(['salesman_id'])['salesman_id'].apply(lambda x: x.sort_values(ascending=False).head(1))

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

#"
1335,Write a Python program to create the largest possible number using the elements of a given list of positive integers. ,"def create_largest_number(lst):
    if all(val == 0 for val in lst):
        return '0'
    result = ''.join(sorted((str(val) for val in lst), reverse=True,
                      key=lambda i: i*( len(str(max(lst))) * 2 // len(i))))
    return result
nums = [3, 40, 41, 43, 74, 9]
print(""Original list:"")
print(nums)
print(""Largest possible number using the elements of the said list of positive integers:"")
print(create_largest_number(nums))

nums = [10, 40, 20, 30, 50, 60]
print(""\nOriginal list:"")
print(nums)
print(""Largest possible number using the elements of the said list of positive integers:"")
print(create_largest_number(nums))
nums = [8, 4, 2, 9, 5, 6, 1, 0]
print(""\nOriginal list:"")
print(nums)
print(""Largest possible number using the elements of the said list of positive integers:"")
print(create_largest_number(nums))
","def largest_possible_number(nums):
    max_num = 0
    for num in nums:
        if num > max_num:
            max_num = num
    return max_num

print(largest_possible_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def largest_possible_number(nums):
    max_num = 0
    for"
1336,Write a NumPy program to get the index of a maximum element in a NumPy array along one axis. ,"import numpy as np    
a = np.array([[1,2,3],[4,3,1]])
print(""Original array:"")
print(a)
i,j = np.unravel_index(a.argmax(), a.shape)
print(""Index of a maximum element in a numpy array along one axis:"")
print(a[i,j])
","import numpy as np

a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(a.argmax(axis=0))

# Output:
# [2 3 4]

# Explanation:
# The maximum element along axis 0 is at index 2.
# The maximum element along axis 1 is at index 3.
# The maximum element along axis 2"
1337,"Write a Python program to create a localized, humanized representation of a relative difference in time using arrow module. ","import arrow
print(""Current datetime:"")
print(arrow.utcnow())
earlier = arrow.utcnow().shift(hours=-4)
print(earlier.humanize())
later = earlier.shift(hours=3)
print(later.humanize(earlier))
","import arrow

def time_difference(time1, time2):
    time1 = arrow.get(time1)
    time2 = arrow.get(time2)
    diff = time1 - time2
    return diff.humanize()

print(time_difference(""2021-05-01"", ""2021-05-02""))

""""""

# Solution:

from datetime import datetime

def time_difference("
1338,Write a Python program to get the difference between the two lists. ,"list1 = [1, 3, 5, 7, 9]
list2=[1, 2, 4, 6, 7, 8]
diff_list1_list2 = list(set(list1) - set(list2))
diff_list2_list1 = list(set(list2) - set(list1))
total_diff = diff_list1_list2 + diff_list2_list1
print(total_diff)
","def get_diff(list1, list2):
    diff = []
    for i in range(len(list1)):
        diff.append(list1[i] - list2[i])
    return diff

print(get_diff([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))

""""""

def get_diff(list1, list2):
    diff = []
    for i in range(len(list1)):"
1339,"Write a NumPy program to create an array of 10 zeros,10 ones, 10 fives. ","import numpy as np
array=np.zeros(10)
print(""An array of 10 zeros:"")
print(array)
array=np.ones(10)
print(""An array of 10 ones:"")
print(array)
array=np.ones(10)*5
print(""An array of 10 fives:"")
print(array)
","import numpy as np

arr = np.zeros(10)
arr = np.ones(10)
arr = np.full(10, 5)

arr = np.arange(10)
arr = np.arange(10, 20)
arr = np.arange(10, 20, 2)
arr = np.arange(10, 20, 2, dtype=np.int64)
arr = np.arange(10, 20"
1340,Write a Python program to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.(default value of number=2). ,"def sum_difference(n=2):
    sum_of_squares = 0
    square_of_sum = 0
    for num in range(1, n+1):
        sum_of_squares += num * num
        square_of_sum += num

    square_of_sum = square_of_sum ** 2

    return square_of_sum - sum_of_squares


print(sum_difference(12))
","def sq_sum(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**2
    return sum

print(sq_sum(5))

""""""

# Solution

def sq_sum(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**2
    return sum"
1341,"Write a Pandas program to create a stacked histograms plot with more bins of opening, closing, high, low stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Open','Close','High','Low']]
plt.figure(figsize=(30,30))
df2.hist();
plt.suptitle('Opening/Closing/High/Low stock prices of Alphabet Inc., From 01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])
df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')

df['Open'] = df['Open'].astype"
1342,Write a Python program to read a string and interpreting the string as an array of machine values. ,"from array import array
import binascii
array1 = array('i', [7, 8, 9, 10])
print('array1:', array1)
as_bytes = array1.tobytes()
print('Bytes:', binascii.hexlify(as_bytes))
array2 = array('i')
array2.frombytes(as_bytes)
print('array2:', array2)
","def array_to_string(arr):
    return ''.join(str(x) for x in arr)

def string_to_array(s):
    return [int(x) for x in s.split()]

def main():
    s = input(""Enter a string: "")
    arr = string_to_array(s)
    print(array_to_string(arr))

if __name__ == ""__main__"":
    main"
1343,"Create a 2-dimensional array of size 2 x 3, composed of 4-byte integer elements. Write a NumPy program to find the number of occurrences of a sequence in the said array. ","import numpy as np
np_array = np.array([[1, 2, 3], [2, 1, 2]], np.int32)
print(""Original Numpy array:"")
print(np_array)
print(""Type: "",type(np_array))
print(""Sequence: 1,2"",)
result = repr(np_array).count(""1, 2"")
print(""Number of occurrences of the said sequence:"",result)
","import numpy as np

arr = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]])

print(arr.shape"
1344,Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and find a specific MSHA ID. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')    
df[df[""MSHA ID""]==102901].head()
","import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')

# print(df)

# print(df.head())

# print(df.columns)

# print(df.columns.values)

# print(df.columns.values[0])

# print(df.columns.values[1])

# print("
1345,Write a Python program to sort a list of elements using the bubble sort algorithm. ,"def bubbleSort(nlist):
    for passnum in range(len(nlist)-1,0,-1):
        for i in range(passnum):
            if nlist[i]>nlist[i+1]:
                temp = nlist[i]
                nlist[i] = nlist[i+1]
                nlist[i+1] = temp

nlist = [14,46,43,27,57,41,45,21,70]
bubbleSort(nlist)
print(nlist)
","def bubbleSort(arr):
    for i in range(len(arr)):
        for j in range(len(arr)-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(bubbleSort(arr))

""""""

""""""

def bubbleSort(arr"
1346,"Write a NumPy program to get the floor, ceiling and truncated values of the elements of a numpy array. ","import numpy as np
x = np.array([-1.6, -1.5, -0.3, 0.1, 1.4, 1.8, 2.0])
print(""Original array:"")
print(x)
print(""Floor values of the above array elements:"")
print(np.floor(x))
print(""Ceil values of the above array elements:"")
print(np.ceil(x))
print(""Truncated values of the above array elements:"")
print(np.trunc(x))
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(a.floor())
print(a.ceiling())
print(a.trunc())

# Output:
# [1 2 3 4 5 6 7 8 9]
# [1 2 3 4]
# [1 2 3 4 5 6 7 8 9]
# [1 2 3 4]"
1347,Write a Python program to check whether a JSON string contains complex object or not. ,"import json
def is_complex_num(objct):
    if '__complex__' in objct:
        return complex(objct['real'], objct['img'])
    return objct

complex_object =json.loads('{""__complex__"": true, ""real"": 4, ""img"": 5}', object_hook = is_complex_num)
simple_object =json.loads('{""real"": 4, ""img"": 3}', object_hook = is_complex_num)
print(""Complex_object: "",complex_object)
print(""Without complex object: "",simple_object)
","import json

def is_complex(json_string):
    try:
        json.loads(json_string)
    except ValueError:
        return False
    else:
        return True

print(is_complex(""{'a': 1, 'b': 2}""))
print(is_complex(""[1, 2, 3]""))
print(is_complex(""[1, 2, 3, 4]""))
print(is_complex(""[1, 2, 3,"
1348,Write a Python program to remove the characters which have odd index values of a given string. ,"def odd_values_string(str):
  result = """" 
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result

print(odd_values_string('abcdef'))
print(odd_values_string('python'))
","import string

def odd_index(string):
    odd_index = []
    for i in range(len(string)):
        if string[i] % 2!= 0:
            odd_index.append(string[i])
    return odd_index

print(odd_index(""abcd""))

""""""

def odd_index(string):
    odd_index = []
    for i in range(len(string)):
        if string[i]"
1349,"Write a Python program to configure the rounding to round to the nearest, with ties going to the nearest even integer. Use decimal.ROUND_HALF_EVEN","import decimal
print(""Configure the rounding to round to the nearest, with ties going to the nearest even integer:"")
decimal.getcontext().prec = 1
decimal.getcontext().rounding = decimal.ROUND_HALF_EVEN
print(decimal.Decimal(10) / decimal.Decimal(4))
","import decimal

def rounding(x):
    return decimal.ROUND_HALF_EVEN * round(x, -1) + decimal.ROUND_HALF_EVEN

print(rounding(1.5))
print(rounding(2.5))
print(rounding(3.5))
print(rounding(4.5))
print(rounding(5.5"
1350,Write a NumPy program to generate a generic 2D Gaussian-like array. ,"import numpy as np
x, y = np.meshgrid(np.linspace(-1,1,10), np.linspace(-1,1,10))
d = np.sqrt(x*x+y*y)
sigma, mu = 1.0, 0.0
g = np.exp(-( (d-mu)**2 / ( 2.0 * sigma**2 ) ) )
print(""2D Gaussian-like array:"")
print(g)
","import numpy as np

# Generate a 2D Gaussian-like array
x = np.random.randn(100, 100)

# Generate a 2D Gaussian-like array
y = np.random.randn(100, 100)

# Generate a 2D Gaussian-like array
z = np.random.randn(100, 100)

# Generate a 2D Gaussian-like array
w = np.random.randn(100"
1351,Write a Python program to calculate the distance between London and New York city. ,"from geopy import distance
london = (""51.5074 N, 0.1278 W"")
newyork = (""40.7128 N, 74.0060 W"")
print(""Distance between London and New York city (in km):"")
print(distance.distance(london, newyork).km,"" kms"")
","def distance(london, newyork):
    return ((london[0] - newyork[0])**2 + (london[1] - newyork[1])**2)**0.5

london = [1, 2]
newyork = [3, 4]

print(distance(london, newyork))

""""""

# Solution:

def distance(london, newyork):
    return ((london[0] -"
1352,Write a NumPy program to create a function cube which cubes all the elements of an array. ,"import numpy as np
def cube(e):
    it = np.nditer([e, None])
    for a, b in it:
        b[...] = a*a*a
    return it.operands[1]
print(cube([1,2,3]))
","def cube(arr):
    return arr*arr*arr

arr = [1,2,3,4,5]
print(cube(arr))

""""""

# Solution

def cube(arr):
    return arr*arr*arr

arr = [1,2,3,4,5]
print(cube(arr))

# Solution

def cube(arr):
    return arr*arr*arr

arr = [1,2,3"
1353,Write a Python program to reverse words in a string. ,"def reverse_string_words(text):
    for line in text.split('\n'):
        return(' '.join(line.split()[::-1]))
print(reverse_string_words(""The quick brown fox jumps over the lazy dog.""))
print(reverse_string_words(""Python Exercises.""))
","def reverse_words(s):
    return s[::-1]

print(reverse_words(""hello world""))

""""""

def reverse_words(s):
    return s[::-1]

print(reverse_words(""hello world""))"
1354,Write a Python program to find the specified number of maximum values in a given dictionary. ,"def test(dictt, N):
    result = sorted(dictt, key=dictt.get, reverse=True)[:N]
    return result 
dictt = {'a':5, 'b':14, 'c': 32, 'd':35, 'e':24, 'f': 100, 'g':57, 'h':8, 'i': 100}
print(""\nOriginal Dictionary:"")
print(dictt)
N = 1
print(""\n"",N,""maximum value(s) in the said dictionary:"")
print(test(dictt, N))
N = 2
print(""\n"",N,""maximum value(s) in the said dictionary:"")
print(test(dictt, N))
N = 5
print(""\n"",N,""maximum value(s) in the said dictionary:"")
print(test(dictt, N))
","def max_values(d):
    max_values = {}
    for key, value in d.items():
        if value not in max_values:
            max_values[value] = key
        else:
            max_values[value] = key
    return max_values

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
print(max_values(d))

""""""

"""""""
1355,"Write a Python program to iterate over a root level path and print all its sub-directories and files, also loop over specified dirs and files. ","import os
print('Iterate over a root level path:')
path = '/tmp/'
for root, dirs, files in os.walk(path):
 print(root)
","import os

def iterate_dirs_files(dir_path):
    for root, dirs, files in os.walk(dir_path):
        for file in files:
            print(os.path.join(root, file))
        for directory in dirs:
            print(os.path.join(root, directory))

if __name__ == '__main__':
    dir_path"
1356,Write a Python code to remove all characters except a specified character in a given string. ,"def remove_characters(str1,c):
    return ''.join([el for el in str1 if el == c])
text = ""Python Exercises""
print(""Original string"")
print(text)
except_char = ""P""
print(""Remove all characters except"",except_char,""in the said string:"")
print(remove_characters(text,except_char))
text = ""google""
print(""\nOriginal string"")
print(text)
except_char = ""g""
print(""Remove all characters except"",except_char,""in the said string:"")
print(remove_characters(text,except_char))
text = ""exercises""
print(""\nOriginal string"")
print(text)
except_char = ""e""
print(""Remove all characters except"",except_char,""in the said string:"")
print(remove_characters(text,except_char))
","def remove_char(string, char):
    return string.replace(char, """")

print(remove_char(""Python is fun"", ""d""))

""""""

def remove_char(string, char):
    return string.replace(char, """")

print(remove_char(""Python is fun"", ""d""))"
1357,Write a Pandas program to create a Pivot table and find number of survivors and average rate grouped by gender and class. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table(index='sex', columns='class', aggfunc={'survived':sum, 'fare':'mean'})
print(result)
","import pandas as pd

df = pd.read_csv(""../data/class_survival.csv"")

df.groupby(['gender', 'class']).survived.sum().unstack().plot(kind='bar')

# %%"
1358,Write a Python program to find all keys in the provided dictionary that have the given value. ,"def test(dict, val):
  return list(key for key, value in dict.items() if value == val)

students = {
  'Theodore': 19,
  'Roxanne': 20,
  'Mathew': 21,
  'Betty': 20
}

print(""\nOriginal dictionary elements:"")
print(students)
print(""\nFind all keys in the said dictionary that have the specified value:"")
print(test(students, 20))
","python solution.py

""""""

# Solution 1

def find_keys_with_value(d, value):
    """"""
    :param d: dictionary
    :param value: value to be searched
    :return: list of keys with value
    """"""
    return [key for key, value in d.items() if value == value and key!= value]

# Solution 2

def find_keys_with_value(d, value):
    """"""
    :"
1359,Write a NumPy program to find the closest value (to a given scalar) in an array. ,"import numpy as np
x = np.arange(100)
print(""Original array:"")
print(x)
a = np.random.uniform(0,100)
print(""Value to compare:"")
print(a)
index = (np.abs(x-a)).argmin()
print(x[index])
","import numpy as np

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(np.argmin(x))

# Output:
# 0
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9
# 10

# Expected Output:
# 0
# 1
# 2
# 3
# 4
#"
1360,Write a Pandas program to split a string of a column of a given DataFrame into multiple columns. ,"import pandas as pd
df = pd.DataFrame({
    'name': ['Alberto  Franco','Gino Ann Mcneill','Ryan  Parkes', 'Eesha Artur Hinton', 'Syed  Wharton'],
    'date_of_birth ': ['17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [18.5, 21.2, 22.5, 22, 23]
})
print(""Original DataFrame:"")
print(df)
df[[""first"", ""middle"", ""last""]] = df[""name""].str.split("" "", expand = True)
print(""\nNew DataFrame:"")
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

print(df)

# Solution"
1361,Write a Pandas program to create a Pivot table with multiple indexes from a given excel sheet (Salesdata.xlsx). ,"import pandas as pd
df = pd.read_excel('E:\SaleData.xlsx')
print(df)
pd.pivot_table(df,index=[""Region"",""SalesMan""])
","import pandas as pd

# Read the data from Salesdata.xlsx
df = pd.read_excel('Salesdata.xlsx')

# Create a Pivot table with multiple columns
pivot = df.pivot_table(index='Customer', columns='Month', values='Sales')

# Print the result
print(pivot)

# Create a Pivot table with multiple rows
pivot = df."
1362,"Write a Python program which iterates the integers from 1 to a given number and print ""Fizz"" for multiples of three, print ""Buzz"" for multiples of five, print ""FizzBuzz"" for multiples of both three and five using itertools module. ","#Source:https://bit.ly/30PS62m
import itertools as it
 
def fizz_buzz(n):
    fizzes = it.cycle([""""] * 2 + [""Fizz""])
    buzzes = it.cycle([""""] * 4 + [""Buzz""])
    fizzes_buzzes = (fizz + buzz for fizz, buzz in zip(fizzes, buzzes))
    result = (word or n for word, n in zip(fizzes_buzzes, it.count(1)))
    for i in it.islice(result, 100):
        print(i)

n = 50
fizz_buzz(n)
","def fizzbuzz(n):
    for i in range(1, n+1):
        if i % 3 == 0 and i % 5 == 0:
            print(""FizzBuzz"")
        elif i % 3 == 0:
            print(""Fizz"")
        elif i % 5 == 0"
1363,Write a Python program to create a shallow copy of a given dictionary. Use copy.copy,"import copy
nums_x = {""a"":1, ""b"":2, 'cc':{""c"":3}}
print(""Original dictionary: "", nums_x)
nums_y = copy.copy(nums_x)
print(""\nCopy of the said list:"")
print(nums_y)
print(""\nChange the value of an element of the original dictionary:"")
nums_x[""cc""][""c""] = 10
print(nums_x)
print(""\nSecond dictionary:"")
print(nums_y)

nums = {""x"":1, ""y"":2, 'zz':{""z"":3}}
nums_copy = copy.copy(nums)
print(""\nOriginal dictionary :"")
print(nums)
print(""\nCopy of the said list:"")
print(nums_copy)
print(""\nChange the value of an element of the original dictionary:"")
nums[""zz""][""z""] = 10
print(""\nFirst dictionary:"")
print(nums)
print(""\nSecond dictionary (copy):"")
print(nums_copy)
","def shallow_copy(d):
    new_d = {}
    for key in d:
        new_d[key] = d[key]
    return new_d

d = {'a': 1, 'b': 2, 'c': 3}
print(shallow_copy(d))

""""""

# Solution

def shallow_copy(d):
    new_d = {}
    for key in d:
        new_d[key] = d"
1364,Write a Python program access the index of a list. ,"nums = [5, 15, 35, 8, 98]
for num_index, num_val in enumerate(nums):
    print(num_index, num_val)
	","def index(list):
    for i in range(len(list)):
        print(i)

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
index(list)

""""""

def index(list):
    for i in range(len(list)):
        print(i)

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
index(list)"
1365,"Write a Python program to remove sublists from a given list of lists, which contains an element outside a given range. ","#Source bit.ly/33MAeHe
def remove_list_range(input_list, left_range, rigth_range):
   result = [i for i in input_list if (min(i)>=left_range and max(i)<=rigth_range)]
   return result
list1 = [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]]
left_range = 13
rigth_range = 17
print(""Original list:"")
print(list1)
print(""\nAfter removing sublists from a given list of lists, which contains an element outside the given range:"")
print(remove_list_range(list1, left_range, rigth_range))
","def remove_sublist(lst, start, end):
    for i in range(start, end):
        lst.remove(lst[i])
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(remove_sublist(lst, 0, 9))

""""""

def remove_sublist(lst, start, end):
    for"
1366,"Write a Python program to create a string representation of the Arrow object, formatted according to a format string. ","import arrow
print(""Current datetime:"")
print(arrow.utcnow())
print(""\nYYYY-MM-DD HH:mm:ss ZZ:"")
print(arrow.utcnow().format('YYYY-MM-DD HH:mm:ss ZZ'))
print(""\nDD-MM-YYYY HH:mm:ss ZZ:"")
print(arrow.utcnow().format('DD-MM-YYYY HH:mm:ss ZZ'))
print(arrow.utcnow().format('\nMMMM DD, YYYY'))
print(arrow.utcnow().format())
",">>> import arrow
>>> arrow.Arrow(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,"
1367,Write a Pandas program to create a Pivot table and find survival rate by gender. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result=df.groupby('sex')[['survived']].mean()
print(result)
","import pandas as pd
import numpy as np

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pima-indians-diabetes.csv')

# Create a pivot table
pivot = df.pivot_table(index='Outcome', columns='Sex', values='Age', aggfunc='mean')

# Find the survival rate by gender
pivot['Survived'] = pivot['Surv"
1368,Write a Python program to calculate surface volume and area of a sphere. ,"pi=22/7
radian = float(input('Radius of sphere: '))
sur_area = 4 * pi * radian **2
volume = (4/3) * (pi * radian ** 3)
print(""Surface Area is: "", sur_area)
print(""Volume is: "", volume)
","import math

radius = float(input(""Enter the radius of the sphere: ""))

volume = math.pi * (radius ** 2)
area = math.pi * (radius ** 2) * 3.14

print(""The volume of the sphere is:"", volume)
print(""The area of the sphere is:"", area)"
1369,Write a Python program to convert all the characters in uppercase and lowercase and eliminate duplicate letters from a given sequence. Use map() function. ,"def change_cases(s):
  return str(s).upper(), str(s).lower()
 
chrars = {'a', 'b', 'E', 'f', 'a', 'i', 'o', 'U', 'a'}
print(""Original Characters:\n"",chrars)
 
result = map(change_cases, chrars)
print(""\nAfter converting above characters in upper and lower cases\nand eliminating duplicate letters:"")
print(set(result))
","def convert_uppercase(string):
    return string.upper()

def convert_lowercase(string):
    return string.lower()

def remove_duplicate_letters(string):
    return ''.join(sorted(set(string)))

def main():
    string = input(""Enter the string: "")
    print(convert_uppercase(string))
    print(convert_"
1370,Write a Python program to create a deque from an existing iterable object. ,"import collections
even_nums = (2, 4, 6)
print(""Original tuple:"")
print(even_nums)
print(type(even_nums))
even_nums_deque = collections.deque(even_nums)
print(""\nOriginal deque:"")
print(even_nums_deque)
even_nums_deque.append(8)
even_nums_deque.append(10)
even_nums_deque.append(12)
even_nums_deque.appendleft(2)
print(""New deque from an existing iterable object:"")
print(even_nums_deque)
print(type(even_nums_deque))
","import collections

class Deque:
    def __init__(self):
        self.items = collections.deque()

    def add_front(self, item):
        self.items.appendleft(item)

    def add_rear(self, item):
        self.items.append(item)

    def remove_front(self):
        return self.items.pop()

    def remove_rear(self):
        return self.items.popleft()"
1371,Write a Pandas program to find the index of a substring of DataFrame with beginning and end position. ,"import pandas as pd
df = pd.DataFrame({
    'name_code': ['c0001','1000c','b00c2', 'b2c02', 'c2222'],
    'date_of_birth ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'age': [18.5, 21.2, 22.5, 22, 23]
})
print(""Original DataFrame:"")
print(df)
print(""\nIndex of a substring in a specified column of a dataframe:"")
df['Index'] = list(map(lambda x: x.find('c', 0, 5), df['name_code']))
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['John', 'Jane', 'Jack', 'Jill', 'Jasmine'],
                   'Age': [30, 32, 33, 34, 35],
                   'Score': [85, 90, 95, 100, 90]})

# Find the index of the substring 'Jack' in the DataFrame
print(df.loc[df['Name'] == 'Jack', 'Score"
1372,Write a Pandas program to check whether only space is present in a given column of a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF ', '  ', 'abcd', ' '],
    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})

print(""Original DataFrame:"")
print(df)
print(""\nIs space is present?"")
df['company_code_is_title'] = list(map(lambda x: x.isspace(), df['company_code']))
print(df)

","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

print(df.isnull().sum())

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})"
1373,"Write a NumPy program to calculate the difference between neighboring elements, element-wise of a given array. ","import numpy as np
x = np.array([1, 3, 5, 7, 0])
print(""Original array: "")
print(x)
print(""Difference between neighboring elements, element-wise of the said array."")
print(np.diff(x))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

b = np.array([[1, 2, 3], [4, 5, 6]])
print(b)

print(np.diff(a))

print(np.diff(b))

# Output:
[[1 2]
 [3 4]]

# Output:
[[1 2]"
1374,Write a Python program to count characters at same position in a given string (lower and uppercase characters) as in English alphabet. ,"def count_char_position(str1): 
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or 
            (i == ord(str1[i]) - ord('a'))): 
            count_chars += 1
    return count_chars 
  
str1 = input(""Input a string: "")
print(""Number of characters of the said string at same position as in English alphabet:"")
print(count_char_position(str1))
","def count_chars(str,ch):
    count = 0
    for i in range(len(str)):
        if str[i] == ch:
            count += 1
    return count

print(count_chars(""python"", ""P""))

""""""

def count_chars(str,ch):
    count = 0
    for i in range(len(str)):
        if str[i] =="
1375,Write a NumPy program to multiply the values of two given vectors. ,"import numpy as np
x = np.array([1, 8, 3, 5])
print(""Vector-1"")
print(x)
y= np.random.randint(0, 11, 4)
print(""Vector-2"")
print(y)
result = x * y
print(""Multiply the values of two said vectors:"")
print(result)
","a = np.array([1, 2, 3, 4])
b = np.array([5, 6, 7, 8])

c = a * b
print(c)

Solution:

a = np.array([1, 2, 3, 4])
b = np.array([5, 6, 7, 8])

c = a * b
print(c)

Solution:

a = np.array([1, 2, 3, 4])
b = np."
1376,Write a Python program to remove duplicate words from a given string use collections module. ,"from collections import OrderedDict
text_str = ""Python Exercises Practice Solution Exercises""
print(""Original String:"")
print(text_str)
print(""\nAfter removing duplicate words from the said string:"")
result = ' '.join(OrderedDict((w,w) for w in text_str.split()).keys())
print(result)
","def remove_duplicate_words(string):
    # your code goes here
    return string.replace(string[0], '').replace(string[-1], '').replace(string[0], '').replace(string[-1], '')

# driver code
string = ""This is a string""
print(remove_duplicate_words(string))

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)"
1377,Write a NumPy program totest a given array element-wise for finiteness (not infinity or not a Number). ,"import numpy as np
a = np.array([1, 0, np.nan, np.inf])
print(""Original array"")
print(a)
print(""Test a given array element-wise for finiteness :"")
print(np.isfinite(a))
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a)

print(a.sum())

print(a.min())

print(a.max())

print(a.mean())

print(a.std())

print(a.var())

print(a.sum(axis=0))

print"
1378,Write a NumPy program to convert a NumPy array of float values to a NumPy array of integer values. ,"import numpy as np
x= np.array([[12.0, 12.51], [2.34, 7.98], [25.23, 36.50]])
print(""Original array elements:"")
print(x)
print(""Convert float values to integer values:"")
print(x.astype(int))
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(a)

# convert the array to an integer array
a = np.array(a, dtype=int)
print(a)

# convert the array to an integer array
a = np.array(a, dtype=np.int64)
print(a)

# convert the"
1379,Write a Python program to find the second most repeated word in a given string. ,"def word_count(str):
    counts = dict()
    words = str.split()

    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1

    counts_x = sorted(counts.items(), key=lambda kv: kv[1])
    #print(counts_x)
    return counts_x[-2]
 
print(word_count(""Both of these issues are fixed by postponing the evaluation of annotations. Instead of compiling code which executes expressions in annotations at their definition time, the compiler stores the annotation in a string form equivalent to the AST of the expression in question. If needed, annotations can be resolved at runtime using typing.get_type_hints(). In the common case where this is not required, the annotations are cheaper to store (since short strings are interned by the interpreter) and make startup time faster.""))
","def second_most_repeated_word(string):
    string = string.lower()
    string = string.replace("" "", """")
    string = string.replace(""."", """")
    string = string.replace("","", """")
    string = string.replace(""!"", """")
    string = string.replace(""?"", """")
    string = string.replace("";"", """")
    string = string.replace(""!"", """")
    string = string.replace(""."", """")"
1380,"Write a Python program to find the specified number of largest products from two given list, multiplying an element from each list. ","def top_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result
nums1 = [1, 2, 3, 4, 5, 6]
nums2 = [3, 6, 8, 9, 10, 6]
print(""Original lists:"")
print(nums1)
print(nums2,""\n"")
N = 3
print(N,""Number of largest products from the said two lists:"")
print(top_product(nums1, nums2, N))
N = 4
print(N,""Number of largest products from the said two lists:"")
print(top_product(nums1, nums2, N))
","def solution(a, b):
    answer = []
    for i in range(len(a)):
        for j in range(len(b)):
            answer.append(a[i] * b[j])
    return answer

print(solution([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))

""""""

def solution(a, b):
    answer = []"
1381,Write a Pandas program to extract only non alphanumeric characters from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001#','[emailprotected]^2','$c0003', 'c0003', '&c0004'],
    'year': ['year 1800','year 1700','year 2300', 'year 1900', 'year 2200']
    })
print(""Original DataFrame:"")
print(df)
def find_nonalpha(text):
    result = re.findall(""[^A-Za-z0-9 ]"",text)
    return result
df['nonalpha']=df['company_code'].apply(lambda x: find_nonalpha(x))
print(""\Extracting only non alphanumeric characters from company_code:"")
print(df)
","import pandas as pd

df = pd.read_csv(""C:/Users/DELL/Downloads/pandas_data_science/pandas_data_science/exercises/data/election_results.csv"")

df.columns = df.columns.str.lower()

df.dropna(subset=['candidate_name'], inplace=True)

df.dropna(subset=['"
1382,Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and draw a bar plot where each bar will represent one of the top 10 production. ,"import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
df = pd.read_excel('E:\coalpublic2013.xlsx')
sorted_by_production = df.sort_values(['Production'], ascending=False).head(10)
sorted_by_production['Production'].head(10).plot(kind=""barh"")
plt.show()
","import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')

df.plot(kind='bar', figsize=(10,10))

# Create a bar plot with the top 10 production

df.plot(kind='bar', figsize=(10,10), rot=0)

# Create a bar plot with the top 10 production"
1383,Write a Python program to chose specified number of colours from three different colours and generate all the combinations with repetitions. ,"from itertools import combinations_with_replacement
 
def combinations_colors(l, n):
    return combinations_with_replacement(l,n)
l = [""Red"",""Green"",""Blue""]
print(""Original List: "",l)
n=1
print(""\nn = 1"")
print(list(combinations_colors(l, n)))
n=2
print(""\nn = 2"")
print(list(combinations_colors(l, n)))
n=3
print(""\nn = 3"")
print(list(combinations_colors(l, n)))
","def combinations(n, k):
    if n == k:
        print(n, end="" "")
        return
    else:
        for i in range(1, n + 1):
            combinations(n - i, k)
            print(i, end="" "")

combinations(3, 3)

""""""

def combinations(n, k):
    if n == k:
        print(n, end="" "")"
1384,"Write a Python program to add two given lists of different lengths, start from left. ","def elementswise_left_join(l1, l2):
    f_len = len(l1)-(len(l2) - 1)
    for i in range(0, len(l2), 1):
        if f_len - i >= len(l1):
            break
        else:
            l1[i] = l1[i] + l2[i]
    return l1

nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [3, 3, -1, 7]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""\nAdd said two lists from left:"")
print(elementswise_left_join(nums1,nums2))

nums3 = [1, 2, 3, 4, 5, 6]
nums4 = [2, 4, -3]
print(""\nOriginal lists:"")
print(nums3)
print(nums4)
print(""\nAdd said two lists from left:"")
print(elementswise_left_join(nums3,nums4))
","def add_two_lists(list1, list2):
    result = []
    for i in range(len(list1)):
        result.append(list1[i] + list2[i])
    return result

print(add_two_lists([1, 2, 3], [4, 5, 6]))

""""""

def add_two_lists(list1, list2):
    result = []
    for i in range(len(list1"
1385,Write a Pandas program to draw a horizontal and cumulative histograms plot of opening stock prices of Alphabet Inc. between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-4-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Open']]
plt.figure(figsize=(15,15))
df2.plot.hist(orientation='horizontal', cumulative=True)
plt.suptitle('Opening stock prices of Alphabet Inc.,\n From 01-04-2020 to 30-04-2020', fontsize=12, color='black')
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

# Read the data
df = pd.read_csv('Alphabet Inc_Stock_Price_Data.csv')

# Create a new dataframe with only the columns we want
df_new = df[['Date', 'Open', 'High', 'Low', 'Close']]

# Create a new dataframe with only the columns we want
df_new"
1386,Write a Python program to generate a 3*4*6 3D array whose each element is *. ,"array = [[ ['*' for col in range(6)] for col in range(4)] for row in range(3)]
print(array)
","import numpy as np

def generate_3d_array(n):
    """"""
    Generate a 3D array of n elements.
    """"""
    return np.array([[np.random.randint(0, 10) for _ in range(3)] for _ in range(n)])

def main():
    """"""
    Run the program.
    """"""
    n = int(input(""Enter the number of elements: ""))
    print(gener"
1387,Write a Python program to group the elements of a given list based on the given function. ,"from collections import defaultdict
from math import floor
def test(lst, fn):
  d = defaultdict(list)
  for el in lst:
    d[fn(el)].append(el)
  return dict(d)
nums = [7,23, 3.2, 3.3, 8.4]
print(""Original list & function:"")
print(nums,"" Function name: floor:"")
print(""Group the elements of the said list based on the given function:"")
print(test(nums, floor))
print(""\n"")
print(""Original list & function:"")
colors = ['Red', 'Green', 'Black', 'White', 'Pink']
print(colors,"" Function name: len:"")
print(""Group the elements of the said list based on the given function:"")
print(test(colors, len))
","def group(lst, fn):
    return list(map(fn, lst))

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
fn = lambda x: x**2
print(group(lst, fn))

""""""

# Solution 1

def group(lst, fn):
    return list(map(fn, lst))

lst = [1, 2, 3, 4,"
1388,Write a Python program to get unique values from a list. ,"my_list = [10, 20, 30, 40, 20, 50, 60, 40]
print(""Original List : "",my_list)
my_set = set(my_list)
my_new_list = list(my_set)
print(""List of unique numbers : "",my_new_list)
","def unique_values(lst):
    lst = list(set(lst))
    return lst

lst = [1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,"
1389,Write a Python program to access a specific item in a singly linked list using index value. ,"class Node:
    # Singly linked node
    def __init__(self, data=None):
        self.data = data
        self.next = None
class singly_linked_list:
    def __init__(self):
        # Createe an empty list
        self.tail = None
        self.head = None
        self.count = 0
	
    def append_item(self, data):
        #Append items on the list
        node = Node(data)
        if self.head:
            self.head.next = node
            self.head = node
        else:
            self.tail = node
            self.head = node
        self.count += 1
    
    def __getitem__(self, index):
        if index > self.count - 1:
            return ""Index out of range""
        current_val = self.tail
        for n in range(index):
            current_val = current_val.next
        return current_val.data


items = singly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')

print(""Search using index:"")
print(items[0])
print(items[1])
print(items[4])
print(items[5])
print(items[10])
","# Node class
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# Linked List class
class LinkedList:
    def __init__(self):
        self.head = None
    
    # Insert a new node at the beginning of the linked list
    def insert_beginning(self, new_data):
        new_node = Node(new_data)
        new_node"
1390,"Write a Pandas program to select random number of rows, fraction of random rows from World alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nSelect random number of rows:"")
print(w_a_con.sample(5))
print(""\nSelect fraction of randome rows:"")
print(w_a_con.sample(frac=0.02))
","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/Alcohol-Consumption/Alcohol-Consumption.csv')

df.head()

df.shape

df.sample(frac=0.1)

df.sample(frac=0.1, random_state=42)

df.sample(frac=0.1, random_"
1391,"Write a NumPy program to create a 5x5 zero matrix with elements on the main diagonal equal to 1, 2, 3, 4, 5. ","import numpy as np
x = np.diag([1, 2, 3, 4, 5])
print(x)
","import numpy as np

matrix = np.zeros((5,5))
matrix[0][0] = 1
matrix[0][1] = 2
matrix[0][2] = 3
matrix[0][3] = 4
matrix[0][4] = 5

matrix[1][0] = 1
matrix[1][1] = 2
matrix[1]["
1392,"Write a NumPy program to compute the trigonometric sine, cosine and tangent array of angles given in degrees. ","import numpy as np
print(""sine: array of angles given in degrees"")
print(np.sin(np.array((0., 30., 45., 60., 90.)) * np.pi / 180.))
print(""cosine: array of angles given in degrees"")
print(np.cos(np.array((0., 30., 45., 60., 90.)) * np.pi / 180.))
print(""tangent: array of angles given in degrees"")
print(np.tan(np.array((0., 30., 45., 60., 90.)) * np.pi / 180.))
","import numpy as np

def trigonometric_sine(x):
    return np.sin(x)

def trigonometric_cosine(x):
    return np.cos(x)

def trigonometric_tan(x):
    return np.tan(x)

def trigonometric_array(x):
    return np.array([trigonometric_sine(x), trigonometric_cosine("
1393,Write a Python program to print the names of all HTML tags of a given web page going through the document tree. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""\nNames of all HTML tags (https://www.python.org):\n"")
for child in soup.recursiveChildGenerator():
    if child.name:
        print(child.name)

","import urllib.request
import html

url = ""http://py4e-data.dr-chuck.net/known_by_Fikri.html""
html = urllib.request.urlopen(url).read()
print(html)

# Solution:

# import urllib.request
# import html

# url = ""http://py4e-data.dr-chuck.net/known_by_F"
1394,Write a Python program to create a backup of a SQLite database. ,"import sqlite3
import io
conn = sqlite3.connect('mydatabase.db')
with io.open('clientes_dump.sql', 'w') as f:
   for linha in conn.iterdump():
       f.write('%s\n' % linha)
print('Backup performed successfully.')
print('Saved as mydatabase_dump.sql')
conn.close()
","import sqlite3

conn = sqlite3.connect('sqlite_python.db')
c = conn.cursor()

c.execute(""""""CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username text,
    password text
)"""""")

c.execute(""INSERT INTO users VALUES (1, 'bob','secret')"")
c.execute(""INSERT INTO users VALUES (2, '"
1395,Write a Python program to find the dimension of a given matrix. ,"def matrix_dimensions(test_list):
    row = len(test_list)
    column = len(test_list[0])
    return row,column

lst = [[1,2],[2,4]]
print(""\nOriginal list:"")
print(lst)
print(""Dimension of the said matrix:"")
print(matrix_dimensions(lst))
lst = [[0,1,2],[2,4,5]]
print(""\nOriginal list:"")
print(lst)
print(""Dimension of the said matrix:"")
print(matrix_dimensions(lst))
lst = [[0,1,2],[2,4,5],[2,3,4]]
print(""\nOriginal list:"")
print(lst)
print(""Dimension of the said matrix:"")
print(matrix_dimensions(lst)) 
","def dimension(matrix):
    if len(matrix) == 0:
        return 0
    else:
        return len(matrix[0]) + dimension(matrix[1:])

print(dimension([[1,2,3],[4,5,6],[7,8,9]]))

""""""

def dimension(matrix):
    if len(matrix) == 0:
        return 0
    else:
        return len(matrix[0]) + dimension(mat"
1396,Write a Python program to find the index position of the last occurrence of a given number in a sorted list using Binary Search (bisect). ,"from bisect import bisect_right   
def BinarySearch(a, x): 
    i = bisect_right(a, x) 
    if i != len(a)+1 and a[i-1] == x: 
        return (i-1) 
    else: 
        return -1 
nums = [1, 2, 3, 4, 8, 8, 10, 12] 
x = 8
num_position   = BinarySearch(nums, x) 
if num_position == -1: 
    print(""not presetn!"") 
else: 
    print(""Last occurrence of"", x, ""is present at"", num_position)
","def binary_search(list, target):
    start = 0
    end = len(list) - 1
    while start <= end:
        mid = (start + end) // 2
        if list[mid] == target:
            return mid
        elif list[mid] < target:
            start = mid + 1
        else:
            end = mid - 1
    return None

print(binary_search([1,"
1397,Write a Python program to list home directory without absolute path. ,"import os.path
print(os.path.expanduser('~'))
","""""""

import os

def list_home_dir():
    """"""
    This function returns the list of absolute path of the home directory.
    """"""
    home_dir = os.path.expanduser(""~"")
    return [os.path.join(home_dir, d) for d in os.listdir(home_dir)]

print(list_home_dir())"
1398,Write a Python program to check if two given lists contain the same elements regardless of order. ,"def check_same_contents(nums1, nums2):
  for x in set(nums1 + nums2):
    if nums1.count(x) != nums2.count(x):
      return False
  return True
nums1 = [1, 2, 4]
nums2 = [2, 4, 1]
print(""Original list elements:"")
print(nums1)
print(nums2)
print(""\nCheck two said lists contain the same elements regardless of order!"")
print(check_same_contents(nums1, nums2))
nums1 = [1, 2, 3]
nums2 = [1, 2, 3]
print(""\nOriginal list elements:"")
print(nums1)
print(nums2)
print(""\nCheck two said lists contain the same elements regardless of order!"")
print(check_same_contents(nums1, nums2))
nums1 = [1, 2, 3]
nums2 = [1, 2, 4]
print(""\nOriginal list elements:"")
print(nums1)
print(nums2)
print(""\nCheck two said lists contain the same elements regardless of order!"")
print(check_same_contents(nums1, nums2))
","def check_lists(list1, list2):
    if len(list1)!= len(list2):
        return False
    for i in range(len(list1)):
        if list1[i]!= list2[i]:
            return False
    return True

print(check_lists([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))
print(check_lists([1, 2, 3, 4,"
1399,Write a NumPy program to insert a new axis within a 2-D array. ,"import numpy as np
x = np.zeros((3, 4))
y = np.expand_dims(x, axis=1).shape
print(y)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])

a = np.insert(a, 2, [7, 8, 9], axis=1)

print(a)

# OUTPUT:
# [[1 2 3]
#  [4 5 6]
#  [7 8 9]]

# a = np.array([[1, 2, 3], [4, 5, 6]])"
1400,Write a Python program to print out a set containing all the colors from color_list_1 which are not present in color_list_2. ,"color_list_1 = set([""White"", ""Black"", ""Red""])
color_list_2 = set([""Red"", ""Green""])
print(""Original set elements:"")
print(color_list_1)
print(color_list_2)
print(""\nDifferenct of color_list_1 and color_list_2:"")
print(color_list_1.difference(color_list_2))
print(""\nDifferenct of color_list_2 and color_list_1:"")
print(color_list_2.difference(color_list_1))
","color_list_1 = {'Red', 'Green', 'White', 'Black'}
color_list_2 = {'Red', 'Green', 'White', 'Black'}

color_list_1.difference_update(color_list_2)

print(color_list_1)

""""""

color_list_1 = {'Red', 'Green', 'White', 'Black'}
color"
1401,Write a Python program to read last n lines of a file. ,"import sys
import os
def file_read_from_tail(fname,lines):
        bufsize = 8192
        fsize = os.stat(fname).st_size
        iter = 0
        with open(fname) as f:
                if bufsize > fsize:
                        bufsize = fsize-1
                        data = []
                        while True:
                                iter +=1
                                f.seek(fsize-bufsize*iter)
                                data.extend(f.readlines())
                                if len(data) >= lines or f.tell() == 0:
                                        print(''.join(data[-lines:]))
                                        break

file_read_from_tail('test.txt',2)
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21"
1402,"Write a Pandas program to find the sum, mean, max, min value of 'Production (short tons)' column of coalpublic2013.xlsx file. ","import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')
print(""Sum: "",df[""Production""].sum()) 
print(""Mean: "",df[""Production""].mean())
print(""Maximum: "",df[""Production""].max())
print(""Minimum: "",df[""Production""].min()) 
","import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')

print(df['Production (short tons)'].sum())
print(df['Production (short tons)'].mean())
print(df['Production (short tons)'].max())
print(df['Production (short tons)'].min())

# Solution:

import pandas as pd"
1403,"Write a Pandas program to filter rows based on row numbers ended with 0, like 0, 10, 20, 30 from world alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nFilter rows based on row numbers ended with 0, like 0, 10, 20, 30:"")
print(w_a_con.filter(regex='0$', axis=0))
","import pandas as pd

df = pd.read_csv(""world_alcohol_consumption.csv"")

df = df[df[""Alcohol""]!= 0]

df.head()

df.shape

df.columns

df.columns = ['Alcohol', 'Consumption']

df.head()

df.head(5)

df.head(5).Alcohol"
1404,Write a Pandas program to split a given dataframe into groups with bin counts. ,"import pandas as pd
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'customer_id':[3005,3001,3002,3009,3005,3007,3002,3004,3009,3008,3003,3002],
'sales_id':[5002,5003,5004,5003,5002,5001,5005,5007,5008,5004,5005,5001]})
print(""Original DataFrame:"")
print(df)
groups = df.groupby(['customer_id', pd.cut(df.sales_id, 3)])
result = groups.size().unstack()
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

print(df.groupby(['col1', '"
1405,Write a Pandas program to keep the valid entries of a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[np.nan,np.nan,70002,np.nan,np.nan,70005,np.nan,70010,70003,70012,np.nan,np.nan],
'purch_amt':[np.nan,270.65,65.26,np.nan,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,np.nan],
'ord_date': [np.nan,'2012-09-10',np.nan,np.nan,'2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17',np.nan],
'customer_id':[np.nan,3001,3001,np.nan,3002,3001,3001,3004,3003,3002,3001,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nKeep the said DataFrame with valid entries:"")
result = df.dropna(inplace=False)
print(result)
","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Rolf', 'Rolf', 'Anne'],
                   'Age': [30, 32, 33, 34],
                   'Score': [90, 80, 70, 60]})

print(df)

# Solution:

# df = pd.DataFrame({'Name': ['Rolf', 'Rolf', 'Rolf', 'Anne'],
#                   'Age':"
1406,Write a Pandas program to create a graphical analysis of UFO (unidentified flying object) Sightings year. ,"import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
df[""ufo_yr""] = df.Date_time.dt.year
years_data = df.ufo_yr.value_counts()
years_index = years_data.index  # x ticks
years_values = years_data.get_values()
plt.figure(figsize=(15,8))
plt.xticks(rotation = 60)
plt.title('UFO Sightings by Year')
plt.xlabel(""Year"")
plt.ylabel(""Number of reports"")
years_plot = sns.barplot(x=years_index[:60],y=years_values[:60], palette = ""Reds"")
","import pandas as pd
import matplotlib.pyplot as plt

# Read the data
df = pd.read_csv('/Users/srinivasan/Downloads/UFO_Sightings.csv')

# Create a new dataframe with only the columns that are required
df_new = df[['Year', 'Sightings']]

# Create a new dataframe with only the columns that are required
df_new = df"
1407,Write a NumPy program to remove the trailing whitespaces of all the elements of a given array. ,"import numpy as np
x = np.array([' python exercises ', ' PHP  ', ' java  ', '  C++'], dtype=np.str)
print(""Original Array:"")
print(x)
rstripped_char = np.char.rstrip(x)
print(""\nRemove the trailing whitespaces : "", rstripped_char)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.rstrip())

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.rstrip(' '))

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9,"
1408,"Write a Python program to calculate the sum of all items of a container (tuple, list, set, dictionary). ","s = sum([10,20,30])
print(""\nSum of the container: "", s)
print()
","def sum_of_items(container):
    sum = 0
    for item in container:
        sum += item
    return sum

print(sum_of_items([1, 2, 3, 4, 5]))

""""""

# Solution 1

def sum_of_items(container):
    sum = 0
    for item in container:
        sum += item
    return sum

print(sum_of_items([1,"
1409,Write a NumPy program totest element-wise for NaN of a given array. ,"import numpy as np
a = np.array([1, 0, np.nan, np.inf])
print(""Original array"")
print(a)
print(""Test element-wise for NaN:"")
print(np.isnan(a))
","import numpy as np

a = np.array([[1, 2, np.nan], [3, 4, 5], [np.nan, 6, 7]])

print(a)

# Output:
[[1 2.0 nan 6.0]
 [3 4.0 5.0 nan 7.0]]

""""""

import numpy as np

a = np.array([[1, 2, np.nan], [3, 4, 5],"
1410,Write a NumPy program to find the index of the sliced elements as follows from a given 4x4 array. ,"import numpy as np    
x = np.reshape(np.arange(16),(4,4))
print(""Original arrays:"")
print(x)
print(""Sliced elements:"")
result = x[[0,1,2],[0,1,3]]
print(result)
","import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12],
                [13, 14, 15, 16]])

print(arr[0:2, 0:2])

# Output:
[[1 2]
 [5 6]
 [9 10]
 [13 14]
 [15 16]]

# Explan"
1411,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight dataframe's specific columns with different colors. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
print(""\nDifferent background color:"")
coldict = {'B':'red', 'D':'yellow'}

def highlight_cols(x):
    #copy df to new - original data are not changed
    df = x.copy()
    #select all values to default value - red color
    df.loc[:,:] = 'background-color: red'
    #overwrite values grey color
    df[['B','C', 'E']] = 'background-color: grey'
    #return color df
    return df    

df.style.apply(highlight_cols, axis=None)
","import pandas as pd

df = pd.DataFrame(
    {
        ""First column"": [""Rolf"", ""Charlie"", ""Anna"", ""Bob"", ""Jen"", ""Sue"", ""Anne"", ""Brad""],
        ""Second column"": [1, 2, 3, 4, 5, 6, 7, 8],
        ""Third column"": [10, 20, 30, 40, 50, 60, 70, 80],"
1412,Write a NumPy program to calculate exp(x) - 1 for all elements in a given array. ,"import numpy as np
x = np.array([1., 2., 3., 4.], np.float32)
print(""Original array: "")
print(x)
print(""\nexp(x)-1 for all elements of the said array:"")
r1 = np.expm1(x)
r2 = np.exp(x) - 1.
assert np.allclose(r1, r2)
print(r1)
","import numpy as np

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(np.exp(x))

# Output:
[1.        1.        1.        1.        1.        1.        1.        1.        1.        1.        1.        1.        1.        1.        1.        1.        1.        1.        1."
1413,Write a Pandas program to count of occurrence of a specified substring in a DataFrame column. ,"import pandas as pd
df = pd.DataFrame({
    'name_code': ['c001','c002','c022', 'c2002', 'c2222'],
    'date_of_birth ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'age': [18.5, 21.2, 22.5, 22, 23]
})
print(""Original DataFrame:"")
print(df)
print(""\nCount occurrence of 2 in date_of_birth column:"")
df['count'] = list(map(lambda x: x.count(""2""), df['name_code']))
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Bob', 'Jen', 'Anne'],
                   'Score': [60, 70, 80, 90]})

# Solution 1
print(df['Name'].count())

# Solution 2
print(df['Name'].value_counts())

# Solution 3
print(df['Name'].value_counts(sort=False))

# Solution"
1414,Write a Python program to create a file where all letters of English alphabet are listed by specified number of letters on each line. ,"import string
def letters_file_line(n):
   with open(""words1.txt"", ""w"") as f:
       alphabet = string.ascii_uppercase
       letters = [alphabet[i:i + n] + ""\n"" for i in range(0, len(alphabet), n)]
       f.writelines(letters)
letters_file_line(3)
","import os

def create_file(filename, letters):
    with open(filename, 'w') as file:
        for letter in letters:
            file.write(letter)

def main():
    filename = 'file.txt'
    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', '"
1415,Write a Python program to convert a given heterogeneous list of scalars into a string. ,"def heterogeneous_list_to_str(lst):
    result = ','.join(str(x) for x in lst)
    return result
h_data = [""Red"", 100, -50, ""green"", ""w,3,r"", 12.12, False]
print(""Original list:"")
print(h_data)
print(""\nConvert the heterogeneous list of scalars into a string:"")
print(heterogeneous_list_to_str(h_data))
","def heterogeneous_list_to_string(heterogeneous_list):
    return ''.join(heterogeneous_list)

print(heterogeneous_list_to_string([1, 2, 3]))

""""""

def heterogeneous_list_to_string(heterogeneous_list):
    return ''.join(heterogeneous_list)

print(heterogeneous_list_to_string([1, 2, 3]))

""""""

def heterogeneous_list"
1416,Write a Python program to get all possible combinations of the elements of a given list. ,"def combinations_list(colors):
    if len(colors) == 0:
        return [[]]
    result = []
    for el in combinations_list(colors[1:]):
        result += [el, el+[colors[0]]]
    return result
colors = ['orange', 'red', 'green', 'blue']
print(""Original list:"")
print(colors)
print(""\nAll possible combinations of the said lists elements:"")
print(combinations_list(colors))
","def combinations(lst, n):
    if n == 0:
        return [[]]
    else:
        return [item for sublist in combinations(lst, n-1) for item in sublist] + [item for sublist in combinations(lst, n-1) for item in sublist]

print(combinations([1,2,3,4,5],3))

""""""

def combinations(lst, n):
    if n == 0:"
1417,Write a NumPy program to combine last element with first element of two given ndarray with different shapes. ,"import numpy as np
array1 = ['PHP','JS','C++']
array2 = ['Python','C#', 'NumPy']    
print(""Original arrays:"")          
print(array1)
print(array2)          
result  = np.r_[array1[:-1], [array1[-1]+array2[0]], array2[1:]]   
print(""\nAfter Combining:"")       
print(result)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a + b)

# Output:
[[11 7 11]
 [12  8  9]]

# Output:
[[ 7  7  7]
 [ 8  8  8]
 [ 9  9  9"
1418,Write a Python program to count most and least common characters in a given string. ,"from collections import Counter 
def max_least_char(str1):
    temp = Counter(str1) 
    max_char = max(temp, key = temp.get)
    min_char = min(temp, key = temp.get)
    return (max_char, min_char)

str1 = ""hello world""
print (""Original string: "")
print(str1)
result = max_least_char(str1)
print(""\nMost common character of the said string:"",result[0])
print(""Least common character of the said string:"",result[1])
","def count_common_char(str):
    count = 0
    for i in str:
        if i in str:
            count += 1
    return count

print(count_common_char(""abcdefghijklmnopqrstuvwxyz""))

""""""

def count_common_char(str):
    count = 0
    for i in str:
        if i in str:
            count += 1
    return count

print(count_common"
1419,Write a Python program using Sieve of Eratosthenes method for computing primes upto a specified number. ,"def prime_eratosthenes(n):
    prime_list = []
    for i in range(2, n+1):
        if i not in prime_list:
            print (i)
            for j in range(i*i, n+1, i):
                prime_list.append(j)

print(prime_eratosthenes(100));
","def is_prime(n):
    if n == 1:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    for i in range(3, int(n**0.5)+1, 2):
        if n % i == 0:
            return False
    return True

def SieveOfEratosthenes(n):
    sieve = [True] *"
1420,Write a NumPy program to convert the raw data in an array to a binary string and then create an array. ,"import numpy as np
x = np.array([10, 20, 30], float)
print(""Original array:"")
print(x)
s = x.tostring()
print(""Binary string array:"")
print(s)
print(""Array using fromstring():"")
y = np.fromstring(s)
print(y)
","import numpy as np

# create an array of 10 elements
arr = np.random.randint(0, 100, size=10)

# convert the array to a binary string
binary = np.array(arr, dtype=np.uint8)

# create an array of 10 elements
arr = np.random.randint(0, 100, size=10)

# convert the array to a binary string
binary = np.array(arr"
1421,Write a Python program to remove spaces from dictionary keys. ,"student_list = {'S  001': ['Math', 'Science'], 'S    002': ['Math', 'English']}
print(""Original dictionary: "",student_list)
student_dict = {x.translate({32: None}): y for x, y in student_list.items()}
print(""New dictionary: "",student_dict)
","import re

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22"
1422,Write a Python program to sort unsorted numbers using Multi-key quicksort. ,"#Ref.https://bit.ly/36fvcEw
def quick_sort_3partition(sorting: list, left: int, right: int) -> None:
    if right <= left:
        return
    a = i = left
    b = right
    pivot = sorting[left]
    while i <= b:
        if sorting[i] < pivot:
            sorting[a], sorting[i] = sorting[i], sorting[a]
            a += 1
            i += 1
        elif sorting[i] > pivot:
            sorting[b], sorting[i] = sorting[i], sorting[b]
            b -= 1
        else:
            i += 1
    quick_sort_3partition(sorting, left, a - 1)
    quick_sort_3partition(sorting, b + 1, right)
def three_way_radix_quicksort(sorting: list) -> list:
    if len(sorting) <= 1:
        return sorting
    return (
        three_way_radix_quicksort([i for i in sorting if i < sorting[0]])
        + [i for i in sorting if i == sorting[0]]
        + three_way_radix_quicksort([i for i in sorting if i > sorting[0]])
    )
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
print(""After applying Random Pivot Quick Sort the said list becomes:"")
quick_sort_3partition(nums, 0, len(nums)-1)
print(nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
print(""After applying Multi-key quicksort the said list becomes:"")
quick_sort_3partition(nums, 0,  len(nums)-1)
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Multi-key quicksort the said list becomes:"")
quick_sort_3partition(nums, 0, len(nums)-1)
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Multi-key quicksort the said list becomes:"")
quick_sort_3partition(nums, 1,  len(nums)-1)
print(nums)
nums = ['z','a','y','b','x','c']
print(""\nOriginal list:"")
print(nums)
print(""After applying Multi-key quicksort the said list becomes:"")
quick_sort_3partition(nums, 0, len(nums)-1)
print(nums)
nums = ['z','a','y','b','x','c']
print(""\nOriginal list:"")
print(nums)
print(""After applying Multi-key quicksort the said list becomes:"")
quick_sort_3partition(nums, 2,  len(nums)-1)
print(nums) 
","def quicksort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[0]
    less = [i for i in arr[1:] if i <= pivot]
    greater = [i for i in arr[1:] if i > pivot]
    return quicksort(less) + [pivot] + quicksort(greater)

arr = [6, 5, 4, 8, 2, 1, 7, 3,"
1423,Write a Python program to returns sum of all divisors of a number. ,"def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)
print(sum_div(8))
print(sum_div(12))
","def divisors(n):
    divisors = []
    for i in range(1, n + 1):
        if n % i == 0:
            divisors.append(i)
    return sum(divisors)

print(divisors(12))

""""""

def divisors(n):
    divisors = []
    for i in range(1, n + 1):
        if n % i == 0:
            divisors"
1424,Write a Pandas program to plot the volatility over a period of time of Alphabet Inc. stock price between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Date', 'Close']]
df3 = df2.set_index('Date')
data_filled = df3.asfreq('D', method='ffill')
data_returns = data_filled.pct_change()
data_std = data_returns.rolling(window=30, min_periods=30).std()
plt.figure(figsize=(20,20))
data_std.plot();
plt.suptitle('Volatility over a period of time  of Alphabet Inc. stock price,\n01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.grid(True)
plt.show() 
","import pandas as pd
import matplotlib.pyplot as plt

# Read the data
df = pd.read_csv('Alphabet Inc.csv')

# Create a new dataframe with the columns 'Date' and 'Open'
df_new = df[['Date', 'Open']]

# Create a new dataframe with the columns 'Date' and 'Open'
df_new = df_new.rename(column"
1425,Write a Python program to create a list reflecting the modified run-length encoding from a given list of integers or a given list of characters. ,"from itertools import groupby
def modified_encode(alist):
        def ctr_ele(el):
            if len(el)>1: return [len(el), el[0]]
            else: return el[0]
        return [ctr_ele(list(group)) for key, group in groupby(alist)]

n_list = [1,1,2,3,4,4,5, 1]
print(""Original list:"") 
print(n_list)
print(""\nList reflecting the modified run-length encoding from the said list:"")
print(modified_encode(n_list))

n_list = 'aabcddddadnss'
print(""\nOriginal String:"") 
print(n_list)
print(""\nList reflecting the modified run-length encoding from the said string:"")
print(modified_encode(n_list))

","def run_length_encoding(list):
    # Your code here
    pass

# Test your code
# run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#"
1426,Write a NumPy program to create a vector with values ranging from 15 to 55 and print all values except the first and last. ,"import numpy as np
v = np.arange(15,55)
print(""Original vector:"")
print(v)
print(""All values except the first and last of the said vector:"")
print(v[1:-1])
","import numpy as np

x = np.arange(15, 55, 1)
print(x)

# solution

# x = np.arange(15, 55, 1)
# print(x)
# x = x[1:4]
# print(x)

# solution

# x = np.arange(15, 55, 1)
# print(x)
# x = x[1:"
1427,Write a Python program to flatten a shallow list. ,"import itertools
original_list = [[2,4,3],[1,5,6], [9], [7,9,0]]
new_merged_list = list(itertools.chain(*original_list))
print(new_merged_list)
","def flatten(lst):
    # Your code here
    return lst

lst = [1, 2, [3, 4, [5, [6, 7]], 8]]
print(flatten(lst))

""""""

def flatten(lst):
    # Your code here
    return lst

lst = [1, 2, [3, 4, [5, [6, 7]], 8]]
print(flatten(lst))

"""""""
1428,Write a Python program that will return true if the two given integer values are equal or their sum or difference is 5. ,"def test_number5(x, y):
   if x == y or abs(x-y) == 5 or (x+y) == 5:
       return True
   else:
       return False
print(test_number5(7, 2))
print(test_number5(3, 2))
print(test_number5(2, 2))
print(test_number5(7, 3))
print(test_number5(27, 53))
","def equal_sum(a, b):
    if a == b:
        return True
    elif a + b == 5:
        return True
    else:
        return False

print(equal_sum(1, 2))
print(equal_sum(1, 3))
print(equal_sum(1, 4))
print(equal_sum(1, 5))

""""""

# Solution 1

def equal_sum(a"
1429,Write a Python program to find the common tuples between two given lists. ,"def test(list1, list2):
    result =  set(list1).intersection(list2)
    return list(result)
list1 =  [('red', 'green'), ('black', 'white'), ('orange', 'pink')] 
list2 =  [('red', 'green'), ('orange', 'pink')] 
print(""\nOriginal lists:"")
print(list1)
print(list2)
print(""\nCommon tuples between two said lists"")
print(test(list1,list2)) 
list1 =  [('red', 'green'), ('orange', 'pink')] 
list2 =  [('red', 'green'), ('black', 'white'), ('orange', 'pink')] 
print(""\nOriginal lists:"")
print(list1)
print(list2)
print(""\nCommon tuples between two said lists"")
print(test(list1,list2))
","def common_tuple(list1, list2):
    common_tuple = []
    for i in range(len(list1)):
        for j in range(len(list2)):
            if list1[i] == list2[j]:
                common_tuple.append((list1[i], list2[j]))
    return common_tuple

print(common_tuple([1, 2, 3, 4, 5], [2, 3, 4"
1430,Write a Python program to change a given string to a new string where the first and last chars have been exchanged. ,"def change_sring(str1):
      return str1[-1:] + str1[1:-1] + str1[:1]
	  
print(change_sring('abcd'))
print(change_sring('12345'))
","s = ""abcd""
new_s = s[1:3] + s[0] + s[2:4]
print(new_s)

""""""

s = ""abcd""
new_s = s[1:3] + s[0] + s[2:4]
print(new_s)"
1431,Write a Python program to convert a given list of dictionaries into a list of values corresponding to the specified key. ,"def pluck(lst, key):
  return [x.get(key) for x in lst]
 
simpsons = [
  { 'name': 'Areeba', 'age': 8 },
  { 'name': 'Zachariah', 'age': 36 },
  { 'name': 'Caspar', 'age': 34 },
  { 'name': 'Presley', 'age': 10 }
]
print(pluck(simpsons, 'age'))
","def solution(dict_list):
    return [dict_list[i]['name'] for i in range(len(dict_list))]

""""""

def solution(dict_list):
    return [dict_list[i]['name'] for i in range(len(dict_list))]

print(solution([{'name': 'john', 'age': 30}, {'name':'mary', 'age': 25}, {'name':"
1432,Write a Pandas program to create a time series combining hour and minute. ,"import pandas as pd
result = pd.timedelta_range(0, periods=30, freq=""1H20T"")
print(""For a frequency of 1 hours 20 minutes, here we have combined the hour (H) and minute (T):\n"")
print(result)
","import pandas as pd

# Create a time series
hour = pd.Series(pd.date_range('1/1/2000', periods=24, freq='H'))
minute = pd.Series(pd.date_range('1/1/2000', periods=24, freq='T'))

# Create a time series
hour = pd.Series(pd.date_range('1/1/2000', periods=24, freq='H'))
minute"
1433,Write a Python program to format a number with a percentage. ,"x = 0.25
y = -0.25
print(""\nOriginal Number: "", x)
print(""Formatted Number with percentage: ""+""{:.2%}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number with percentage: ""+""{:.2%}"".format(y));
print()
","def format_number(number):
    return f'{number:.2f}%'

print(format_number(100))
print(format_number(50))
print(format_number(0))
print(format_number(0.1))
print(format_number(0.01))
print(format_number(0.001))
print(format_number(0.0001))
print(format_number(0.00001))
print(format_number(0.0000"
1434,Write a Python program to generate combinations of a given length of given iterable. ,"import itertools as it
def combinations_data(iter, length):
    return it.combinations(iter, length)
#List
result = combinations_data(['A','B','C','D'], 1)
print(""\nCombinations of an given iterable of length 1:"")
for i in result:
    print(i)

#String
result = combinations_data(""Python"", 1)
print(""\nCombinations of an given iterable of length 1:"")
for i in result:
    print(i)
    
#List
result = combinations_data(['A','B','C','D'], 2)
print(""\nCombinations of an given iterable of length 2:"")
for i in result:
    print(i)

#String
result = combinations_data(""Python"", 2)
print(""\nCombinations of an given iterable of length 2:"")
for i in result:
    print(i)
","def combinations(iterable, r):
    pool = tuple(iterable)
    n = len(pool)
    if r > n:
        return
    indices = list(range(r))
    yield tuple(pool[i] for i in indices)
    while True:
        for i in reversed(range(r)):
            if indices[i]!= i:
                break
        else:
            return
        indices[i] += 1
        for j"
1435,Write a Pandas program to find the index of a given substring of a DataFrame column. ,"import pandas as pd
df = pd.DataFrame({
    'name_code': ['c001','c002','c022', 'c2002', 'c2222'],
    'date_of_birth ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'age': [18.5, 21.2, 22.5, 22, 23]
})
print(""Original DataFrame:"")
print(df)
print(""\nCount occurrence of 22 in date_of_birth column:"")
df['Index'] = list(map(lambda x: x.find('22'), df['name_code']))
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['John', 'Jane', 'John', 'Jane', 'John', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', '"
1436,Write a NumPy program to get the block-sum (block size is 5x5) from a given array of shape 25x25. ,"import numpy as np
arra1 = np.ones((25,25))
k = 5
print(""Original arrays:"")
print(arra1)
result = np.add.reduceat(np.add.reduceat(arra1, np.arange(0, arra1.shape[0], k), axis=0),
                                      np.arange(0, arra1.shape[1], k), axis=1)
print(""\nBlock-sum (5x5) of the said array:"")
print(result)
","import numpy as np

arr = np.array([[1, 2, 3, 4, 5],
                [6, 7, 8, 9, 10],
                [11, 12, 13, 14, 15],
                [16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25]])

print(arr)

# Solution:

# arr = np.array([["
1437,Write a Python program to get the length of an array. ,"from array import array
num_array = array('i', [10,20,30,40,50])
print(""Length of the array is:"")
print(len(num_array))
","def get_length(arr):
    return len(arr)

print(get_length([1, 2, 3, 4, 5]))

""""""

def get_length(arr):
    return len(arr)

print(get_length([1, 2, 3, 4, 5]))

""""""

def get_length(arr):
    return len(arr)

print(get_length([1, 2, 3, 4, 5]))

""""""

def"
1438,Write a NumPy program to get the magnitude of a vector in NumPy. ,"import numpy as np
x = np.array([1,2,3,4,5])
print(""Original array:"")
print(x)
print(""Magnitude of the vector:"")
print(np.linalg.norm(x))
","import numpy as np

x = np.array([1, 2, 3, 4, 5])
print(np.linalg.norm(x))

# Output:
# array([ 1.,  2.,  3.,  4.,  5.])

# Hint: You can use np.linalg.norm to get the magnitude of a vector.

# Hint: You can use np.linalg.norm to get the magnitude of a vector.

#"
1439,Write a Python program to remove words from a given list of strings containing a character or string. ,"def remove_words(in_list, char_list):
    new_list = []
    for line in in_list:
        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in char_list])])
        new_list.append(new_words)
    return new_list
     
str_list = ['Red color', 'Orange#', 'Green', 'Orange @', ""White""]
print(""Original list:"")
print(""list1:"",str_list)
char_list = ['#', 'color', '@']
print(""\nCharacter list:"")
print(char_list)
print(""\nNew list:"")
print(remove_words(str_list, char_list))
","import re

def remove_words(words, char):
    for word in words:
        if re.search(char, word):
            words.remove(word)
    return words

print(remove_words(['hello', 'world', 'python', 'programming', 'is', 'fun', '?'], '?'))

""""""

def remove_words(words, char):
    for word in words:
        if re.search(char, word):"
1440,"Write a Pandas program to split a dataset, group by one column and get mean, min, and max values by group, also change the column name of the aggregated metric. Using the following dataset find the mean, min, and max values of purchase amount (purch_amt) group by customer id (customer_id). ","import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])
print(""Original DataFrame:"")
print(df)
print('\nChange the name of an aggregated metric:')
grouped_single = df.groupby('school_code').agg({'age': [(""mean_age"",""mean""), (""min_age"", ""min""), (""max_age"",""max"")]})
print(grouped_single)
","import pandas as pd
import numpy as np

df = pd.read_csv('purchase_data.csv')

df.groupby(['customer_id']).agg({'purch_amt': ['mean', '"
1441,Write a Python program to check a list is empty or not. ,"l = []
if not l:
  print(""List is empty"")
  ","def is_empty(lst):
    if len(lst) == 0:
        return True
    else:
        return False

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(is_empty(lst))

""""""

# Solution 1

def is_empty(lst):
    if len(lst) == 0:
        return True
    else:
        return False

lst = ["
1442,Write a Pandas program to create a scatter plot of the trading volume/stock prices of Alphabet Inc. stock between two specific dates. ,"import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1.set_index('Date')
x= ['Close']; y = ['Volume']
plt.figure(figsize=[15,10])
df2.plot.scatter(x, y, s=50);
plt.grid(True)
plt.title('Trading Volume/Price of Alphabet Inc. stock,\n01-04-2020 to 30-09-2020', fontsize=14, color='black')
plt.xlabel(""Stock Price"",fontsize=12, color='black')
plt.ylabel(""Trading Volume"", fontsize=12, color='black') 
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc_data.csv')

df['Date'] = pd.to_datetime(df['Date'])

df.set_index('Date', inplace=True)

plt.scatter(df['Volume'], df['Price'])

plt.show()

"""""""
1443,Write a Python program to calculate magic square. ,"def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    
    #Horizontal Part:
    sum_list.extend([sum (lines) for lines in my_matrix])   

    #Vertical Part:
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    
    #Diagonals Part
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)  
    
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)

    if len(set(sum_list))>1:
        return False
    return True

m=[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]] 
print(magic_square_test(m));

m=[[2, 7, 6], [9, 5, 1], [4, 3, 8]]
print(magic_square_test(m));

m=[[2, 7, 6], [9, 5, 1], [4, 3, 7]]
print(magic_square_test(m));
","def magic_square(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return magic_square(n-1) + magic_square(n-2)

print(magic_square(5))

""""""

# Solution

def magic_square(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return magic_square(n-1)"
1444,Write a Python program to append a list to the second list. ,"list1 = [1, 2, 3, 0]
list2 = ['Red', 'Green', 'Black']
final_list = list1 + list2
print(final_list)
","def append_list(list1, list2):
    list1.append(list2)
    return list1

print(append_list([1, 2, 3], [4, 5, 6]))

""""""

def append_list(list1, list2):
    list1.append(list2)
    return list1

print(append_list([1, 2, 3], [4, 5, 6]))

""""""

def append_list(list1,"
1445,Write a NumPy program to find the real and imaginary parts of an array of complex numbers. ,"import numpy as np
x = np.sqrt([1+0j])
y = np.sqrt([0+1j])
print(""Original array:x "",x)
print(""Original array:y "",y)
print(""Real part of the array:"")
print(x.real)
print(y.real)
print(""Imaginary part of the array:"")
print(x.imag)
print(y.imag)
","import numpy as np

a = np.array([1, 2, 3, 4])
print(a)
print(a.real)
print(a.imag)

# Output:
# array([1., 2., 3., 4.])
# array([1.+0.j, 2.+0.j, 3.+0.j, 4.+0.j])

# Python code to solve the following problem:

# import numpy as"
1446,Write a Python program to parse a string representing a time according to a format. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\ntime.struct_time, in the current timezone:"")
print(arrow.utcnow().timetuple())
","import re

def parse_time(time_string):
    """"""Parse a string representing a time according to a format.

    Args:
        time_string (str): A string representing a time according to a format.

    Returns:
        (int, int): A tuple containing the hours, minutes and seconds of the time.
    """"""
    # TODO: Replace this with your code
    # Parse the time string
    # Return the hours, minutes and seconds
    #"
1447,Write a NumPy program to create a new shape to an array without changing its data. ,"import numpy as np
x = np.array([1, 2, 3, 4, 5, 6])
y = np.reshape(x,(3,2))
print(""Reshape 3x2:"")
print(y)
z = np.reshape(x,(2,3))
print(""Reshape 2x3:"")
print(z)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

b = np.array([[1, 2, 3], [4, 5, 6]])
print(b)

c = np.array([[1, 2, 3], [4, 5, 6]])
print(c)

d = np.array([[1, 2, 3], [4, 5,"
1448,Write a Python program to find the location address of a specified latitude and longitude using Nominatim API and Geopy package. ,"from geopy.geocoders import Nominatim
geolocator = Nominatim(user_agent=""geoapiExercises"")
lald = ""47.470706, -99.704723""
print(""Latitude and Longitude:"",lald)
location = geolocator.geocode(lald)
print(""Location address of the said Latitude and Longitude:"")
print(location)
lald = ""34.05728435, -117.194132331602""
print(""\nLatitude and Longitude:"",lald)
location = geolocator.geocode(lald)
print(""Location address of the said Latitude and Longitude:"")
print(location)
lald = ""38.8976998, -77.0365534886228""
print(""\nLatitude and Longitude:"",lald)
location = geolocator.geocode(lald)
print(""Location address of the said Latitude and Longitude:"")
print(location)
lald = ""55.7558 N, 37.6173 E""
print(""\nLatitude and Longitude:"",lald)
location = geolocator.geocode(lald)
print(""Location address of the said Latitude and Longitude:"")
print(location)
lald = ""35.6762 N, 139.6503 E""
print(""\nLatitude and Longitude:"",lald)
location = geolocator.geocode(lald)
print(""Location address of the said Latitude and Longitude:"")
print(location)
lald = ""41.9185 N, 45.4777 E""
print(""\nLatitude and Longitude:"",lald)
location = geolocator.geocode(lald)
print(""Location address of the said Latitude and Longitude:"")
print(location)
","import geopy

# Create a geopy object
geolocator = geopy.geocoders.Nominatim(user_agent=""my_app"")

# Create a geopy object
location = geolocator.geocode(""Mumbai, India"")

# Print the location
print(location.address)

# Print the latitude and longitude
print(location.latitude, location.longitude)"
1449,Write a Python program to flatten a given nested list structure. ,"def flatten_list(n_list):
    result_list = []
    if not n_list: return result_list
    stack = [list(n_list)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list 
n_list = [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]
print(""Original list:"") 
print(n_list)
print(""\nFlatten list:"")
print(flatten_list(n_list))
","def flatten(lst):
    # your code goes here
    flattened = []
    for i in lst:
        if type(i) == list:
            flattened.extend(flatten(i))
        else:
            flattened.append(i)
    return flattened

lst = [[1,2,3],[4,5,6],[7,8,9]]
print(flatten(lst))

""""""

def flatten(l"
1450,Write a Python program to extract the text in the first paragraph tag of a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc, 'html.parser')
print(""The text in the first paragraph tag:"")
print(soup.find_all('p')[0].text)

","import urllib.request
import re

url = ""http://py4e-data.dr-chuck.net/known_by_Fikri.html""
html = urllib.request.urlopen(url).read()

# find all the <p> tags
p = re.compile(r'<p>(.*?)</p>')

# find all the <a> tags
a = re.compile(r'<a href="""
1451,Write a Python program to get the index of the first element which is greater than a specified element. ,"def first_index(l1, n):
    return next(a[0] for a in enumerate(l1) if a[1] > n)
 
nums = [12,45,23,67,78,90,100,76,38,62,73,29,83]
print(""Original list:"")
print(nums)
n = 73
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
n = 21
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
n = 80
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
n = 55
print(""\nIndex of the first element which is greater than"",n,""in the said list:"")
print(first_index(nums,n))
","def solution(arr, x):
    for i in range(len(arr)):
        if arr[i] > x:
            return i
    return -1

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
x = 6
print(solution(arr, x))

""""""

def solution(arr, x):
    for i in range(len(arr)):
        if arr[i"
1452,rite a Python program that accepts a string and calculate the number of digits and letters. ,"s = input(""Input a string"")
d=l=0
for c in s:
    if c.isdigit():
        d=d+1
    elif c.isalpha():
        l=l+1
    else:
        pass
print(""Letters"", l)
print(""Digits"", d)
","def count_digits(string):
    count = 0
    for i in string:
        if i.isdigit():
            count += 1
    return count

print(count_digits(""Python is easy to learn""))

""""""

def count_digits(string):
    count = 0
    for i in string:
        if i.isdigit():
            count += 1
    return count

print(count_digits(""Python is easy to learn"
1453,"Write a NumPy program to create an array of (3, 4) shape, multiply every element value by 3 and display the new array. ","import numpy as np
x= np.arange(12).reshape(3, 4)
print(""Original array elements:"")
print(x)
for a in np.nditer(x, op_flags=['readwrite']):
    a[...] = 3 * a
print(""New array elements:"")
print(x)
","import numpy as np

arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(arr)
print(arr * 3)
print(arr.dot(3))

# Solution:

# import numpy as np
#
# arr = np.array([[1, 2, 3, 4], [5, 6"
1454,Write a NumPy program to convert the values of Centigrade degrees into Fahrenheit degrees. Centigrade values are stored into a NumPy array. ,"import numpy as np
fvalues = [0, 12, 45.21, 34, 99.91]
F = np.array(fvalues)
print(""Values in Fahrenheit degrees:"")
print(F)
print(""Values in  Centigrade degrees:"") 
print(5*F/9 - 5*32/9)
","import numpy as np

# Convert degrees to centigrade
degrees = np.deg2rad(np.arange(0, 360, 10))

# Convert degrees to fahrenheit
fahrenheit = np.deg2rad(degrees)

# Convert degrees to centigrade
centigrade = np.rad2deg(fahrenheit)

# Print the values
print(centigrade)"
1455,Write a NumPy program to compute the weighted of a given array. ,"import numpy as np
x = np.arange(5)
print(""\nOriginal array:"")
print(x)
weights = np.arange(1, 6)
r1 = np.average(x, weights=weights)
r2 = (x*(weights/weights.sum())).sum()
assert np.allclose(r1, r2)
print(""\nWeighted average of the said array:"")
print(r1)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

weight = np.array([[1, 2, 3], [4, 5, 6]])
print(weight)

weighted_array = np.dot(weight, a)
print(weighted_array)

weighted_array = np.dot(weight, a, dtype=np.int64)
print(weighted_"
1456,Write a NumPy program to compute the Kronecker product of two given mulitdimension arrays. ,"import numpy as np
a = np.array([1,2,3])
b = np.array([0,1,0])
print(""Original 1-d arrays:"")
print(a)
print(b)
result =  np.kron(a, b)
print(""Kronecker product of the said arrays:"")
print(result)
x = np.arange(9).reshape(3, 3)
y = np.arange(3, 12).reshape(3, 3)
print(""Original Higher dimension:"")
print(x)
print(y)
result = np.kron(x, y)
print(""Kronecker product  of the said arrays:"")
print(result)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(np.kron(a, b))

# OUTPUT:
# [[1 2 3]
#  [4 5 6]
#  [7 8 9]
#  [10 11 12]]

# [[1 4]"
1457,Write a Python program to sort a given list of strings(numbers) numerically. ,"def sort_numeric_strings(nums_str):
    result = [int(x) for x in nums_str]
    result.sort()
    return result
nums_str = ['4','12','45','7','0','100','200','-12','-500']
print(""Original list:"")
print(nums_str)
print(""\nSort the said list of strings(numbers) numerically:"")
print(sort_numeric_strings(nums_str))
","def sort_numbers(numbers):
    numbers.sort()
    return numbers

print(sort_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))

""""""

def sort_numbers(numbers):
    numbers.sort()
    return numbers

print(sort_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))

""""""

def sort_"
1458,Write a Python program to compute the difference between two lists. ,"from collections import Counter
color1 = [""red"", ""orange"", ""green"", ""blue"", ""white""]
color2 = [""black"", ""yellow"", ""green"", ""blue""]
counter1 = Counter(color1)
counter2 = Counter(color2)
print(""Color1-Color2: "",list(counter1 - counter2))
print(""Color2-Color1: "",list(counter2 - counter1))
","def diff(list1, list2):
    diff = []
    for i in range(len(list1)):
        diff.append(list1[i] - list2[i])
    return diff

print(diff([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))

""""""

def diff(list1, list2):
    diff = []
    for i in range(len(list1)):
        diff.append(list"
1459,"Write a NumPy program to replace all numbers in a given array which is equal, less and greater to a given number. ","import numpy as np
nums = np.array([[5.54, 3.38, 7.99],
              [3.54, 8.32, 6.99],
              [1.54, 2.39, 9.29]])
print(""Original array:"")
print(nums)
n = 8.32
r = 18.32
print(""\nReplace elements of the said array which are equal to "",n,""with"",r)
print(np.where(nums == n, r, nums))
print(""\nReplace elements with of the said array which are less than"",n,""with"",r)
print(np.where(nums < n, r, nums))
print(""\nReplace elements with of the said array which are greater than"",n,""with"",r)
print(np.where(nums > n, r, nums))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr)

# Replace all numbers in array which is equal to given number

arr[arr == 5] = 0

print(arr)

# Replace all numbers in array which is less than given number

arr[arr < 5] = 0

print(arr)

#"
1460,"Write a Python program to split values into two groups, based on the result of the given filtering function. ","def bifurcate_by(lst, fn):
  return [
    [x for x in lst if fn(x)],
    [x for x in lst if not fn(x)]
  ]
print(bifurcate_by(['red', 'green', 'black', 'white'], lambda x: x[0] == 'w'))
","def filter_func(x):
    if x % 2 == 0:
        return True
    else:
        return False

print(filter_func(5))
print(filter_func(6))
print(filter_func(7))
print(filter_func(8))
print(filter_func(9))
print(filter_func(10))

""""""

def filter_func(x):
    if x % 2 == 0:"
1461,Write a Pandas program to create a Pivot table and check missing values of children. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.loc[df['who']=='child'].isnull().sum()
print(result)
","import pandas as pd

df = pd.read_csv(""https://github.com/datasets/csv/blob/master/adult.csv"")

df.head()

df.isnull().sum()

df.isnull().sum().sum()

df.isnull().sum().sum()

df.isnull().sum().sum()

df.isnull().sum().sum()

df.isnull().sum().sum()"
1462,Write a Python program to sort a list of nested dictionaries. ,"my_list = [{'key': {'subkey': 1}}, {'key': {'subkey': 10}}, {'key': {'subkey': 5}}]
print(""Original List: "")
print(my_list)
my_list.sort(key=lambda e: e['key']['subkey'], reverse=True)
print(""Sorted List: "")
print(my_list)
","def sort_dict(d):
    return sorted(d.items(), key=lambda item: item[1])

d = {
    ""a"": 1,
    ""b"": 2,
    ""c"": 3,
    ""d"": 4,
    ""e"": 5,
    ""f"": 6
}

print(sort_dict(d))

""""""

def sort_dict(d):
    return sorted(d.items(), key=lambda item: item[1])"
1463,Write a NumPy program to get the unique elements of an array. ,"import numpy as np
x = np.array([10, 10, 20, 20, 30, 30])
print(""Original array:"")
print(x)
print(""Unique elements of the above array:"")
print(np.unique(x))
x = np.array([[1, 1], [2, 3]])
print(""Original array:"")
print(x)
print(""Unique elements of the above array:"")
print(np.unique(x))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(arr)
print(np.unique(arr))

# Output:
# [1 2 3 4 5 6 7 8 9 10]
# [1 2 3 4 5 6 7 8 9 10]
# [1 2 3 4 5 6 7 8 9 10]
# [1 2 3 4 5 6 7 8 9 10]
# [1 2"
1464,Write a Python program to extract a specified column from a given nested list. ,"def remove_column(nums, n):
   result = [i.pop(n) for i in nums]
   return result 

list1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]
n = 0
print(""Original Nested list:"")
print(list1)
print(""Extract 1st column:"")
print(remove_column(list1, n))

list2 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]
n = 2
print(""\nOriginal Nested list:"")
print(list2)
print(""Extract 3rd column:"")
print(remove_column(list2, n))
","def extract_column(nested_list, column):
    """"""
    :param nested_list: nested list
    :param column: column to extract
    :return: list of values
    """"""
    return [value for row in nested_list for value in row[column]]

# driver code
nested_list = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]
print(extract_column("
1465,Write a Python program to print the following floating numbers with no decimal places. ,"x = 3.1415926
y = -12.9999
print(""\nOriginal Number: "", x)
print(""Formatted Number with no decimal places: ""+""{:.0f}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number with no decimal places: ""+""{:.0f}"".format(y));
print()
",">>> import math
>>> print(math.floor(5.5))
5
>>> print(math.ceil(5.5))
6
>>> print(math.sqrt(25))
2.73205
>>> print(math.log(100, 10))
1.0
>>> print(math.log(100, 10))
1.0
>>> print(math.log(100, 10))
1.0
>>> print(math.log(100, 10))
1.0"
1466,"Write a Python program to get the key, value and item in a dictionary. ","dict_num = {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}
print(""key  value  count"")
for count, (key, value) in enumerate(dict_num.items(), 1):
    print(key,'   ',value,'    ', count)
","def get_key(d, key):
    for k, v in d.items():
        if k == key:
            return v
    return None

def get_value(d, key):
    for k, v in d.items():
        if k == key:
            return v
    return None

def get_item(d, key):
    for k, v in d.items():
        if k == key:
            return v
    return None"
1467,Write a NumPy program to create an array with values ranging from 12 to 38.,"import numpy as np
x = np.arange(12, 38)
print(x)
","arr = np.arange(12, 38)

# Write your NumPy"
1468,Write a Pandas program to create a Pivot table and separate the gender according to whether they traveled alone or not to get the probability of survival. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table( 'survived' , [ 'sex' , 'alone' ] , 'class' )
print(result)
","import pandas as pd
import numpy as np

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pima-indians-diabetes.csv')

# Create a pivot table
pivot = df.pivot_table(index='Outcome', columns='Sex', values='Age', aggfunc='sum')

# Create a separate table for"
1469,Write a Python program to convert a given list of strings into list of lists using map function. ,"def strings_to_listOflists(str):
    result = map(list, str)
    return list(result)

colors = [""Red"", ""Green"", ""Black"", ""Orange""]
print('Original list of strings:')
print(colors)
print(""\nConvert the said list of strings into list of lists:"")
print(strings_to_listOflists(colors))
","def solution(str_list):
    return [list(map(str, s)) for s in str_list]

""""""

def solution(str_list):
    return [list(map(str, s)) for s in str_list]

print(solution([""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h""]))

""""""

def solution(str_list):
    return [list(map"
1470,"Write a Python program to get a single string from two given strings, separated by a space and swap the first two characters of each string. ","def chars_mix_up(a, b):
  new_a = b[:2] + a[2:]
  new_b = a[:2] + b[2:]

  return new_a + ' ' + new_b
print(chars_mix_up('abc', 'xyz'))
","def swap_case(s):
    return s.swapcase()

print(swap_case(""python""))

""""""

def swap_case(s):
    return s.swapcase()

print(swap_case(""python""))

""""""

def swap_case(s):
    return s.swapcase()

print(swap_case(""python""))

""""""

def swap_"
1471,"Write a Pandas program to get the day of month, day of year, week number and day of week from a given series of date strings. ","import pandas as pd
from dateutil.parser import parse
date_series = pd.Series(['01 Jan 2015', '10-02-2016', '20180307', '2014/05/06', '2016-04-12', '2019-04-06T11:20'])
print(""Original Series:"")
print(date_series)
date_series = date_series.map(lambda x: parse(x))
print(""Day of month:"")
print(date_series.dt.day.tolist())
print(""Day of year:"")
print(date_series.dt.dayofyear.tolist())
print(""Week number:"")
print(date_series.dt.weekofyear.tolist())
print(""Day of week:"")
print(date_series.dt.weekday_name.tolist())
","import pandas as pd

# Read the data from the file
df = pd.read_csv(""https://github.com/datasets/csv/blob/master/weather_data.csv?raw=true"")

# Create a dataframe with the data
df_weather = df.copy()

# Select the columns we want to use
df_weather = df_weather[['date', 'temp', '"
1472,Write a Python program to sort a given collection of numbers and its length in ascending order using Recursive Insertion Sort. ,"#Ref.https://bit.ly/3iJWk3w
from __future__ import annotations

def rec_insertion_sort(collection: list, n: int):
    # Checks if the entire collection has been sorted
    if len(collection) <= 1 or n <= 1:
        return
    insert_next(collection, n - 1)
    rec_insertion_sort(collection, n - 1)
def insert_next(collection: list, index: int):
    # Checks order between adjacent elements
    if index >= len(collection) or collection[index - 1] <= collection[index]:
        return
    # Swaps adjacent elements since they are not in ascending order
    collection[index - 1], collection[index] = (
        collection[index],
        collection[index - 1],
    )
    insert_next(collection, index + 1)
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Insertion Sort the said list becomes:"")
rec_insertion_sort(nums, len(nums))
print(nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Insertion Sort the said list becomes:"")
rec_insertion_sort(nums, len(nums))
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Insertion Sort the said list becomes:"")
rec_insertion_sort(nums, len(nums))
print(nums)
","def insertionSort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j] :
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

arr = [12, 11, 13, 5, 6, 7]
print(insertion"
1473,"Write a NumPy program to create a 11x3 array filled with student information (id, class and name) and shuffle the said array rows starting from 3","import numpy as np
np.random.seed(42) 
student = np.array([['stident_id', 'Class', 'Name'],
              ['01', 'V', 'Debby Pramod'],
              ['02', 'V', 'Artemiy Ellie'],
              ['03', 'V', 'Baptist Kamal'],
              ['04', 'V', 'Lavanya Davide'],
              ['05', 'V', 'Fulton Antwan'],
              ['06', 'V', 'Euanthe Sandeep'],
              ['07', 'V', 'Endzela Sanda'],
              ['08', 'V', 'Victoire Waman'],
              ['09', 'V', 'Briar Nur'],
              ['10', 'V', 'Rose Lykos']]) 
print(""Original array:"")
print(student)
np.random.shuffle(student[2:8])
print(""Shuffle the said array rows starting from 3rd to 9th"")
print(student)
","import numpy as np

arr = np.array([[1,2,3],[4,5,6],[7,8,9]])
np.random.shuffle(arr)
print(arr)

""""""

# Solution

import numpy as np

arr = np.array([[1,2,3],[4,5,6],[7,8,9]])
np.random.sh"
1474,Write a Pandas program to get all the sighting years of the unidentified flying object (ufo) and create the year as column. ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nSighting years of the unidentified flying object:"")
df[""Year""] = df.Date_time.dt.year
print(df.head(10))
","# Solution:

# Input:
# ufo = pd.read_csv('ufo.csv')
# year = ufo['year'].unique()
# year = year.tolist()
# year = year[0]
# year = year.tolist()
# year = year[0]
# year = year.tolist()
# year = year[0]
# year = year.tolist"
1475,Write a Python program to remove a key from a dictionary. ,"myDict = {'a':1,'b':2,'c':3,'d':4}
print(myDict)
if 'a' in myDict: 
    del myDict['a']
print(myDict)
","def remove_key(d, key):
    if key in d:
        del d[key]
    else:
        print(""Key not found"")

d = {'a': 1, 'b': 2, 'c': 3}
remove_key(d, 'a')
print(d)

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
1476,Write a Python program to find the occurrences of 10 most common words in a given text. ,"from collections import Counter
import re
text = """"""The Python Software Foundation (PSF) is a 501(c)(3) non-profit 
corporation that holds the intellectual property rights behind
the Python programming language. We manage the open source licensing 
for Python version 2.1 and later and own and protect the trademarks 
associated with Python. We also run the North American PyCon conference 
annually, support other Python conferences around the world, and 
fund Python related development with our grants program and by funding 
special projects.""""""
words = re.findall('\w+',text)
print(Counter(words).most_common(10))
","import string

def most_common_words(text):
    text = text.lower()
    text = text.split()
    text = [word for word in text if word not in string.punctuation]
    text =''.join(text)
    text = text.split()
    text = [word for word in text if word not in string.punctuation]
    text =''.join(text)
    text = text.split()
    text ="
1477,"Write a Python function to get the city, state and country name of a specified latitude and longitude using Nominatim API and Geopy package. ","from geopy.geocoders import Nominatim
geolocator = Nominatim(user_agent=""geoapiExercises"")
def city_state_country(coord):
    location = geolocator.reverse(coord, exactly_one=True)
    address = location.raw['address']
    city = address.get('city', '')
    state = address.get('state', '')
    country = address.get('country', '')
    return city, state, country
print(city_state_country(""47.470706, -99.704723""))
","def get_city_state_country(lat, lon):
    import geopy.geocoders
    import geopy.distance
    import geopy.extra.rate_limiter
    import geopy.extra.rate_limiter
    import geopy.distance
    import geopy.distance
    import geopy.distance
    import geopy.distance
    import geopy.distance
    import geopy."
1478,Write a Pandas program to create a period index represent all monthly boundaries of a given year. Also print start and end time for each period object in the said index. ,"import pandas as pd
import datetime
from datetime import datetime, date
sdt = datetime(2020, 1, 1)
edt = datetime(2020, 12, 31)
dateset = pd.period_range(sdt, edt, freq='M')
print(""All monthly boundaries of a given year:"")
print(dateset) 
print(""\nStart and end time for each period object in the said index:"")
for d in dateset: 
    print (""{0} {1}"".format(d.start_time, d.end_time)) 
","import pandas as pd

# Create a dataframe
df = pd.DataFrame(columns=['Month', 'Start', 'End'])

# Create a loop to iterate through the dataframe
for i in range(1, 13):
    # Create a new dataframe with the month and start and end time
    new_df = pd.DataFrame(columns=['Month', '"
1479,Write a Python program to create a new list taking specific elements from a tuple and convert a string value to integer. ,"student_data  = [('Alberto Franco','15/05/2002','35kg'), ('Gino Mcneill','17/05/2002','37kg'), ('Ryan Parkes','16/02/1999', '39kg'), ('Eesha Hinton','25/09/1998', '35kg')]
print(""Original data:"")
print(student_data)
students_data_name = list(map(lambda x:x[0], student_data))
students_data_dob = list(map(lambda x:x[1], student_data))
students_data_weight = list(map(lambda x:int(x[2][:-2]), student_data))
print(""\nStudent name:"")
print(students_data_name)
print(""Student name:"")
print(students_data_dob)
print(""Student weight:"")
print(students_data_weight)
","def solution(tuple):
    return tuple[0]

print(solution((1, 2, 3, 4, 5)))

""""""

def solution(tuple):
    return tuple[0]

print(solution((1, 2, 3, 4, 5)))

""""""

def solution(tuple):
    return tuple[0]

print(solution((1, 2, 3, 4, 5)))

"""""""
1480,"Write a Python program to create a floating-point representation of the Arrow object, in UTC time using arrow module. ","import arrow
a = arrow.utcnow()
print(""Current Datetime:"")
print(a)
print(""\nFloating-point representation of the said Arrow object:"")
f = arrow.utcnow().float_timestamp
print(f) 
","import arrow

# create a datetime object
dt = arrow.now()

# create a string representation of the datetime object
print(dt.format('YYYY-MM-DD HH:mm:ss'))

# create a datetime object from a string representation
dt = arrow.get(dt.format('YYYY-MM-DD HH:mm:ss'))

# create a string representation of the datetime object
print(dt.format('"
1481,Write a NumPy program to compute the line graph of a set of data. ,"import numpy as np    
import matplotlib.pyplot as plt
arr = np.random.randint(1, 50, 10)
y, x = np.histogram(arr, bins=np.arange(51))
fig, ax = plt.subplots()
ax.plot(x[:-1], y)
fig.show()
","python solution.py

""""""

import numpy as np
import matplotlib.pyplot as plt

def plot_line_graph(x, y):
    """"""
    Plot a line graph of the data.
    
    Parameters
    ----------
    x : ndarray
        The x-coordinates of the data points.
    y : ndarray
        The y-coordinates of the data points.
    
    Returns
    -------
    None."
1482,Write a Python program to remove lowercase substrings from a given string. ,"import re
str1 = 'KDeoALOklOOHserfLoAJSIskdsf'
print(""Original string:"")
print(str1)
print(""After removing lowercase letters, above string becomes:"")
remove_lower = lambda text: re.sub('[a-z]', '', text)
result =  remove_lower(str1)
print(result)
","def remove_lowercase_substrings(string):
    lowercase_substrings = []
    for i in string:
        if i.islower():
            lowercase_substrings.append(i)
    return lowercase_substrings

print(remove_lowercase_substrings(""Python is a programming language""))

""""""

def remove_lowercase_substrings(string):
    lowercase_substrings = []
    for i in string:
        if i.islower"
1483,Write a Python program to count occurrences of a substring in a string. ,"str1 = 'The quick brown fox jumps over the lazy dog.'
print()
print(str1.count(""fox""))
print()
","def count_substring(string, sub_string):
    count = 0
    for i in range(len(string)):
        if string[i:i+len(sub_string)] == sub_string:
            count += 1
    return count

# driver code
string = ""Python""
sub_string = ""is""

print(count_substring(string, sub_string))

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)"
1484,Write a Python program that reads each row of a given csv file and skip the header of the file. Also print the number of rows and the field names. ,"import csv
fields = []
rows = []
with open('departments.csv', newline='') as csvfile:
 data = csv.reader(csvfile, delimiter=' ', quotechar=',')
 # Following command skips the first row of the CSV file.
 fields = next(data)
 for row in data:
   print(', '.join(row))
print(""\nTotal no. of rows: %d""%(data.line_num))
print('Field names are:')
print(', '.join(field for field in fields))
","python solution.py

""""""

import csv

with open('data.csv', newline='') as f:
    reader = csv.reader(f)
    header_row = next(reader)
    print(f""CSV Header: {header_row}"")
    for row in reader:
        print(row)"
1485,Write a Pandas program to set value in a specific cell in a given dataframe using index. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32]},
     index = ['t1', 't2', 't3', 't4', 't5', 't6'])
print(""Original DataFrame:"")
print(df)
print(""\nSet school code 's004' to 's005':"")
df.at['t6', 'school_code'] = 's005'
print(df)
print(""\nSet date_of_birth of 'Alberto Franco' to '16/05/2002':"")
df.at['t1', 'date_of_birth'] = '16/05/2002'
print(df)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob'],
                   'Age': [30, 32, 33, 34],
                   'Score': [85, 90, 95, 100]})

# Create a new column
df['Age'] = df['Age'].apply(lambda x: x * 2)

# Print the dataframe
print(df)"
1486, Write a Python program to check whether a page contains a title or not. ,"from urllib.request import urlopen
from bs4 import BeautifulSoup
html = urlopen('https://www.wikipedia.org/')
bs = BeautifulSoup(html, ""html.parser"")
nameList = bs.findAll('a', {'class' : 'link-box'})
for name in nameList:
  print(name.get_text())
  ","import re

def check_title(page):
    if re.search(r'^[A-Za-z0-9_]+$', page):
        return True
    else:
        return False

page = input(""Enter the page to check: "")

if check_title(page):
    print(""Title contains a word"")
else:
    print(""Title does not contain a word"")

# Solution:

# import re

# def check_title"
1487,Write a Pandas program to generate sequences of fixed-frequency dates and time spans. ,"import pandas as pd
dtr = pd.date_range('2018-01-01', periods=12, freq='H')
print(""Hourly frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='min')
print(""\nMinutely frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='S')
print(""\nSecondly frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='2H')
print(""nMultiple Hourly frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='5min')
print(""\nMultiple Minutely frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='BQ')
print(""\nMultiple Secondly frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='w')
print(""\nWeekly frequency:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='2h20min')
print(""\nCombine together day and intraday offsets-1:"")
print(dtr)
dtr = pd.date_range('2018-01-01', periods=12, freq='1D10U')
print(""\nCombine together day and intraday offsets-2:"")
print(dtr)
","import pandas as pd

# Create a Pandas DataFrame
df = pd.DataFrame({""Date"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   ""Time"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   ""Duration"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

# Create a Pandas Series"
1488,Write a Python program to sum of all counts in a collections.,"import collections
num = [2,2,4,6,6,8,6,10,4]
print(sum(collections.Counter(num).values()))
","def sum_of_all_counts(collection):
    """"""
    :type collection: List[int]
    :rtype: int
    """"""
    return sum(collection)
    # solution
    # return sum(collection)
    # solution
    # return sum(collection)
    # solution
    # return sum(collection)
    # solution
    # return sum(collection)
    # solution
    # return sum(collection)
    # solution
    # return sum(collection)"
1489,Write a Python program to find the index of a given string at which a given substring starts. If the substring is not found in the given string return 'Not found'. ,"def find_Index(str1, pos):
    if len(pos) > len(str1):
        return 'Not found'

    for i in range(len(str1)):

        for j in range(len(pos)):

            if str1[i + j] == pos[j] and j == len(pos) - 1:
                return i
                
            elif str1[i + j] != pos[j]:
                break

    return 'Not found'
print(find_Index(""Python Exercises"", ""Ex""))
print(find_Index(""Python Exercises"", ""yt""))
print(find_Index(""Python Exercises"", ""PY""))
","def find_index(string, substring):
    for i in range(len(string)):
        if string[i:i+len(substring)] == substring:
            return i
    return 'Not found'

print(find_index('abcdefg', 'ab'))
print(find_index('abcdefg', 'ab'))
print(find_index('abcdef"
1490,Write a Pandas program to import three datasheets from a given excel data (employee.xlsx ) into a single dataframe and export the result into new Excel file. ,"import pandas as pd
import numpy as np
df1 = pd.read_excel('E:\employee.xlsx',sheet_name=0)
df2 = pd.read_excel('E:\employee.xlsx',sheet_name=1)
df3 = pd.read_excel('E:\employee.xlsx',sheet_name=2)
df = pd.concat([df1, df2, df3])
df.to_excel('e:\output.xlsx', index=False)
","import pandas as pd

df = pd.read_excel('employee.xlsx')

df.to_excel('employee.xlsx')

# Solution:

# import pandas as pd
# import numpy as np
# import pandas as pd
# import numpy as np
# import pandas as pd
# import n"
1491,"Write a Python program that accept name of given subject and marks. Input number of subjects in first line and subject name,marks separated by a space in next line. Print subject name and marks in order of its first occurrence. ","import collections, re
n = int(input(""Number of subjects: ""))
item_order = collections.OrderedDict()
for i in range(n):
   sub_marks_list = re.split(r'(\d+)$',input(""Input Subject name and marks: "").strip())
   subject_name = sub_marks_list[0]
   item_price = int(sub_marks_list[1])
   if subject_name not in item_order:
       item_order[subject_name]=item_price
   else:
       item_order[subject_name]=item_order[subject_name]+item_price
           
for i in item_order:
   print(i+str(item_order[i]))
","def main():
    name = input(""Enter your name: "")
    marks = input(""Enter your marks: "")
    print(name + "" "" + marks)

if __name__ == ""__main__"":
    main()

""""""

# Solution

def main():
    name = input(""Enter your name: "")
    marks ="
1492,Write a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings. ,"def match_words(words):
  ctr = 0

  for word in words:
    if len(word) > 1 and word[0] == word[-1]:
      ctr += 1
  return ctr

print(match_words(['abc', 'xyz', 'aba', '1221']))
","def solution(strs):
    count = 0
    for i in range(len(strs)):
        if len(strs[i]) >= 2 and strs[i][0] == strs[i][-1]:
            count += 1
    return count

print(solution([""aba"", ""cdc"", ""aaab"", ""ccb""]))
print(solution([""a"","
1493,Write a Pandas program to find the positions of the values neighboured by smaller values on both sides in a given series. ,"import pandas as pd
import numpy as np
nums = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])
print(""Original series:"")
print(nums)
print(""\nPositions of the values surrounded by smaller values on both sides:"")
temp = np.diff(np.sign(np.diff(nums)))
result = np.where(temp == -2)[0] + 1
print(result)
","import pandas as pd
import numpy as np

# Read the data
df = pd.read_csv(""data.csv"")

# Create a new dataframe with the new column
df_new = df.copy()

# Create a new column with the new column
df_new[""smaller_value""] = df[""smaller_value""].apply(lambda x: x if x < x else x - 1)

# Create"
1494,Write a Python program to print the following integers with '*' on the right of specified width. ,"x = 3
y = 123
print(""\nOriginal Number: "", x)
print(""Formatted Number(right padding, width 2): ""+""{:*< 3d}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number(right padding, width 6): ""+""{:*< 7d}"".format(y));
print()
","def print_integers(n, width):
    for i in range(n):
        print('*' * width)

print_integers(10, 5)
print_integers(20, 5)
print_integers(30, 5)
print_integers(40, 5)
print_integers(50, 5)
print_integers(60, 5)
print_integers(70, 5)
print_integers(80,"
1495,Write a NumPy program to convert an array to a float type. ,"import numpy as np
import numpy as np
a = [1, 2, 3, 4]
print(""Original array"")
print(a)
x = np.asfarray(a)
print(""Array converted to a float type:"")
print(x)
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
print(a)

a = np.array([1, 2, 3, 4, 5])
print(a.dtype)

a = np.array([1, 2, 3, 4, 5])
print(a.dtype)

a = np.array([1, 2, 3, 4, 5])
print(a.dtype)

a = np.array"
1496,Write a Python program to count the same pair in two given lists. use map() function. ,"from operator import eq
def count_same_pair(nums1, nums2):
    result = sum(map(eq, nums1, nums2))
    return result

nums1 = [1,2,3,4,5,6,7,8]
nums2 = [2,2,3,1,2,6,7,9]
print(""Original lists:"")
print(nums1)
print(nums2)
print(""\nNumber of same pair of the said two given lists:"")
print(count_same_pair(nums1, nums2))
","def count_pair(list1, list2):
    count = 0
    for i in list1:
        for j in list2:
            if i == j:
                count += 1
    return count

print(count_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def count_pair("
1497,Write a Python program to find unique triplets whose three elements gives the sum of zero from an array of n integers. ,"def three_sum(nums):
  result = []
  nums.sort()
  for i in range(len(nums)-2):
    if i> 0 and nums[i] == nums[i-1]:
      continue
    l, r = i+1, len(nums)-1
    while l < r:
      s = nums[i] + nums[l] + nums[r]
      if s > 0:
        r -= 1
      elif s < 0:
          l += 1
      else:
        # found three sum
        result.append((nums[i], nums[l], nums[r]))
        # remove duplicates
        while l < r and nums[l] == nums[l+1]:
          l+=1
          while l < r and nums[r] == nums[r-1]:
            r -= 1
            l += 1
            r -= 1
          return result

x = [1, -6, 4, 2, -1, 2, 0, -2, 0 ]
print(three_sum(x))
","def triplets(arr):
    arr.sort()
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            for k in range(j+1, len(arr)):
                if arr[i] + arr[j] + arr[k] == 0:
                    return [arr[i], arr[j], arr[k]]

print(triplets([1, 2,"
1498,Write a Python program to write (without writing separate lines between rows) and read a CSV file with specified delimiter. Use csv.reader,"import csv     
fw = open(""test.csv"", ""w"", newline='')
writer = csv.writer(fw, delimiter = "","")
writer.writerow([""a"",""b"",""c""])
writer.writerow([""d"",""e"",""f""])
writer.writerow([""g"",""h"",""i""])
fw.close()
 
fr = open(""test.csv"", ""r"")
csv = csv.reader(fr, delimiter = "","")
for row in csv:
  print(row) 
fr.close()
","import csv

with open('test.csv', 'w', newline='') as f:
    writer = csv.writer(f)
    writer.writerow(['Name', 'Age', 'Class'])
    writer.writerow(['John', 25, 'First'])
    writer.writerow(['Anna', 27, 'Second'])
    writer.writerow(['Peter', 29, 'Third'])"
1499,"Write a Python program to make an iterator that drops elements from the iterable as long as the elements are negative; afterwards, returns every element. ","import itertools as it
def drop_while(nums):
    return it.takewhile(lambda x : x < 0, nums)
nums = [-1,-2,-3,4,-10,2,0,5,12]
print(""Original list: "",nums)
result = drop_while(nums)
print(""Drop elements from the said list as long as the elements are negative\n"",list(result))
#Alternate solution
def negative_num(x):
    return x < 0
def drop_while(nums):
    return it.dropwhile(negative_num, nums)
nums = [-1,-2,-3,4,-10,2,0,5,12]
print(""Original list: "",nums)
result = drop_while(nums)
print(""Drop elements from the said list as long as the elements are negative\n"",list(result))
","def negative_iterator(iterable):
    for element in iterable:
        if element < 0:
            yield element

iterator = negative_iterator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(next(iterator))
print(next(iterator))
print(next(iterator))
print(next(iterator))
print(next(iterator))
print(next(iterator"
