Unnamed: 0,Problem,Python Code,Generated_Code
0,Write a NumPy program to repeat elements of an array. ,"import numpy as np
x = np.repeat(3, 4)
print(x)
x = np.array([[1,2],[3,4]])
print(np.repeat(x, 2))
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(a)

a = np.repeat(a, 2)

print(a)

a = np.repeat(a, 2, axis=0)

print(a)

a = np.repeat(a, 2, axis=1)

print(a)

a = np.repeat(a, 2, axis="
1,Write a Python function to create and print a list where the values are square of numbers between 1 and 30 (both included). ,"def printValues():
	l = list()
	for i in range(1,31):
		l.append(i**2)
	print(l)
		
printValues()
","def square_list(n):
    l = []
    for i in range(1, n+1):
        l.append(i**2)
    return l

print(square_list(30))

""""""

def square_list(n):
    l = []
    for i in range(1, n+1):
        l.append(i**2)
    return l

print(square_list(30"
2,Write a Python program to remove duplicates from a list of lists. ,"import itertools
num = [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]
print(""Original List"", num)
num.sort()
new_num = list(num for num,_ in itertools.groupby(num))
print(""New List"", new_num)
","def remove_duplicates(lst):
    # Your code here
    return lst

lst = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]
print(remove_duplicates(lst))

""""""

def remove_duplicates(lst):
    # Your code"
3,Write a NumPy program to compute the x and y coordinates for points on a sine curve and plot the points using matplotlib. ,"import numpy as np
import matplotlib.pyplot as plt
# Compute the x and y coordinates for points on a sine curve
x = np.arange(0, 3 * np.pi, 0.2)
y = np.sin(x)
print(""Plot the points using matplotlib:"")
plt.plot(x, y)
plt.show()
","import numpy as np
import matplotlib.pyplot as plt

x = np.arange(0, 2*np.pi, 0.1)
y = np.sin(x)

plt.plot(x, y)
plt.show()

""""""

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%"
4,Write a Python program to alter a given SQLite table. ,"import sqlite3
from sqlite3 import Error
def sql_connection():
   try:
     conn = sqlite3.connect('mydatabase.db')
     return conn
   except Error:
     print(Error)
def sql_table(conn):
   cursorObj = conn.cursor()
   cursorObj.execute(""CREATE TABLE agent_master(agent_code char(6),agent_name char(40),working_area char(35),commission decimal(10,2),phone_no char(15) NULL);"")
   print(""\nagent_master file has created."")
   
   # adding a new column in the agent_master table
   cursorObj.execute(""""""
   ALTER TABLE agent_master
   ADD COLUMN FLAG BOOLEAN;
   """""")
   print(""\nagent_master file altered."")
   conn.commit()
   
sqllite_conn = sql_connection()
sql_table(sqllite_conn)
if (sqllite_conn):
 sqllite_conn.close()
 print(""\nThe SQLite connection is closed."")
","import sqlite3

conn = sqlite3.connect('mydb.db')
c = conn.cursor()

c.execute(""""""CREATE TABLE IF NOT EXISTS mytable (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    age INTEGER NOT NULL,
    gender TEXT NOT NULL
)"""""")

c.execute(""INSERT INTO mytable (name, age, gender) VALUES ('John', 30, 'Male')"
5,Write a Python program to extract specified size of strings from a give list of string values using lambda. ,"def extract_string(str_list1, l):
    result = list(filter(lambda e: len(e) == l, str_list1))
    return result

str_list1 = ['Python', 'list', 'exercises', 'practice', 'solution'] 
print(""Original list:"")
print(str_list1)
l = 8
print(""\nlength of the string to extract:"")
print(l)
print(""\nAfter extracting strings of specified length from the said list:"")
print(extract_string(str_list1 , l))
","def solution(lst):
    return len(lst)

lst = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"", ""z""]
print(solution(lst))"
6,Write a Python program to create Fibonacci series upto n using Lambda. ,"from functools import reduce
 
fib_series = lambda n: reduce(lambda x, _: x+[x[-1]+x[-2]],
                                range(n-2), [0, 1])
 
print(""Fibonacci series upto 2:"")
print(fib_series(2))
print(""\nFibonacci series upto 5:"")
print(fib_series(5))
print(""\nFibonacci series upto 6:"")
print(fib_series(6))
print(""\nFibonacci series upto 9:"")
print(fib_series(9))
","def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

n = int(input(""Enter the number of terms: ""))
print(fib(n))

""""""

# Solution:

def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1"
7,Write a Python program to sort unsorted numbers using Strand sort. ,"#Ref:https://bit.ly/3qW9FIX
import operator
def strand_sort(arr: list, reverse: bool = False, solution: list = None) -> list:
    _operator = operator.lt if reverse else operator.gt
    solution = solution or []
    if not arr:
        return solution
    sublist = [arr.pop(0)]
    for i, item in enumerate(arr):
        if _operator(item, sublist[-1]):
            sublist.append(item)
            arr.pop(i)

    #  merging sublist into solution list
    if not solution:
        solution.extend(sublist)
    else:
        while sublist:
            item = sublist.pop(0)
            for i, xx in enumerate(solution):
                if not _operator(item, xx):
                    solution.insert(i, item)
                    break
            else:
                solution.append(item)

    strand_sort(arr, reverse, solution)
    return solution
lst = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(lst)
print(""After applying  Strand sort the said list becomes:"")
print(strand_sort(lst))
lst = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(lst)
print(""After applying Strand sort the said list becomes:"")
print(strand_sort(lst))
lst = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(lst)
print(""After applying Strand sort the said list becomes:"")
print(strand_sort(lst))
","def sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [10, 8, 2, 5, 1, 9, 4, 6, 3]
print(sort(arr))

""""""

def sort(arr"
8,Write a Python program to insert a specified element in a given list after every nth element. ,"def inset_element_list(lst, x, n):
    i = n
    while i < len(lst):
        lst.insert(i, x)
        i+= n+1
    return lst

nums = [1, 3, 5, 7, 9, 11,0, 2, 4, 6, 8, 10,8,9,0,4,3,0]
print(""Original list:"")
print(nums)
x = 20
n = 4
print(""\nInsert"",x,""in said list after every"",n,""th element:"")
print(inset_element_list(nums, x, n))

chars = ['s','d','f','j','s','a','j','d','f','d']
print(""\nOriginal list:"")
print(chars)
x = 'Z'
n = 3
print(""\nInsert"",x,""in said list after every"",n,""th element:"")
print(inset_element_list(chars, x, n))
","def insert_after(list, element, n):
    for i in range(n):
        list.insert(i, element)
    return list

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
element = 5
n = 2
print(insert_after(list, element, n))

""""""

def insert_after(list, element, n):
    for i in range(n):
        list"
9,rite a Pandas program to create a Pivot table and find the maximum and minimum sale value of the items. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df, index='Item', values='Sale_amt', aggfunc=[np.max, np.min])
print(table)
","import pandas as pd

df = pd.read_csv(""C:\\Users\\DELL\\Desktop\\Python\\Data_Visualization\\Sales.csv"")

# Create a pivot table
pivot = df.pivot_table(index=""Customer ID"", columns=""Item"", values=""Sales"")

# Find the maximum and minimum sales
print(pivot.max())
print(pivot.min())

# Create a new column in the pivot"
10,Write a NumPy program to extract upper triangular part of a NumPy matrix. ,"import numpy as np
num = np.arange(18)
arr1 = np.reshape(num, [6, 3])
print(""Original array:"")
print(arr1)
result  = arr1[np.triu_indices(3)]
print(""\nExtract upper triangular part of the said array:"")
print(result)
result  = arr1[np.triu_indices(2)]
print(""\nExtract upper triangular part of the said array:"")
print(result)
","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(A[0, :])

# Output:
# [1 2 3]
# [4 5 6]
# [7 8 9]

# Note:
# The matrix is square and its dimensions are N x N.
# The matrix is stored in a 2-D array A.
# The upper triangular part of"
11,Write a Python program to find the maximum occurring character in a given string. ,"def get_max_occuring_char(str1):
  ASCII_SIZE = 256
  ctr = [0] * ASCII_SIZE
  max = -1
  ch = ''
  for i in str1:
    ctr[ord(i)]+=1;
 
  for i in str1:
    if max < ctr[ord(i)]:
      max = ctr[ord(i)]
      ch = i
  return ch

print(get_max_occuring_char(""Python: Get file creation and modification date/times""))
print(get_max_occuring_char(""abcdefghijkb""))
","def max_occuring_char(string):
    max_occuring_char = 0
    for i in string:
        if i == max_occuring_char:
            continue
        else:
            max_occuring_char = i
    return max_occuring_char

print(max_occuring_char(""abcdefghijklmnopqrstuvwxyz""))

""""""

def max_occuring_char(string):
    max_occuring"
12,"Write a Python program to find whether a given number (accept from the user) is even or odd, print out an appropriate message to the user. ","num = int(input(""Enter a number: ""))
mod = num % 2
if mod > 0:
    print(""This is an odd number."")
else:
    print(""This is an even number."")","def even_odd(num):
    if num % 2 == 0:
        print(""Even"")
    else:
        print(""Odd"")

num = int(input(""Enter a number: ""))
even_odd(num)

""""""

# Solution 1

def even_odd(num):
    if num % 2 == 0:
        print(""Even"")
    else:
        print(""Odd"")"
13,Write a NumPy program to create a new vector with 2 consecutive 0 between two values of a given vector. ,"import numpy as np
nums = np.array([1,2,3,4,5,6,7,8])
print(""Original array:"")
print(nums)
p = 2
new_nums = np.zeros(len(nums) + (len(nums)-1)*(p))
new_nums[::p+1] = nums
print(""\nNew array:"")
print(new_nums)
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
b = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

c = np.concatenate((a, b), axis=0)
print(c)

# Solution:

# a = np.array([1, 2, 3, 4"
14,Write a Python program to count the occurrences of each word in a given sentence. ,"def word_count(str):
    counts = dict()
    words = str.split()

    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1

    return counts

print( word_count('the quick brown fox jumps over the lazy dog.'))
","python solution.py

""""""

def count_words(sentence):
    """"""
    This function counts the occurrences of each word in a given sentence.
    
    Parameters:
    sentence (string): The sentence to count the occurrences of each word in.
    
    Returns:
    count_words (dict): A dictionary containing the word and its count.
    """"""
    
    count_words = {}
    
    for word in sentence.split():
        if word in count"
15,Write a Python program that accepts a hyphen-separated sequence of words as input and prints the words in a hyphen-separated sequence after sorting them alphabetically. ,"items=[n for n in input().split('-')]
items.sort()
print('-'.join(items))
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17"
16,Write a Pandas program to insert a column at a specific index in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'weight': [35, 32, 33, 30, 31, 32]},
     index =  [1, 2, 3, 4, 5, 6])
print(""Original DataFrame with single index:"")
print(df)
date_of_birth = ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997']  
idx = 3
print(""\nInsert 'date_of_birth' column in 3rd position of the said DataFrame:"")
df.insert(loc=idx, column='date_of_birth', value=date_of_birth)
print(df)
","import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'col1': [1, 2, 3, 4], 'col2': [5, 6, 7, 8]})

# Insert a column at the index 0
df.insert(0, 'col3', [10, 20, 30, 40])

# Print the DataFrame
print(df)

# Create a DataFrame
df = pd.DataFrame({'"
17,Write a Python program to remove the last N number of elements from a given list. ,"def remove_last_n(nums, N):
    result = nums[:len(nums)-N]
    return result    
nums = [2,3,9,8,2,0,39,84,2,2,34,2,34,5,3,5]
print(""Original lists:"")
print(nums)
N = 3
print(""\nRemove the last"",N,""elements from the said list:"")
print(remove_last_n(nums, N))
N = 5
print(""\nRemove the last"",N,""elements from the said list:"")
print(remove_last_n(nums, N))
N = 1
print(""\nRemove the last"",N,""element from the said list:"")
print(remove_last_n(nums, N))
","def remove_last_n(lst, n):
    return lst[:-n]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
print(remove_last_n(lst, n))

""""""

def remove_last_n(lst, n):
    return lst[:-n]

lst = [1, 2, 3, 4, 5, 6, 7"
18,Write a Python program to find index position and value of the maximum and minimum values in a given list of numbers using lambda. ,"def position_max_min(nums):
    max_result = max(enumerate(nums), key=(lambda x: x[1]))
    min_result = min(enumerate(nums), key=(lambda x: x[1]))
    return max_result,min_result

nums = [12,33,23,10.11,67,89,45,66.7,23,12,11,10.25,54]
print(""Original list:"")
print(nums)
result = position_max_min(nums)
print(""\nIndex position and value of the maximum value of the said list:"")
print(result[0])
print(""\nIndex position and value of the minimum value of the said list:"")
print(result[1])
","def max_min(numbers):
    return max(numbers), min(numbers)

print(max_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def max_min(numbers):
    return max(numbers), min(numbers)

print(max_min([1, 2, 3, 4, 5, 6, 7, 8, 9,"
19,Write a NumPy program to find the k smallest values of a given NumPy array. ,"import numpy as np
array1 = np.array([1, 7, 8, 2, 0.1, 3, 15, 2.5])
print(""Original arrays:"")
print(array1)
k = 4
result = np.argpartition(array1, k)
print(""\nk smallest values:"")
print(array1[result[:k]])
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.min())

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.min(axis=0))

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
20,"Write a NumPy program to add one polynomial to another, subtract one polynomial from another, multiply one polynomial by another and divide one polynomial by another. ","from numpy.polynomial import polynomial as P
x = (10,20,30)
y = (30,40,50)
print(""Add one polynomial to another:"")
print(P.polyadd(x,y))
print(""Subtract one polynomial from another:"")
print(P.polysub(x,y))
print(""Multiply one polynomial by another:"")
print(P.polymul(x,y))
print(""Divide one polynomial by another:"")
print(P.polydiv(x,y))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a + b)
print(a - b)
print(a * b)
print(a / b)

# Solution:

# a ="
21,Write a Python program to check common elements between two given list are in same order or not. ,"def same_order(l1, l2):
    common_elements = set(l1) & set(l2)
    l1 = [e for e in l1 if e in common_elements]
    l2 = [e for e in l2 if e in common_elements]
    return l1 == l2

color1 = [""red"",""green"",""black"",""orange""]
color2 = [""red"",""pink"",""green"",""white"",""black""]
color3 = [""white"",""orange"",""pink"",""black""]

print(""Original lists:"")
print(color1)
print(color2)
print(color3)
print(""\nTest common elements between color1 and color2 are in same order?"")
print(same_order(color1, color2))
print(""\nTest common elements between color1 and color3 are in same order?"")
print(same_order(color1, color3))
print(""\nTest common elements between color2 and color3 are in same order?"")
print(same_order(color2, color3))
","def common_elements(l1, l2):
    l1.sort()
    l2.sort()
    if l1 == l2:
        return True
    else:
        return False

l1 = [1, 2, 3, 4, 5]
l2 = [1, 2, 3, 4, 5, 6]
print(common_elements(l1, l2))

""""""

# Solution:

def common_e"
22,Write a Python program to find numbers divisible by nineteen or thirteen from a list of numbers using Lambda. ,"nums = [19, 65, 57, 39, 152, 639, 121, 44, 90, 190]
print(""Orginal list:"")
print(nums) 
result = list(filter(lambda x: (x % 19 == 0 or x % 13 == 0), nums)) 
print(""\nNumbers of the above list divisible by nineteen or thirteen:"")
print(result)
","def solution(numbers):
    return list(filter(lambda x: x % 19 == 0 or x % 13 == 0, numbers))

""""""

def solution(numbers):
    return list(filter(lambda x: x % 19 == 0 or x % 13 == 0, numbers))

print(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17"
23,Write a NumPy program to multiply two given arrays of same size element-by-element. ,"import numpy as np 
nums1 = np.array([[2, 5, 2],
              [1, 5, 5]])
nums2 = np.array([[5, 3, 4],
              [3, 2, 5]])
print(""Array1:"") 
print(nums1)
print(""Array2:"") 
print(nums2)
print(""\nMultiply said arrays of same size element-by-element:"")
print(np.multiply(nums1, nums2))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a * b)

# OUTPUT:
# [[15 12 22]
#  [25 26 30]]

# Hint: You can use np.dot() to perform matrix multiplication.

# Hint: You can use np."
24,"Write a Python program to get a list, sorted in increasing order by the last element in each tuple from a given list of non-empty tuples. ","def last(n): return n[-1]

def sort_list_last(tuples):
  return sorted(tuples, key=last)

print(sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))
","def last_elem(tup):
    return tup[-1]

tup = [1,2,3,4,5,6,7,8,9,10]
print(sorted(tup, key=last_elem))

""""""

def last_elem(tup):
    return tup[-1]

tup = [1,2,3,4"
25,Write a Pandas program to replace the missing values with the most frequent values present in each column of a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df) 
print(""\nReplace the missing values with the most frequent values present in each column:"")
result = df.fillna(df.mode().iloc[0])
print(result)
","import pandas as pd

# Read the data
df = pd.read_csv(""data/data.csv"")

# Create a new column called ""Most Frequent""
df[""Most Frequent""] = df[""Age""].mode()

# Print the dataframe
print(df)

# Replace the missing values with the most frequent values
df.fillna(df.mode(), inplace=True)

# Print the dataframe"
26,"Write a NumPy program to split an array of 14 elements into 3 arrays, each of which has 2, 4, and 8 elements in the original order. ","import numpy as np
x = np.arange(1, 15)
print(""Original array:"",x)
print(""After splitting:"")
print(np.split(x, [2, 6]))
","import numpy as np

arr = np.array([14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,"
27,Write a Python program to create a deep copy of a given dictionary. Use copy.copy,"import copy
nums_x = {""a"":1, ""b"":2, 'cc':{""c"":3}}
print(""Original dictionary: "", nums_x)
nums_y = copy.deepcopy(nums_x)
print(""\nDeep copy of the said list:"")
print(nums_y)
print(""\nChange the value of an element of the original dictionary:"")
nums_x[""cc""][""c""] = 10
print(nums_x)
print(""\nSecond dictionary (Deep copy):"")
print(nums_y)

nums = {""x"":1, ""y"":2, 'zz':{""z"":3}}
nums_copy = copy.deepcopy(nums)
print(""\nOriginal dictionary :"")
print(nums)
print(""\nDeep copy of the said list:"")
print(nums_copy)
print(""\nChange the value of an element of the original dictionary:"")
nums[""zz""][""z""] = 10
print(""\nFirst dictionary:"")
print(nums)
print(""\nSecond dictionary (Deep copy):"")
print(nums_copy)
","def deep_copy(d):
    new_d = {}
    for key in d:
        new_d[key] = d[key]
    return new_d

d = {'a': 1, 'b': 2, 'c': 3}
print(deep_copy(d))

""""""

# Solution

def deep_copy(d):
    new_d = {}
    for key in d:
        new_d[key] = d["
28,Write a Pandas program to create a subset of a given series based on value and condition. ,"import pandas as pd
s = pd.Series([0, 1,2,3,4,5,6,7,8,9,10])
print(""Original Data Series:"")
print(s)
print(""\nSubset of the above Data Series:"")
n = 6
new_s = s[s < n]
print(new_s)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Score': [85, 90, 95, 100, 95, 90]})

# Create a subset of the dataframe
df_subset = df.loc[df['Score'] >= 60]

# Print the subset of the dataframe
print(df_sub"
29,Write a Python program to get the items from a given list with specific condition. ,"def first_index(l1):
    return sum(1 for i in l1 if (i> 45 and i % 2 == 0))

nums = [12,45,23,67,78,90,45,32,100,76,38,62,73,29,83]
print(""Original list:"")
print(nums)
n = 45
print(""\nNumber of Items of the said list which are even and greater than"",n)
print(first_index(nums))
","def get_items(list, condition):
    for item in list:
        if condition(item):
            yield item

print(get_items([1, 2, 3, 4, 5], lambda x: x % 2 == 0))

""""""

def get_items(list, condition):
    for item in list:
        if condition(item):
            yield item

print(get_items([1, 2, 3, 4, 5], lambda x: x %"
30,Write a Python program to read a file line by line store it into a variable. ,"def file_read(fname):
        with open (fname, ""r"") as myfile:
                data=myfile.readlines()
                print(data)
file_read('test.txt')
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

#"
31,Write a Python program to get the current value of the recursion limit. ,"import sys
print()
print(""Current value of the recursion limit:"")
print(sys.getrecursionlimit())
print()
","import sys

def recursionLimit():
    return sys.getrecursionlimit()

print(recursionLimit())

""""""

# Solution:

import sys

def recursionLimit():
    return sys.getrecursionlimit()

print(recursionLimit())

""""""

# Solution:

import sys

def recursionLimit():
    return sys.getrecursionlimit()

print(recursionLimit())

""""""

# Solution:

import"
32,Write a Python program to swap cases of a given string. ,"def swap_case_string(str1):
   result_str = """"   
   for item in str1:
       if item.isupper():
           result_str += item.lower()
       else:
           result_str += item.upper()           
   return result_str
print(swap_case_string(""Python Exercises""))
print(swap_case_string(""Java""))
print(swap_case_string(""NumPy""))
","def swap_case(s):
    # your code goes here
    return s.swapcase()

# read the string
s = input()
# call the function
print(swap_case(s))

'''
Sample Input

hacker
Sample Output

Hacker is a good boy
'''"
33,"Write a Python program to convert an address (like ""1600 Amphitheatre Parkway, Mountain View, CA"") into geographic coordinates (like latitude 37.423021 and longitude -122.083739). ","import requests
geo_url = 'http://maps.googleapis.com/maps/api/geocode/json'
my_address = {'address': '21 Ramkrishana Road, Burdwan, East Burdwan, West Bengal, India', 
             'language': 'en'}
response = requests.get(geo_url, params = my_address)
results = response.json()['results']
my_geo = results[0]['geometry']['location']
print(""Longitude:"",my_geo['lng'],""\n"",""Latitude:"",my_geo['lat'])
","# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:"
34,Write a Python program to create a datetime from a given timezone-aware datetime using arrow module. ,"import arrow
from datetime import datetime
from dateutil import tz
print(""\nCreate a date from a given date and a given time zone:"")
d1 = arrow.get(datetime(2018, 7, 5), 'US/Pacific')
print(d1)
print(""\nCreate a date from a given date and a time zone object from a string representation:"")
d2 = arrow.get(datetime(2017, 7, 5), tz.gettz('America/Chicago'))
print(d2)
d3 = arrow.get(datetime.now(tz.gettz('US/Pacific')))
print(""\nCreate a date using current datetime and a specified time zone:"")
print(d3)
","import datetime

def datetime_to_arrow(dt):
    return dt.replace(tzinfo=datetime.timezone.utc).astimezone(datetime.timezone.utc)

dt = datetime.datetime(2021, 1, 1, 12, 30, 0, tzinfo=datetime.timezone.utc)
print(datetime_to_arrow(dt))

""""""

# Solution:"
35,Write a Python program to create a two-dimensional list from given list of lists. ,"def two_dimensional_list(nums):
  return list(zip(*nums))
print(two_dimensional_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]))
print(two_dimensional_list([[1, 2], [4, 5]]))
","def create_list(lst):
    return [[i,j] for i in lst for j in lst]

lst = [[1,2,3],[4,5,6],[7,8,9]]
print(create_list(lst))

""""""

def create_list(lst):
    return [[i,j] for i in lst for j in lst]

lst = [[1,2,3],[4,5,6"
36,Write a Python program to invert a dictionary with unique hashable values. ,"def test(students):
  return { value: key for key, value in students.items() }
 
students = {
  'Theodore': 10,
  'Mathew': 11,
  'Roxanne': 9,
}
print(test(students))
","def invert_dict(d):
    return {v: k for k, v in d.items()}

d = {'a': 1, 'b': 2, 'c': 3}
print(invert_dict(d))

""""""

# Solution:

def invert_dict(d):
    return {v: k for k, v in d.items()}

d = {'a': 1, 'b': 2, 'c': 3}
print"
37,Write a NumPy program to access last two columns of a multidimensional columns. ,"import numpy as np
arra = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(arra)
result = arra[:,[1,2]]
print(result)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a[:, 2])

# Output:
# [1 2 3]
# [4 5 6]
# [7 8 9]

# Hint: To solve this problem, you can use the numpy.ndarray.T method.
# For example, to access the transpose of a matrix, use np."
38,Write a Python program to create Cartesian product of two or more given lists using itertools. ,"import itertools 
def cartesian_product(lists):
    return list(itertools.product(*lists))

ls = [[1,2],[3,4]]
print(""Original Lists:"",ls)
print(""Cartesian product of the said lists: "",cartesian_product(ls))
ls = [[1,2,3],[3,4,5]]
print(""\nOriginal Lists:"",ls)
print(""Cartesian product of the said lists: "",cartesian_product(ls))
ls = [[],[1,2,3]]
print(""\nOriginal Lists:"",ls)
print(""Cartesian product of the said lists: "",cartesian_product(ls))
ls = [[1,2],[]]
print(""\nOriginal Lists:"",ls)
print(""Cartesian product of the said lists: "",cartesian_product(ls))
",">>> import itertools
>>> a = [1, 2, 3]
>>> b = [4, 5, 6]
>>> c = [7, 8, 9]
>>> d = [10, 11, 12]
>>> e = [13, 14, 15]
>>> f = [16, 17, 18]
>>> g = [19, 20, 21]
>>> h = [22, 23, 24]
>>> i = [25, 26, 27]
>>> j"
39,Write a NumPy program to find the first Monday in May 2017. ,"import numpy as np
print(""First Monday in May 2017:"")
print(np.busday_offset('2017-05', 0, roll='forward', weekmask='Mon'))
","import numpy as np

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:
# Solution 3:

# Solution 1:
# Solution 2:"
40, Write a Python program to get the number of people visiting a U.S. government website right now. ,"#https://bit.ly/2lVhlLX
import requests
from lxml import html
url = 'https://www.us-cert.gov/ncas/alerts'
doc = html.fromstring(requests.get(url).text)
print(""The number of security alerts issued by US-CERT in the current year:"")
print(len(doc.cssselect('.item-list li')))
  ","import urllib.request
import urllib.parse
import urllib.error

def get_count(url):
    try:
        req = urllib.request.Request(url)
        response = urllib.request.urlopen(req)
        count = int(response.read().decode('utf-8'))
        return count
    except urllib.error.HTTPError as e:
        print(e)"
41,Write a NumPy program to remove the leading and trailing whitespaces of all the elements of a given array. ,"import numpy as np
x = np.array([' python exercises ', ' PHP  ', ' java  ', '  C++'], dtype=np.str)
print(""Original Array:"")
print(x)
stripped = np.char.strip(x)
print(""\nRemove the leading and trailing whitespaces: "", stripped)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.head(3))
print(arr.tail(3))
print(arr.shape)
print(arr.size)
print(arr.dtype)
print(arr.itemsize)
print(arr.nbytes)

arr.remove_leading_and_trailing_whites"
42,Write a Python program to find the first repeated character of a given string where the index of first occurrence is smallest. ,"def first_repeated_char_smallest_distance(str1):
  temp = {}
  for ch in str1:
    if ch in temp:
      return ch, str1.index(ch);
    else:
      temp[ch] = 0
  return 'None'
print(first_repeated_char_smallest_distance(""abcabc""))
print(first_repeated_char_smallest_distance(""abcb""))
print(first_repeated_char_smallest_distance(""abcc""))
print(first_repeated_char_smallest_distance(""abcxxy""))
print(first_repeated_char_smallest_distance(""abc""))))
","def first_repeated_char(str):
    # your code goes here
    return str[0]

# driver code
str = ""abcd""
print(first_repeated_char(str))

# solution
def first_repeated_char(str):
    # your code goes here
    return str[0]

# driver code
str = ""abcd""
print(first_repeated_char(str))

#"
43,Write a Python program to create a table and insert some records in that table. Finally selects all rows from the table and display the records. ,"import sqlite3
 
from sqlite3 import Error
 
def sql_connection():
   try:
     conn = sqlite3.connect('mydatabase.db')
     return conn
   except Error:
     print(Error)
 
def sql_table(conn):
   cursorObj = conn.cursor()
# Create the table
   cursorObj.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")
# Insert records
   cursorObj.executescript(""""""
   INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);
   INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);
   INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);
   INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);
   INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);
   """""")
   conn.commit()
   cursorObj.execute(""SELECT * FROM salesman"")
   rows = cursorObj.fetchall()
   print(""Agent details:"")
   for row in rows:
       print(row)
sqllite_conn = sql_connection()
sql_table(sqllite_conn)
if (sqllite_conn):
 sqllite_conn.close()
 print(""\nThe SQLite connection is closed."")
","#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(s):
    s = s.split()
    s = list(map(int, s))
    s.sort()
    return s

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], '"
44,Write a Pandas program to calculate the number of characters in each word in a given series. ,"import pandas as pd
series1 = pd.Series(['Php', 'Python', 'Java', 'C#'])
print(""Original Series:"")
print(series1)
result = series1.map(lambda x: len(x))
print(""\nNumber of characters in each word in the said series:"")
print(result)
","import pandas as pd

# Read the data from the file
df = pd.read_csv(""data.csv"")

# Create a dictionary to store the data
dictionary = {'Word': df['Word'], 'Count': df['Count']}

# Create a dataframe from the dictionary
df = pd.DataFrame(dictionary)

# Print the dataframe
print(df)

# Create a function to calculate the number of characters in each"
45,"Write a NumPy program to broadcast on different shapes of arrays where p(3,3) + q(3). ","import numpy as np    
p = np.array([[0, 0, 0],
              [1, 2, 3],
              [4, 5, 6]]) 
q= np.array([10, 11, 12]) 
print(""Original arrays:"")
print(""Array-1"")
print(p)
print(""Array-2"")
print(q)
print(""\nNew Array:"")
new_array1 = p + q 
print(new_array1)
","import numpy as np

a = np.array([[1,2,3],[4,5,6]])
b = np.array([[1,2,3],[4,5,6]])

print(np.add(a,b))

# Output:
[[2 3]
 [4 5]
 [6 4]]

# Output:
[[2 3]
 [4 5]
 [6 4]]

#"
46,Write a Python program to check if a given function returns True for at least one element in the list. ,"def some(lst, fn = lambda x: x):
  return any(map(fn, lst))
print(some([0, 1, 2, 0], lambda x: x >= 2 ))
print(some([5, 10, 20, 10], lambda x: x < 2 ))
","def is_true(x):
    if x == 0:
        return False
    else:
        return True

print(is_true(0))
print(is_true(1))
print(is_true(2))
print(is_true(3))
print(is_true(4))
print(is_true(5))
print(is_true(6))
print(is_true(7))
print(is_true("
47,Write a NumPy program to create an array using generator function that generates 15 integers. ,"import numpy as np
def generate():
   for n in range(15):
       yield n
nums = np.fromiter(generate(),dtype=float,count=-1)
print(""New array:"")
print(nums)
","import numpy as np

def generator(n):
    for i in range(n):
        yield i

arr = generator(15)

print(next(arr))
print(next(arr))
print(next(arr))
print(next(arr))
print(next(arr))
print(next(arr))
print(next(arr))
print(next(arr))
print(next(arr))
print(next(arr))
print(next("
48,Write a Python program to find four elements from a given array of integers whose sum is equal to a given number. The solution set must not contain duplicate quadruplets. ,"#Source: https://bit.ly/2SSoyhf
from bisect import bisect_left
class Solution:
    def fourSum(self, nums, target):
        """"""
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """"""
        N = 4
        quadruplets = []
        if len(nums) < N:
            return quadruplets
        nums = sorted(nums)
        quadruplet = []

        # Let top[i] be the sum of largest i numbers.
        top = [0]       
        for i in range(1, N):
            top.append(top[i - 1] + nums[-i])

        # Find range of the least number in curr_n (0,...,N)
        # numbers that sum up to curr_target, then find range
        # of 2nd least number and so on by recursion.
        def sum_(curr_target, curr_n, lo=0):
            if curr_n == 0:
                if curr_target == 0:
                    quadruplets.append(quadruplet[:])
                return

            next_n = curr_n - 1
            max_i = len(nums) - curr_n
            max_i = bisect_left(
                nums, curr_target // curr_n,
                lo, max_i)
            min_i = bisect_left(
                nums, curr_target - top[next_n],
                lo, max_i)

            for i in range(min_i, max_i + 1): 
                if i == min_i or nums[i] != nums[i - 1]:
                    quadruplet.append(nums[i])
                    next_target = curr_target - nums[i]
                    sum_(next_target, next_n, i + 1)
                    quadruplet.pop()

        sum_(target, N)
        return quadruplets

s = Solution()
nums = [-2, -1, 1, 2, 3, 4, 5, 6]
target = 10
result = s.fourSum(nums, target)
print(""\nArray values & target value:"",nums,""&"",target)
print(""Solution Set:\n"", result)
","def four_elements(arr, num):
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            for k in range(j+1, len(arr)):
                if arr[i] + arr[j] + arr[k] == num:
                    print(arr[i], arr[j], arr[k])

arr ="
49,Write a Python program to extract specified size of strings from a give list of string values. ,"def extract_string(str_list1, l):
    result = [e for e in str_list1 if len(e) == l] 
    return result

str_list1 = ['Python', 'list', 'exercises', 'practice', 'solution'] 
print(""Original list:"")
print(str_list1)
l = 8
print(""\nlength of the string to extract:"")
print(l)
print(""\nAfter extracting strings of specified length from the said list:"") 
print(extract_string(str_list1 , l))
","def solution(lst):
    return lst[0:3]

lst = [""apple"", ""banana"", ""cherry""]
print(solution(lst))

""""""

def solution(lst):
    return lst[0:3]

lst = [""apple"", ""banana"", ""cherry""]
print(solution(lst))

""""""

def solution(lst):
    return lst[0:3]"
50,Write a Python program to count the number of times a specific element presents in a deque object. ,"import collections
nums = (2,9,0,8,2,4,0,9,2,4,8,2,0,4,2,3,4,0)
nums_dq = collections.deque(nums)
print(""Number of 2 in the sequence"")
print(nums_dq.count(2))
print(""Number of 4 in the sequence"")
print(nums_dq.count(4))
","def count_times(deque, element):
    count = 0
    for i in deque:
        if i == element:
            count += 1
    return count

# driver code
deque = deque(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])
element = 'a'
print(count_times(deque, element))

# Output:
# 3
# 3
#"
51,Write a Pandas program to check the empty values of UFO (unidentified flying object) Dataframe. ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
print(df.isnull().sum())
","import pandas as pd

df = pd.DataFrame({""col1"": [1, 2, 3, 4, 5], ""col2"": [1, 2, 3, 4, 5], ""col3"": [1, 2, 3, 4, 5]})

print(df.empty)

# Output:
# True
# True
# True
# False

# Create a new DataFrame: df_empty
df_empty = pd"
52,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to make a gradient color on all the values of the said dataframe. ","import pandas as pd
import numpy as np
import seaborn as sns

np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
print(""Original array:"")
print(df)
print(""\nDataframe - Gradient color:"")
df.style.background_gradient()
","import pandas as pd

df = pd.DataFrame(
    {
        'First column': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        'Second column': [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
        'Third column': [21, 22, 23, 24, 25, 26, 27"
53,Write a Python program to find the difference between consecutive numbers in a given list. ,"def diff_consecutive_nums(nums):
    result = [b-a for a, b in zip(nums[:-1], nums[1:])]
    return result

nums1 = [1, 1, 3, 4, 4, 5, 6, 7]
print(""Original list:"")
print(nums1)
print(""Difference between consecutive numbers of the said list:"") 
print(diff_consecutive_nums(nums1))

nums2 = [4, 5, 8, 9, 6, 10]
print(""\nOriginal list:"")
print(nums2)
print(""Difference between consecutive numbers of the said list:"") 
print(diff_consecutive_nums(nums2))
","def diff(nums):
    diff = 0
    for i in range(1, len(nums)):
        diff += nums[i] - nums[i-1]
    return diff

nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(diff(nums))

""""""

def diff(nums):
    diff = 0
    for i in range(1, len(nums)"
54,Write a Pandas program to extract only words from a given column of a given DataFrame. ,"import pandas as pd
import re as re
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],
    'address': ['9910 Surrey Ave.','92 N. Bishop Ave.','9910 Golden Star Ave.', '102 Dunbar St.', '17 West Livingston Court']
})
print(""Original DataFrame:"")
print(df)

def search_words(text):
    result = re.findall(r'\b[^\d\W]+\b', text)
    return "" "".join(result)

df['only_words']=df['address'].apply(lambda x : search_words(x))
print(""\nOnly words:"")
print(df)
","import pandas as pd

# Read the data from the file
df = pd.read_csv('data.csv')

# Extract only the words from the column
words = df['text'].str.split(' ')

# Extract only the words from the column
words = words.str.get_dummies(sep=' ')

# Print the words extracted
print(words)

# Create a new column in the DataFrame called 'words'"
55,"Write a Python program to replace hour, minute, day, month, year and timezone with specified value of current datetime using arrow. ","import arrow
a = arrow.utcnow()
print(""Current date and time:"")
print(a)
print(""\nReplace hour and minute with 5 and 35:"")
print(a.replace(hour=5, minute=35))
print(""\nReplace day with 2:"")
print(a.replace(day=2))
print(""\nReplace year with 2021:"")
print(a.replace(year=2021))
print(""\nReplace month with 11:"")
print(a.replace(month=11)) 
print(""\nReplace timezone with 'US/Pacific:"")
print(a.replace(tzinfo='US/Pacific'))
","import datetime

current_datetime = datetime.datetime.now()

print(current_datetime)

current_datetime = current_datetime.replace(hour=20, minute=30, second=0, microsecond=0)

print(current_datetime)

current_datetime = current_datetime.replace(hour=20, minute=30, second=0, microsecond=0)"
56,Write a Python program that invoke a given function after specific milliseconds. ,"from time import sleep
import math
def delay(fn, ms, *args):
  sleep(ms / 1000)
  return fn(*args)
print(""Square root after specific miliseconds:"") 
print(delay(lambda x: math.sqrt(x), 100, 16))
print(delay(lambda x: math.sqrt(x), 1000, 100))
print(delay(lambda x: math.sqrt(x), 2000, 25100))
","def solution(ms):
    import time
    import random
    import math
    import os
    import sys
    import subprocess
    import json
    import datetime
    import time
    import requests
    import base64
    import hashlib
    import hmac
    import hashlib
    import base64
    import binascii
    import binascii
    import binascii
    import base64
    import binascii
    import base64
    import bin"
57,Write a Pandas program to find and drop the missing values from World alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nMissing values:"")
print(w_a_con.isnull())
print(""\nDropping the missing values:"")
print(w_a_con.dropna())
","import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/dataprofessor/data/master/glassdoor.csv')
df.head()

df.isnull().sum()

df.dropna(inplace=True)
df.isnull().sum()

df.head()

df.isnull().sum()

df.dropna(inplace=True)
df.isnull().sum"
58,Write a Python program to print all primes (Sieve_of_Eratosthenes) smaller than or equal to a specified number. ,"
def sieve_of_Eratosthenes(num):
    limitn = num+1
    not_prime_num = set()
    prime_nums = []

    for i in range(2, limitn):
        if i in not_prime_num:
            continue

        for f in range(i*2, limitn, i):
            not_prime_num.add(f)

        prime_nums.append(i)

    return prime_nums

print(sieve_of_Eratosthenes(100));
","def is_prime(n):
    if n == 1:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def Sieve_of_Eratosthenes(n):
    sieve = [True] * n
    m = int(math.sqrt(n))"
59,Write a Python program to create non-repeated combinations of Cartesian product of four given list of numbers. ,"import itertools as it
mums1 = [1, 2, 3, 4]
mums2 = [5, 6, 7, 8]
mums3 = [9, 10, 11, 12]
mums4 = [13, 14, 15, 16]
print(""Original lists:"")
print(mums1)
print(mums2)
print(mums3)
print(mums4)
print(""\nSum of the specified range:"")
for i in it.product([tuple(mums1)], it.permutations(mums2), it.permutations(mums3), it.permutations(mums4)):
    print(i)
","def combinations(lst, n):
    return [lst[i:i+n] for i in range(len(lst) - n + 1)]

lst = [1, 2, 3, 4, 5]
n = 4
print(combinations(lst, n))

""""""

# Solution:

def combinations(lst, n):
    return [lst[i:i+n] for i in range(len("
60,Write a Python program to find the values of length six in a given list using Lambda. ,"weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
days = filter(lambda day: day if len(day)==6 else '', weekdays)
for d in days:
  print(d)
","def solution(lst):
    return [len(lst), lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]

lst = [1, 2, 3, 4, 5, 6]
print(solution(lst))

""""""

def solution(lst):
    return [len(lst), lst[0], lst[1], lst[2], l"
61,Write a Pandas program to replace NaNs with the value from the previous row or the next row in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nReplacing NaNs with the value from the previous row (purch_amt):"")
df['purch_amt'].fillna(method='pad', inplace=True)
print(df)
print(""\nReplacing NaNs with the value from the next row (sale_amt):"")
df['sale_amt'].fillna(method='bfill', inplace=True)
print(df)
","import pandas as pd

df = pd.read_csv(""nato_phonetic_alphabet.csv"")

df.replace(""?"", -99999, inplace=True)
df.replace(""?"", """", inplace=True)
df.replace(""-99999"", """", inplace=True)
df.replace(""-9999"", """", inplace=True)
df.replace(""nan"", """", inplace="
62,Write a Python program to sort a list of elements using the merge sort algorithm. ,"def mergeSort(nlist):
    print(""Splitting "",nlist)
    if len(nlist)>1:
        mid = len(nlist)//2
        lefthalf = nlist[:mid]
        righthalf = nlist[mid:]

        mergeSort(lefthalf)
        mergeSort(righthalf)
        i=j=k=0       
        while i < len(lefthalf) and j < len(righthalf):
            if lefthalf[i] < righthalf[j]:
                nlist[k]=lefthalf[i]
                i=i+1
            else:
                nlist[k]=righthalf[j]
                j=j+1
            k=k+1

        while i < len(lefthalf):
            nlist[k]=lefthalf[i]
            i=i+1
            k=k+1

        while j < len(righthalf):
            nlist[k]=righthalf[j]
            j=j+1
            k=k+1
    print(""Merging "",nlist)

nlist = [14,46,43,27,57,41,45,21,70]
mergeSort(nlist)
print(nlist)
","def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = arr[:mid]
    right = arr[mid:]
    left = merge_sort(left)
    right = merge_sort(right)
    return merge(left, right)

def merge(left, right):
    result = []
    while len(left) > 0 and len(right) > 0:
        if"
63," latitude 37.423021 and longitude -122.083739), which you can use to place markers on a map, or position the map.","from lxml import html
import requests
response = requests.get('http://catalog.data.gov/dataset?q=&sort=metadata_created+desc')
doc = html.fromstring(response.text)
title = doc.cssselect('h3.dataset-heading')[0].text_content()
print(""The name of the most recently added dataset on data.gov:"")
print(title.strip())
","import math

def get_lat_long(lat, lon):
    """"""
    Returns the latitude and longitude of the given latitude and longitude.
    """"""
    # convert the latitude and longitude to radians
    lat = math.radians(lat)
    lon = math.radians(lon)

    # calculate the distance between the two points
    delta_lat = lat - 37.423021"
64,Write a NumPy program to create an array of ones and an array of zeros. ,"import numpy as np
print(""Create an array of zeros"")
x = np.zeros((1,2))
print(""Default type is float"")
print(x)
print(""Type changes to int"")
x = np.zeros((1,2), dtype = np.int)
print(x)
print(""Create an array of ones"")
y= np.ones((1,2)) 
print(""Default type is float"")
print(y)
print(""Type changes to int"")
y = np.ones((1,2), dtype = np.int)
print(y)
","import numpy as np

a = np.ones((3,3))
b = np.zeros((3,3))

print(a)
print(b)

# Solution:

# a = np.ones((3,3))
# b = np.zeros((3,3))

# print(a)
# print(b)

# # Solution:

# a = np.ones((3,3))
# b = np."
65,Write a Python program to find the value of the first element in the given list that satisfies the provided testing function. ,"def find(lst, fn):
  return next(x for x in lst if fn(x)) 
print(find([1, 2, 3, 4], lambda n: n % 2 == 1))
print(find([1, 2, 3, 4], lambda n: n % 2 == 0))
","def first_element_satisfying_function(lst):
    for i in range(len(lst)):
        if lst[i] == first_element_satisfying_function(lst[:i]):
            return lst[i]
    return -1

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(first_element_satisfying_function"
66,Write a Python program to remove duplicates from Dictionary. ,"student_data = {'id1': 
   {'name': ['Sara'], 
    'class': ['V'], 
    'subject_integration': ['english, math, science']
   },
 'id2': 
  {'name': ['David'], 
    'class': ['V'], 
    'subject_integration': ['english, math, science']
   },
 'id3': 
    {'name': ['Sara'], 
    'class': ['V'], 
    'subject_integration': ['english, math, science']
   },
 'id4': 
   {'name': ['Surya'], 
    'class': ['V'], 
    'subject_integration': ['english, math, science']
   },
}

result = {}

for key,value in student_data.items():
    if value not in result.values():
        result[key] = value

print(result)
","def remove_duplicates(d):
    new_dict = {}
    for key, value in d.items():
        if value not in new_dict:
            new_dict[value] = key
    return new_dict

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
print(remove_duplicates(d))

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
67,Write a Python program to find the list in a list of lists whose sum of elements is the highest. ,"num = [[1,2,3], [4,5,6], [10,11,12], [7,8,9]]
print(max(num, key=sum))
","def highest_sum(lst):
    sum = 0
    for i in lst:
        sum += i
    return sum

lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(highest_sum(lst))

""""""

def highest_sum(lst):
    sum = 0
    for i in lst:
        sum += i
    return sum

lst ="
68,Write a Python program to get the top stories from Google news. ,"import bs4
from bs4 import BeautifulSoup as soup
from urllib.request import urlopen

news_url=""https://news.google.com/news/rss""
Client=urlopen(news_url)
xml_page=Client.read()
Client.close()

soup_page=soup(xml_page,""xml"")
news_list=soup_page.findAll(""item"")
# Print news title, url and publish date
for news in news_list:
  print(news.title.text)
  print(news.link.text)
  print(news.pubDate.text)
  print(""-""*60)
","import requests
from bs4 import BeautifulSoup

url = ""https://news.google.com/topstories?hl=en-US&gl=US&ceid=US:en""

response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')

top_stories = soup.find_all('a', class_='CfkVc')

for story in top_stories:
    print(story.get('href'"
69,Write a Python program to check all values are same in a dictionary. ,"def value_check(students, n):
    result = all(x == n for x in students.values()) 
    return result
  
students = {'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}
print(""Original Dictionary:"")
print(students)
n = 12
print(""\nCheck all are "",n,""in the dictionary."")
print(value_check(students, n))
n = 10
print(""\nCheck all are "",n,""in the dictionary."")
print(value_check(students, n))
","def check_dict(d):
    for key in d:
        if d[key]!= d[key]:
            return False
    return True

print(check_dict({1:1, 2:2, 3:3, 4:4, 5:5}))

""""""

def check_dict(d):
    for key in d:
        if d[key]!= d[key]:
            return False
    return True

print(check_dict({1:1"
70,Write a Python program to compare two given lists and find the indices of the values present in both lists. ,"def matched_index(l1, l2):
    l2 = set(l2)
    return [i for i, el in enumerate(l1) if el in l2]

nums1 = [1, 2, 3, 4, 5 ,6]
nums2 = [7, 8, 5, 2, 10, 12]
print(""Original lists:"")
print(nums1)
print(nums2)
print(""Compare said two lists and get the indices of the values present in both lists:"")
print(matched_index(nums1, nums2))

nums1 = [1, 2, 3, 4, 5 ,6]
nums2 = [7, 8, 5, 7, 10, 12]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""Compare said two lists and get the indices of the values present in both lists:"")
print(matched_index(nums1, nums2))

nums1 = [1, 2, 3, 4, 15 ,6]
nums2 = [7, 8, 5, 7, 10, 12]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""Compare said two lists and get the indices of the values present in both lists:"")
print(matched_index(nums1, nums2))
","def compare(list1, list2):
    for i in range(len(list1)):
        if list1[i]!= list2[i]:
            return i
    return len(list1)

print(compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

""""""

""""""

""""""

""""""

"""""""
71,Write a Python program to create a 24-hour time format (HH:MM ) using 4 given digits. Display the latest time and do not use any digit more than once. ,"import itertools
def max_time(nums):
    for i in range(len(nums)):
        nums[i] *= -1
    nums.sort()
    for hr1, hr2, m1, m2 in itertools.permutations(nums):
        hrs = -(10*hr1 + hr2)
        mins = -(10*m1 + m2)
        if 60> mins >=0 and 24 > hrs >=0:
            result = ""{:02}:{:02}"".format(hrs, mins)
            break
    return result

nums = [1,2,3,4]
print(""Original array:"",nums)
print(""Latest time: "",max_time(nums))

nums = [1,2,4,5]
print(""\nOriginal array:"",nums)
print(""Latest time: "",max_time(nums))

nums = [2,2,4,5]
print(""\nOriginal array:"",nums)
print(""Latest time: "",max_time(nums))

nums = [2,2,4,3]
print(""\nOriginal array:"",nums)
print(""Latest time: "",max_time(nums))

nums = [0,2,4,3]
print(""\nOriginal array:"",nums)
print(""Latest time: "",max_time(nums))
","import datetime

def time_format(hour, minute, second):
    return f'{hour:02d}:{minute:02d}:{second:02d}'

def main():
    hour = int(input(""Enter the hour: ""))
    minute = int(input(""Enter the minute: ""))
    second = int(input(""Enter the second: ""))
    print("
72,"Sum a list of numbers. Write a Python program to sum the first number with the second and divide it by 2, then sum the second with the third and divide by 2, and so on. ","#Source: shorturl.at/csxLM
def test(list1):
    result =   [(x + y) / 2.0 for (x, y) in zip(list1[:-1], list1[1:])]
    return list(result)

nums =  [1,2,3,4,5,6,7]
print(""\nOriginal list:"")
print(nums)
print(""\nSum the said list of numbers:"")
print(test(nums))

nums =  [0,1,-3,3,7,-5,6,7,11]
print(""\nOriginal list:"")
print(nums)
print(""\nSum the said list of numbers:"")
print(test(nums))
","def sum_numbers(numbers):
    return sum(numbers) / len(numbers)

def sum_numbers_2(numbers):
    return sum(numbers) / len(numbers) / 2

def sum_numbers_3(numbers):
    return sum(numbers) / len(numbers) / 3

def sum_n"
73,Write a Python program to test whether all numbers of a list is greater than a certain number. ,"num = [2, 3, 4, 5]
print()
print(all(x > 1 for x in num))
print(all(x > 4 for x in num))
print()
","def is_greater(list, number):
    for i in range(len(list)):
        if list[i] > number:
            return False
    return True

print(is_greater([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7))

""""""

def is_greater(list, number):
    for i in range(len(list)):
        if list[i] > number:"
74,Write a NumPy program to test whether a given 2D array has null columns or not. ,"import numpy as np
print(""Original array:"")
nums = np.random.randint(0,3,(4,10))
print(nums)
print(""\nTest whether the said array has null columns or not:"")
print((~nums.any(axis=0)).any())
","import numpy as np

arr = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]])

print(arr.shape)

if arr.shape[0] == arr.shape[1]:
    print"
75,Write a NumPy program to convert angles from degrees to radians for all elements in a given array. ,"import numpy as np
x = np.array([-180.,  -90.,   90.,  180.])
r1 = np.radians(x)
r2 = np.deg2rad(x)
assert np.array_equiv(r1, r2)
print(r1)
","import numpy as np

def convert_degrees_to_radians(degrees):
    radians = degrees * np.pi / 180
    return radians

def convert_radians_to_degrees(radians):
    degrees = radians * 180 / np.pi
    return degrees

def main():
    degrees = int(input(""Enter the degrees: ""))
    radians = convert_degrees_to_radians("
76,Write a Python program to find all anagrams of a string in a given list of strings using lambda. ,"from collections import Counter  
texts = [""bcda"", ""abce"", ""cbda"", ""cbea"", ""adcb""]
str = ""abcd""
print(""Orginal list of strings:"")
print(texts) 
result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) 
print(""\nAnagrams of 'abcd' in the above string: "")
print(result)
","def anagrams(str1, str2):
    return sorted(str1) == sorted(str2)

print(anagrams('abba', 'bba'))

""""""

def anagrams(str1, str2):
    return sorted(str1) == sorted(str2)

print(anagrams('abba', 'bba'))

""""""

def anagrams(str1, str2):
    return sorted"
77,rogram to display the name of the most recently added dataset on data.gov. ,"from urllib.request import urlopen
from bs4 import BeautifulSoup
html = urlopen('http://www.example.com/')
bsh = BeautifulSoup(html.read(), 'html.parser')
print(bsh.h1)
","import sys

def main():
    # Read the file into a variable called data.
    data = open('data.gov.txt', 'r')
    # Read the file into a variable called name.
    name = data.readline()
    # Read the file into a variable called last_name.
    last_name = data.readline()
    # Read the file into a variable called email.
    email = data.readline()
    # Read the file into a variable called"
78,Write a NumPy program to extract all numbers from a given array which are less and greater than a specified number. ,"import numpy as np  
nums = np.array([[5.54, 3.38, 7.99],
              [3.54, 4.38, 6.99],
              [1.54, 2.39, 9.29]])
print(""Original array:"")
print(nums)
n = 5
print(""\nElements of the said array greater than"",n)
print(nums[nums > n])
n = 6
print(""\nElements of the said array less than"",n)
print(nums[nums < n])
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr[arr < 5])

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr[arr > 5])

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8"
79,Write a NumPy program to extract second and fourth elements of the second and fourth rows from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: Second and fourth elements of the second and fourth rows "")
print(arra_data[1::2, 1::2])
","import numpy as np

arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12],
                [13, 14, 15, 16]])

print(arr[2:4, 2:4])

# Output:
[[5 6]
 [7 8]
 [9 10]]

# Output:
[[1 2 3"
80,Write a NumPy program to split a given array into multiple sub-arrays vertically (row-wise). ,"import numpy as np    
print(""\nOriginal arrays:"")
x = np.arange(16.0).reshape(4, 4)
print(x)
new_array1 =  np.vsplit(x, 2)
print(""\nSplit an array into multiple sub-arrays vertically:"")
print(new_array1)
","import numpy as np

arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

# vertical split
arr = arr.reshape(3, 4)

# horizontal split
arr = arr.reshape(4, 3)

# vertical split
arr = arr.reshape(3, 4)

# horizontal split
arr = arr.reshape("
81,Write a Python program to count number of substrings from a given string of lowercase alphabets with exactly k distinct (given) characters. ,"def count_k_dist(str1, k): 
	str_len = len(str1) 
	
	result = 0

	ctr = [0] * 27

	for i in range(0, str_len): 
		dist_ctr = 0

		ctr = [0] * 27

		for j in range(i, str_len): 
			
			if(ctr[ord(str1[j]) - 97] == 0): 
				dist_ctr += 1

			ctr[ord(str1[j]) - 97] += 1

			if(dist_ctr == k): 
				result += 1
			if(dist_ctr > k): 
				break

	return result 

str1 = input(""Input a string (lowercase alphabets):"")
k = int(input(""Input k: ""))
print(""Number of substrings with exactly"", k, ""distinct characters : "", end = """") 
print(count_k_dist(str1, k))
","def count_substring(string, k):
    count = 0
    for i in range(len(string)):
        for j in range(i, len(string)):
            if string[i:j+1] == string[i:j+1][::-1]:
                count += 1
    return count

print(count_substring(""ABAB"", 2))

""""""

def count_"
82,Write a Python program to create a list reflecting the run-length encoding from a given list of integers or a given list of characters. ,"from itertools import groupby
def encode_list(s_list):
    return [[len(list(group)), key] for key, group in groupby(s_list)]
n_list = [1,1,2,3,4,4.3,5, 1]
print(""Original list:"") 
print(n_list)
print(""\nList reflecting the run-length encoding from the said list:"")
print(encode_list(n_list))
n_list = 'automatically'
print(""\nOriginal String:"") 
print(n_list)
print(""\nList reflecting the run-length encoding from the said string:"")
print(encode_list(n_list))
","def run_length_encoding(list):
    # Your code here
    pass

# Test your code
# run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,"
83,Write a Pandas program to check whether only numeric values present in a given column of a DataFrame.,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Company','Company a001', '2055', 'abcd', '123345'],
    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})
	
print(""Original DataFrame:"")
print(df)
print(""\nNumeric values present in company_code column:"")
df['company_code_is_digit'] = list(map(lambda x: x.isdigit(), df['company_code']))
print(df)

","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [1, 2, 3, 4, 5]})
print(df.dtypes)

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [1, 2, 3, 4, 5]})
# print(df"
84,Write a Python program to check if a specific Key and a value exist in a dictionary. ,"def test(dictt, key, value):
   if any(sub[key] == value for sub in dictt):
       return True
   return False

students = [
        {'student_id': 1, 'name': 'Jean Castro', 'class': 'V'}, 
        {'student_id': 2, 'name': 'Lula Powell', 'class': 'V'},
        {'student_id': 3, 'name': 'Brian Howell', 'class': 'VI'}, 
        {'student_id': 4, 'name': 'Lynne Foster', 'class': 'VI'}, 
        {'student_id': 5, 'name': 'Zachary Simon', 'class': 'VII'}
        ]


print(""\nOriginal dictionary:"")
print(students)
print(""\nCheck if a specific Key and a value exist in the said dictionary:"")
print(test(students,'student_id', 1))
print(test(students,'name', 'Brian Howell'))
print(test(students,'class', 'VII'))
print(test(students,'class', 'I'))
print(test(students,'name', 'Brian Howelll'))
print(test(students,'student_id', 11))
","def check_if_key_exist(dictionary, key):
    if key in dictionary:
        return True
    else:
        return False

dictionary = {'a': 1, 'b': 2, 'c': 3}
print(check_if_key_exist(dictionary, 'a'))
print(check_if_key_exist(dictionary, 'd'))
print(check_if_key_exist(dictionary, 'e'))"
85,Write a Pandas program to split a given dataset using group by on multiple columns and drop last n rows of from each group. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3002,3001,3004,3003,3002,3003,3001],
'salesman_id':[5002,5003,5001,5003,5002,5001,5001,5003,5003,5002,5003,5001]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nSplit the said data on 'salesman_id', 'customer_id' wise:"")
result = df.groupby(['salesman_id', 'customer_id'])
for name,group in result:
    print(""\nGroup:"")
    print(name)
    print(group)
n = 2
#result1 = df.groupby(['salesman_id', 'customer_id']).tail(n).index, axis=0)
print(""\nDroping last two records:"")    
result1 = df.drop(df.groupby(['salesman_id', 'customer_id']).tail(n).index, axis=0)
print(result1)
","import pandas as pd

df = pd.read_csv(""https://github.com/datasets/csv/raw/master/data/finance.csv"")

df.head()

df.groupby(['year', 'quarter']).size().unstack().plot(kind='bar', stacked=True)

df.groupby(['year', 'quarter']).size().unstack().plot(kind='bar', stacked"
86,"Write a NumPy program to find point by point distances of a random vector with shape (10,2) representing coordinates. ","import numpy as np
a= np.random.random((10,2))
x,y = np.atleast_2d(a[:,0], a[:,1])
d = np.sqrt( (x-x.T)**2 + (y-y.T)**2)
print(d)
","import numpy as np

x = np.random.rand(10,2)
print(x)

# Solution:

# x = np.random.rand(10,2)
# print(x)
# print(x[0,0])
# print(x[0,1])
# print(x[1,0])
# print(x[1,1])

# Solution:

# x = np."
87,Write a Python program to create the next bigger number by rearranging the digits of a given number. ,"def rearrange_bigger(n):
    #Break the number into digits and store in a list
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False
n = 12
print(""Original number:"",n)
print(""Next bigger number:"",rearrange_bigger(n))

n = 10
print(""\nOriginal number:"",n)
print(""Next bigger number:"",rearrange_bigger(n))
      
n = 201
print(""\nOriginal number:"",n)
print(""Next bigger number:"",rearrange_bigger(n))
n = 102
print(""\nOriginal number:"",n)
print(""Next bigger number:"",rearrange_bigger(n))
n = 445
print(""\nOriginal number:"",n)
print(""Next bigger number:"",rearrange_bigger(n))
","def next_bigger(n):
    n = str(n)
    n = n[::-1]
    n = int(n)
    return n

print(next_bigger(123))
print(next_bigger(1234))
print(next_bigger(12345))
print(next_bigger(1234567890))

""""""

def next_bigger(n):
    n = str(n)"
88,Write a Python program to filter a dictionary based on values. ,"marks = {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}
print(""Original Dictionary:"")
print(marks)
print(""Marks greater than 170:"")
result = {key:value for (key, value) in marks.items() if value >= 170}
print(result)
","def filter_dict(d, key, value):
    return d[key] == value

d = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}

print(filter_dict(d, 'a', 2))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
89,Write a Python program to count the frequency of the elements of a given unordered list. ,"from itertools import groupby

uno_list = [2,1,3,8,5,1,4,2,3,4,0,8,2,0,8,4,2,3,4,2]
print(""Original list:"")
print(uno_list)
uno_list.sort()
print(uno_list)
print(""\nSort the said unordered list:"")
print(uno_list)
print(""\nFrequency of the elements of the said unordered list:"")
result = [len(list(group)) for key, group in groupby(uno_list)]
print(result)
","def count_frequency(lst):
    count = 0
    for i in lst:
        count += 1
    return count

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(count_frequency(lst))

""""""

# Solution 1

def count_frequency(lst):
    count = 0
    for i in lst:
        count += 1
    return count

l"
90,Write a Pandas program to find out the alcohol consumption details in the year '1987' or '1989' from the world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nThe world alcohol consumption details where year is 1987 or 1989:"")
print((w_a_con[(w_a_con['Year']==1987) | (w_a_con['Year']==1989)]).head(10))
","import pandas as pd

df = pd.read_csv('world_alcohol_consumption.csv')

df.head()

df.columns

df.columns = ['Year', 'World_alcohol_consumption']

df.head()

df.columns

df.columns = ['Year', 'World_alcohol_consumption', 'Alcohol_consumption']

df.head"
91,Write a Python program to count the number of even and odd numbers from a series of numbers. ,"numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9) # Declaring the tuple
count_odd = 0
count_even = 0
for x in numbers:
        if not x % 2:
    	     count_even+=1
        else:
    	     count_odd+=1
print(""Number of even numbers :"",count_even)
print(""Number of odd numbers :"",count_odd)
","def even_odd(n):
    even = 0
    odd = 0
    for i in range(1, n+1):
        if i % 2 == 0:
            even += 1
        else:
            odd += 1
    return even, odd

n = int(input(""Enter the number of numbers: ""))
even, odd = even_odd(n)
print(""Even numbers: "", even)
print(""Odd numbers: "", odd)

"""""""
92,Write a Python code to send some sort of data in the URL's query string. ,"import requests
payload = {'key1': 'value1', 'key2': 'value2'}
print(""Parameters: "",payload)
r = requests.get('https://httpbin.org/get', params=payload)
print(""Print the url to check the URL has been correctly encoded or not!"")
print(r.url)
print(""\nPass a list of items as a value:"")
payload = {'key1': 'value1', 'key2': ['value2', 'value3']}
print(""Parameters: "",payload)
r = requests.get('https://httpbin.org/get', params=payload)
print(""Print the url to check the URL has been correctly encoded or not!"")
print(r.url)
","import urllib.request

url = ""http://www.google.com""
querystring = ""?q=http%3A%2F%2Fwww.google.com""

with urllib.request.urlopen(url + querystring) as response:
    print(response.read().decode())

""""""

import urllib.request
import urllib.parse

url = ""http://www.google.com""
querystring = """
93,Write a Pandas program to split the following dataframe into groups and calculate monthly purchase amount. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['05-10-2012','09-10-2012','05-10-2012','08-17-2012','10-09-2012','07-27-2012','10-09-2012','10-10-2012','10-10-2012','06-17-2012','07-08-2012','04-25-2012'],
'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
df['ord_date']= pd.to_datetime(df['ord_date']) 
print(""\nMonth wise purchase amount:"")
result = df.set_index('ord_date').groupby(pd.Grouper(freq='M')).agg({'purch_amt':sum})
print(result)
","df = pd.DataFrame({'Customer ID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'Monthly Purchase Amount': [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]})

df.groupby('Monthly Purchase Amount').sum()

df.groupby('Monthly Purchase Amount').sum().plot(kind='bar')

df.groupby('Monthly Purchase Amount"
94,Write a Pandas program to add leading zeros to the character column in a pandas series and makes the length of the field to 8 digit. ,"import pandas as pd
nums = {'amount': ['10', '250', '3000', '40000', '500000']}
print(""Original dataframe:"")
df = pd.DataFrame(nums)
print(df)
print(""\nAdd leading zeros:"")
df['amount'] = list(map(lambda x: x.zfill(10), df['amount']))
print(df)
","import pandas as pd

series = pd.Series(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'])

series"
95,Write a NumPy program to compute the reciprocal for all elements in a given array. ,"import numpy as np
x = np.array([1., 2., .2, .3])
print(""Original array: "")
print(x)
r1 = np.reciprocal(x)
r2 = 1/x
assert np.array_equal(r1, r2)
print(""Reciprocal for all elements of the said array:"")
print(r1)
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
print(np.reciprocal(a))

""""""

# Solution

# Python code to solve the following problem:

# import numpy as np

# a = np.array([1, 2, 3, 4, 5])
# print(np.reciprocal(a))

# Python code to solve the following problem:

# import numpy as np"
96,Write a NumPy program to calculate the QR decomposition of a given matrix. ,"import numpy as np
m = np.array([[1,2],[3,4]])
print(""Original matrix:"")
print(m)
result =  np.linalg.qr(m)
print(""Decomposition of the said matrix:"")
print(result)
","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

Q, R = np.linalg.qr(A)

print(Q)
print(R)

# Output:
[[ 1.  2.  3.]
 [ 4.  5.  6.]
 [ 7.  8.  9.]]

[[ 1.  2.  3.]"
97,Write a NumPy program to extract first and second elements of the first and second rows from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: First and second elements of the first and second rows "")
print(arra_data[0:2, 0:2])
","import numpy as np

a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(a[0, 0])
print(a[1, 1])
print(a[2, 2])
print(a[3, 3])

# Output:
# 5
# 6
# 7
# 8

# Input:"
98,Write a Python program to compute sum of digits of a given string. ,"def sum_digits_string(str1):
    sum_digit = 0
    for x in str1:
        if x.isdigit() == True:
            z = int(x)
            sum_digit = sum_digit + z

    return sum_digit
     
print(sum_digits_string(""123abcd45""))
print(sum_digits_string(""abcd1234""))
","def sum_digits(s):
    return sum([int(i) for i in s if i.isdigit()])

print(sum_digits(""123456789""))

""""""

def sum_digits(s):
    return sum([int(i) for i in s if i.isdigit()])

print(sum_digits(""123456789""))"
99,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to make a gradient color mapping on a specified column. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
print(""Original array:"")
print(df)
print(""\nDataframe - Gradient color:"")
df.style.background_gradient(subset=['C'])
","import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randn(10, 4), columns=['a', 'b', 'c', 'd'])

# Create a new column named 'color' with a random value from the 'a' column.
df['color'] = np.random.randint(0, 4, size=len(df))

# Create"
100,Write a Python program to find the nth Hamming number. User itertools module. ,"import itertools
from heapq import merge

def nth_hamming_number(n):
    def num_recur():
        last = 1
        yield last
        x, y, z = itertools.tee(num_recur(), 3)
        for n in merge((2 * i for i in x), (3 * i for i in y), (5 * i for i in z)):
            if n != last:
                yield n
                last = n
    result =  itertools.islice(num_recur(), n)
    return list(result)[-1]

print(nth_hamming_number(8))
print(nth_hamming_number(14))
print(nth_hamming_number(17))
","def hamming(n):
    for i in range(n):
        print(i)

n = int(input(""Enter the number of elements in the array: ""))

hamming(n)

""""""

# Solution

def hamming(n):
    for i in range(n):
        print(i)

n = int(input(""Enter the number of elements in the array: ""))

for i in range(n):
    print"
101,Write a Python program to find the last occurrence of a specified item in a given list. ,"def last_occurrence(l1, ch):
    return ''.join(l1).rindex(ch)

chars = ['s','d','f','s','d','f','s','f','k','o','p','i','w','e','k','c']
print(""Original list:"")
print(chars)
ch = 'f'
print(""Last occurrence of"",ch,""in the said list:"")
print(last_occurrence(chars, ch))
ch = 'c'
print(""Last occurrence of"",ch,""in the said list:"")
print(last_occurrence(chars, ch))
ch = 'k'
print(""Last occurrence of"",ch,""in the said list:"")
print(last_occurrence(chars, ch))
ch = 'w'
print(""Last occurrence of"",ch,""in the said list:"")
print(last_occurrence(chars, ch)) 
","def last_occurrence(lst, item):
    for i in range(len(lst)):
        if lst[i] == item:
            return i
    return -1

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
item = 5
print(last_occurrence(lst, item))

""""""

def last_occurrence(lst, item):
    for i in range"
102,Write a Python program to convert Python dictionary object (sort by key) to JSON data. Print the object members with indent level 4. ,"import json
j_str = {'4': 5, '6': 7, '1': 3, '2': 4}
print(""Original String:"")
print(j_str)
print(""\nJSON data:"")
print(json.dumps(j_str, sort_keys=True, indent=4))
","import json

d = {'a': 1, 'b': 2, 'c': 3}

print(json.dumps(d, indent=4))

# Output:

# {'a': 1, 'b': 2, 'c': 3}

# {'a': 1, 'b': 2, 'c': 3}

# {'a': 1, 'b': 2, 'c': 3}"
103,Write a Python program to create the combinations of 3 digit combo. ,"numbers = []
for num in range(1000):
  num=str(num).zfill(3)
print(num)
numbers.append(num)
","def combinations(n, k):
    if n == 0:
        return []
    if n == 1:
        return [[1]]
    if n == 2:
        return [[1, 1]]
    if n == 3:
        return [[1, 1, 1]]
    if n == 4:
        return [[1, 1, 1, 1]]
    if n == 5:
        return [[1, 1, 1, 1, 1]]
    if n == 6:
        return [["
104,Write a Python program to create an iterator to get specified number of permutations of elements. ,"import itertools as it
def permutations_data(iter, length):
    return it.permutations(iter, length)
#List
result = permutations_data(['A','B','C','D'], 3)
print(""\nIterator to get specified number of permutations of elements:"")
for i in result:
    print(i)

#String
result = permutations_data(""Python"", 2)
print(""\nIterator to get specified number of permutations of elements:"")
for i in result:
    print(i)
","def permutations(nums):
    if len(nums) == 1:
        return 1
    else:
        return sum(permutations(nums[1:]))

print(permutations([1, 2, 3]))

""""""

# Solution 1

def permutations(nums):
    if len(nums) == 1:
        return 1
    else:
        return sum(permutations(nums[1:]))

print(perm"
105,Write a Python function to get a string made of its first three characters of a specified string. If the length of the string is less than 3 then return the original string. ,"def first_three(str):
	return str[:3] if len(str) > 3 else str

print(first_three('ipy'))
print(first_three('python'))
print(first_three('py'))
","def first_three(str):
    return str[:3]

print(first_three(""abcdef""))

""""""

def first_three(str):
    return str[:3]

print(first_three(""abcdef""))"
106,Write a Python program to get hourly datetime between two hours. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nString representing the date, controlled by an explicit format string:"")
print(arrow.utcnow().strftime('%d-%m-%Y %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%m-%d %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%d-%m %H:%M:%S'))
","hour1 = datetime.datetime.strptime('10:00', '%H:%M')
hour2 = datetime.datetime.strptime('10:30', '%H:%M')

print(hour1.strftime('%H:%M'))
print(hour2.strftime('%H:%M'))

# Solution:

# hour1 = datetime.datetime.strptime('10:00', '%H:%M')"
107,Write a Python program to display formatted text (width=50) as output. ,"import textwrap
sample_text = '''
  Python is a widely used high-level, general-purpose, interpreted,
  dynamic programming language. Its design philosophy emphasizes
  code readability, and its syntax allows programmers to express
  concepts in fewer lines of code than possible in languages such
  as C++ or Java.
  '''
print()
print(textwrap.fill(sample_text, width=50))
print()
","def format_text(width=50):
    """"""
    Function to format text as output.
    """"""
    # Create a variable to store the text
    text = ""This is a test string""
    # Create a variable to store the width
    width = 50
    # Create a variable to store the text
    text = ""This is a test string""
    # Create a variable to store the width
    width = 50
    # Create a variable to store the text
    text = """
108,Write a Python function to find the maximum and minimum numbers from a sequence of numbers. ,"def max_min(data):
  l = data[0]
  s = data[0]
  for num in data:
    if num> l:
      l = num
    elif num< s:
        s = num
  return l, s

print(max_min([0, 10, 15, 40, -5, 42, 17, 28, 75]))
","def max_min(numbers):
    if len(numbers) == 0:
        return None
    if len(numbers) == 1:
        return numbers[0], numbers[0]
    if len(numbers) == 2:
        return numbers[0], numbers[1]
    if len(numbers) == 3:
        return numbers[0], numbers[1], numbers[2]
    if len(numbers) == 4:
        return numbers[0"
109,Write a Pandas program to create a sequence of durations increasing by an hour. ,"import pandas as pd
date_range = pd.timedelta_range(0, periods=49, freq='H')
print(""Hourly range of perods 49:"")
print(date_range)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({""Duration"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,"
110,Write a NumPy program to sort the specified number of elements from beginning of a given array. ,"import numpy as np
nums =  np.random.rand(10)
print(""Original array:"")
print(nums)
print(""\nSorted first 5 elements:"")
print(nums[np.argpartition(nums,range(5))])
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr.sort()

print(arr)

arr.sort(reverse=True)

print(arr)

arr.sort()

print(arr)

arr.sort(key=lambda x: x % 2)

print(arr)

arr.sort(key=lambda x: x % 2"
111,"Write a Python program to extract year, month, date and time using Lambda. ","import datetime
now = datetime.datetime.now()
print(now)
year = lambda x: x.year
month = lambda x: x.month
day = lambda x: x.day
t = lambda x: x.time()
print(year(now))
print(month(now))
print(day(now))
print(t(now))
","def extract_year(date):
    return date.split('-')[0]

def extract_month(date):
    return date.split('-')[1]

def extract_date(date):
    return date.split('-')[2]

def extract_time(date):
    return date.split('-')[3]

def solution(date):
    date = date.split('-')
    return extract_year(date[0]),"
112,"Write a Python program to find all the common characters in lexicographical order from two given lower case strings. If there are no common letters print ""No common characters"". ","from collections import Counter 
def common_chars(str1,str2): 	
	d1 = Counter(str1) 
	d2 = Counter(str2) 
	common_dict = d1 & d2 
	if len(common_dict) == 0: 
		return ""No common characters.""

	# list of common elements 
	common_chars = list(common_dict.elements()) 
	common_chars = sorted(common_chars) 

	return ''.join(common_chars) 

str1 = 'Python'
str2 = 'PHP'
print(""Two strings: ""+str1+' : '+str2)
print(common_chars(str1, str2))
str1 = 'Java'
str2 = 'PHP'
print(""Two strings: ""+str1+' : '+str2)
print(common_chars(str1, str2))
","def common_char(a, b):
    common_char = []
    for i in range(len(a)):
        if a[i] in b:
            common_char.append(a[i])
    return common_char

a = ""abcd""
b = ""abcd""
print(common_char(a, b))

""""""

# Solution:

def"
113,Write a Python program to remove a newline in Python. ,"str1='Python Exercises\n'
print(str1)
print(str1.rstrip())
","import sys

if __name__ == '__main__':
    if len(sys.argv) > 1:
        print('Argument passed:', sys.argv[1])
    else:
        print('No argument passed.')"
114,"Write a Pandas program to extract the column labels, shape and data types of the dataset (titanic.csv). ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
print(""List of columns:"")
print(df.columns)
print(""\nShape of the Dataset:"")
print(df.shape)
print(""\nData types of the Dataset:"")
print(df.dtypes)
","import pandas as pd

# Read the data into a pandas DataFrame: df
df = pd.read_csv('titanic.csv')

# Print the head of the DataFrame
print(df.head())

# Print the column labels of the DataFrame
print(df.columns)

# Print the shape of the DataFrame
print(df.shape)

# Print the data types of the DataFrame
print"
115,Write a Pandas program to replace arbitrary values with other values in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['A','B', 'C', 'D', 'A'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})

print(""Original DataFrame:"")
print(df)

print(""\nReplace A with c:"")
df = df.replace(""A"", ""C"")
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

df['col3'] = df['col1'] * 2

print(df)

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30"
116,"Write a NumPy program to calculate mean across dimension, in a 2D numpy array. ","import numpy as np
x = np.array([[10, 30], [20, 60]])
print(""Original array:"")
print(x)
print(""Mean of each column:"")
print(x.mean(axis=0))
print(""Mean of each row:"")
print(x.mean(axis=1))
","import numpy as np

x = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
print(x.mean(axis=0))

# Output:
# [2.5 3.5 4.5 5.5]

# Hint: To calculate mean across the rows, use np.mean(x, axis=0).

# Hint: To calculate mean across the columns, use np."
117,"Write a Pandas program to create a Pivot table and find survival rate by gender, age of the different categories of various classes. Add the fare as a dimension of columns and partition fare column into 2 categories based on the values present in fare columns. ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
fare = pd.qcut(df['fare'], 2)
age = pd.cut(df['age'], [0, 10, 30, 60, 80])
result = df.pivot_table('survived', index=['sex', age], columns=[fare, 'pclass'])
print(result)
","# Import pandas
import pandas as pd

# Read the data
df = pd.read_csv('https://raw.githubusercontent.com/datasets/covid-19-data/master/data%2Fvaccinations%2Fus-states.csv')

# Create a pivot table
df_p"
118,Write a Python program to retrieve the value of the nested key indicated by the given selector list from a dictionary or list. ,"from functools import reduce 
from operator import getitem
def get(d, selectors):
  return reduce(getitem, selectors, d) 
users = {
  'freddy': {
    'name': {
      'first': 'Fateh',
      'last': 'Harwood' 
    },
    'postIds': [1, 2, 3]
  }
}
print(get(users, ['freddy', 'name', 'last']))
print(get(users, ['freddy', 'postIds', 1]))
","def get_value(d, selector):
    for key in d:
        if selector in d[key]:
            return d[key][selector]

print(get_value({'a': {'b': {'c': 'd'}}, 'c': 'd'}, 'b'))

""""""

def get_value(d, selector):
    for key in d:
        if selector in d[key]:
            return"
119,Write a Python program to sort unsorted numbers using Recursive Bubble Sort. ,"#Ref.https://bit.ly/3oneU2l
def bubble_sort(list_data: list, length: int = 0) -> list:
    length = length or len(list_data)
    swapped = False
    for i in range(length - 1):
        if list_data[i] > list_data[i + 1]:
            list_data[i], list_data[i + 1] = list_data[i + 1], list_data[i]
            swapped = True

    return list_data if not swapped else bubble_sort(list_data, length - 1)
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Insertion Sort the said list becomes:"")
bubble_sort(nums, len(nums))
print(nums)
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Bubble Sort the said list becomes:"")
bubble_sort(nums, len(nums))
print(nums)
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Bubble Sort the said list becomes:"")
bubble_sort(nums, len(nums))
print(nums)
nums = ['z','a','y','b','x','c']
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Bubble Sort the said list becomes:"")
bubble_sort(nums, len(nums))
print(nums)
","def bubbleSort(arr):
    for i in range(len(arr)):
        for j in range(len(arr)-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

arr = [6, 4, 8, 2, 5, 1, 9, 7, 3]
print(bubbleSort(arr))

""""""

# Time Complex"
120,Write a Python program to count the values associated with key in a dictionary. ,"student = [{'id': 1, 'success': True, 'name': 'Lary'},
 {'id': 2, 'success': False, 'name': 'Rabi'},
 {'id': 3, 'success': True, 'name': 'Alex'}]
print(sum(d['id'] for d in student))
print(sum(d['success'] for d in student))
","def count_key(d, key):
    count = 0
    for i in d:
        if i == key:
            count += 1
    return count

d = {'a': 1, 'b': 2, 'c': 3}
print(count_key(d, 'a'))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
121,"Write a NumPy program to multiply an array of dimension (2,2,3) by an array with dimensions (2,2). ","import numpy as np
nums1 = np.ones((2,2,3))
nums2 = 3*np.ones((2,2))
print(""Original array:"")
print(nums1)
new_array = nums1 * nums2[:,:,None]
print(""\nNew array:"")
print(new_array)
","import numpy as np

a = np.array([[1,2,3],[4,5,6]])
b = np.array([[7,8,9],[10,11,12]])

c = a*b
print(c)

Solution:

[[[1 2 3]
 [4 5 6]]
 [[7 8 9]
 [10 11 12]]]

[[[1 4 5]"
122,Write a NumPy program to swap rows and columns of a given array in reverse order. ,"import numpy as np
nums = np.array([[[1, 2, 3, 4],
               [0, 1, 3, 4],
               [90, 91, 93, 94],
               [5, 0, 3, 2]]])
print(""Original array:"")
print(nums)
print(""\nSwap rows and columns of the said array in reverse order:"")
new_nums = print(nums[::-1, ::-1])
print(new_nums)
","import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr_swapped = np.swapaxes(arr, 0, 1)

print(arr_swapped)

# Output:
[[1 4]
 [2 5]
 [3 6]
 [7 8]
 [4 9]]

# Task

# You are given an array of size N"
123,"Write a NumPy program to create an 1-D array of 20 elements. Now create a new array of shape (5, 4) from the said array, then restores the reshaped array into a 1-D array. ","import numpy as np
array_nums = np.arange(0, 40, 2)
print(""Original array:"")
print(array_nums)
print(""\nNew array of shape(5, 4):"")
new_array = array_nums.reshape(5, 4)
print(new_array) 
print(""\nRestore the reshaped array into a 1-D array:"")
print(new_array.flatten())
","import numpy as np

arr = np.arange(20)
print(arr)

arr = arr.reshape(5, 4)
print(arr)

arr = arr.reshape(5, 4)
print(arr)

arr = arr.reshape(5, 4)
print(arr)

arr = arr."
124,Write a Python program to sort a list of elements using Tree sort. ,"# License https://bit.ly/2InTS3W
# Tree_sort algorithm
# Build a BST and in order traverse.
class node():
    # BST data structure
    def __init__(self, val):
        self.val = val
        self.left = None 
        self.right = None 
    
    def insert(self,val):
        if self.val:
            if val < self.val:
                if self.left is None:
                    self.left = node(val)
                else:
                    self.left.insert(val)
            elif val > self.val:
                if self.right is None:
                    self.right = node(val)
                else:
                    self.right.insert(val)
        else:
            self.val = val

def inorder(root, res):
    # Recursive travesal 
    if root:
        inorder(root.left,res)
        res.append(root.val)
        inorder(root.right,res)

def treesort(arr):
    # Build BST
    if len(arr) == 0:
        return arr
    root = node(arr[0])
    for i in range(1,len(arr)):
        root.insert(arr[i])
    # Traverse BST in order. 
    res = []
    inorder(root,res)
    return res

print(treesort([7,1,5,2,19,14,17]))
","def sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [10, 4, 8, 2, 5, 1, 9, 7, 6]
print(sort(arr))

""""""

def sort(arr"
125,"Write a NumPy program to create an element-wise comparison (equal, equal within a tolerance) of two given arrays. ","import numpy as np
x = np.array([72, 79, 85, 90, 150, -135, 120, -10, 60, 100])
y = np.array([72, 79, 85, 90, 150, -135, 120, -10, 60, 100.000001])
print(""Original numbers:"")
print(x)
print(y)
print(""Comparison - equal:"")
print(np.equal(x, y))
print(""Comparison - equal within a tolerance:"")
print(np.allclose(x, y))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([1, 2, 3, 4, 5])

print(a == b)

# Output:
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True"
126,Write a Pandas program to split a given dataframe into groups with multiple aggregations. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s001'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])
print(""Original DataFrame:"")
print(df)
print(""\nGroup by with multiple aggregations:"")
result = df.groupby(['school_code','class']).agg({'height': ['max', 'mean'],
                                 'weight': ['sum','min','count']})
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'col3': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

# Create a groupby object
groupby_object"
127,Write a NumPy program to find a matrix or vector norm. ,"import numpy as np
v = np.arange(7)
result = np.linalg.norm(v)
print(""Vector norm:"")
print(result)
m = np.matrix('1, 2; 3, 4') 
result1 = np.linalg.norm(m)
print(""Matrix norm:"")
print(result1)
","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(np.linalg.norm(A))

# Output:
# array([[ 5.       ,  7.       ,  9.        ],
#        [10.       , 11.       , 12.        ],
#        [13.       , 14.       , 15.        ]])

# Python code to solve the following"
128,Write a Python program to delete the first item from a singly linked list. ,"class Node:
    # Singly linked node
    def __init__(self, data=None):
        self.data = data
        self.next = None
class singly_linked_list:
    def __init__(self):
        # Createe an empty list
        self.tail = None
        self.head = None
        self.count = 0

    def append_item(self, data):
        #Append items on the list
        node = Node(data)
        if self.head:
            self.head.next = node
            self.head = node
        else:
            self.tail = node
            self.head = node
        self.count += 1
    
    def delete_item(self, data):
        # Delete an item from the list
        current = self.tail
        prev = self.tail
        while current:
            if current.data == data:
                if current == self.tail:
                    self.tail = current.next
                else:
                    prev.next = current.next
                self.count -= 1
                return
            prev = current
            current = current.next
    def iterate_item(self):
        # Iterate the list.
        current_item = self.tail
        while current_item:
            val = current_item.data
            current_item = current_item.next
            yield val

items = singly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')

print(""Original list:"")
for val in items.iterate_item():
    print(val)

print(""\nAfter removing the first item from the list:"")
items.delete_item('PHP')
for val in items.iterate_item():
    print(val)
","# Node class
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# Linked List class
class LinkedList:
    def __init__(self):
        self.head = None
    
    # Function to insert a new node at the beginning
    def push(self, new_data):
        new_node = Node(new_data)
        new_node.next = self.head"
129,Write a Python program to find the difference between two list including duplicate elements. Use collections module. ,"from collections import Counter
l1 = [1,1,2,3,3,4,4,5,6,7]
l2 = [1,1,2,4,5,6]
print(""Original lists:"")
c1 = Counter(l1)
c2 = Counter(l2)
diff = c1-c2
print(list(diff.elements()))
","# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

# Solution 11:

# Solution 12:

# Solution 13:

# Solution 14:

# Solution 15:

# Solution 16:

# Solution 17:

# Solution 18:"
130,Write a Python function that takes a positive integer and returns the sum of the cube of all the positive integers smaller than the specified number. ,"def sum_of_cubes(n):
 n -= 1
 total = 0
 while n > 0:
   total += n * n * n
   n -= 1
 return total
print(""Sum of cubes smaller than the specified number: "",sum_of_cubes(3))
","def sum_of_cube(n):
    sum = 0
    for i in range(1, n + 1):
        sum += i ** 3
    return sum

print(sum_of_cube(5))

""""""

def sum_of_cube(n):
    sum = 0
    for i in range(1, n + 1):
        sum += i ** 3
    return sum

print(sum_of"
131,Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a Pandas dataframe and find a list of specified customers by name. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')    
df.query('Mine_Name == [""Shoal Creek Mine"", ""Piney Woods Preparation Plant""]').head()
","import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')

df['Name'] = df['Name'].str.lower()

df['Name'] = df['Name'].str.replace(' ', '-')

df['Name'] = df['Name'].str.replace(' ', '-')

df['Name'] = df['Name'"
132,"Write a Python program to create a new Arrow object, cloned from the current one. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
cloned = a.clone()
print(""\nCloned datetime:"")
print(cloned)
",">>> import arrow
>>> arrow.Arrow(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50"
133,Write a NumPy program to create a 3-D array with ones on a diagonal and zeros elsewhere. ,"import numpy as np
x = np.eye(3)
print(x)
","import numpy as np

# Create a 3-D array with ones on the diagonal and zeros elsewhere
np.random.seed(123)
x = np.random.randint(0, 10, size=(3, 3))

# Create a 3-D array with ones on the diagonal and zeros elsewhere
np.random.seed(123)
y = np.random.randint(0, 10, size=(3, 3))

# Create a 3"
134,Write a NumPy program to extract first element of the second row and fourth element of fourth row from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: First element of the second row and fourth element of fourth row  "")
print(arra_data[[1,3], [0,3]])
","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

print(a[0][2])
print(a[1][3])

# solution

# a = np.array([[1, 2, 3, 4],
#               [5, 6, 7, 8],"
135,Write a Python program to get date and time properties from datetime function using arrow module. ,"import arrow
a = arrow.utcnow()
print(""Current date:"")
print(a.date())
print(""\nCurrent time:"")
print(a.time())
","import arrow

print(arrow.now())
print(arrow.utcnow())
print(arrow.utcnow().isoformat())
print(arrow.utcnow().strftime(""%Y-%m-%d %H:%M:%S""))
print(arrow.utcnow().strftime(""%Y-%m-%d %H:%M:%S.%f""))
print(arrow.utcnow().strftime(""%Y-%m"
136,Write a Python program to get the size of a file. ,"import os
file_size = os.path.getsize(""abc.txt"")
print(""\nThe size of abc.txt is :"",file_size,""Bytes"")
print()
","def get_file_size(filename):
    with open(filename, 'rb') as f:
        return f.size

print(get_file_size('file.txt'))

""""""

# Solution

def get_file_size(filename):
    with open(filename, 'rb') as f:
        return f.size

print(get_file_size('file.txt'))

""""""

# Solution

def get_file_size(filename):"
137,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to display bar charts in dataframe on specified columns. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
print(""\nBar charts in dataframe:"")
df.style.bar(subset=['B', 'C'], color='#d65f5f')
","import pandas as pd

df = pd.DataFrame(
    {
        ""First column"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ""Second column"": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
        ""Third column"": [21, 22, 23, 24, 25, 26, 27, 28, 29"
138,Write a Pandas program to create a graphical analysis of UFO (unidentified flying object) sighted by month. ,"import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
df[""ufo_yr""] = df.Date_time.dt.month
months_data = df.ufo_yr.value_counts()
months_index = months_data.index  # x ticks
months_values = months_data.get_values()
plt.figure(figsize=(15,8))
plt.xticks(rotation = 60)
plt.title('UFO sighted by Month')
plt.xlabel(""Months"")
plt.ylabel(""Number of sighting"")
months_plot = sns.barplot(x=months_index[:60],y=months_values[:60], palette = ""Oranges"")
","import pandas as pd
import matplotlib.pyplot as plt

# Read the data from the csv file
df = pd.read_csv('/Users/krishna/Downloads/UFO_sighting_data.csv')

# Create a new dataframe with only the columns that are required
df_new = df[['month', 'UFO_id', 'UFO_name', 'UFO_type', 'UFO"
139,Write a Python program to sort unsorted numbers using Recursive Quick Sort. ,"def quick_sort(nums: list) -> list:
    if len(nums) <= 1:
        return nums
    else:
        return (
            quick_sort([el for el in nums[1:] if el <= nums[0]])
            + [nums[0]]
            + quick_sort([el for el in nums[1:] if el > nums[0]])
        )
nums = [4, 3, 5, 1, 2]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Quick Sort the said list becomes:"")
print(quick_sort(nums))
nums = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Quick Sort the said list becomes:"")
print(quick_sort(nums))
nums = [1.1, 1, 0, -1, -1.1, .1]
print(""\nOriginal list:"")
print(nums)
print(""After applying Recursive Quick Sort the said list becomes:"")
print(quick_sort(nums))
","def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        less = [i for i in arr[1:] if i <= pivot]
        greater = [i for i in arr[1:] if i > pivot]
        return quick_sort(less) + [pivot] + quick_sort(greater)

arr = [6, 5, 4, 8, 2, 1, 7,"
140,"Write a Python program to convert timezone from local to utc, utc to local or specified zones. ","import arrow
utc = arrow.utcnow()
print(""utc:"")
print(utc)
print(""\nutc to local:"")
print(utc.to('local'))
print(""\nlocal to utc:"")
print(utc.to('local').to('utc'))
print(""\nutc to specific location:"")
print(utc.to('US/Pacific'))
","def timezone_convert(tz_str, utc_str, local_str):
    if tz_str == ""UTC"":
        utc_str = utc_str.replace(""+00:00"", """")
        utc_str = utc_str.replace(""-00:00"", """")
        utc_str = utc_str.replace(""+00:00"", """")
        utc_str = utc_str"
141,Write a Python program to find the difference between two list including duplicate elements. ,"def list_difference(l1,l2):
    result = list(l1)
    for el in l2:
        result.remove(el)
    return result
l1 = [1,1,2,3,3,4,4,5,6,7]
l2 = [1,1,2,4,5,6]

print(""Original lists:"")
print(l1)
print(l2)
print(""\nDifference between two said list including duplicate elements):"")
print(list_difference(l1,l2))
","def diff(list1, list2):
    diff = []
    for i in range(len(list1)):
        if list1[i]!= list2[i]:
            diff.append(list1[i])
    return diff

print(diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def diff("
142,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to display the dataframe in Heatmap style. ","import pandas as pd
import numpy as np
import seaborn as sns

np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
print(""Original array:"")
print(df)
print(""\nDataframe - Heatmap style:"")

cm = sns.light_palette(""red"", as_cmap=True)
 
df.style.background_gradient(cmap='viridis') 
","import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randn(10, 4), columns=['a', 'b', 'c', 'd'])

print(df)

# Create a heatmap
import matplotlib.pyplot as plt
import seaborn as sns

sns.heatmap(df.corr(), annot=True)"
143,Write a Python program to remove a tag from a given tree of html document and destroy it and its contents. ,"from bs4 import BeautifulSoup
html_content = '<a href=""https://w3resource.com/"">Python exercises<i>w3resource</i></a>'
soup = BeautifulSoup(html_content, ""lxml"")
print(""Original Markup:"")
a_tag = soup.a
print(a_tag)
new_tag = soup.a.decompose()
print(""After decomposing:"")
print(new_tag)
","import re

# create a regex pattern
pattern = r'<[^>]+>'

# create a regex object
regex = re.compile(pattern)

# create a regex object
regex2 = re.compile(pattern, re.DOTALL)

# create a regex object
regex3 = re.compile(pattern, re.MULTILINE)

# create a regex object
regex4 = re.comp"
144,Write a Python program to convert a given number (integer) to a list of digits. ,"def digitize(n):
  return list(map(int, str(n)))
print(digitize(123))
print(digitize(1347823)) 
","def digits(n):
    return [int(i) for i in str(n)]

n = int(input(""Enter a number: ""))
print(digits(n))

""""""

# Solution 1

def digits(n):
    return [int(i) for i in str(n)]

n = int(input(""Enter a number: ""))
print(digits(n))

# Solution 2

def digits(n):
    return"
145,rite a Python program that accepts a sequence of lines (blank line to terminate) as input and prints the lines as output (all characters in lower case). ,"lines = []
while True:
    l = input()
    if l:
        lines.append(l.upper())
    else:
        break;

for l in lines:
    print(l)
	","# Solution:

# Input:
#
#
# Output:
#
#
# Explanation:
#
#
# The input sequence is:
#
#
#
#
# Output:
#
#
#
# Explanation:
#
#
# The input sequence is:
#
#
#
#
#
# Output:
#
#
#
# Explanation:"
146,Write a Python program to remove a tag or string from a given tree of html document and replace it with the given tag or string. ,"from bs4 import BeautifulSoup
html_markup= '<a href=""https://w3resource.com/"">Python exercises<i>w3resource</i></a>'
soup = BeautifulSoup(html_markup, ""lxml"")
print(""Original markup:"")
a_tag = soup.a
print(a_tag)
new_tag = soup.new_tag(""b"")
new_tag.string = ""PHP""
b_tag = a_tag.i.replace_with(new_tag)
print(""New Markup:"")
print(a_tag)
","import re

html = '''
<html>
<head>
<title>The Dormouse's story</title>
</head>
<body>
<p class=""title""><b>The Dormouse's story</b></p>
<p class=""story"">Once upon a time there were three little sisters; and their names were
<a href=""http://example.com/elsie"" class=""sister"" id=""link"
147,Write a Pandas program to extract the unique sentences from a given column of a given DataFrame. ,"import pandas as pd
import re as re
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],
    'address': ['9910 Surrey Avenue\n9910 Surrey Avenue','92 N. Bishop Avenue','9910 Golden Star Avenue', '102 Dunbar St.\n102 Dunbar St.', '17 West Livingston Court']
})

print(""Original DataFrame:"")
print(df)

def find_unique_sentence(str1):
    result = re.findall(r'(?sm)(^[^\r\n]+$)(?!.*^\1$)', str1)
    return result

df['unique_sentence']=df['address'].apply(lambda st : find_unique_sentence(st))
print(""\nExtract unique sentences :"")
print(df)
","import pandas as pd
import numpy as np

df = pd.read_csv('/Users/srinivasan/Desktop/Python/data/data.csv')

df['sentence'] = df['text'].apply(lambda x: x.split('.'))

df['sentence'] = df['sentence'].apply(lambda x:''.join(x))

df['sentence'] = df['sentence'].apply(lambda"
148,Write a Pandas program to filter all records where the average consumption of beverages per person from .5 to 2.50 in world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nFilter all records where the average consumption of beverages per person from .5 to 2.50.:"")
print(w_a_con[(w_a_con['Display Value'] < 2.5) & (w_a_con['Display Value']>.5)].head())
","import pandas as pd

df = pd.read_csv('dataset.csv')

df = df[df['average_consumption'] > 2.50]

df.to_csv('dataset_filtered.csv', index=False)

# Solution:

# df = pd.read_csv('dataset_filtered.csv')
# df = df[df['average"
149,Write a Pandas program to extract elements in the given positional indices along an axis of a dataframe. ,"import pandas as pd 
import numpy as np
sales_arrays = [['sale1', 'sale1', 'sale3', 'sale3', 'sale2', 'sale2', 'sale4', 'sale4'],
          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]
sales_tuples = list(zip(*sales_arrays))
sales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])
print(""\nConstruct a Dataframe using the said MultiIndex levels:"")
df = pd.DataFrame(np.random.randn(8, 5), index=sales_index)
print(df)
print(""\nSelect 1st, 2nd and 3rd row of the said DataFrame:"")
positions = [1, 2, 5]
print(df.take([1, 2, 5]))

print(""\nTake elements at indices 1 and 2 along the axis 1 (column selection):"")
print(df.take([1, 2], axis=1))

print(""\nTake elements at indices 4 and 3 using negative integers along the axis 1 (column selection):"")
print(df.take([-1, -2], axis=1))
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [10, 20, 30, 40, 50]})

# Create a new column
df['col3'] = df['col1'] * 2

# Create a new column
df['col4'] = df['col2'] * 3

# Create a new column
df['col"
150,Write a Python program to find a pair with highest product from a given array of integers. ,"def max_Product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        print(""No pairs exists"") 
        return      
    # Initialize max product pair 
    x = arr[0]; y = arr[1] 

    # Traverse through every possible pair     
    for i in range(0, arr_len): 

        for j in range(i + 1, arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 

    return x,y    

nums = [1, 2, 3, 4, 7, 0, 8, 4] 
print(""Original array:"", nums)
print(""Maximum product pair is:"", max_Product(nums))

nums = [0, -1, -2, -4, 5, 0, -6] 
print(""\nOriginal array:"", nums)
print(""Maximum product pair is:"", max_Product(nums))
","def highest_product(arr):
    max_product = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            product = arr[i] * arr[j]
            if product > max_product:
                max_product = product
    return max_product

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(highest_product("
151,Write a Python program to move all zero digits to end of a given list of numbers. ,"def test(lst):
    result = sorted(lst, key=lambda x: not x) 
    return result
nums = [3,4,0,0,0,6,2,0,6,7,6,0,0,0,9,10,7,4,4,5,3,0,0,2,9,7,1]
print(""\nOriginal list:"")
print(nums)
print(""\nMove all zero digits to end of the said list of numbers:"")
print(test(nums)) 
","def move_zeros(nums):
    for i in range(len(nums)):
        if nums[i] == 0:
            nums[i] = '0'
    return nums

nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print(move_zeros(nums))

""""""

# Solution:

def move_zeros(nums):
    for i"
152,Write a NumPy program to compute cross-correlation of two given arrays. ,"import numpy as np
x = np.array([0, 1, 3])
y = np.array([2, 4, 5])
print(""\nOriginal array1:"")
print(x)
print(""\nOriginal array1:"")
print(y)
print(""\nCross-correlation of the said arrays:\n"",np.cov(x, y))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(np.cross(a, b))

# Output:
[[-0.66666667 -0.33333333 -0.66666667]
 [ 0.33333333 -0.66666667  0.33333333]]

""""""

import"
153,Write a Python program to get the actual module object for a given object. ,"from inspect import getmodule
from math import sqrt
print(getmodule(sqrt))
","import sys

def get_module(obj):
    if isinstance(obj, str):
        return sys.modules[obj]
    elif isinstance(obj, int):
        return sys.modules[str(obj)]
    else:
        raise TypeError(""Object is not a string or an int"")

def get_module_name(obj):
    if isinstance(obj, str):
        return obj
    elif isinstance(obj, int):
        return str("
154,Write a Python program to extract the nth element from a given list of tuples using lambda. ,"def extract_nth_element(test_list, n):
    result = list(map (lambda x:(x[n]), test_list))
    return result
students = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] 
print (""Original list:"")
print(students)
n = 0
print(""\nExtract nth element ( n ="",n,"") from the said list of tuples:"")
print(extract_nth_element(students, n))
n = 2
print(""\nExtract nth element ( n ="",n,"") from the said list of tuples:"")
print(extract_nth_element(students, n))
","def solution(n, head):
    return head[n]

""""""

# Solution 1

def solution(n, head):
    return head[n]

# Solution 2

def solution(n, head):
    return head[n]

# Solution 3

def solution(n, head):
    return head[n]

# Solution 4

def solution(n, head):
    return head[n]

# Solution 5"
155,Write a NumPy program to add an extra column to a NumPy array. ,"import numpy as np
x = np.array([[10,20,30], [40,50,60]])
y = np.array([[100], [200]])
print(np.append(x, y, axis=1))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
a = np.append(a, [[7, 8, 9]], axis=1)
print(a)

# Solution:

# a = np.array([[1, 2, 3], [4, 5, 6]])
# a = np.append(a, [[7, 8, 9]], axis=1)
# print(a)"
156,Write a Python program to calculate the product of a given list of numbers using lambda. ,"import functools 
def remove_duplicates(nums):
    result = functools.reduce(lambda x, y: x * y, nums, 1)
    return result
nums1 = [1,2,3,4,5,6,7,8,9,10]
nums2 = [2.2,4.12,6.6,8.1,8.3]
print(""list1:"", nums1)
print(""Product of the said list numbers:"")
print(remove_duplicates(nums1))
print(""\nlist2:"", nums2)
print(""Product of the said list numbers:"")
print(remove_duplicates(nums2))
","def product(numbers):
    return reduce(lambda x, y: x * y, numbers)

print(product([1, 2, 3, 4, 5]))

""""""

# Solution 1

def product(numbers):
    return reduce(lambda x, y: x * y, numbers)

print(product([1, 2, 3, 4, 5]))

# Solution 2

def product(numbers):
    return reduce(lambda x, y"
157,Write a Python program to parse a string representing a time according to a format. ,"import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\ntime.struct_time, in the current timezone:"")
print(arrow.utcnow().timetuple())
","import re

def parse_time(time_string):
    """"""Parse a string representing a time according to a format.

    Args:
        time_string (str): A string representing a time according to a format.

    Returns:
        (int, int): A tuple containing the hours, minutes and seconds of the time.
    """"""
    # TODO: Replace this with your code
    # Parse the time string
    # Return the hours, minutes and seconds
    #"
158,Write a NumPy program to create a random 10x4 array and extract the first five rows of the array and store them into a variable. ,"import numpy as np
x = np.random.rand(10, 4)
print(""Original array: "")
print(x)
y= x[:5, :]
print(""First 5 rows of the above array:"")
print(y)
","import numpy as np

a = np.random.randint(0,10,size=(10,4))
print(a)

# a = np.random.randint(0,10,size=(10,4))
# print(a)

# a = np.random.randint(0,10,size=(10,4))
# print(a)

# a = np.random.randint"
159,Write a Pandas program to find average consumption of wine per person greater than 2 in world alcohol consumption dataset. ,"import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nAverage consumption of wine per person greater than 2:"")
print(w_a_con[(w_a_con['Beverage Types'] == 'Wine') & (w_a_con['Display Value'] > .2)].count())
","import pandas as pd

df = pd.read_csv('world_alcohol_consumption.csv')

df['avg_cons'] = df['world_alcohol_consumption']/df['world_alcohol_consumption'].max()

print(df.avg_cons.max())

# Output:
# avg_cons
# 0.0
# 0.0
# 0.0
# 0.0
# 0."
160,Write a Pandas program to convert Series of lists to one Series. ,"import pandas as pd
s = pd.Series([
    ['Red', 'Green', 'White'],
    ['Red', 'Black'],
    ['Yellow']])
print(""Original Series of list"")
print(s)
s = s.apply(pd.Series).stack().reset_index(drop=True)
print(""One Series"")
print(s)
","s = pd.Series(['a', 'b', 'c', 'd'])
print(s)

s = pd.Series(['a', 'b', 'c', 'd'], index=['a', 'b', 'c', 'd'])
print(s)

s = pd.Series(['a', 'b', 'c', 'd'], index=['a', 'b', 'c', 'd'])
print(s)

s ="
161,Write a Python program to sort a list of elements using Time sort. ,"# License https://bit.ly/2InTS3W
def binary_search(lst, item, start, end):
    if start == end:
        if lst[start] > item:
            return start
        else:
            return start + 1
    if start > end:
        return start

    mid = (start + end) // 2
    if lst[mid] < item:
        return binary_search(lst, item, mid + 1, end)
    elif lst[mid] > item:
        return binary_search(lst, item, start, mid - 1)
    else:
        return mid
def insertion_sort(lst):
    length = len(lst)

    for index in range(1, length):
        value = lst[index]
        pos = binary_search(lst, value, 0, index - 1)
        lst = lst[:pos] + [value] + lst[pos:index] + lst[index+1:]
    return lst


def merge(left, right):
    if not left:
        return right

    if not right:
        return left

    if left[0] < right[0]:
        return [left[0]] + merge(left[1:], right)

    return [right[0]] + merge(left, right[1:])

def time_sort(lst):
    runs, sorted_runs = [], []
    length = len(lst)
    new_run = [lst[0]]
    sorted_array = []

    for i in range(1, length):
        if i == length - 1:
            new_run.append(lst[i])
            runs.append(new_run)
            break

        if lst[i] < lst[i - 1]:
            if not new_run:
                runs.append([lst[i - 1]])
                new_run.append(lst[i])
            else:
                runs.append(new_run)
                new_run = []
        else:
            new_run.append(lst[i])

    for run in runs:
        sorted_runs.append(insertion_sort(run))

    for run in sorted_runs:
        sorted_array = merge(sorted_array, run)

    return sorted_array

user_input = input(""Input numbers separated by a comma:\n"").strip()
nums = [int(item) for item in user_input.split(',')]
print(time_sort(nums))
","def time_sort(lst):
    lst.sort()
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(time_sort(lst))

""""""
Time complexity: O(n log n)
Space Complexity: O(n)
"""""""
162,"Write a Python program to convert timezone from local to utc, utc to local or specified zones. ","import arrow
utc = arrow.utcnow()
print(""utc:"")
print(utc)
print(""\nutc to local:"")
print(utc.to('local'))
print(""\nlocal to utc:"")
print(utc.to('local').to('utc'))
print(""\nutc to specific location:"")
print(utc.to('US/Pacific'))
","def timezone_convert(tz_str, utc_str, local_str):
    if tz_str == ""UTC"":
        utc_str = utc_str.replace(""+00:00"", """")
        utc_str = utc_str.replace(""-00:00"", """")
        utc_str = utc_str.replace(""+00:00"", """")
        utc_str = utc_str"
163,Write a NumPy program to subtract the mean of each row of a given matrix. ,"import numpy as np
print(""Original matrix:\n"")
X = np.random.rand(5, 10)
print(X)
print(""\nSubtract the mean of each row of the said matrix:\n"")
Y = X - X.mean(axis=1, keepdims=True)
print(Y)
","import numpy as np

matrix = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

print(""Original matrix:"")
print(matrix)

print(""\nSubtracted mean:"")
print(matrix - np.mean(matrix, axis=0))

# Output:
# [[1. 0. 0.]
#  [5. 6. 7.]"
164,Write a NumPy program to test whether two arrays are element-wise equal within a tolerance. ,"import numpy as np
print(""Test if two arrays are element-wise equal within a tolerance:"")
print(np.allclose([1e10,1e-7], [1.00001e10,1e-8]))
print(np.allclose([1e10,1e-8], [1.00001e10,1e-9]))
print(np.allclose([1e10,1e-8], [1.0001e10,1e-9]))
print(np.allclose([1.0, np.nan], [1.0, np.nan]))
print(np.allclose([1.0, np.nan], [1.0, np.nan], equal_nan=True))
","import numpy as np

a = np.array([1, 2, 3, 4])
b = np.array([1, 2, 3, 4])

print(a == b)

# Output:
# True
# True
# True
# False

# Hint: You can use np.array() to convert a list to an array.
# You can also use np.array() to convert a list to a numpy array.
# You can also use"
165,Write a Pandas program to create a Pivot table and count the manager wise sale and mean value of sale amount. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\SaleData.xlsx')
print(pd.pivot_table(df,index=[""Manager""],values=[""Sale_amt""],aggfunc=[np.mean,len]))
","import pandas as pd

df = pd.read_csv(""C:\\Users\\DELL\\Desktop\\Python\\Sales_Sales.csv"")

df.groupby(['Sales','Manager']).size().unstack().plot(kind='bar',stacked=True)

# Create a pivot table to display the sales of each manager and the mean sale amount of each manager.

df.groupby(['Sales','Manager']).size().un"
166,Write a Python program to select all the Sundays of a specified year. ,"from datetime import date, timedelta

def all_sundays(year):
# January 1st of the given year
       dt = date(year, 1, 1)
# First Sunday of the given year       
       dt += timedelta(days = 6 - dt.weekday())  
       while dt.year == year:
          yield dt
          dt += timedelta(days = 7)
          
for s in all_sundays(2020):
   print(s)
   ","python sol_python.py

""""""

# import the necessary packages
from datetime import date
import calendar
import calendar as c
import datetime

# define a function to select all the Sundays of a specified year
def select_sundays(year):
    # create a list of the calendar days of the specified year
    calendar_days = c.Calendar().itermonthdays(year, 1)
    # create a list of the calendar days of the specified year
    calendar_days"
167,Write a Pandas program to print a concise summary of the dataset (titanic.csv). ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.info()
print(result)
","# Import pandas
import pandas as pd

# Read the data
titanic = pd.read_csv('titanic.csv')

# Print the dataframe
print(titanic)

# Print the first five rows of the dataframe
print(titanic.head())

# Print the shape of the dataframe
print(titanic.shape)

# Print the column names of the dataframe
print(titanic."
168,Write a Python program to create an object for writing and iterate over the rows to print the values. ,"import csv
import sys
with open('temp.csv', 'wt') as f:
    writer = csv.writer(f)
    writer.writerow(('id1', 'id2', 'date'))
    for i in range(3):
        row = (
            i + 1,
            chr(ord('a') + i),
            '01/{:02d}/2019'.format(i + 1),)
        writer.writerow(row)
print(open('temp.csv', 'rt').read())
","def print_values(rows):
    for row in rows:
        for value in row:
            print(value, end="" "")
        print()

rows = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print_values(rows)

""""""

# Solution

def print_values(rows):
    for row in rows:
        for value in row:
            print(value, end="" """
169,Write a Python program to remove duplicate dictionary from a given list. ,"def remove_duplicate_dictionary(list_color):
    result = [dict(e) for e in {tuple(d.items()) for d in list_color}]
    return result

list_color = [{'Green': '#008000'}, {'Black': '#000000'}, {'Blue': '#0000FF'}, {'Green': '#008000'}]
print (""Original list with duplicate dictionary:"")
print(list_color)
print(""\nAfter removing duplicate dictionary of the said list:"")
print(remove_duplicate_dictionary(list_color))
","def remove_duplicate(list):
    new_list = []
    for i in list:
        if i not in new_list:
            new_list.append(i)
    return new_list

print(remove_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28"
170,Write a Pandas program to create a Pivot table and compute survival totals of all classes along each group. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.pivot_table('survived', index='sex', columns='class', margins=True)
print(result)
","import pandas as pd
import numpy as np

# Create a Pandas dataframe
df = pd.DataFrame(np.random.randn(20, 3), columns=['a', 'b', 'c'])

# Create a Pivot table
pivot = df.pivot_table(index='a', columns='b', values='c', aggfunc='sum')

# Compute the survival totals
print(pivot.loc["
171,Write a Python program to remove first specified number of elements from a given list satisfying a condition. ,"def condition_match(x):
    return ((x % 2) == 0)
def remove_items_con(data, N):
    ctr = 1
    result = []
    for x in data:
        if ctr > N or not condition_match(x):
            result.append(x)
        else:
            ctr = ctr + 1
    return result
nums = [3,10,4,7,5,7,8,3,3,4,5,9,3,4,9,8,5]
N = 4
print(""Original list:"")
print(nums)
print(""\nRemove first 4 even numbers from the said list:"")
print(remove_items_con(nums, N))
","def remove_first(lst, n):
    return lst[:n]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n = 3
print(remove_first(lst, n))

""""""

def remove_first(lst, n):
    return lst[:n]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9"
172,Write a Python program to convert a list of multiple integers into a single integer. ,"L = [11, 33, 50]
print(""Original List: "",L)
x = int("""".join(map(str, L)))
print(""Single Integer: "",x)
","def solution(lst):
    return sum(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(lst))

""""""

def solution(lst):
    return sum(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(lst))

""""""

def solution("
173,Write a Python program to find the value of the last element in the given list that satisfies the provided testing function. ,"def find_last(lst, fn):
  return next(x for x in lst[::-1] if fn(x))

print(find_last([1, 2, 3, 4], lambda n: n % 2 == 1))
print(find_last([1, 2, 3, 4], lambda n: n % 2 == 0))
","def last_element(lst):
    return lst[-1]

def last_element_solution(lst):
    return lst[-1]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(last_element(lst))
print(last_element_solution(lst))

""""""

# Solution

def last_element(lst"
174,Write a Python program to change the position of every n-th value with the (n+1)th in a list. ,"from itertools import zip_longest, chain, tee
def replace2copy(lst):
    lst1, lst2 = tee(iter(lst), 2)
    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))
n = [0,1,2,3,4,5]
print(replace2copy(n))
","def solution(n, arr):
    for i in range(n):
        arr[i] = arr[i] + 1
    return arr

print(solution(5, [1, 2, 3, 4, 5]))

""""""

def solution(n, arr):
    for i in range(n):
        arr[i] = arr[i] + 1
    return arr

print(solution(5,"
175,Write a Python program to multiply all the numbers in a given list using lambda. ,"from functools import reduce 
def mutiple_list(nums):
    result =  reduce(lambda x, y: x*y, nums)
    return result
nums = [4, 3, 2, 2, -1, 18]
print (""Original list: "")
print(nums)
print(""Mmultiply all the numbers of the said list:"",mutiple_list(nums))
nums = [2, 4, 8, 8, 3, 2, 9]
print (""\nOriginal list: "")
print(nums)
print(""Mmultiply all the numbers of the said list:"",mutiple_list(nums))
","def multiply(numbers):
    return reduce(lambda x, y: x * y, numbers)

print(multiply([1, 2, 3, 4, 5]))

""""""

# Solution 1

def multiply(numbers):
    return reduce(lambda x, y: x * y, numbers)

print(multiply([1, 2, 3, 4, 5]))

# Solution 2

def multiply(numbers):
    return reduce(lambda"
176,Write a Python program to remove unwanted characters from a given string. ,"def remove_chars(str1, unwanted_chars):
    for i in unwanted_chars:
        str1 = str1.replace(i, '')
    return str1



str1 = ""Pyth*^on Exercis^es""
str2 = ""A%^!B#*CD""

unwanted_chars = [""#"", ""*"", ""!"", ""^"", ""%""]
print (""Original String : "" + str1)
print(""After removing unwanted characters:"")
print(remove_chars(str1, unwanted_chars))
print (""\nOriginal String : "" + str2)
print(""After removing unwanted characters:"")
print(remove_chars(str2, unwanted_chars))
","s = ""This is a string with spaces""

print(s.replace("" "", """"))

# Output:
# This is a string with spaces
# This is a string with spaces
# This is a string with spaces
# This is a string with spaces
# This is a string with spaces
# This is a string with spaces
# This is a string with spaces
# This is a string with spaces
# This is a string with spaces
# This is a string with spaces
# This is a string with spaces"
177,Write a Python program to compute the average of n,"import itertools as it
nums = [[0, 1, 2],
       [2, 3, 4],
       [3, 4, 5, 6],
       [7, 8, 9, 10, 11],
       [12, 13, 14]]

print(""Original list:"")
print(nums)
def get_avg(x):
    x = [i for i in x if i is not None]
    return sum(x, 0.0) / len(x)
result = map(get_avg, it.zip_longest(*nums))
print(""\nAverage of n-th elements in the said list of lists with different lengths:"")
print(list(result))
","def solution(n):
    return n/2

def main():
    n = int(input())
    print(solution(n))

if __name__ == ""__main__"":
    main()"
178,Write a Python program to find the details of a given zip code using Nominatim API and GeoPy package. ,"from geopy.geocoders import Nominatim
geolocator = Nominatim(user_agent=""geoapiExercises"")
zipcode1 = ""99501""
print(""\nZipcode:"",zipcode1)
location = geolocator.geocode(zipcode1)
print(""Details of the said pincode:"")
print(location.address) 
zipcode2 = ""CA9 3HX""
print(""\nZipcode:"",zipcode2)
location = geolocator.geocode(zipcode2)
print(""Details of the said pincode:"")
print(location.address) 
zipcode3 = ""61000""
print(""\nZipcode:"",zipcode3)
location = geolocator.geocode(zipcode3)
print(""Details of the said pincode:"")
print(location.address) 
zipcode4 = ""713101""
print(""\nZipcode:"",zipcode4)
location = geolocator.geocode(zipcode4)
print(""Details of the said pincode:"")
print(location.address)
","1. Create a function named geocode_zipcode() that takes the zip code as an argument and returns the latitude and longitude of the given zip code.

2. Create a function named geocode_address() that takes the address as an argument and returns the latitude and longitude of the given address.

3. Create a function named geocode_address_to_coordinates() that takes the address as an argument and returns the latitude and longitude of the given"
179,Write a NumPy program to insert a space between characters of all the elements of a given array. ,"import numpy as np
x = np.array(['python exercises', 'PHP', 'java', 'C++'], dtype=np.str)
print(""Original Array:"")
print(x)
r = np.char.join("" "", x)
print(r)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr_space = np.insert(arr, 5,'')

print(arr_space)

# Output:
# [1 2 3 4 5 6 7 8 9 10]
# [1 2 3 4 5 6 7 8 9 10]
# [1 2 3 4 5 6 7 8 9 10]
#"
180,Write a Python program to merge some list items in given list using index value. ,"def merge_some_chars(lst,merge_from,merge_to):
    result = lst
    result[merge_from:merge_to] = [''.join(result[merge_from:merge_to])]    
    return result    
chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
print(""Original lists:"")
print(chars)
merge_from = 2
merge_to = 4
print(""\nMerge items from"",merge_from,""to"",merge_to,""in the said List:"")
print(merge_some_chars(chars,merge_from,merge_to))
chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
merge_from = 3
merge_to = 7
print(""\nMerge items from"",merge_from,""to"",merge_to,""in the said List:"")
print(merge_some_chars(chars,merge_from,merge_to))
","def merge_list(list1, list2):
    list1.extend(list2)
    return list1

list1 = [1, 2, 3, 4, 5]
list2 = [6, 7, 8, 9, 10]

print(merge_list(list1, list2))

# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Output: [1, 2, 3,"
181,Write a Python function to check whether a number is perfect or not. ,"def perfect_number(n):
    sum = 0
    for x in range(1, n):
        if n % x == 0:
            sum += x
    return sum == n
print(perfect_number(6))
","def is_perfect(n):
    if n == 1:
        return True
    elif n % 2 == 0:
        return False
    else:
        return is_perfect(n // 2)

print(is_perfect(5))

""""""

def is_perfect(n):
    if n == 1:
        return True
    elif n % 2 == 0:
        return False
    else:
        return is_perfect(n // 2)

print("
182,"Write a Pandas program to split a given dataset, group by two columns and convert other columns of the dataframe into a dictionary with column header as key. ","import pandas as pd
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])
print(""Original DataFrame:"")
print(df)
dict_data_list = list()

for gg, dd in df.groupby(['school_code','class']):
    group = dict(zip(['school_code','class'], gg))
    ocolumns_list = list()
    for _, data in dd.iterrows():
        data = data.drop(labels=['school_code','class'])
        ocolumns_list.append(data.to_dict())
    group['other_columns'] = ocolumns_list
    dict_data_list.append(group)

print(dict_data_list) 
","import pandas as pd

# Read the data into a pandas dataframe
df = pd.read_csv(""data.csv"")

# Create a dictionary to group the data by two columns
grouped = df.groupby(['gender', 'age'])

# Create a dictionary to convert the data into a dictionary
converted = grouped.agg({""height"": ""mean"", ""weight"": ""mean""})"
183,Write a Python program to find the most common elements and their counts of a specified text. ,"from collections import Counter
s = 'lkseropewdssafsdfafkpwe'
print(""Original string: ""+s)
print(""Most common three characters of the said string:"")
print(Counter(s).most_common(3))
","import collections

def most_common(text):
    # create a dictionary to store the count of each character
    counts = collections.Counter(text)
    # sort the dictionary by the values
    counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)
    # return the top 10 most common characters
    return counts[:10]

print(most_common('abcdefghijklmnopqrstuvwxyz"
184,Write a NumPy program to round array elements to the given number of decimals. ,"import numpy as np
x = np.round([1.45, 1.50, 1.55])
print(x)
x = np.round([0.28, .50, .64], decimals=1)
print(x)
x = np.round([.5, 1.5, 2.5, 3.5, 4.5]) # rounds to nearest even value
print(x)
","import numpy as np

a = np.array([1.5, 2.5, 3.5, 4.5, 5.5])
print(a)
print(np.around(a, decimals=2))

# Output:
[1.5 2.5 3.5 4.5 5.5]
[1.5 2.5 3.5 4.5 5.5]

""""""

import numpy as np

a = np"
185,Write a Pandas program to find the index of the first occurrence of the smallest and largest value of a given series. ,"import pandas as pd
nums = pd.Series([1, 3, 7, 12, 88, 23, 3, 1, 9, 0])
print(""Original Series:"")
print(nums)
print(""Index of the first occurrence of the smallest and largest value of the said series:"")
print(nums.idxmin())
print(nums.idxmax())
","import pandas as pd

# Read the data from the file
df = pd.read_csv(""data.csv"")

# Create a new column called ""smallest""
df[""smallest""] = df[""smallest""].astype(str)

# Create a new column called ""largest""
df[""largest""] = df[""largest""].astype(str)

# Create a new column called ""smallest""
df[""smallest"
186,Write a NumPy program to generate a random number between 0 and 1. ,"import numpy as np
rand_num = np.random.normal(0,1,1)
print(""Random number between 0 and 1:"")
print(rand_num)
","import random

def random_number():
    return random.random()

print(random_number())

""""""

# Solution

import random

def random_number():
    return random.random()

print(random_number())

""""""

# Solution

import random

def random_number():
    return random.random()

print(random_number())

""""""

# Solution

import random

def random_number():
    return random"
187,Write a Python program to count number of unique sublists within a given list. ,"def unique_sublists(input_list):
    result ={}
    for l in input_list: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result

list1 = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] 
print(""Original list:"")
print(list1)  
print(""Number of unique lists of the said list:"")
print(unique_sublists(list1)) 

color1 = [[""green"", ""orange""], [""black""], [""green"", ""orange""], [""white""]]
print(""\nOriginal list:"")
print(color1)  
print(""Number of unique lists of the said list:"")
print(unique_sublists(color1))
","def unique_sublists(lst):
    # Your code here
    # return len(set(lst))
    return len(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(unique_sublists(lst))

# Output:
# 5
# 5
# 5
# 5
# 5
# 5
# 5
# 5
# 5
# 5
# 5
#"
188,Write a Python program to calculate the time runs (difference between start and current time) of a program. ,"from timeit import default_timer
def timer(n):
    start = default_timer()
    # some code here
    for row in range(0,n):
        print(row)
    print(default_timer() - start)

timer(5)
timer(15)
","def time_calc(func):
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        print(f""{func.__name__} took {end - start} seconds"")
        return result
    return wrapper

@time_calc
def time_calc(func):
    def wrapper(*args, **kwargs):"
189,Write a Python program to concatenate element-wise three given lists. ,"def concatenate_lists(l1,l2,l3):
    return [i + j + k for i, j, k in zip(l1, l2, l3)]
    
l1 = ['0','1','2','3','4'] 
l2 = ['red','green','black','blue','white']
l3 = ['100','200','300','400','500'] 

print(""Original lists:"")
print(l1)
print(l2)
print(l3)
print(""\nConcatenate element-wise three said lists:"")
print(concatenate_lists(l1,l2,l3))
","def concatenate(list1, list2, list3):
    return list1 + list2 + list3

print(concatenate([1, 2, 3], [4, 5, 6], [7, 8, 9]))

""""""

def concatenate(list1, list2, list3):
    return list1 + list2 + list3

print(concatenate([1, 2, 3], [4, 5, 6], [7, 8,"
190,Write a Python program to delete a specific row from a given SQLite table. ,"import sqlite3
from sqlite3 import Error
def sql_connection():
   try:
     conn = sqlite3.connect('mydatabase.db')
     return conn
   except Error:
     print(Error)
def sql_table(conn):
   cursorObj = conn.cursor()
# Create the table
   cursorObj.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")
# Insert records
   cursorObj.executescript(""""""
   INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);
   INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);
   INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);
   INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);
   INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);
   """""")   
   cursorObj.execute(""SELECT * FROM salesman"")
   rows = cursorObj.fetchall()
   print(""Agent details:"")
   for row in rows:
       print(row)
   print(""\nDelete Salesman of ID 5003:"")
   s_id = 5003
   cursorObj.execute(""""""
   DELETE FROM salesman
   WHERE salesman_id = ?
   """""", (s_id,))
   conn.commit()
   cursorObj.execute(""SELECT * FROM salesman"")
   rows = cursorObj.fetchall()
   print(""\nAfter updating Agent details:"")
   for row in rows:
       print(row)
sqllite_conn = sql_connection()
sql_table(sqllite_conn)
if (sqllite_conn):
 sqllite_conn.close()
 print(""\nThe SQLite connection is closed."")
","import sqlite3

conn = sqlite3.connect('data.db')
c = conn.cursor()

c.execute('DROP TABLE IF EXISTS data')

c.execute('CREATE TABLE data (id INTEGER, name TEXT, address TEXT, phone_number TEXT, email TEXT)')

c.execute('INSERT INTO data VALUES (1, ""Rajesh"", ""Delhi"", ""09123445566"", ""rajesh@gmail.com"
191,Write a Python program to find the list with maximum and minimum length using lambda. ,"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)
    
def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )  
    min_list = min(input_list, key = lambda i: len(i))
    return(min_length, min_list)
      
list1 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]
print(""Original list:"")
print(list1)
print(""\nList with maximum length of lists:"")
print(max_length_list(list1))
print(""\nList with minimum length of lists:"")
print(min_length_list(list1))
","def solution(lst):
    return max(lst), min(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(lst))

""""""

def solution(lst):
    return max(lst), min(lst)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(l"
192,Write a Python program to convert a given string to camelcase. ,"from re import sub

def camel_case(s):
  s = sub(r""(_|-)+"", "" "", s).title().replace("" "", """")
  return ''.join([s[0].lower(), s[1:]])
print(camel_case('JavaScript'))
print(camel_case('Foo-Bar'))
print(camel_case('foo_bar'))
print(camel_case('--foo.bar'))
print(camel_case('Foo-BAR'))
print(camel_case('fooBAR'))
print(camel_case('foo bar'))
","s = ""hello world""
print(s.capitalize())

""""""

s = ""hello world""
print(s.capitalize())"
193,Write a Python program to find common items from two lists. ,"color1 = ""Red"", ""Green"", ""Orange"", ""White""
color2 = ""Black"", ""Green"", ""White"", ""Pink""
print(set(color1) & set(color2))
","def common_items(list1, list2):
    common_items = []
    for item in list1:
        if item in list2:
            common_items.append(item)
    return common_items

print(common_items([1, 2, 3, 4, 5], [2, 3, 5, 6, 7]))

""""""

def common_items(list1, list2):
    common_items = []
    for item in list1:
        if item"
194,"Write a Python program to create a doubly linked list, append some items and iterate through the list (print forward). ","class Node(object):
    # Doubly linked node
    def __init__(self, data=None, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev

class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, data):
        # Append an item 
        new_item = Node(data, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item

        self.count += 1

    def print_foward(self):
        for node in self.iter():
            print(node)
            
    def iter(self):
        # Iterate the list
        current = self.head
        while current:
            item_val = current.data
            current = current.next
            yield item_val

items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')

print(""Items in the Doubly linked list: "")
items.print_foward()
","def doubly_linked_list(data):
    doubly_linked_list = DoublyLinkedList()
    doubly_linked_list.append(data)
    return doubly_linked_list

# Test
print(doubly_linked_list(1))
print(doubly_linked_list(2))
print(doubly_linked_list(3))
print(doubly_linked_list"
195,Write a NumPy program to rearrange the dimensions of a given array. ,"import numpy as np    
x = np.arange(24).reshape((6,4))
print(""Original arrays:"")
print(x)
new_array = np.transpose(x)
print(""After reverse the dimensions:"")
print(new_array)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a)

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a.shape)

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a."
196,Write a Pandas program to create a series of Timestamps from a DataFrame of integer or string columns. Also create a series of Timestamps using specified columns. ,"import pandas as pd
df = pd.DataFrame({'year': [2018, 2019, 2020],
                   'month': [2, 3, 4],
                   'day': [4, 5, 6],
                   'hour': [2, 3, 4]})
print(""Original dataframe:"")
print(df)
result = pd.to_datetime(df)
print(""\nSeries of Timestamps from the said dataframe:"")
print(result)
print(""\nSeries of Timestamps using specified columns:"")
print(pd.to_datetime(df[['year', 'month', 'day']]))
","import pandas as pd
import datetime as dt

# Create a DataFrame
df = pd.DataFrame({'Timestamp': [dt.datetime(2021, 1, 1), dt.datetime(2021, 1, 2), dt.datetime(2021, 1, 3), dt.datetime(2021, 1, 4), dt.datetime(20"
197,"Write a Python program to create datetime from integers, floats and strings timestamps using arrow module. ","import arrow
i = arrow.get(1857900545)
print(""Date from integers: "")
print(i)
f = arrow.get(1857900545.234323)
print(""\nDate from floats: "")
print(f)
s = arrow.get('1857900545')
print(""\nDate from Strings: "")
print(s)
","import arrow

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp)

timestamp = arrow.now()
print(timestamp"
198,"Write a Python program to merge two or more lists into a list of lists, combining elements from each of the input lists based on their positions. ","def merge_lists(*args, fill_value = None):
  max_length = max([len(lst) for lst in args])
  result = []
  for i in range(max_length):
    result.append([
      args[k][i] if i < len(args[k]) else fill_value for k in range(len(args))
    ])
  return result
print(""After merging lists into a list of lists:"")
print(merge_lists(['a', 'b'], [1, 2], [True, False]))  
print(merge_lists(['a'], [1, 2], [True, False]))  
print(merge_lists(['a'], [1, 2], [True, False], fill_value = '_'))
","# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

# Solution 11:

# Solution 12:

# Solution 13:

# Solution 14:

# Solution 15:

# Solution 16:

# Solution"
199,Write a NumPy program to stack arrays in sequence horizontally (column wise). ,"import numpy as np    
print(""\nOriginal arrays:"")
x = np.arange(9).reshape(3,3)
y = x*3
print(""Array-1"")
print(x)
print(""Array-2"")
print(y)
new_array =  np.hstack((x,y))
print(""\nStack arrays in sequence horizontally:"")
print(new_array)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a)
print(b)

# Solution:

# a = np.array([[1, 2, 3], [4, 5, 6]])
# b = np.array([[7, 8, 9], [10, 11, 12]]"
200,rite a Python program to find the first repeated word in a given string. ,"def first_repeated_word(str1):
  temp = set()
  for word in str1.split():
    if word in temp:
      return word;
    else:
      temp.add(word)
  return 'None'
print(first_repeated_word(""ab ca bc ab""))
print(first_repeated_word(""ab ca bc ab ca ab bc""))
print(first_repeated_word(""ab ca bc ca ab bc""))
print(first_repeated_word(""ab ca bc""))
","def first_repeated_word(str):
    str = str.lower()
    str = str.replace("" "", """")
    str = str.replace(""."", """")
    str = str.replace("","", """")
    str = str.replace(""!"", """")
    str = str.replace(""?"", """")
    str = str.replace("";"", """")
    str = str.replace(""!"", """")
    str = str.replace(""."", """")
    str ="
201,"Create a dataframe of ten rows, four columns with random values. Convert some values to nan values. Write a Pandas program which will highlight the nan values. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
def color_negative_red(val):
    color = 'red' if val < 0 else 'black'
    return 'color: %s' % color
print(""\nNegative numbers red and positive numbers black:"")
df.style.highlight_null(null_color='red')
","import pandas as pd

df = pd.DataFrame(
    {
        ""col1"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ""col2"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        ""col3"": [1, 2, 3, 4, 5, 6, 7,"
202,Write a Python program to generate a number in a specified range except some specific numbers. ,"from random import choice
def generate_random(start_range, end_range, nums):
    result = choice([i for i in range(start_range,end_range) if i not in nums])
    return result
   
start_range = 1
end_range = 10
nums = [2, 9, 10]
print(""\nGenerate a number in a specified range (1, 10) except [2, 9, 10]"")
print(generate_random(start_range,end_range,nums))

start_range = -5
end_range = 5
nums = [-5,0,4,3,2]

print(""\nGenerate a number in a specified range (-5, 5) except [-5,0,4,3,2]"")
print(generate_random(start_range,end_range,nums))
","def solution(n):
    if n == 1:
        return 1
    else:
        return solution(n-1) + solution(n-2)

print(solution(5))

# Output:
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9
# 10
# 11
# 12
# 13
# 14
# 15
# 16
# 17
# 18
# 19
# 20"
203,Write a Python program to add to a tag's contents in a given html document. ,"from bs4 import BeautifulSoup
html_doc = '<a href=""http://example.com/"">HTML<i>w3resource.com</i></a>'
soup = BeautifulSoup(html_doc, ""lxml"")
print(""\nOriginal Markup:"")
print(soup.a)
soup.a.append(""CSS"")
print(""\nAfter append a text in the new link:"")
print(soup.a)
","import html

html_string = '''
<html>
<head>
<title>HTML Solution</title>
</head>
<body>
<p>This is a <b>HTML Solution</b>.</p>
<p>This is a <b>HTML Solution</b>.</p>
<p>This is a <b>HTML Solution</b>.</p>
<p>This is a <b>HTML Solution</b>.</p>
<p"
204,Write a NumPy program to create an array with 10^3 elements. ,"import numpy as np
x = np.arange(1e3)
print(x)
","import numpy as np

arr = np.random.randint(1, 100, 10**3)

arr = np.random.randint(1, 100, 10**3)

arr = np.random.randint(1, 100, 10**3)

arr = np.random.randint(1, 100, 10**3)

arr = np.random.randint(1, 100, 10**3)

arr = np.random.randint(1"
205,Write a NumPy program to suppresses the use of scientific notation for small numbers in NumPy array. ,"import numpy as np
x=np.array([1.6e-10, 1.6, 1200, .235]) 
print(""Original array elements:"")
print(x)
print(""Print array values with precision 3:"")
np.set_printoptions(suppress=True)
print(x)
","import numpy as np

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

np.set_printoptions(suppress=True)

print(x)

# Solution:

# x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
#
# print(x)
#
# # Solution:
#
#"
206,Write a Python program to join adjacent members of a given list. ,"def test(lst):
    result = [x + y for x, y in zip(lst[::2],lst[1::2])]
    return result

nums = ['1','2','3','4','5','6','7','8']
print(""Original list:"")
print(nums)
print(""\nJoin adjacent members of a given list:"")
print(test(nums))

nums = ['1','2','3']
print(""\nOriginal list:"")
print(nums)
print(""\nJoin adjacent members of a given list:"")
print(test(nums))
","def join_adjacent(lst):
    return lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8] + lst[9] + lst[10] + lst[11] + lst[12] + lst[13] + lst[14] + lst[15] + lst[16] +"
207,Write a Python program to compare two unordered lists (not sets). ,"from collections import Counter
def compare_lists(x, y):
    return Counter(x) == Counter(y)
n1 = [20, 10, 30, 10, 20, 30]
n2 = [30, 20, 10, 30, 20, 50]
print(compare_lists(n1, n2))
","def compare_lists(list1, list2):
    if len(list1)!= len(list2):
        return False
    for i in range(len(list1)):
        if list1[i]!= list2[i]:
            return False
    return True

print(compare_lists([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(compare_lists(["
208,Write a Pandas program to get the length of the string present of a given column in a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'skfsalf', 'sdfslew', 'safsdf'],
    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})
print(""Original DataFrame:"")
print(df)
print(""\nLength of the string in a column:"")
df['company_code_length'] = df['company_code'].apply(len)
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Age': [30, 32, 33, 34, 35, 36],
                   'Score': [85, 90, 95, 100, 90, 90]})

print(df['Name'].str.len())

# Output:
# Name:  Rolf
# Age"
209,"Write a Python program to create a new Arrow object, representing the ""floor"" of the timespan of the Arrow object in a given timeframe using arrow module. The timeframe can be any datetime property like day, hour, minute. ","import arrow
print(arrow.utcnow())
print(""Hour ceiling:"")
print(arrow.utcnow().floor('hour'))
print(""\nMinute ceiling:"")
print(arrow.utcnow().floor('minute'))
print(""\nSecond ceiling:"")
print(arrow.utcnow().floor('second'))
","import arrow

# create a new Arrow object
new_arrow = arrow.Arrow(arrow.now())

# create a new timeframe
new_timeframe = arrow.TimeFrame(new_arrow.floor, new_arrow.hour, new_arrow.minute)

# create a new arrow object
new_arrow = arrow.Arrow(arrow."
210,Write a Python program to cast the provided value as a list if it's not one. ,"def cast_list(val):
  return list(val) if isinstance(val, (tuple, list, set, dict)) else [val]
d1 = [1]
print(type(d1))
print(cast_list(d1)) 
d2 = ('Red', 'Green')
print(type(d2))
print(cast_list(d2)) 
d3 = {'Red', 'Green'}
print(type(d3))
print(cast_list(d3))
d4 = {1: 'Red', 2: 'Green', 3: 'Black'}
print(type(d4))
print(cast_list(d4))
","def solution(x):
    if type(x)!= list:
        return [x]
    else:
        return x

print(solution([1, 2, 3]))

""""""

def solution(x):
    if type(x)!= list:
        return [x]
    else:
        return x

print(solution([1, 2, 3]))

""""""

def solution(x):
    if type(x)!="
211,Write a Python program to convert a list of dictionaries into a list of values corresponding to the specified key. ,"def test(lsts, key):
  return [x.get(key) for x in lsts]
 
students = [
  { 'name': 'Theodore', 'age': 18 },
  { 'name': 'Mathew', 'age': 22 },
  { 'name': 'Roxanne', 'age': 20 },
  { 'name': 'David', 'age': 18 }
]

print(""Original list of dictionaries:"")
print(students)
print(""\nConvert a list of dictionaries into a list of values corresponding to the specified key:"")
print(test(students, 'age'))
","def solution(dict_list):
    # Your code here
    return [dict_list[i]['name'] for i in range(len(dict_list))]

print(solution([{'name': 'John', 'age': 30}, {'name': 'Bob', 'age': 20}, {'name': 'Jack', 'age': 25}]))

""""""

def solution(dict_list):
    # Your code here
    return ["
212,Write a Python program to get the factorial of a non-negative integer. ,"def factorial(n):
  if n <= 1:
    return 1
  else:
    return n * (factorial(n - 1))
    
print(factorial(5))
","def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

print(factorial(5))

""""""

# Solution:

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

print(factorial(5))"
213,"Write a Pandas program to create a Pivot table and find survival rate by gender, age wise of various classes. ","import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result  =  df.pivot_table('survived', index=['sex','age'], columns='class')
print(result)
","import pandas as pd
import numpy as np

df = pd.read_csv(""https://github.com/jbrownlee/Datasets/blob/master/iris.csv"")

# Create a pivot table
pivot = df.pivot_table(index=""class"", columns=""gender"", values=""petal_length"", aggfunc=""mean"")

# Find survival rate by gender
pivot[""Survived""] = pivot[""pet"
214,"Write a NumPy program to compute xy, element-wise where x, y are two given arrays. ","import numpy as np
x = np.array([[1, 2], [3, 4]])
y = np.array([[1, 2], [1, 2]])
print(""Array1: "")
print(x)
print(""Array1: "")
print(y)
print(""Result- x^y:"")
r1 = np.power(x, y)
print(r1)
","x = np.array([[1, 2, 3], [4, 5, 6]])
y = np.array([[7, 8, 9], [10, 11, 12]])

x.shape

x.ndim

x.size

x.dtype

x.itemsize

x.nbytes

x.shape

x.ndim

x.size

x.dtype

x.itemsize"
215,Write a Python program to search the country name from given state name using Nominatim API and GeoPy package. ,"from geopy.geocoders import Nominatim
geolocator = Nominatim(user_agent=""geoapiExercises"")
state1 = ""Uttar Pradesh""
print(""State Name:"",state1)
location = geolocator.geocode(state1)
print(""State Name/Country Name: "")
print(location.address)
state2 = "" Illinois""
print(""\nState Name:"",state2)
location = geolocator.geocode(state2)
print(""State Name/Country Name: "")
print(location.address)
state3 = ""Normandy""
print(""\nState Name:"",state3)
location = geolocator.geocode(state3)
print(""State Name/Country Name: "")
print(location.address) 
state4 = ""Jerusalem District""
print(""\nState Name:"",state4)
location = geolocator.geocode(state4)
print(""State Name/Country Name: "")
print(location.address)
","import geopy.geocoders
from geopy.geocoders import Nominatim

# Enter the state name:
state = input(""Enter the state name: "")

# Enter the country name:
country = input(""Enter the country name: "")

# Create a geolocator object:
geolocator = Nominatim(user_agent=""myGeoPy"")

# Create a geocoder object:"
216,Write a Python program to append items from a specified list. ,"from array import *
num_list = [1, 2, 6, -8]
array_num = array('i', [])
print(""Items in the list: "" + str(num_list))
print(""Append items from the list: "")
array_num.fromlist(num_list)
print(""Items in the array: ""+str(array_num))
","def append_items(items, new_items):
    """"""Append items to the list.""""""
    items.extend(new_items)
    return items

print(append_items([1, 2, 3], [4, 5, 6]))

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

""""""

"""""""
217,Write a NumPy program to create an array of the integers from 30 to70. ,"import numpy as np
array=np.arange(30,71)
print(""Array of the integers from 30 to70"")
print(array)
","import numpy as np

arr = np.arange(30, 71)

print(arr)

# Solution:

# arr = np.arange(30, 71)
# arr = arr.reshape(5, 5)
# print(arr)

# Solution:

# arr = np.arange(30, 71)
# arr = arr.reshape(5, 5)
# print(arr)

# Solution:

# arr ="
218,Write a Python function to check whether a number is divisible by another number. Accept two integers values form the user. ,"def multiple(m, n):
	return True if m % n == 0 else False

print(multiple(20, 5))
print(multiple(7, 2))
","def divisible(num1, num2):
    if num1 % num2 == 0:
        return True
    else:
        return False

print(divisible(12, 6))

""""""

def divisible(num1, num2):
    if num1 % num2 == 0:
        return True
    else:
        return False

print(divisible(12, 6))

""""""

def divisible(num"
219,Write a NumPy program to generate a matrix product of two arrays. ,"import numpy as np
x = [[1, 0], [1, 1]]
y = [[3, 1], [2, 2]]
print(""Matrices and vectors."")
print(""x:"")
print(x)
print(""y:"")
print(y)
print(""Matrix product of above two arrays:"")
print(np.matmul(x, y))
","import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6]])
B = np.array([[7, 8, 9], [10, 11, 12]])

C = np.dot(A, B)

print(C)

""""""

# Solution

import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6]])
B = np.array([["
220,Write a NumPy program to find elements within range from a given array of numbers. ,"import numpy as np
a = np.array([1, 3, 7, 9, 10, 13, 14, 17, 29])
print(""Original array:"")
print(a)
result = np.where(np.logical_and(a>=7, a<=20))
print(""\nElements within range: index position"")
print(result)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr[arr>5])

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr[arr>5])

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
221,Write a Pandas program to find which years have all non-zero values and which years have any non-zero values from world alcohol consumption dataset. ,"import pandas as pd 

# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
print(""\nFind which years have all non-zero values:"")
print(w_a_con.loc[:,w_a_con.all()])
print(""\nFind which years have any non-zero values:"")
print(w_a_con.loc[:,w_a_con.any()])
","import pandas as pd

df = pd.read_csv('world_alcohol_consumption.csv')

df.head()

df.isnull().sum()

df.isnull().sum().sum()

df.isnull().sum().sum()

df.isnull().sum().sum()

df.isnull().sum().sum()

df.isnull().sum().sum()"
222,Write a Pandas program to generate sequences of fixed-frequency dates and time spans intervals. ,"import pandas as pd
print(""Sequences of fixed-frequency dates and time spans (1 H):\n"")
r1 = pd.date_range('2030-01-01', periods=10, freq='H')
print(r1)
print(""\nSequences of fixed-frequency dates and time spans (3 H):\n"")
r2 = pd.date_range('2030-01-01', periods=10, freq='3H')
print(r2)
","import pandas as pd

# Create a dataframe with the following columns:
# Date, Time, Duration
#
# Create a dataframe with the following columns:
# Date, Time, Duration
#
# Create a dataframe with the following columns:
# Date, Time, Duration
#
# Create a dataframe with the following columns:
# Date, Time, Duration
#
# Create a dataframe with the following columns:
# Date, Time, Duration
#
#"
223,Write a Python program to display a number with a comma separator. ,"x = 3000000
y = 30000000
print(""\nOriginal Number: "", x)
print(""Formatted Number with comma separator: ""+""{:,}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number with comma separator: ""+""{:,}"".format(y));
print()
",">>> import math
>>> print(math.ceil(5.6))
5
>>> print(math.floor(5.6))
5
>>> print(math.sqrt(5))
1.0
>>> print(math.factorial(5))
120
>>> print(math.factorial(5, 2))
120
>>> print(math.factorial(5, 3))
120
>>> print(math.factorial(5, 4))
120
>>> print(math.factorial"
224,"Write a NumPy program to convert a given list into an array, then again convert it into a list. Check initial list and final list are equal or not. ","import numpy as np
a = [[1, 2], [3, 4]]
x = np.array(a)
a2 = x.tolist()
print(a == a2)
","import numpy as np

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
arr = np.array(lst)
print(arr)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
arr = np.array(lst, dtype=np.int64)
print(arr"
225,Write a Python program to reverse a string. ,"def string_reverse(str1):

    rstr1 = ''
    index = len(str1)
    while index > 0:
        rstr1 += str1[ index - 1 ]
        index = index - 1
    return rstr1
print(string_reverse('1234abcd'))
","def reverse_string(string):
    return string[::-1]

print(reverse_string(""hello""))

""""""

def reverse_string(string):
    return string[::-1]

print(reverse_string(""hello""))"
226,Write a Pandas program to find integer index of rows with missing data in a given dataframe. ,"import pandas as pd
import numpy as np
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, None, 33, 30, 31, None]},
     index = ['t1', 't2', 't3', 't4', 't5', 't6'])
print(""Original DataFrame:"")
print(df)
index = df['weight'].index[df['weight'].apply(np.isnan)]
df_index = df.index.values.tolist()
print(""\nInteger index of rows with missing data in 'weight' column of the said dataframe:"")
print([df_index.index(i) for i in index])
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [1, 2, 3, 4, 5]})
print(df.isnull().sum())

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [1, 2, 3, 4, 5]})
# print"
227,Write a Python program to combine each line from first file with the corresponding line in second file. ,"with open('abc.txt') as fh1, open('test.txt') as fh2:
    for line1, line2 in zip(fh1, fh2):
        # line1 from abc.txt, line2 from test.txtg
        print(line1+line2)
		","python solution.py first.txt second.txt

""""""

import sys

def read_file(filename):
    """"""Read the file and return a list of lines""""""
    try:
        with open(filename, 'r') as f:
            return f.readlines()
    except IOError:
        print (""Error: Can't find the file"", filename)
        sys.exit()

def write_file(filename, lines):
    """"""Write the file with"
228,Write a Python program to pair up the consecutive elements of a given list. ,"def pair_consecutive_elements(lst):
    result = [[lst[i], lst[i + 1]] for i in range(len(lst) - 1)]
    return result
nums =  [1,2,3,4,5,6]
print(""Original lists:"")
print(nums)
print(""Pair up the consecutive elements of the said list:"")
print(pair_consecutive_elements(nums))
nums =  [1,2,3,4,5]
print(""\nOriginal lists:"")
print(nums)
print(""Pair up the consecutive elements of the said list:"")
print(pair_consecutive_elements(nums))
","def pair_up(lst):
    for i in range(len(lst)):
        if i == 0:
            lst[i], lst[i+1] = lst[i+1], lst[i]
        else:
            lst[i], lst[i-1] = lst[i-1], lst[i]
    return lst

lst = [1, 2, 3, 4, 5, 6, 7, 8"
229,Write a Pandas program to create a Pivot table and find survival of both gender and class affected. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = df.groupby(['sex', 'class'])['survived'].aggregate('mean').unstack()
print(result)
","# Create a Pandas dataframe
df = pd.DataFrame({'Gender': ['Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male',"
230,Write a Python program to find the maximum and minimum product from the pairs of tuple within a given list. ,"def tuple_max_val(nums):
    result_max = max([abs(x * y) for x, y in nums] )
    result_min = min([abs(x * y) for x, y in nums] )
    return result_max,result_min
nums = [(2, 7), (2, 6), (1, 8), (4, 9)]   
print(""The original list, tuple : "") 
print(nums)
print(""\nMaximum and minimum product from the pairs of the said tuple of list:"")
print(tuple_max_val(nums)) 
","def max_min_product(list):
    max_product = 0
    min_product = 0
    for i in range(len(list)):
        for j in range(i+1, len(list)):
            product = list[i][0] * list[j][0]
            if product > max_product:
                max_product = product
            if product < min_product:
                min_product = product
    return max_product"
231,Write a Python program to interleave multiple lists of the same length. Use itertools module. ,"import itertools

def interleave_multiple_lists(list1,list2,list3):
    result = list(itertools.chain(*zip(list1, list2, list3)))
    return result
     
list1 = [100,200,300,400,500,600,700]
list2 = [10,20,30,40,50,60,70]
list3 = [1,2,3,4,5,6,7]
print(""Original list:"")
print(""list1:"",list1)
print(""list2:"",list2)
print(""list3:"",list3)
print(""\nInterleave multiple lists:"")
print(interleave_multiple_lists(list1,list2,list3))
",">>> from itertools import combinations
>>> l1 = [1, 2, 3, 4, 5]
>>> l2 = [1, 2, 3, 4, 5, 6]
>>> l3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>> l4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,"
232,"Write a NumPy program to extract rows with unequal values (e.g. [1,1,2]) from 10x3 matrix. ","import numpy as np
nums = np.random.randint(0,4,(6,3))
print(""Original vector:"")
print(nums)
new_nums = np.logical_and.reduce(nums[:,1:] == nums[:,:-1], axis=1)
result = nums[~new_nums]
print(""\nRows with unequal values:"")
print(result)
","import numpy as np

matrix = np.array([[1,1,2],[2,3,4],[4,5,6]])

print(matrix[0][1])

# Output: 2

print(matrix[0,1])

# Output: 2

print(matrix[0,2])

# Output: 4

print(matrix[1,2])"
233,Write a Python script that takes input from the user and displays that input back in upper and lower cases. ,"user_input = input(""What's your favourite language? "")
print(""My favourite language is "", user_input.upper())
print(""My favourite language is "", user_input.lower())
","python solution.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution"
234,Write a Python program to find the siblings of tags in a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from
w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
<a class=""sister"" href=""http://example.com/lacie"" id=""link1"">Lacie</a>
<a class=""sister"" href=""http://example.com/tillie""  id=""link2"">Tillie</a>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc,""lxml"")
print(""\nSiblings of tags:"")
print(soup.select(""#link1 ~ .sister""))
print(soup.select(""#link1 + .sister""))
","import re

html = '''
<html>
<head>
<title>HTML Test</title>
</head>
<body>
<p>This is a test</p>
<p>This is a test</p>
<p>This is a test</p>
<p>This is a test</p>
<p>This is a test</p>
<p>This is a test</p>
<p>This is a test</p>"
235,Write a Python program to extract and display all the image links from en.wikipedia.org/wiki/Peter_Jeffrey_(RAAF_officer). ,"import requests
r = requests.get(""https://analytics.usa.gov/data/live/browsers.json"")
print(""90 days of visits broken down by browser for all sites:"")
print(r.json()['totals']['browser'])
","import urllib.request
import urllib.parse
import urllib.error

def get_url(url):
    try:
        req = urllib.request.Request(url)
        response = urllib.request.urlopen(req)
        return response.read()
    except urllib.error.URLError as e:
        if hasattr(e, 'code"
236,Write a NumPy program to add a new row to an empty NumPy array. ,"import numpy as np    
arr = np.empty((0,3), int)
print(""Empty array:"")
print(arr)
arr = np.append(arr, np.array([[10,20,30]]), axis=0)
arr = np.append(arr, np.array([[40,50,60]]), axis=0)
print(""After adding two new arrays:"")
print(arr)
","import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6]])
arr = np.append(arr, [[7, 8, 9]], axis=0)
print(arr)

arr = np.array([[1, 2, 3], [4, 5, 6]])
arr = np.append(arr, [[7, 8, 9]], axis=0)
print(arr)

arr = np.array"
237,Write a Python program to find the href of the first <a> tag of a given html document. ,"from bs4 import BeautifulSoup
html_doc = """"""
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html;
charset=iso-8859-1"">
<title>An example of HTML page</title>
</head>
<body>
<h2>This is an example HTML page</h2>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,
aliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac
habitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus
sagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.
Donec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque
adipiscing tortor, at condimentum elit elementum sed. Mauris dignissim
elementum nunc, non elementum felis condimentum eu. In in turpis quis erat
imperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,
euismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl
euismod porta.</p>
<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from w3resource.com</a></p>
<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from 
w3resource.com</a></p>
</body>
</html>
""""""
soup = BeautifulSoup(html_doc, 'html.parser')
print(""href of the first <a> tag:"")
print(soup.find('a').attrs['href'])

","import re

html = """"""
<html>
<head>
<title>First Head Title</title>
</head>
<body>
<p>First Head Title</p>
<p>Second Head Title</p>
<p>Third Head Title</p>
</body>
</html>
""""""

# Solution:

# regex = re.compile(r'<a href=""(.*?)"">')
# result = regex.find"
238,Write a Python program to convert an integer to binary keep leading zeros. ,"x = 12
print(format(x, '08b'))
print(format(x, '010b'))
","def convert_to_binary(num):
    binary = ''
    while num > 0:
        binary = str(num % 2) + binary
        num = num // 2
    return binary

print(convert_to_binary(5))

""""""

def convert_to_binary(num):
    binary = ''
    while num > 0:
        binary = str(num % 2) + binary
        num = num // 2
    return binary

print(convert"
239,Write a Python program to reverse strings in a given list of string values using lambda. ,"def reverse_strings_list(string_list):
    result = list(map(lambda x: """".join(reversed(x)), string_list))
    return result

colors_list = [""Red"", ""Green"", ""Blue"", ""White"", ""Black""]
print(""\nOriginal lists:"")
print(colors_list)
print(""\nReverse strings of the said given list:"")
print(reverse_strings_list(colors_list))
","def reverse_string(string):
    return string[::-1]

print(reverse_string(['a', 'b', 'c', 'd', 'e', 'f']))

""""""

def reverse_string(string):
    return string[::-1]

print(reverse_string(['a', 'b', 'c', 'd', 'e', 'f']))"
240,Write a NumPy program to count the frequency of unique values in NumPy array. ,"import numpy as np
a = np.array( [10,10,20,10,20,20,20,30, 30,50,40,40] )
print(""Original array:"")
print(a)
unique_elements, counts_elements = np.unique(a, return_counts=True)
print(""Frequency of unique values of the said array:"")
print(np.asarray((unique_elements, counts_elements)))
","import numpy as np

arr = np.array([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16"
241,"Write a NumPy program to calculate the difference between neighboring elements, element-wise, and prepend [0, 0] and append[200] to a given array. ","import numpy as np
x = np.array([1, 3, 5, 7, 0])
print(""Original array: "")
print(x)
r1 = np.ediff1d(x, to_begin=[0, 0], to_end=[200])
r2 = np.insert(np.append(np.diff(x), 200), 0, [0, 0])
assert np.array_equiv(r1, r2)
print(""Difference between neighboring elements, element-wise, and prepend [0, 0] and append[200] to the said array:"")
print(r2)
","import numpy as np

arr = np.array([[1, 2, 3, 4, 5],
                [6, 7, 8, 9, 10],
                [11, 12, 13, 14, 15],
                [16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25]])

print(arr)

diff = arr[1:4"
242,Write a Python program to calculate the area of the sector. ,"def sectorarea():
    pi=22/7
    radius = float(input('Radius of Circle: '))
    angle = float(input('angle measure: '))
    if angle >= 360:
        print(""Angle is not possible"")
        return
    sur_area = (pi*radius**2) * (angle/360)
    print(""Sector Area: "", sur_area)

sectorarea()
","def area(r, r1, r2, r3):
    return (r * (r1 + r2 + r3)) / 2

r = float(input(""Enter the radius of the sector: ""))
r1 = float(input(""Enter the radius of the first sector: ""))
r2 = float(input(""Enter the radius of the second sector: ""))
r3 = float(input(""Enter the radius of the third sector: ""))
print(""The area of the sector is: "", area"
243,"Write a NumPy program to print the full NumPy array, without truncation. ","import numpy as np
import sys
nums = np.arange(2000)
np.set_printoptions(threshold=sys.maxsize)
print(nums)
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(a)

# Solution:

# a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
# print(a)

# Solution:

# a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9,"
244,Write a Python program to extract all the text from a given web page. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""Text from the said page:"")
print(soup.get_text())

","import urllib.request
import re

url = ""http://py4e-data.dr-chuck.net/known_by_Fikri.html""
html = urllib.request.urlopen(url).read()

print(html)

# Extract the text from the URL

text = re.findall(r'<p>(.*?)</p>', html)

print(text)"
245,Write a Python program to convert given a dictionary to a list of tuples. ,"def test(d):
  return list(d.items())
 
d = {'Red': 1, 'Green': 3, 'White': 5, 'Black': 2, 'Pink': 4}
print(""Original Dictionary:"")
print(d)
print(""\nConvert the said dictionary to a list of tuples:"")
print(test(d))
","d = {'a': 1, 'b': 2, 'c': 3}

l = []
for i in d:
    l.append((i, d[i]))

print(l)

# Output:
# [('a', 1), ('b', 2), ('c', 3)]

# Hint:
# Use the dictionary keys() method to get the keys in the dictionary.
# Use the values() method to get the values in the dictionary.
# Use"
246,Write a Pandas program to select rows by filtering on one or more column(s) in a multi-index dataframe. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 37, 33, 30, 31, 32],
    'tcode': ['t1', 't2', 't3', 't4', 't5', 't6']})    
print(""Original DataFrame:"")
print(df)
print(""\nCreate MultiIndex on 'tcode' and 'school_code':"")
df = df.set_index(['tcode', 'school_code'])
print(df)
print(""\nSelect rows(s) from 'tcode' column:"")
print(df.query(""tcode == 't2'""))
print(""\nSelect rows(s) from 'school_code' column:"")
print(df.query(""school_code == 's001'""))
print(""\nSelect rows(s) from 'tcode' and 'scode' columns:"")
print(df.query((""tcode == 't1'"") and (""school_code == 's001'"")))
","import pandas as pd

# Create a dataframe
df = pd.DataFrame(
    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]],
    index=['a', 'b', 'c', 'd'],
    columns=['one', 'two', 'three', 'four']
)

# Create a new dataframe with only the rows that"
247,Write a Python program to find smallest and largest word in a given string. ,"def smallest_largest_words(str1):
    word = """";
    all_words = [];
    str1 = str1 + "" "";
    for i in range(0, len(str1)):
        if(str1[i] != ' '):
            word = word + str1[i];  
        else:
            all_words.append(word);  
            word = """";  
          
    small = large = all_words[0];  
   
#Find smallest and largest word in the str1  
    for k in range(0, len(all_words)):
        if(len(small) > len(all_words[k])):
            small = all_words[k];
        if(len(large) < len(all_words[k])):
            large = all_words[k];
    return small,large;

str1 = ""Write a Java program to sort an array of given integers using Quick sort Algorithm."";  
print(""Original Strings:\n"",str1)
small, large = smallest_largest_words(str1)  
print(""Smallest word: "" + small);  
print(""Largest word: "" + large); 
","def smallest_word(string):
    word = string.split()
    smallest = word[0]
    largest = word[-1]
    return smallest, largest

print(smallest_word(""The quick brown fox jumps over the lazy dog""))

""""""

def smallest_word(string):
    word = string.split()
    smallest = word[0]
    largest = word[-1]
    return smallest, largest

print(smallest_word(""The"
248,Write a Python program to find the length of a given dictionary values. ,"def test(dictt):
    result = {}
    for val in dictt.values(): 
        result[val] = len(val) 
    return result    

color_dict = {1 : 'red', 2 : 'green', 3 : 'black', 4 : 'white', 5 : 'black'}
print(""\nOriginal Dictionary:"")
print(color_dict)
print(""Length of dictionary values:"")
print(test(color_dict))

color_dict = {'1' : 'Austin Little', '2' : 'Natasha Howard', '3' : 'Alfred Mullins', '4' : 'Jamie Rowe'}
print(""\nOriginal Dictionary:"")
print(color_dict)
print(""Length of dictionary values:"")
print(test(color_dict))
","def length_of_dictionary(dictionary):
    return len(dictionary)

dictionary = {
    ""brand"": ""Ford"",
    ""model"": ""Mustang"",
    ""year"": 1964
}

print(length_of_dictionary(dictionary))

""""""

# Solution:

def length_of_dictionary(dictionary):
    return len(dictionary)

dictionary = {
    ""brand"": ""Ford"",
    ""model"": """
249,"Write a Python program to extract year, month and date value from current datetime using arrow module. ","import arrow
a = arrow.utcnow()
print(""Year:"")
print(a.year)
print(""\nMonth:"")
print(a.month)
print(""\nDate:"")
print(a.day)
","import arrow

current_date = arrow.now()
print(current_date.year)
print(current_date.month)
print(current_date.day)

# Solution:

import arrow

current_date = arrow.now()
print(current_date.year)
print(current_date.month)
print(current_date.day)

# Solution:

import arrow

current_date = arrow.now()
print("
250,Write a Pandas program to extract words starting with capital words from a given column of a given DataFrame. ,"import pandas as pd
import re as re
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','05/09/1998','12/02/2022','15/09/1997'],
    'address': ['9910 Surrey Avenue','92 N. Bishop Avenue','9910 Golden Star Avenue', '102 Dunbar St.', '17 West Livingston Court']
})

print(""Original DataFrame:"")
print(df)

def find_capital_word(str1):
    result = re.findall(r'\b[A-Z]\w+', str1)
    return result

df['caps_word_in']=df['address'].apply(lambda cw : find_capital_word(cw))
print(""\nExtract words starting with capital words from the sentences':"")
print(df)
","import pandas as pd

# Read the data into a DataFrame
df = pd.read_csv('/Users/srinivasan/Desktop/Python/data/data.csv')

# Create a list of words
words = df['text'].str.split(' ', expand=True)

# Extract the first word of each row
words = words.iloc[:, 0]

# Print the first word of each row
print(words)"
251,Write a Python program to join one or more path components together and split a given path in directory and file. ,"import os
path = r'g:\\testpath\\a.txt'
print(""Original path:"")
print(path)
print(""\nDir and file name of the said path:"")
print(os.path.split(path))
print(""\nJoin one or more path components together:"")
print(os.path.join(r'g:\\testpath\\','a.txt'))
","import os

# Create a directory
os.mkdir(""C:\\Users\\srin\\Desktop\\Python\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects\\Python_Projects"
252,"Write a Python program to randomize the order of the values of an list, returning a new list. ","from copy import deepcopy
from random import randint
def shuffle_list(lst):
  temp_lst = deepcopy(lst)
  m = len(temp_lst)
  while (m):
    m -= 1
    i = randint(0, m)
    temp_lst[m], temp_lst[i] = temp_lst[i], temp_lst[m]
  return temp_lst
nums = [1, 2, 3, 4, 5, 6]
print(""Original list: "",nums)
print(""\nShuffle the elements of the said list:"")
print(shuffle_list(nums))
","import random

def randomize(lst):
    random.shuffle(lst)
    return lst

print(randomize([1,2,3,4,5,6,7,8,9,10]))

# OUTPUT: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# OUTPUT: [1, 2, 3, 4, 5, 6, 7, 8, 9,"
253,Write a Python program to count the same pair in three given lists. ,"def count_same_pair(nums1, nums2, nums3):
    result = sum(m == n == o for m, n, o in zip(nums1, nums2, nums3))
    return result
nums1 = [1,2,3,4,5,6,7,8]
nums2 = [2,2,3,1,2,6,7,9]
nums3 = [2,1,3,1,2,6,7,9]
print(""Original lists:"")
print(nums1)
print(nums2)
print(nums3)
print(""\nNumber of same pair of the said three given lists:"")
print(count_same_pair(nums1, nums2, nums3))
","def count_same_pair(list1, list2):
    count = 0
    for i in range(len(list1)):
        for j in range(len(list2)):
            if list1[i] == list2[j]:
                count += 1
    return count

print(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8"
254,Write a Pandas program to create a Pivot table with multiple indexes from the data set of titanic.csv. ,"import pandas as pd
import numpy as np
df = pd.read_csv('titanic.csv')
result = pd.pivot_table(df, index = [""sex"",""age""], aggfunc=np.sum)
print(result)
","import pandas as pd
import numpy as np

titanic = pd.read_csv('titanic.csv')

# Create a pivot table with multiple columns
pivot = titanic.pivot_table(index='Sex', columns='Pclass', values='Survived')

# Print the pivot table
print(pivot)

# Create a pivot table with multiple rows
pivot = titanic.pivot_table(index"
255,Write a Python program to get the volume of a sphere with radius 6.,"
pi = 3.1415926535897931
r= 6.0
V= 4.0/3.0*pi* r**3
print('The volume of the sphere is: ',V)
","import math

radius = 6
volume = math.pi * (radius ** 3)
print(volume)

""""""

import math

radius = 6
volume = math.pi * (radius ** 3)
print(volume)"
256,"Write a Python program to traverse a given list in reverse order, also print the elements with original index. ","color = [""red"", ""green"", ""white"", ""black""]
print(""Original list:"")
print(color)
print(""\nTraverse the said list in reverse order:"")
for i in reversed(color):
    print(i)
print(""\nTraverse the said list in reverse order with original index:"")
for i, el in reversed(list(enumerate(color))):
    print(i, el) 
","def reverse_list(lst):
    for i in range(len(lst) - 1, -1, -1):
        print(lst[i])

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
reverse_list(lst)

""""""

def reverse_list(lst):
    for i in range(len(lst) - 1, -1, -1):"
257,"Write a NumPy program to create an array of zeros and three column types (integer, float, character). ","import numpy as np
x = np.zeros((3,), dtype=('i4,f4,a40'))
new_data = [(1, 2., ""Albert Einstein""), (2, 2., ""Edmond Halley""), (3, 3., ""Gertrude B. Elion"")]
x[:] = new_data
print(x)
","import numpy as np

# Create an array of zeros
zeros = np.zeros((3,4), dtype = np.int32)

# Create a three column array
arr = np.arange(12).reshape(3,4)

# Create a three column array with the same data type
arr_dt = np.arange(12, dtype = np.int32)

# Create a three column array with the same"
258,Write a NumPy program to stack 1-D arrays as row wise. ,"import numpy as np    
print(""\nOriginal arrays:"")
x = np.array((1,2,3))
y = np.array((2,3,4))
print(""Array-1"")
print(x)
print(""Array-2"")
print(y)
new_array =  np.row_stack((x, y))
print(""\nStack 1-D arrays as rows wise:"")
print(new_array)
","import numpy as np

arr = np.array([[1,2,3,4,5,6,7,8,9,10],
                [11,12,13,14,15,16,17,18,19,20],
                [21,22,23,24,25,26,27,28,29,30]])

print(arr)

# Solution:

# arr = np.array([[1,2,3,4,5,"
259,Write a Pandas program to add 100 days with reporting date of unidentified flying object (UFO). ,"import pandas as pd
from datetime import timedelta
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nAdd 100 days with reporting date:"")
df['New_doc_dt'] = df['Date_time'] + timedelta(days=180)
print(df)
","import pandas as pd

# Read the data from the csv file
df = pd.read_csv('UFO_data.csv')

# Create a new column called 'Reporting_date'
df['Reporting_date'] = pd.to_datetime(df['Reporting_date'])

# Create a new column called 'Unidentified_UFO'
df['Unidentified_UFO'] = df['Unidentified_UFO'].str.replace"
260,Write a NumPy program to compute numerical negative value for all elements in a given array. ,"import numpy as np
x = np.array([0, 1, -1])
print(""Original array: "")
print(x)
r1 = np.negative(x)
r2 = -x
assert np.array_equal(r1, r2)
print(""Numerical negative value for all elements of the said array:"")
print(r1)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

neg_arr = np.negative(arr)

print(neg_arr)

# Output:
# array([-1., -2., -3., -4., -5., -6., -7., -8., -9., -10.])

# Hint: You can use np.negative() function to solve"
261,Write a Python program to sort each sublist of strings in a given list of lists using lambda. ,"def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result
color1 = [[""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]]
print(""\nOriginal list:"")
print(color1)  
print(""\nAfter sorting each sublist of the said list of lists:"")
print(sort_sublists(color1))
","def sort_sublist(sublist):
    return sorted(sublist)

lst = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]
print(sort_sublist(lst))

""""""

# Solution 1

def sort_sublist(sublist):
    return sorted(sublist)

lst = [['a', 'b', 'c'],"
262,Write a Python program to generate the combinations of n distinct objects taken from the elements of a given list. ,"def combination(n, n_list):
    if n<=0:
        yield []
        return
    for i in range(len(n_list)):
        c_num = n_list[i:i+1]
        for a_num in combination(n-1, n_list[i+1:]):
            yield c_num + a_num
n_list = [1,2,3,4,5,6,7,8,9]
print(""Original list:"") 
print(n_list)
n = 2
result = combination(n, n_list)
print(""\nCombinations of"",n,""distinct objects:"")
for e in result:
     print(e)

","def combinations(n, arr):
    if n == 1:
        return [arr]
    else:
        return [arr] + combinations(n-1, arr[:-1])

print(combinations(5, [1, 2, 3, 4, 5]))

""""""

def combinations(n, arr):
    if n == 1:
        return [arr]
    else:
        return [arr] + combinations(n-1, arr"
263,Write a Python program to find all index positions of the maximum and minimum values in a given list of numbers. ,"def position_max_min(nums):
    max_val = max(nums)
    min_val = min(nums)
    max_result = [i for i, j in enumerate(nums) if j == max_val]
    min_result = [i for i, j in enumerate(nums) if j == min_val]
    return max_result,min_result

nums = [12,33,23,10,67,89,45,667,23,12,11,10,54]
print(""Original list:"")
print(nums)
result = position_max_min(nums)
print(""\nIndex positions of the maximum value of the said list:"")
print(result[0])
print(""\nIndex positions of the minimum value of the said list:"")
print(result[1])
","def max_min(nums):
    max_num = nums[0]
    min_num = nums[0]
    for i in range(1, len(nums)):
        if nums[i] > max_num:
            max_num = nums[i]
        if nums[i] < min_num:
            min_num = nums[i]
    return max_num, min_num"
264,Write a NumPy program to get the powers of an array values element-wise. ,"import numpy as np
x = np.arange(7)
print(""Original array"")
print(x)
print(""First array elements raised to powers from second array, element-wise:"")
print(np.power(x, 3))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])

print(a)

print(np.power(a, 2))

print(np.power(a, 2))

print(np.power(a, 2))

print(np.power(a, 2))

print(np.power(a, 2))

print(np.power(a, 2))

print(np.power(a"
265,Write a Python program to create a ctime formatted representation of the date and time using arrow module. ,"import arrow
print(""Ctime formatted representation of the date and time:"")
a = arrow.utcnow().ctime()
print(a) 
","import arrow

print(arrow.now().format('YYYY-MM-DD HH:mm:ss'))

""""""

import arrow

print(arrow.now().format('YYYY-MM-DD HH:mm:ss'))

""""""

import arrow

print(arrow.now().format('YYYY-MM-DD HH:mm:ss'))

""""""

import arrow

print(arrow.now().format('YYYY-MM-"
266,Write a NumPy program to create display every element of a NumPy array. ,"import numpy as np
x = np.arange(12).reshape(3, 4)
for x in np.nditer(x):
    print(x,end=' ')
print()
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

# Output:
[[1 2 3]
 [4 5 6]]

# Hint: You can use the built-in function np.array() to create a NumPy array.

# Hint: You can use the built-in function np.reshape() to reshape a NumPy array into a new shape.

# Hint"
267,Write a Pandas program to import excel data (employee.xlsx ) into a Pandas dataframe and find a list of employees where hire_date> 01-01-07. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx')
df[df['hire_date'] >='20070101']
","import pandas as pd

employee = pd.read_excel('employee.xlsx')

employee_list = employee.values.tolist()

for employee in employee_list:
    if employee[3] > '01-01-07':
        print(employee)

# Solution:

import pandas as pd"
268,Write a NumPy program to create a 2d array with 1 on the border and 0 inside. ,"import numpy as np
x = np.ones((5,5))
print(""Original array:"")
print(x)
print(""1 on the border and 0 inside in the array"")
x[1:-1,1:-1] = 0
print(x)
","import numpy as np

arr = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]])

print(arr)

# Solution:

# arr = np.array([[1, 2, 3"
269,Write a NumPy program to get the n largest values of an array. ,"import numpy as np
x = np.arange(10)
print(""Original array:"")
print(x)
np.random.shuffle(x)
n = 1
print (x[np.argsort(x)[-n:]])
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.nlargest(3))

# Output:
# [10, 9, 8]

# Hint:
# Use np.argsort() to get the indices of the elements in the array.
# Use np.sort() to sort the array in ascending order.
# Use np.argsort() to get the indices of the"
270,Write a Python program to find numbers within a given range where every number is divisible by every digit it contains. ,"def divisible_by_digits(start_num, end_num):
    return [n for n in range(start_num, end_num+1) \
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]
print(divisible_by_digits(1,22))
","import math

def divisors(n):
    divisors = []
    for i in range(1, int(math.sqrt(n)) + 1):
        if n % i == 0:
            divisors.append(i)
            if i!= n // i:
                divisors.append(n//i)
    return divisors

def solution(n):
    divisors = divisors(n)"
271,Write a Python program to extract h1 tag from example.com. ,"from urllib.request import urlopen
from bs4 import BeautifulSoup
html = urlopen('https://en.wikipedia.org/wiki/Main_Page')
bs = BeautifulSoup(html, ""html.parser"")
titles = bs.find_all(['h1', 'h2','h3','h4','h5','h6'])
print('List all the header tags :', *titles, sep='\n\n')
","import re

url = ""https://www.example.com""

# find all h1 tags
h1_tags = re.findall(r'<h1>(.+?)</h1>', url)

# extract h1 tag
h1_tag = h1_tags[0]

print(h1_tag)

# find all h2 tags
h2_tags = re.findall(r'<h2>(.+?)</h2>', url"
272,Write a Python program to remove a specified item using the index from an array. ,"from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print(""Original array: ""+str(array_num))
print(""Remove the third item form the array:"")
array_num.pop(2)
print(""New array: ""+str(array_num))
","def remove_item(arr, item):
    for i in range(len(arr)):
        if arr[i] == item:
            arr.pop(i)
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
item = 6
print(remove_item(arr, item))

""""""

def remove_item(arr, item):
    for i in range(len(arr)):"
273,Write a Python program to sort a given list of lists by length and value using lambda. ,"def sort_sublists(input_list):
    result = sorted(input_list, key=lambda l: (len(l), l))
    return result
list1 = [[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]]
print(""Original list:"")
print(list1)
print(""\nSort the list of lists by length and value:"")
print(sort_sublists(list1))
","def sort_by_length(lst):
    return sorted(lst, key=len)

lst = [[1,2,3,4,5], [2,4,6,8,10], [3,6,9,12,15], [1,5,7,9,11]]
print(sort_by_length(lst))

""""""

# Solution:

def sort_by_length(lst):
    return sorted(l"
274,Write a Python program to find the index position of the largest value smaller than a given number in a sorted list using Binary Search (bisect). ,"from bisect import bisect_left  
def Binary_Search(l, x): 
    i = bisect_left(l, x) 
    if i: 
        return (i-1) 
    else: 
        return -1  
nums = [1, 2, 3, 4, 8, 8, 10, 12] 
x = 5 
num_position  = Binary_Search(nums, x) 
if num_position  == -1: 
    print(""Not found..!"") 
else: 
    print(""Largest value smaller than "", x, "" is at index "", num_position )
","def find_index(arr, num):
    low = 0
    high = len(arr) - 1
    mid = 0
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] < num:
            low = mid + 1
        else:
            high = mid - 1
    return low

arr = [1, 2, 3, 4, 5, 6, 7,"
275,Write a NumPy program to get a copy of a matrix with the elements below the k-th diagonal zeroed. ,"import numpy as np
result  = np.triu([[1,2,3],[4,5,6],[7,8,9],[10,11,12]], -1)
print(""\nCopy of a matrix with the elements below the k-th diagonal zeroed:"")
print(result)
","import numpy as np

matrix = np.array([[1, 2, 3, 4, 5],
                   [6, 7, 8, 9, 10],
                   [11, 12, 13, 14, 15],
                   [16, 17, 18, 19, 20]])

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

# Solution:

#"
276,"Write a Python program which iterates the integers from 1 to 50. For multiples of three print ""Fizz"" instead of the number and for the multiples of five print ""Buzz"". For numbers which are multiples of both three and five print ""FizzBuzz"".","for fizzbuzz in range(51):
    if fizzbuzz % 3 == 0 and fizzbuzz % 5 == 0:
        print(""fizzbuzz"")
        continue
    elif fizzbuzz % 3 == 0:
        print(""fizz"")
        continue
    elif fizzbuzz % 5 == 0:
        print(""buzz"")
        continue
    print(fizzbuzz)
	","def fizzbuzz(n):
    if n % 3 == 0 and n % 5 == 0:
        return ""FizzBuzz""
    elif n % 3 == 0:
        return ""Fizz""
    elif n % 5 == 0:
        return ""Buzz""
    else:
        return str"
277,"Write a Python program to get a list with n elements removed from the left, right. ","def drop_left_right(a, n = 1):
  return a[n:], a[:-n] 
nums = [1, 2, 3]
print(""Original list elements:"")
print(nums)
result = drop_left_right(nums)
print(""Remove 1 element from left of the said list:"")
print(result[0])
print(""Remove 1 element from right of the said list:"")
print(result[1])
nums = [1, 2, 3, 4]
print(""\nOriginal list elements:"")
print(nums)
result = drop_left_right(nums,2)
print(""Remove 2 elements from left of the said list:"")
print(result[0])
print(""Remove 2 elements from right of the said list:"")
print(result[1])
nums = [1, 2, 3, 4, 5, 6]
print(""\nOriginal list elements:"")
print(nums)
result = drop_left_right(nums)
print(""Remove 7 elements from left of the said list:"")
print(result[0])
print(""Remove 7 elements from right of the said list:"")
print(result[1])
","def remove_left(lst):
    return lst[1:]

def remove_right(lst):
    return lst[:-1]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(remove_left(lst))
print(remove_right(lst))

""""""

# Solution 1

def remove_left(lst):
    return lst[1:]"
278,Write a Python program to list the tables of given SQLite database file. ,"import sqlite3
from sqlite3 import Error
def sql_connection():
   try:
     conn = sqlite3.connect('mydatabase.db')
     return conn
   except Error:
     print(Error)
 
def sql_table(conn):
   cursorObj = conn.cursor()
# Create two tables
   cursorObj.execute(""CREATE TABLE agent_master(agent_code char(6),agent_name char(40),working_area char(35),commission decimal(10,2),phone_no char(15) NULL);"")
   cursorObj.execute(""CREATE TABLE temp_agent_master(agent_code char(6),agent_name char(40),working_area char(35),commission decimal(10,2),phone_no char(15) NULL);"")
   print(""List of tables:"")
   cursorObj.execute(""SELECT name FROM sqlite_master WHERE type='table';"")
   print(cursorObj.fetchall())
   conn.commit()
sqllite_conn = sql_connection()
sql_table(sqllite_conn)
if (sqllite_conn):
 sqllite_conn.close()
 print(""\nThe SQLite connection is closed."")
","import sqlite3

conn = sqlite3.connect('sqlite_python.db')
c = conn.cursor()

c.execute(""""""CREATE TABLE IF NOT EXISTS students (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    age INTEGER NOT NULL,
    gender TEXT NOT NULL
)"""""")

c.execute(""""""CREATE TABLE IF NOT EXISTS teachers (
    id INTEGER PR"
279,"Write a Python program to split values into two groups, based on the result of the given filter list. ","def bifurcate(colors, filter):
  return [
    [x for x, flag in zip(colors, filter) if flag],
    [x for x, flag in zip(colors, filter) if not flag]
  ]
print(bifurcate(['red', 'green', 'blue', 'pink'], [True, True, False, True]))
","def split_values(values, filter_list):
    result = []
    for value in values:
        if filter_list.count(value) > 0:
            result.append(value)
    return result

print(split_values([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def split_values"
280,Write a Python program to store a given dictionary in a json file. ,"d = {""students"":[{""firstName"": ""Nikki"", ""lastName"": ""Roysden""},
               {""firstName"": ""Mervin"", ""lastName"": ""Friedland""},
               {""firstName"": ""Aron "", ""lastName"": ""Wilkins""}],
""teachers"":[{""firstName"": ""Amberly"", ""lastName"": ""Calico""},
         {""firstName"": ""Regine"", ""lastName"": ""Agtarap""}]}
print(""Original dictionary:"")
print(d)
print(type(d))
import json
 
with open(""dictionary"", ""w"") as f:
   json.dump(d, f, indent = 4, sort_keys = True)
 
print(""\nJson file to dictionary:"")
with open('dictionary') as f:
 data = json.load(f)
print(data)
","import json

d = {
    ""name"": ""John"",
    ""age"": 30,
    ""city"": ""New York""
}

with open(""my_json.json"", ""w"") as f:
    json.dump(d, f, indent=4)

# Output:
# {
#   ""name"": ""John"",
#   ""age"": 30,
#   ""city"": ""New York""
# }

# Python program to store a given dictionary in"
281,Write a Python program to add two objects if both objects are an integer type. ,"def add_numbers(a, b):
   if not (isinstance(a, int) and isinstance(b, int)):
       return ""Inputs must be integers!""
   return a + b
print(add_numbers(10, 20))
print(add_numbers(10, 20.23))
print(add_numbers('5', 6))
print(add_numbers('5', '6'))
","def add(a, b):
    if type(a) == int or type(b) == int:
        return a + b
    else:
        return ""Please enter two integers""

print(add(1, 2))
print(add(1, 3))
print(add(1, 4))
print(add(1, 5))
print(add(1, 6))
print(add(1, 7))
print(add(1, 8))
print(add"
282,Write a Python program to count the number of items of a given doubly linked list. ,"class Node(object):
    # Singly linked node
    def __init__(self, data=None, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev

class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, data):
        # Append an item 
        new_item = Node(data, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item

        self.count += 1


items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')
items.append_item('SQL')

print(""Number of items of the  Doubly linked list:"",items.count)
","def count_doubly_linked_list(head):
    count = 0
    while head:
        count += 1
        head = head.next
    return count

# Test your solution
head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(count_doubly_linked_list(head))

# Output:
# 5
# 6
# 7
# 8
# 9
# 10"
283,Write a Pandas program to combine the columns of two potentially differently-indexed DataFrames into a single result DataFrame. ,"import pandas as pd
data1 = pd.DataFrame({'A': ['A0', 'A1', 'A2'],
                      'B': ['B0', 'B1', 'B2']},
                     index=['K0', 'K1', 'K2'])

data2 = pd.DataFrame({'C': ['C0', 'C2', 'C3'],
                      'D': ['D0', 'D2', 'D3']},
                     index=['K0', 'K2', 'K3'])
 
print(""Original DataFrames:"")
print(data1)
print(""--------------------"")
print(data2)
print(""\nMerged Data (Joining on index):"")
result = data1.join(data2)
print(result)
","import pandas as pd

df1 = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})
df2 = pd.DataFrame({'col1': [7, 8, 9], 'col2': [10, 11, 12]})

df = pd.concat([df1, df2], axis=1)
print(df)

# Solution"
284,Write a Python program to count number of items in a dictionary value that is a list. ,"dict =  {'Alex': ['subj1', 'subj2', 'subj3'], 'David': ['subj1', 'subj2']}
ctr = sum(map(len, dict.values()))
print(ctr)
","def count_items(dictionary):
    count = 0
    for i in dictionary.values():
        count += len(i)
    return count

dictionary = {'a': ['b', 'c'], 'b': ['d', 'e'], 'c': ['f', 'g'], 'd': ['h', 'i'], 'e': ['j', 'k'], 'f': ['l','m'], 'g': ['n', 'o'"
285,Write a Python program to find the elements of a given list of strings that contain specific substring using lambda. ,"def find_substring(str1, sub_str):
    result = list(filter(lambda x: sub_str in x, str1))
    return result
colors = [""red"", ""black"", ""white"", ""green"", ""orange""]
print(""Original list:"")
print(colors)

sub_str = ""ack""
print(""\nSubstring to search:"")
print(sub_str)
print(""Elements of the said list that contain specific substring:"")
print(find_substring(colors, sub_str))
sub_str = ""abc""
print(""\nSubstring to search:"")
print(sub_str)
print(""Elements of the said list that contain specific substring:"")
print(find_substring(colors, sub_str))
","def find_substring(str, substring):
    return [i for i in str if substring in i]

str = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"","
286,Write a Pandas program to generate holidays between two dates using the US federal holiday calendar. ,"import pandas as pd
from pandas.tseries.holiday import *
sdt = datetime(2021, 1, 1)
edt = datetime(2030, 12, 31)
print(""Holidays between 2021-01-01 and 2030-12-31 using the US federal holiday calendar."")
cal = USFederalHolidayCalendar()
for dt in cal.holidays(start=sdt, end=edt): 
    print (dt)
","import pandas as pd

# Create a dataframe with the following columns:
# Date, Month, Weekday, Holiday
#
# Create a new dataframe called holidays with the following columns:
# Date, Weekday, Holiday
#
# Create a new dataframe called holiday_df with the following columns:
# Date, Weekday, Holiday
#
# Create a new dataframe called holiday_df_2 with the following columns:
# Date, Weekday, Holiday
#"
287,Write a NumPy program to get all 2D diagonals of a 3D NumPy array. ,"import numpy as np
np_array = np.arange(3*4*5).reshape(3,4,5)
print(""Original Numpy array:"")
print(np_array)
print(""Type: "",type(np_array))
result = np.diagonal(np_array, axis1=1, axis2=2)
print(""\n2D diagonals: "")
print(result)
print(""Type: "",type(result))
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a[0, :])

# solution
print(a[0, :])

# solution
print(a[0, :])

# solution
print(a[0, :])

# solution
print(a[0, :])

# solution
print(a[0"
288,Write a Python program to solve the Fibonacci sequence using recursion. ,"def fibonacci(n):
  if n == 1 or n == 2:
    return 1
  else:
    return (fibonacci(n - 1) + (fibonacci(n - 2)))

print(fibonacci(7))
","def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

print(fib(5))

""""""

# Solution

def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-"
289,Write a NumPy program to access an array by column. ,"import numpy as np
x= np.arange(9).reshape(3,3)
print(""Original array elements:"")
print(x)
print(""Access an array by column:"")
print(""First column:"")
print(x[:,0])
print(""Second column:"")
print(x[:,1])
print(""Third column:"")
print(x[:,2])
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print(a[0, 1])

# Output: 2

# a[0, 1] = 2

# Output: 3

# a[0, 1] = 3

# Output: 7

# a[0, 1] = 7

# Output: 8

# a[0, 1] = 8"
290,Write a Python program to get the sum of a non-negative integer. ,"def sumDigits(n):
  if n == 0:
    return 0
  else:
    return n % 10 + sumDigits(int(n / 10))

print(sumDigits(345))
print(sumDigits(45))
","def sum_non_negative_int(n):
    return n + sum(range(n))

""""""

def sum_non_negative_int(n):
    return n + sum(range(n))

print(sum_non_negative_int(5))"
291,Write a NumPy program to create and display every element of a NumPy array in Fortran order. ,"import numpy as np
x = np.arange(12).reshape(3, 4)
print(""Elements of the array in Fortan array:"")
for x in np.nditer(x, order=""F""):
    print(x,end=' ')
print(""\n"")
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])

print(a)

# a = np.array([[1, 2, 3], [4, 5, 6]])
# print(a)
# print(a.T)
# print(a.T.shape)
# print(a.T.flatten())
# print(a.T.flatten().shape)"
292,Write a Python program to check whether a specified list is sorted or not. ,"def is_sort_list(nums):
    result = all(nums[i] <= nums[i+1] for i in range(len(nums)-1))
    return result

nums1 = [1,2,4,6,8,10,12,14,16,17]
print (""Original list:"")
print(nums1)
print(""\nIs the said list is sorted!"")
print(is_sort_list(nums1)) 

nums2 = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]
print (""\nOriginal list:"")
print(nums1)
print(""\nIs the said list is sorted!"")
print(is_sort_list(nums2))
","def isSorted(lst):
    if len(lst) == 0:
        return True
    if len(lst) == 1:
        return lst[0] == lst[0]
    if lst[0] > lst[1]:
        return False
    return isSorted(lst[1:])

print(isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(is"
293,Write a NumPy program to create a 3x3 identity matrix. ,"import numpy as np
array_2D=np.identity(3)
print('3x3 matrix:')
print(array_2D)
","import numpy as np

A = np.array([[1, 2, 3],
              [4, 5, 6],
              [7, 8, 9]])

print(A)

# Solution:
A = np.eye(3)
print(A)

# Solution:
A = np.identity(3)
print(A)

# Solution:
A = np.array([[1, 2, 3],
              [4, 5, 6],"
294,"Write a Python program to get string representing the date, controlled by an explicit format string. ","import arrow
a = arrow.utcnow()
print(""Current datetime:"")
print(a)
print(""\nString representing the date, controlled by an explicit format string:"")
print(arrow.utcnow().strftime('%d-%m-%Y %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%m-%d %H:%M:%S'))
print(arrow.utcnow().strftime('%Y-%d-%m %H:%M:%S'))
","import datetime

def date_converter(date):
    return datetime.datetime.strptime(date, '%d-%m-%Y').strftime('%Y-%m-%d')

print(date_converter('2021-01-01'))

""""""

# Solution 1

import datetime

def date_converter(date):
    return datetime.datetime.strptime(date, '"
295,Write a Python program to remove the first occurrence of a specified element from an array. ,"from array import *
array_num = array('i', [1, 3, 5, 3, 7, 1, 9, 3])
print(""Original array: ""+str(array_num))
print(""Remove the first occurrence of 3 from the said array:"")
array_num.remove(3)
print(""New array: ""+str(array_num))
","def remove_first(arr, x):
    for i in range(len(arr)):
        if arr[i] == x:
            arr.pop(i)
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
x = 5
print(remove_first(arr, x))

""""""

def remove_first(arr, x):
    for i in range(len(arr)):"
296,Write a Pandas program to extract word mention someone in tweets using @ from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'tweets': ['@Obama says goodbye','Retweets for @cash','A political endorsement in @Indonesia', '1 dog = many #retweets', 'Just a simple #egg']
    })
print(""Original DataFrame:"")
print(df)
def find_at_word(text):
    word=re.findall(r'(?<[emailprotected])\w+',text)
    return "" "".join(word)

df['at_word']=df['tweets'].apply(lambda x: find_at_word(x))
print(""\Extracting @word from dataframe columns:"")
print(df)
","import pandas as pd

df = pd.read_csv('tweets.csv')

df['mention'] = df['text'].apply(lambda x: ""@"" in x)

print(df.head())

df.to_csv('tweets_with_mentions.csv')

# Solution:

# df = pd.read_csv('tweets.csv')
# df['mention']"
297,Write a Python program to calculate the sum of the positive and negative numbers of a given list of numbers using lambda function. ,"nums = [2, 4, -6, -9, 11, -12, 14, -5, 17]
print(""Original list:"",nums)

total_negative_nums = list(filter(lambda nums:nums<0,nums))
total_positive_nums = list(filter(lambda nums:nums>0,nums))

print(""Sum of the positive numbers: "",sum(total_negative_nums))
print(""Sum of the negative numbers: "",sum(total_positive_nums))
","def sum_numbers(numbers):
    return sum(numbers)

print(sum_numbers([1, 2, 3, 4, 5]))

""""""

# Solution 1

def sum_numbers(numbers):
    return sum(numbers)

print(sum_numbers([1, 2, 3, 4, 5]))

# Solution 2

def sum_numbers(numbers):
    return"
298,"Write a Pandas program to split the following dataframe into groups, group by month and year based on order date and find the total purchase amount year wise, month wise. ","import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['05-10-2012','09-10-2012','05-10-2013','08-17-2013','10-09-2013','07-27-2014','10-09-2012','10-10-2012','10-10-2012','06-17-2014','07-08-2012','04-25-2012'],
'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
df['ord_date']= pd.to_datetime(df['ord_date']) 
print(""\nYear wise Month wise purchase amount:"")
result = df.groupby([df['ord_date'].dt.year, df['ord_date'].dt.month]).agg({'purch_amt':sum})
print(result)
","import pandas as pd
import numpy as np

df = pd.read_csv(""purchase_data.csv"")

df.groupby(['order_date','month'])['total_purchase_amount'].sum().reset_index()

df.groupby(['order_date','month'])['total_purchase_amount'].sum().reset_index()"
299,Write a Python code to create a program for Bitonic Sort. ,"#License:  https://bit.ly/2InTS3W 
# Python program for Bitonic Sort. Note that this program 
# works only when size of input is a power of 2. 
# The parameter dir indicates the sorting direction, ASCENDING 
# or DESCENDING; if (a[i] > a[j]) agrees with the direction, 
# then a[i] and a[j] are interchanged.*/ 
def compAndSwap(a, i, j, dire):
    if (dire == 1 and a[i] > a[j]) or (dire == 0 and a[i] < a[j]):
        a[i], a[j] = a[j], a[i]
        # It recursively sorts a bitonic sequence in ascending order,
# if dir = 1, and in descending order otherwise (means dir=0).
# The sequence to be sorted starts at index position low, 
# the parameter cnt is the number of elements to be sorted. 
def bitonicMerge(a, low, cnt, dire):
    if cnt > 1:
        k = int(cnt / 2)
        for i in range(low, low + k):
            compAndSwap(a, i, i + k, dire)
        bitonicMerge(a, low, k, dire)
        bitonicMerge(a, low + k, k, dire)

        # This funcion first produces a bitonic sequence by recursively


# sorting its two halves in opposite sorting orders, and then
# calls bitonicMerge to make them in the same order 
def bitonicSort(a, low, cnt, dire):
    if cnt > 1:
        k = int(cnt / 2)
        bitonicSort(a, low, k, 1)
        bitonicSort(a, low + k, k, 0)
        bitonicMerge(a, low, cnt, dire)

        # Caller of bitonicSort for sorting the entire array of length N


# in ASCENDING order
def sort(a, N, up):
    bitonicSort(a, 0, N, up)


# Driver code to test above
a = []
print(""How many numbers u want to enter?"");
n = int(input())
print(""Input the numbers:"");
for i in range(n):
    a.append(int(input()))
up = 1

sort(a, n, up)
print(""\n\nSorted array is:"")
for i in range(n):
    print(""%d"" % a[i])
","def bitonic_sort(arr):
    # Write your code here
    arr.sort()
    for i in range(len(arr)):
        if arr[i] > arr[i+1]:
            arr[i], arr[i+1] = arr[i+1], arr[i]
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(bitonic_sort(arr))

"""""""
300,Write a Python program to get the cumulative sum of the elements of a given list. ,"from itertools import accumulate
def cumsum(lst):
  return list(accumulate(lst))
nums = [1,2,3,4]
print(""Original list elements:"")
print(nums)
print(""Cumulative sum of the elements of the said list:"")
print(cumsum(nums)) 
nums = [-1,-2,-3,4]
print(""\nOriginal list elements:"")
print(nums)
print(""Cumulative sum of the elements of the said list:"")
print(cumsum(nums))
","def cum_sum(lst):
    sum = 0
    for i in lst:
        sum += i
    return sum

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(cum_sum(lst))

""""""

# Solution

def cum_sum(lst):
    sum = 0
    for i in lst:
        sum += i
    return sum

lst ="
301,Write a NumPy program to create an array which looks like below array. ,"import numpy as np
x = np.tri(4, 3, -1)
print(x)
","arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

arr = np.array([[1, 2, 3], [4, 5, 6], [7"
302,Write a Python program to extract common index elements from more than one given list. ,"def extract_index_ele(l1, l2, l3):
    result = []
    for m, n, o in zip(l1, l2, l3):
        if (m == n == o):
            result.append(m)
    return result

nums1 = [1, 1, 3, 4, 5, 6, 7]
nums2 = [0, 1, 2, 3, 4, 5, 7]
nums3 = [0, 1, 2, 3, 4, 5, 7]

print(""Original lists:"")
print(nums1)
print(nums2)
print(nums3)
print(""\nCommon index elements of the said lists:"") 
print(extract_index_ele(nums1, nums2, nums3))
","def common_index(lst1, lst2):
    common_index = []
    for i in range(len(lst1)):
        if lst1[i] in lst2:
            common_index.append(lst1[i])
    return common_index

lst1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
lst2 = [1, 2, 3, 4, 5,"
303,Write a Pandas program to check if a specified value exists in single and multiple column index dataframe. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32]},
     index =  ['t1', 't2', 't3', 't4', 't5', 't6'])
print(""Original DataFrame with single index:"")
print(df)
print(""\nCheck a value is exist in single column index dataframe:"")
print('t1' in df.index)
print('t11' in df.index)
print(""\nCreate MultiIndex using columns 't_id', school_code and 'class':"")
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32],
    't_id': ['t1', 't2', 't3', 't4', 't5', 't6']})
df1 = df.set_index(['t_id', 'school_code', 'class'])
print(df1)
print(""\nCheck a value is exist in multiple columns index dataframe:"")
print('t4' in df1.index.levels[0])
print('t4' in df1.index.levels[1])
print('t4' in df1.index.levels[2])
","import pandas as pd

df = pd.DataFrame({""col1"": [1, 2, 3, 4, 5], ""col2"": [10, 20, 30, 40, 50]})
print(df)

# Solution:

# df = pd.DataFrame({""col1"": [1, 2, 3, 4, 5], ""col2"": [10, 20, 30, 40, 50]})
# print(df)"
304,Write a Python program to count the elements in a list until an element is a tuple. ,"num = [10,20,30,(10,20),40]
ctr = 0
for n in num:
    if isinstance(n, tuple):
        break
    ctr += 1
print(ctr)
","def count_tuple(lst):
    count = 0
    for i in lst:
        if isinstance(i, tuple):
            count += 1
    return count

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(count_tuple(lst))

""""""

# Solution:

def count_tuple(lst):
    count = 0
    for i in lst"
305,"Write a Pandas program to create a stacked histograms plot of opening, closing, high, low stock prices of Alphabet Inc. between two specific dates. ","import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv(""alphabet_stock_data.csv"")
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')                         
df['Date'] = pd.to_datetime(df['Date']) 
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)
df1 = df.loc[new_df]
df2 = df1[['Open','Close','High','Low']]
plt.figure(figsize=(25,25))
df2.plot.hist(stacked=True, bins=20)
plt.suptitle('Opening/Closing/High/Low stock prices of Alphabet Inc.,\n From 01-04-2020 to 30-09-2020', fontsize=12, color='blue')
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Alphabet Inc.csv')

df['Date'] = pd.to_datetime(df['Date'])
df['Date'] = df['Date'].dt.strftime('%Y-%m-%d')

df['Open'] = df['Open'].astype(float)"
306,Write a Python program to add a number to each element in a given list of numbers. ,"def add_val_to_list(lst, add_val):
    result = lst
    result = [x+add_val for x in result]   
    return result    
nums = [3,8,9,4,5,0,5,0,3]
print(""Original lists:"")
print(nums)
add_val = 3
print(""\nAdd"",add_val,""to each element in the said list:"")
print(add_val_to_list(nums, add_val))
nums = [3.2,8,9.9,4.2,5,0.1,5,3.11,0]
print(""\nOriginal lists:"")
print(nums)
add_val = .51
print(""\nAdd"",add_val,""to each element in the said list:"")
print(add_val_to_list(nums, add_val))
","def add_numbers(numbers):
    for i in range(len(numbers)):
        numbers[i] = numbers[i] + 1
    return numbers

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(add_numbers(numbers))

""""""

# Solution 1

def add_numbers(numbers):
    for i in range(len(numbers)):"
307,Write a Python program to create a multidimensional list (lists of lists) with zeros. ,"nums = []

for i in range(3):

    nums.append([])

    for j in range(2):

        nums[i].append(0)
print(""Multidimensional list:"")
print(nums)
","def create_list(n):
    l = []
    for i in range(n):
        l.append([])
    return l

n = int(input(""Enter the number of rows: ""))
print(create_list(n))

""""""

# Solution 1

def create_list(n):
    l = []
    for i in range(n):
        l.append([])
    return l

n = int(input("""
308,Write a Pandas program to find the positions of numbers that are multiples of 5 of a given series. ,"import pandas as pd
import numpy as np
num_series = pd.Series(np.random.randint(1, 10, 9))
print(""Original Series:"")
print(num_series)
result = np.argwhere(num_series % 5==0)
print(""Positions of numbers that are multiples of 5:"")
print(result)
","import pandas as pd

series = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

result = series.is_monotonic_increasing
print(result)

result = series.is_monotonic_decreasing
print(result)

result = series.is_unique
print(result)

result = series.is_monotonic
print(result)"
309,Write a Python program to get the n (non-negative integer) copies of the first 2 characters of a given string. Return the n copies of the whole string if the length is less than 2. ,"def substring_copy(str, n):
  flen = 2
  if flen > len(str):
    flen = len(str)
  substr = str[:flen]
  
  result = """"
  for i in range(n):
    result = result + substr
  return result
print(substring_copy('abcdef', 2))
print(substring_copy('p', 3));
","def get_n_copies(string, n):
    return string[:n] + string[n:]

print(get_n_copies('python', 2))
print(get_n_copies('python', 3))
print(get_n_copies('python', 4))
print(get_n_copies('python', 5))
print(get"
310,"Write a NumPy program to partition a given array in a specified position and move all the smaller elements values to the left of the partition, and the remaining values to the right, in arbitrary order (based on random choice). ","import numpy as np
nums = np.array([70, 50, 20, 30, -11, 60, 50, 40])
print(""Original array:"")
print(nums)
print(""\nAfter partitioning on 4 the position:"")
print(np.partition(nums, 4))
","import random

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Partition the array in two equal parts
# Partition the array in two equal parts
# Partition the array in two equal parts
# Partition the array in two equal parts
# Partition the array in two equal parts
# Partition"
311,"Write a Pandas program to create a Pivot table and find the total sale amount region wise, manager wise, sales man wise where Manager = ""Douglas"". ","import pandas as pd
df = pd.read_excel('E:\SaleData.xlsx')
table = pd.pivot_table(df,index=[""Region"",""Manager"",""SalesMan""], values=""Sale_amt"")
print(table.query('Manager == [""Douglas""]'))
","# Solution:

# Create a dataframe
df = pd.DataFrame({
    'Region': ['East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East Asia', 'East"
312,Write a Python program to check whether a specified list is sorted or not using lambda. ,"def is_sort_list(nums, key=lambda x: x):
    for i, e in enumerate(nums[1:]):
        if key(e) < key(nums[i]): 
            return False
    return True
nums1 = [1,2,4,6,8,10,12,14,16,17]
print (""Original list:"")
print(nums1)
print(""\nIs the said list is sorted!"")
print(is_sort_list(nums1)) 
nums2 = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]
print (""\nOriginal list:"")
print(nums1)
print(""\nIs the said list is sorted!"")
print(is_sort_list(nums2))
","def isSorted(lst):
    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    return True

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(isSorted(lst))

""""""

# Solution 1

def isSorted(lst):
    for i in range(len("
313,Write a Python program to rotate a Deque Object specified number (positive) of times. ,"import collections
# declare an empty deque object
dq_object = collections.deque()
# Add elements to the deque - left to right
dq_object.append(2)
dq_object.append(4)
dq_object.append(6)
dq_object.append(8)
dq_object.append(10)
print(""Deque before rotation:"")
print(dq_object)
# Rotate once in positive direction
dq_object.rotate()
print(""\nDeque after 1 positive rotation:"")
print(dq_object)
# Rotate twice in positive direction
dq_object.rotate(2)
print(""\nDeque after 2 positive rotations:"")
print(dq_object)
","def rotate(d, n):
    for i in range(n):
        d.append(d.popleft())
    return d

# Driver Code
d = deque()
d.append(1)
d.append(2)
d.append(3)
d.append(4)
d.append(5)
d.append(6)
d.append(7)
d.append(8)
d.append(9)
d."
314,"Write a Python code to send a request to a web page and stop waiting for a response after a given number of seconds. In the event of times out of request, raise Timeout exception. ","import requests
print(""timeout = 0.001"")
try:
    r = requests.get('https://github.com/', timeout = 0.001)
    print(r.text)
except requests.exceptions.RequestException as e:
    print(e)    

print(""\ntimeout = 1.0"")    
try:
    r = requests.get('https://github.com/', timeout = 1.0)
    print(""Connected....!"")
except requests.exceptions.RequestException as e:
    print(e)
","import time

def get_url(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.text
        else:
            raise Exception(""Error: {}"".format(response.status_code))
    except Exception as e:
        print(e)
        raise Exception(""Error: {}"".format(e"
315,Write a Python program to create a doubly linked list and print nodes from current position to first node. ,"class Node(object):
    # Doubly linked node
    def __init__(self, data=None, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev
	
class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, data):
        # Append an item 
        new_item = Node(data, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item

        self.count += 1

    def print_foward(self):
        for node in self.iter():
            print(node)

    def print_backward(self):
        current = self.tail
        while current:
            print(current.data)
            current = current.prev
            
    def iter(self):
        # Iterate the list
        current = self.head
        while current:
            item_val = current.data
            current = current.next
            yield item_val

items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')

print(""Print Items in the Doubly linked backwards:"")
items.print_backward()
","# Node class
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

# Doubly Linked List class
class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0

    def insert_at_begining(self, data):
        new_node ="
316,Write a Pandas program to convert a specified character column in title case in a given DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'zefsalf', 'sdfslew', 'zekfsdf'],
    'date_of_sale': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]
})

print(""Original DataFrame:"")
print(df)

print(""\nTitle cases:"")
df['company_code_title_cases'] = list(map(lambda x: x.title(), df['company_code']))
print(df)
","import pandas as pd

df = pd.read_csv('https://github.com/jbrownlee/Datasets/blob/master/pandas_datareader/data/airline.csv?raw=true')

df.columns = df.columns.str.title()
df.head()

df.head()

df.head()

df.head()

df.head()

df.head()"
317,Write a Pandas program to convert given series into a dataframe with its index as another column on the dataframe. ,"import numpy as np
import pandas as pd
char_list = list('ABCDEFGHIJKLMNOP')
num_arra = np.arange(8)
num_dict = dict(zip(char_list, num_arra))
num_ser = pd.Series(num_dict)
df = num_ser.to_frame().reset_index()
print(df.head())
","import pandas as pd

series = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

df = pd.DataFrame(series)

df.index.name = 'index'

print(df)

# Solution:

# import pandas as pd

# series = pd.Series([1, 2, 3, 4, 5, 6, 7, 8"
318,Write a NumPy program to make all the elements of a given string to a numeric string of 5 digits with zeros on its left. ,"import numpy as np
x = np.array(['2', '11', '234', '1234', '12345'], dtype=np.str)
print(""\nOriginal Array:"")
print(x)
r = np.char.zfill(x, 5)
print(""\nNumeric string of 5 digits with zeros:"")
print(r) 
","import numpy as np

s = ""123456789""

# convert string to array
arr = np.array(s)

# convert array to string
s = arr.astype(str)

# convert string to array
arr = np.array(s)

# convert array to string
s = arr.astype(str)

# convert string to array
arr = np.array(s)"
319,Write a Python program to create a list with the unique values filtered out. ,"from collections import Counter
def filter_unique(lst):
  return [item for item, count in Counter(lst).items() if count > 1] 
print(filter_unique([1, 2, 2, 3, 4, 4, 5]))
","def unique_list(lst):
    new_lst = []
    for i in lst:
        if i not in new_lst:
            new_lst.append(i)
    return new_lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(unique_list(lst))

""""""

# Solution:

def unique_list(lst):
    new_l"
320,Write a Python program to set a random seed and get a random number between 0 and 1. Use random.random. ,"import random 
print(""Set a random seed and get a random number between 0 and 1:"")
random.seed(0)
new_random_value = random.random()
print(new_random_value)
random.seed(1)
new_random_value = random.random()
print(new_random_value)
random.seed(2)
new_random_value = random.random()
print(new_random_value)
","import random

print(""Random number between 0 and 1: "", random.random())

""""""

# Solution

import random

print(""Random number between 0 and 1: "", random.random())

""""""

# Solution

import random

print(""Random number between 0 and 1: "", random.random())

""""""

# Solution

import random

print(""Random number between 0 and 1: "", random.random())

"""""""
321,"Create an array (a) of shape 3, 4, 8 (K=3, J=4, I=8). tidx is an array of the same length as a.shape[1], i.e. contains J = 4 elements where each index denotes which element of K should be chosen.","import numpy as np
a = np.random.randint(0, 10, (3, 4, 8))
print(""Original array and shape:"")
print(a)
print(a.shape)
print(""--------------------------------"")
tidx = np.random.randint(0, 3, 4)
print(""tidex: "",tidx)
print(""Result:"")
print(a[tidx, np.arange(len(tidx)),:])
","a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
tidx = np.array([[0, 1, 2, 3], [0, 1, 2, 3], [0, 1"
322,"Write a Pandas program to split a given dataset, group by one column and apply an aggregate function to few columns and another aggregate function to the rest of the columns of the dataframe. ","import pandas as pd
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001],
'sale_jan':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 1760, 2983.43, 480.4,  1250.45, 75.29,1045.6],
'sale_feb':[250.5, 170.65, 15.26, 110.5, 598.5, 1400.6, 2760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_mar':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_apr':[150.5, 270.65, 95.26, 210.5, 948.5, 2400.6, 760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_may':[130.5, 270.65, 65.26, 310.5, 948.5, 2400.6, 760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_jun':[150.5, 270.65, 45.26, 110.5, 948.5, 3400.6, 5760, 983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_jul':[950.5, 270.65, 65.26, 210.5, 948.5, 2400.6, 5760, 983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_aug':[150.5, 70.65,  65.26, 110.5, 948.5, 400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_sep':[150.5, 270.65, 65.26, 110.5, 948.5, 200.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_oct':[150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6],
'sale_nov':[150.5, 270.65, 95.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6], 
'sale_dec':[150.5, 70.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6]
})
print(""Original Orders DataFrame:"")
print(df)
print(""\Result after group on salesman_id and apply different aggregate functions:"")
df = df.groupby('salesman_id').agg(lambda x : x.sum() if x.name in ['sale_jan','sale_feb','sale_mar'] else x.mean())
print(df)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({
    'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'col2': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],
    'col3': [10, 20, 30,"
323,Write a NumPy program (using NumPy) to sum of all the multiples of 3 or 5 below 100. ,"import numpy as np
x = np.arange(1, 100)
# find  multiple of 3 or 5
n= x[(x % 3 == 0) | (x % 5 == 0)]
print(n[:1000])
# print sum the numbers
print(n.sum())
","import numpy as np

n = np.arange(1,101)
print(n)

n = n.reshape(len(n),1)
print(n)

n = n.reshape(len(n),1)
print(n)

n = n.reshape(len(n),1)
print(n)

n = n.reshape(len(n),1)
print(n)"
324,"Write a Pandas program to import excel data (coalpublic2013.xlsx ) into a dataframe and find details where ""Labor Hours"" > 20000. ","import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')    
df[df[""Labor_Hours""] > 20000].head()
","import pandas as pd

df = pd.read_excel('coalpublic2013.xlsx')

df['Labor Hours'] = df['Labor Hours'].astype(int)

df['Labor Hours'] = df['Labor Hours'].astype(int)

df['Labor Hours'] = df['Labor Hours'].astype(int)

df['Labor Hours'] = df['"
325,Write a Python program to iterate a given list cyclically on specific index position. ,"def cyclically_iteration(lst,spec_index):
    result = []
    length = len(lst)
    for i in range(length):
        element_index = spec_index % length
        result.append(lst[element_index])
        spec_index += 1
    return result

chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
print(""Original list:"")
print(chars)
spec_index = 3
print(""\nIterate the said  list cyclically on specific index position"",spec_index,"":"")
print(cyclically_iteration(chars,spec_index))
spec_index = 5
print(""\nIterate the said  list cyclically on specific index position"",spec_index,"":"")
print(cyclically_iteration(chars,spec_index))
","def cyclic_iter(lst):
    for i in range(len(lst)):
        yield lst[i]

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

for i in cyclic_iter(lst):
    print(i)

# Output:
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9
#"
326,Write a Pandas program to interpolate the missing values using the Linear Interpolation method in a given DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,np.nan,70002,70004,np.nan,70005,np.nan,70010,70003,70012,np.nan,70013],
'purch_amt':[150.5,np.nan,65.26,110.5,948.5,np.nan,5760,1983.43,np.nan,250.45, 75.29,3045.6],
'sale_amt':[10.5,20.65,np.nan,11.5,98.5,np.nan,57,19.43,np.nan,25.45, 75.29,35.6],
'ord_date': ['2012-10-05','2012-09-10',np.nan,'2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3002,3001,3001,3003,3002,3001,3001,3004,3003,3002,3001,3001],
'salesman_id':[5002,5003,5001,np.nan,5002,5001,5001,np.nan,5003,5002,5003,np.nan]})
print(""Original Orders DataFrame:"")
print(df) 
print(""\nInterpolate the missing values using the Linear Interpolation method (purch_amt):"")
df['purch_amt'].interpolate(method='linear', direction = 'forward', inplace=True) 
print(df)
","import pandas as pd

# Read the data
df = pd.read_csv(""https://github.com/datasets/csv/raw/master/data/fraud.csv"")

# Create a new DataFrame with the missing values
df_new = df.copy()

# Replace the missing values with the interpolated value
df_new.fillna(value=df_new.interpolate().interpolate().interpolate"
327,Write a Python program to read a random line from a file. ,"import random
def random_line(fname):
    lines = open(fname).read().splitlines()
    return random.choice(lines)
print(random_line('test.txt'))
","import random

def read_file(filename):
    try:
        file = open(filename, 'r')
        content = file.read()
        file.close()
        return content
    except IOError:
        print(""Cannot open"", filename)

def get_random_line(filename):
    lines = read_file(filename)
    return lines[random.randint(0, len(lines) - 1)]

print(get_random_line('/home/student"
328,Write a Python program to print the square and cube symbol in the area of a rectangle and volume of a cylinder. ,"area = 1256.66
volume = 1254.725
decimals = 2
print(""The area of the rectangle is {0:.{1}f}cm\u00b2"".format(area, decimals))
decimals = 3
print(""The volume of the cylinder is {0:.{1}f}cm\u00b3"".format(volume, decimals))
","# Solution 1:

# Solution 2:

# Solution 3:

# Solution 4:

# Solution 5:

# Solution 6:

# Solution 7:

# Solution 8:

# Solution 9:

# Solution 10:

# Solution 11:

# Solution 12:

# Solution 13:

# Solution 14:

# Solution 15:

# Solution 16:

# Solution 17:

# Solution"
329,Write a NumPy program compare two given arrays. ,"import numpy as np
a = np.array([1, 2])
b = np.array([4, 5])
print(""Array a: "",a)
print(""Array b: "",b)
print(""a > b"")
print(np.greater(a, b))
print(""a >= b"")
print(np.greater_equal(a, b))
print(""a < b"")
print(np.less(a, b))
print(""a <= b"")
print(np.less_equal(a, b))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([6, 7, 8, 9, 10])

print(a == b)

# Output:
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True
# True"
330,Write a Pandas program to split the following given dataframe into groups based on school code and call a specific group with the name of the group. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
student_data = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_Of_Birth ': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'age': [12, 12, 13, 13, 14, 12],
    'height': [173, 192, 186, 167, 151, 159],
    'weight': [35, 32, 33, 30, 31, 32],
    'address': ['street1', 'street2', 'street3', 'street1', 'street2', 'street4']},
    index=['S1', 'S2', 'S3', 'S4', 'S5', 'S6'])

print(""Original DataFrame:"")
print(student_data)
print('\nSplit the said data on school_code wise:')
grouped = student_data.groupby(['school_code'])
print(""Call school code 's001':"")
print(grouped.get_group('s001'))
print(""\nCall school code 's004':"")
print(grouped.get_group('s004'))
","df = pd.DataFrame({'School Code': ['A', 'A', 'A', 'B', 'B', 'B', 'C', 'C', 'C', 'D', 'D', 'D', 'E', 'E', 'F', 'F', 'F', 'G', 'G', 'H', 'H', 'I', 'I', 'J', 'J', 'K', 'K', 'L', '"
331,Write a Python program to compute the sum of digits of each number of a given list of positive integers. ,"from itertools import chain
def sum_of_digits(nums):
    return sum(int(y) for y in (chain(*[str(x) for x in nums])))

nums = [10,2,56]
print(""Original tuple: "") 
print(nums)
print(""Sum of digits of each number of the said list of integers:"")
print(sum_of_digits(nums))

nums = [10,20,4,5,70]
print(""\nOriginal tuple: "") 
print(nums)
print(""Sum of digits of each number of the said list of integers:"")
print(sum_of_digits(nums))
","def sum_digits(nums):
    sum = 0
    for num in nums:
        sum += num
    return sum

print(sum_digits([1, 2, 3, 4, 5]))

""""""

def sum_digits(nums):
    sum = 0
    for num in nums:
        sum += num
    return sum

print(sum_digits([1, 2, 3, 4, 5]"
332,Write a Python program to assess if a file is closed or not. ," f = open('abc.txt','r')
print(f.closed)
f.close()
print(f.closed)
","def is_closed(file):
    if file.closed:
        return True
    else:
        return False

print(is_closed(open('test.txt')))

""""""

# Solution 1

def is_closed(file):
    return file.closed

print(is_closed(open('test.txt')))

# Solution 2

def is_closed(file):
    return file.closed

print(is_closed(open('test.txt'"
333,Write a Python program to interleave two given list into another list randomly. ,"import random
def randomly_interleave(nums1, nums2):
    result =  [x.pop(0) for x in random.sample([nums1]*len(nums1) + [nums2]*len(nums2), len(nums1)+len(nums2))]
    return result
nums1 = [1,2,7,8,3,7]
nums2 = [4,3,8,9,4,3,8,9]
print(""Original lists:"") 
print(nums1)
print(nums2)
print(""\nInterleave two given list into another list randomly:"")
print(randomly_interleave(nums1, nums2))
","def interleave(l1, l2):
    return [l1[i] + l2[i] for i in range(len(l1))]

l1 = [1, 2, 3, 4, 5]
l2 = [6, 7, 8, 9, 10]
print(interleave(l1, l2))

""""""

def interleave(l1, l2):
    return [l1[i] + l2[i] for i in"
334,"Given variables x=30 and y=20, write a Python program to print ""30+20=50"". ","x = 30
y = 20
print(""\n%d+%d=%d"" % (x, y, x+y))
print()
","x=30
y=20
print(""30+20=50"")

""""""

x=30
y=20
print(""30+20=50"")

""""""

x=30
y=20
print(""30+20=50"")

""""""

x=30
y=20
print(""30+20=50"")

""""""

x=30
y=20
print(""30+20=50"")

"""""""
335,Write a Python program to find the characters in a list of strings which occur more than and less than a given number. ,"from collections import Counter 
from itertools import chain 
def max_aggregate(list_str, N):
    temp = (set(sub) for sub in list_str) 
    counts = Counter(chain.from_iterable(temp)) 
    gt_N =  [chr for chr, count in counts.items() if count > N]
    lt_N =  [chr for chr, count in counts.items() if count < N]
    return gt_N, lt_N
     
list_str = ['abcd', 'iabhef', 'dsalsdf', 'sdfsas', 'jlkdfgd'] 
print(""Original list:"")
print(list_str)
N = 3
result = max_aggregate(list_str, N)
print(""\nCharacters of the said list of strings which occur more than:"",N)
print(result[0])
print(""\nCharacters of the said list of strings which occur less than:"",N)
print(result[1])
","def solution(str1, str2, n):
    count = 0
    for i in range(len(str1)):
        if str1[i] < n:
            count += 1
    for i in range(len(str2)):
        if str2[i] < n:
            count += 1
    return count

print(solution(""abcde"", ""abcde"", 2))
print(solution(""abcde"","
336,Write a NumPy program to add two zeros to the beginning of each element of a given array of string values. ,"import numpy as np 

nums = np.array(['1.12', '2.23', '3.71', '4.23', '5.11'], dtype=np.str)
print(""Original array:"")
print(nums)
print(""\nAdd two zeros to the beginning of each element of the said array:"")
print(np.char.add('00', nums))
print(""\nAlternate method:"")
print(np.char.rjust(nums, 6, fillchar='0'))
","import numpy as np

arr = np.array(['a', 'b', 'c', 'd', 'e', 'f'])

arr = np.append(arr, np.zeros(3))

print(arr)

arr = np.append(arr, np.zeros(3), axis=0)

print(arr)

arr = np.append(arr, np.zeros(3), axis=1)"
337,Write a NumPy program to count the occurrence of a specified item in a given NumPy array. ,"import numpy as np
nums = np.array([10, 20, 20, 20, 20, 0, 20, 30, 30, 30, 0, 0, 20, 20, 0])
print(""Original array:"")
print(nums)
print(np.count_nonzero(nums == 10))
print(np.count_nonzero(nums == 20))
print(np.count_nonzero(nums == 30))
print(np.count_nonzero(nums == 0))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr.count(5))

# Output:
# [2, 3, 4, 6, 7, 8, 9, 10]

# Explanation:
# The array contains the following items:
# 1. 5
# 2. 6
# 3. 7
# 4. 8
# 5. 9"
338,Write a Python program to sort a given positive number in descending/ascending order. ,"def test_dsc(n):
    return int(''.join(sorted(str(n), reverse = True)))

def test_asc(n):
    return int(''.join(sorted(list(str(n))))[::1])

n = 134543
print(""Original Number: "",n);
print(""Descending order of the said number: "", test_dsc(n));
print(""Ascending order of the said number: "", test_asc(n));
n = 43750973
print(""\nOriginal Number: "",n);
print(""Descending order of the said number: "", test_dsc(n));
print(""Ascending order of the said number: "", test_asc(n));
","def sort_num(num):
    if num < 0:
        return num
    else:
        return -num

print(sort_num(5))
print(sort_num(10))
print(sort_num(15))
print(sort_num(20))
print(sort_num(25))
print(sort_num(30))
print(sort_num(35))
print(sort_num(40))
print(sort_num(45))"
339,Write a Python program to check whether a string contains all letters of the alphabet. ,"import string
alphabet = set(string.ascii_lowercase)
input_string = 'The quick brown fox jumps over the lazy dog'
print(set(input_string.lower()) >= alphabet)
input_string = 'The quick brown fox jumps over the lazy cat'
print(set(input_string.lower()) >= alphabet)
","s = ""abcdefghijklmnopqrstuvwxyz""

def is_alphabet(s):
    for i in s:
        if i not in alphabet:
            return False
    return True

print(is_alphabet(s))

""""""

alphabet = ""abcdefghijklmnopqrstuvwxyz""

def is_alphabet(s):
    for i in s:
        if i not in alphabet:"
340,Write a Python program to delete a specific item from a given doubly linked list. ,"class Node(object):
    # Singly linked node
    def __init__(self, value=None, next=None, prev=None):
        self.value = value
        self.next = next
        self.prev = prev

class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, value):
        # Append an item 
        new_item = Node(value, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item
        self.count += 1
    
    def iter(self):
        # Iterate the list
        current = self.head
        while current:
            item_val = current.value
            current = current.next
            yield item_val

    def print_foward(self):
        for node in self.iter():
            print(node)   
        
    def search_item(self, val):
         for node in self.iter():
            if val == node:
                return True
         return False
     
    def delete(self, value):
        # Delete a specific item
        current = self.head
        node_deleted = False
        if current is None:
            node_deleted = False

        elif current.value == value:
            self.head = current.next
            self.head.prev = None
            node_deleted = True

        elif self.tail.value == value:
            self.tail = self.tail.prev
            self.tail.next = None
            node_deleted = True

        else:
            while current:
                if current.value == value:
                    current.prev.next = current.next
                    current.next.prev = current.prev
                    node_deleted = True
                current = current.next

        if node_deleted:
            self.count -= 1

items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')
items.append_item('SQL')

print(""Original list:"")
items.print_foward()

items.delete(""Java"")
items.delete(""Python"")
print(""\nList after deleting two items:"")
items.print_foward()
","def delete_node(node):
    node.next.prev = node.prev
    node.prev.next = node.next
    node.prev = None
    node.next = None

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

# This code is contributed"
341,Write a NumPy program to convert a list and tuple into arrays. ,"import numpy as np
my_list = [1, 2, 3, 4, 5, 6, 7, 8]
print(""List to array: "")
print(np.asarray(my_list))
my_tuple = ([8, 4, 6], [1, 2, 3])
print(""Tuple to array: "")
print(np.asarray(my_tuple))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([1, 2, 3, 4, 5])

print(a)
print(b)

# Solution:
a = np.array([1, 2, 3, 4, 5])
b = np.array([1, 2, 3, 4, 5])

print(a)
print(b)

# Solution:
a = np.array(["
342,Write a Pandas program to create a plot of distribution of UFO (unidentified flying object) observation time. ,"import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv(r'ufo.csv')
df['duration_sec'] = (df['length_of_encounter_seconds'].astype(float))/60
s = df[""duration_sec""].quantile(0.95)
temp = df['duration_sec']
temp = temp.sort_values()
temp = temp[temp < s]
plt.figure(figsize=(10, 8))
sns.distplot(temp)
plt.xlabel('Duration(min)', fontsize=20)
plt.ylabel(""Frequency"", fontsize=15)
plt.xticks(fontsize=12)
plt.title(""-Distribution of UFO obervation time-"", fontsize=20)
plt.show()
","import pandas as pd
import matplotlib.pyplot as plt

# Read the data
df = pd.read_csv('/Users/krishna/Downloads/UFO_observation_time.csv')

# Create a plot
plt.figure(figsize=(10, 6))
plt.hist(df['observation_time'], bins=50)
plt.show()

# Create a plot"
343,"Write a NumPy program to find the union of two arrays. Union will return the unique, sorted array of values that are in either of the two input arrays. ","import numpy as np
array1 = np.array([0, 10, 20, 40, 60, 80])
print(""Array1: "",array1)
array2 = [10, 30, 40, 50, 70]
print(""Array2: "",array2)
print(""Unique sorted array of values that are in either of the two input arrays:"")
print(np.union1d(array1, array2))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([2, 3, 4, 5, 6])

print(np.union1d(a, b))

# Output:
# [1 2 3 4 5 6]

# Hint: You can use the built-in function np.union1d() to solve this problem."
344,Write a Python program to sum all the items in a dictionary. ,"my_dict = {'data1':100,'data2':-54,'data3':247}
print(sum(my_dict.values()))
","def sum_dict(d):
    sum = 0
    for i in d.values():
        sum += i
    return sum

d = {'a': 1, 'b': 2, 'c': 3}
print(sum_dict(d))

""""""

# Solution

def sum_dict(d):
    sum = 0
    for i in d.values():
        sum += i
    return sum

d = {'a': 1, 'b': 2, '"
345,"Write a Python program to find the ration of positive numbers, negative numbers and zeroes in an array of integers. ","from array import array

def plusMinus(nums):
    n = len(nums)
    n1 = n2 = n3 = 0
    
    for x in nums:
        if x > 0:
            n1 += 1
        elif x < 0:
            n2 += 1
        else:
            n3 += 1
            
    return round(n1/n,2), round(n2/n,2), round(n3/n,2)

nums = array('i', [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])
print(""Original array:"",nums)
nums_arr = list(map(int, nums))
result = plusMinus(nums_arr)
print(""Ratio of positive numbers, negative numbers and zeroes:"")
print(result)
nums = array('i', [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])
print(""\nOriginal array:"",nums)
nums_arr = list(map(int, nums))
result = plusMinus(nums_arr)
print(""Ratio of positive numbers, negative numbers and zeroes:"")
print(result)
","def solution(arr):
    # Write your code here
    count = 0
    for i in arr:
        if i > 0:
            count += 1
        elif i < 0:
            count -= 1
        else:
            count = 0
    return count

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(arr))

arr = [1, 2"
346,Write a Python program to sort a list of elements using the selection sort algorithm. ,"def selectionSort(nlist):
   for fillslot in range(len(nlist)-1,0,-1):
       maxpos=0
       for location in range(1,fillslot+1):
           if nlist[location]>nlist[maxpos]:
               maxpos = location

       temp = nlist[fillslot]
       nlist[fillslot] = nlist[maxpos]
       nlist[maxpos] = temp

nlist = [14,46,43,27,57,41,45,21,70]
selectionSort(nlist)
print(nlist)
","def selectionSort(arr):
    for i in range(len(arr)):
        min_index = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_index]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr

arr = [10, 4, 8, 2, 5, 1, 3]
print("
347,Write a Python program to interleave multiple lists of the same length. ,"def interleave_multiple_lists(list1,list2,list3):
    result = [el for pair in zip(list1, list2, list3) for el in pair]
    return result
     
list1 = [1,2,3,4,5,6,7]
list2 = [10,20,30,40,50,60,70]
list3 = [100,200,300,400,500,600,700]
print(""Original list:"")
print(""list1:"",list1)
print(""list2:"",list2)
print(""list3:"",list3)
print(""\nInterleave multiple lists:"")
print(interleave_multiple_lists(list1,list2,list3))
","def interleave(l1, l2):
    return [l1[i] + l2[i] for i in range(len(l1))]

l1 = [1, 2, 3, 4, 5]
l2 = [6, 7, 8, 9, 10]

print(interleave(l1, l2))

""""""

def interleave(l1, l2):
    return [l1[i] + l2[i] for i in"
348,"Write a Python program to combines two or more dictionaries, creating a list of values for each key. ","from collections import defaultdict
def test(*dicts):
  result = defaultdict(list)
  for el in dicts:
    for key in el:
      result[key].append(el[key])
  return dict(result)
 
d1 = {'w': 50, 'x': 100, 'y': 'Green', 'z': 400}
d2 = {'x': 300, 'y': 'Red', 'z': 600}

print(""Original dictionaries:"")
print(d1)
print(d2)
print(""\nCombined dictionaries, creating a list of values for each key:"")
print(test(d1, d2))
","def combine_dicts(dict1, dict2):
    result = {}
    for key in dict1:
        result[key] = dict1[key]
    for key in dict2:
        result[key] = dict2[key]
    return result

print(combine_dicts({""a"": 1, ""b"": 2}, {""c"": 3, ""d"": 4, ""e"": 5}))

""""""

""""""

"""""""
349,Write a Pandas program to drop a index level from a multi-level column index of a dataframe. ,"import pandas as pd
cols = pd.MultiIndex.from_tuples([(""a"", ""x""), (""a"", ""y""), (""a"", ""z"")])
print(""\nConstruct a Dataframe using the said MultiIndex levels: "")
df = pd.DataFrame([[1,2,3], [3,4,5], [5,6,7]], columns=cols)
print(df)
#Levels are 0-indexed beginning from the top.
print(""\nRemove the top level index:"")
df.columns = df.columns.droplevel(0)
print(df)
df = pd.DataFrame([[1,2,3], [3,4,5], [5,6,7]], columns=cols)
print(""\nOriginal dataframe:"")
print(df)
print(""\nRemove the index next to top level:"")
df.columns = df.columns.droplevel(1)
print(df)
","import pandas as pd

df = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""B"": [10, 20, 30, 40, 50]})

df.index = [""a"", ""b"", ""c"", ""d"", ""e""]

print(df)

# Solution:

# df.drop(""A"", axis=1)

# Solution:

# df.drop([""a"","
350,Write a Pandas program to get all the sighting days of the unidentified flying object (ufo) between 1950-10-10 and 1960-10-10. ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
print(""\nSighting days of the unidentified flying object (ufo) between 1949-10-10 and 1960-10-10:"")
selected_period = df[(df['Date_time'] >= '1950-01-01 00:00:00') & (df['Date_time'] <= '1960-12-31 23:59:59')]
print(selected_period)
","# Solution:

# Input:
# Date Range:
# Range:
# Output:
# Date Range:
# Range:
# Date Range:
# Range:
# Date Range:
# Range:
# Date Range:
# Range:
# Date Range:
# Range:
# Date Range:
# Range:
# Date Range:
# Range:
# Date Range:
# Range:"
351,Write a Python program to make an iterator that drops elements from the iterable as soon as an element is a positive number. ,"import itertools as it
def drop_while(nums):
    return it.dropwhile(lambda x : x < 0, nums)
nums = [-1,-2,-3,4,-10,2,0,5,12]
print(""Original list: "",nums)
result = drop_while(nums)
print(""Drops elements from the iterable when a positive number arises \n"",list(result))
#Alternate solution
def negative_num(x):
    return x < 0
def drop_while(nums):
    return it.dropwhile(negative_num, nums)
nums = [-1,-2,-3,4,-10,2,0,5,12]
print(""Original list: "",nums)
result = drop_while(nums)
print(""Drops elements from the iterable when a positive number arises \n"",list(result))
","def positive_numbers(iterable):
    for number in iterable:
        if number > 0:
            yield number

iterator = positive_numbers(range(10))

print(next(iterator))
print(next(iterator))
print(next(iterator))
print(next(iterator))
print(next(iterator))
print(next(iterator))
print(next(iterator))
print(next(iterator))
print("
352,Write a Python program to remove empty lists from a given list of lists. ,"list1 = [[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []]
print(""Original list:"")
print(list1)
print(""\nAfter deleting the empty lists from the said lists of lists"")
list2 = [x for x in list1 if x]
print(list2)
","def remove_empty_lists(lst):
    for i in range(len(lst)):
        if len(lst[i]) == 0:
            lst.pop(i)
    return lst

lst = [[1, 2, 3], [4, 5, 6], []]
print(remove_empty_lists(lst))

""""""

def remove_empty_lists(lst):
    for i in range(len(lst)):"
353,Write a Python program to sort a list of elements using Cocktail shaker sort. ,"def cocktail_shaker_sort(nums):
    for i in range(len(nums)-1, 0, -1):
        is_swapped = False
        
        for j in range(i, 0, -1):
            if nums[j] < nums[j-1]:
                nums[j], nums[j-1] = nums[j-1], nums[j]
                is_swapped = True

        for j in range(i):
            if nums[j] > nums[j+1]:
                nums[j], nums[j+1] = nums[j+1], nums[j]
                is_swapped = True
        
        if not is_swapped:
            return nums
 
num1 = input('Input comma separated numbers:\n').strip()
nums = [int(item) for item in num1.split(',')]
print(cocktail_shaker_sort(nums))
","def cocktail_shaker_sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

arr = [5, 4, 3, 2, 1]
print(cocktail_shaker_sort(arr))

"""""""
354,"Write a Python program to check whether a given string contains a capital letter, a lower case letter, a number and a minimum length. ","def check_string(s):
    messg = []
    if not any(x.isupper() for x in s):
        messg.append('String must have 1 upper case character.')
    if not any(x.islower() for x in s):
        messg.append('String must have 1 lower case character.')
    if not any(x.isdigit() for x in s):
        messg.append('String must have 1 number.')
    if len(s) < 8:
        messg.append('String length should be atleast 8.')    
    if not messg:
        messg.append('Valid string.')
    return messg
    
s = input(""Input the string: "")
print(check_string(s))
","def check_capital(string):
    if string.isupper():
        return True
    elif string.islower():
        return True
    elif string.isdigit():
        return True
    else:
        return False

print(check_capital(""Python is a programming language""))

""""""

# Solution:

def check_capital(string):
    if string.isupper():
        return True
    el"
355,"Write a NumPy program to extract first, third and fifth elements of the third and fifth rows from a given (6x6) array. ","import numpy as np
arra_data = np.arange(0,36).reshape((6, 6))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: First, third and fifth elements of the third and fifth rows"")
print(arra_data[2::2, ::2]) 
","import numpy as np

arr = np.array([[1, 2, 3, 4, 5, 6],
                [7, 8, 9, 10, 11, 12],
                [13, 14, 15, 16, 17, 18]])

print(arr[0][3])
print(arr[1][3])
print(arr[2][3])

# Output:
# 7
# 8
#"
356,Write a Python program to check if a given function is a generator or not. Use types.GeneratorType(),"import types
def a(x):
    yield x
        
def b(x):
    return x

def add(x, y):
    return x + y

print(isinstance(a(456), types.GeneratorType))
print(isinstance(b(823), types.GeneratorType))
print(isinstance(add(8,2), types.GeneratorType))
","def is_generator(obj):
    if type(obj) == types.GeneratorType:
        return True
    else:
        return False

print(is_generator(lambda: 1))
print(is_generator(lambda: 2))
print(is_generator(lambda: 3))
print(is_generator(lambda: 4))
print(is_generator(lambda: 5))
print(is_generator(lambda:"
357,Write a Python program to find the string similarity between two given strings. ,"import difflib
def string_similarity(str1, str2):
    result =  difflib.SequenceMatcher(a=str1.lower(), b=str2.lower())
    return result.ratio()
str1 = 'Python Exercises'
str2 = 'Python Exercises'
print(""Original string:"")
print(str1)
print(str2)
print(""Similarity between two said strings:"")
print(string_similarity(str1,str2))
str1 = 'Python Exercises'
str2 = 'Python Exercise'
print(""\nOriginal string:"")
print(str1)
print(str2)
print(""Similarity between two said strings:"")
print(string_similarity(str1,str2))
str1 = 'Python Exercises'
str2 = 'Python Ex.'
print(""\nOriginal string:"")
print(str1)
print(str2)
print(""Similarity between two said strings:"")
print(string_similarity(str1,str2))
str1 = 'Python Exercises'
str2 = 'Python'
print(""\nOriginal string:"")
print(str1)
print(str2)
print(""Similarity between two said strings:"")
print(string_similarity(str1,str2))
str1 = 'Python Exercises'
str1 = 'Java Exercises'
print(""\nOriginal string:"")
print(str1)
print(str2)
print(""Similarity between two said strings:"")
print(string_similarity(str1,str2))
","def string_similarity(s1, s2):
    if len(s1)!= len(s2):
        return 0
    count = 0
    for i in range(len(s1)):
        if s1[i]!= s2[i]:
            count += 1
    return count / float(len(s1))

print(string_similarity(""abc"", ""abc""))
print(string_similarity(""abc"", ""abcd""))
print(string_similar"
358,Write a Python program to convert a pair of values into a sorted unique array. ,"L = [(1, 2), (3, 4), (1, 2), (5, 6), (7, 8), (1, 2), (3, 4), (3, 4),
 (7, 8), (9, 10)]
print(""Original List: "", L)
print(""Sorted Unique Data:"",sorted(set().union(*L)))
","def pair_sort(arr):
    arr.sort()
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(pair_sort(arr))

""""""

def pair_sort(arr):
    arr.sort()
    return arr

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(pair_sort(arr))

"""""""
359,"Write a NumPy program to calculate cumulative sum of the elements along a given axis, sum over rows for each of the 3 columns and sum over columns for each of the 2 rows of a given 3x3 array. ","import numpy as np
x = np.array([[1,2,3], [4,5,6]])
print(""Original array: "")
print(x)
print(""Cumulative sum of the elements along a given axis:"")
r = np.cumsum(x)
print(r)
print(""\nSum over rows for each of the 3 columns:"")
r = np.cumsum(x,axis=0) 
print(r)
print(""\nSum over columns for each of the 2 rows:"")
r = np.cumsum(x,axis=1) 
print(r)

","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a.sum(axis=0))
print(a.sum(axis=1))
print(a.sum(axis=2))

# Output:
# array([[7, 10, 15"
360,Write a Python program to check multiple keys exists in a dictionary. ,"student = {
  'name': 'Alex',
  'class': 'V',
  'roll_id': '2'
}
print(student.keys() >= {'class', 'name'})
print(student.keys() >= {'name', 'Alex'})
print(student.keys() >= {'roll_id', 'name'})
","def check_keys(d, keys):
    for key in keys:
        if key in d:
            print(key, ""exists"")
        else:
            print(key, ""does not exist"")

d = {'a': 1, 'b': 2, 'c': 3}
check_keys(d, ['a', 'b', 'c'])

""""""

def check_keys(d, keys):
    for key in keys:
        if key in d:"
361,Write a Python program to create two strings from a given string. Create the first string using those character which occurs only once and create the second string which consists of multi-time occurring characters in the said string. ,"from collections import Counter  
def generateStrings(input): 
     str_char_ctr = Counter(input) 
     part1 = [ key for (key,count) in str_char_ctr.items() if count==1] 
     part2 = [ key for (key,count) in str_char_ctr.items() if count>1] 
     part1.sort() 
     part2.sort()
     return part1,part2
input = ""aabbcceffgh""
s1, s2 = generateStrings(input)
print(''.join(s1))   
print(''.join(s2))
","def solution(s):
    # your code goes here
    return s[0] + s[1]

print(solution(""abcabcbb""))
print(solution(""bbbbb""))
print(solution(""pwwkew""))
print(solution(""abba""))
print(solution(""cbbdgfedcbacb""))
print(solution("""
362,Write a Pandas program to check whether only lower case or upper case is present in a given column of a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['ABCD','EFGF', 'hhhh', 'abcd', 'EAWQaaa'],
    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})

print(""Original DataFrame:"")
print(df)
print(""\nIs lower (company_code)?"")
df['company_code_ul_cases'] = list(map(lambda x: x.islower(), df['company_code']))
print(df)
print(""\nIs Upper (company_code)?"")
df['company_code_ul_cases'] = list(map(lambda x: x.isupper(), df['company_code']))
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': ['a', 'b', 'c', 'd'], 'col2': ['e', 'f', 'g', 'h']})

print(df['col1'].str.lower().str.isupper())

# Output:
# True
# True
# True
# False

print(df['col1'].str.lower().str."
363,"Write a Python program to find the minimum, maximum value for each tuple position in a given list of tuples. ","def max_min_list_tuples(nums):
    zip(*nums)
    result1 = map(max, zip(*nums))
    result2 = map(min, zip(*nums))
    return list(result1), list(result2)

nums = [(2,3),(2,4),(0,6),(7,1)]
print(""Original list:"")
print(nums)

result = max_min_list_tuples(nums)
print(""\nMaximum value  for each tuple position in the said list of tuples:"")
print(result[0])
print(""\nMinimum value  for each tuple position in the said list of tuples:"")
print(result[1])
","def min_max(lst):
    min_val = lst[0][0]
    max_val = lst[0][0]
    for i in range(1, len(lst)):
        if lst[i][0] < min_val:
            min_val = lst[i][0]
        if lst[i][0] > max_val:
            max_val = lst[i][0"
364,Write a Python program to convert a given list of strings into list of lists. ,"def strings_to_listOflists(colors):
    result = [list(word) for word in colors]
    return result

colors = [""Red"", ""Maroon"", ""Yellow"", ""Olive""]
print('Original list of strings:')
print(colors)
print(""\nConvert the said list of strings into list of lists:"")
print(strings_to_listOflists(colors))
","def solution(str_list):
    # your code goes here
    return [[str_list[i:i+3]] for i in range(0, len(str_list), 3)]

print(solution([""a"", ""b"", ""c"", ""d"", ""e"", ""f""]))

""""""

def solution(str_list):
    # your code goes here
    return [[str_list[i:i+3]] for i in range(0, len("
365,Write a Pandas program to print a DataFrame without index. ,"import pandas as pd
df = pd.DataFrame({
    'school_code': ['s001','s002','s003','s001','s002','s004'],
    'class': ['V', 'V', 'VI', 'VI', 'V', 'VI'],
    'name': ['Alberto Franco','Gino Mcneill','Ryan Parkes', 'Eesha Hinton', 'Gino Mcneill', 'David Parkes'],
    'date_of_birth': ['15/05/2002','17/05/2002','16/02/1999','25/09/1998','11/05/2002','15/09/1997'],
    'weight': [35, 32, 33, 30, 31, 32]},
     index =  [1, 2, 3, 4, 5, 6])
print(""Original DataFrame with single index:"")
print(df)
print(""\nDataFrame without index:"")
print(df.to_string(index=False))
","import pandas as pd

df = pd.DataFrame({""Name"": [""Rolf"", ""Charlie"", ""Anna"", ""Bob"", ""Jen"", ""Sue""],
                   ""Score"": [90, 80, 70, 60, 50, 40]})

print(df)

# Solution:

# df = pd.DataFrame({""Name"": [""Rolf"", ""Charlie"", ""Anna"", ""Bob"", ""Jen"", ""Sue""],
#                   ""Score"": [90, 80,"
366,Write a Python program to display some information about the OS where the script is running. ,"import platform as pl

os_profile = [
        'architecture',
        'linux_distribution',
        'mac_ver',
        'machine',
        'node',
        'platform',
        'processor',
        'python_build',
        'python_compiler',
        'python_version',
        'release',
        'system',
        'uname',
        'version',
    ]
for key in os_profile:
  if hasattr(pl, key):
    print(key +  "": "" + str(getattr(pl, key)()))
","import os
print(""The OS where the script is running is:"", os.name)
print(""The OS where the script is running is:"", os.name)
print(""The OS where the script is running is:"", os.name)
print(""The OS where the script is running is:"", os.name)
print(""The OS where the script is running is:"", os.name)
print(""The OS where the script is running is:"", os.name)
print(""The OS where"
367,Write a NumPy program to create a 8x8 matrix and fill it with a checkerboard pattern. ,"import numpy as np
x = np.ones((3,3))
print(""Checkerboard pattern:"")
x = np.zeros((8,8),dtype=int)
x[1::2,::2] = 1
x[::2,1::2] = 1
print(x)
","import numpy as np

# Create a checkerboard matrix
checkerboard = np.zeros((8, 8), dtype=int)

# Fill the checkerboard matrix with pattern
for i in range(8):
    for j in range(8):
        if i % 2 == 0 and j % 2 == 0:
            checkerboard[i][j] = 1
        elif i % 2 == 0 and j % 2!= 0:"
368,"Write a Python program to filter the height and width of students, which are stored in a dictionary. ","def filter_data(students):
    result = {k: s for k, s in students.items() if s[0] >=6.0 and s[1] >=70}
    return result    
 
students = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}
print(""Original Dictionary:"")
print(students)
print(""\nHeight > 6ft and Weight> 70kg:"")
print(filter_data(students))
","height_dict = {
    'Harry': 95,
    'Hermione': 99,
    'Draco': 74,
    'Neville': 62
}

height_dict['Harry'] = 96
height_dict['Hermione'] = 98
height_dict['Draco'] = 75
height_dict['Neville'] = 63

height_dict.pop('Hermione')
height_dict.pop('Draco')
height_dict.pop('Neville"
369,Write a NumPy program to find the nearest value from a given value in an array. ,"import numpy as np
x = np.random.uniform(1, 12, 5)
v = 4
n = x.flat[np.abs(x - v).argmin()]
print(n)
","import numpy as np

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(x[np.argmin(x)])

# Output:
# 2

# Example 2:

# Input:
# x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# y = [1, 2, 3, 4, 5, 6, 7"
370,Write a NumPy program to create a two-dimensional array of specified format. ,"import numpy as np   
print(""Create an array of shape (15,10):"") 
print(""Command-1"")
print(np.arange(1, 151).reshape(15, 10)) 
print(""\nCommand-2"")
print(np.arange(1, 151).reshape(-1, 10)) 
print(""\nCommand-3"")
print(np.arange(1, 151).reshape(15, -1))
","import numpy as np

# Create a two-dimensional array of specified format
arr = np.array([[1, 2, 3, 4, 5],
                [6, 7, 8, 9, 10],
                [11, 12, 13, 14, 15],
                [16, 17, 18, 19, 20]])

# Print the array
print(arr)

# Print the shape of the array
print(arr.shape)

# Print the size of the array"
371,"Write a NumPy program to create an array of 4,5 shape and to reverse the rows of the said array. After reversing 1st row will be 4th and 4th will be 1st, 2nd row will be 3rd row and 3rd row will be 2nd row. ","import numpy as np
array_nums = np.arange(20).reshape(4,5)
print(""Original array:"")
print(array_nums)
print(""\nAfter reversing:"")
array_nums[:] = array_nums[3::-1]
print(array_nums)
","import numpy as np

arr = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])
print(arr)
arr = arr[::-1]
print(arr)

arr = np.array([[1"
372,"Write a Python program to select a random element from a list, set, dictionary (value) and a file from a directory. Use random.choice()","import random
import os
print(""Select a random element from a list:"")
elements = [1, 2, 3, 4, 5]
print(random.choice(elements))
print(random.choice(elements))
print(random.choice(elements))
print(""\nSelect a random element from a set:"")
elements = set([1, 2, 3, 4, 5])
# convert to tuple because sets are invalid inputs
print(random.choice(tuple(elements)))
print(random.choice(tuple(elements)))
print(random.choice(tuple(elements)))
print(""\nSelect a random value from a dictionary:"")
d = {""a"": 1, ""b"": 2, ""c"": 3, ""d"": 4, ""e"": 5}
key = random.choice(list(d))
print(d[key])
key = random.choice(list(d))
print(d[key])
key = random.choice(list(d))
print(d[key]) 
print(""\nSelect a random file from a directory.:"")
print(random.choice(os.listdir(""/"")))
","import random

def random_choice(lst):
    return random.choice(lst)

def random_set(lst):
    return set(random.sample(lst, k=len(lst)))

def random_dict(lst):
    return dict(random.sample(lst, k=2))

def random_file(dir):
    return open(dir, 'r').read"
373,Write a NumPy program to set zero to lower triangles along the last two axes of a three-dimensional of a given array. ,"import numpy as np
arra=np.ones((1,8,8))
print(""Original array:"")
print(arra)
result = np.triu(arra, k=1)
print(""\nResult:"")
print(result)
","import numpy as np

a = np.array([[1, 2, 3],
              [4, 5, 6],
              [7, 8, 9]])

print(a)

a[0, :] = 0
a[:, 0] = 0
a[:, :] = 0

print(a)

a[0, :] = 0
a[:, 0] = 0
a[:, :]"
374,Write a Python program to create a key-value list pairings in a given dictionary. ,"from itertools import product
def test(dictt):
    result = [dict(zip(dictt, sub)) for sub in product(*dictt.values())]
    return result

students = {1: ['Jean Castro'], 2: ['Lula Powell'], 3: ['Brian Howell'], 4: ['Lynne Foster'], 5: ['Zachary Simon']}

print(""\nOriginal dictionary:"")
print(students)
print(""\nA key-value list pairings of the said dictionary:"")
print(test(students))
","def create_key_value_list(dictionary):
    key_value_list = []
    for key, value in dictionary.items():
        key_value_list.append((key, value))
    return key_value_list

dictionary = {'a': 1, 'b': 2, 'c': 3}
print(create_key_value_list(dictionary))

""""""

# Solution:

def create_key_value_list(d"
375,"Write a Python program to generate a random alphabetical character, alphabetical string and alphabetical string of a fixed length. Use random.choice()","import random
import string
print(""Generate a random alphabetical character:"")
print(random.choice(string.ascii_letters))
print(""\nGenerate a random alphabetical string:"")
max_length = 255
str1 = """"
for i in range(random.randint(1, max_length)):
    str1 += random.choice(string.ascii_letters)
print(str1)
print(""\nGenerate a random alphabetical string of a fixed length:"")
str1 = """"
for i in range(10):
    str1 += random.choice(string.ascii_letters)
print(str1)
","import random

def random_alphabet():
    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']
    return random.choice"
376,"Write a NumPy program to calculate cumulative product of the elements along a given axis, sum over rows for each of the 3 columns and product over columns for each of the 2 rows of a given 3x3 array. ","import numpy as np
x = np.array([[1,2,3], [4,5,6]])
print(""Original array: "")
print(x)
print(""Cumulative product  of the elements along a given axis:"")
r = np.cumprod(x)
print(r)
print(""\nProduct over rows for each of the 3 columns:"")
r = np.cumprod(x,axis=0) 
print(r)
print(""\nProduct  over columns for each of the 2 rows:"")
r = np.cumprod(x,axis=1) 
print(r)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a.sum(axis=0))
print(a.sum(axis=1))
print(a.cumprod(axis=0))
print(a.cumprod(axis=1))"
377,Write a Python program to search a date from a given string using arrow module. ,"import arrow
print(""\nSearch a date from a string:"")
d1 = arrow.get('David was born in 11 June 2003', 'DD MMMM YYYY')
print(d1)
","import arrow

date = input(""Enter the date: "")

print(arrow.get(date))

""""""

import arrow

date = input(""Enter the date: "")

print(arrow.get(date))"
378,"Write a Pandas program to create a new DataFrame based on existing series, using specified argument and override the existing columns names. ","import pandas as pd
s1 = pd.Series([0, 1, 2, 3], name='col1')
s2 = pd.Series([0, 1, 2, 3])
s3 = pd.Series([0, 1, 4, 5], name='col3')
df = pd.concat([s1, s2, s3], axis=1, keys=['column1', 'column2', 'column3'])
print(df)
","import pandas as pd

# Create a new DataFrame
df = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""B"": [10, 20, 30, 40, 50]})

# Create a new DataFrame with the specified columns
df2 = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""C"": [10, 20, 30, 40, 50"
379,Write a Python program to create all possible permutations from a given collection of distinct numbers.,"def permute(nums):
  result_perms = [[]]
  for n in nums:
    new_perms = []
    for perm in result_perms:
      for i in range(len(perm)+1):
        new_perms.append(perm[:i] + [n] + perm[i:])
        result_perms = new_perms
  return result_perms

my_nums = [1,2,3]
print(""Original Cofllection: "",my_nums)
print(""Collection of distinct numbers:\n"",permute(my_nums))
","def permute(nums):
    if len(nums) == 0:
        return []
    if len(nums) == 1:
        return [nums]
    else:
        return [nums[0] + [nums[i] for i in range(len(nums)) if i!= nums[i]] for nums in permute(nums[1:])]

print(permute([1, 2, 3]))

"""""""
380,Write a Python program to find the maximum and minimum values in a given list of tuples using lambda function. ,"def max_min_list_tuples(class_students):
    return_max = max(class_students,key=lambda item:item[1])[1]
    return_min = min(class_students,key=lambda item:item[1])[1]
    return return_max, return_min
    
class_students = [('V', 62), ('VI', 68), ('VII', 72), ('VIII', 70), ('IX', 74), ('X', 65)]
print(""Original list with tuples:"")
print(class_students)
print(""\nMaximum and minimum values of the said list of tuples:"")
print(max_min_list_tuples(class_students))
","def max_min(tup):
    return max(tup), min(tup)

tup = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(max_min(tup))

""""""

# Solution 1

def max_min(tup):
    return max(tup), min(tup)

tup = [1, 2, 3, 4, 5, 6"
381,Write a Python program to append items from inerrable to the end of the array. ,"from array import *
array_num = array('i', [1, 3, 5, 7, 9])
print(""Original array: ""+str(array_num))
array_num.extend(array_num)
print(""Extended array: ""+str(array_num))
","def append_to_end(arr, item):
    arr.append(item)

arr = [1, 2, 3, 4, 5]
append_to_end(arr, 6)
print(arr)

""""""

def append_to_end(arr, item):
    arr.append(item)
    return arr

arr = [1, 2, 3, 4, 5]
append_to_end(arr, 6)
print(arr)"
382,Write a Python function that takes a list of words and return the longest word and the length of the longest one. ,"def find_longest_word(words_list):
    word_len = []
    for n in words_list:
        word_len.append((len(n), n))
    word_len.sort()
    return word_len[-1][0], word_len[-1][1]
result = find_longest_word([""PHP"", ""Exercises"", ""Backend""])
print(""\nLongest word: "",result[1])
print(""Length of the longest word: "",result[0])
","def longest_word(words):
    longest_word = """"
    longest_len = 0
    for word in words:
        if len(word) > longest_len:
            longest_word = word
            longest_len = len(word)
    return longest_word, longest_len

print(longest_word([""apple"", ""banana"", ""tacocat"", ""apple"", ""tacocat"", ""t"
383,"Write a Python program to configure the rounding to round to the nearest - with ties going towards 0, with ties going away from 0. Use decimal.ROUND_HALF_DOWN, decimal.ROUND_HALF_UP","import decimal
print(""Configure the rounding to round to the nearest, with ties going towards 0:"")
decimal.getcontext().prec = 1
decimal.getcontext().rounding = decimal.ROUND_HALF_DOWN
print(decimal.Decimal(10) / decimal.Decimal(4))
print(""\nConfigure the rounding to round to the nearest, with ties going away from 0:"")
decimal.getcontext().prec = 1
decimal.getcontext().rounding = decimal.ROUND_HALF_UP
print(decimal.Decimal(10) / decimal.Decimal(4))
","import decimal

def rounding(x):
    return decimal.ROUND_HALF_DOWN(x)

print(rounding(1.5))
print(rounding(2.5))
print(rounding(3.5))
print(rounding(4.5))
print(rounding(5.5))
print("
384,Write a Python program to access only unique key value of a Python object. ,"import json
python_obj = '{""a"":  1, ""a"":  2, ""a"":  3, ""a"": 4, ""b"": 1, ""b"": 2}'
print(""Original Python object:"")
print(python_obj)
json_obj = json.loads(python_obj)
print(""\nUnique Key in a JSON object:"")
print(json_obj) 
","import collections

class Solution:
    def __init__(self):
        self.d = collections.defaultdict(list)
    
    def add(self, key, value):
        self.d[key].append(value)
    
    def get(self, key):
        return self.d[key][0]
    
    def remove(self, key):
        self.d[key].pop(0)
    
    def get_unique(self):"
385,Write a NumPy program to read a CSV data file and store records in an array. ,"from numpy import genfromtxt
csv_data = genfromtxt('fdata.csv', dtype=['S10','float32','float32','float32','float32'], delimiter="","")
print(csv_data)
","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    file_data = list(csv_reader)

file_data.pop(0)

numbers = []

for i in range(len(file_data)):
    numbers.append(int(file_data[i][1]))

numbers.sort()

print(numbers)

# Solution"
386,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight dataframe's specific columns. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
def highlight_cols(s):
    color = 'grey'
    return 'background-color: %s' % color
print(""\nHighlight specific columns:"")
df.style.applymap(highlight_cols, subset=pd.IndexSlice[:, ['B', 'C']])
","import pandas as pd

df = pd.DataFrame(
    {
        ""First column"": [""Rolf"", ""Charlie"", ""Anna"", ""Bob"", ""Jen"", ""Sue"", ""Anne"", ""Brad""],
        ""Second column"": [1, 2, 3, 4, 5, 6, 7, 8],
        ""Third column"": [10, 20, 30, 40, 50, 60, 70, 80],
    }"
387,Write a Python function that accepts a string and calculate the number of upper case letters and lower case letters. ,"def string_test(s):
    d={""UPPER_CASE"":0, ""LOWER_CASE"":0}
    for c in s:
        if c.isupper():
           d[""UPPER_CASE""]+=1
        elif c.islower():
           d[""LOWER_CASE""]+=1
        else:
           pass
    print (""Original String : "", s)
    print (""No. of Upper case characters : "", d[""UPPER_CASE""])
    print (""No. of Lower case Characters : "", d[""LOWER_CASE""])

string_test('The quick Brown Fox')
","def count_upper_lower(string):
    count = 0
    for i in string:
        if i.isupper():
            count += 1
    return count

print(count_upper_lower(""Python is fun""))

""""""

def count_upper_lower(string):
    count = 0
    for i in string:
        if i.isupper():
            count += 1
    return count

print(count_upper_lower(""Python"
388,Write a Python program to create a list containing the power of said number in bases raised to the corresponding number in the index using Python map. ,"bases_num = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
index = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(""Base numbers abd index: "")
print(bases_num)
print(index)
result = list(map(pow, bases_num, index))
print(""\nPower of said number in bases raised to the corresponding number in the index:"")
print(result)
","def power(x, y):
    return x ** y

print(power(2, 3))

""""""

# Solution:

def power(x, y):
    return x ** y

print(power(2, 3))

""""""

# Solution:

def power(x, y):
    return x ** y

print(power(2, 3))

""""""

# Solution:"
389,Write a Pandas program to extract year between 1800 to 2200 from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],
    'year': ['year 1800','year 1700','year 2300', 'year 1900', 'year 2200']
    })
print(""Original DataFrame:"")
print(df)
def find_year(text):
    #line=re.findall(r""\b(18[0][0]|2[0-2][00])\b"",text)
    result = re.findall(r""\b(18[0-9]{2}|19[0-8][0-9]|199[0-9]|2[01][0-9]{2}|2200)\b"",text)
    return result
df['year_range']=df['year'].apply(lambda x: find_year(x))
print(""\Extracting year between 1800 to 2200:"")
print(df)
","import pandas as pd

df = pd.read_csv(""C:/Users/DELL/Downloads/data/data.csv"")

df[""year""] = df[""year""].astype(""int64"")

df[""year""] = df[""year""].astype(""int64"")

df[""year""] = df[""year""].astype(""int64"")

df[""year""] = df[""year""].astype(""int64"
390,Write a Pandas program to extract the day name from a specified date. Add 2 days and 1 business day with the specified date. ,"import pandas as pd
newday = pd.Timestamp('2020-02-07')
print(""First date:"")
print(newday)
print(""\nThe day name of the said date:"")
print(newday.day_name())
print(""\nAdd 2 days with the said date:"")
newday1 = newday + pd.Timedelta('2 day')
print(newday1.day_name())
print(""\nNext business day:"")
nbday = newday + pd.offsets.BDay()
print(nbday.day_name())
","import pandas as pd
import datetime

# Read the data from the csv file
df = pd.read_csv('/Users/srinivasan/Desktop/Python/data/data.csv')

# Extract the day name from the date
date = df['Date']
day_name = date.dt.strftime('%A')

# Add 2 days and 1 business day with the specified date
date = date."
391,Write a Python program to read the current line from a given CSV file. Use csv.reader,"import csv
f = open(""employees.csv"", newline='')
csv_reader = csv.reader(f)
print(next(csv_reader))
print(next(csv_reader))
print(next(csv_reader))
","import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)

""""""

import csv

with open('data.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        print(row)

""""""

import csv"
392,Write a Python program to read a square matrix from console and print the sum of matrix primary diagonal. Accept the size of the square matrix and elements for each column separated with a space (for every row) as input from the user. ,"size = int(input(""Input the size of the matrix: ""))
matrix = [[0] * size for row in range(0, size)]
for x in range(0, size):

    line = list(map(int, input().split()))

    for y in range(0, size):
        matrix[x][y] = line[y]

matrix_sum_diagonal = sum(matrix[size - i - 1][size - i - 1] for i in range(size))
print(""Sum of matrix primary diagonal:"")
print(matrix_sum_diagonal)
","def main():
    size = int(input(""Enter the size of the square matrix: ""))
    elements = []
    for i in range(size):
        elements.append(list(map(int, input().split())))
    print(sum(elements[0]))

if __name__ == ""__main__"":"
393,Write a Pandas program to import sheet2 data from a given excel data (employee.xlsx ) into a Pandas dataframe. ,"import pandas as pd
import numpy as np
df = pd.read_excel('E:\employee.xlsx',sheet_name=1)
print(df)
","import pandas as pd

# Read the data from the excel file
df = pd.read_excel('employee.xlsx')

# Create a Pandas dataframe from the data
df2 = pd.DataFrame(df)

# Print the head of the dataframe
print(df2.head())

# Print the shape of the dataframe
print(df2.shape)

#"
394,"Write a NumPy program to convert a given array into bytes, and load it as array. ","import numpy as np
import os
a = np.array([1, 2, 3, 4, 5, 6])
print(""Original array:"")
print(a)
a_bytes = a.tostring()
a2 = np.fromstring(a_bytes, dtype=a.dtype)
print(""After loading, content of the text file:"")
print(a2)
print(np.array_equal(a, a2))
","import numpy as np

arr = np.array([1, 2, 3, 4, 5])

arr_bytes = arr.tobytes()

arr_bytes

arr_bytes.tobytes()

arr_bytes.tobytes()

arr_bytes.tobytes()

arr_bytes.tobytes()

arr_bytes.tobytes()

arr_bytes.tobytes()

arr_bytes.toby"
395,Write a Pandas program to create a monthly time period and display the list of names in the current local scope. ,"import pandas as pd
mtp = pd.Period('2021-11','M')
print(""Monthly time perid: "",mtp)
print(""\nList of names in the current local scope:"")
print(dir(mtp)) 
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({""Name"": [""Rolf"", ""Charlie"", ""Anna"", ""Bob"", ""Jen"", ""Anne""], ""Age"": [20, 21, 22, 23, 24, 25]})

# Display the dataframe
print(df)

# Create a new column named ""Years""
df[""Years""] = df[""Age""].apply(lambda x: x.days /"
396,"Write a NumPy program to sort an along the first, last axis of an array. ","import numpy as np
a = np.array([[4, 6],[2, 1]])
print(""Original array: "")
print(a)
print(""Sort along the first axis: "")
x = np.sort(a, axis=0)
print(x)
print(""Sort along the last axis: "")
y = np.sort(x, axis=1)
print(y)
","import numpy as np

arr = np.array([[1,2,3,4,5,6,7,8,9,10],
                [10,11,12,13,14,15,16,17,18,19],
                [20,21,22,23,24,25,26,27,28,29]])

arr.sort(axis=0)
print(arr)

arr.sort(axis=1)
print("
397,"Write a NumPy program to move the specified axis backwards, until it lies in a given position. ","import numpy as np
x = np.ones((2,3,4,5))
print(np.rollaxis(x, 3, 1).shape)
","import numpy as np

x = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

x[:, 1] = np.array([10, 20, 30])

print(x)

x[:, 1] = np.array([10, 20, 30])

print(x)

x[:, 1] = np.array([10, 20, 30])

print(x)"
398,"Write a NumPy program to check whether each element of a given array starts with ""P"". ","import numpy as np
x1 = np.array(['Python', 'PHP', 'JS', 'examples', 'html'], dtype=np.str)
print(""\nOriginal Array:"")
print(x1)
print(""Test if each element of the said array starts with 'P':"")
r = np.char.startswith(x1, ""P"")
print(r)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

if arr[0] == 'P':
    print(""First element starts with 'P'"")
else:
    print(""First element does not start with 'P'"")

if arr[-1] == 'P':
    print(""Last element starts with 'P'"")
else:
    print(""Last element does not"
399,Write a Pandas program to construct a DataFrame using the MultiIndex levels as the column and index. ,"import pandas as pd 
import numpy as np
sales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'],
          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]
sales_tuples = list(zip(*sales_arrays))
print(""Create a MultiIndex:"")
sales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])
print(sales_tuples)
print(""\nConstruct a Dataframe using the said MultiIndex levels: "")
df = pd.DataFrame(np.random.randn(8, 5), index=sales_index)
print(df)
","import pandas as pd

df = pd.DataFrame(
    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]],
    index=['a', 'b', 'c', 'd'],
    columns=['x', 'y', 'z', 'w']
)

print(df)

# Solution:

# df = pd.DataFrame(
#"
400,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to highlight the entire row in Yellow where a specific column value is greater than 0.5. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
print(""Original array:"")
print(df)
print(""\nDataframe - table style:"")

def highlight_greaterthan(x):
    if x.C > .5:
        return ['background-color: yellow']*5
    else:
        return ['background-color: white']*5 
df.style.apply(highlight_greaterthan, axis=1)
","import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randint(0, 100, size=(10, 4)), columns=['col1', 'col2', 'col3', 'col4'])
df['col5'] = df['col1'] > 0.5
df.head()

# Solution:

# Create a"
401,"a href=""python-conditional-exercise-15.php"" target=""_blank"">Click me to see the sample solution</a>","import re
p= input(""Input your password"")
x = True
while x:  
    if (len(p)<6 or len(p)>12):
        break
    elif not re.search(""[a-z]"",p):
        break
    elif not re.search(""[0-9]"",p):
        break
    elif not re.search(""[A-Z]"",p):
        break
    elif not re.search(""[$#@]"",p):
        break
    elif re.search(""\s"",p):
        break
    else:
        print(""Valid Password"")
        x=False
        break

if x:
    print(""Not a Valid Password"")
","<pre>

a = 10

if a > 5:
    print(""a is greater than 5"")

if a > 5:
    print(""a is greater than 5"")

if a > 5:
    print(""a is greater than 5"")

if a > 5:
    print(""a is greater than 5"")

if a > 5:
    print(""a is greater than 5"")

if a >"
402,"Write a NumPy program to create an array with the values 1, 7, 13, 105 and determine the size of the memory occupied by the array. ","import numpy as np
X = np.array([1, 7, 13, 105])
print(""Original array:"")
print(X)
print(""Size of the memory occupied by the said array:"")
print(""%d bytes"" % (X.size * X.itemsize))
","import numpy as np

arr = np.array([1, 7, 13, 105])
print(arr.size)

""""""

# Solution

import numpy as np

arr = np.array([1, 7, 13, 105])
print(arr.size)

# Python code to solve the following problem:

# Create an array with the values 1, 7, 13, 105 and determine the size"
403,Write a Python program that accepts an integer (n) and computes the value of n+nn+nnn. ,"a = int(input(""Input an integer : ""))
n1 = int( ""%s"" % a )
n2 = int( ""%s%s"" % (a,a) )
n3 = int( ""%s%s%s"" % (a,a,a) )
print (n1+n2+n3)
","def solution(n):
    return n+n+n

print(solution(5))

""""""

def solution(n):
    return n+n+n

print(solution(5))

""""""

def solution(n):
    return n+n+n

print(solution(5))

""""""

def solution(n):
    return n+n+n

print(solution(5))"
404,"Write a Python program to find a tuple, the smallest second index value from a list of tuples. ","x = [(4, 1), (1, 2), (6, 0)]
print(min(x, key=lambda n: (n[1], -n[0])))
","import sys

def smallestSecondIndex(tup):
    # your code goes here
    return tup[1]

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input())

    for t_itr in range(t):
        nt = input().split()

        n = int(nt[0])

        tup = []"
405,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to display the dataframe in table style. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
print(""\nDataframe - table style:"")
# Set CSS properties for th elements in dataframe
th_props = [
  ('font-size', '12px'),
  ('text-align', 'center'),
  ('font-weight', 'bold'),
  ('color', '#6d6d6d'),
  ('background-color', '#f7ffff')
  ]

# Set CSS properties for td elements in dataframe
td_props = [
  ('font-size', '12px')
  ]

# Set table styles
styles = [
  dict(selector=""th"", props=th_props),
  dict(selector=""td"", props=td_props)
  ]
(df.style
        .set_table_styles(styles))
","import pandas as pd

df = pd.DataFrame(
    {'First column': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
     'Second column': [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
     'Third column': [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]})"
406,Write a NumPy program to convert Pandas dataframe to NumPy array with headers. ,"import numpy as np
import pandas as pd
np_array = np.random.rand(12,3)
print(""Original Numpy array:"")
print(np_array)
print(""Type: "",type(np_array))
df = pd.DataFrame(np.random.rand(12,3),columns=['A','B','C'])
print(""\nPanda's DataFrame: "")
print(df)
print(""Type: "",type(df))
","import pandas as pd

df = pd.DataFrame({""A"": [1, 2, 3, 4, 5], ""B"": [10, 20, 30, 40, 50]})

# Convert the dataframe to NumPy array
arr = df.to_numpy()

# Convert the NumPy array to Pandas dataframe
df = pd.DataFrame(arr, columns=[""A"", ""B""])

# Print the dataframe
print("
407,Write a NumPy program to calculate 2p for all elements in a given array. ,"import numpy as np
x = np.array([1., 2., 3., 4.], np.float32)
print(""Original array: "")
print(x)
print(""\n2^p for all the elements of the said array:"")
r1 = np.exp2(x)
r2 = 2 ** x
assert np.allclose(r1, r2)
print(r1)
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(np.sum(a))

# Output:
# [1, 3, 6, 10]

# Explanation:
# The sum of the elements in the array is 1 + 3 + 6 + 10 = 15.

# Note:
# The array is an array of integers.
# The array values are in the range"
408,"Create a dataframe of ten rows, four columns with random values. Write a Pandas program to set dataframe background Color black and font color yellow. ","import pandas as pd
import numpy as np
np.random.seed(24)
df = pd.DataFrame({'A': np.linspace(1, 10, 10)})
df = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],
               axis=1)
df.iloc[0, 2] = np.nan
df.iloc[3, 3] = np.nan
df.iloc[4, 1] = np.nan
df.iloc[9, 4] = np.nan
print(""Original array:"")
print(df)
print(""\nBackground:black - fontcolor:yelow"")
df.style.set_properties(**{'background-color': 'black',
                           'color': 'yellow'})
","import pandas as pd

df = pd.DataFrame(
    {
        'First column': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        'Second column': [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
        'Third column': [21, 22, 23, 24, 25, 26, 27, 28,"
409,Write a NumPy program to extract first and third elements of the first and third rows from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: First and third elements of the first and third rows "")
print(arra_data[::2, ::2])
","import numpy as np

arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(arr[0][2])
print(arr[1][2])
print(arr[2][2])

# Output:
# 5
# 6
# 7
# 8

# Input:
# [[1, 2, 3, 4"
410,"Write a Python program to sum of three given integers. However, if two values are equal sum will be zero. ","def sum(x, y, z):
    if x == y or y == z or x==z:
        sum = 0
    else:
        sum = x + y + z
    return sum

print(sum(2, 1, 2))
print(sum(3, 2, 2))
print(sum(2, 2, 2))
print(sum(1, 2, 3))
","def sum_of_three(a, b, c):
    if a == b == c:
        return 0
    else:
        return a + b + c

print(sum_of_three(1, 2, 3))

""""""

# Solution:

def sum_of_three(a, b, c):
    if a == b == c:
        return 0
    else:
        return a + b + c"
411,Write a Pandas program to sort a MultiIndex of a DataFrame. Also sort on various levels of index. ,"import pandas as pd 
import numpy as np
sales_arrays = [['sale1', 'sale1', 'sale3', 'sale3', 'sale2', 'sale2', 'sale4', 'sale4'],
          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]
sales_tuples = list(zip(*sales_arrays))
sales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])
print(sales_tuples)
print(""\nConstruct a Dataframe using the said MultiIndex levels: "")
df = pd.DataFrame(np.random.randn(8, 5), index=sales_index)
print(df)
print(""\nSort on MultiIndex DataFrame:"")
df1 = df.sort_index()
print(""\nSort on Index level=0 of the DataFrame:"")
df2 = df.sort_index(level=0)
print(df2)
print(""\nSort on Index level=1 of the DataFrame:"")
df2 = df.sort_index(level=1)
print(df2)
print(""\nPass a level name to sort the DataFrame:"")
df3 = df.sort_index(level=""city"")
print(df3)  
","import pandas as pd

df = pd.DataFrame({""A"": [1, 2, 3, 4, 5, 6, 7, 8, 9],
                   ""B"": [10, 11, 12, 13, 14, 15, 16, 17, 18],
                   ""C"": [19, 20, 21, 22, 23, 24, 25, 26, 27]})

df.sort_index(level=0, ascending=True)"
412,"Write a NumPy program to compute sum of all elements, sum of each column and sum of each row of a given array. ","import numpy as np
x = np.array([[0,1],[2,3]])
print(""Original array:"")
print(x)
print(""Sum of all elements:"")
print(np.sum(x))
print(""Sum of each column:"")
print(np.sum(x, axis=0))
print(""Sum of each row:"")
print(np.sum(x, axis=1))
","import numpy as np

arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(arr.sum())
print(arr.sum(axis=0))
print(arr.sum(axis=1))
print(arr.sum(axis=1).reshape(3, 2))

""""""

import numpy as np

arr"
413,"Write a Python program to extract specified number of elements from a given list, which follows each other continuously. ","from itertools import groupby 

def extract_elements(nums, n):
    result = [i for i, j in groupby(nums) if len(list(j)) == n] 
    return result

nums1 = [1, 1, 3, 4, 4, 5, 6, 7]
n = 2
print(""Original list:"")
print(nums1)
print(""Extract 2 number of elements from the said list which follows each other continuously:"") 
print(extract_elements(nums1, n))
nums2 = [0, 1, 2, 3, 4, 4, 4, 4, 5, 7]
n = 4
print(""Original lists:"")
print(nums2)
print(""Extract 4 number of elements from the said list which follows each other continuously:"") 
print(extract_elements(nums2, n))
","def solution(lst):
    count = 0
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            if lst[i] == lst[j]:
                count += 1
    return count

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(solution(lst))

""""""

def solution"
414,Write a Python program to sort a given list of tuples on specified element. ,"def sort_on_specific_item(lst, n):
    result = sorted((lst), key=lambda x: x[n])
    return result   
items = [('item2', 10, 10.12), ('item3', 15, 25.10), ('item1', 11, 24.50),('item4', 12, 22.50)]
print(""Original list of tuples:"")
print(items)
print(""\nSort on 1st element of the tuple of the said list:"")
n = 0
print(sort_on_specific_item(items, n))
print(""\nSort on 2nd element of the tuple of the said list:"")
n = 1
print(sort_on_specific_item(items, n))
print(""\nSort on 3rd element of the tuple of the said list:"")
n = 2
print(sort_on_specific_item(items, n))
","def sort_tuples(tuples):
    # your code goes here
    return sorted(tuples, key=lambda x: x[1])

""""""

def sort_tuples(tuples):
    # your code goes here
    return sorted(tuples, key=lambda x: x[1])

""""""

def sort_tuples(tuples):
    # your code goes here
    return sorted(tuples, key=lambda x: x[1], reverse="
415,Write a NumPy program to move axes of an array to new positions. Other axes remain in their original order. ,"import numpy as np
x = np.zeros((2, 3, 4))
print(np.moveaxis(x, 0, -1).shape)
print(np.moveaxis(x, -1, 0).shape)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

a = np.array([[1, 2, 3], [4, 5, 6]])
print(a)

a = np.array([[1, 2, 3],"
416,Write a Python program to scramble the letters of string in a given list. ,"from random import shuffle

def shuffle_word(text_list):
    text_list = list(text_list)
    shuffle(text_list)
    return ''.join(text_list)

text_list = ['Python', 'list', 'exercises', 'practice', 'solution'] 
print(""Original list:"")
print(text_list)
print(""\nAfter scrambling the letters of the strings of the said list:"")
result =  [shuffle_word(word) for word in text_list]
print(result) 
","def scramble(string, letters):
    for i in range(len(string)):
        if string[i] in letters:
            letters.remove(string[i])
            letters.append(string[i])
    return letters

print(scramble(""abcdefghijklmnopqrstuvwxyz"", [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"","
417,Write a Python program to get the most frequent element in a given list of numbers. ,"def most_frequent(nums):
  return max(set(nums), key = nums.count) 
print(most_frequent([1, 2, 1, 2, 3, 2, 1, 4, 2]))
nums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]
print (""Original list:"")
print(nums)
print(""Item with maximum frequency of the said list:"")
print(most_frequent(nums))
nums = [1, 2, 3, 1, 2, 3, 2, 1, 4, 3, 3]
print (""\nOriginal list:"")
print(nums)
print(""Item with maximum frequency of the said list:"")
print(most_frequent(nums))
","def get_most_frequent(numbers):
    # Write your code here
    return numbers.count(max(numbers))

print(get_most_frequent([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(get_most_frequent([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
print(get_most_frequent([1, 2, 3, 4"
418,"Write a Python program to find the smallest multiple of the first n numbers. Also, display the factors. ","def smallest_multiple(n):
    if (n<=2):
      return n
    i = n * 2
    factors = [number  for number in range(n, 1, -1) if number * 2 > n]
    print(factors)

    while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i
                
print(smallest_multiple(13))
print(smallest_multiple(11))
print(smallest_multiple(2))
print(smallest_multiple(1))
","def smallest_multiple(n):
    factors = []
    for i in range(1, n+1):
        if n % i == 0:
            factors.append(i)
    return min(factors)

print(smallest_multiple(10))

""""""

# Solution:

def smallest_multiple(n):
    factors = []
    for i in range(1, n+1):
        if n % i =="
419,Write a NumPy program to copy data from a given array to another array. ,"import numpy as np
x = np.array([24, 27, 30, 29, 18, 14])
print(""Original array:"")
print(x)
y = np.empty_like (x)
y[:] = x
print(""\nCopy of the said array:"")
print(y)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

c = a.copy()
d = b.copy()

c[0, 0] = 100
d[0, 0] = 100

print(a)
print(b)
print(c)
print(d)

# Output:"
420,Write a Pandas program to split a dataset to group by two columns and then sort the aggregated results within the groups. ,"import pandas as pd
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[70001,70009,70002,70004,70007,70005,70008,70010,70003,70012,70011,70013],
'purch_amt':[150.5,270.65,65.26,110.5,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,3045.6],
'ord_date': ['2012-10-05','2012-09-10','2012-10-05','2012-08-17','2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17','2012-04-25'],
'customer_id':[3001,3001,3005,3001,3005,3001,3005,3001,3005,3001,3005,3005],
'salesman_id': [5002,5005,5001,5003,5002,5001,5001,5006,5003,5002,5007,5001]})
print(""Original Orders DataFrame:"")
print(df)
df_agg = df.groupby(['customer_id','salesman_id']).agg({'purch_amt':sum})
result = df_agg['purch_amt'].groupby(level=0, group_keys=False)
print(""\nGroup on 'customer_id', 'salesman_id' and then sort sum of purch_amt within the groups:"")
print(result.nlargest())
","import pandas as pd
import numpy as np

# Read the data
df = pd.read_csv('../data/data.csv')

# Create a groupby object
groupby = df.groupby(['gender', 'age'])

# Group the data by gender and age
grouped = groupby.aggregate(['mean','sum'])

# Sort the grouped data
grouped.sort_values(by"
421,Write a Python program to find the indexes of all None items in a given list. ,"def relative_order(lst):
    result = [i for i in range(len(lst)) if lst[i] == None]
    return result

nums = [1, None, 5, 4,None, 0, None, None]
print(""Original list:"")
print(nums)
print(""\nIndexes of all None items of the list:"")
print(relative_order(nums))
","def none_indexes(lst):
    for i in range(len(lst)):
        if lst[i] == None:
            print(i)

lst = [1, 2, 3, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None"
422,Write a Python program to split a given multiline string into a list of lines. ,"def split_lines(s):
  return s.split('\n')
print(""Original string:"")
print(""This\nis a\nmultiline\nstring.\n"")
print(""Split the said multiline string into a list of lines:"")
print(split_lines('This\nis a\nmultiline\nstring.\n'))
","def split_lines(string):
    return string.splitlines()

print(split_lines(""This is a multiline string""))

""""""

def split_lines(string):
    return string.splitlines()

print(split_lines(""This is a multiline string""))

""""""

def split_lines(string):
    return string.splitlines()

print(split_lines(""This is a multiline string""))

""""""

def"
423,Write a Python program to write a Python list of lists to a csv file. After writing the CSV file read the CSV file and display the content. ,"import csv
data = [[10,'a1', 1], [12,'a2', 3], [14, 'a3', 5], [16, 'a4', 7], [18, 'a5', 9]]
with open(""temp.csv"", ""w"", newline="""") as f:
   writer = csv.writer(f)
   writer.writerows(data)
with open('temp.csv', newline='') as csvfile:
 data = csv.reader(csvfile, delimiter=' ')
 for row in data:
   print(', '.join(row))
","import csv

with open('solution.csv', 'w', newline='') as csvfile:
    fieldnames = ['first_name', 'last_name', 'age']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    writer.writeheader()
    writer.writerows([{'first_name': 'John', 'last_name': 'Doe',"
424,"Write a Python program to check whether a given string contains a capital letter, a lower case letter, a number and a minimum length using lambda. ","def check_string(str1):
    messg = [
    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',
    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',
    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',
    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]
    result = [x for x in [i(str1) for i in messg] if x != True]
    if not result:
        result.append('Valid string.')
    return result    
s = input(""Input the string: "")
print(check_string(s))
","def is_capital(string):
    if string[0].isupper():
        return True
    elif string[0].islower():
        return True
    elif string[0].isdigit():
        return True
    else:
        return False

print(is_capital(""Python""))
print(is_capital(""PYTHON""))
print(is_capital(""PYTHON""))
print(is"
425,Write a Python program to run an operating system command using the os module. ,"import os
if os.name == ""nt"":
   command = ""dir""
else:
   command = ""ls -l""
os.system(command)
","import os
os.system('ls')

""""""

import os
import sys

def main():
    os.system('ls')

if __name__ == '__main__':
    main()"
426,"Write a Pandas program to create a subtotal of ""Labor Hours"" against MSHA ID from the given excel data (coalpublic2013.xlsx ). ","import pandas as pd
import numpy as np
df = pd.read_excel('E:\coalpublic2013.xlsx')
df_sub=df[[""MSHA ID"",""Labor_Hours""]].groupby('MSHA ID').sum()
df_sub
","1. Create a Pandas dataframe from the excel data.
2. Create a Pandas series from the dataframe.
3. Create a Pandas series from the dataframe.
4. Create a Pandas series from the dataframe.
5. Create a Pandas series from the dataframe.
6. Create a Pandas series from the dataframe.
7. Create a Pandas series from the dataframe.
8."
427,Write a Python program to count the number of rows of a given SQLite table. ,"import sqlite3 
from sqlite3 import Error 
def sql_connection():
    try:
      conn = sqlite3.connect('mydatabase.db')
      return conn
    except Error:
      print(Error)
 
def sql_table(conn):
    cursorObj = conn.cursor()
# Create the table
    cursorObj.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")
    print(""Number of records before inserting rows:"")
    cursor = cursorObj.execute('select * from salesman;')
    print(len(cursor.fetchall()))
# Insert records
    cursorObj.executescript(""""""
    INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);
    INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);
    INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);
    INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);
    INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);
    """""")
    conn.commit()
    print(""\nNumber of records after inserting rows:"")
    cursor = cursorObj.execute('select * from salesman;')
    print(len(cursor.fetchall()))
    
sqllite_conn = sql_connection()
sql_table(sqllite_conn)

if (sqllite_conn):
  sqllite_conn.close()
  print(""\nThe SQLite connection is closed."")
","import sqlite3

conn = sqlite3.connect('data.db')
c = conn.cursor()

c.execute(""""""CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username text,
    password text
)"""""")

c.execute(""""""CREATE TABLE IF NOT EXISTS items (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name text,"
428,Write a Python program to count the frequency of consecutive duplicate elements in a given list of numbers. ,"def count_dups(nums):
    element = []
    freque = []
    if not nums:
        return element
    running_count = 1
    for i in range(len(nums)-1):
        if nums[i] == nums[i+1]:
            running_count += 1
        else:
            freque.append(running_count)
            element.append(nums[i])
            running_count = 1
    freque.append(running_count)
    element.append(nums[i+1])
    return element,freque


nums = [1,2,2,2,4,4,4,5,5,5,5]
print(""Original lists:"")
print(nums)

print(""\nConsecutive duplicate elements and their frequency:"")
print(count_dups(nums))
","def count_duplicate(nums):
    count = 0
    for i in range(len(nums)):
        if nums[i] == nums[i-1]:
            count += 1
    return count

print(count_duplicate([1,2,3,1,2,3]))

""""""

def count_duplicate(nums):
    count = 0
    for i in range(len(nums)"
429,Write a NumPy program to convert a given vector of integers to a matrix of binary representation. ,"import numpy as np
nums = np.array([0, 1, 3, 5, 7, 9, 11, 13, 15])
print(""Original vector:"")
print(nums)
bin_nums = ((nums.reshape(-1,1) & (2**np.arange(8))) != 0).astype(int)
print(""\nBinary representation of the said vector:"")
print(bin_nums[:,::-1])
","import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(a)

# Solution:
a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print(a.reshape(3, 3))

# Solution:
a = np.array([1, 2, 3, 4, 5, 6, 7,"
430,Write a NumPy program to create an empty and a full array. ,"import numpy as np
# Create an empty array
x = np.empty((3,4))
print(x)
# Create a full array
y = np.full((3,3),6)
print(y)
","import numpy as np

a = np.empty(5)
print(a)

b = np.full(5, 10)
print(b)

c = np.arange(5)
print(c)

d = np.arange(5, 10)
print(d)

e = np.arange(5, 10, 2)
print(e)

f = np.arange(5, 10, 2, dtype=np.int64"
431,Write a Python program to find all the h2 tags and list the first four from the webpage python.org. ,"import requests
from bs4 import BeautifulSoup
url = 'https://www.python.org/'
reqs = requests.get(url)
soup = BeautifulSoup(reqs.text, 'lxml')
print(""First four h2 tags from the webpage python.org.:"")
print(soup.find_all('h2')[0:4])

","import urllib.request
import urllib.parse
import urllib.error

def main():
    url = ""http://python.org/""
    print(""Retrieving"", url)
    uh = urllib.request.urlopen(url)
    data = uh.read()
    print(""Retrieved"", len(data), ""characters"")
    print(""Total"", len(data), ""characters"")
    print(""Count:"","
432,Write a Pandas program to check whether only proper case or title case is present in a given column of a DataFrame. ,"import pandas as pd
df = pd.DataFrame({
    'company_code': ['Abcd','EFGF', 'Hhhh', 'abcd', 'EAWQaaa'],
    'date_of_sale ': ['12/05/2002','16/02/1999','25/09/1998','12/02/2022','15/09/1997'],
    'sale_amount': [12348.5, 233331.2, 22.5, 2566552.0, 23.0]})

print(""Original DataFrame:"")
print(df)
print(""\nIs proper case or title case?"")
df['company_code_is_title'] = list(map(lambda x: x.istitle(), df['company_code']))
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': ['a', 'b', 'c', 'd'], 'col2': ['A', 'B', 'C', 'D']})

print(df.loc[df['col1'].str.contains('A')])

# Output:
#     col1    col2
# 0    a    A
# 1    b    B
# 2"
433,"Write a Pandas program to calculate one, two, three business day(s) from a specified date. Also find the next business month end from a specific date. ","import pandas as pd
from pandas.tseries.offsets import *
import datetime
from datetime import datetime, date
dt = datetime(2020, 1, 4)
print(""Specified date:"")
print(dt)
print(""\nOne business day from the said date:"")
obday = dt + BusinessDay()
print(obday)
print(""\nTwo business days from the said date:"")
tbday = dt + 2 * BusinessDay()
print(tbday)
print(""\nThree business days from the said date:"")
thbday = dt + 3 * BusinessDay()
print(thbday)
print(""\nNext business month end from the said date:"")
nbday = dt + BMonthEnd()
print(nbday)
","import pandas as pd
import datetime as dt

# Read the data from the csv file
df = pd.read_csv('data.csv')

# Create a new dataframe with the data
df_new = df.copy()

# Create a new column named 'business_day'
df_new['business_day'] = df_new['date'].dt.day_name"
434,"Write a Pandas program to filter those records where WHO region contains ""Ea"" substring from world alcohol consumption dataset. ","import pandas as pd
# World alcohol consumption data
w_a_con = pd.read_csv('world_alcohol.csv')
print(""World alcohol consumption sample data:"")
print(w_a_con.head())
# Remove NA / NaN values
new_w_a_con = w_a_con.dropna()
print(""\nMatch if  a given column has a particular sub string:"")
print(new_w_a_con[new_w_a_con[""WHO region""].str.contains(""Ea"")])
","import pandas as pd

df = pd.read_csv(""world_alcohol_consumption.csv"")

df = df[df['region'].str.contains('Ea')]

df.to_csv('world_alcohol_consumption_filtered.csv', index=False)

# Solution:

# df = pd.read_csv(""world_alcohol_consumption_filtered.csv"")
# df"
435,Write a Python program to extract single key-value pair of a dictionary in variables. ,"d = {'Red': 'Green'}
(c1, c2), = d.items()
print(c1)
print(c2)
","import json

def extract_key_value(dictionary):
    for key, value in dictionary.items():
        print(key, value)

dictionary = {
    ""name"": ""John"",
    ""age"": 30,
    ""city"": ""New York""
}

extract_key_value(dictionary)

# Output:
# name
# age
# city

# Expected Output:
# name
# age
# city

#"
436,Write a Python program to test whether a passed letter is a vowel or not. ,"def is_vowel(char):
    all_vowels = 'aeiou'
    return char in all_vowels
print(is_vowel('c'))
print(is_vowel('e'))
","def is_vowel(letter):
    if letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o' or letter == 'u':
        return True
    else:
        return False

print(is_vowel('a'))
print(is_vowel('e'))
print(is_vowel('i'))
print(is_vowel('o'))
print(is_vowel('"
437,Write a Python program to generate groups of five consecutive numbers in a list. ,"l = [[5*i + j for j in range(1,6)] for i in range(5)]
print(l)
",">>> import random
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>"
438,rite a Python program to get the unique enumeration values. ,"import enum
class Countries(enum.Enum):
    Afghanistan = 93
    Albania = 355
    Algeria = 213
    Andorra = 376
    Angola = 244
    India = 355
    USA = 213
for result in Countries:
    print('{:15} = {}'.format(result.name, result.value))
","def unique(lst):
    lst = list(set(lst))
    return lst

lst = [1,2,3,4,5,6,7,8,9,10]
print(unique(lst))

""""""

# Solution:

def unique(lst):
    lst = list(set(lst))
    return lst

lst = [1,2,3,4,5,6,7,8,9,10"
439,Write a Python program to find the class wise roll number from a tuple-of-tuples. ,"from collections import defaultdict
classes = (
    ('V', 1),
    ('VI', 1),
    ('V', 2),
    ('VI', 2),
    ('VI', 3),
    ('VII', 1),
)

class_rollno = defaultdict(list)

for class_name, roll_id in classes:
    class_rollno[class_name].append(roll_id)

print(class_rollno)
","roll_number = (
    (1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
    (10, 11, 12, 13, 14, 15, 16, 17, 18, 19),
    (20, 21, 22, 23, 24, 25, 26, 27, 28, 29),
    (30, 31, 32, 33, 34, 35, 36, 37, 38, 39),
    (40, 41, 42, 43"
440,"Write a Python program to generate a list, containing the Fibonacci sequence, up until the nth term. ","def fibonacci_nums(n):
  if n <= 0:
    return [0]
  sequence = [0, 1]
  while len(sequence) <= n:
    next_value = sequence[len(sequence) - 1] + sequence[len(sequence) - 2]
    sequence.append(next_value)
  return sequence
print(""First 7 Fibonacci numbers:"")
print(fibonacci_nums(7))
print(""\nFirst 15 Fibonacci numbers:"")
print(fibonacci_nums(15))
print(""\nFirst 50 Fibonacci numbers:"")
print(fibonacci_nums(50))
","def fibonacci(n):
    a, b = 0, 1
    for i in range(n):
        print(a, end="" "")
        a, b = b, a + b
    print()

fibonacci(10)

""""""

def fibonacci(n):
    a, b = 0, 1
    for i in range(n):
        print(a, end="" "")
        a, b"
441,Write a python program to find the next previous palindrome of a specified number. ,"def Previous_Palindrome(num):
    for x in range(num-1,0,-1):
        if str(x) == str(x)[::-1]:
            return x
print(Previous_Palindrome(99));
print(Previous_Palindrome(1221));
","def next_palindrome(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    if n == 2:
        return 2
    if n == 3:
        return 3
    if n == 4:
        return 4
    if n == 5:
        return 5
    if n == 6:
        return 6
    if n == 7:
        return 7
    if n == 8:
        return 8"
442,Write a Python program to convert true to 1 and false to 0. ,"x = 'true'
x = int(x == 'true')
print(x)
x = 'abcd'
x = int(x == 'true')
print(x)
","def true_false(x):
    if x == 1:
        return 1
    else:
        return 0

print(true_false(1))
print(true_false(0))

""""""

# Solution 1

def true_false(x):
    if x == 1:
        return 1
    else:
        return 0

print(true_false(1))
print(true_false(0))

# Solution 2

def true_false(x"
443,Write a Python program to remove specific words from a given list using lambda. ,"def remove_words(list1, remove_words):
    result = list(filter(lambda word: word not in remove_words, list1))
    return result
        
colors = ['orange', 'red', 'green', 'blue', 'white', 'black']
remove_colors = ['orange','black']
print(""Original list:"")
print(colors)
print(""\nRemove words:"")
print(remove_colors)
print(""\nAfter removing the specified words from the said list:"")
print(remove_words(colors, remove_colors))
","def remove_words(words, words_to_remove):
    return [word for word in words if word not in words_to_remove]

print(remove_words(['apple', 'banana', 'carrot', 'apple', 'banana', 'carrot'], ['carrot', 'apple']))

""""""

def remove_words(words, words_to_remove):
    return [word for word in words if word not in words_to_remove]

print("
444,"Write a NumPy program to create a 12x12x4 array with random values and extract any array of shape(6,6,3) from the said array. ","import numpy as np 
nums = np.random.random((8,8,3))
print(""Original array:"")
print(nums)
print(""\nExtract array of shape (6,6,3) from the said array:"")
new_nums = nums[:6, :6, :]
print(new_nums)
","import numpy as np

a = np.random.randint(0,10,(12,12,4))
print(a)

# Solution:

# a = np.random.randint(0,10,(12,12,4))
# print(a)
# print(a.shape)
# print(a.ndim)
# print(a.size)"
445,Write a Pandas program to check the equality of two given series. ,"import pandas as pd
nums1 = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])
nums2 = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])
print(""Original Series:"")
print(nums1)
print(nums2)
print(""Check 2 series are equal or not?"")
print(nums1 == nums2)
","solution = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

solution.eq(solution)

""""""

import pandas as pd
import numpy as np

solution = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

solution.eq(solution)

""""""

# Solution:

solution = pd.Series(["
446,Write a NumPy program to compute the factor of a given array by Singular Value Decomposition. ,"import numpy as np
a = np.array([[1, 0, 0, 0, 2], [0, 0, 3, 0, 0], [0, 0, 0, 0, 0], [0, 2, 0, 0, 0]], dtype=np.float32)
print(""Original array:"")
print(a)
U, s, V = np.linalg.svd(a, full_matrices=False)
q, r = np.linalg.qr(a)
print(""Factor of a given array  by Singular Value Decomposition:"")
print(""U=\n"", U, ""\ns=\n"", s, ""\nV=\n"", V)
","import numpy as np

def factor(arr):
    # compute singular values
    s = np.linalg.svd(arr, compute_uv=False)
    # compute singular vectors
    u, s, v = s[0], s[1], s[2]
    # compute factor
    return np.dot(u, v)

arr = np.array([[1, 2, 3], [4, 5, 6], [7,"
447,"Write a Pandas program to extract a single row, rows and a specific value from a MultiIndex levels DataFrame. ","import pandas as pd 
import numpy as np
sales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'],
          ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]
sales_tuples = list(zip(*sales_arrays))
sales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])
print(sales_tuples)
print(""\nConstruct a Dataframe using the said MultiIndex levels: "")
df = pd.DataFrame(np.random.randn(8, 5), index=sales_index)
print(df)

print(""\nExtract a single row from the said dataframe:"")
print(df.loc[('sale2', 'city2')])
print(""\nExtract a single row from the said dataframe:"")
print(df.loc[('sale2', 'city2')])

print(""\nExtract number of rows from the said dataframe:"")
print(df.loc['sale1'])
print(""\nExtract number of rows from the said dataframe:"")
print(df.loc['sale3'])

print(""\nExtract a single value from the said dataframe:"")
print(df.loc[('sale1', 'city2'), 1])
print(""\nExtract a single value from the said dataframe:"")
print(df.loc[('sale4', 'city1'), 4])
","import pandas as pd

# Create a DataFrame
df = pd.DataFrame({'A': [1, 2, 3, 4, 5],
                   'B': [10, 20, 30, 40, 50],
                   'C': ['a', 'b', 'c', 'd', 'e']})

# Create a MultiIndex
df.index = pd.MultiIndex.from_tuples([('A', 1), ('A"
448,Write a Pandas program to calculate the total number of missing values in a DataFrame. ,"import pandas as pd
import numpy as np
pd.set_option('display.max_rows', None)
#pd.set_option('display.max_columns', None)
df = pd.DataFrame({
'ord_no':[np.nan,np.nan,70002,np.nan,np.nan,70005,np.nan,70010,70003,70012,np.nan,np.nan],
'purch_amt':[np.nan,270.65,65.26,np.nan,948.5,2400.6,5760,1983.43,2480.4,250.45, 75.29,np.nan],
'ord_date': [np.nan,'2012-09-10',np.nan,np.nan,'2012-09-10','2012-07-27','2012-09-10','2012-10-10','2012-10-10','2012-06-27','2012-08-17',np.nan],
'customer_id':[np.nan,3001,3001,np.nan,3002,3001,3001,3004,3003,3002,3001,np.nan]})
print(""Original Orders DataFrame:"")
print(df)
print(""\nTotal number of missing values of the said DataFrame:"")
result = df.isna().sum().sum()
print(result)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [1, 2, 3, 4, 5]})
print(df.isnull().sum())

# Solution:

# df = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [1, 2, 3, 4, 5]})
# print(df"
449,Write a Python program to sum all amicable numbers from 1 to specified numbers. ,"def amicable_numbers_sum(limit):
    if not isinstance(limit, int):
        return ""Input is not an integer!""

    if limit < 1:
        return ""Input must be bigger than 0!""

    amicables = set()

    for num in range(2, limit+1):
        if num in amicables:
            continue

        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])
        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)

    return sum(amicables)


print(amicable_numbers_sum(9999))
print(amicable_numbers_sum(999))
print(amicable_numbers_sum(99))
","def sum_amicable_numbers(n):
    sum = 0
    for i in range(1, n + 1):
        if i % 2 == 0:
            sum += i
        else:
            if i % 3 == 0:
                sum += i
    return sum

print(sum_amicable_numbers(100))

""""""

def sum_amicable_numbers(n):
    sum = 0
    for i in range(1, n +"
450,Write a Python program to remove newline characters from a file. ,"def remove_newlines(fname):
    flist = open(fname).readlines()
    return [s.rstrip('\n') for s in flist]

print(remove_newlines(""test.txt""))
","import os

def remove_newline(file_name):
    with open(file_name, 'r') as f:
        data = f.read()
        data = data.replace('\n', '')
        data = data.replace('\r', '')
        data = data.replace('\t', '')
        data = data.replace('\xa0', '')
        data = data.replace('\u2028', '')
        data = data.replace('\"
451,Write a NumPy program to find the most frequent value in an array. ,"import numpy as np
x = np.random.randint(0, 10, 40)
print(""Original array:"")
print(x)
print(""Most frequent value in the above array:"")
print(np.bincount(x).argmax())
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(np.max(arr))

# Output:
# 10

# Explanation:
# The most frequent value is 10.

# ----------------------------------------------------------------------------------------------------------------------

# Solution:

# import numpy as np

# arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9"
452,Write a Python program to find all lower and upper mixed case combinations of a given string. ,"import itertools
def combination(str1):
    result = map(''.join, itertools.product(*((c.lower(), c.upper()) for c in str1)))
    return list(result)
st =""abc""
print(""Original string:"")
print(st)
print(""All lower and upper mixed case combinations of the said string:"")
print(combination(st))
st =""w3r""
print(""\nOriginal string:"")
print(st)
print(""All lower and upper mixed case combinations of the said string:"")
print(combination(st))
st =""Python""
print(""\nOriginal string:"")
print(st)
print(""All lower and upper mixed case combinations of the said string:"")
print(combination(st))
","def get_lower_upper_mixed_case(string):
    lower_mixed_case = []
    upper_mixed_case = []
    for i in string:
        if i.islower():
            lower_mixed_case.append(i)
        elif i.isupper():
            upper_mixed_case.append(i)
    return lower_mixed_case, upper_mixed_case

print(get_lower_upper"
453,Write a Pandas program to extract items at given positions of a given series. ,"import pandas as pd
num_series = pd.Series(list('2390238923902390239023'))
element_pos = [0, 2, 6, 11, 21]
print(""Original Series:"")
print(num_series)
result = num_series.take(element_pos)
print(""\nExtract items at given positions of the said series:"")
print(result)
","import pandas as pd

# Read the data from the file
df = pd.read_csv(""data.csv"")

# Extract the items at the given positions
print(df.iloc[:, 0:2])

# Extract the items at the given positions
print(df.iloc[:, 0:2, 2])

# Extract the items at the given positions
print(df.iloc[:, 0:2, 3])

# Extract the items at the given"
454,"Write a Python program to find the nested lists elements, which are present in another list using lambda. ","def intersection_nested_lists(l1, l2):
    result = [list(filter(lambda x: x in l1, sublist)) for sublist in l2]
    return result
nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
nums2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]
print(""\nOriginal lists:"")
print(nums1)
print(nums2)
print(""\nIntersection of said nested lists:"")
print(intersection_nested_lists(nums1, nums2))
","def nested_list_elements(lst):
    result = []
    for i in lst:
        if type(i) is list:
            result.extend(nested_list_elements(i))
        else:
            result.append(i)
    return result

lst = [[1,2,3],[4,5,6],[7,8,9]]
print(nested_list_elements(lst))"
455,Write a NumPy program to extract all the elements of the first and fourth columns from a given (4x4) array. ,"import numpy as np
arra_data = np.arange(0,16).reshape((4, 4))
print(""Original array:"")
print(arra_data)
print(""\nExtracted data: All the elements of the first and fourth columns "")
print(arra_data[:, [0,3]])
","import numpy as np

a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12],
              [13, 14, 15, 16]])

print(a[0:2, 0:3])

# Output:
[[1 2 3]
 [5 6 7]
 [9 10 11]
 [13 14 15]]"
456,Write a Python program to check whether it follows the sequence given in the patterns array. ,"def is_samePatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True

print(is_samePatterns([""red"", 
 ""green"", 
 ""green""], [""a"", 
 ""b"", 
 ""b""])) 

print(is_samePatterns([""red"", 
 ""green"", 
 ""greenn""], [""a"", 
 ""b"", 
 ""b""])) 
","def check_sequence(patterns, sequence):
    for i in range(len(sequence)):
        if sequence[i] not in patterns:
            return False
    return True

print(check_sequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

""""""

def check_sequence(patterns, sequence):
    for i"
457,"Write a Python program to create a dictionary of keys x, y, and z where each key has as value a list from 11-20, 21-30, and 31-40 respectively. Access the fifth value of each key from the dictionary. ","from pprint import pprint
dict_nums = dict(x=list(range(11, 20)), y=list(range(21, 30)), z=list(range(31, 40)))
pprint(dict_nums)
print(dict_nums[""x""][4])
print(dict_nums[""y""][4])
print(dict_nums[""z""][4])
for k,v in dict_nums.items():
   print(k, ""has value"", v)
","def solution(x, y, z):
    d = {11: [], 21: [], 31: [], 41: []}
    for i in range(x, z + 1):
        d[i].append(i)
    for i in range(x, z + 1):
        d[i].append(i)"
458,Write a Pandas program to create a yearly time period from a specified year and display the properties of this period. ,"import pandas as pd
ytp = pd.Period('2020','A-DEC')
print(""Yearly time perid:"",ytp)
print(""\nAll the properties of the said period:"")
print(dir(ytp))
","import pandas as pd
import numpy as np

# Create a dataframe from the csv file
df = pd.read_csv('data.csv')

# Create a new column named 'year'
df['year'] = df['date'].dt.year

# Create a new column named'month'
df['month'] = df['date'].dt.month

# Create a new column named 'day'
df['day']"
459,Write a Python program to set the indentation of the first line. ,"import textwrap
sample_text ='''
Python is a widely used high-level, general-purpose, interpreted, dynamic
programming language. Its design philosophy emphasizes code readability,
and its syntax allows programmers to express concepts in fewer lines of
code than possible in languages such as C++ or Java.
    '''

text1 =  textwrap.dedent(sample_text).strip()
print()
print(textwrap.fill(text1,
                    initial_indent='',
                    subsequent_indent=' ' * 4,
                    width=80,
                    ))
print()
",">>> indent(1)
>>> indent(2)
>>> indent(3)
>>> indent(4)
>>> indent(5)
>>> indent(6)
>>> indent(7)
>>> indent(8)
>>> indent(9)
>>> indent(10)
>>> indent(11)
>>> indent(12)
>>> indent(13)
>>> indent(14)
>>> indent(15)
>>> indent(16)
>>> indent(17)
>>> indent(18)
>>> indent(19)"
460,Write a NumPy program to reverse an array (first element becomes last). ,"import numpy as np
import numpy as np
x = np.arange(12, 38)
print(""Original array:"")
print(x)
print(""Reverse array:"")
x = x[::-1]
print(x)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

arr.reverse()

print(arr)

# Output:
# [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

# Hint: You can use the built-in reverse function.

# Time complexity: O(n)
# Space Complexity: O(1)

#"
461,Write a Python program to display the examination schedule. (extract the date from exam_st_date). ,"exam_st_date = (11,12,2014)
print( ""The examination will start from : %i / %i / %i""%exam_st_date)
","Sample Output:

Enter exam_st_date: 02/03/2021
Examination Schedule:
2021-03-02

Explanation:

The examination will occur on 02/03/2021.

""""""

exam_st_date = input(""Enter exam_st_date: "")

print(""Examination Schedule:"")

print(exam_st_date[0:2])

print(""\nExplan"
462,Write a Python program to count number of non-empty substrings of a given string. ,"def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); 

str1 = input(""Input a string: "")
print(""Number of substrings:"") 
print(number_of_substrings(str1))
","def count_substring(string, sub_string):
    count = 0
    for i in range(len(string)):
        if string[i:i+len(sub_string)] == sub_string:
            count += 1
    return count

# driver code
string = ""ABCDCDC""
sub_string = ""CDC""
print(count_substring(string, sub_string))

# This code is contributed by Nikhil Kumar Singh(nickz"
463,Write a Pandas program to change the order of index of a given series. ,"import pandas as pd
s = pd.Series(data = [1,2,3,4,5], index = ['A', 'B', 'C','D','E'])
print(""Original Data Series:"")
print(s)
s = s.reindex(index = ['B','A','C','D','E'])
print(""Data Series after changing the order of index:"")
print(s)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'Name': ['Alisa', 'Bethany', 'Cathrine', 'Evelyn'],
                   'Age': [21, 32, 23, 33],
                   'Score': [76, 65, 56, 78]})

# Create a series
s = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])"
464,Write a NumPy program to compute the cross product of two given vectors. ,"import numpy as np
p = [[1, 0], [0, 1]]
q = [[1, 2], [3, 4]]
print(""original matrix:"")
print(p)
print(q)
result1 = np.cross(p, q)
result2 = np.cross(q, p)
print(""cross product of the said two vectors(p, q):"")
print(result1)
print(""cross product of the said two vectors(q, p):"")
print(result2)
","x = np.array([[1, 2, 3], [4, 5, 6]])
y = np.array([[7, 8, 9], [10, 11, 12]])

The cross product of two vectors is:
[[1, 4, 9],
 [4, 1, 12],
 [9, 4, 1]]

""""""

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

#"
465,Write a Python program to remove None value from a given list. ,"def remove_none(nums):
    result = [x for x in nums if x is not None]
    return result
nums = [12, 0, None, 23, None, -55, 234, 89, None, 0, 6, -12]
print(""Original list:"")
print(nums)
print(""\nRemove None value from the said list:"")
print(remove_none(nums))
","def remove_none(lst):
    for i in range(len(lst)):
        if lst[i] is None:
            lst.pop(i)
    return lst

lst = [1, 2, 3, None, None, 4, 5, 6, 7, 8, 9, 10]
print(remove_none(lst))

""""""

# Solution:

def remove_none(lst):
    for i in range(len(l"
466,Write a Python program to print a nested lists (each list on a new line) using the print() function. ,"colors = [['Red'], ['Green'], ['Black']]
print('\n'.join([str(lst) for lst in colors]))
","python nested_list.py

""""""

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19"
467,Write a Python program to search a specific item in a given doubly linked list and return true if the item is found otherwise return false. ,"class Node(object):
    # Singly linked node
    def __init__(self, data=None, next=None, prev=None):
        self.data = data
        self.next = next
        self.prev = prev

class doubly_linked_list(object):
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def append_item(self, data):
        # Append an item 
        new_item = Node(data, None, None)
        if self.head is None:
            self.head = new_item
            self.tail = self.head
        else:
            new_item.prev = self.tail
            self.tail.next = new_item
            self.tail = new_item
        self.count += 1
    
    def iter(self):
        # Iterate the list
        current = self.head
        while current:
            item_val = current.data
            current = current.next
            yield item_val

    def print_foward(self):
        for node in self.iter():
            print(node)   
        
    def search_item(self, val):
         for node in self.iter():
            if val == node:
                return True
         return False

items = doubly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')
items.append_item('SQL')

print(""Original list:"")
items.print_foward()
print(""\n"")
if items.search_item('SQL'):
    print(""True"")
else:
    print(""False"")

if items.search_item('C+'):
    print(""True"")
else:
    print(""False"")
","def search(head, item):
    if head is None:
        return False
    if head.data == item:
        return True
    return search(head.next, item)

# Test
# head = Node(1)
# head.next = Node(2)
# head.next.next = Node(3)
# head.next.next.next = Node(4)
# head.next.next.next"
468,Write a NumPy program to convert (in sequence depth wise (along third axis)) two 1-D arrays into a 2-D array. ,"import numpy as np
a = np.array([[10],[20],[30]])
b = np.array([[40],[50],[60]])
c = np.dstack((a, b))
print(c)
","import numpy as np

a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

print(a)
print(b)

# Solution:

# a = np.array([[1, 2, 3], [4, 5, 6]])
# b = np.array(["
469,Write a Pandas program to check whether two given words present in a specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],
    'address': ['9910 Surrey Ave.','92 N. Bishop Ave.','9910 Golden Star Ave.', '102 Dunbar St.', '17 West Livingston Court']
    })
print(""Original DataFrame:"")
print(df)
def test_and_cond(text):
    result = re.findall(r'(?=.*Ave.)(?=.*9910).*', text) 
    return "" "".join(result)
df['check_two_words']=df['address'].apply(lambda x : test_and_cond(x))
print(""\nPresent two words!"")
print(df)
","import pandas as pd

df = pd.DataFrame({'Name': ['Rolf', 'Charlie', 'Anna', 'Bob', 'Jen', 'Sue'],
                   'Score': [87, 95, 100, 100, 100, 100]})

print(df['Name'].str.contains('Rolf'))

# Solution:

import pandas as pd

df = pd.DataFrame({'Name': ['R"
470,Write a Python program to create a dictionary grouping a sequence of key-value pairs into a dictionary of lists. Use collections module. ,"from collections import defaultdict
def grouping_dictionary(l):
    d = defaultdict(list)
    for k, v in l:
        d[k].append(v)
    return d
colors = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
print(""Original list:"")
print(colors)
print(""\nGrouping a sequence of key-value pairs into a dictionary of lists:"")
print(grouping_dictionary(colors))
","def create_dict(key_list):
    dict_of_key_value_pairs = {}
    for key in key_list:
        dict_of_key_value_pairs[key] = []
    return dict_of_key_value_pairs

print(create_dict([1, 2, 3, 4, 5]))

""""""

# Solution:

def create_dict(key_list):"
471,"Write a NumPy program totest element-wise for complex number, real number of a given array. Also test whether a given number is a scalar type or not. ","import numpy as np
a = np.array([1+1j, 1+0j, 4.5, 3, 2, 2j])
print(""Original array"")
print(a)
print(""Checking for complex number:"")
print(np.iscomplex(a))
print(""Checking for real number:"")
print(np.isreal(a))
print(""Checking for scalar type:"")
print(np.isscalar(3.1))
print(np.isscalar([3.1]))
","import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([1, 2, 3, 4, 5])
c = np.array([1, 2, 3, 4, 5])

print(np.all(a == b))
print(np.all(a == c))

# Output:
# True
# True"
472,Write a Pandas program to create a time series object with a time zone. ,"import pandas as pd
print(""Timezone: Europe/Berlin:"")
print(""Using pytz:"")
date_pytz = pd.Timestamp('2019-01-01', tz = 'Europe/Berlin')
print(date_pytz.tz)  
print(""Using dateutil:"")
date_util = pd.Timestamp('2019-01-01', tz = 'dateutil/Europe/Berlin')
print(date_util.tz)
print(""\nUS/Pacific:"")
print(""Using pytz:"")
date_pytz = pd.Timestamp('2019-01-01', tz = 'US/Pacific')
print(date_pytz.tz)  
print(""Using dateutil:"")
date_util = pd.Timestamp('2019-01-01', tz = 'dateutil/US/Pacific')
print(date_util.tz)
","import pandas as pd

# Create a time series object
ts = pd.Series(range(1, 101), index=pd.date_range('1/1/2000', periods=100))

# Create a time series object with a time zone
ts_tz = ts.tz_localize('Asia/Kolkata')

# Create a time series object with a time zone
ts_tz_2 = ts.tz_localize('Asia/Kolkata', ambiguous='Na"
473,Write a NumPy program to check whether a Numpy array contains a specified row. ,"import numpy as np
num = np.arange(20)
arr1 = np.reshape(num, [4, 5])
print(""Original array:"")
print(arr1)
print([0, 1, 2, 3, 4] in arr1.tolist())
print([0, 1, 2, 3, 5] in arr1.tolist())
print([15, 16, 17, 18, 19] in arr1.tolist())
","import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

if arr[0, 0] == 1:
    print(""Row 0 contains 1"")
else:
    print(""Row 0 does not contain 1"")

if arr[1, 1] == 2:
    print(""Row 1 contains 2"")
else:
    print(""Row 1 does not contain 2"")

if arr["
474,Write a NumPy program to check whether the NumPy array is empty or not. ,"import numpy as np
x = np.array([2, 3])
y = np.array([])
# size 2, array is not empty
print(x.size)
# size 0, array is empty
print(y.size)
","import numpy as np

arr = np.array([1, 2, 3, 4, 5])

if arr.size == 0:
    print(""Array is empty"")
else:
    print(""Array is not empty"")

# Output:
# Array is empty
# Array is not empty

# Solution:
# import numpy as np
#
# arr = np.array([1, 2, 3, 4, 5])
#
# if arr.size == 0"
475,Write a Python program that accepts a comma separated sequence of words as input and prints the unique words in sorted form (alphanumerically). ,"items = input(""Input comma separated sequence of words"")
words = [word for word in items.split("","")]
print("","".join(sorted(list(set(words)))))
","import collections

def main():
    words = input(""Enter the words separated by a comma: "").split("","")
    print(sorted(set(words)))

if __name__ == ""__main__"":
    main()

# OUTPUT:
# Enter the words separated by a comma: a,b,c,d,e,f,g,h,i,j,k,l,m,n,o"
476,Write a Python program to set a new value of an item in a singly linked list using index value. ,"class Node:
    # Singly linked node
    def __init__(self, data=None):
        self.data = data
        self.next = None
class singly_linked_list:
    def __init__(self):
        # Createe an empty list
        self.tail = None
        self.head = None
        self.count = 0

    def append_item(self, data):
        #Append items on the list
        node = Node(data)
        if self.head:
            self.head.next = node
            self.head = node
        else:
            self.tail = node
            self.head = node
        self.count += 1
    
    def __getitem__(self, index):
        if index > self.count - 1:
            return ""Index out of range""
        current_val = self.tail
        for n in range(index):
            current_val = current_val.next
        return current_val.data
    
    def __setitem__(self, index, value):
        if index > self.count - 1:
            raise Exception(""Index out of range."")
        current = self.tail
        for n in range(index):
            current = current.next
        current.data = value

items = singly_linked_list()
items.append_item('PHP')
items.append_item('Python')
items.append_item('C#')
items.append_item('C++')
items.append_item('Java')

print(""Modify items by index:"")
items[1] = ""SQL""
print(""New value: "",items[1])
items[4] = ""Perl""
print(""New value: "",items[4])
","def set_item(item, index):
    new_item = item
    new_index = index
    new_node = Node(new_item)
    new_node.next = head
    head = new_node
    index = new_index
    return head, index

# Code to test the above function
item = 'item'
index = 0
head, index = set_item(item, index)
print(head.data, index)"
477,Write a Python program to update a specific column value of a given table and select all rows before and after updating the said table. ,"import sqlite3 
from sqlite3 import Error 
def sql_connection():
    try:
      conn = sqlite3.connect('mydatabase.db')
      return conn
    except Error:
      print(Error) 
def sql_table(conn):
    cursorObj = conn.cursor()
# Create the table
    cursorObj.execute(""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));"")
# Insert records
    cursorObj.executescript(""""""
    INSERT INTO salesman VALUES(5001,'James Hoog', 'New York', 0.15);
    INSERT INTO salesman VALUES(5002,'Nail Knite', 'Paris', 0.25);
    INSERT INTO salesman VALUES(5003,'Pit Alex', 'London', 0.15);
    INSERT INTO salesman VALUES(5004,'Mc Lyon', 'Paris', 0.35);
    INSERT INTO salesman VALUES(5005,'Paul Adam', 'Rome', 0.45);
    """""")    
    cursorObj.execute(""SELECT * FROM salesman"")
    rows = cursorObj.fetchall()
    print(""Agent details:"")
    for row in rows:
        print(row)
    print(""\nUpdate commission .15 to .45 where id is 5003:"")
    sql_update_query = """"""Update salesman set commission = .45 where salesman_id = 5003""""""
    cursorObj.execute(sql_update_query)
    conn.commit()
    print(""Record Updated successfully "")    
    cursorObj.execute(""SELECT * FROM salesman"")
    rows = cursorObj.fetchall()
    print(""\nAfter updating Agent details:"")
    for row in rows:
        print(row)
sqllite_conn = sql_connection()
sql_table(sqllite_conn)
if (sqllite_conn):
  sqllite_conn.close()
  print(""\nThe SQLite connection is closed."")
","# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

#"
478,Write a Python program to find the k,"class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

def kth_smallest(root, k):
    stack = []
    while root or stack:
        while root:
            stack.append(root)
            root = root.left
        root = stack.pop()
        k -= 1
        if k == 0:
            break
        root = root.right
    return root.val

root = TreeNode(8)  
root.left = TreeNode(5)  
root.right = TreeNode(14) 
root.left.left = TreeNode(4)  
root.left.right = TreeNode(6) 
root.left.right.left = TreeNode(8)  
root.left.right.right = TreeNode(7)  
root.right.right = TreeNode(24) 
root.right.right.left = TreeNode(22)  

print(kth_smallest(root, 2))
print(kth_smallest(root, 3))
","def kth_largest(arr, n, k):
    return arr[k-1]

def kth_smallest(arr, n, k):
    return arr[n-k]

def kth_largest_and_smallest(arr, n, k):
    return kth_largest(arr, n, k), kth_smallest(arr, n, k)

def kth_largest_and_smallest_recursive(arr, n, k):
    if n == 0 or k"
479,Write a Pandas program to count year-country wise frequency of reporting dates of unidentified flying object(UFO). ,"import pandas as pd
df = pd.read_csv(r'ufo.csv')
df['Date_time'] = df['Date_time'].astype('datetime64[ns]')
print(""Original Dataframe:"")
print(df.head())
df['Year'] = df['Date_time'].apply(lambda x: ""%d"" % (x.year))
result = df.groupby(['Year', 'country']).size()
print(""\nCountry-year wise frequency of reporting dates of UFO:"")
print(result)
","import pandas as pd

# Read the data
df = pd.read_csv('/Users/srinivasan/Downloads/airline_data.csv')

# Create a new dataframe with only the columns that are required
df_new = df[['Origin','Destination','Reporting_Airline','Reporting_Airline_Code','Reporting_Airline_Name','Reporting_Airline_State','Reporting_Airline_Country','Reporting_Air"
480,Write a Python program to create an iterator that returns consecutive keys and groups from an iterable. ,"import itertools as it
print(""Iterate over characters of a string and display\nconsecutive keys and groups from the iterable:"")
str1 = 'AAAAJJJJHHHHNWWWEERRRSSSOOIIU'
data_groupby = it.groupby(str1)
for key, group in data_groupby:
    print('Key:', key)
    print('Group:', list(group))    
print(""\nIterate over elements of a list and display\nconsecutive keys and groups from the iterable:"")
str1 = 'AAAAJJJJHHHHNWWWEERRRSSSOOIIU'    
str1 = [1,2,2,3,4,4,5,5,5,6,6,7,7,7,8]
data_groupby = it.groupby(str1)
for key, group in data_groupby:
    print('Key:', key)
    print('Group:', list(group))
",">>> from collections import Counter
>>> from itertools import groupby
>>>
>>> def group_keys(iterable):
...     return groupby(iterable, key=lambda x: x[0])
>>>
>>> def group_values(iterable):
...     return groupby(iterable, key=lambda x: x[1])
>>>
>>> def group_values_by_key(iterable):
...     return groupby(iterable, key=lambda x: x"
481,Write a Python program to remove all the elements of a given deque object. ,"import collections
odd_nums = (1,3,5,7,9)
odd_deque  = collections.deque(odd_nums)
print(""Original Deque object with odd numbers:"")
print(odd_deque)
print(""Deque length: %d""%(len(odd_deque)))
odd_deque.clear()
print(""Deque object after removing all numbers-"")
print(odd_deque)
print(""Deque length:%d""%(len(odd_deque)))
","import collections

class Deque:
    def __init__(self):
        self.items = collections.deque()

    def isEmpty(self):
        return self.items == collections.deque()

    def addFront(self, item):
        self.items.append(item)

    def addRear(self, item):
        self.items.insert(0, item)

    def removeFront(self):
        return self.items.pop()

    def"
482,"Write a NumPy program to create an array of 4,5 shape and swap column1 with column4. ","import numpy as np
array_nums = np.arange(20).reshape(4,5)
print(""Original array:"")
print(array_nums)
print(""\nAfter swapping column1 with column4:"")
array_nums[:,[0,3]] = array_nums[:,[3,0]]
print(array_nums)
","import numpy as np

arr = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])
arr[:,1] = arr[:,4]
arr[:,2] = arr[:,5]
arr[:,3] = arr[:,6]
arr[:,4] = arr[:,1]
arr[:,5] = arr[:,2]
arr[:,6]"
483,Write a Pandas program to create a TimeSeries to display all the Sundays of given year. ,"import pandas as pd
result = pd.Series(pd.date_range('2020-01-01', periods=52, freq='W-SUN'))
print(""All Sundays of 2019:"")
print(result)
","import pandas as pd

# Create a DataFrame with the following columns:
# 'year', 'weekday', 'day_of_week', 'day_of_year'
# 'weekday', 'day_of_week', 'day_of_year'
# 'weekday', 'day_of_week', 'day_of_year'
# 'weekday', 'day_of_week', 'day_of_year'
# 'weekday', '"
484,Write a Python function that takes a list and returns a new list with unique elements of the first list. ,"def unique_list(l):
  x = []
  for a in l:
    if a not in x:
      x.append(a)
  return x

print(unique_list([1,2,3,3,3,3,4,5])) 
","def unique_list(lst):
    new_lst = []
    for i in lst:
        if i not in new_lst:
            new_lst.append(i)
    return new_lst

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(unique_list(lst))

""""""

def unique_list(lst):
    new_"
485,Write a Python program to write a Python dictionary to a csv file. After writing the CSV file read the CSV file and display the content. ,"import csv
csv_columns = ['id','Column1', 'Column2', 'Column3', 'Column4', 'Column5']
dict_data = {'id':['1', '2', '3'],
    'Column1':[33, 25, 56],
    'Column2':[35, 30, 30],
    'Column3':[21, 40, 55],
    'Column4':[71, 25, 55],
    'Column5':[10, 10, 40], }
csv_file = ""temp.csv""
try:
   with open(csv_file, 'w') as csvfile:
       writer = csv.DictWriter(csvfile, fieldnames=csv_columns)
       writer.writeheader()
       for data in dict_data:
           writer.writerow(dict_data)
except IOError:
   print(""I/O error"")
data = csv.DictReader(open(csv_file))
print(""CSV file as a dictionary:\n"")
for row in data:
   print(row)
","import csv

with open('solution.csv', 'w', newline='') as solution:
    solution_writer = csv.writer(solution)
    solution_writer.writerow(['Name', 'Age', 'Salary'])
    solution_writer.writerow(['John', '25', '$100'])
    solution_writer.writerow(['Anna', '25', '"
486,"Write a Python program to find the indices of elements of a given list, greater than a specified value. ","def test(lst, value):
    result = [i for i,val in enumerate(lst) if val > value]
    return result
nums = [1234, 1522, 1984, 19372, 1000, 2342, 7626]
print(""\nOriginal list:"")
print(nums)
val = 3000
print(""Indices of elements of the said list, greater than"",val)
print(test(nums,val))
nums = [1234, 1522, 1984, 19372, 1000, 2342, 7626]
print(""\nOriginal list:"")
print(nums)
val = 20000
print(""Indices of elements of the said list, greater than"",val)
print(test(nums,val))
","def solution(lst, x):
    for i in range(len(lst)):
        if lst[i] > x:
            return i
    return -1

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
x = 10
print(solution(lst, x))

""""""

def solution(lst, x):
    for i in range(len(lst"
487,Write a NumPy program to test whether each element of a 1-D array is also present in a second array. ,"import numpy as np
array1 = np.array([0, 10, 20, 40, 60])
print(""Array1: "",array1)
array2 = [0, 40]
print(""Array2: "",array2)
print(""Compare each element of array1 and array2"")
print(np.in1d(array1, array2))
","import numpy as np

arr1 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
arr2 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

print(arr1.size)
print(arr2.size)

if arr1.size == arr2.size:
    print(""All elements are present in both arrays"
488,"Write a Python program to determine the largest and smallest integers, longs, floats. ","import sys
print(""Float value information: "",sys.float_info)
print(""\nInteger value information: "",sys.int_info)
print(""\nMaximum size of an integer: "",sys.maxsize) 
","def get_largest_and_smallest(numbers):
    largest = numbers[0]
    smallest = numbers[0]
    for number in numbers:
        if number > largest:
            largest = number
        if number < smallest:
            smallest = number
    return largest, smallest

print(get_largest_and_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

# OUTPUT:
#"
489,Write a Pandas program to extract numbers greater than 940 from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],
    'address': ['7277 Surrey Ave.1111','920 N. Bishop Ave.','9910 Golden Star St.', '1025 Dunbar St.', '1700 West Livingston Court']
    })
print(""Original DataFrame:"")
print(df)
def test_num_great(text): 
    result = re.findall(r'95[5-9]|9[6-9]\d|[1-9]\d{3,}',text)
    return "" "".join(result)
df['num_great']=df['address'].apply(lambda x : test_num_great(x))
print(""\nNumber greater than 940:"")
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

print(df)

# Solution:

# df = pd.read_csv('https://raw.githubusercontent.com/pcm-dpc/"
490,"Write a Python program to print a long text, convert the string to a list and print all the words and their frequencies. ","string_words = '''United States Declaration of Independence
From Wikipedia, the free encyclopedia
The United States Declaration of Independence is the statement
adopted by the Second Continental Congress meeting at the Pennsylvania State
House (Independence Hall) in Philadelphia on July 4, 1776, which announced
that the thirteen American colonies, then at war with the Kingdom of Great
Britain, regarded themselves as thirteen independent sovereign states, no longer
under British rule. These states would found a new nation  the United States of
America. John Adams was a leader in pushing for independence, which was passed
on July 2 with no opposing vote cast. A committee of five had already drafted the
formal declaration, to be ready when Congress voted on independence.

John Adams persuaded the committee to select Thomas Jefferson to compose the original
draft of the document, which Congress would edit to produce the final version.
The Declaration was ultimately a formal explanation of why Congress had voted on July
2 to declare independence from Great Britain, more than a year after the outbreak of
the American Revolutionary War. The next day, Adams wrote to his wife Abigail: ""The
Second Day of July 1776, will be the most memorable Epocha, in the History of America.""
But Independence Day is actually celebrated on July 4, the date that the Declaration of
Independence was approved.

After ratifying the text on July 4, Congress issued the Declaration of Independence in
several forms. It was initially published as the printed Dunlap broadside that was widely
distributed and read to the public. The source copy used for this printing has been lost,
and may have been a copy in Thomas Jefferson's hand.[5] Jefferson's original draft, complete
with changes made by John Adams and Benjamin Franklin, and Jefferson's notes of changes made
by Congress, are preserved at the Library of Congress. The best-known version of the Declaration
is a signed copy that is displayed at the National Archives in Washington, D.C., and which is
popularly regarded as the official document. This engrossed copy was ordered by Congress on
July 19 and signed primarily on August 2.

The sources and interpretation of the Declaration have been the subject of much scholarly inquiry.
The Declaration justified the independence of the United States by listing colonial grievances against
King George III, and by asserting certain natural and legal rights, including a right of revolution.
Having served its original purpose in announcing independence, references to the text of the
Declaration were few in the following years. Abraham Lincoln made it the centerpiece of his rhetoric
(as in the Gettysburg Address of 1863) and his policies. Since then, it has become a well-known statement
on human rights, particularly its second sentence:

We hold these truths to be self-evident, that all men are created equal, that they are endowed by their
Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness.

This has been called ""one of the best-known sentences in the English language"", containing ""the most potent
and consequential words in American history"". The passage came to represent a moral standard to which
the United States should strive. This view was notably promoted by Abraham Lincoln, who considered the
Declaration to be the foundation of his political philosophy and argued that it is a statement of principles
through which the United States Constitution should be interpreted.

The U.S. Declaration of Independence inspired many other similar documents in other countries, the first
being the 1789 Declaration of Flanders issued during the Brabant Revolution in the Austrian Netherlands
(modern-day Belgium). It also served as the primary model for numerous declarations of independence across
Europe and Latin America, as well as Africa (Liberia) and Oceania (New Zealand) during the first half of the
19th century.'''

word_list = string_words.split()

word_freq = [word_list.count(n) for n in word_list]

print(""String:\n {} \n"".format(string_words))
print(""List:\n {} \n"".format(str(word_list)))
print(""Pairs (Words and Frequencies:\n {}"".format(str(list(zip(word_list, word_freq)))))
","def main():
    s = ""Hello World""
    l = s.split()
    print(l)
    print(len(l))
    print(l[0])
    print(l[1])
    print(l[2])
    print(l[3])
    print(l[4])
    print(l[5])
    print(l[6])
    print(l[7])
    print(l"
491,Write a Pandas program to extract numbers less than 100 from the specified column of a given DataFrame. ,"import pandas as pd
import re as re
pd.set_option('display.max_columns', 10)
df = pd.DataFrame({
    'company_code': ['c0001','c0002','c0003', 'c0003', 'c0004'],
    'address': ['72 Surrey Ave.11','92 N. Bishop Ave.','9910 Golden Star St.', '102 Dunbar St.', '17 West Livingston Court']
    })
print(""Original DataFrame:"")
print(df)

def test_num_less(n):
    nums = []
    for i in n.split():
        result = re.findall(r'\b(0*(?:[1-9][0-9]?|100))\b',i)
        nums.append(result)
        all_num=["","".join(x) for x in nums if x != []]
    return "" "".join(all_num)

df['num_less'] = df['address'].apply(lambda x : test_num_less(x))
print(""\nNumber less than 100:"")
print(df)
","import pandas as pd

df = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'col2': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

print(df.loc[df['col2'] < 100])

""""""

import pandas as pd

df = pd.DataFrame({'col"
492,Write a Pandas program to split the following dataframe into groups and count unique values of 'value' column. ,"import pandas as pd
df = pd.DataFrame({
    'id': [1, 1, 2, 3, 3, 4, 4, 4],
    'value': ['a', 'a', 'b', None, 'a', 'a', None, 'b']
})
print(""Original DataFrame:"")
print(df)
print(""Count unique values:"")
print (df.groupby('value')['id'].nunique())
","df = pd.DataFrame({'value': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'group': ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']})

df.groupby('group').count()

df.groupby('group').agg({'value': 'count'})

df.groupby('group')."
493,"Write a Python program to compute the sum of elements of a given array of integers, use map() function. ","from array import array
def array_sum(nums_arr):
    sum_n = 0
    for n in nums_arr:
        sum_n += n
    return sum_n

nums = array('i', [1, 2, 3, 4, 5, -15])
print(""Original array:"",nums)
nums_arr = list(map(int, nums))
result = array_sum(nums_arr)
print(""Sum of all elements of the said array:"")
print(result)
","def sum_of_elements(arr):
    return sum(map(int, arr))

print(sum_of_elements([1, 2, 3, 4, 5]))

""""""

# Solution 1

def sum_of_elements(arr):
    return sum(map(int, arr))

print(sum_of_elements([1, 2, 3, 4, 5]))

# Solution 2

def sum"
494,Write a Python program to convert a given string into a list of words. ,"str1 = ""The quick brown fox jumps over the lazy dog.""
print(str1.split(' '))
str1 = ""The-quick-brown-fox-jumps-over-the-lazy-dog.""
print(str1.split('-'))
","s = ""Hello World""
print(s.split())

""""""

s = ""Hello World""
print(s.split())

""""""

s = ""Hello World""
print(s.split())

""""""

s = ""Hello World""
print(s.split())

""""""

s = ""Hello World""
print(s.split())

""""""

s = ""Hello World""
print(s.split())

""""""

s = ""Hello"
495,Write a Python program to display a given decimal value in scientific notation. Use decimal.Decimal,"import decimal
#Source: https://bit.ly/2SfZEtL
def format_e(n):
    a = '%E' % n
    return a.split('E')[0].rstrip('0').rstrip('.') + 'E' + a.split('E')[1]

print(""Original decimal value: ""+ ""40800000000.00000000000000"")
print(""Scientific notation of the said decimal value:"")
print(format_e(decimal.Decimal('40800000000.00000000000000')))
print(""\nOriginal decimal value: ""+ ""40000000000.00000000000000"")
print(""Scientific notation of the said decimal value:"")
print(format_e(decimal.Decimal('40000000000.00000000000000')))
print(""\nOriginal decimal value: ""+ ""40812300000.00000000000000"")
print(""Scientific notation of the said decimal value:"")
print(format_e(decimal.Decimal('40812300000.00000000000000')))
",">>> import decimal
>>> print(decimal.Decimal(1.1))
1.1
>>> print(decimal.Decimal(1.1).as_integer_ratio())
(1, 1)
>>> print(decimal.Decimal(1.1).as_integer_ratio().limit_denominator(1000))
(1, 1)
>>> print(decimal.Decimal(1.1).as_integer_ratio().limit_denominator"
496,Write a Python program to create a list by concatenating a given list which range goes from 1 to n. ,"my_list = ['p', 'q']
n = 4
new_list = ['{}{}'.format(x, y) for y in range(1, n+1) for x in my_list]
print(new_list)
","def solution(n):
    lst = []
    for i in range(1, n+1):
        lst.append(i)
    return lst

print(solution(5))

# Output: [1, 2, 3, 4, 5]

# Time complexity: O(n)
# Space Complexity: O(n)

# Runtime: 32 ms (96.41%)
# Memory Usage: 14.2 MB"
497,Write a Python program to find the index of an item in a specified list. ,"num =[10, 30, 4, -6]
print(num.index(30))
","def index(list, item):
    for i in range(len(list)):
        if list[i] == item:
            return i
    return -1

print(index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))

""""""

def index(list, item):
    for i in range(len(list)):
        if list[i] == item:
            return i
    return -1"
498,Write a Pandas program to generate time series combining day and intraday offsets intervals. ,"import pandas as pd
dateset1 = pd.date_range('2029-01-01 00:00:00', periods=20, freq='3h10min')
print(""Time series with frequency 3h10min:"")
print(dateset1)
dateset2 = pd.date_range('2029-01-01 00:00:00', periods=20, freq='1D10min20U')
print(""\nTime series with frequency 1 day 10 minutes and 20 microseconds:"")
print(dateset2)
","import pandas as pd

# Create a dataframe
df = pd.DataFrame({'day': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                   'intraday': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})

# Create a time series
ts = df.groupby('day').sum()

# Create a time series
ts = df.groupby('"
499,Write a Python program to print the following integers with zeros on the left of specified width. ,"x = 3
y = 123
print(""\nOriginal Number: "", x)
print(""Formatted Number(left padding, width 2): ""+""{:0>2d}"".format(x));
print(""Original Number: "", y)
print(""Formatted Number(left padding, width 6): ""+""{:0>6d}"".format(y));
print()
","# Solution 1:
print(""\nSolution 1:"")
print(""\n"".join([""{:>2}"".format(i) for i in range(10)]))

# Solution 2:
print(""\nSolution 2:"")
print(""\n"".join([""{:>2}"".format(i) for i in range(10)]))

# Solution 3:
print(""\nSolution 3:"")
print(""\n"".join([""{:"
